/*! For license information please see main.e0a188002352f0607c3d.js.LICENSE.txt */
(self.webpackChunkapp=self.webpackChunkapp||[]).push([[179],{87652:function(e,n,t){"use strict";var r=t(67294),o=t(20745),i=t(95998),a=t(93379),c=t.n(a),l=t(7795),s=t.n(l),u=t(90569),f=t.n(u),p=t(3565),d=t.n(p),y=t(19216),h=t.n(y),m=t(44589),b=t.n(m),A=t(51424),v={};v.styleTagTransform=b(),v.setAttributes=d(),v.insert=f().bind(null,"head"),v.domAPI=s(),v.insertStyleElement=h(),c()(A.Z,v),A.Z&&A.Z.locals&&A.Z.locals,t(56831);var g=t(39087),x={};x.styleTagTransform=b(),x.setAttributes=d(),x.insert=f().bind(null,"head"),x.domAPI=s(),x.insertStyleElement=h(),c()(g.Z,x),g.Z&&g.Z.locals&&g.Z.locals;var j=(0,r.createContext)({getSearchTargets:null}),C=(0,r.createContext)({settings:null,openSettingsDialog:null}),w=t(45697),E=t.n(w),O=t(85893);function k(e){return k="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},k(e)}var S=["name","className","collection"];function B(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function P(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==k(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==k(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===k(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}var I={brands:"fab",default:"fa",solid:"fas",round:"far"};function T(e){var n=e.name,t=e.className,r=e.collection,o=function(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}(e,S),i=I[r],a="fa-".concat(n);return(0,O.jsx)("span",function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?B(Object(t),!0).forEach((function(n){P(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):B(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}({className:[t,i,a].join(" ")},o))}T.propTypes={name:E().string.isRequired,className:E().string,collection:E().string},T.defaultProps={collection:"default",className:""};var L=T;function D(e){return D="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},D(e)}var R=["collection","icon","text","children","onClick"];function N(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function _(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?N(Object(t),!0).forEach((function(n){M(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):N(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function M(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==D(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==D(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===D(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Y(e){var n=e.collection,t=e.icon,r=e.text,o=e.children,i=e.onClick,a=function(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}(e,R);return(0,O.jsxs)("button",_(_({onClick:i},a),{},{children:[(0,O.jsx)(L,{collection:n,name:t})," ",r||o]}))}var q=t(96486),Z=t(63105),K=t.n(Z),U=t(27361),G=t.n(U),z=t(41609),W=t.n(z),F=t(24350),X=t.n(F),V=t(35161),Q=t.n(V),H=t(50361),J=t.n(H);function $(e){return e&&["1","on","yes","true"].includes(e.toString().toLowerCase())}var ee="https://zmk-keymap-editor.fly.dev",ne=$("true"),te=$("false"),re=$("true");function oe(e){return oe="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},oe(e)}function ie(){ie=function(){return e};var e={},n=Object.prototype,t=n.hasOwnProperty,r=Object.defineProperty||function(e,n,t){e[n]=t.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function l(e,n,t){return Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}),e[n]}try{l({},"")}catch(e){l=function(e,n,t){return e[n]=t}}function s(e,n,t,o){var i=n&&n.prototype instanceof p?n:p,a=Object.create(i.prototype),c=new E(o||[]);return r(a,"_invoke",{value:x(e,t,c)}),a}function u(e,n,t){try{return{type:"normal",arg:e.call(n,t)}}catch(e){return{type:"throw",arg:e}}}e.wrap=s;var f={};function p(){}function d(){}function y(){}var h={};l(h,i,(function(){return this}));var m=Object.getPrototypeOf,b=m&&m(m(O([])));b&&b!==n&&t.call(b,i)&&(h=b);var A=y.prototype=p.prototype=Object.create(h);function v(e){["next","throw","return"].forEach((function(n){l(e,n,(function(e){return this._invoke(n,e)}))}))}function g(e,n){function o(r,i,a,c){var l=u(e[r],e,i);if("throw"!==l.type){var s=l.arg,f=s.value;return f&&"object"==oe(f)&&t.call(f,"__await")?n.resolve(f.__await).then((function(e){o("next",e,a,c)}),(function(e){o("throw",e,a,c)})):n.resolve(f).then((function(e){s.value=e,a(s)}),(function(e){return o("throw",e,a,c)}))}c(l.arg)}var i;r(this,"_invoke",{value:function(e,t){function r(){return new n((function(n,r){o(e,t,n,r)}))}return i=i?i.then(r,r):r()}})}function x(e,n,t){var r="suspendedStart";return function(o,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw i;return{value:void 0,done:!0}}for(t.method=o,t.arg=i;;){var a=t.delegate;if(a){var c=j(a,t);if(c){if(c===f)continue;return c}}if("next"===t.method)t.sent=t._sent=t.arg;else if("throw"===t.method){if("suspendedStart"===r)throw r="completed",t.arg;t.dispatchException(t.arg)}else"return"===t.method&&t.abrupt("return",t.arg);r="executing";var l=u(e,n,t);if("normal"===l.type){if(r=t.done?"completed":"suspendedYield",l.arg===f)continue;return{value:l.arg,done:t.done}}"throw"===l.type&&(r="completed",t.method="throw",t.arg=l.arg)}}}function j(e,n){var t=n.method,r=e.iterator[t];if(void 0===r)return n.delegate=null,"throw"===t&&e.iterator.return&&(n.method="return",n.arg=void 0,j(e,n),"throw"===n.method)||"return"!==t&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+t+"' method")),f;var o=u(r,e.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,f;var i=o.arg;return i?i.done?(n[e.resultName]=i.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=void 0),n.delegate=null,f):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,f)}function C(e){var n={tryLoc:e[0]};1 in e&&(n.catchLoc=e[1]),2 in e&&(n.finallyLoc=e[2],n.afterLoc=e[3]),this.tryEntries.push(n)}function w(e){var n=e.completion||{};n.type="normal",delete n.arg,e.completion=n}function E(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(C,this),this.reset(!0)}function O(e){if(e){var n=e[i];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,o=function n(){for(;++r<e.length;)if(t.call(e,r))return n.value=e[r],n.done=!1,n;return n.value=void 0,n.done=!0,n};return o.next=o}}return{next:k}}function k(){return{value:void 0,done:!0}}return d.prototype=y,r(A,"constructor",{value:y,configurable:!0}),r(y,"constructor",{value:d,configurable:!0}),d.displayName=l(y,c,"GeneratorFunction"),e.isGeneratorFunction=function(e){var n="function"==typeof e&&e.constructor;return!!n&&(n===d||"GeneratorFunction"===(n.displayName||n.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,y):(e.__proto__=y,l(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},e.awrap=function(e){return{__await:e}},v(g.prototype),l(g.prototype,a,(function(){return this})),e.AsyncIterator=g,e.async=function(n,t,r,o,i){void 0===i&&(i=Promise);var a=new g(s(n,t,r,o),i);return e.isGeneratorFunction(t)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},v(A),l(A,c,"Generator"),l(A,i,(function(){return this})),l(A,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var n=Object(e),t=[];for(var r in n)t.push(r);return t.reverse(),function e(){for(;t.length;){var r=t.pop();if(r in n)return e.value=r,e.done=!1,e}return e.done=!0,e}},e.values=O,E.prototype={constructor:E,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(w),!e)for(var n in this)"t"===n.charAt(0)&&t.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function r(t,r){return a.type="throw",a.arg=e,n.next=t,r&&(n.method="next",n.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var c=t.call(i,"catchLoc"),l=t.call(i,"finallyLoc");if(c&&l){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(e,n){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&t.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=n&&n<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=n,i?(this.method="next",this.next=i.finallyLoc,f):this.complete(a)},complete:function(e,n){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&n&&(this.next=n),f},finish:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.finallyLoc===e)return this.complete(t.completion,t.afterLoc),w(t),f}},catch:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.tryLoc===e){var r=t.completion;if("throw"===r.type){var o=r.arg;w(t)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,t){return this.delegate={iterator:O(e),resultName:n,nextLoc:t},"next"===this.method&&(this.arg=void 0),f}},e}function ae(e,n,t,r,o,i,a){try{var c=e[i](a),l=c.value}catch(e){return void t(e)}c.done?n(l):Promise.resolve(l).then(r,o)}function ce(e){return function(){var n=this,t=arguments;return new Promise((function(r,o){var i=e.apply(n,t);function a(e){ae(i,r,o,a,c,"next",e)}function c(e){ae(i,r,o,a,c,"throw",e)}a(void 0)}))}}function le(){return se.apply(this,arguments)}function se(){return(se=ce(ie().mark((function e(){var n,r,o;return ie().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Promise.resolve().then(t.t.bind(t,95130,23));case 2:return n=e.sent,r=n.behaviorSchemas,o=n.behaviorBindings,e.abrupt("return",{behaviors:r,bindings:o});case 6:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function ue(){return(ue=ce(ie().mark((function e(){var n,r;return ie().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,t.e(712).then(t.t.bind(t,52779,23));case 2:return n=e.sent,r=n.keycodes,e.abrupt("return",r);case 5:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function fe(){return(fe=ce(ie().mark((function e(){var n,r;return ie().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,t.e(712).then(t.t.bind(t,52779,23));case 2:return n=e.sent,r=n.keycodeGlyphs,e.abrupt("return",r);case 5:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function pe(){return de.apply(this,arguments)}function de(){return(de=ce(ie().mark((function e(){var n;return ie().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,fetch("".concat(ee,"/v2/local/keyboards"));case 2:return n=e.sent,e.abrupt("return",n.json());case 4:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function ye(e){return he.apply(this,arguments)}function he(){return(he=ce(ie().mark((function e(n){var t,r,o,i;return ie().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t="v2/local/keyboards/".concat(encodeURIComponent(n)),r="".concat(ee,"/").concat(t),e.next=4,fetch(r);case 4:if((o=e.sent).ok){e.next=9;break}throw(i=new Error).response=o,i;case 9:return e.abrupt("return",o.json());case 10:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function me(e,n){return be.apply(this,arguments)}function be(){return be=ce(ie().mark((function e(n,t){var r,o,i;return ie().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r="v2/local/keyboards/".concat(encodeURIComponent(n),"/keymap"),o="".concat(ee,"/").concat(r),e.next=4,fetch(o,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});case 4:return i=e.sent,e.abrupt("return",i.json());case 6:case"end":return e.stop()}}),e)}))),be.apply(this,arguments)}function Ae(e,n){var t="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!t){if(Array.isArray(e)||(t=ve(e))||n&&e&&"number"==typeof e.length){t&&(e=t);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,c=!1;return{s:function(){t=t.call(e)},n:function(){var e=t.next();return a=e.done,e},e:function(e){c=!0,i=e},f:function(){try{a||null==t.return||t.return()}finally{if(c)throw i}}}}function ve(e,n){if(e){if("string"==typeof e)return ge(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?ge(e,n):void 0}}function ge(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function xe(e){return(n=e,function(e){if(Array.isArray(e))return ge(e)}(n)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(n)||ve(n)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()).sort((function(e,n){return e.length-n.length}))[0];var n}var je=/^(.+?)\((code)\)$/;function Ce(e){return e.reduce((function(e,n){var t,r=n.description,o=n.context,i=n.symbol,a=n.faIcon,c=n.names.filter((function(e){return!e.match(je)})),l=xe(c),s=n.names.map((function(e){return e.match(je)})).filter((function(e){return!!e}))[0],u={name:l,aliases:c,description:r,context:o,faIcon:a,symbol:i||l,params:[]},f=Ae(c);try{for(f.s();!(t=f.n()).done;){var p=t.value;e.push(Object.assign({},u,{code:p,isModifier:!!s}))}}catch(e){f.e(e)}finally{f.f()}return s&&e.push(Object.assign({},u,{code:s[1],params:s[2].split(",")})),e}),[])}function we(e){return we="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},we(e)}function Ee(){Ee=function(){return e};var e={},n=Object.prototype,t=n.hasOwnProperty,r=Object.defineProperty||function(e,n,t){e[n]=t.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function l(e,n,t){return Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}),e[n]}try{l({},"")}catch(e){l=function(e,n,t){return e[n]=t}}function s(e,n,t,o){var i=n&&n.prototype instanceof p?n:p,a=Object.create(i.prototype),c=new E(o||[]);return r(a,"_invoke",{value:x(e,t,c)}),a}function u(e,n,t){try{return{type:"normal",arg:e.call(n,t)}}catch(e){return{type:"throw",arg:e}}}e.wrap=s;var f={};function p(){}function d(){}function y(){}var h={};l(h,i,(function(){return this}));var m=Object.getPrototypeOf,b=m&&m(m(O([])));b&&b!==n&&t.call(b,i)&&(h=b);var A=y.prototype=p.prototype=Object.create(h);function v(e){["next","throw","return"].forEach((function(n){l(e,n,(function(e){return this._invoke(n,e)}))}))}function g(e,n){function o(r,i,a,c){var l=u(e[r],e,i);if("throw"!==l.type){var s=l.arg,f=s.value;return f&&"object"==we(f)&&t.call(f,"__await")?n.resolve(f.__await).then((function(e){o("next",e,a,c)}),(function(e){o("throw",e,a,c)})):n.resolve(f).then((function(e){s.value=e,a(s)}),(function(e){return o("throw",e,a,c)}))}c(l.arg)}var i;r(this,"_invoke",{value:function(e,t){function r(){return new n((function(n,r){o(e,t,n,r)}))}return i=i?i.then(r,r):r()}})}function x(e,n,t){var r="suspendedStart";return function(o,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw i;return{value:void 0,done:!0}}for(t.method=o,t.arg=i;;){var a=t.delegate;if(a){var c=j(a,t);if(c){if(c===f)continue;return c}}if("next"===t.method)t.sent=t._sent=t.arg;else if("throw"===t.method){if("suspendedStart"===r)throw r="completed",t.arg;t.dispatchException(t.arg)}else"return"===t.method&&t.abrupt("return",t.arg);r="executing";var l=u(e,n,t);if("normal"===l.type){if(r=t.done?"completed":"suspendedYield",l.arg===f)continue;return{value:l.arg,done:t.done}}"throw"===l.type&&(r="completed",t.method="throw",t.arg=l.arg)}}}function j(e,n){var t=n.method,r=e.iterator[t];if(void 0===r)return n.delegate=null,"throw"===t&&e.iterator.return&&(n.method="return",n.arg=void 0,j(e,n),"throw"===n.method)||"return"!==t&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+t+"' method")),f;var o=u(r,e.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,f;var i=o.arg;return i?i.done?(n[e.resultName]=i.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=void 0),n.delegate=null,f):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,f)}function C(e){var n={tryLoc:e[0]};1 in e&&(n.catchLoc=e[1]),2 in e&&(n.finallyLoc=e[2],n.afterLoc=e[3]),this.tryEntries.push(n)}function w(e){var n=e.completion||{};n.type="normal",delete n.arg,e.completion=n}function E(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(C,this),this.reset(!0)}function O(e){if(e){var n=e[i];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,o=function n(){for(;++r<e.length;)if(t.call(e,r))return n.value=e[r],n.done=!1,n;return n.value=void 0,n.done=!0,n};return o.next=o}}return{next:k}}function k(){return{value:void 0,done:!0}}return d.prototype=y,r(A,"constructor",{value:y,configurable:!0}),r(y,"constructor",{value:d,configurable:!0}),d.displayName=l(y,c,"GeneratorFunction"),e.isGeneratorFunction=function(e){var n="function"==typeof e&&e.constructor;return!!n&&(n===d||"GeneratorFunction"===(n.displayName||n.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,y):(e.__proto__=y,l(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},e.awrap=function(e){return{__await:e}},v(g.prototype),l(g.prototype,a,(function(){return this})),e.AsyncIterator=g,e.async=function(n,t,r,o,i){void 0===i&&(i=Promise);var a=new g(s(n,t,r,o),i);return e.isGeneratorFunction(t)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},v(A),l(A,c,"Generator"),l(A,i,(function(){return this})),l(A,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var n=Object(e),t=[];for(var r in n)t.push(r);return t.reverse(),function e(){for(;t.length;){var r=t.pop();if(r in n)return e.value=r,e.done=!1,e}return e.done=!0,e}},e.values=O,E.prototype={constructor:E,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(w),!e)for(var n in this)"t"===n.charAt(0)&&t.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function r(t,r){return a.type="throw",a.arg=e,n.next=t,r&&(n.method="next",n.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var c=t.call(i,"catchLoc"),l=t.call(i,"finallyLoc");if(c&&l){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(e,n){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&t.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=n&&n<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=n,i?(this.method="next",this.next=i.finallyLoc,f):this.complete(a)},complete:function(e,n){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&n&&(this.next=n),f},finish:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.finallyLoc===e)return this.complete(t.completion,t.afterLoc),w(t),f}},catch:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.tryLoc===e){var r=t.completion;if("throw"===r.type){var o=r.arg;w(t)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,t){return this.delegate={iterator:O(e),resultName:n,nextLoc:t},"next"===this.method&&(this.arg=void 0),f}},e}function Oe(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function ke(e,n,t,r,o,i,a){try{var c=e[i](a),l=c.value}catch(e){return void t(e)}c.done?n(l):Promise.resolve(l).then(r,o)}var Se=(0,r.createContext)({keycodes:[],behaviours:[],behaviors:{},behaviorBinds:[],glyphs:[]}),Be=function(e){return e.definitions};function Pe(e){var n=e.children,t=(0,i.v9)(Be),o=(0,i.I0)();if((0,r.useEffect)((function(){var e;(e=Ee().mark((function e(){var n,r,i,a,c,l,s;return Ee().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(null===t){e.next=2;break}return e.abrupt("return");case 2:return e.next=4,Promise.all([function(){return ue.apply(this,arguments)}().then(Ce),le(),function(){return fe.apply(this,arguments)}()]);case 4:n=e.sent,f=3,r=function(e){if(Array.isArray(e))return e}(u=n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(u,f)||function(e,n){if(e){if("string"==typeof e)return Oe(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Oe(e,n):void 0}}(u,f)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),i=r[0],a=r[1],c=r[2],l=J()(a.behaviors),s=J()(a.bindings),i.indexed=X()(i,"code"),s.indexed=X()(s,"code"),s.context={none:s.filter((function(e){return!e.context})),macros:K()(s,{context:"macros"})},s.byContext={none:X()(s.context.none,"code"),macros:X()(s.context.macros,"code")},o({type:"DEFINITIONS_SET",definitions:{keycodes:i,behaviours:s,behaviors:l,behaviorBinds:s,glyphs:c}});case 16:case"end":return e.stop()}var u,f}),e)})),function(){var n=this,t=arguments;return new Promise((function(r,o){var i=e.apply(n,t);function a(e){ke(i,r,o,a,c,"next",e)}function c(e){ke(i,r,o,a,c,"throw",e)}a(void 0)}))})()}),[t,o]),t)return(0,O.jsx)(Se.Provider,{value:t,children:n})}var Ie=["children"];function Te(e){return function(e){if(Array.isArray(e))return Le(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,n){if(e){if("string"==typeof e)return Le(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Le(e,n):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Le(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var De=function(e){var n=e.children,t=function(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}(e,Ie).keymap,o=(0,r.useContext)(Se),i=o.keycodes,a=o.behaviours,c=o.glyphs,l=(0,r.useContext)(C).settings,s=(0,r.useMemo)((function(){var e=window.navigator.platform.startsWith("Mac"),n=window.navigator.platform.startsWith("Win"),t=e?"mac":n&&"win";return function(e,n){return(0,q.compact)([e.basic,n.unicode&&e.unicode,"mac"===n.platform&&e.platforms.mac,"win"===n.platform&&e.platforms.win]).reduce((function(e,n){var t,r=Ae(n);try{for(r.s();!(t=r.n()).done;){var o=t.value,i=o.names.filter((function(e){return!e.match(je)})),a=xe(i);e[a]||(e[a]={}),e[a].symbol=e[a].symbol||o.symbol,e[a].faIcon=e[a].faIcon||o.faIcon}}catch(e){r.e(e)}finally{r.f()}return e}),{})}(c,{unicode:G()(l,"unicodeGlyphs",!0),platform:"auto"!==G()(l,"platformGlyphs","auto")?l.platformGlyphs:t})}),[c,l]),u=(0,r.useMemo)((function(){var e=[].concat(Te(a),Te((t.behaviors||[]).map((function(e){return{code:"&".concat(e.labels[0]),bind:"&".concat(e.labels[0]),name:e.name,description:'Custom behavior: "'.concat(e.properties.label.raw||e.name,'"'),params:e.params}}))),Te(t.macros.map((function(e){return{code:"&".concat(e.labels[0]),name:e.name,description:"Custom macro",params:[]}}))));return e.indexed=X()(e,"code"),e.context={none:e.filter((function(e){return!e.context})),macros:K()(e,{context:"macros"})},e.byContext={none:X()(e.context.none,"code"),macros:X()(e.context.macros,"code")},e}),[a,t.behaviors,t.macros]),f=(0,r.useMemo)((function(){return W()(t)?[]:t.layers.map((function(e,n){return{code:n,description:e.name||"Layer ".concat(n)}}))}),[t]),p=(0,r.useMemo)((function(){return{code:i.indexed,behaviours:u.indexed,behavioursByContext:u.byContext,layer:X()(f,"code")}}),[i,u,f]),d=(0,r.useMemo)((function(){return{behaviour:u,code:i}}),[u,i]),y=(0,r.useMemo)((function(){return function(e,n){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"none";return e.enum?e.enum.map((function(e){return{code:e}})):e.raw?[]:"command"===e?G()(p.behavioursByContext,[t,n,"commands"],[]):(d[e]||console.error("cannot find target for",e),"behaviour"===e?d.behaviour.context[t]:d[e])}}),[d,p]),h=(0,r.useMemo)((function(){return[].concat(Te(Q()(i,"code")),Te(Object.keys(t.defines||{})))}),[i,t.defines]);return(0,O.jsx)(j.Provider,{value:{getSearchTargets:y,mergedGlyphs:s,sources:p,identifiers:h},children:n})},Re=t(56281),Ne={};Ne.styleTagTransform=b(),Ne.setAttributes=d(),Ne.insert=f().bind(null,"head"),Ne.domAPI=s(),Ne.insertStyleElement=h(),c()(Re.Z,Ne);var _e=Re.Z&&Re.Z.locals?Re.Z.locals:void 0;function Me(e){return Me="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Me(e)}var Ye=["children","secondary","className"];function qe(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Ze(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?qe(Object(t),!0).forEach((function(n){Ke(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):qe(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Ke(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Me(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Me(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Me(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Ue(e){var n=e.children,t=e.secondary,r=e.className,o=function(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}(e,Ye);return(0,O.jsx)("button",Ze(Ze({className:[r,_e.action,t&&_e.secondary].join(" ")},o),{},{children:n}))}Ue.defaultProps={className:""};var Ge=Ue,ze=t(57557),We=t.n(ze),Fe=t(49502),Xe={};Xe.styleTagTransform=b(),Xe.setAttributes=d(),Xe.insert=f().bind(null,"head"),Xe.domAPI=s(),Xe.insertStyleElement=h(),c()(Fe.Z,Xe);var Ve=Fe.Z&&Fe.Z.locals?Fe.Z.locals:void 0;function Qe(e){return Qe="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Qe(e)}var He=["dismissText","classes","onDismiss","children"];function Je(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function $e(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Je(Object(t),!0).forEach((function(n){en(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Je(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function en(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Qe(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Qe(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Qe(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function nn(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function tn(e){var n,t=e.dismissText,r=void 0===t?"Ok":t,o=e.classes,i=void 0===o?[]:o,a=e.onDismiss,c=e.children,l=function(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}(e,He);return(0,O.jsxs)("div",$e($e({className:[Ve.dialog].concat((n=i,function(e){if(Array.isArray(e))return nn(e)}(n)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(n)||function(e,n){if(e){if("string"==typeof e)return nn(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?nn(e,n):void 0}}(n)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())).join(" ")},l),{},{children:[c,r&&(0,O.jsx)("button",{className:Ve.button,onClick:a,children:r})]}))}var rn=t(73935);function on(e){return on="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},on(e)}function an(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function cn(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?an(Object(t),!0).forEach((function(n){ln(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):an(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function ln(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==on(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==on(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===on(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}var sn={wrapper:{position:"absolute",top:"0",left:"0",width:"100vw",height:"100vh",backgroundColor:"rgba(104, 123, 162, 0.39)",backdropFilter:"blur(1px)",zIndex:"50",display:"flex",justifyContent:"center",alignItems:"center"},centerOnly:{background:"transparent",pointerEvents:"none"},content:{display:"block",pointerEvents:"all"}};function un(e){var n=e.onDismiss,t=e.centerOnly,o=void 0!==t&&t,i=e.children,a=(0,r.useRef)(),c=(0,r.useCallback)((function(e){n&&a.current&&e.target.contains(a.current)&&n()}),[a,n]),l=o?cn(cn({},sn.wrapper),sn.centerOnly):sn.wrapper;return rn.createPortal((0,O.jsx)("div",{onClick:c,style:l,children:(0,O.jsx)("div",{ref:a,style:sn.content,children:i})}),document.getElementById("modal-root"))}un.propTypes={onDismiss:E().func};var fn=un,pn=t(33988),dn={};dn.styleTagTransform=b(),dn.setAttributes=d(),dn.insert=f().bind(null,"head"),dn.domAPI=s(),dn.insertStyleElement=h(),c()(pn.Z,dn);var yn=pn.Z&&pn.Z.locals?pn.Z.locals:void 0;function hn(e){return hn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},hn(e)}var mn=["validator","required","value"];function bn(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function An(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?bn(Object(t),!0).forEach((function(n){vn(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):bn(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function vn(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==hn(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==hn(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===hn(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function gn(e){var n=e.validator,t=e.required,r=void 0!==t&&t,o=e.value,i=void 0===o?"":o,a=function(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}(e,mn),c=n(i)||!i&&r&&"cannot be empty";return(0,O.jsxs)("span",{className:yn.wrapper,children:[(0,O.jsx)("input",An({type:"text",value:i},a)),c&&(0,O.jsx)("span",{className:yn.error,children:c})]})}var xn={useRaw:E().bool,raw:E().string,parsed:E().any},jn={name:E().string.isRequired,labels:E().arrayOf(E().string).isRequired,properties:E().objectOf((function(e,n,t,r,o){try{E().checkPropTypes({propValue:E().shape(xn).isRequired},{propValue:e},r,t)}catch(e){return new Error("Invalid prop `"+o+"` supplied to `"+t+"`. Validation failed.")}})).isRequired};function Cn(e){return e.length>31?"maximum length: 31":e.match(/^[^a-zA-Z]/)?"first character must be a letter":e.match(/[^a-zA-Z0-9,._+-]/)?"valid characters: a-zA-Z0-9,._+-":void 0}var wn=Cn;function En(e){return e.length>31?"maximum length: 31":e.match(/^[^a-zA-Z]/)?"first character must be a letter":e.match(/[^a-zA-Z0-9_]/)?"valid characters: a-zA-Z0-9_":void 0}function On(e){return On="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},On(e)}function kn(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Sn(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?kn(Object(t),!0).forEach((function(n){Bn(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):kn(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Bn(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==On(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==On(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===On(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Pn(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(e,n)||In(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function In(e,n){if(e){if("string"==typeof e)return Tn(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Tn(e,n):void 0}}function Tn(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function Ln(e){var n=e.name,t=e.labels,r=Pn(void 0===t?[]:t,1)[0],o=e.properties.label;return n.toLowerCase()===(r||"").toLowerCase()&&n.toLowerCase()===((null==o?void 0:o.parsed)||"").toLowerCase()}function Dn(e){var n=e.node,t=e.onUpdate,o=Pn((0,r.useState)(Ln(n)),2),i=o[0],a=o[1],c=Pn((0,r.useState)(Ln(n)),2),l=c[0],s=c[1],u=function(e,n,t,o){var i=(0,r.useCallback)((function(t){n(Sn(Sn({},e),{},{name:t.target.value}))}),[e,n]),a=(0,r.useCallback)((function(r){var i,a=r.target.value,c=[a].concat(function(e){if(Array.isArray(e))return Tn(e)}(i=e.labels.slice(1))||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(i)||In(i)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),l=t?a:e.name,s=o?Sn(Sn({},e.properties),{},{label:{parsed:a.toUpperCase(),raw:'"'.concat(a.toUpperCase(),'"'),useRaw:!1}}):e.properties;n(Sn(Sn({},e),{},{name:l,labels:c,properties:s}))}),[e,n,t,o]);return[i,a,(0,r.useCallback)((function(t){return n(Sn(Sn({},e),{},{properties:Sn(Sn({},e.properties),{},{label:Sn(Sn({},e.properties.label),{},{parsed:t.target.value,useRaw:!1})})}))}),[e,n])]}(n,t,i,l),f=Pn(u,3),p=f[0],d=f[1],y=f[2];return(0,O.jsx)("table",{children:(0,O.jsxs)("tbody",{children:[(0,O.jsxs)("tr",{children:[(0,O.jsx)("th",{children:"Bind"}),(0,O.jsx)("td",{children:(0,O.jsx)(gn,{type:"text",value:n.labels[0]||"",required:!0,validator:En,onChange:d})})]}),(0,O.jsxs)("tr",{children:[(0,O.jsx)("th",{children:"Node"}),(0,O.jsxs)("td",{children:[(0,O.jsx)(gn,{value:n.name,required:!0,readOnly:i,disabled:i,validator:Cn,onChange:p}),(0,O.jsxs)("label",{title:"Set automatically using bind name",children:[(0,O.jsx)("input",{type:"checkbox",checked:i,onChange:function(e){return a(e.target.checked)}})," Automatic"]})]})]}),(0,O.jsxs)("tr",{children:[(0,O.jsx)("th",{children:"Label"}),(0,O.jsxs)("td",{children:[(0,O.jsx)(gn,{type:"text",value:n.properties.label.parsed||"",required:!0,readOnly:l,disabled:l,validator:function(){return null},onChange:y}),(0,O.jsxs)("label",{title:"Set automatically using bind name",children:[(0,O.jsx)("input",{type:"checkbox",checked:l,onChange:function(e){return s(e.target.checked)}})," Automatic"]})]})]})]})})}function Rn(e){return Rn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Rn(e)}function Nn(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function _n(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Nn(Object(t),!0).forEach((function(n){Mn(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Nn(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Mn(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Rn(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Rn(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Rn(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Yn(e){var n=e.node;return(0,O.jsxs)("div",{children:[(0,O.jsx)("p",{children:(0,O.jsx)("code",{children:n.properties.compatible.parsed})}),(0,O.jsx)(Dn,_n({},e))]})}Dn.propTypes={node:E().shape(jn).isRequired,onUpdate:E().func.isRequired};var qn=t(34288),Zn={};Zn.styleTagTransform=b(),Zn.setAttributes=d(),Zn.insert=f().bind(null,"head"),Zn.domAPI=s(),Zn.insertStyleElement=h(),c()(qn.Z,Zn);var Kn=qn.Z&&qn.Z.locals?qn.Z.locals:void 0;function Un(e){var n=e.property,t=e.schema;return(0,O.jsxs)(O.Fragment,{children:[(0,O.jsx)("span",{className:Kn.propertyName,title:n,children:n}),t.deprecatedBy&&(0,O.jsx)("sub",{className:Kn.propertyDeprecation,children:"(deprecated)"})]})}function Gn(e){return function(e){if(Array.isArray(e))return zn(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,n){if(e){if("string"==typeof e)return zn(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?zn(e,n):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function zn(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var Wn=65,Fn=5;function Xn(e,n){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return{x:e.x*(Wn+Fn),y:e.y*(Wn+Fn),u:n.u*Wn+Fn*(n.u-1),h:n.h*Wn+Fn*(n.h-1),rx:(e.x-(t.x||e.x))*-(Wn+Fn),ry:(e.y-(t.y||e.y))*-(Wn+Fn),a:t.a||0}}function Vn(e,n,t){var r=Xn(e,n,t),o=r.x,i=r.y,a=r.u,c=r.h,l=r.a,s=r.rx,u=r.ry;return[{x:0,y:0},{x:a,y:0},{x:a,y:c},{x:0,y:c}].map((function(e){var n=e.x-s,t=e.y-u,r=Math.PI*l/180;return{x:s+n*Math.cos(r)-t*Math.sin(r),y:u+t*Math.cos(r)+n*Math.sin(r)}})).map((function(e){return{x:e.x+o,y:e.y+i}}))}function Qn(e){return Qn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Qn(e)}function Hn(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Jn(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Qn(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Qn(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Qn(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function $n(e){return e.map((function(e){return function(e,n,t){var r=Vn(e,n,t),o=Q()(r,"x"),i=Q()(r,"y");return{min:{x:Math.min.apply(Math,Gn(o)),y:Math.min.apply(Math,Gn(i))},max:{x:Math.max.apply(Math,Gn(o)),y:Math.max.apply(Math,Gn(i))}}}({x:e.x,y:e.y},{u:e.u||e.w||1,h:e.h||1},{x:e.rx,y:e.ry,a:e.r})})).reduce((function(e,n){var t=e.x,r=e.y,o=n.max;return{x:Math.max(t,o.x),y:Math.max(r,o.y)}}),{x:0,y:0})}function et(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},t=n.scale,r=void 0===t?1:t,o=n.overrides,i=void 0===o?{}:o,a=Array.isArray(e)?$n(e):e;return function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Hn(Object(t),!0).forEach((function(n){Jn(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Hn(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}({width:"".concat(a.x*r,"px"),height:"".concat(a.y*r,"px"),margin:"0 auto",padding:"0 40px 40px"},i)}var nt=t(78718),tt=t.n(nt),rt=t(87995),ot={};ot.styleTagTransform=b(),ot.setAttributes=d(),ot.insert=f().bind(null,"head"),ot.domAPI=s(),ot.insertStyleElement=h(),c()(rt.Z,ot);var it=rt.Z&&rt.Z.locals?rt.Z.locals:void 0;function at(e){return at="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},at(e)}function ct(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function lt(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?ct(Object(t),!0).forEach((function(n){st(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ct(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function st(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==at(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==at(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===at(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}var ut={x:E().number.isRequired,y:E().number.isRequired},ft={a:E().number,rx:E().number,ry:E().number},pt={u:E().number,h:E().number},dt=E().shape(lt(lt(lt({},ut),ft),pt)),yt=E().arrayOf(dt);function ht(e){return ht="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},ht(e)}var mt=["keyLayout","children"];function bt(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function At(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?bt(Object(t),!0).forEach((function(n){vt(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):bt(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function vt(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==ht(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==ht(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===ht(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}var gt=function(e){return tt()(e,["x","y"])},xt=function(e){return{x:e.rx,y:e.ry,a:e.r}},jt=function(e){var n=e.w,t=void 0===n?1:n,r=e.u,o=void 0===r?t:r,i=e.h;return{u:o,h:void 0===i?1:i}};function Ct(e){var n=e.keyLayout,t=e.children,r=function(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}(e,mt),o=gt(n),i=xt(n),a=jt(n),c=function(e,n,t){var r=Xn(e,n,t),o=r.x,i=r.y,a=r.u,c=r.h,l=r.a,s=r.rx,u=r.ry;return{top:"".concat(i,"px"),left:"".concat(o,"px"),width:"".concat(a,"px"),height:"".concat(c,"px"),transformOrigin:"".concat(s,"px ").concat(u,"px"),transform:"rotate(".concat(l||0,"deg)")}}(o,a,i);return(0,O.jsx)("div",At(At({className:it.placer,style:c,"data-u":a.u,"data-h":a.h},r),{},{children:t}))}Ct.propTypes={scale:E().number,keyLayout:dt.isRequired},Ct.defaultProps={scale:1};var wt=Ct;function Et(e){var n=e.layout,t=e.renderKey,r=e.scale;return(0,O.jsx)("div",{style:{position:"relative",transform:"scale(".concat(r,")"),transformOrigin:0},children:n.map((function(e,n){return(0,O.jsx)(wt,{keyLayout:e,children:t({index:n,keyLayout:e})},n)}))})}Et.propTypes={layout:yt.isRequired,renderKey:E().func.isRequired,scale:E().number},Et.defaultProps={scale:1};var Ot=Et,kt=t(39693),St=t.n(kt),Bt=t(2),Pt={};Pt.styleTagTransform=b(),Pt.setAttributes=d(),Pt.insert=f().bind(null,"head"),Pt.domAPI=s(),Pt.insertStyleElement=h(),c()(Bt.Z,Pt);var It=Bt.Z&&Bt.Z.locals?Bt.Z.locals:void 0;function Tt(e){return Tt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Tt(e)}var Lt=["children","selectable","themeClass","className"];function Dt(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Rt(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Dt(Object(t),!0).forEach((function(n){Nt(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Dt(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Nt(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Tt(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Tt(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Tt(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}var _t=function(e){var n=e.children,t=e.selectable,r=void 0===t||t,o=e.themeClass,i=void 0===o?void 0:o,a=e.className,c=void 0===a?"":a,l=function(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}(e,Lt),s=St()([It.key,r&&It.selectable,null!=i?i:It.keyDefaultTheme,c]).join(" ");return(0,O.jsx)("div",Rt(Rt({className:s},l),{},{children:n}))},Mt=t(74691),Yt=t.n(Mt),qt=t(56520),Zt={};Zt.styleTagTransform=b(),Zt.setAttributes=d(),Zt.insert=f().bind(null,"head"),Zt.domAPI=s(),Zt.insertStyleElement=h(),c()(qt.Z,Zt);var Kt=qt.Z&&qt.Z.locals?qt.Z.locals:void 0;function Ut(e){return Ut="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Ut(e)}function Gt(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function zt(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Gt(Object(t),!0).forEach((function(n){Wt(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Gt(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Wt(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Ut(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Ut(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Ut(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Ft(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(e,n)||function(e,n){if(e){if("string"==typeof e)return Xt(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Xt(e,n):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Xt(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function Vt(e){var n=e.onMouseDown,t=e.selecting,r=e.negate,o=e.rect,i=e.size,a=e.children;return(0,O.jsxs)("div",{onMouseDown:n,className:St()([Kt.container,t&&Kt.selecting]).join(" "),children:[a,t&&(0,O.jsx)("div",{className:St()([Kt.overlay,r&&Kt.negate]).join(" "),style:{position:"absolute",top:o[0][1]+"px",left:o[0][0]+"px",width:i[0]+"px",height:i[1]+"px"}})]})}function Qt(e){var n=e.polygons,t=e.onSelect,o=Ft((0,r.useState)({}),2),i=o[0],a=o[1],c=(0,r.useCallback)((function(e){var n=function(e){for(;(e=e.parentNode)&&("relative"!==e.style.position||!e.getBoundingClientRect().height););return e}(e.target).getBoundingClientRect(),t=e.clientX,r=e.clientY;e.preventDefault(),a({start:[t,r],intersecting:[],offset:[n.left,n.top],offsetRect:n})}),[a]),l=(0,r.useCallback)((function(e){i.selecting&&!e.repeat&&e.shiftKey&&a((function(e){return zt(zt({},e),{},{negate:!0})}))}),[i.selecting,a]),s=(0,r.useCallback)((function(e){!i.negate||e.repeat||e.shiftKey||a((function(e){return zt(zt({},e),{},{negate:!1})}))}),[i.negate,a]),u=(0,r.useCallback)((function(e){var t=i.start,r=i.offset,o=i.offsetRect;if(t){var c=e.shiftKey,l=e.altKey,s=e.clientX,u=e.clientY,f=Ft(t,2),p=f[0],d=f[1],y=Yt()(s,o.left,o.right),h=Yt()(u,o.top,o.bottom),m=[[Math.min(y,p)-r[0],Math.min(h,d)-r[1]],[Math.max(y,p)-r[0],Math.max(h,d)-r[1]]],b=[Math.abs(y-p),Math.abs(h-d)];a((function(e){return zt(zt({},e),{},{negate:c||l,selecting:b[0]>3||b[1]>3,intersecting:Ht(m,n),rect:m,size:b})}))}}),[i,n,a]),f=(0,r.useCallback)((function(e){i.start&&(i.selecting&&t({negate:i.negate,intersecting:i.intersecting}),a({start:null,selecting:!1}))}),[t,i,a]);return(0,r.useEffect)((function(){return window.addEventListener("mouseup",f),window.addEventListener("mousemove",u),window.addEventListener("keydown",l),window.addEventListener("keyup",s),function(){window.removeEventListener("mouseup",f),window.removeEventListener("mousemove",u),window.removeEventListener("keydown",l),window.removeEventListener("keyup",s)}}),[f,u,l,s]),[zt(zt({},i),{},{onMouseDown:c,onMouseMove:u}),Vt]}function Ht(e,n){return n.reduce((function(n,t,r){return t.some((function(n){var t=n.x,r=n.y;return e[0][0]<t&&t<e[1][0]&&e[0][1]<r&&r<e[1][1]}))&&n.push(r),n}),[])}var Jt=t(49040),$t={};$t.styleTagTransform=b(),$t.setAttributes=d(),$t.insert=f().bind(null,"head"),$t.domAPI=s(),$t.insertStyleElement=h(),c()(Jt.Z,$t);var er=Jt.Z&&Jt.Z.locals?Jt.Z.locals:void 0,nr=t(528),tr={};tr.styleTagTransform=b(),tr.setAttributes=d(),tr.insert=f().bind(null,"head"),tr.domAPI=s(),tr.insertStyleElement=h(),c()(nr.Z,tr);var rr=nr.Z&&nr.Z.locals?nr.Z.locals:void 0;function or(e){var n=e.children,t=e.className,r=void 0===t?"":t,o=[rr.tip,r].join(" ");return(0,O.jsxs)("div",{className:o,children:[(0,O.jsx)(L,{name:"hand-point-up"})," ",n]})}var ir=(0,r.createContext)({layout:[],bindingCount:0,wrapperDimensions:{},wrapperStyle:{}});function ar(e){var n=e.layout,t=e.children,o=(0,r.useMemo)((function(){return n.length}),[n.length]),i=(0,r.useMemo)((function(){return $n(n)}),[n]),a=(0,r.useMemo)((function(){return et(i)}),[i]),c={layout:n,bindingCount:o,wrapperDimensions:i,wrapperStyle:a};return(0,O.jsx)(ir.Provider,{value:c,children:t})}function cr(e){return cr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},cr(e)}function lr(e){return function(e){if(Array.isArray(e))return hr(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||yr(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function sr(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function ur(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?sr(Object(t),!0).forEach((function(n){fr(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):sr(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function fr(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==cr(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==cr(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===cr(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function pr(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(e,n)||yr(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function dr(e,n){var t="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!t){if(Array.isArray(e)||(t=yr(e))||n&&e&&"number"==typeof e.length){t&&(e=t);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,c=!1;return{s:function(){t=t.call(e)},n:function(){var e=t.next();return a=e.done,e},e:function(e){c=!0,i=e},f:function(){try{a||null==t.return||t.return()}finally{if(c)throw i}}}}function yr(e,n){if(e){if("string"==typeof e)return hr(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?hr(e,n):void 0}}function hr(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var mr=.2,br=function(e){var n,t=function(e,n){return e.map((function(e){return Vn({x:e.x,y:e.y},{u:e.u||e.w||1,h:e.h||1},{x:e.rx,y:e.ry,a:e.r})}))}(e),r=dr(t);try{for(r.s();!(n=r.n()).done;){var o,i=dr(n.value);try{for(i.s();!(o=i.n()).done;){var a=o.value;a.x*=mr,a.y*=mr}}catch(e){i.e(e)}finally{i.f()}}}catch(e){r.e(e)}finally{r.f()}return t};function Ar(e){var n,t,o,i,a,c,l,s=e.value,u=e.prompt,f=e.onUpdate,p=(0,r.useContext)(ir),d=p.layout,y=p.wrapperDimensions,h=(0,r.useMemo)((function(){return br(d)}),[d]),m=(0,r.useMemo)((function(){return et(y,{scale:mr,overrides:{position:"relative",padding:0,margin:0}})}),[y]),b=(n=pr((0,r.useReducer)((function(e,n){switch(n){case"INCREMENT_MANUAL_SELECTION":return ur(ur({},e),{},{manualSelectionCount:e.manualSelectionCount+1});case"INCREMENT_MANUAL_DESELECTION":return ur(ur({},e),{},{manualDeSelectionCount:e.manualDeSelectionCount+1});case"TRACK_DRAG_SELECTION":return ur(ur({},e),{},{usedDragSelection:!0});case"TRACK_DRAG_DESELECTION":return ur(ur({},e),{},{usedDragDeSelection:!0});default:throw new Error("Unrecognized action type in ".concat(n))}}),{manualSelectionCount:0,manualDeSelectionCount:0,usedDragSelection:!1,usedDragDeSelection:!1}),2),t=n[0],o=n[1],i=(0,r.useCallback)((function(){return o("INCREMENT_MANUAL_SELECTION")}),[o]),a=(0,r.useCallback)((function(){return o("INCREMENT_MANUAL_DESELECTION")}),[o]),c=(0,r.useCallback)((function(){return o("TRACK_DRAG_SELECTION")}),[o]),l=(0,r.useCallback)((function(){return o("TRACK_DRAG_DESELECTION")}),[o]),{showSelectTip:!t.usedDragSelection&&t.manualSelectionCount>3,showDeSelectTip:!t.usedDragDeSelection&&t.manualDeSelectionCount>3,actions:{manualSelection:i,manualDeSelection:a,dragSelection:c,dragDeSelection:l}}),A=b.showSelectTip,v=b.showDeSelectTip,g=b.actions,x=(0,r.useCallback)((function(e){var n=e.negate,t=e.intersecting;n?g.dragDeSelection():g.dragSelection(),f(n?s.filter((function(e){return!t.includes(e)})):[].concat(lr(s),lr(t)))}),[s,f,g]),j=(0,r.useCallback)((function(e){var n=s.includes(e);n?g.manualDeSelection():g.manualSelection(),f(n?s.filter((function(n){return n!==e})):[].concat(lr(s),[e]))}),[s,f,g]),C=pr(Qt({onSelect:x,polygons:h}),2),w=C[0],E=C[1],k=w.selecting?w.intersecting:[],S=s,B=w.negate?[]:k.filter((function(e){return!S.includes(e)})),P=w.negate?k.filter((function(e){return S.includes(e)})):[];return(0,O.jsx)("div",{style:m,children:(0,O.jsxs)(E,ur(ur({},w),{},{children:[(0,O.jsx)(Ot,{layout:d,bindings:[],scale:mr,renderKey:function(e){var n=e.index;return(0,O.jsx)(_t,{onClick:function(){return j(n)},themeClass:(0,q.compact)([er.key,S.includes(n)&&er.highlight,B.includes(n)&&er.previewAdd,P.includes(n)&&er.previewRemove]).join(" ")})}}),u&&(0,O.jsx)("prompt",{}),A&&(0,O.jsx)(or,{className:er.tip,children:"Drag to select a region"}),v&&(0,O.jsx)(or,{className:er.tip,children:"Shift+Drag to de-select a region"})]}))})}Ar.propTypes={onUpdate:E().func.isRequired,value:E().arrayOf(E().number).isRequired,prompt:E().node};var vr=Ar,gr=t(27470),xr={};xr.styleTagTransform=b(),xr.setAttributes=d(),xr.insert=f().bind(null,"head"),xr.domAPI=s(),xr.insertStyleElement=h(),c()(gr.Z,xr);var jr=gr.Z&&gr.Z.locals?gr.Z.locals:void 0;function Cr(e){return Cr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Cr(e)}function wr(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Er(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?wr(Object(t),!0).forEach((function(n){Or(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):wr(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Or(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Cr(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Cr(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Cr(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function kr(e){var n=e.prop,t=e.schema,r=e.onUpdate;return(0,O.jsxs)(O.Fragment,{children:[(0,O.jsx)(L,{name:"code",title:"Raw property value"})," ",(0,O.jsx)("input",{required:null==t?void 0:t.required,value:null==n?void 0:n.raw,onChange:function(e){return r(Er(Er({},n),{},{raw:e.target.value,useRaw:!0}))}})]})}function Sr(e){var n=e.schema;return(0,O.jsx)("span",{className:[jr.propertyValue,jr.readonly].join(" "),children:n.const})}function Br(e){var n,t=e.prop,r=e.schema,o=e.onUpdate;return(0,O.jsx)("input",{type:"text",className:jr.propertyValue,value:null!==(n=null==t?void 0:t.parsed)&&void 0!==n?n:"",placeholder:r.default&&"Default: ".concat(r.default),onChange:function(e){o(Er(Er({},t),{},{parsed:e.target.value,useRaw:!1}))}})}function Pr(e){var n,t=e.prop,r=e.schema,o=e.onUpdate;return(0,O.jsx)("input",{type:"number",className:jr.propertyValue,value:null!==(n=null==t?void 0:t.parsed)&&void 0!==n?n:"",placeholder:r.default&&"Default: ".concat(r.default),onChange:function(e){o(Er(Er({},t),{},{parsed:Number(e.target.value),useRaw:!1}))}})}function Ir(e){var n=e.prop,t=e.onUpdate;return(0,O.jsx)("input",{type:"checkbox",className:jr.propertyValue,checked:(null==n?void 0:n.parsed)||!1,onChange:function(e){t({parsed:!!e.target.checked,useRaw:!1})}})}var Tr=t(87360),Lr=t.n(Tr),Dr=function(e,n){var t=(n+(arguments.length>2&&void 0!==arguments[2]?arguments[2]:1))%e.length;return t<0?e.length+t:t},Rr=t(47881),Nr={};Nr.styleTagTransform=b(),Nr.setAttributes=d(),Nr.insert=f().bind(null,"head"),Nr.domAPI=s(),Nr.insertStyleElement=h(),c()(Rr.Z,Nr);var _r=Rr.Z&&Rr.Z.locals?Rr.Z.locals:void 0;function Mr(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function Yr(e){var n,t,o=e.results,i=e.onSelect,a=e.renderResult,c=(n=(0,r.useState)(0),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||function(e,n){if(e){if("string"==typeof e)return Mr(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Mr(e,n):void 0}}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),l=c[0],s=c[1],u=(0,r.useRef)(null),f=(0,r.useCallback)((function(e,n){var t,r,i,a,c,f;if(0!==o.length)if(void 0!==n){var p=null!==l?Dr(o,l,n):e,d='li[data-result-index="'.concat(p,'"]');r=null===(t=u.current)||void 0===t?void 0:t.querySelector(d),i=r.offsetParent.scrollTop,a=r.offsetParent.offsetHeight,c=r.offsetTop,f=c+r.scrollHeight,(c<i||f>i+a)&&r.scrollIntoView(!1),s(p)}else s(e);else s(null)}),[o,l,s]),p=(0,r.useCallback)((function(){f(0,1)}),[f]),d=(0,r.useCallback)((function(){f(o.length-1,-1)}),[f,o]),y=(0,r.useCallback)((function(e){i(o[l],e)}),[o,l,i]),h=(0,r.useCallback)((function(e){var n={ArrowDown:p,ArrowUp:d,Enter:y}[e.key];n&&(e.preventDefault(),e.stopPropagation(),n(e))}),[p,d,y]);return(0,r.useEffect)((function(){return document.body.addEventListener("keydown",h),function(){return document.body.removeEventListener("keydown",h)}}),[u,h]),(0,O.jsx)("ul",{className:_r.results,ref:u,children:o.map((function(e,n){return(0,O.jsx)("li",{className:l===n?_r.highlighted:"",title:e.description,"data-result-index":n,onClick:function(n){return i(e,n)},onDoubleClick:function(n){return i(e,n)},onMouseOver:function(){return f(n)},children:a(e,n)},n)}))})}Yr.propTypes={results:E().array.isRequired,onSelect:E().func.isRequired,renderResult:E().func.isRequired};var qr=Yr;function Zr(e){return Zr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Zr(e)}function Kr(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Ur(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Kr(Object(t),!0).forEach((function(n){Gr(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Kr(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Gr(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Zr(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Zr(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Zr(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function zr(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function Wr(e){e&&(e.focus(),e.select())}var Fr=function(e){var n,t,o=e.choices,i=e.searchKey,a=e.renderResults,c=e.initialQuery,l=!o.length||o.length>10,s=(n=(0,r.useState)(c),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||function(e,n){if(e){if("string"==typeof e)return zr(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?zr(e,n):void 0}}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),u=s[0],f=s[1],p=(0,r.useMemo)((function(){if(!u||!l)return o;var e={key:i,limit:30};return Lr().go(u,o,e).map((function(e){return Ur(Ur({},e.obj),{},{search:e})}))}),[l,u,o,i]),d=(0,r.useCallback)((function(e){f(e.target.value)}),[f]);return(0,O.jsxs)(O.Fragment,{children:[l&&(0,O.jsxs)("div",{className:_r.searchWrapper,children:[(0,O.jsx)("input",{ref:Wr,type:"text",value:u,onChange:d}),(0,O.jsx)(L,{className:_r.searchIcon,name:"search"}),(0,O.jsx)(L,{className:_r.clearSearchIcon,name:"times",onClick:function(){return f("")}})]}),a(p)]})};Fr.propTypes={choices:E().array.isRequired,searchKey:E().string.isRequired,initialQuery:E().string.isRequired,renderResults:E().func.isRequired},Fr.defaultProps={initialQuery:""};var Xr=Fr;function Vr(e){var n=e.choices,t=e.prompt,o=e.onSelect,i=(0,r.useMemo)((function(){return n.map((function(e){return{value:e}}))}),[n]),a=(0,r.useCallback)((function(e){var n=e.search?(0,O.jsx)("span",{dangerouslySetInnerHTML:{__html:Lr().highlight(e.search)}}):(0,O.jsx)("span",{children:e.value});return(0,O.jsxs)(O.Fragment,{children:[n,e.description&&(0,O.jsx)("p",{className:_r.description,children:e.description})]})}),[]);return(0,O.jsxs)("div",{className:_r.dialog,children:[(0,O.jsx)("p",{children:t||"Select"}),(0,O.jsx)(Xr,{choices:i,initialQuery:"",searchKey:"value",renderResults:function(e){return e&&(0,O.jsx)(qr,{results:e,onSelect:function(e){return o(e.value)},renderResult:a})}})]})}Vr.propTypes={choices:E().arrayOf(E().stirng).isRequired,prompt:E().string,onSelect:E().func.isRequired};var Qr=Vr;function Hr(e){return Hr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Hr(e)}function Jr(e){return function(e){if(Array.isArray(e))return eo(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||$r(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function $r(e,n){if(e){if("string"==typeof e)return eo(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?eo(e,n):void 0}}function eo(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function no(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function to(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?no(Object(t),!0).forEach((function(n){ro(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):no(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function ro(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Hr(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Hr(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Hr(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function oo(e){var n=e.prop,t=void 0===n?{}:n,o=e.schema,i=e.onUpdate,a=o.enum,c=t.parsed,l=(0,r.useCallback)((function(e){i(to(to({},t),{},{parsed:a[e.target.value],useRaw:!1}))}),[t,a,i]);return(0,O.jsx)("select",{className:jr.propertyValue,onChange:l,value:a.indexOf(c),children:a.map((function(e,n){return(0,O.jsx)("option",{value:n,children:e},n)}))})}function io(e){var n=e.prop,t=void 0===n?{}:n,o=e.schema,i=e.onUpdate,a=function(e){var n=(0,r.useContext)(Se);return(0,r.useMemo)((function(){if(!e.choices)return[];if(Array.isArray(e.choices))return e.choices;if(!e.choices.$source)throw new Error("Expected schema.choices.$source");var t=n[e.choices.$source];return e.choices.$key?Q()(t,e.choices.$key):t}),[n,e.choices])}(o),c=t.parsed,l=void 0===c?[]:c,s=(0,r.useCallback)((function(e){i(to(to({},t),{},{useRaw:!1,parsed:e}))}),[t,i]),u=a.length>20?co:ao;return(0,O.jsx)(u,{selected:l,choices:a,onUpdate:s})}function ao(e){var n=e.selected,t=e.choices,o=e.onUpdate,i=(0,r.useCallback)((function(e){o(n.includes(e)?n.filter((function(n){return n!==e})):[].concat(Jr(n),[e]))}),[n,o]);return(0,O.jsx)("ol",{className:jr.propertyMultiSelect,children:t.map((function(e,t){return(0,O.jsx)("li",{children:(0,O.jsxs)("label",{children:[(0,O.jsx)("input",{type:"checkbox",checked:n.includes(e),onChange:function(n){return i(e)}}),e]})},t)}))})}function co(e){var n,t,o=e.selected,i=e.choices,a=e.onUpdate,c=(n=(0,r.useState)(!1),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||$r(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),l=c[0],s=c[1],u=(0,r.useCallback)((function(e){a([].concat(Jr(o),[e])),s(!1)}),[s,o,a]),f=(0,r.useCallback)((function(e){a(o.filter((function(n){return n!==e})))}),[o,a]);return(0,O.jsxs)(O.Fragment,{children:[(0,O.jsx)("ul",{className:jr.propertyMultiSelectChips,children:o.map((function(e,n){return(0,O.jsx)("li",{children:(0,O.jsxs)("span",{className:jr.behaviorBind,children:[e," ",(0,O.jsx)(L,{name:"times",className:jr.phandleRemove,onClick:function(){return f(e)}})]})},n)}))}),(0,O.jsxs)(Ge,{secondary:!0,onClick:function(){return s(!0)},children:[(0,O.jsx)(L,{name:"plus"})," Add"]}),l&&(0,O.jsx)(fn,{onDismiss:function(){return s(!1)},children:(0,O.jsx)(Qr,{choices:i,onSelect:u})})]})}function lo(e){var n=(0,r.useContext)(j).getSearchTargets,t=e.param,o=e.prompt,i=e.onSelect,a=(0,r.useMemo)((function(){return n(t)}),[n,t]);return(0,O.jsxs)("div",{className:_r.dialog,children:[(0,O.jsx)("p",{children:o}),(0,O.jsx)(qr,{results:a,onSelect:i,renderResult:function(e){return e.code}})]})}lo.propTypes={value:E().any.isRequired,param:E().object.isRequired,prompt:E().string.isRequired,onSelect:E().func.isRequired},lo.defaultProps={value:""};var so=lo,uo=E().oneOfType([E().oneOf(["code","layer","command"]),E().shape({type:E().oneOf(["placeholder"])}),E().shape({enum:E().array,raw:E().bool,name:E().string.isRequired,type:E().string.isRequired})]),fo=E().arrayOf(uo),po=E().oneOfType([E().string,E().number]),yo=E().shape({params:fo,code:po.isRequired,description:E().string,symbol:E().string,faIcon:E().string}),ho={value:po,source:yo};ho.params=E().arrayOf(E().shape(ho));var mo=E().shape(ho),bo=mo;function Ao(e){var n=e.prompt,t=e.searchKey,o=e.node,i=e.param,a=e.behaviour,c=e.context,l=e.onSelect,s=(0,r.useContext)(j).getSearchTargets,u=(0,r.useCallback)((function(e){var n=e.search?(0,O.jsx)("span",{dangerouslySetInnerHTML:{__html:Lr().highlight(e.search)}}):(0,O.jsx)("span",{children:e.code});return(0,O.jsxs)(O.Fragment,{children:[n,e.description&&(0,O.jsx)("p",{className:_r.description,children:e.description})]})}),[]),f=(0,r.useMemo)((function(){return s(i,a.code,c)}),[s,i,a,c]);return(0,O.jsxs)("div",{className:_r.dialog,children:[(0,O.jsx)("p",{children:n}),(0,O.jsx)(Xr,{choices:f,initialQuery:o.value||"",searchKey:t,renderResults:function(e){return e&&(0,O.jsx)(qr,{results:e,onSelect:l,renderResult:u})}})]})}E().arrayOf(mo),Ao.propTypes={node:bo.isRequired,param:E().oneOfType([E().string,E().shape({enum:E().array,raw:E().bool,type:E().string})]).isRequired,prompt:E().string.isRequired,searchKey:E().string.isRequired,behaviour:E().object.isRequired,context:E().string.isRequired,onSelect:E().func.isRequired};var vo=Ao,go=t(93565);function xo(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function jo(e){var n,t,o=e.node,i=e.onSelect,a=(n=(0,r.useState)({h:Number(o.params[0].value),s:Number(o.params[1].value)/100,l:Number(o.params[2].value)/100}),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||function(e,n){if(e){if("string"==typeof e)return xo(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?xo(e,n):void 0}}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),c=a[0],l=a[1],s=(0,r.useCallback)((function(e){var n=e.hsl;l(n)}),[l]),u=(0,r.useCallback)((function(){i([{value:Math.round(c.h)},{value:Math.round(100*c.s)},{value:Math.round(100*c.l)}])}),[c,i]);return(0,O.jsxs)("div",{children:[(0,O.jsx)("p",{children:"Select colour"}),(0,O.jsx)(go.AI,{color:c,disableAlpha:!0,onChangeComplete:s}),(0,O.jsx)("p",{style:{textAlign:"center"},children:(0,O.jsx)(Ge,{onClick:u,children:"Confirm"})})]})}jo.propTypes={value:E().any.isRequired,prompt:E().string.isRequired,param:E().oneOfType([E().shape({enum:E().array,raw:E().bool,type:E().string})]).isRequired,onSelect:E().func.isRequired},jo.defaultProps={value:""};var Co=jo;function wo(e,n){if(e){if("string"==typeof e)return Oo(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Oo(e,n):void 0}}function Eo(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}function Oo(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function ko(e){return e.params.length>0?[e].concat(function(e){if(Array.isArray(e))return Oo(e)}(n=ko(e.params[0]))||Eo(n)||wo(n)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()):[e];var n}function So(e){var n,t=function(e){if(Array.isArray(e))return e}(n=e)||Eo(n)||wo(n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),r=t[0],o=t.slice(1);return{value:r,params:0===o.length?[]:[So(o)]}}var Bo=t(14409),Po={};Po.styleTagTransform=b(),Po.setAttributes=d(),Po.insert=f().bind(null,"head"),Po.domAPI=s(),Po.insertStyleElement=h(),c()(Bo.Z,Po);var Io=Bo.Z&&Bo.Z.locals?Bo.Z.locals:void 0;function To(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var Lo=["LSHFT","LALT","LCTRL","LGUI"],Do=["RSHFT","RALT","RCTRL","RGUI"];function Ro(e){var n=e.selected,t=e.row,r=e.onSelect;return(0,O.jsx)("ul",{className:Io.modifiers,children:t.map((function(e,t){return(0,O.jsx)("li",{className:n.includes(e)?Io.selected:"",onClick:function(){return r(e)},children:e},t)}))})}function No(e){var n=e.selected,t=e.onChange;function r(e){var r;t(n.includes(e)?n.filter((function(n){return n!==e})):[].concat(function(e){if(Array.isArray(e))return To(e)}(r=n)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(r)||function(e,n){if(e){if("string"==typeof e)return To(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?To(e,n):void 0}}(r)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),[e]))}return(0,O.jsxs)(O.Fragment,{children:[(0,O.jsx)(Ro,{row:Lo,selected:n,onSelect:r}),(0,O.jsx)(Ro,{row:Do,selected:n,onSelect:r})]})}No.propTypes={selected:E().arrayOf(E().string)};var _o=No;function Mo(){return(0,O.jsx)("span",{children:"⦸"})}function Yo(e){return e&&"(".concat(e.code,") ").concat(e.description)}function qo(e){var n,t=e&&((null==e?void 0:e.symbol)||(null==e||null===(n=e.code)||void 0===n?void 0:n.toString()));return(null==e?void 0:e.faIcon)&&(0,O.jsx)(L,{name:e.faIcon})||t||(0,O.jsx)(Mo,{})}function Zo(e){var n=e.node,t=e.onSelect,o=n.value,i=n.source,a=n._isPlaceholder,c=Yo(i),l=(0,r.useCallback)((function(e){e.stopPropagation(),t({node:n})}),[n,t]);return(0,O.jsx)("span",{className:St()([It.code,(void 0===o||a)&&It.missingValue]).join(" "),title:c,onClick:l,children:qo(i)})}Zo.propTypes={node:bo.isRequired,onSelect:E().func.isRequired};var Ko=Zo;function Uo(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var Go=function(e){var n,t=e.node,o=e.onSelect,i=(0,r.useCallback)((function(e){e.stopPropagation(),o({node:t,type:"tree"})}),[t,o]),a=(0,r.useMemo)((function(){return Q()(ko(t),"source")}),[t]),c=(0,r.useMemo)((function(){return a.map(qo).map((function(e,n){return(0,O.jsx)(r.Fragment,{children:e},n)})).reduce((function(e,n){return 0===e.length?[n]:[].concat(function(e){if(Array.isArray(e))return Uo(e)}(t=e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(t)||function(e,n){if(e){if("string"==typeof e)return Uo(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Uo(e,n):void 0}}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),[" ",n]);var t}),[])}),[a]),l=(0,r.useMemo)((function(){return a.map(Yo).join(" + ")}),[a]),s=void 0===(null===(n=t.source)||void 0===n?void 0:n.code)||void 0===t.value||t._isPlaceholder;return(0,O.jsx)("span",{className:St()([It.code,s&&It.missingValue]).join(" "),title:l,onClick:i,children:c})};function zo(e,n){var t=G()(e,"[0]",{}),r=X()(n.commands,"code");return[].concat(n.params||[],"command"===G()(n,"params[0]")?G()(r[t.value],"additionalParams",[]):[])}function Wo(e){return Wo="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Wo(e)}function Fo(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Xo(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Fo(Object(t),!0).forEach((function(n){Vo(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Fo(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Vo(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Wo(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Wo(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Wo(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Qo(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(e,n)||function(e,n){if(e){if("string"==typeof e)return Ho(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Ho(e,n):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Ho(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function Jo(e){var n=[];return function e(t){var r=t.params||[];n.push(t),r.forEach(e)}(e),n}function $o(e,n){var t=Qo(e.params,1)[0],r=G()(t,"source.symbol",G()(t,"value","")),o=!G()(t,"source.faIcon")&&r.length>4,i=n.length>1,a=G()(t,"params",[]).length>0;return o||i||a}function ei(e){var n={layer:"Select layer",mod:"Select modifier",behaviour:"Select behaviour",command:"Select command",keycode:"Select key code"};return e.name?"Select ".concat(e.name):n[e]||n.keycode}function ni(e,n,t){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"none",o=arguments.length>4?arguments[4]:void 0,i=e,a=G()(t.behavioursByContext[r],i,{}),c=zo(n,a),l=X()(a.commands,"code");function s(e,n){if(!e)return{value:void 0,slot:n,params:[]};var r=e.value,i=e.params,a=e._isPlaceholder,c=function(e,n){var r;return"command"===n?l[e]:n.raw||n.enum||"placeholder"===n.type?{code:e}:null==t||null===(r=t[n])||void 0===r?void 0:r[e]}(r,n);return{value:r,_isPlaceholder:a,slot:n,source:Xo(Xo({},c),{},{symbol:G()(o,[null==c?void 0:c.name,"symbol"],null==c?void 0:c.symbol),faIcon:G()(o,[null==c?void 0:c.name,"faIcon"],null==c?void 0:c.faIcon)}),params:G()(c,"params",[]).map((function(e,n){return s(i[n],e)}))}}return{value:e,slot:"behaviour",source:a,params:c.map((function(e,t){return s(n[t],e)}))}}function ti(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(e,n)||ri(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ri(e,n){if(e){if("string"==typeof e)return oi(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?oi(e,n):void 0}}function oi(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var ii={LSHFT:"LS",LCTRL:"LC",LALT:"LA",LGUI:"LG",RSHFT:"RS",RCTRL:"RC",RALT:"RA",RGUI:"RG"};function ai(e){var n=e.search?(0,O.jsx)("span",{dangerouslySetInnerHTML:{__html:Lr().highlight(e.search)}}):(0,O.jsx)("span",{children:e.code});return(0,O.jsxs)(O.Fragment,{children:[n,(0,O.jsx)("p",{className:_r.description,children:e.description})]})}function ci(e){var n=e.node,t=e.onSelect,o=e.behaviour,i=(0,r.useContext)(j),a=i.getSearchTargets,c=i.sources,l=i.mergedGlyphs,s=(0,r.useMemo)((function(){return Q()(ko(n),"source")}),[n]),u=1===s.length?[]:s.slice(0,-1),f=ti((0,r.useState)(Q()(u,"name")),2),p=f[0],d=f[1],y=ti((0,r.useState)(s.at(-1)),2),h=y[0],m=y[1],b=(0,r.useMemo)((function(){return a("code",o.code).filter((function(e){return 0===e.params.length}))}),[a,o]),A=ni("&kp",[{value:null==h?void 0:h.code,params:null==h?void 0:h.params}],c,void 0,l),v=(0,r.useCallback)((function(e,n){var r,o=n.map((function(e){return ii[e]})),i=So(St()([].concat(function(e){if(Array.isArray(e))return oi(e)}(r=o)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(r)||ri(r)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),[null==e?void 0:e.code])));t(i)}),[t]),g=(0,r.useCallback)((function(e,n){"dblclick"!==n.type?m(e):v(e,p)}),[v,p,m]);return(0,O.jsxs)("div",{className:_r.dialog,children:[(0,O.jsxs)("div",{style:{display:"flex",gap:"10px"},children:[(0,O.jsxs)("div",{children:[(0,O.jsx)("p",{children:"Keycode"}),(0,O.jsx)(_t,{className:Io.previewKeycode,selectable:!1,children:(0,O.jsx)(Go,{node:A.params[0],onSelect:function(){}})})]}),(0,O.jsxs)("div",{children:[(0,O.jsx)("p",{children:"Modifiers"}),(0,O.jsx)(_o,{selected:p,onChange:d})]})]}),(0,O.jsx)("p",{children:"Available Keycodes"}),(0,O.jsx)(Xr,{choices:b,initialQuery:null==h?void 0:h.code,searchKey:"code",renderResults:function(e){return e&&(0,O.jsx)(qr,{results:e,onSelect:g,renderResult:ai})}}),(0,O.jsx)(or,{className:Io.quickCloseTip,children:"Double-click to select and close the dialog"}),(0,O.jsxs)("p",{style:{textAlign:"center"},children:[(0,O.jsx)(Ge,{onClick:function(){v(h,p)},children:"Confirm"}),(0,O.jsx)(Ge,{onClick:function(){t(n)},secondary:!0,children:"Cancel"})]})]})}ci.propTypes={node:bo.isRequired,param:E().oneOfType([E().string,E().shape({enum:E().array,raw:E().bool,type:E().string})]).isRequired,prompt:E().string.isRequired,searchKey:E().string.isRequired,behaviour:E().object.isRequired,context:E().string.isRequired,onSelect:E().func.isRequired};var li=ci;function si(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function ui(e){e&&(e.focus(),e.select())}function fi(e){var n,t,o=e.value,i=e.param,a=e.onSelect,c=(n=(0,r.useState)(o),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||function(e,n){if(e){if("string"==typeof e)return si(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?si(e,n):void 0}}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),l=c[0],s=c[1],u=(0,r.useCallback)((function(e){"Enter"===e.key&&a({code:l})}),[l,a]),f=(0,r.useCallback)((function(e){var n=e.target.value;"number"===i.type&&(n=Number(n),Number.isNaN(n))||s(n)}),[i,s]);return(0,O.jsxs)("div",{className:_r.dialog,children:[(0,O.jsx)("p",{children:"Enter raw value"}),(0,O.jsx)("input",{ref:ui,type:"text",value:l,onChange:f,onKeyDown:u})]})}fi.propTypes={value:E().any.isRequired,prompt:E().string.isRequired,param:E().oneOfType([E().shape({enum:E().array,raw:E().bool,type:E().string})]).isRequired,onSelect:E().func.isRequired},fi.defaultProps={value:""};var pi=fi,di=t(98913),yi=t.n(di),hi=t(97168);function mi(e,n){var t="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!t){if(Array.isArray(e)||(t=function(e,n){if(e){if("string"==typeof e)return bi(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?bi(e,n):void 0}}(e))||n&&e&&"number"==typeof e.length){t&&(e=t);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,c=!1;return{s:function(){t=t.call(e)},n:function(){var e=t.next();return a=e.done,e},e:function(e){c=!0,i=e},f:function(){try{a||null==t.return||t.return()}finally{if(c)throw i}}}}function bi(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var Ai="&trans",vi=function(e){return e.keyboard.keymap.layers},gi=(0,hi.oM)({name:"layers",initialState:[],reducers:{createLayer:function(e,n){e.push({name:"Layer #".concat(e.length),bindings:yi()(n.payload.bindingCount,(function(){return function(){return{value:arguments.length>0&&void 0!==arguments[0]?arguments[0]:Ai,params:[]}}()}))})},updateLayerMetadata:function(e,n){var t=n.payload.layerIndex;Object.assign(e[t],tt()(n.payload,["name","label"]))},renameLayer:function(e,n){e[n.payload.index].name=n.payload.name},deleteLayer:function(e,n){e.splice(n.payload.index,1)},updateKeyBinding:function(e,n){e[n.payload.layerIndex].bindings[n.payload.bindIndex]=n.payload.binding},updateSensorBindings:function(e,n){e[n.payload.layerIndex].sensorBindings[n.payload.sensorIndex]=n.payload.bindings},rebindTransparentToKeyPress:function(e,n){var t,r=mi(e[n.payload.layerIndex].bindings);try{for(r.s();!(t=r.n()).done;){var o=t.value;"&trans"===o.value&&(o.value="&kp",o.params=[])}}catch(e){r.e(e)}finally{r.f()}},rebindTransparentToNone:function(e,n){var t,r=mi(e[n.payload.layerIndex].bindings);try{for(r.s();!(t=r.n()).done;){var o=t.value;"&trans"===o.value&&(o.value="&none",o.params=[])}}catch(e){r.e(e)}finally{r.f()}},rebindNoneToKeypress:function(e,n){var t,r=mi(e[n.payload.layerIndex].bindings);try{for(r.s();!(t=r.n()).done;){var o=t.value;"&none"===o.value&&(o.value="&kp",o.params=[])}}catch(e){r.e(e)}finally{r.f()}},rebindNoneToTransparent:function(e,n){var t,r=mi(e[n.payload.layerIndex].bindings);try{for(r.s();!(t=r.n()).done;){var o=t.value;"&none"===o.value&&(o.value="&trans",o.params=[])}}catch(e){r.e(e)}finally{r.f()}},rebindEmptyKeypressToTransparent:function(e,n){var t,r=mi(e[n.payload.layerIndex].bindings);try{for(r.s();!(t=r.n()).done;){var o,i=t.value;"&kp"!==i.value||null!==(o=i.params[0])&&void 0!==o&&o.value||(i.value="&trans",i.params=[])}}catch(e){r.e(e)}finally{r.f()}},rebindEmptyKeypressToNone:function(e,n){var t,r=mi(e[n.payload.layerIndex].bindings);try{for(r.s();!(t=r.n()).done;){var o,i=t.value;"&kp"!==i.value||null!==(o=i.params[0])&&void 0!==o&&o.value||(i.value="&none",i.params=[])}}catch(e){r.e(e)}finally{r.f()}}}}),xi=gi.actions,ji=xi.createLayer,Ci=xi.renameLayer,wi=xi.deleteLayer,Ei=xi.updateLayerMetadata,Oi=xi.updateKeyBinding,ki=xi.updateSensorBindings,Si=xi.rebindTransparentToKeyPress,Bi=xi.rebindTransparentToNone,Pi=xi.rebindNoneToKeypress,Ii=xi.rebindNoneToTransparent,Ti=xi.rebindEmptyKeypressToTransparent,Li=xi.rebindEmptyKeypressToNone,Di=gi.reducer;function Ri(e){var n=e.onSelect,t=(0,i.v9)(vi),o=(0,r.useMemo)((function(){return t.map((function(e,n){return{code:n,description:e.name||"Layer ".concat(n)}}))}),[t]);return(0,O.jsxs)("div",{className:_r.dialog,children:[(0,O.jsx)("p",{children:"Select layer"}),(0,O.jsx)(qr,{results:o,onSelect:n,renderResult:function(e){return(0,O.jsxs)(O.Fragment,{children:[e.code,e.description&&(0,O.jsx)("p",{className:_r.description,children:e.description})]})}})]})}Ri.propTypes={value:E().string.isRequired,behaviour:E().object.isRequired,onSelect:E().func.isRequired},Ri.defaultProps={value:""};var Ni=Ri;function _i(e){return _i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},_i(e)}function Mi(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Yi(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Mi(Object(t),!0).forEach((function(n){qi(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Mi(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function qi(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==_i(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==_i(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===_i(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Zi(e){var n=e.node,t=e.type,o=e.onCancel,i=e.onSelect,a=(0,q.pick)(e,["node","value","prompt","param","node","behaviour","context","searchKey"]),c=(0,r.useMemo)((function(){var e;return"params"===t&&"hsb-color-picker"===(null===(e=n.source)||void 0===e?void 0:e.helper)?Co:n.slot.raw||"placeholder"===n.slot.type?pi:n.slot.enum?so:"code"===n.slot?li:"layer"===n.slot?Ni:vo}),[n,t]);return(0,O.jsx)(fn,{onDismiss:o,children:(0,O.jsx)(c,Yi(Yi({},a),{},{param:n.slot,onSelect:i}))})}Zi.propTypes={type:E().string.isRequired,node:bo.isRequired,behaviour:E().object.isRequired,prompt:E().string.isRequired,searchKey:E().string.isRequired,searchThreshold:E().number,onCancel:E().func.isRequired,onSelect:E().func.isRequired},Zi.defaultProps={type:"value",value:"",freeForm:!1,searchThreshold:10};var Ki=Zi;function Ui(e){return function(e){if(Array.isArray(e))return Gi(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,n){if(e){if("string"==typeof e)return Gi(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Gi(e,n):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Gi(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var zi=function(e,n){return[].concat(Ui(e.slice(0,n)),Ui(e.slice(n+1)))},Wi=function(e,n,t){return[].concat(Ui(e.slice(0,n)),[t],Ui(e.slice(n+1)))};function Fi(e){return Fi="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Fi(e)}function Xi(e){return function(e){if(Array.isArray(e))return $i(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||Ji(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Vi(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Qi(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Vi(Object(t),!0).forEach((function(n){Hi(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Vi(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Hi(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Fi(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Fi(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Fi(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Ji(e,n){if(e){if("string"==typeof e)return $i(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?$i(e,n):void 0}}function $i(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function ea(e){var n,t,o=e.prop,i=void 0===o?{}:o,a=e.schema,c=void 0===a?{}:a,l=e.onUpdate,s=i.parsed,u=void 0===s?[]:s,f=c.length,p=(n=(0,r.useState)(null),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||Ji(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),d=p[0],y=p[1],h=(0,r.useCallback)((function(){l(Qi(Qi({},i),{},{useRaw:!1,parsed:[].concat(Xi(u),[""])})),y(u.length)}),[i,u,l,y]),m=(0,r.useCallback)((function(e){l(Qi(Qi({},i),{},{useRaw:!1,parsed:Wi(u,d,e.code)})),y(null)}),[i,u,d,l]),b=(0,r.useCallback)((function(e){l(Qi(Qi({},i),{},{useRaw:!1,parsed:zi(u,e)}))}),[i,u,l]);return(0,O.jsxs)("div",{children:[(0,O.jsx)("ol",{className:(0,q.compact)([jr.propertyPhandleSelect,1===f&&jr.propertyPhandleSingleton]).join(" "),children:u.map((function(e,n){return(0,O.jsx)("li",{children:(0,O.jsxs)("span",{className:jr.behaviorBind,onClick:function(){return y(n)},children:[e,1!==f&&(0,O.jsx)(L,{name:"times",className:jr.phandleRemove,onClick:function(e){e.stopPropagation(),b(n)}})]})},n)}))}),null!==d&&(0,O.jsx)(Ki,{node:{value:u[d],params:[],slot:"behaviour"},type:"value",context:"none",behaviour:{code:u[d]},prompt:"Select Behavior",searchKey:"code",onSelect:m,onCancel:function(){return y(null)}}),f&&u.length<f&&(0,O.jsxs)(Ge,{secondary:!0,onClick:h,children:[(0,O.jsx)(L,{name:"plus"})," Add Behavior"]})]})}function na(e){return na="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},na(e)}function ta(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function ra(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?ta(Object(t),!0).forEach((function(n){oa(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ta(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function oa(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==na(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==na(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===na(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function ia(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var aa={display:"inline-block",cursor:"pointer",verticalAlign:"text-top",border:"0.75px solid var(--key-color-base)",borderRadius:"3px"},ca={display:"flex",justifyContent:"center",alignItems:"center",width:"10px",height:"10px",margin:"1px",borderRadius:"2px"},la=function(e){var n,t,o=e.node,i=e.onSelect,a=(n=o.params,t=3,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||function(e,n){if(e){if("string"==typeof e)return ia(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?ia(e,n):void 0}}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),c=a[0],l=a[1],s=a[2],u=(0,r.useCallback)((function(){i({node:o,type:"params"})}),[o,i]),f=(0,r.useMemo)((function(){return[c,l,s].some((function(e){return void 0===e.value}))}),[c,l,s]),p="hsl(".concat(c.value,", ").concat(l.value,"%, ").concat(s.value,"%)");return(0,O.jsxs)(O.Fragment,{children:[(0,O.jsx)(Ko,{node:o,onSelect:i}),f?(0,O.jsx)(Ko,{node:{},onSelect:u}):(0,O.jsx)("div",{onClick:u,style:aa,children:(0,O.jsx)("div",{className:f?It.missingValue:null,style:ra(ra({},ca),{},{backgroundColor:p})})})]})};function sa(e){return sa="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},sa(e)}function ua(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function fa(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?ua(Object(t),!0).forEach((function(n){pa(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ua(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function pa(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==sa(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==sa(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===sa(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function da(e){var n=e.node,t=e.onSelect;return(0,O.jsxs)(O.Fragment,{children:[(0,O.jsx)(Ko,{node:n,onSelect:t}),G()(n,"source.params.length")>0?(0,O.jsx)(ha,{slots:n.source.params,params:n.params,onSelect:t}):null]})}function ya(e){var n=e.node,t=e.onSelect,o=e.slot,i=(0,r.useMemo)((function(){var e;return"hsb-color-picker"===(null===(e=n.source)||void 0===e?void 0:e.helper)?la:"code"===o?Go:da}),[n,o]);return(0,O.jsx)("span",{className:It.param,children:(0,O.jsx)(i,{node:n,onSelect:t})})}function ha(e){var n=e.slots,t=e.params,r=e.onSelect,o=e.root,i=e.wrapperProps;return(0,O.jsx)("span",fa(fa({className:It.params,"data-is-root":!!o,"data-param-count":t.length},i),{},{children:n.map((function(e,n){return"placeholder"!==e.type&&(0,O.jsx)(ya,{slot:e,node:t[n],onSelect:r},n)}))}))}ha.propTypes={slots:E().arrayOf(uo).isRequired,params:E().arrayOf(bo).isRequired,source:yo,onSelect:E().func.isRequired};var ma=ha;function ba(e,n){if(e){if("string"==typeof e)return Aa(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Aa(e,n):void 0}}function Aa(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function va(e){var n,t,o,i,a,c,l=(0,r.useContext)(j),s=l.sources,u=l.mergedGlyphs,f=e.context,p=void 0===f?"none":f,d=e.hideBehaviour,y=e.value,h=e.params,m=e.onUpdate,b=(a=(0,r.useState)(null),c=2,function(e){if(Array.isArray(e))return e}(a)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(a,c)||ba(a,c)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),A=b[0],v=b[1],g=y,x=G()(s.behavioursByContext[p],g,{}),C=zo(h,x),w=ni(y,h,s,p,u),E=Jo(w),k=function(e){if(!e[0].source.code)return!0;var n,t=function(e,n){var t="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!t){if(Array.isArray(e)||(t=ba(e))){t&&(e=t);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,c=!1;return{s:function(){t=t.call(e)},n:function(){var e=t.next();return a=e.done,e},e:function(e){c=!0,i=e},f:function(){try{a||null==t.return||t.return()}finally{if(c)throw i}}}}(e);try{for(t.s();!(n=t.n()).done;){var r,o=n.value;if(((null===(r=o.source)||void 0===r?void 0:r.params)||[]).length>o.params.length)return!0;if(o.params.some((function(e){return void 0===e.value||""===e.value||void 0===e.source})))return!0}}catch(e){t.e(e)}finally{t.f()}}(E);function S(e){var n=e.node,t=e.type;v({node:n,type:void 0===t?"value":t,nodeIndex:E.indexOf(n)})}return(0,O.jsxs)(O.Fragment,{children:[x&&!d?(0,O.jsx)("span",{className:(0,q.compact)([It["behaviour-binding"],!x.code&&It.missingValue]).join(" "),onClick:function(){return S({node:w})},children:x.code||"⦸"}):null,k&&(0,O.jsx)(L,{name:"warning",className:It.missing,title:"Binding has missing value(s)"}),(0,O.jsx)(ma,{root:!0,slots:C,params:w.params,onSelect:S,wrapperProps:{"data-simple":(n=w,t=Qo(n.params,1)[0],o=G()(t,"source.symbol",G()(t,"source.code","")),i=!!G()(t,"source.faIcon")||1===o.length,1===n.params.length&&i),"data-long":$o(w,C)}}),A&&(0,O.jsx)(Ki,{node:A.node,type:A.type,behaviour:x,context:p,prompt:ei(A.node.slot),searchKey:"code",onSelect:function(e){if("tree"===A.type)return function(e){var n=e.value,t=e.params,r=A.nodeIndex,o=J()(w),i=Jo(o),a=i[r];a.value=n,a.params=t,delete a._isPlaceholder,i.forEach((function(e){delete e.source})),v(null),m(tt()(o,["value","params"]))}(e);if("params"===A.type)return function(e){var n=A.nodeIndex,t=J()(w),r=Jo(t);r[n].params=e,r.forEach((function(e){delete e.source})),v(null),m(tt()(t,["value","params"]))}(e);var n=A.node,t=A.nodeIndex,r=J()(w),o=Jo(r),i=o[t];if(n.slot.raw)"number"===n.slot.type&&(e.code=Number(e.code));else if("command"===n.slot){var a,c,l,s=(null===(a=i.source)||void 0===a||null===(c=a.additionalParams)||void 0===c?void 0:c.length)||0;if(((null===(l=e.additionalParams)||void 0===l?void 0:l.length)||0)<s){var u=o[0];u.params.splice(1,u.params.length-1),o.splice(2,o.length-1)}}i.value=e.code,delete i._isPlaceholder,i.params=((null==e?void 0:e.params)||[]).reduce((function(n,t,r){var o,a;return(null===(o=i.source)||void 0===o||null===(a=o.params)||void 0===a?void 0:a[r])===e.params[r]?n.push(i.params[r]):n.push({value:0,_isPlaceholder:!0}),n}),[]),o.forEach((function(e){delete e.source})),v(null),m(tt()(r,["value","params","_isPlaceholder"]))},onCancel:function(){return v(null)}})]})}va.propTypes={context:E().string,hideBehaviour:E().bool.isRequired,value:po.isRequired,params:E().arrayOf(mo),onUpdate:E().func.isRequired},va.defaultProps={hideBehaviour:!1};var ga=va;function xa(e){return xa="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},xa(e)}function ja(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Ca(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?ja(Object(t),!0).forEach((function(n){wa(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ja(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function wa(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==xa(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==xa(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===xa(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Ea(e){var n=e.context,t=e.value,r=e.params,o=e.keyWrapperProps,i=void 0===o?{}:o,a=e.onUpdate;return(0,O.jsx)(_t,Ca(Ca({},i),{},{children:(0,O.jsx)(ga,{context:n,value:t,params:r,onUpdate:a})}))}Ea.propTypes={label:E().string,value:po.isRequired,params:E().arrayOf(mo),onUpdate:E().func.isRequired};var Oa=Ea;function ka(e){return ka="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},ka(e)}function Sa(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function Ba(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Pa(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Ba(Object(t),!0).forEach((function(n){Ia(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Ba(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Ia(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==ka(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==ka(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===ka(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Ta(e){var n=e.prop,t=void 0===n?{}:n,o=e.onUpdate,i=t.parsed,a=void 0===i?[]:i,c=(0,r.useCallback)((function(){var e;o(Pa(Pa({},t),{},{useRaw:!1,parsed:[].concat((e=a,function(e){if(Array.isArray(e))return Sa(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,n){if(e){if("string"==typeof e)return Sa(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Sa(e,n):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),[{value:"",params:[]}])}))}),[t,a,o]),l=(0,r.useCallback)((function(e,n){o(Pa(Pa({},t),{},{useRaw:!1,parsed:Wi(a,n,e)}))}),[t,a,o]),s=(0,r.useCallback)((function(e){o(Pa(Pa({},t),{},{useRaw:!1,parsed:zi(a,e)}))}),[t,a,o]);return(0,O.jsxs)(O.Fragment,{children:[(0,O.jsx)("ol",{className:jr.propertyBindingsValue,children:a.map((function(e,n){return(0,O.jsx)("li",{children:(0,O.jsxs)(_t,{children:[(0,O.jsx)(Oa,{context:"none",value:e.value,params:e.params,onUpdate:function(e){return l(e,n)}}),(0,O.jsx)("div",{className:jr.actions,children:(0,O.jsx)(L,{name:"trash",className:jr.deleteBind,onClick:function(e){e.stopPropagation(),s(n)}})})]})},n)}))}),(0,O.jsxs)(Ge,{secondary:!0,onClick:c,children:[(0,O.jsx)(L,{name:"plus"})," Add binding"]})]})}function La(e){return La="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},La(e)}function Da(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Ra(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Da(Object(t),!0).forEach((function(n){Na(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Da(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Na(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==La(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==La(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===La(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function _a(e){var n=e.schema,t=void 0===n?{}:n,r=t.type;if("const"in t)return(0,O.jsx)(Sr,Ra({},e));if("enum"in t)return(0,O.jsx)(oo,Ra({},e));if("key-position-picker"===t.helper){var o=e.prop,i=void 0===o?{}:o,a=e.onUpdate;return(0,O.jsx)(vr,{value:i.parsed||[],onUpdate:function(e){a(Ra(Ra({},i),{},{useRaw:!1,parsed:e}))}})}if(t.choices)return(0,O.jsx)(io,Ra({},e));switch(r){case"string":return(0,O.jsx)(Br,Ra({},e));case"int":return(0,O.jsx)(Pr,Ra({},e));case"boolean":return(0,O.jsx)(Ir,Ra({},e));case"phandle":case"phandles":return(0,O.jsx)(ea,Ra({},e));case"phandle-array":return(0,O.jsx)(Ta,Ra({},e));default:return(0,O.jsx)(kr,Ra({},e))}}_a.propTypes={schema:E().shape({type:E().oneOf(["string","boolean","int","array","phandle","phandles","phandle-array","integer-union"]),required:E().bool,description:E().string,default:E().any,const:E().any,helper:E().any}),prop:E().shape({parsed:E().any,raw:E().string}),onUpdate:E().func.isRequired};var Ma=_a;function Ya(e){return Ya="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Ya(e)}function qa(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Za(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?qa(Object(t),!0).forEach((function(n){Ka(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):qa(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Ka(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Ya(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Ya(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Ya(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Ua(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var Ga=function(e){var n,t,o,i=e.node,a=e.onUpdate,c=e.onCancel,l=(0,r.useContext)(Se).behaviors,s=(t=(0,r.useState)(i),o=2,function(e){if(Array.isArray(e))return e}(t)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(t,o)||function(e,n){if(e){if("string"==typeof e)return Ua(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Ua(e,n):void 0}}(t,o)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),u=s[0],f=s[1],p=l[null===(n=i.properties.compatible)||void 0===n?void 0:n.parsed],d=function(e){return function(n){f(Za(Za({},u),{},{properties:Za(Za({},u.properties),{},Ka({},e,n))}))}},y=(0,r.useCallback)((function(){a(J()(u))}),[u,a]),h=(null==p?void 0:p.properties)||{},m=(p?Object.keys(h):Object.keys(u.properties)).filter((function(e){var n;return!("label"===e||null!==(n=h[e])&&void 0!==n&&n.deprecatedBy&&!u.properties[e])}));return(0,O.jsx)(fn,{onDismiss:c,children:(0,O.jsx)(tn,{dismissText:!1,children:(0,O.jsxs)("div",{style:{maxHeight:"80vh",overflow:"auto"},children:[(0,O.jsxs)("h2",{children:["Edit ",i.name," ",(0,O.jsxs)("code",{children:["(&",i.labels[0],")"]})]}),(0,O.jsx)(Yn,{node:u,onUpdate:f}),(0,O.jsx)("h3",{children:"Configuration"}),(0,O.jsxs)("table",{className:Kn.editorForm,children:[(0,O.jsx)("thead",{children:(0,O.jsxs)("tr",{children:[(0,O.jsx)("th",{children:"Property"}),(0,O.jsx)("th",{children:"Value"}),(0,O.jsx)("th",{})]})}),(0,O.jsx)("tbody",{children:m.map((function(e,n){var t,r;return(0,O.jsxs)("tr",{children:[(0,O.jsx)("td",{className:Kn.propertyName,children:e in h?(0,O.jsx)(Un,{property:e,schema:h[e]}):(0,O.jsx)("input",{value:e,onChange:(r=e,function(e){f(Za(Za({},u),{},{properties:Object.keys(u.properties).reduce((function(n,t){var o=u.properties[t];return t===r&&(t=e.target.value),n[t]=o,n}),{})}))})})}),(0,O.jsx)("td",{className:Kn.propertyValue,children:(0,O.jsx)(Ma,{name:e,prop:u.properties[e],schema:h[e],onUpdate:d(e)})}),(0,O.jsx)("td",{children:u.properties[e]&&!(null!==(t=h[e])&&void 0!==t&&t.required)&&(0,O.jsx)(L,{name:"trash-can",className:Kn.action,onClick:function(){return function(e){f(Za(Za({},u),{},{properties:We()(u.properties,e)}))}(e)}})})]},n)}))})]}),(0,O.jsxs)("div",{style:{textAlign:"center"},children:[(0,O.jsx)(Ge,{onClick:y,children:"Okay"}),(0,O.jsx)(Ge,{onClick:c,secondary:!0,children:"Cancel"})]})]})})})},za=t(87617),Wa={};Wa.styleTagTransform=b(),Wa.setAttributes=d(),Wa.insert=f().bind(null,"head"),Wa.domAPI=s(),Wa.insertStyleElement=h(),c()(za.Z,Wa);var Fa=za.Z&&za.Z.locals?za.Z.locals:void 0;function Xa(e){return Xa="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Xa(e)}var Va=["href","children","external","showExternal"];function Qa(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Ha(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Qa(Object(t),!0).forEach((function(n){Ja(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Qa(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Ja(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Xa(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Xa(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Xa(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function $a(e){var n=e.href,t=e.children,r=e.external,o=e.showExternal,i=function(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}(e,Va),a=Object.assign({href:n},i,r&&{rel:"noreferrer",target:"_blank"});return(0,O.jsxs)("a",Ha(Ha({},a),{},{children:[t,r&&o&&(0,O.jsx)(L,{className:Fa.icon,name:"arrow-up-right-from-square"})]}))}$a.propTypes={href:E().string.isRequired,children:E().oneOfType([E().arrayOf(E().node),E().node]).isRequired,external:E().bool.isRequired,showExternal:E().bool},$a.defaultProps={external:!1,showExternal:!0};var ec=$a;function nc(e){var n=e.onDismiss,t=(0,O.jsx)(ec,{external:!0,href:"https://github.com/nickcoutsos/keymap-editor/issues",children:"Keymap Editor Issues"});return(0,O.jsx)(fn,{onDismiss:n,children:(0,O.jsxs)(tn,{onDismiss:n,style:{maxHeight:"80vh",overflow:"scroll"},children:[(0,O.jsx)("h2",{children:"Behavior Editing Beta Test"}),(0,O.jsx)("p",{children:"Welcome to the behavior editing beta!"}),(0,O.jsx)("p",{children:"This feature has been a long time coming, and while it should enable a lot of advanced ZMK features through the app it is still a work in progress. Some features are still missing so the use experience is a little rough, and there may be errors as well. Some familiarity with ZMK behavior functionality is expected."}),(0,O.jsxs)("p",{children:["I've been using it for a while and it seems to be in a pretty workable state, but I can't catch everything, so it would mean a lot to me for you to share any feedback or issues on GitHub: ",t,"."]})]})})}function tc(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var rc=["zmk,behavior-hold-tap","zmk,behavior-mod-morph","zmk,behavior-tap-dance","zmk,behavior-sticky-key","zmk,behavior-caps-word"];function oc(e){var n,t,o=e.onUpdate,i=e.onCancel,a=(n=(0,r.useState)(""),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||function(e,n){if(e){if("string"==typeof e)return tc(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?tc(e,n):void 0}}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),c=a[0],l=a[1];return(0,O.jsx)(fn,{children:(0,O.jsxs)(tn,{dismissText:null,children:[(0,O.jsx)("h3",{children:"Add new behavior"}),(0,O.jsxs)("label",{children:["Type ",(0,O.jsxs)("select",{required:!0,value:c,onChange:function(e){return l(e.target.value)},children:[(0,O.jsx)("option",{value:"",disabled:!0,children:"Select a behavior type"}),rc.map((function(e,n){return(0,O.jsx)("option",{value:e,children:e},n)}))]})]}),(0,O.jsxs)("div",{style:{textAlign:"center",margin:"10px"},children:[(0,O.jsx)(Ge,{disabled:!c,onClick:function(){return o(c)},children:"Create"}),(0,O.jsx)(Ge,{onClick:i,secondary:!0,children:"Cancel"})]})]})})}oc.propTypes={onUpdate:E().func.isRequired,onCancel:E().func.isRequired};var ic=oc,ac=t(95130);function cc(e){return cc="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},cc(e)}function lc(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function sc(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?lc(Object(t),!0).forEach((function(n){uc(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):lc(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function uc(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==cc(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==cc(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===cc(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function fc(e,n){var t=n.name,r=n.labels,o=n.label,i=ac.behaviorSchemas[e];return{name:t,labels:r,properties:sc({compatible:{raw:'"'.concat(e,'"'),parsed:e},label:{raw:'"'.concat(o,'"'),parsed:o}},Object.keys(i.properties).reduce((function(e,n){var t=i.properties[n];return function(e){return["phandle","phandles","phandle-array"].includes(e.type)}(t)&&t.length?e[n]={parsed:yi()(t.length,(function(){return"&none"}))}:"const"in t&&(e[n]={parsed:t.const,raw:"<".concat(t.const.toString(),">")}),e}),{}))}}var pc=t(62412),dc=function(e){return e.keyboard.keymap.behaviors},yc=(0,hi.oM)({name:"behaviors",initialState:[],reducers:{addBehavior:function(e,n){e.push(n.payload.behavior)},updateBehavior:function(e,n){e[n.payload.behaviorIndex]=We()(n.payload.behavior,"params"),(0,pc.resolveBehaviorParams)(e)},deleteBehavior:function(e,n){e.splice(n.payload.behaviorIndex,1)}}}),hc=yc.actions,mc=hc.addBehavior,bc=hc.updateBehavior,Ac=hc.deleteBehavior,vc=yc.reducer;function gc(e){return gc="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},gc(e)}function xc(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function jc(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?xc(Object(t),!0).forEach((function(n){Cc(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):xc(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Cc(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==gc(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==gc(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===gc(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function wc(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(e,n)||function(e,n){if(e){if("string"==typeof e)return Ec(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Ec(e,n):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Ec(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var Oc=function(){var e=(0,i.v9)((function(e){return e.experimentalSettings})),n=wc((0,r.useState)(null),2),t=n[0],o=n[1],a=wc((0,r.useState)(!1),2),c=a[0],l=a[1],s=wc((0,r.useState)(!1),2),u=s[0],f=s[1],p=(0,i.v9)(dc),d=(0,i.I0)(),y=(0,r.useCallback)((function(){l(!0)}),[l]),h=(0,r.useCallback)((function(e){l(!1),d(mc({behavior:fc(e,{name:"new_behavior",labels:["new_behavior"],label:"NEW_BEHAVIOR"})})),setTimeout((function(){return o(p.length)}))}),[p,d,l,o]),m=(0,r.useCallback)((function(e){o(e)}),[o]),b=(0,r.useCallback)((function(e){d(Ac({behaviorIndex:e}))}),[d]),A=(0,r.useCallback)((function(e){e.stopPropagation(),f(!0)}),[f]),v=(0,r.useCallback)((function(){f(!1)}),[f]),g=(0,r.useCallback)((function(n){d({type:"SETTINGS_UPDATE",settings:jc(jc({},e),{},{enableBehaviorEditing:n})})}),[e,d]);return(0,O.jsxs)("div",{className:Kn.main,children:[c&&(0,O.jsx)(ic,{onUpdate:h,onCancel:function(){return l(!1)}}),null!==t&&(0,O.jsx)(Ga,{node:p[t],onCancel:function(){return o(null)},onUpdate:function(e){o(null),d(bc({behaviorIndex:t,behavior:e}))}}),u&&(0,O.jsx)(nc,{onDismiss:v}),(0,O.jsxs)("div",{className:Kn.panel,children:[(0,O.jsxs)("label",{children:["Enable Beta",(0,O.jsx)("input",{type:"checkbox",checked:e.enableBehaviorEditing,onChange:function(e){return g(e.target.checked)}})]}),(0,O.jsxs)(Ge,{onClick:A,style:{backgroundColor:"orange"},children:[(0,O.jsx)(L,{name:"warning"})," Details"]}),(0,O.jsx)("h3",{children:"Custom Behaviors"}),(0,O.jsxs)("table",{style:{width:"100%"},children:[(0,O.jsx)("thead",{children:(0,O.jsxs)("tr",{children:[(0,O.jsx)("th",{children:"Binding"}),(0,O.jsx)("th",{children:"Compatible"}),(0,O.jsx)("th",{children:"Actions"})]})}),(0,O.jsx)("tbody",{children:p.map((function(n,t){return(0,O.jsxs)("tr",{children:[(0,O.jsx)("td",{children:(0,O.jsxs)("code",{children:["&",n.labels[0]]})}),(0,O.jsx)("td",{children:n.properties.compatible.raw}),(0,O.jsx)("td",{children:e.enableBehaviorEditing&&(0,O.jsxs)(O.Fragment,{children:[(0,O.jsx)(L,{className:Kn.action,onClick:function(){return m(t)},name:"wrench"}),(0,O.jsx)(L,{className:Kn.action,onClick:function(){return b(t)},name:"trash-can"})]})})]},t)}))})]}),(0,O.jsx)(Ge,{onClick:y,children:"Add New Behavior"})]})]})},kc=t(78207),Sc={};Sc.styleTagTransform=b(),Sc.setAttributes=d(),Sc.insert=f().bind(null,"head"),Sc.domAPI=s(),Sc.insertStyleElement=h(),c()(kc.Z,Sc);var Bc=kc.Z&&kc.Z.locals?kc.Z.locals:void 0;function Pc(){return(0,O.jsx)("p",{className:Bc.floatingMessage,children:"Click on a key to add it to the combo"})}function Ic(e){var n=e.keyPositions,t=e.onUpdate;return(0,O.jsxs)("div",{className:Bc.comboInputMap,children:[(0,O.jsx)(vr,{value:n,onUpdate:t}),n.length<2&&(0,O.jsx)(Pc,{})]})}Ic.propTypes={onUpdate:E().func.isRequired,keyPositions:E().arrayOf(E().number).isRequired};var Tc=Ic,Lc=t(86015),Dc={};Dc.styleTagTransform=b(),Dc.setAttributes=d(),Dc.insert=f().bind(null,"head"),Dc.domAPI=s(),Dc.insertStyleElement=h(),c()(Lc.Z,Dc);var Rc=Lc.Z&&Lc.Z.locals?Lc.Z.locals:void 0;function Nc(e){return function(n){n.stopPropagation(),e()}}function _c(e){return function(n){e[n.key]&&e[n.key]()}}function Mc(e){return Mc="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Mc(e)}function Yc(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function qc(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Yc(Object(t),!0).forEach((function(n){Zc(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Yc(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Zc(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Mc(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Mc(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Mc(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Kc(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function Uc(e){var n,t,o=e.value,i=e.validate,a=e.required,c=e.render,l=e.onUpdate,s=(0,r.useRef)(),u=(n=(0,r.useState)({value:o,editing:!1,attemptedEmpty:!1}),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||function(e,n){if(e){if("string"==typeof e)return Kc(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Kc(e,n):void 0}}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),f=u[0],p=u[1],d=f.attemptedEmpty?"cannot be empty":i&&i(f.value),y=(0,r.useCallback)((function(e){e&&(e.focus(),e.select())}),[]),h=(0,r.useCallback)((function(){p((function(e){return qc(qc({},e),{},{editing:!1})}))}),[p]),m=(0,r.useCallback)((function(e){s.current&&!s.current.contains(e.target)&&h()}),[s,h]);return(0,r.useEffect)((function(){return document.addEventListener("click",m),function(){return document.removeEventListener("click",m)}}),[m]),f.editing?(0,O.jsxs)("span",{className:Rc.container,ref:s,children:[(0,O.jsx)("input",{ref:y,value:f.value,onChange:function(e){return p(qc(qc({},f),{},{attemptedEmpty:!1,value:e.target.value}))},onKeyDown:_c({Enter:function(){f.editing&&(""===f.value&&a?p(qc(qc({},f),{},{attemptedEmpty:!0})):(d||l(f.value),p(qc(qc({},f),{},{value:f.value,editing:!1}))))},Escape:h})}),d&&(0,O.jsx)("span",{className:Rc.error,children:d})]}):c((0,O.jsxs)(O.Fragment,{children:[(0,O.jsx)("span",{children:o}),(0,O.jsx)(L,{name:"pencil",className:Rc.edit,onClick:Nc((function(){return p(qc(qc({},f),{},{editing:!0}))}))})]}))}Uc.propTypes={value:E().string.isRequired,validate:E().func,required:E().bool.isRequired,render:E().func.isRequired,onUpdate:E().func.isRequired},Uc.defaultProps={required:!0};var Gc=Uc;function zc(e){return zc="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},zc(e)}function Wc(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Fc(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Wc(Object(t),!0).forEach((function(n){Xc(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Wc(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Xc(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==zc(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==zc(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===zc(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Vc(e,n){if(e){if("string"==typeof e)return Qc(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Qc(e,n):void 0}}function Qc(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function Hc(e){var n=e.selected,t=e.options,r=e.onUpdate;return(0,O.jsx)("ul",{className:Bc.layerList,children:t.map((function(e,t){return(0,O.jsx)("li",{"data-selected":n.includes(t),onClick:function(){return e=t,void r(n.includes(e)?n.filter((function(n){return n!==e})):[].concat(function(e){if(Array.isArray(e))return Qc(e)}(o=n)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(o)||Vc(o)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),[e]));var e,o},children:e})}))})}var Jc=function(e){var n,t,o=e.combo,a=e.onUpdate,c=(0,i.v9)(vi),l=(n=(0,r.useState)(tt()(o,["timeoutMs","slowRelease","layers"])),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||Vc(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),s=l[0],u=l[1],f=c.map((function(e){return e.name}));return(0,O.jsx)(fn,{children:(0,O.jsxs)(tn,{onDismiss:function(){a(s)},children:[(0,O.jsxs)("h2",{children:["Customize [",(0,O.jsx)("code",{children:o.identifier}),"]"]}),(0,O.jsxs)("div",{children:[(0,O.jsxs)("div",{className:Bc.field,children:[(0,O.jsx)("label",{htmlFor:"customize-combo-timeout",children:"Timeout (ms)"}),(0,O.jsx)("input",{id:"customize-combo-timeout",type:"number",placeholder:"Default",value:s.timeoutMs,onChange:function(e){return u((function(n){return Fc(Fc({},n),{},{timeoutMs:""===e.target.value?void 0:Number(e.target.value)})}))}})]}),(0,O.jsxs)("div",{className:Bc.field,children:[(0,O.jsx)("label",{htmlFor:"customize-combo-slow-release",children:"Slow Release"}),(0,O.jsx)("input",{id:"customize-combo-slow-release",type:"checkbox",checked:s.slowRelease,onChange:function(e){return u((function(n){return Fc(Fc({},n),{},{slowRelease:e.target.checked})}))}})]}),(0,O.jsxs)("div",{className:Bc.field,children:[(0,O.jsx)("label",{children:"Layers"}),(0,O.jsx)(Hc,{selected:s.layers||[],options:f,onUpdate:function(e){return u((function(n){return Fc(Fc({},n),{},{layers:e})}))}})]})]})]})})},$c=function(e){return e.keyboard.keymap.combos},el=(0,hi.oM)({name:"combos",initialState:[],reducers:{updateComboBinding:function(e,n){e[n.payload.comboIndex].bindings=n.payload.bindings},updateComboKeypositions:function(e,n){e[n.payload.comboIndex].keyPositions=n.payload.keyPositions},createCombo:function(e){e.push({identifier:"new_combo",keyPositions:[],bindings:[{value:"&trans",params:[]}]})},renameCombo:function(e,n){e[n.payload.index].identifier=n.payload.name},deleteCombo:function(e,n){e.splice(n.payload.index,1)},customizeCombo:function(e,n){Object.assign(e[n.payload.index],n.payload.config)}}}),nl=el.actions,tl=nl.updateComboBinding,rl=nl.updateComboKeypositions,ol=nl.createCombo,il=nl.renameCombo,al=nl.deleteCombo,cl=nl.customizeCombo,ll=el.reducer;function sl(e){return sl="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},sl(e)}function ul(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function fl(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?ul(Object(t),!0).forEach((function(n){pl(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ul(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function pl(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==sl(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==sl(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===sl(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function dl(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function yl(e){var n,t,o=(0,r.useContext)(j).identifiers,a=(0,i.v9)($c),c=(0,i.I0)(),l=(n=(0,r.useState)(null),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||function(e,n){if(e){if("string"==typeof e)return dl(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?dl(e,n):void 0}}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),s=l[0],u=l[1];function f(e){return wn(e)||(o.includes(e)?'Cannot use existing identifier "'.concat(e,'"'):null)}return(0,O.jsxs)("div",{className:Bc.main,children:[null!==s&&(0,O.jsx)(Jc,{combo:a[s],onUpdate:function(e){return function(e,n){u(null),c(cl({index:e,config:n}))}(s,e)}}),(0,O.jsxs)("div",{className:Bc.sidebar,children:[(0,O.jsxs)(ec,{external:!0,href:"https://zmk.dev/docs/features/combos",children:[(0,O.jsx)(L,{name:"book"})," ZMK Docs: Combos"]}),(0,O.jsx)(Ge,{onClick:function(){c(ol())},children:"Add New Combo"})]}),(0,O.jsx)("div",{className:Bc.comboPanel,children:a.map((function(e,n){return(0,O.jsxs)("div",{className:Bc.combo,children:[(0,O.jsxs)("div",{className:Bc.heading,children:[(0,O.jsx)(Gc,{value:e.identifier,validate:f,render:function(e){return(0,O.jsx)("h5",{children:(0,O.jsx)("code",{children:e})})},onUpdate:function(e){return function(e,n){c(il({index:e,name:n}))}(n,e)}}),(0,O.jsxs)("div",{className:Bc.actions,children:[(0,O.jsx)(L,{name:"wrench",className:"".concat(Bc.action),onClick:function(){return u(n)}}),(0,O.jsx)(L,{name:"trash-can",className:"".concat(Bc.action," ").concat(Bc.remove),onClick:function(){c(al({index:n}))}})]})]}),(0,O.jsxs)("div",{className:Bc.detail,children:[(0,O.jsx)("div",{className:Bc.comboOutput,children:(0,O.jsx)(Oa,fl(fl({},e.bindings[0]),{},{onUpdate:function(e){!function(e,n){c(tl({comboIndex:e,bindings:[n]}))}(n,e)}}))}),(0,O.jsx)(Tc,{keyPositions:e.keyPositions,onUpdate:function(e){return function(e,n){c(rl({comboIndex:e,keyPositions:n}))}(n,e)}})]})]},n)}))})]})}yl.propTypes={};var hl=yl,ml=t(50335),bl={};bl.styleTagTransform=b(),bl.setAttributes=d(),bl.insert=f().bind(null,"head"),bl.domAPI=s(),bl.insertStyleElement=h(),c()(ml.Z,bl);var Al=ml.Z&&ml.Z.locals?ml.Z.locals:void 0;function vl(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(e,n)||function(e,n){if(e){if("string"==typeof e)return gl(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?gl(e,n):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function gl(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function xl(e){var n=e.activeLayer,t=e.onSelect,o=(0,r.useRef)(null),a=(0,i.I0)(),c=(0,r.useContext)(ir).bindingCount,l=(0,i.v9)(vi),s=vl((0,r.useState)(!1),2),u=s[0],f=s[1],p=vl((0,r.useState)(""),2),d=p[0],y=p[1],h=(0,r.useCallback)((function(e){if(e===n)return y(l[n].name),void f(!0);f(!1),t(e)}),[l,n,y,f,t]),m=(0,r.useCallback)((function(){return a(ji({bindingCount:c}))}),[a,c]),b=(0,r.useMemo)((function(){return function(e,n){window.confirm("Really delete layer: ".concat(n,"?"))&&a(wi({index:e}))}}),[a]),A=(0,r.useCallback)((function(){if(u){var e=n,t=d;y(""),f(!1),a(Ci({index:e,name:t}))}}),[d,u,n,y,f,a]),v=(0,r.useCallback)((function(){u&&(y(""),f(!1))}),[u,y,f]),g=(0,r.useMemo)((function(){return function(e){o.current&&!o.current.contains(e.target)&&v()}}),[o,v]);(0,r.useEffect)((function(){return document.addEventListener("click",g),function(){return document.removeEventListener("click",g)}}),[g]);var x=(0,r.useCallback)((function(e){e&&(e.focus(),e.select())}),[]);return(0,O.jsx)("div",{className:Al.layerSelector,"data-renaming":u,ref:o,children:(0,O.jsxs)("ul",{children:[l.map((function(e,t){var r=e.name;return(0,O.jsxs)("li",{className:n===t?Al.active:"","data-layer":t,onClick:Nc((function(){return h(t)})),children:[(0,O.jsx)("span",{className:Al.index,children:t}),n===t&&u?(0,O.jsx)("input",{ref:x,className:Al.name,onChange:function(e){return y(e.target.value)},onKeyDown:_c({Enter:A,Escape:v}),value:n===t&&u?d:r}):(0,O.jsxs)("span",{className:Al.name,children:[r,(0,O.jsx)(L,{name:"times-circle",className:Al.delete,onClick:Nc((function(){return b(t,r)}))})]})]},"layer-".concat(t))})),(0,O.jsxs)("li",{onClick:m,children:[(0,O.jsx)(L,{className:Al.index,name:"plus"}),(0,O.jsx)("span",{className:Al.name,children:"Add Layer"})]})]})})}xl.propTypes={activeLayer:E().number.isRequired,onSelect:E().func.isRequired};var jl=xl;function Cl(e){var n=e.direction;return(0,O.jsx)("svg",{xmlns:"http://www.w3.org/2000/svg",width:"65px",height:"65px",viewBox:"0 0 65 65",style:{position:"absolute",top:"-10px",stroke:"var(--key-color-base)",strokeWidth:2,fill:"none",display:"block",width:"65px",height:"65px",pointerEvents:"none"},children:(0,O.jsx)("path",{style:{transform:"scaleX(".concat("cw"===n?-1:1,") rotate(-45deg)"),transformOrigin:"center center"},d:"M 63 31 A 30 30 45 0 0 32.5 2 M 37 -2 L 32.5 2 L 37 6"})})}function wl(e){var n=e.context,t=e.direction,r=e.params,o=e.onUpdate;return(0,O.jsxs)(_t,{themeClass:It.encoder,children:[(0,O.jsx)(Cl,{direction:t}),(0,O.jsx)(ga,{hideBehaviour:!0,context:n,value:"&kp",params:r,onUpdate:o})]})}wl.propTypes={params:E().arrayOf(mo),onUpdate:E().func.isRequired};var El=wl;function Ol(e){return Ol="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Ol(e)}function kl(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function Sl(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Bl(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Sl(Object(t),!0).forEach((function(n){Pl(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Sl(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Pl(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Ol(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Ol(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Ol(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}var Il=function(e){var n=e.layer,t=e.sensors,r=(0,i.I0)(),o=(0,i.v9)(vi)[n].sensorBindings,a=void 0===o?[]:o;function c(e,t,o){var i=o.params[0],c=a[e]||{value:"&inc_dec_kp",params:[{value:"",params:[]},{value:"",params:[]}]};r(ki({layerIndex:n,sensorIndex:e,bindings:Bl(Bl({},c),{},{params:Wi(c.params,t,i)})}))}return(0,O.jsxs)("div",{style:{margin:"0 0 30px"},children:[(0,O.jsx)("h3",{children:"Sensor bindings"}),(0,O.jsx)("div",{style:{display:"flex",flexDirection:"row",gap:"25px"},children:t.map((function(e,n){var t,r=e.label||e.identifier,o=function(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(e,n)||function(e,n){if(e){if("string"==typeof e)return kl(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?kl(e,n):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}((null===(t=a[n])||void 0===t?void 0:t.params)||[],2),i=o[0],l=o[1];return(0,O.jsxs)("div",{style:{display:"block"},children:[(0,O.jsx)("label",{style:{fontVariant:"small-caps",fontSize:"90%"},children:(0,O.jsx)("code",{children:r})}),(0,O.jsxs)("div",{style:{display:"flex",flexDirection:"row",gap:"5px",marginTop:"20px"},children:[(0,O.jsx)(El,{direction:"ccw",params:[l],onUpdate:function(e){return c(n,1,e)}}),(0,O.jsx)(El,{direction:"cw",params:[i],onUpdate:function(e){return c(n,0,e)}})]})]},n)}))})]})},Tl=t(56634),Ll={};Ll.styleTagTransform=b(),Ll.setAttributes=d(),Ll.insert=f().bind(null,"head"),Ll.domAPI=s(),Ll.insertStyleElement=h(),c()(Tl.Z,Ll);var Dl=Tl.Z&&Tl.Z.locals?Tl.Z.locals:void 0;function Rl(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function Nl(e){var n,t,o=e.actions,i=(n=(0,r.useState)(!1),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||function(e,n){if(e){if("string"==typeof e)return Rl(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Rl(e,n):void 0}}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=i[0],c=i[1],l=(0,r.useRef)(),s=(0,r.useCallback)((function(e){l.current&&!l.current.contains(e.target)&&c(!1)}),[l,c]);return(0,r.useEffect)((function(){return document.body.addEventListener("click",s),function(){return document.body.removeEventListener("click",s)}}),[s]),(0,O.jsxs)("div",{ref:l,className:[Dl.menu,a&&Dl.open].join(" "),children:[(0,O.jsx)("p",{onClick:function(){return c(!a)},children:(0,O.jsx)(L,{name:"ellipsis"})}),(0,O.jsx)("ul",{children:o.map((function(e,n){return(0,O.jsx)("li",{onClick:function(){return function(e){c(!1),e()}(e.callback)},children:e.content},n)}))})]})}function _l(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function Ml(e){var n,t=e.activeLayer,o=e.additionalActions,a=void 0===o?[]:o,c=(0,i.I0)(),l=(0,r.useMemo)((function(){return{transparentToKeypress:function(){return c(Si({layerIndex:t}))},transparentToNone:function(){return c(Bi({layerIndex:t}))},noneToKeypress:function(){return c(Pi({layerIndex:t}))},noneToTransparent:function(){return c(Ii({layerIndex:t}))},emptyKeypressToTransparent:function(){return c(Ti({layerIndex:t}))},emptyKeypressToNone:function(){return c(Li({layerIndex:t}))}}}),[c,t]);return(0,O.jsx)(Nl,{actions:[].concat((n=a,function(e){if(Array.isArray(e))return _l(e)}(n)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(n)||function(e,n){if(e){if("string"==typeof e)return _l(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?_l(e,n):void 0}}(n)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),[{callback:l.transparentToKeypress,content:(0,O.jsxs)(O.Fragment,{children:["Convert ",(0,O.jsx)("code",{children:"&trans"})," to ",(0,O.jsx)("code",{children:"&kp"})]})},{callback:l.transparentToNone,content:(0,O.jsxs)(O.Fragment,{children:["Convert ",(0,O.jsx)("code",{children:"&trans"})," to ",(0,O.jsx)("code",{children:"&none"})]})},{callback:l.noneToKeypress,content:(0,O.jsxs)(O.Fragment,{children:["Convert ",(0,O.jsx)("code",{children:"&none"})," to ",(0,O.jsx)("code",{children:"&kp"})]})},{callback:l.noneToTransparent,content:(0,O.jsxs)(O.Fragment,{children:["Convert ",(0,O.jsx)("code",{children:"&none"})," to ",(0,O.jsx)("code",{children:"&trans"})]})},{callback:l.emptyKeypressToTransparent,content:(0,O.jsxs)(O.Fragment,{children:["Convert ",(0,O.jsx)("code",{children:"&kp ⦸"})," to ",(0,O.jsx)("code",{children:"&trans"})]})},{callback:l.emptyKeypressToNone,content:(0,O.jsxs)(O.Fragment,{children:["Convert ",(0,O.jsx)("code",{children:"&kp ⦸"})," to ",(0,O.jsx)("code",{children:"&none"})]})}])})}Nl.propTypes={actions:E().arrayOf(E().shape({callback:E().func.isRequired,content:E().oneOfType([E().node,E().string]).isRequired})).isRequired},Ml.propTypes={activeLayer:E().number.isRequired,additionalActions:E().arrayOf(E().shape({callback:E().func.isRequired,content:E().oneOfType([E().node,E().string]).isRequired}))};var Yl=t(59500),ql={};ql.styleTagTransform=b(),ql.setAttributes=d(),ql.insert=f().bind(null,"head"),ql.domAPI=s(),ql.insertStyleElement=h(),c()(Yl.Z,ql);var Zl=Yl.Z&&Yl.Z.locals?Yl.Z.locals:void 0;function Kl(e){return Kl="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Kl(e)}function Ul(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Gl(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Ul(Object(t),!0).forEach((function(n){zl(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Ul(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function zl(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Kl(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Kl(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Kl(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Wl(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var Fl=function(e){var n,t,o=e.activeLayer,a=e.onClose,c=(0,i.I0)(),l=(0,i.v9)(vi)[o],s=(n=(0,r.useState)(tt()(l,["name","label"])),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||function(e,n){if(e){if("string"==typeof e)return Wl(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Wl(e,n):void 0}}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),u=s[0],f=s[1];return(0,O.jsx)(fn,{onDismiss:a,children:(0,O.jsxs)(tn,{dismissText:"",children:[(0,O.jsxs)("h2",{children:["Customize Layer ",(0,O.jsx)("code",{children:l.name})]}),(0,O.jsxs)("div",{children:[(0,O.jsxs)("div",{className:Zl.field,children:[(0,O.jsx)("label",{htmlFor:"customize-layer-name",children:"Name"}),(0,O.jsx)(gn,{id:"customize-layer-name",placeholder:"Default",value:u.name,validator:Cn,onChange:function(e){return f((function(n){return Gl(Gl({},n),{},{name:e.target.value})}))}})]}),(0,O.jsxs)("div",{className:Zl.field,children:[(0,O.jsx)("label",{htmlFor:"customize-layer-label",children:"Label"}),(0,O.jsx)("input",{id:"customize-layer-label",placeholder:"Default",value:u.label,onChange:function(e){return f((function(n){return Gl(Gl({},n),{},{label:e.target.value})}))}})]})]}),(0,O.jsxs)("div",{style:{textAlign:"center",gap:"5px"},children:[(0,O.jsx)(Ge,{onClick:function(){c(Ei(Gl({layerIndex:o},u))),a()},children:"OK"}),(0,O.jsx)(Ge,{onClick:a,secondary:!0,children:"Cancel"})]})]})})};function Xl(){var e=(0,i.I0)(),n=(0,r.useContext)(ir).bindingCount;return(0,O.jsxs)("div",{style:{textAlign:"center"},children:[(0,O.jsx)("h3",{children:"No keymap layers defined"}),(0,O.jsx)(Ge,{onClick:function(){return e(ji({bindingCount:n}))},children:"Add layer"})]})}function Vl(e){var n=e.layout,t=e.activeLayer,o=(0,i.I0)(),a=(0,i.v9)(vi)[t],c=(0,r.useCallback)((function(e,n){o(Oi({layerIndex:t,bindIndex:e,binding:n}))}),[o,t]);return(0,O.jsx)(Ot,{layout:n,bindings:a.bindings,renderKey:function(e){var n,t,r=e.index,o=e.keyLayout;return a.bindings[r]&&(0,O.jsx)(Oa,{label:o.label,value:null===(n=a.bindings[r])||void 0===n?void 0:n.value,params:null===(t=a.bindings[r])||void 0===t?void 0:t.params,onUpdate:function(e){return c(r,e)}})}})}var Ql=t(62029);function Hl(e,n){if(e){if("string"==typeof e)return Jl(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Jl(e,n):void 0}}function Jl(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var $l={keysHeld:[],keysHeldBeforeLastRelease:[]};function es(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(e,n)||function(e,n){if(e){if("string"==typeof e)return ns(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?ns(e,n):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ns(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var ts={Alt:"ALT",Control:"CTRL",Shift:"SHFT",Meta:"GUI",ArrowUp:"UP",ArrowDown:"DOWN",ArrowLeft:"LEFT",ArrowRight:"RIGHT",Escape:"ESC",Tab:"TAB",Enter:"RET",Home:"HOME",End:"END",PageDown:"PG_DN",PageUp:"PG_UP",Backspace:"BSPC",Delete:"DEL"};function rs(e,n){var t=arguments.length>2&&void 0!==arguments[2]&&arguments[2],o=(0,i.I0)(),a=es((0,r.useState)(t),2),c=a[0],l=a[1],s=es((0,r.useState)(0),2),u=s[0],f=s[1],p=(0,r.useCallback)((function(){u===n.length-1?(f(0),l(!1)):f(u+1)}),[u,f,n.length,l]),d=(0,r.useCallback)((function(n){var t=function(e){var n=function(e){return(0,q.compact)([e.altKey&&"LA",e.ctrlKey&&"LC",e.metaKey&&"LG",e.shiftKey&&"LS"])}(e),t=(0,Ql.mapCharacter)(e.key.toLowerCase())||function(e){var n=ts[e.key],t=function(e){switch(e.location){case 1:return"L";case 2:return"R";default:return""}}(e);return n?{value:"&kp",params:[{value:t+n,params:[]}]}:null}(e);if(t)return{value:t.value,params:n.reduce((function(e,n){return[{value:n,params:e}]}),t.params)}}(n);t&&(o(Oi({layerIndex:e,bindIndex:u,binding:t})),p())}),[e,u,p,o]);!function(e,n){var t,o,i=(t=(0,r.useReducer)((function(e,n){switch(n.type){case"KEY_DOWN":return function(e,n){return{keysHeld:[].concat((t=e.keysHeld,function(e){if(Array.isArray(e))return Jl(e)}(t)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(t)||Hl(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),[n.event.key]),keysHeldBeforeLastRelease:[]};var t}(e,n);case"KEY_UP":return function(e,n){return{keysHeld:[],keysHeldBeforeLastRelease:e.keysHeld.filter((function(e){return e!==n.event.key}))}}(e,n);case"RESET":return $l;default:return e}}),$l),o=2,function(e){if(Array.isArray(e))return e}(t)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(t,o)||Hl(t,o)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=i[0],c=i[1],l=(0,r.useCallback)((function(e){e.repeat||(e.preventDefault(),c({type:"KEY_DOWN",event:e}))}),[c]),s=(0,r.useCallback)((function(e){a.keysHeldBeforeLastRelease.includes(e.key)||(e.preventDefault(),n(e),c({type:"KEY_UP",event:e}))}),[a.keysHeldBeforeLastRelease,n,c]);(0,r.useEffect)((function(){if(e)return document.body.addEventListener("keydown",l),document.body.addEventListener("keyup",s),function(){document.body.removeEventListener("keydown",l),document.body.removeEventListener("keyup",s)}}),[e,l,s])}(c,d);var y=(0,r.useCallback)((function(){l(!0)}),[l]),h=(0,r.useCallback)((function(){l(!1)}),[l]);return[{isActive:c,bindIndex:u},{startQuickAssignment:y,cancelQuickAssignment:h,setBindIndex:f}]}function os(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function is(e){var n,t,o=e.layout,a=e.layerIndex,c=e.onClose,l=(0,i.v9)(vi)[a],s=(n=rs(a,o,!0),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||function(e,n){if(e){if("string"==typeof e)return os(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?os(e,n):void 0}}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),u=s[0],f=s[1],p=(0,r.useMemo)((function(){return et(o,{overrides:{minWidth:"400px"}})}),[o]);return(0,r.useEffect)((function(){u.isActive||c()}),[u.isActive,c]),(0,O.jsx)(fn,{onDismiss:c,children:(0,O.jsxs)(tn,{classes:[Zl.quickAssignDialog],dismissText:"",children:[(0,O.jsx)("h2",{children:"Quick-assign layer keybindings"}),(0,O.jsxs)("p",{children:["Press a key on your keyboard to set a ",(0,O.jsx)("code",{children:"&kp"})," binding at the highlighted position in your keymap."]}),(0,O.jsx)("div",{style:p,children:(0,O.jsx)(Ot,{layout:o,bindings:l.bindings,renderKey:function(e){var n,t,r=e.index,o=e.keyLayout;return l.bindings[r]&&(0,O.jsx)(Oa,{label:o.label,keyWrapperProps:{selectable:!1,onClick:function(){return f.setBindIndex(r)},className:St()([Zl.quickBindKey,u.bindIndex===r&&Zl.quickBindKeyHighlight]).join(" ")},value:null===(n=l.bindings[r])||void 0===n?void 0:n.value,params:null===(t=l.bindings[r])||void 0===t?void 0:t.params,onUpdate:function(e){}})}})}),(0,O.jsxs)("div",{style:{textAlign:"center"},children:[(0,O.jsx)(or,{children:"Click on a different key to jump ahead or correct a previous binding."}),(0,O.jsx)("p",{children:(0,O.jsx)(Ge,{onClick:c,children:"Done"})})]})]})})}function as(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(e,n)||function(e,n){if(e){if("string"==typeof e)return cs(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?cs(e,n):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function cs(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var ls=function(e){var n=e.sensors,t=(0,i.v9)(vi),o=as((0,r.useState)(0),2),a=o[0],c=o[1],l=as((0,r.useState)(!1),2),s=l[0],u=l[1],f=as((0,r.useState)(!1),2),p=f[0],d=f[1],y=Math.max(0,Math.min(a,t.length-1)),h=(0,r.useContext)(ir),m=h.layout,b=h.wrapperStyle,A=(0,r.useCallback)((function(){return u(!0)}),[u]),v=(0,r.useCallback)((function(){return d(!0)}),[d]),g=(0,r.useCallback)((function(){return d(!1)}),[d]),x=(0,r.useMemo)((function(){return[{callback:A,content:"Change Configuration"},{callback:v,content:(0,O.jsxs)(O.Fragment,{children:["Quick ",(0,O.jsx)("code",{children:"&kp"})," Assignment"]})}]}),[A,v]);if(0===t.length)return(0,O.jsx)(Xl,{});var j=b.width,C=b.height,w=b.margin,E=b.padding;return(0,O.jsxs)(O.Fragment,{children:[(0,O.jsx)(jl,{activeLayer:y,onSelect:c}),(0,O.jsxs)("div",{style:{margin:w,padding:E,width:"fit-content"},children:[(0,O.jsxs)("div",{style:{width:j},children:[(0,O.jsxs)("h3",{style:{position:"relative"},children:["Key Bindings ",(0,O.jsx)(Ml,{activeLayer:a,additionalActions:x})]}),(0,O.jsx)("div",{style:{height:C},children:(0,O.jsx)(Vl,{layout:m,activeLayer:y})})]}),(0,O.jsx)("div",{className:Zl.sensors,"data-sensor-count":n.length,style:{},children:(0,O.jsx)(Il,{sensors:n,layer:y})})]}),s&&(0,O.jsx)(Fl,{activeLayer:y,onClose:function(){return u(!1)}}),p&&(0,O.jsx)(is,{layout:m,layerIndex:y,onClose:g})]})};function ss(e){return["&macro_tap","&macro_press","&macro_release","&macro_tap_time","&macro_wait_time","&macro_pause_for_release"].includes(e.value)}var us=t(96201),fs={};fs.styleTagTransform=b(),fs.setAttributes=d(),fs.insert=f().bind(null,"head"),fs.domAPI=s(),fs.insertStyleElement=h(),c()(us.Z,fs);var ps=us.Z&&us.Z.locals?us.Z.locals:void 0,ds=t(18446),ys=t.n(ds),hs=t(35839),ms={};ms.styleTagTransform=b(),ms.setAttributes=d(),ms.insert=f().bind(null,"head"),ms.domAPI=s(),ms.insertStyleElement=h(),c()(hs.Z,ms);var bs=hs.Z&&hs.Z.locals?hs.Z.locals:void 0,As=["bindings","children","dragging","dragMode"],vs=["isDropping","control","classes"],gs=["bind"],xs=["bind"],js=["row","isDropping"];function Cs(e){return Cs="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Cs(e)}function ws(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(e,n)||Es(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Es(e,n){if(e){if("string"==typeof e)return Os(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Os(e,n):void 0}}function Os(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function ks(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}function Ss(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Bs(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Ss(Object(t),!0).forEach((function(n){Ps(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Ss(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Ps(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Cs(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Cs(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Cs(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Is(e){var n=e.bindings,t=(e.children,e.dragging),o=e.dragMode,i=ks(e,As),a=ws((0,r.useState)([null,null]),2),c=a[0],l=a[1],s=(0,r.useMemo)((function(){return function(e){return e.reduce((function(e,n,t){var r=function(){return 0===e.at(-1).length};return(ss(n)&&!r()||!r()&&ss(e.at(-1)[0])||6===e.at(-1).length)&&e.push([]),e.at(-1).push(Bs(Bs({},n),{},{index:t})),e}),[[]])}(n)}),[n]);function u(e){console.log("enter",e),l((function(){return e}))}function f(e){return ys()(c,e)}function p(e){l((function(n){return console.log("leaving",e,"currently in",n),ys()(n,e)?[null,null]:n}))}function d(){console.log("handleDrop",c);var e=ws(c,3),t=e[0],r=e[1],o=e[2],a=s[t][r].index,l=a<n.length-1?a+1:-1;i.onDrop(1===o?l:a)}return t&&(0,O.jsxs)("div",{className:[bs.dropTargets,t?bs.dragging:"","row"===o?bs.dropRowOnly:""].join(" "),children:[s.map((function(e,n){return(0,O.jsxs)(r.Fragment,{children:[(0,O.jsx)(Rs,{row:e,isDropping:f([n,0,-1]),onDragEnter:function(){return u([n,0,-1])},onDragLeave:function(){return p([n,0,-1])},onDrop:d}),e.map((function(t,o){return(0,O.jsxs)(r.Fragment,{children:[(0,O.jsx)(Ls,{bind:t,isDropping:f([n,o,0]),onDragEnter:function(){return u([n,o,0])},onDragLeave:function(){return p([n,o,0])},onDrop:d}),(0,O.jsx)(Ds,{bind:t,isDropping:f([n,o,1]),onDragEnter:function(){return u([n,o,1])},onDragLeave:function(){return p([n,o,1])},onDrop:d,"data-extend":ss(t)||o!==e.length-1?0:Math.max(0,5-o)})]},o)}))]},n)})),(0,O.jsx)(Rs,{row:s.length-1,isDropping:f([s.length-1,s.at(-1).length-1,1]),onDragEnter:function(){return u([s.length-1,s.at(-1).length-1,1])},onDragLeave:function(){return p([s.length-1,s.at(-1).length-1,1])},onDrop:d})]})}function Ts(e){var n,t=e.isDropping,r=e.control,o=void 0!==r&&r,i=e.classes,a=void 0===i?[]:i,c=ks(e,vs);return(0,O.jsx)("div",Bs({"data-is-control":o,className:[bs.dropTargetHalf,t?bs.droppable:""].concat((n=a,function(e){if(Array.isArray(e))return Os(e)}(n)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(n)||Es(n)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())).join(" ")},c))}function Ls(e){var n=e.bind,t=ks(e,gs);return(0,O.jsx)(Ts,Bs({control:ss(n)},t))}function Ds(e){var n=e.bind,t=ks(e,xs);return(0,O.jsx)(Ts,Bs({control:ss(n),classes:[bs.secondHalf]},t))}function Rs(e){e.row;var n=e.isDropping,t=ks(e,js);return(0,O.jsx)("div",Bs({"data-drop-mode":"row",className:[bs.dropTargetRow,n?bs.droppable:""].join(" ")},t))}function Ns(e,n){if(e){if("string"==typeof e)return _s(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?_s(e,n):void 0}}function _s(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var Ms=function(e){return{value:"&kp",params:[{value:e,params:[]}]}},Ys=[{pattern:/[0-9]/,convert:function(e){return Ms("N".concat(e))}},{pattern:/[a-z]/,convert:function(e){return Ms(e.toUpperCase())}},{pattern:/[A-Z]/,convert:function(e){return{value:"&kp",params:[{value:"LS",params:[{value:e.toUpperCase(),params:[]}]}]}}}],qs={"!":Ms("EXCL"),"@":Ms("AT"),"#":Ms("POUND"),$:Ms("DLLR"),"%":Ms("PRCNT"),"^":Ms("CARET"),"&":Ms("AMPS"),"*":Ms("STAR"),"(":Ms("LPAR"),")":Ms("RPAR"),"\n":Ms("RET")," ":Ms("SPACE"),"-":Ms("MINUS"),_:Ms("UNDER"),"=":Ms("EQUAL"),"+":Ms("PLUS"),"[":Ms("LBKT"),"]":Ms("LBRC"),"{":Ms("RBKT"),"}":Ms("RBRC"),"\\":Ms("BSLH"),"|":Ms("PIPE"),"":Ms("TILDE2"),";":Ms("SEMI"),":":Ms("COLON"),"'":Ms("SQT"),'"':Ms("DQT"),"`":Ms("GRAVE"),"~":Ms("TILDE"),",":Ms("COMMA"),"<":Ms("LT"),".":Ms("DOT"),">":Ms("GT"),"/":Ms("FSLH"),"?":Ms("QMARK")};var Zs=function(e){var n,t,o=e.onClose,i=(0,r.useContext)(j),a=i.sources,c=i.mergedGlyphs,l=(n=(0,r.useState)("Type something..."),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||Ns(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),s=l[0],u=l[1],f=(0,r.useMemo)((function(){return s.split("").reduce((function(e,n){var t=function(e){if(qs[e])return qs[e];var n,t=function(e,n){var t="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!t){if(Array.isArray(e)||(t=Ns(e))){t&&(e=t);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,c=!1;return{s:function(){t=t.call(e)},n:function(){var e=t.next();return a=e.done,e},e:function(e){c=!0,i=e},f:function(){try{a||null==t.return||t.return()}finally{if(c)throw i}}}}(Ys);try{for(t.s();!(n=t.n()).done;){var r=n.value,o=r.pattern,i=r.convert;if(e.match(o))return i(e)}}catch(e){t.e(e)}finally{t.f()}}(n);return t&&e.push(t),e}),[])}),[s]).map((function(e){return ni(e.value,e.params,a,void 0,c)})),p=(0,r.useCallback)((function(e){e&&(e.focus(),e.select())}),[]);return(0,O.jsx)(fn,{children:(0,O.jsxs)(tn,{dismissText:!1,children:[(0,O.jsx)("h2",{children:"Create Typing Sequence"}),(0,O.jsx)("p",{children:"Type a message to generate a sequence of bindings in the macro."}),(0,O.jsx)("textarea",{value:s,ref:p,style:{width:"100%",height:"6rem"},onChange:function(e){return u(e.target.value)}}),(0,O.jsx)("div",{className:ps.macroBindings,children:f.map((function(e,n){return(0,O.jsx)(r.Fragment,{children:(0,O.jsx)(_t,{selectable:!1,children:(0,O.jsx)(Go,{node:e.params[0],onSelect:function(){}})})},n)}))}),(0,O.jsxs)("div",{className:ps.macroActions,children:[(0,O.jsx)(Ge,{onClick:function(){return o(f)},children:"Add to macro"}),(0,O.jsx)(Ge,{onClick:function(){return o([])},secondary:!0,children:"Cancel"})]})]})})},Ks=function(e){return e.keyboard.keymap.macros},Us=(0,hi.oM)({name:"macros",initialState:[],reducers:{addMacro:function(e){e.push({name:"new_macro",labels:["new_macro"],properties:{compatible:{parsed:"zmk,behavior-macro",raw:'"zmk,behavior-macro"'},label:{parsed:"new_macro",raw:'"new_macro"'},"#binding-cells":{parsed:0},bindings:{parsed:[],raw:""}}})},renameMacro:function(e,n){e[n.payload.index].name=n.payload.name},deleteMacro:function(e,n){e.splice(n.payload.index,1)},addMacroControlBinding:function(e,n){e[n.payload.macroIndex].properties.bindings.parsed.push({value:"&macro_press",params:[]})},addMacroKeyBinding:function(e,n){e[n.payload.macroIndex].properties.bindings.parsed.push(n.payload.binding)},updateMacroBinding:function(e,n){e[n.payload.macroIndex].properties.bindings.parsed[n.payload.bindIndex]=n.payload.binding},reorderMacroBinding:function(e,n){var t,r,o;e[n.payload.macroIndex].properties.bindings.parsed=(t=e[n.payload.macroIndex].properties.bindings.parsed,r=n.payload.bindIndex,-1===(o=n.payload.targetIndex)?[].concat(Ui(t.filter((function(e,n){return n!==r}))),[t[r]]):t.reduce((function(e,n,i){return i===o&&e.push(t[r]),i!==r&&e.push(n),e}),[]))},deleteMacroBinding:function(e,n){e[n.payload.macroIndex].properties.bindings.parsed.splice(n.payload.bindIndex,1)},customizeMacroOptions:function(e,n){Object.assign(e[n.payload.macroIndex],n.payload.options)}}}),Gs=Us.actions,zs=Gs.addMacro,Ws=(Gs.renameMacro,Gs.deleteMacro),Fs=Gs.addMacroControlBinding,Xs=Gs.addMacroKeyBinding,Vs=Gs.updateMacroBinding,Qs=Gs.reorderMacroBinding,Hs=Gs.deleteMacroBinding,Js=Gs.customizeMacroOptions,$s=Us.reducer;function eu(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(e,n)||nu(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function nu(e,n){if(e){if("string"==typeof e)return tu(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?tu(e,n):void 0}}function tu(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function ru(e){var n=e.macroIndex,t=e.bindings,o=e.dispatch,i=eu((0,r.useState)(null),2),a=i[0],c=i[1],l=eu((0,r.useState)(!1),2),s=l[0],u=l[1];return(0,r.useEffect)((function(){function e(){c(null)}function n(e){e.stopPropagation(),e.preventDefault()}return document.body.addEventListener("drop",e),document.body.addEventListener("dragover",n),function(){document.body.removeEventListener("drop",e),document.body.removeEventListener("dragover",n)}}),[c]),(0,O.jsxs)(O.Fragment,{children:[(0,O.jsxs)("div",{className:ps.macroBindings,children:[t.map((function(e,i){return(0,O.jsx)(r.Fragment,{children:(0,O.jsxs)(_t,{"data-index":i,themeClass:ss(e)?ps.controlBinding:"",draggable:!0,onDragStart:function(e){return function(e,n){if(e.dataTransfer.items.length)e.dataTransfer.clearData();else{var r=t[n];c({index:n,mode:ss(r)?"row":"col",isControlBinding:ss(r)})}}(e,i)},children:[(0,O.jsx)(Oa,{context:ss(e)?"macros":void 0,value:e.value,params:e.params,onUpdate:function(e){o(Vs({macroIndex:n,bindIndex:i,binding:e}))}}),(0,O.jsx)("div",{className:ps.actions,children:(0,O.jsx)(L,{name:"trash",className:ps.deleteBind,onClick:Nc((function(){return o(Hs({macroIndex:n,bindIndex:i}))}))})})]},i)},i)})),(0,O.jsx)(Is,{dragging:a,bindings:t,onDrop:function(e){o(Qs({macroIndex:n,bindIndex:a.index,targetIndex:e})),c(null)}})]}),s&&(0,O.jsx)(Zs,{onClose:function(e){u(!1);var t,r=function(e,n){var t="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!t){if(Array.isArray(e)||(t=nu(e))){t&&(e=t);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,c=!1;return{s:function(){t=t.call(e)},n:function(){var e=t.next();return a=e.done,e},e:function(e){c=!0,i=e},f:function(){try{a||null==t.return||t.return()}finally{if(c)throw i}}}}(e);try{for(r.s();!(t=r.n()).done;){var i=t.value;o(Xs({macroIndex:n,binding:i}))}}catch(e){r.e(e)}finally{r.f()}}}),(0,O.jsxs)("div",{className:ps.macroActions,children:[(0,O.jsx)(Ge,{onClick:function(){return o(Fs({macroIndex:n}))},children:"Add Control Binding"}),(0,O.jsx)(Ge,{onClick:function(){o(Xs({binding:{value:"&kp",params:[]},macroIndex:n}))},children:"Add Key Binding"}),(0,O.jsx)(Ge,{onClick:function(){return u(!0)},children:"Add String Sequence"})]})]})}ru.propTypes={bindings:E().array.isRequired,macroIndex:E().number.isRequired,dispatch:E().func.isRequired};var ou=ru;function iu(e){return iu="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},iu(e)}function au(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function cu(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?au(Object(t),!0).forEach((function(n){lu(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):au(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function lu(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==iu(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==iu(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===iu(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function su(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var uu=function(e){var n,t,o,i,a=e.macro,c=e.onUpdate,l=(o=(0,r.useState)(a),i=2,function(e){if(Array.isArray(e))return e}(o)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(o,i)||function(e,n){if(e){if("string"==typeof e)return su(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?su(e,n):void 0}}(o,i)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),s=l[0],u=l[1];return(0,O.jsx)(fn,{onDismiss:function(){c(a)},children:(0,O.jsxs)(tn,{onDismiss:function(){c(s)},children:[(0,O.jsxs)("h2",{children:["Customize ",(0,O.jsx)("code",{children:a.name})]}),(0,O.jsxs)("div",{children:[(0,O.jsx)(Dn,{node:s,onUpdate:u}),(0,O.jsxs)("div",{className:ps.field,children:[(0,O.jsx)("label",{htmlFor:"customize-macro-wait",children:"Wait (ms)"}),(0,O.jsx)("input",{id:"customize-macro-wait",type:"number",placeholder:"Default",value:(null===(n=s.properties["wait-ms"])||void 0===n?void 0:n.parsed)||"",onChange:function(e){return u((function(n){return cu(cu({},n),{},{properties:cu(cu({},n.properties),{},{"wait-ms":""===e.target.value?void 0:{parsed:Number(e.target.value)}})})}))}})]}),(0,O.jsxs)("div",{className:ps.field,children:[(0,O.jsx)("label",{htmlFor:"customize-macro-tap",children:"Tap (ms)"}),(0,O.jsx)("input",{id:"customize-macro-tap",type:"number",placeholder:"Default",value:(null===(t=s.properties["tap-ms"])||void 0===t?void 0:t.parsed)||"",onChange:function(e){return u((function(n){return cu(cu({},n),{},{properties:cu(cu({},n.properties),{},{"tap-ms":""===e.target.value?void 0:{parsed:Number(e.target.value)}})})}))}})]})]})]})})};function fu(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function pu(e){var n,t,o=e.index,i=e.macro,a=e.dispatch,c=(n=(0,r.useState)(!1),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||function(e,n){if(e){if("string"==typeof e)return fu(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?fu(e,n):void 0}}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),l=c[0],s=c[1],u=(0,r.useCallback)((function(e){e.stopPropagation&&e.stopPropagation(),s(!0)}),[s]);return(0,O.jsxs)("div",{className:ps.macro,children:[l&&(0,O.jsx)(uu,{macro:i,onUpdate:function(e){s(!1),a(Js({macroIndex:o,options:e}))}}),(0,O.jsxs)("div",{className:ps.heading,children:[(0,O.jsx)("h5",{onClick:u,children:i.labels[0]}),(0,O.jsxs)("div",{children:[(0,O.jsx)(L,{name:"wrench",className:"".concat(ps.action),onClick:u}),(0,O.jsx)(L,{name:"trash-can",className:"".concat(ps.action," ").concat(ps.remove),onClick:function(){return a(Ws({index:o}))}})]})]}),(0,O.jsx)(ou,{macroIndex:o,bindings:i.properties.bindings.parsed,dispatch:a})]})}pu.propTypes={index:E().number.isRequired,macro:E().shape({name:E().string.isRequired,labels:E().arrayOf(E().string).isRequired,properties:E().object.isRequired}).isRequired,dispatch:E().func.isRequired};var du=pu,yu=function(){var e=(0,i.v9)(Ks),n=(0,i.I0)();return(0,O.jsxs)("div",{className:ps.main,children:[(0,O.jsxs)("div",{className:ps.sidebar,children:[(0,O.jsxs)(ec,{external:!0,href:"https://zmk.dev/docs/behaviors/macros",children:[(0,O.jsx)(L,{name:"book"})," ZMK Docs: Macros"]}),(0,O.jsx)(Ge,{onClick:function(){return n(zs())},children:"Add New Macro"})]}),e.map((function(e,t){return(0,O.jsx)(du,{macro:e,index:t,dispatch:n},t)}))]})},hu={},mu=E().string.isRequired,bu=E().arrayOf(E().shape(hu));hu.value=mu,hu.params=bu;var Au=E().shape(hu),vu=E().shape({identifier:E().string,index:E().number,bindings:E().arrayOf(Au),keyPositions:E().arrayOf(E().number).isRequired}),gu=E().shape({index:E().number,name:E().string,identifier:E().string,bindings:E().arrayOf(Au).isRequired,sensorBindings:E().arrayOf(Au)}),xu=E().shape({layers:E().arrayOf(gu).isRequired,combos:E().arrayOf(vu)}),ju=t(7739),Cu=t.n(ju);function wu(e){return e.every((function(e){return void 0===e.row&&void 0===e.col}))?["Layout in info.json has no row/col definitions. Generated keymap files will not be nicely formatted."]:[]}var Eu=t(2024);function Ou(e){return Ou="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Ou(e)}function ku(e){return function(e){if(Array.isArray(e))return Su(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,n){if(e){if("string"==typeof e)return Su(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Su(e,n):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Su(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function Bu(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Pu(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Ou(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Ou(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Ou(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}var Iu=function(e){return e.name},Tu=function(e){return e.labels[0]},Lu=function(e){return e.properties.label.parsed};function Du(e,n){var t=Cu()(e,n);return Object.values(t).filter((function(e){return e.length>1}))}function Ru(e){var n=e.layers.map((function(e,n){return{location:"Keymap - Layer #".concat(n," (").concat(e.name,")"),path:"keymap.layers[".concat(n,"]"),name:e.name}})),t=e.combos.map((function(e,n){return{location:"Combos - Combo #".concat(n," (").concat(e.identifier,")"),path:"combos[".concat(n,"].name"),name:e.identifier}})),r=e.macros.map((function(e,n){return{location:"Macros - Macro #".concat(n," (").concat(Iu(e),")"),path:"macros[".concat(n,"].name"),name:Iu(e)}})),o=function(e){return e.map((function(e,n){return{location:"Behaviors - Behavior #".concat(n," (").concat(Tu(e),") - Name"),path:"behaviors[".concat(n,"].name"),name:Iu(e)}}))}(e.behaviors),i=[].concat(ku(Du(n,"name")),ku(Du(t,"name")),ku(Du(r,"name")),ku(Du(o,"name"))),a=[].concat(ku(n.filter((function(e){return Eu.includes(e.name)}))),ku(t.filter((function(e){return Eu.includes(e.name)}))),ku(r.filter((function(e){return Eu.includes(e.name)}))),ku(o.filter((function(e){return Eu.includes(e.name)}))));return{duplicates:i,redefined:a,passwordMacros:ku(r.filter((function(e){return n=e.name,[/(^|[\b_])pass(word)?([\b_]|$)/].some((function(e){return n.match(e)}));var n})))}}function Nu(e){var n=Du([].concat(e.layers.reduce((function(e,n,t){return n.label&&e.push({location:"Keymap - Layer #".concat(t," (").concat(n.name,")"),path:"keymap.layers[".concat(t,"].label"),label:n.label}),e}),[]),e.macros.reduce((function(e,n,t){return n.label&&e.push({location:"Macros - Macro #".concat(t," (").concat(Lu(n),") - Label"),path:"macros[".concat(t,"].label"),label:Lu(n)}),e}),[]),function(e){return e.reduce((function(e,n,t){var r=Lu(n),o=Tu(n);return r&&e.push({location:"Behaviors - Behavior #".concat(t," (").concat(o,") - Label"),path:"behaviors[".concat(t,"].label"),label:r}),e}),[])}(e.behaviors)),"label");return{duplicates:n}}function _u(e){var n=Cu()([].concat(e.macros.map((function(e,n){return{location:"Macros > Macro #".concat(n," (").concat(Tu(e),")"),path:"macros[".concat(n,"].name"),ref:Tu(e)}})),function(e){return e.map((function(e,n){return{location:"Behaviors - Behavior #".concat(n," (").concat(Tu(e),") - Bind"),path:"behaviors[".concat(n,"].bind"),ref:Tu(e)}}))}(e.behaviors)),"ref");return{duplicates:Object.values(n).reduce((function(e,n){return n.length>1&&e.push(n),e}),[])}}var Mu=t(79577),Yu={};Yu.styleTagTransform=b(),Yu.setAttributes=d(),Yu.insert=f().bind(null,"head"),Yu.domAPI=s(),Yu.insertStyleElement=h(),c()(Mu.Z,Yu);var qu=Mu.Z&&Mu.Z.locals?Mu.Z.locals:void 0;function Zu(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function Ku(e){return e.location}function Uu(e){var n,t,o=e.name,i=e.explanation,a=e.warnings,c=e.renderWarning,l=void 0===c?Ku:c,s=(n=(0,r.useState)(0===a.length),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||function(e,n){if(e){if("string"==typeof e)return Zu(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Zu(e,n):void 0}}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),u=s[0],f=s[1];return(0,O.jsxs)("div",{className:St()([qu.warningCategory,0===a.length&&qu.emptyCategory,u&&qu.collapsedCategory]).join(" "),children:[(0,O.jsxs)("h3",{onClick:function(){return f(!u)},children:[(0,O.jsx)(L,{className:qu.caret,name:"caret-down"})," "," ",o," ",(0,O.jsxs)("em",{children:["(",a.length," issues)"]})]}),(0,O.jsxs)("div",{className:qu.warningDetails,children:[(0,O.jsx)("blockquote",{children:i}),a.length>0?(0,O.jsx)("ul",{children:a.map((function(e,n){return(0,O.jsx)("li",{children:l(e)},n)}))}):(0,O.jsx)("p",{children:"No problems"})]})]})}var Gu=(0,O.jsx)(ec,{external:!0,href:"https://github.com/nickcoutsos/keymap-editor/issues",children:"issue"}),zu=function(e){var n=e.sanityChecks,t=n.nodeNames,r=n.nodeLabels,o=n.nodeReferences,i=n.layoutMissingPositions;return(0,O.jsxs)("div",{style:{maxWidth:"700px",margin:"0 auto",paddingBottom:"60px"},children:[(0,O.jsx)("h2",{children:"Warnings"}),(0,O.jsx)(Uu,{name:"Layout row/col positions",warnings:i,explanation:(0,O.jsxs)(O.Fragment,{children:[(0,O.jsx)("p",{children:(0,O.jsxs)("em",{children:["Your keyboard's layout metadata should include a ",(0,O.jsx)("code",{children:"row"}),"and ",(0,O.jsx)("code",{children:"col"})," property for each key in order to generate a readable keymap ",(0,O.jsx)("code",{children:"bindings"})," array."]})}),(0,O.jsxs)("p",{children:["For more information see ",(0,O.jsx)(ec,{external:!0,href:"https://github.com/nickcoutsos/keymap-editor/wiki/Defining-keyboard-layouts",children:"Keymap Editor Wiki"}),"."]})]}),renderWarning:function(){}}),(0,O.jsx)(Uu,{name:"Duplicate node names",warnings:t.duplicates,explanation:(0,O.jsx)("p",{children:(0,O.jsx)("em",{children:"Node names must within the same section must be unique."})}),renderWarning:function(e){return(0,O.jsxs)(O.Fragment,{children:[(0,O.jsxs)("h4",{children:["Name ",(0,O.jsx)("code",{children:e[0].name})," re-used in:"]}),(0,O.jsx)("ul",{children:e.map((function(e,n){return(0,O.jsx)("li",{children:e.location},n)}))})]})}}),(0,O.jsx)(Uu,{name:"Re-definitions",warnings:t.redefined,explanation:(0,O.jsx)("p",{children:(0,O.jsx)("em",{children:"Node names cannot use existing ZMK identifiers."})})}),(0,O.jsx)(Uu,{name:"Macro Passwords",warnings:t.passwordMacros,explanation:(0,O.jsxs)(O.Fragment,{children:[(0,O.jsx)("p",{children:(0,O.jsx)("em",{children:"Using keyboard macros to enter passwords is a security risk and is strongly discouraged."})}),(0,O.jsx)("p",{children:"Recording passwords in your keyboard means that anyone with physical access to your keyboard would have access to credentials stored within it, whether they know to look for it or not. Also note that through this application you are recording keyboard configuration in a Git repository and storing credentials in a code repository is not considered a safe practice (even if the repository is private)."}),(0,O.jsxs)("p",{children:["Any macros listed here have names which seem to suggest that they are used for password entry. If that is the case I would encourage you to remove them and change the associated password(s) if needed. If this is a mistake feel free to create an ",Gu," to help me avoid false alarms in the future!"]})]})}),(0,O.jsx)(Uu,{name:"Duplicate labels",warnings:r.duplicates,explanation:(0,O.jsx)("p",{children:(0,O.jsx)("em",{children:"Label property values must be unique throughout the entire keymap."})}),renderWarning:function(e){return(0,O.jsxs)(O.Fragment,{children:[(0,O.jsxs)("h4",{children:["Name ",(0,O.jsx)("code",{children:e[0].label})," re-used in:"]}),(0,O.jsx)("ul",{children:e.map((function(e,n){return(0,O.jsx)("li",{children:e.location},n)}))})]})}}),(0,O.jsx)(Uu,{name:"Duplicate node references",warnings:o.duplicates,explanation:(0,O.jsx)("p",{children:(0,O.jsx)("em",{children:"Node references must be unique throughout the entire keymap."})}),renderWarning:function(e){return(0,O.jsxs)(O.Fragment,{children:[(0,O.jsxs)("h4",{children:["Reference ",(0,O.jsxs)("code",{children:["&",e[0].ref]})," re-used in:"]}),(0,O.jsx)("ul",{children:e.map((function(e,n){return(0,O.jsx)("li",{children:e.location},n)}))})]})}})]})};function Wu(e){return function(e){if(Array.isArray(e))return Xu(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||Fu(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Fu(e,n){if(e){if("string"==typeof e)return Xu(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Xu(e,n):void 0}}function Xu(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function Vu(e){var n,t,o=e.text,i=e.tabs,a=e.defaultTab,c=e.children,l=(n=(0,r.useState)(a),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||Fu(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),s=l[0],u=l[1];return(0,O.jsxs)(O.Fragment,{children:[(0,O.jsx)("h3",{style:{display:"inline"},children:o}),(0,O.jsx)("ul",{className:it.editorModeTabs,children:i.map((function(e,n){var t=e.name,r=e.tabClasses,o=void 0===r?[]:r;return(0,O.jsx)("li",{onClick:function(){return u(n)},className:(0,q.compact)([s===n&&it.activeEditTab].concat(Wu(o))).join(" "),children:t},n)}))}),c[s]]})}var Qu=function(e){return e.keyboard.keymap};function Hu(e){var n=(0,i.v9)(Qu),t=(0,r.useContext)(ir).layout,o=e.sensors,a=(0,r.useMemo)((function(){return function(e,n){return function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Bu(Object(t),!0).forEach((function(n){Pu(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Bu(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}({nodeNames:Ru(e),nodeLabels:Nu(e),nodeReferences:_u(e)},function(e){return{layoutMissingPositions:wu(e)}}(n))}(n,t)}),[n,t]),c=(0,r.useMemo)((function(){var e=a.nodeNames,n=a.nodeLabels,t=a.nodeReferences,r=a.layoutMissingPositions;return e.duplicates.length+e.redefined.length+e.passwordMacros.length+n.duplicates.length+t.duplicates.length+r.length}),[a]),l=(0,q.compact)([{name:"layers",component:(0,O.jsx)(ls,{sensors:o})},{name:"combos",component:(0,O.jsx)(hl,{})},{name:"macros",component:(0,O.jsx)(yu,{})},{name:(0,O.jsx)("span",{className:it.beta,children:"behaviors"}),component:(0,O.jsx)(Oc,{})},c>0&&{name:"warnings (".concat(c,")"),tabClasses:[it.warningTab],component:(0,O.jsx)(zu,{sanityChecks:a})}]);return(0,O.jsx)(De,{keymap:n,children:(0,O.jsx)(Vu,{text:"Editor mode:",tabs:l,defaultTab:0,children:l.map((function(e,n){return(0,O.jsx)(r.Fragment,{children:e.component},n)}))})})}Hu.propTypes={keymap:xu};var Ju=Hu,$u=t(2746),ef={};ef.styleTagTransform=b(),ef.setAttributes=d(),ef.insert=f().bind(null,"head"),ef.domAPI=s(),ef.insertStyleElement=h(),c()($u.Z,ef);var nf=$u.Z&&$u.Z.locals?$u.Z.locals:void 0,tf="https://github.com/nickcoutsos/keymap-editor";function rf(){return(0,O.jsxs)("div",{className:nf.wrapper,children:[(0,O.jsx)("label",{children:"Need help? Open an issue:"}),(0,O.jsxs)("a",{className:nf.githubLink,target:"_blank",rel:"noreferrer",href:tf,children:[(0,O.jsx)(L,{collection:"brands",name:"github"}),"/nickcoutsos/keymap-editor"]})]})}function of(e){return of="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},of(e)}function af(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function cf(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?af(Object(t),!0).forEach((function(n){lf(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):af(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function lf(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==of(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==of(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===of(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}var sf={description:{fontStyle:"italic",fontSize:"90%"}};function uf(e){var n=e.settings,t=e.onUpdate,r=e.onClose;function o(e,r){t(cf(cf({},n),{},lf({},e,r)))}return(0,O.jsx)(fn,{onDismiss:r,children:(0,O.jsxs)(tn,{onDismiss:r,children:[(0,O.jsx)("h1",{children:"Settings"}),(0,O.jsx)("h2",{children:"Keycode glyphs"}),(0,O.jsx)("h3",{children:(0,O.jsxs)("label",{htmlFor:"enable-unicode-glyphs",children:[(0,O.jsx)("input",{id:"enable-unicode-glyphs",type:"checkbox",checked:n.unicodeGlyphs,onChange:function(e){return o("unicodeGlyphs",e.target.checked)}}),"Use Unicode Glyphs"]})}),(0,O.jsxs)("p",{style:sf.description,children:["Use unicode glyphs for visual representations of keycodes like ",(0,O.jsx)("code",{children:"Enter"})," (⮐), ",(0,O.jsx)("code",{children:"Right Arrow"})," (⏵), etc. You can disable this if the symbols don't render correctly."]}),(0,O.jsx)("h3",{children:(0,O.jsxs)("label",{htmlFor:"platform-specific-glyphs",children:["Platform specific glyphs",(0,O.jsxs)("select",{id:"platform-specific-glyphs",value:n.platformGlyphs||"auto",onChange:function(e){return o("platformGlyphs",e.target.value)},children:[(0,O.jsx)("option",{value:"auto",children:"Automatic"}),(0,O.jsx)("option",{value:"win",children:"Windows"}),(0,O.jsx)("option",{value:"mac",children:"macOS"})]})]})}),(0,O.jsxs)("p",{style:sf.description,children:["Render symbols specific to your platform. E.g., render left/right meta key as ",(0,O.jsx)(L,{name:"windows fa-brands"})," for Windows, or ⌘ for macOS."]})]})})}uf.propTypes={settings:E().object.isRequired,onUpdate:E().func.isRequired,onClose:E().func.isRequired},uf.defaultProps={settings:{}};var ff=uf,pf=t(92127),df={};df.styleTagTransform=b(),df.setAttributes=d(),df.insert=f().bind(null,"head"),df.domAPI=s(),df.insertStyleElement=h(),c()(pf.Z,df);var yf=pf.Z&&pf.Z.locals?pf.Z.locals:void 0;function hf(e){return hf="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},hf(e)}var mf=["children"];function bf(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Af(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?bf(Object(t),!0).forEach((function(n){vf(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):bf(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function vf(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==hf(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==hf(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===hf(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function gf(e){var n=e.children,t=function(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}(e,mf);return(0,O.jsxs)("div",Af(Af({},t),{},{className:yf.spinner,children:[(0,O.jsx)("i",{className:"".concat(yf.icon," fa fa-spinner")}),n]}))}var xf=t(9669),jf=t.n(xf),Cf=t(26729),wf=t.n(Cf);function Ef(e){return Ef="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Ef(e)}function Of(){Of=function(){return e};var e={},n=Object.prototype,t=n.hasOwnProperty,r=Object.defineProperty||function(e,n,t){e[n]=t.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function l(e,n,t){return Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}),e[n]}try{l({},"")}catch(e){l=function(e,n,t){return e[n]=t}}function s(e,n,t,o){var i=n&&n.prototype instanceof p?n:p,a=Object.create(i.prototype),c=new E(o||[]);return r(a,"_invoke",{value:x(e,t,c)}),a}function u(e,n,t){try{return{type:"normal",arg:e.call(n,t)}}catch(e){return{type:"throw",arg:e}}}e.wrap=s;var f={};function p(){}function d(){}function y(){}var h={};l(h,i,(function(){return this}));var m=Object.getPrototypeOf,b=m&&m(m(O([])));b&&b!==n&&t.call(b,i)&&(h=b);var A=y.prototype=p.prototype=Object.create(h);function v(e){["next","throw","return"].forEach((function(n){l(e,n,(function(e){return this._invoke(n,e)}))}))}function g(e,n){function o(r,i,a,c){var l=u(e[r],e,i);if("throw"!==l.type){var s=l.arg,f=s.value;return f&&"object"==Ef(f)&&t.call(f,"__await")?n.resolve(f.__await).then((function(e){o("next",e,a,c)}),(function(e){o("throw",e,a,c)})):n.resolve(f).then((function(e){s.value=e,a(s)}),(function(e){return o("throw",e,a,c)}))}c(l.arg)}var i;r(this,"_invoke",{value:function(e,t){function r(){return new n((function(n,r){o(e,t,n,r)}))}return i=i?i.then(r,r):r()}})}function x(e,n,t){var r="suspendedStart";return function(o,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw i;return{value:void 0,done:!0}}for(t.method=o,t.arg=i;;){var a=t.delegate;if(a){var c=j(a,t);if(c){if(c===f)continue;return c}}if("next"===t.method)t.sent=t._sent=t.arg;else if("throw"===t.method){if("suspendedStart"===r)throw r="completed",t.arg;t.dispatchException(t.arg)}else"return"===t.method&&t.abrupt("return",t.arg);r="executing";var l=u(e,n,t);if("normal"===l.type){if(r=t.done?"completed":"suspendedYield",l.arg===f)continue;return{value:l.arg,done:t.done}}"throw"===l.type&&(r="completed",t.method="throw",t.arg=l.arg)}}}function j(e,n){var t=n.method,r=e.iterator[t];if(void 0===r)return n.delegate=null,"throw"===t&&e.iterator.return&&(n.method="return",n.arg=void 0,j(e,n),"throw"===n.method)||"return"!==t&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+t+"' method")),f;var o=u(r,e.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,f;var i=o.arg;return i?i.done?(n[e.resultName]=i.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=void 0),n.delegate=null,f):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,f)}function C(e){var n={tryLoc:e[0]};1 in e&&(n.catchLoc=e[1]),2 in e&&(n.finallyLoc=e[2],n.afterLoc=e[3]),this.tryEntries.push(n)}function w(e){var n=e.completion||{};n.type="normal",delete n.arg,e.completion=n}function E(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(C,this),this.reset(!0)}function O(e){if(e){var n=e[i];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,o=function n(){for(;++r<e.length;)if(t.call(e,r))return n.value=e[r],n.done=!1,n;return n.value=void 0,n.done=!0,n};return o.next=o}}return{next:k}}function k(){return{value:void 0,done:!0}}return d.prototype=y,r(A,"constructor",{value:y,configurable:!0}),r(y,"constructor",{value:d,configurable:!0}),d.displayName=l(y,c,"GeneratorFunction"),e.isGeneratorFunction=function(e){var n="function"==typeof e&&e.constructor;return!!n&&(n===d||"GeneratorFunction"===(n.displayName||n.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,y):(e.__proto__=y,l(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},e.awrap=function(e){return{__await:e}},v(g.prototype),l(g.prototype,a,(function(){return this})),e.AsyncIterator=g,e.async=function(n,t,r,o,i){void 0===i&&(i=Promise);var a=new g(s(n,t,r,o),i);return e.isGeneratorFunction(t)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},v(A),l(A,c,"Generator"),l(A,i,(function(){return this})),l(A,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var n=Object(e),t=[];for(var r in n)t.push(r);return t.reverse(),function e(){for(;t.length;){var r=t.pop();if(r in n)return e.value=r,e.done=!1,e}return e.done=!0,e}},e.values=O,E.prototype={constructor:E,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(w),!e)for(var n in this)"t"===n.charAt(0)&&t.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function r(t,r){return a.type="throw",a.arg=e,n.next=t,r&&(n.method="next",n.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var c=t.call(i,"catchLoc"),l=t.call(i,"finallyLoc");if(c&&l){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(e,n){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&t.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=n&&n<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=n,i?(this.method="next",this.next=i.finallyLoc,f):this.complete(a)},complete:function(e,n){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&n&&(this.next=n),f},finish:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.finallyLoc===e)return this.complete(t.completion,t.afterLoc),w(t),f}},catch:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.tryLoc===e){var r=t.completion;if("throw"===r.type){var o=r.arg;w(t)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,t){return this.delegate={iterator:O(e),resultName:n,nextLoc:t},"next"===this.method&&(this.arg=void 0),f}},e}function kf(e,n,t,r,o,i,a){try{var c=e[i](a),l=c.value}catch(e){return void t(e)}c.done?n(l):Promise.resolve(l).then(r,o)}function Sf(e){return function(){var n=this,t=arguments;return new Promise((function(r,o){var i=e.apply(n,t);function a(e){kf(i,r,o,a,c,"next",e)}function c(e){kf(i,r,o,a,c,"throw",e)}a(void 0)}))}}function Bf(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,Df(r.key),r)}}function Pf(e,n){return Pf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,n){return e.__proto__=n,e},Pf(e,n)}function If(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Tf(e){return Tf=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},Tf(e)}function Lf(e,n,t){return(n=Df(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Df(e){var n=function(e,n){if("object"!==Ef(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Ef(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Ef(n)?n:String(n)}var Rf="".concat(ee.replace("http","ws"),"/github/events"),Nf=function(e){!function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),n&&Pf(e,n)}(p,e);var n,t,r,o,i,a,c,l,s,u,f=(s=p,u=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,n=Tf(s);if(u){var t=Tf(this).constructor;e=Reflect.construct(n,arguments,t)}else e=n.apply(this,arguments);return function(e,n){if(n&&("object"===Ef(n)||"function"==typeof n))return n;if(void 0!==n)throw new TypeError("Derived constructors may only return object or undefined");return If(e)}(this,e)});function p(){var e;!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,p);for(var n=arguments.length,t=new Array(n),r=0;r<n;r++)t[r]=arguments[r];return Lf(If(e=f.call.apply(f,[this].concat(t))),"token",null),Lf(If(e),"initializing",!1),Lf(If(e),"installations",null),Lf(If(e),"repositories",null),Lf(If(e),"repoInstallationMap",null),Lf(If(e),"features",null),Lf(If(e),"socket",null),e}return n=p,t=[{key:"_request",value:(l=Sf(Of().mark((function e(n){var t;return Of().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return"string"==typeof n&&(n={url:n}),n.url.startsWith("/")&&(n.url="".concat(ee).concat(n.url)),n.headers=Object.assign({},n.headers),this.token&&!n.headers.Authorization&&(n.headers.Authorization="Bearer ".concat(this.token)),e.prev=4,e.next=7,jf()(n);case 7:return e.abrupt("return",e.sent);case 10:throw e.prev=10,e.t0=e.catch(4),401===(null===(t=e.t0.response)||void 0===t?void 0:t.status)&&(console.error("Authentication failed."),this.emit("authentication-failed",e.t0.response)),e.t0;case 14:case"end":return e.stop()}}),e,this,[[4,10]])}))),function(e){return l.apply(this,arguments)})},{key:"init",value:function(){var e=this;return this.initializing||(this.initializing=Sf(Of().mark((function n(){var t,r,o,i,a,c;return Of().wrap((function(n){for(;;)switch(n.prev=n.next){case 0:if(e.initEvents(),t="".concat(ee,"/github/installation"),(r=new URLSearchParams(window.location.search)).get("setup_action")&&r.get("installation_id")&&e.beginLoginFlow(),!r.get("blocked")){n.next=7;break}return setTimeout((function(){return e.emit("blocked")})),n.abrupt("return");case 7:if(o=r.get("token"),!window.localStorage.auth_token&&o&&(window.history.replaceState({},null,window.location.pathname),window.localStorage.auth_token=o),!window.localStorage.auth_token){n.next=22;break}return e.token=window.localStorage.auth_token,n.next=13,e._request(t);case 13:i=n.sent,a=i.data,c=a.installations.filter((function(e){return e.suspended_at})),a.installations.length===c.length&&(console.warn("No GitHub app installation found for authenticated user."),e.emit("app-not-installed")),e.username=a.username,e.installations=a.installations,e.repositories=a.repositories,e.repoInstallationMap=a.repoInstallationMap,e.emit("authenticated");case 22:case"end":return n.stop()}}),n)})))()),this.initializing}},{key:"initEvents",value:function(){var e=this,n=[],t=function(t){e.socket.readyState!==window.WebSocket.OPEN?(n.push(t),console.log("buffering websocket message",{readyState:e.socket.readyState},t)):e.socket.send(t)};this.socket=new window.WebSocket(Rf),this.socket.onopen=function(){console.log(new Date,"connected to console"),function(){for(var t;t=n.shift();)console.log("sending buffered websocket message",t),e.socket.send(t)}(),setInterval((function(){t(JSON.stringify({message:"ping"}))}),2e4)},this.socket.onclose=function(){return console.log(new Date,"disconnected from server")},this.socket.onerror=function(e){return console.error(new Date,e)},this.socket.onmessage=function(n){var t=JSON.parse(n.data);"workflow_run"===t.event&&e.emit("build-update",t.workflow_run)},this.on("authenticated",(function(){var n;null!==(n=e.installations)&&void 0!==n&&n.length&&(e.fetchAvailableFeatures(),t(JSON.stringify({message:"authorize",data:e.token})))}))}},{key:"beginLoginFlow",value:function(){window.localStorage.removeItem("auth_token"),window.location.href="".concat(ee,"/github/authorize")}},{key:"beginInstallAppFlow",value:function(){window.location.href="https://github.com/apps/".concat("keymap-editor","/installations/new")}},{key:"manageInstallationRepos",value:function(e){var n=this.installations.find((function(n){return n.id===e}));window.location.href=n.html_url}},{key:"isGitHubAuthorized",value:function(){return!!this.token}},{key:"isAppSuspendedForRepoSelection",value:function(){var e,n,t;return(null===(e=this.installations)||void 0===e?void 0:e.length)>0&&(null===(n=this.installations)||void 0===n?void 0:n.every((function(e){return e.suspended_at})))&&(null===(t=this.installations)||void 0===t?void 0:t.some((function(e){return"all"===e.repository_selection})))}},{key:"isAppInstalled",value:function(){var e,n;return(null===(e=this.installations)||void 0===e?void 0:e.length)&&(null===(n=this.repositories)||void 0===n?void 0:n.length)}},{key:"fetchRepoBranches",value:(c=Sf(Of().mark((function e(n){var t,r,o,i;return Of().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=encodeURIComponent(this.repoInstallationMap[n.full_name]),r=encodeURIComponent(n.full_name),e.next=4,this._request("/github/installation/".concat(t,"/").concat(r,"/branches"));case 4:return o=e.sent,i=o.data,e.abrupt("return",i);case 7:case"end":return e.stop()}}),e,this)}))),function(e){return c.apply(this,arguments)})},{key:"fetchBranchKeyboards",value:(a=Sf(Of().mark((function e(n,t){var r,o,i,a;return Of().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=encodeURIComponent(this.repoInstallationMap[n.full_name]),o=encodeURIComponent(n.full_name),e.next=4,this._request("/github/installation/".concat(r,"/").concat(o,"/keyboards/").concat(t));case 4:return i=e.sent,a=i.data,e.abrupt("return",a);case 7:case"end":return e.stop()}}),e,this)}))),function(e,n){return a.apply(this,arguments)})},{key:"fetchLayoutAndKeymap",value:(i=Sf(Of().mark((function e(n,t){var r,o,i,a,c,l,s,u,f,p,d,y,h,m,b,A=arguments;return Of().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=(A.length>2&&void 0!==A[2]?A[2]:{}).keyboard,o=encodeURIComponent(this.repoInstallationMap[n]),i=encodeURIComponent(n),a=new URL("".concat(ee,"/github/keyboard-files/").concat(o,"/").concat(i)),c=new URLSearchParams,t&&c.set("branch",t),r&&c.set("keyboard",r),a.search=c.toString(),e.prev=8,e.next=11,this._request(a.toString());case 11:return l=e.sent,s=l.data,u=s.info.layouts,f=s.keymap,p=Object.keys(s.info.layouts)[0],d=f.chosen["zmk,matrix_transform"]?f.chosen["zmk,matrix_transform"].replace(/^&/,""):null,y=u[d]||u[p],h=y.layout,e.abrupt("return",{layoutMetadata:y,layout:h,keymap:f,keyboards:s.keyboards,default:s.defaultKeymap,sensors:s.sensors});case 21:throw e.prev=21,e.t0=e.catch(8),400===(null===(m=e.t0.response)||void 0===m?void 0:m.status)?(console.error("Failed to load keymap and layout from github",e.t0.response.data),this.emit("repo-validation-error",e.t0.response.data)):500===(null===(b=e.t0.response)||void 0===b?void 0:b.status)&&"LayoutGenerationError"===e.t0.response.data.name&&this.emit("layout-generation-failed",e.t0.response.data),e.t0;case 25:case"end":return e.stop()}}),e,this,[[8,21]])}))),function(e,n){return i.apply(this,arguments)})},{key:"fetchAvailableFeatures",value:(o=Sf(Of().mark((function e(){var n,t;return Of().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(this.isGitHubAuthorized()){e.next=2;break}return e.abrupt("return",{betaFeatures:[]});case 2:return this.features||(this.features=this._request("".concat(ee,"/github/features"))),e.next=5,this.features;case 5:return n=e.sent,t=n.data,e.abrupt("return",t);case 8:case"end":return e.stop()}}),e,this)}))),function(){return o.apply(this,arguments)})},{key:"fetchBuildStatus",value:(r=Sf(Of().mark((function e(n,t){var r,o,i,a,c;return Of().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=encodeURIComponent(this.repoInstallationMap[n]),o=encodeURIComponent(n),i=new URL("".concat(ee,"/github/latest-run/").concat(r,"/").concat(o,"/").concat(encodeURIComponent(t))),e.next=5,this._request(i.toString());case 5:return a=e.sent,c=a.data,e.abrupt("return",c);case 8:case"end":return e.stop()}}),e,this)}))),function(e,n){return r.apply(this,arguments)})},{key:"commitChanges",value:function(e,n,t,r){var o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{},i=o.message,a=void 0===i?null:i,c=o.experimentalSettings,l=void 0===c?{}:c,s=o.keyboard,u=encodeURIComponent(this.repoInstallationMap[e]),f=encodeURIComponent(e),p=new URL("".concat(ee,"/github/keyboard-files/").concat(u,"/").concat(f,"/").concat(encodeURIComponent(n))),d=l.enableBehaviorEditing,y=void 0!==d&&d,h=new URLSearchParams({enableBehaviorEditing:y});return s&&h.set("keyboard",s),p.search=h.toString(),this._request({url:p.toString(),method:"POST",headers:{"Content-Type":"application/json"},data:{keyboard:s,layout:t,keymap:r,message:a,enableBehaviorEditing:y}})}}],t&&Bf(n.prototype,t),Object.defineProperty(n,"prototype",{writable:!1}),p}(wf()),_f=new Nf,Mf=t(30381),Yf=t.n(Mf),qf=t(80047),Zf={};Zf.styleTagTransform=b(),Zf.setAttributes=d(),Zf.insert=f().bind(null,"head"),Zf.domAPI=s(),Zf.insertStyleElement=h(),c()(qf.Z,Zf);var Kf=qf.Z&&qf.Z.locals?qf.Z.locals:void 0;function Uf(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var Gf=["success"],zf=["action_required","cancelled","failure","skipped","stale","timed_out"];function Wf(e){var n,t,o=e.timestamp,i=(n=(0,r.useState)(Yf()(o).fromNow()),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||function(e,n){if(e){if("string"==typeof e)return Uf(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Uf(e,n):void 0}}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=i[0],c=i[1];return(0,r.useEffect)((function(){c(Yf()(o).fromNow());var e=setInterval((function(){c(Yf()(o).fromNow())}),6e4);return function(){return clearInterval(e)}}),[o,c]),(0,O.jsx)("span",{title:o.toISOString(),children:a})}function Ff(e){var n=e.latestRun,t=Gf.includes(n.conclusion)?(0,O.jsx)(L,{name:"check"}):zf.includes(n.conclusion)?(0,O.jsx)(L,{name:"xmark"}):(0,O.jsx)(gf,{});return(0,O.jsxs)(ec,{href:n.html_url,className:Kf.buildDetails,external:!0,showExternal:!1,children:[(0,O.jsxs)("span",{className:Kf.buildSummary,children:["Firmware build (",(0,O.jsx)("code",{children:n.head_sha.slice(0,5)}),") ",t,(0,O.jsx)("br",{}),(0,O.jsx)(Wf,{timestamp:new Date(n.updated_at)})]}),(0,O.jsx)(L,{name:"file-arrow-down",className:[Kf.buildStatus,Kf.buildSuccess].join(" ")})]})}Ff.propTypes={latestRun:E().shape({id:E().number.isRequired,name:E().string.isRequired,head_sha:E().string.isRequired,status:E().oneOf(["completed","action_required","cancelled","failure","neutral","skipped","stale","success","timed_out","in_progress","queued","requested","waiting"]).isRequired,conclusion:E().oneOf([null,"action_required","cancelled","failure","neutral","success","skipped","stale","timed_out"]),created_at:E().string.isRequired,updated_at:E().string.isRequired})};var Xf=Ff;function Vf(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function Qf(e){var n,t,o=e.onConfirm,i=e.onCancel,a=(n=(0,r.useState)(""),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||function(e,n){if(e){if("string"==typeof e)return Vf(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Vf(e,n):void 0}}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),c=a[0],l=a[1];return(0,O.jsx)(fn,{children:(0,O.jsxs)(tn,{dismissText:null,children:[(0,O.jsx)("h2",{children:"Commit keymap changes"}),(0,O.jsx)("textarea",{style:{width:"100%"},placeholder:"Message (optional)",value:c,onChange:function(e){l(e.target.value)}}),(0,O.jsxs)("p",{style:{textAlign:"center",gap:"10px"},children:[(0,O.jsx)(Ge,{onClick:function(){return o(c)},children:"Commit"}),(0,O.jsx)(Ge,{onClick:i,secondary:!0,children:"Cancel"})]})]})})}Qf.propTypes={onConfirm:E().func.isRequired,onCancel:E().func.isRequired};var Hf=Qf;function Jf(e){return Jf="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Jf(e)}function $f(){$f=function(){return e};var e={},n=Object.prototype,t=n.hasOwnProperty,r=Object.defineProperty||function(e,n,t){e[n]=t.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function l(e,n,t){return Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}),e[n]}try{l({},"")}catch(e){l=function(e,n,t){return e[n]=t}}function s(e,n,t,o){var i=n&&n.prototype instanceof p?n:p,a=Object.create(i.prototype),c=new E(o||[]);return r(a,"_invoke",{value:x(e,t,c)}),a}function u(e,n,t){try{return{type:"normal",arg:e.call(n,t)}}catch(e){return{type:"throw",arg:e}}}e.wrap=s;var f={};function p(){}function d(){}function y(){}var h={};l(h,i,(function(){return this}));var m=Object.getPrototypeOf,b=m&&m(m(O([])));b&&b!==n&&t.call(b,i)&&(h=b);var A=y.prototype=p.prototype=Object.create(h);function v(e){["next","throw","return"].forEach((function(n){l(e,n,(function(e){return this._invoke(n,e)}))}))}function g(e,n){function o(r,i,a,c){var l=u(e[r],e,i);if("throw"!==l.type){var s=l.arg,f=s.value;return f&&"object"==Jf(f)&&t.call(f,"__await")?n.resolve(f.__await).then((function(e){o("next",e,a,c)}),(function(e){o("throw",e,a,c)})):n.resolve(f).then((function(e){s.value=e,a(s)}),(function(e){return o("throw",e,a,c)}))}c(l.arg)}var i;r(this,"_invoke",{value:function(e,t){function r(){return new n((function(n,r){o(e,t,n,r)}))}return i=i?i.then(r,r):r()}})}function x(e,n,t){var r="suspendedStart";return function(o,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw i;return{value:void 0,done:!0}}for(t.method=o,t.arg=i;;){var a=t.delegate;if(a){var c=j(a,t);if(c){if(c===f)continue;return c}}if("next"===t.method)t.sent=t._sent=t.arg;else if("throw"===t.method){if("suspendedStart"===r)throw r="completed",t.arg;t.dispatchException(t.arg)}else"return"===t.method&&t.abrupt("return",t.arg);r="executing";var l=u(e,n,t);if("normal"===l.type){if(r=t.done?"completed":"suspendedYield",l.arg===f)continue;return{value:l.arg,done:t.done}}"throw"===l.type&&(r="completed",t.method="throw",t.arg=l.arg)}}}function j(e,n){var t=n.method,r=e.iterator[t];if(void 0===r)return n.delegate=null,"throw"===t&&e.iterator.return&&(n.method="return",n.arg=void 0,j(e,n),"throw"===n.method)||"return"!==t&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+t+"' method")),f;var o=u(r,e.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,f;var i=o.arg;return i?i.done?(n[e.resultName]=i.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=void 0),n.delegate=null,f):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,f)}function C(e){var n={tryLoc:e[0]};1 in e&&(n.catchLoc=e[1]),2 in e&&(n.finallyLoc=e[2],n.afterLoc=e[3]),this.tryEntries.push(n)}function w(e){var n=e.completion||{};n.type="normal",delete n.arg,e.completion=n}function E(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(C,this),this.reset(!0)}function O(e){if(e){var n=e[i];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,o=function n(){for(;++r<e.length;)if(t.call(e,r))return n.value=e[r],n.done=!1,n;return n.value=void 0,n.done=!0,n};return o.next=o}}return{next:k}}function k(){return{value:void 0,done:!0}}return d.prototype=y,r(A,"constructor",{value:y,configurable:!0}),r(y,"constructor",{value:d,configurable:!0}),d.displayName=l(y,c,"GeneratorFunction"),e.isGeneratorFunction=function(e){var n="function"==typeof e&&e.constructor;return!!n&&(n===d||"GeneratorFunction"===(n.displayName||n.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,y):(e.__proto__=y,l(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},e.awrap=function(e){return{__await:e}},v(g.prototype),l(g.prototype,a,(function(){return this})),e.AsyncIterator=g,e.async=function(n,t,r,o,i){void 0===i&&(i=Promise);var a=new g(s(n,t,r,o),i);return e.isGeneratorFunction(t)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},v(A),l(A,c,"Generator"),l(A,i,(function(){return this})),l(A,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var n=Object(e),t=[];for(var r in n)t.push(r);return t.reverse(),function e(){for(;t.length;){var r=t.pop();if(r in n)return e.value=r,e.done=!1,e}return e.done=!0,e}},e.values=O,E.prototype={constructor:E,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(w),!e)for(var n in this)"t"===n.charAt(0)&&t.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function r(t,r){return a.type="throw",a.arg=e,n.next=t,r&&(n.method="next",n.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var c=t.call(i,"catchLoc"),l=t.call(i,"finallyLoc");if(c&&l){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(e,n){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&t.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=n&&n<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=n,i?(this.method="next",this.next=i.finallyLoc,f):this.complete(a)},complete:function(e,n){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&n&&(this.next=n),f},finish:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.finallyLoc===e)return this.complete(t.completion,t.afterLoc),w(t),f}},catch:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.tryLoc===e){var r=t.completion;if("throw"===r.type){var o=r.arg;w(t)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,t){return this.delegate={iterator:O(e),resultName:n,nextLoc:t},"next"===this.method&&(this.arg=void 0),f}},e}function ep(e,n,t,r,o,i,a){try{var c=e[i](a),l=c.value}catch(e){return void t(e)}c.done?n(l):Promise.resolve(l).then(r,o)}function np(e){return function(){var n=this,t=arguments;return new Promise((function(r,o){var i=e.apply(n,t);function a(e){ep(i,r,o,a,c,"next",e)}function c(e){ep(i,r,o,a,c,"throw",e)}a(void 0)}))}}var tp=function(e){return e};function rp(){var e=(0,i.I0)(),n=(0,i.v9)(tp),t=n.source,o=n.sourceOther,a=n.keyboard,c=n._unmodifiedKeymap,l=n.saving,s=n.experimentalSettings,u=n.latestBuild,f=a&&!Object.is(a.keymap,c);function p(){return p=np($f().mark((function t(){var r,i,a;return $f().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=o.keyboard,i=n.keyboard.keymap,t.prev=2,t.next=5,me(r,i);case 5:a=t.sent,e({type:"KEYMAP_SAVE_SUCCESS",keymap:a}),t.next=12;break;case 9:t.prev=9,t.t0=t.catch(2),e({type:"KEYMAP_SAVE_FAILURE"});case 12:case"end":return t.stop()}}),t,null,[[2,9]])}))),p.apply(this,arguments)}var d=(0,r.useCallback)((function(n){var t=o.github,r=t.repository,i=t.branch;np($f().mark((function t(){var c,l,u,f;return $f().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return e({type:"COMMIT_DIALOG_CLOSE"}),e({type:"KEYMAP_SAVE_START"}),c=a.layout,l=a.keymap,t.prev=3,t.next=6,_f.commitChanges(r,i,c,l,{message:n,experimentalSettings:s,keyboard:o.github.keyboard});case 6:u=t.sent,f=u.data,e({type:"KEYMAP_SAVE_SUCCESS",keymap:f}),t.next=14;break;case 11:t.prev=11,t.t0=t.catch(3),e({type:"KEYMAP_SAVE_FAILURE"});case 14:case"end":return t.stop()}}),t,null,[[3,11]])})))()}),[o,a,e,s]);return(0,O.jsxs)("div",{id:"actions",children:["local"===t&&(0,O.jsx)("button",{disabled:!f,onClick:function(){return p.apply(this,arguments)},children:"Save Local"}),"github"===t&&(0,O.jsxs)("button",{title:"Commit keymap changes to GitHub repository",disabled:!f,onClick:function(){e({type:"COMMIT_DIALOG_OPEN"})},children:[l?"Saving":"Commit Changes",l&&(0,O.jsx)(gf,{})]}),n.commitDialogOpen&&(0,O.jsx)(Hf,{onConfirm:d,onCancel:function(){return e({type:"COMMIT_DIALOG_CLOSE"})}}),u&&(0,O.jsx)(Xf,{latestRun:u})]})}var op=t(13311),ip=t.n(op),ap=(0,O.jsx)(ec,{external:!0,href:"https://github.com/nickcoutsos/keymap-editor/issue",children:"Keymap Editor Issues"}),cp=(0,O.jsx)(ec,{external:!0,href:"https://github.com/nickcoutsos/keymap-editor/wiki/Defining-keyboard-layouts",children:"Keymap Editor Wiki: Defining keyboard layouts"}),lp=(0,O.jsx)(ec,{external:!0,href:"https://nickcoutsos.github.io/keymap-layout-tools/",children:"Keymap Layout Tools - Helper"}),sp=(0,O.jsx)(ec,{external:!0,href:"https://discord.com/users/115507966555193345",children:"Discord - nickcoutsos#4351"}),up=(0,O.jsxs)(O.Fragment,{children:[(0,O.jsx)("p",{children:"If you are looking for help in getting up and running or want a better understanding of the issue, please feel free to reach out to me:"}),(0,O.jsxs)("ul",{children:[(0,O.jsx)("li",{children:ap}),(0,O.jsx)("li",{children:sp})]})]}),fp=(0,O.jsxs)("p",{children:["For more information about how Keymap Editor layouts are defined, you can read ",cp,", and if you need an environment to quickly test changes to a layout try ",lp,"."]});function pp(e){var n=e.onDismiss;return(0,O.jsx)(fn,{children:(0,O.jsxs)(tn,{onDismiss:n,children:[(0,O.jsx)("h2",{children:"Automatic Layout Generation Failed"}),(0,O.jsx)("p",{children:"No accompanying layout was found with your keymap file and the Keymap Editor was unable to generate one automatically for you."}),(0,O.jsx)("p",{children:"Something went wrong with the attempted automatic layout generation for your keyboard and there's no automatic way to recover, but if you want to reach out for assistance maybe we can work together to resolve any technical issues or else craft a manual layout for your keyboard."}),(0,O.jsxs)("p",{children:["Share your experience at ",ap,"."]})]})})}pp.propTypes={onDismiss:E().func.isRequired};var dp=pp,yp=t(20256),hp=["children","style"],mp=["label"];function bp(e){return bp="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},bp(e)}function Ap(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}function vp(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function gp(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?vp(Object(t),!0).forEach((function(n){xp(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):vp(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function xp(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==bp(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==bp(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===bp(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function jp(e){var n=e.style,t=void 0===n?{}:n,r=e.children;return(0,O.jsx)("div",{style:gp(gp({},{height:"38px",lineHeight:"38px"}),t),children:r})}function Cp(e){var n=e.children,t=e.style,r=void 0===t?{}:t,o=Ap(e,hp);return(0,O.jsx)(jp,{style:r,children:(0,O.jsx)("button",gp(gp({style:{height:"100%"}},o),{},{children:n}))})}var wp=window.matchMedia("(prefers-color-scheme: dark)"),Ep=[0,5,10,20,30,40,50,60,70,80,90].reduce((function(e,n){return e["neutral".concat(n)]="hsl(0, 0%, ".concat(n,"%)"),e}),{});function Op(e){var n=e.label,t=Ap(e,mp),r=(0,i.v9)((function(e){return e})).theme,o="dark"===r||"system"===r&&wp.matches;return(0,O.jsxs)("div",{style:{display:"inline-block",width:"auto"},children:[(0,O.jsx)("label",{style:{display:"block",width:"100%",fontSize:"120%",color:"var(--fg)"},children:n}),(0,O.jsx)(yp.ZP,gp({styles:{container:function(e,n){return gp(gp({},e),{},{display:"inline-block"})},menu:function(e){return gp(gp({},e),{},{width:"max-content",zIndex:10})}},theme:function(e){return gp(gp({},e),{},{colors:gp(gp({},e.colors),o?Ep:{})})},isSearchable:!1},t))]})}function kp(e){return kp="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},kp(e)}function Sp(){Sp=function(){return e};var e={},n=Object.prototype,t=n.hasOwnProperty,r=Object.defineProperty||function(e,n,t){e[n]=t.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function l(e,n,t){return Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}),e[n]}try{l({},"")}catch(e){l=function(e,n,t){return e[n]=t}}function s(e,n,t,o){var i=n&&n.prototype instanceof p?n:p,a=Object.create(i.prototype),c=new E(o||[]);return r(a,"_invoke",{value:x(e,t,c)}),a}function u(e,n,t){try{return{type:"normal",arg:e.call(n,t)}}catch(e){return{type:"throw",arg:e}}}e.wrap=s;var f={};function p(){}function d(){}function y(){}var h={};l(h,i,(function(){return this}));var m=Object.getPrototypeOf,b=m&&m(m(O([])));b&&b!==n&&t.call(b,i)&&(h=b);var A=y.prototype=p.prototype=Object.create(h);function v(e){["next","throw","return"].forEach((function(n){l(e,n,(function(e){return this._invoke(n,e)}))}))}function g(e,n){function o(r,i,a,c){var l=u(e[r],e,i);if("throw"!==l.type){var s=l.arg,f=s.value;return f&&"object"==kp(f)&&t.call(f,"__await")?n.resolve(f.__await).then((function(e){o("next",e,a,c)}),(function(e){o("throw",e,a,c)})):n.resolve(f).then((function(e){s.value=e,a(s)}),(function(e){return o("throw",e,a,c)}))}c(l.arg)}var i;r(this,"_invoke",{value:function(e,t){function r(){return new n((function(n,r){o(e,t,n,r)}))}return i=i?i.then(r,r):r()}})}function x(e,n,t){var r="suspendedStart";return function(o,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw i;return{value:void 0,done:!0}}for(t.method=o,t.arg=i;;){var a=t.delegate;if(a){var c=j(a,t);if(c){if(c===f)continue;return c}}if("next"===t.method)t.sent=t._sent=t.arg;else if("throw"===t.method){if("suspendedStart"===r)throw r="completed",t.arg;t.dispatchException(t.arg)}else"return"===t.method&&t.abrupt("return",t.arg);r="executing";var l=u(e,n,t);if("normal"===l.type){if(r=t.done?"completed":"suspendedYield",l.arg===f)continue;return{value:l.arg,done:t.done}}"throw"===l.type&&(r="completed",t.method="throw",t.arg=l.arg)}}}function j(e,n){var t=n.method,r=e.iterator[t];if(void 0===r)return n.delegate=null,"throw"===t&&e.iterator.return&&(n.method="return",n.arg=void 0,j(e,n),"throw"===n.method)||"return"!==t&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+t+"' method")),f;var o=u(r,e.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,f;var i=o.arg;return i?i.done?(n[e.resultName]=i.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=void 0),n.delegate=null,f):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,f)}function C(e){var n={tryLoc:e[0]};1 in e&&(n.catchLoc=e[1]),2 in e&&(n.finallyLoc=e[2],n.afterLoc=e[3]),this.tryEntries.push(n)}function w(e){var n=e.completion||{};n.type="normal",delete n.arg,e.completion=n}function E(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(C,this),this.reset(!0)}function O(e){if(e){var n=e[i];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,o=function n(){for(;++r<e.length;)if(t.call(e,r))return n.value=e[r],n.done=!1,n;return n.value=void 0,n.done=!0,n};return o.next=o}}return{next:k}}function k(){return{value:void 0,done:!0}}return d.prototype=y,r(A,"constructor",{value:y,configurable:!0}),r(y,"constructor",{value:d,configurable:!0}),d.displayName=l(y,c,"GeneratorFunction"),e.isGeneratorFunction=function(e){var n="function"==typeof e&&e.constructor;return!!n&&(n===d||"GeneratorFunction"===(n.displayName||n.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,y):(e.__proto__=y,l(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},e.awrap=function(e){return{__await:e}},v(g.prototype),l(g.prototype,a,(function(){return this})),e.AsyncIterator=g,e.async=function(n,t,r,o,i){void 0===i&&(i=Promise);var a=new g(s(n,t,r,o),i);return e.isGeneratorFunction(t)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},v(A),l(A,c,"Generator"),l(A,i,(function(){return this})),l(A,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var n=Object(e),t=[];for(var r in n)t.push(r);return t.reverse(),function e(){for(;t.length;){var r=t.pop();if(r in n)return e.value=r,e.done=!1,e}return e.done=!0,e}},e.values=O,E.prototype={constructor:E,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(w),!e)for(var n in this)"t"===n.charAt(0)&&t.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function r(t,r){return a.type="throw",a.arg=e,n.next=t,r&&(n.method="next",n.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var c=t.call(i,"catchLoc"),l=t.call(i,"finallyLoc");if(c&&l){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(e,n){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&t.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=n&&n<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=n,i?(this.method="next",this.next=i.finallyLoc,f):this.complete(a)},complete:function(e,n){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&n&&(this.next=n),f},finish:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.finallyLoc===e)return this.complete(t.completion,t.afterLoc),w(t),f}},catch:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.tryLoc===e){var r=t.completion;if("throw"===r.type){var o=r.arg;w(t)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,t){return this.delegate={iterator:O(e),resultName:n,nextLoc:t},"next"===this.method&&(this.arg=void 0),f}},e}function Bp(e,n,t,r,o,i,a){try{var c=e[i](a),l=c.value}catch(e){return void t(e)}c.done?n(l):Promise.resolve(l).then(r,o)}function Pp(e){return function(){var n=this,t=arguments;return new Promise((function(r,o){var i=e.apply(n,t);function a(e){Bp(i,r,o,a,c,"next",e)}function c(e){Bp(i,r,o,a,c,"throw",e)}a(void 0)}))}}function Ip(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(e,n)||function(e,n){if(e){if("string"==typeof e)return Tp(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Tp(e,n):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Tp(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var Lp=function(e){var n=e.onSelect,t=e.onError,o=Ip((0,r.useState)([]),2),i=o[0],a=o[1],c=Ip((0,r.useState)(null),2),l=c[0],s=c[1],u=(0,r.useMemo)((function(){return i.map((function(e){return{id:e,name:e}}))}),[i]);(0,r.useEffect)((function(){Pp(Sp().mark((function e(){var n,t,r;return Sp().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,pe();case 2:n=e.sent,t=JSON.parse(localStorage.getItem("localSourceSelectedKeyboard")||"null"),r=n.includes(t)?t:n[0],a(n),s(r);case 7:case"end":return e.stop()}}),e)})))()}),[a,s]),(0,r.useEffect)((function(){Pp(Sp().mark((function e(){var r,o,i,a,c,s,u,f;return Sp().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!l){e.next=25;break}return e.prev=1,e.next=4,ye(l);case 4:r=e.sent,o=r.info,i=r.keymap,a=r.sensors,c=o.layouts,s=i.chosen["zmk,matrix_transform"]?i.chosen["zmk,matrix_transform"].replace(/^&/,""):null,u=Object.keys(c)[0],f=c[s]||c[u],n({source:"local",keyboard:l,layoutMetadata:f,layout:f.layout,keymap:i,sensors:a}),e.next=25;break;case 15:if(e.prev=15,e.t0=e.catch(1),!e.t0.response){e.next=24;break}return e.next=20,e.t0.response.json();case 20:if("LayoutGenerationError"!==e.sent.name){e.next=24;break}return t({dialog:dp}),e.abrupt("return");case 24:throw e.t0;case 25:case"end":return e.stop()}}),e,null,[[1,15]])})))()}),[n,t,l]);var f=(0,r.useCallback)((function(e){var n=e.id;localStorage.setItem("localSourceSelectedKeyboard",JSON.stringify(n)),s(n)}),[s]),p=(0,q.find)(u,{id:l});return(0,O.jsx)(Op,{label:"Keyboard",value:p,options:u,onChange:f,getOptionValue:function(e){return e.id},getOptionLabel:function(e){return e.name}})};function Dp(e){return Dp="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Dp(e)}function Rp(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Np(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Rp(Object(t),!0).forEach((function(n){_p(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Rp(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function _p(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Dp(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Dp(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Dp(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Mp(e){var n=(0,O.jsx)(ec,{href:"https://github.com/nickcoutsos/zmk-config-corne-demo",external:!0,children:"GitHub Repo"});return(0,O.jsx)(fn,{children:(0,O.jsxs)(tn,Np(Np({},e),{},{children:[(0,O.jsx)("h2",{children:"Keymap Editor Demo"}),(0,O.jsx)("p",{children:"Welcome! This demo keyboard is provided to let you experiment with the keymap editor before setting up your own repository."}),(0,O.jsx)("h3",{children:"Features"}),(0,O.jsxs)("ul",{children:[(0,O.jsxs)("li",{children:[(0,O.jsx)("strong",{children:"WYSIWYG Editing"}),". Just click on key and behaviour bindings to make changes, add or remove layers in the sidebar."]}),(0,O.jsxs)("li",{children:[(0,O.jsx)("strong",{children:"Keymap generation"}),". The editor can export keymap to ZMK's syntax (when running locally or integrated with GitHub), and will even attempt to format the ",(0,O.jsx)("code",{children:".keymap"})," file for better readability."]}),(0,O.jsxs)("li",{children:[(0,O.jsx)("strong",{children:"Devicetree parsing"}),". ",(0,O.jsx)("em",{children:"(Experimental!)"})," Read and write to your existing ZMK ",(0,O.jsx)("code",{children:".keymap"})," file so that you can still use ZMK features that the app doesn't support yet."]})]}),(0,O.jsx)("h3",{children:"What's next?"}),(0,O.jsxs)("p",{children:["If you like the editor, try integrating with your own GitHub hosted keyboard config. ",(0,O.jsx)(ec,{href:"https://github.com/nickcoutsos/zmk-config-corne-demo/generate",external:!0,children:"Use it as a template"})," for your own, or just read through the ",n," for this keyboard to learn what to apply to your existing keyboard."]})]}))})}var Yp=t(33971),qp={};qp.styleTagTransform=b(),qp.setAttributes=d(),qp.insert=f().bind(null,"head"),qp.domAPI=s(),qp.insertStyleElement=h(),c()(Yp.Z,qp);var Zp=Yp.Z&&Yp.Z.locals?Yp.Z.locals:void 0;function Kp(e){return Kp="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Kp(e)}function Up(){Up=function(){return e};var e={},n=Object.prototype,t=n.hasOwnProperty,r=Object.defineProperty||function(e,n,t){e[n]=t.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function l(e,n,t){return Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}),e[n]}try{l({},"")}catch(e){l=function(e,n,t){return e[n]=t}}function s(e,n,t,o){var i=n&&n.prototype instanceof p?n:p,a=Object.create(i.prototype),c=new E(o||[]);return r(a,"_invoke",{value:x(e,t,c)}),a}function u(e,n,t){try{return{type:"normal",arg:e.call(n,t)}}catch(e){return{type:"throw",arg:e}}}e.wrap=s;var f={};function p(){}function d(){}function y(){}var h={};l(h,i,(function(){return this}));var m=Object.getPrototypeOf,b=m&&m(m(O([])));b&&b!==n&&t.call(b,i)&&(h=b);var A=y.prototype=p.prototype=Object.create(h);function v(e){["next","throw","return"].forEach((function(n){l(e,n,(function(e){return this._invoke(n,e)}))}))}function g(e,n){function o(r,i,a,c){var l=u(e[r],e,i);if("throw"!==l.type){var s=l.arg,f=s.value;return f&&"object"==Kp(f)&&t.call(f,"__await")?n.resolve(f.__await).then((function(e){o("next",e,a,c)}),(function(e){o("throw",e,a,c)})):n.resolve(f).then((function(e){s.value=e,a(s)}),(function(e){return o("throw",e,a,c)}))}c(l.arg)}var i;r(this,"_invoke",{value:function(e,t){function r(){return new n((function(n,r){o(e,t,n,r)}))}return i=i?i.then(r,r):r()}})}function x(e,n,t){var r="suspendedStart";return function(o,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw i;return{value:void 0,done:!0}}for(t.method=o,t.arg=i;;){var a=t.delegate;if(a){var c=j(a,t);if(c){if(c===f)continue;return c}}if("next"===t.method)t.sent=t._sent=t.arg;else if("throw"===t.method){if("suspendedStart"===r)throw r="completed",t.arg;t.dispatchException(t.arg)}else"return"===t.method&&t.abrupt("return",t.arg);r="executing";var l=u(e,n,t);if("normal"===l.type){if(r=t.done?"completed":"suspendedYield",l.arg===f)continue;return{value:l.arg,done:t.done}}"throw"===l.type&&(r="completed",t.method="throw",t.arg=l.arg)}}}function j(e,n){var t=n.method,r=e.iterator[t];if(void 0===r)return n.delegate=null,"throw"===t&&e.iterator.return&&(n.method="return",n.arg=void 0,j(e,n),"throw"===n.method)||"return"!==t&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+t+"' method")),f;var o=u(r,e.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,f;var i=o.arg;return i?i.done?(n[e.resultName]=i.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=void 0),n.delegate=null,f):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,f)}function C(e){var n={tryLoc:e[0]};1 in e&&(n.catchLoc=e[1]),2 in e&&(n.finallyLoc=e[2],n.afterLoc=e[3]),this.tryEntries.push(n)}function w(e){var n=e.completion||{};n.type="normal",delete n.arg,e.completion=n}function E(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(C,this),this.reset(!0)}function O(e){if(e){var n=e[i];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,o=function n(){for(;++r<e.length;)if(t.call(e,r))return n.value=e[r],n.done=!1,n;return n.value=void 0,n.done=!0,n};return o.next=o}}return{next:k}}function k(){return{value:void 0,done:!0}}return d.prototype=y,r(A,"constructor",{value:y,configurable:!0}),r(y,"constructor",{value:d,configurable:!0}),d.displayName=l(y,c,"GeneratorFunction"),e.isGeneratorFunction=function(e){var n="function"==typeof e&&e.constructor;return!!n&&(n===d||"GeneratorFunction"===(n.displayName||n.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,y):(e.__proto__=y,l(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},e.awrap=function(e){return{__await:e}},v(g.prototype),l(g.prototype,a,(function(){return this})),e.AsyncIterator=g,e.async=function(n,t,r,o,i){void 0===i&&(i=Promise);var a=new g(s(n,t,r,o),i);return e.isGeneratorFunction(t)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},v(A),l(A,c,"Generator"),l(A,i,(function(){return this})),l(A,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var n=Object(e),t=[];for(var r in n)t.push(r);return t.reverse(),function e(){for(;t.length;){var r=t.pop();if(r in n)return e.value=r,e.done=!1,e}return e.done=!0,e}},e.values=O,E.prototype={constructor:E,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(w),!e)for(var n in this)"t"===n.charAt(0)&&t.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function r(t,r){return a.type="throw",a.arg=e,n.next=t,r&&(n.method="next",n.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var c=t.call(i,"catchLoc"),l=t.call(i,"finallyLoc");if(c&&l){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(e,n){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&t.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=n&&n<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=n,i?(this.method="next",this.next=i.finallyLoc,f):this.complete(a)},complete:function(e,n){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&n&&(this.next=n),f},finish:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.finallyLoc===e)return this.complete(t.completion,t.afterLoc),w(t),f}},catch:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.tryLoc===e){var r=t.completion;if("throw"===r.type){var o=r.arg;w(t)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,t){return this.delegate={iterator:O(e),resultName:n,nextLoc:t},"next"===this.method&&(this.arg=void 0),f}},e}function Gp(e,n,t,r,o,i,a){try{var c=e[i](a),l=c.value}catch(e){return void t(e)}c.done?n(l):Promise.resolve(l).then(r,o)}function zp(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var Wp=function(e){var n,o,i=e.onSelect,a=(n=(0,r.useState)(!1),o=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,o)||function(e,n){if(e){if("string"==typeof e)return zp(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?zp(e,n):void 0}}(n,o)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),c=a[0],l=a[1];return(0,r.useEffect)((function(){var e;(e=Up().mark((function e(){var n,r,o;return Up().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,t.e(873).then(t.t.bind(t,18873,19));case 2:n=e.sent,r=n.layout,o=n.keymap,i({source:"demo",layout:r,keymap:o});case 6:case"end":return e.stop()}}),e)})),function(){var n=this,t=arguments;return new Promise((function(r,o){var i=e.apply(n,t);function a(e){Gp(i,r,o,a,c,"next",e)}function c(e){Gp(i,r,o,a,c,"throw",e)}a(void 0)}))})()}),[i]),(0,O.jsxs)(O.Fragment,{children:[(0,O.jsxs)(Cp,{style:{background:"none",border:"none"},onClick:function(){return l(!0)},children:[(0,O.jsx)(L,{name:"info",className:Zp.help})," What is this?"]}),c&&(0,O.jsx)(Mp,{onDismiss:function(){return l(!1)}})]})},Fp=t(66379),Xp=t.n(Fp),Vp={maxHeight:"300px",overflow:"auto",padding:"10px",fontFamily:"monospace",fontSize:"80%",backgroundColor:"rgb(239, 239, 239, 0.5)"},Qp={margin:"10px"};function Hp(e){var n=e.onDismiss,t=e.title,r=e.errors,o=function(e){return"InfoValidationError"===e?"config/info.json":"KeymapValidationError"===e?"config/keymap.json":void 0}(t);return(0,O.jsx)(fn,{children:(0,O.jsxs)(tn,{onDismiss:n,children:[(0,O.jsx)("h2",{children:t}),o&&(0,O.jsxs)("p",{children:["Errors in the file ",(0,O.jsx)("code",{children:o}),"."]}),(0,O.jsx)("ul",{style:Vp,children:r.map((function(e,n){return(0,O.jsx)("li",{style:Qp,children:e},n)}))})]})})}var Jp="selectedGithubRepository",$p="selectedGithubBranch",ed="selectedGithubKeyboard";function nd(e,n){try{return JSON.parse(localStorage.getItem("".concat(ed,":").concat(e,":").concat(n)))}catch(e){return null}}function td(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var rd={blocked:!1,initialized:!1,selectedRepoId:null,selectedBranchName:null,selectedKeyboard:null,branches:[],keyboards:[],loading:!1,warningFlags:[]},od=(0,hi.oM)({name:"github-picker",initialState:rd,reducers:{clearSelection:function(e){e.warningFlags=[],e.loading=!1},integrationInitialized:function(e){var n,t=function(){try{return JSON.parse(localStorage.getItem(Jp))}catch(e){return null}}(),r=_f.repositories||[];ip()(r,{id:t})?n=t:r.length>0&&(n=r[0].id),e.initialized=!0,e.selectedRepoId=n},loadingBranchesList:function(e){e.loading=!0},loadedBranchesList:function(e,n){var t=e.selectedRepoId,r=n.payload.branches,o=ip()(_f.repositories,{id:t});e.branches=r,e.keyboard=null,e.keyboards=[],e.loading=!1;for(var i=Q()(r,"name"),a=o.default_branch,c=function(e){try{return JSON.parse(localStorage.getItem("".concat($p,":").concat(e)))}catch(e){return null}}(t),l=0,s=[1===r.length?r[0].name:null,c,a];l<s.length;l++){var u=s[l];if(i.includes(u)){e.selectedBranchName=u,e.selectedKeyboard=nd(t,u);break}}},loadingKeyboardsList:function(e){e.loading=!0},loadedKeyboardsList:function(e,n){var t=e.selectedRepoId,r=e.selectedBranchName,o=n.payload,i=o.keyboards,a=o.default;e.keyboards=i,e.loading=!1;for(var c=nd(t,r),l=0,s=[1===i.length?i[0]:null,c,a];l<s.length;l++){var u=s[l];if(i.includes(u)){e.selectedKeyboard=u;break}}},selectedRepository:function(e,n){var t;e.selectedRepoId=n.payload.repository.id,e.selectedBranchName=null,e.selectedKeyboard=null,t=e.selectedRepoId,localStorage.setItem(Jp,JSON.stringify(t))},selectedBranch:function(e,n){var t,r;e.selectedBranchName=n.payload.name,e.selectedKeyboard=nd(e.selectedRepoId,e.selectedBranchName),t=e.selectedRepoId,r=e.selectedBranchName,localStorage.setItem("".concat($p,":").concat(t),JSON.stringify(r))},selectedKeyboard:function(e,n){var t,r,o;e.selectedKeyboard=n.payload.name,t=e.selectedRepoId,r=e.selectedBranchName,o=e.selectedKeyboard,localStorage.setItem("".concat(ed,":").concat(t,":").concat(r),JSON.stringify(o))},keyboardLoading:function(e,n){e.loading=!0},keyboardLoadedSuccess:function(e,n){var t=n.payload.response.keymap;e.warningFlags=t.warningFlags||[],e.loading=!1}}});function id(){var e,n,t,o=(n=(0,r.useReducer)(od.reducer,rd),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||function(e,n){if(e){if("string"==typeof e)return td(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?td(e,n):void 0}}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=o[0],a=(e=o[1],(0,r.useMemo)((function(){return Object.keys(od.actions).reduce((function(n,t){return n[t]=function(){var n;return e((n=od.actions)[t].apply(n,arguments))},n}),{})}),[e]));return[i,a]}function ad(e){var n=e.onDismiss,t=e.missingPath;return(0,O.jsx)(fn,{children:(0,O.jsxs)(tn,{onDismiss:n,children:[(0,O.jsx)("h2",{children:"Missing keyboard definition?"}),(0,O.jsxs)("p",{children:["Hi there! The repository you're trying to load from doesn't have a defined ",(0,O.jsx)("code",{children:t}),". Right now this application is expecting to look at that directory to discover keyboard definitions for experimental features like automatic layout generation."]}),(0,O.jsx)("p",{children:"Is it possible that the keyboard you're trying to edit relies on data from the ZMK or other repositories? Fetching from other repositories is not currently supported."}),(0,O.jsx)("p",{children:"I'm a humble developer and have only worked with configurations for my own handwired builds, so if you feel you're receiving this message in error then please consider opening an issue on this project's GitHub repository to let me know what I can do differently."})]})})}ad.propTypes={onDismiss:E().func.isRequired,missingPath:E().string.isRequired};var cd=ad;function ld(e){var n=e.installation,t="https://github.com/settings/installations/".concat(n.id);return(0,O.jsx)(fn,{children:(0,O.jsxs)(tn,{dismissText:null,children:[(0,O.jsx)("h2",{children:"App Disabled"}),(0,O.jsxs)("p",{children:["Hello there, your installation of the keymap editor's GitHub app is currently disabled. ",(0,O.jsx)("em",{children:"This is not a ban!"})]}),(0,O.jsxs)("p",{children:["When you installed this app for your GitHub account you installed it for ",(0,O.jsx)("em",{children:"all"})," of your repositories, and we need to do a little cleanup as we roll out some new features as it's very likely you will have other repositories unrelated to ZMK keyboard configurations."]}),(0,O.jsx)("h3",{children:"How to fix this"}),(0,O.jsxs)("p",{children:["If you're still interested in using the keymap editor (and I'd love for you to be able to) please go to your ",(0,O.jsx)(ec,{href:t,children:"installation settings"})," on GitHub and select only the repositories you want to use with this tool. As soon as that's done you'll be sent back here and ready to go."]}),(0,O.jsx)("p",{children:"As always, if you're looking for clarification or further assistance please visit our GitHub repo and open an issue or start a discussion."})]})})}ld.propTypes={installation:E().shape({id:E().number.isRequired}).isRequired};var sd=ld;function ud(e){var n=e.onDismiss;return(0,O.jsx)(fn,{children:(0,O.jsxs)(tn,{onDismiss:n,children:[(0,O.jsx)("h2",{children:"Is this a zmk-config repo?"}),(0,O.jsxs)("p",{children:["Hi there! The repository you're trying to load from doesn't have a defined ",(0,O.jsx)("code",{children:"config"})," directory. Right now this application is expecting to look at that directory to discover keymaps and other metadata."]}),up]})})}ud.propTypes={onDismiss:E().func.isRequired,otherRepoOrBranchAvailable:E().bool};var fd=ud,pd=function(){return(0,O.jsx)(fn,{children:(0,O.jsxs)(tn,{dismissText:null,children:[(0,O.jsx)("h2",{children:"GitHub Account Blocked"}),(0,O.jsx)("p",{children:"Hi, your access to this application has been disabled."}),(0,O.jsxs)("p",{children:["This could be an innocent mistake. Possibly you've misunderstood the intended purpose of this app, possibly I got carried away with some housekeeping. If you want more information or feel this was done in error, please reach out to ",(0,O.jsx)("em",{children:"nickcoutsos"})," on GitHub or Discord (you can find me on the ZMK server)."]})]})})};function dd(e){var n=e.onDismiss;return(0,O.jsx)(fn,{children:(0,O.jsxs)(tn,{onDismiss:n,children:[(0,O.jsx)("h2",{children:"No Layout Available"}),(0,O.jsx)("p",{children:"Your keymap doesn't have an accompanying layout and we don't know enough about your keyboard to generate one for you automatically."}),(0,O.jsxs)("p",{children:["If you meant to include layout data, please make sure that its in the same directory as your keymap, like ",(0,O.jsx)("code",{children:"config/info.json"})," or ",(0,O.jsx)("code",{children:"config/<keyboard>.json"}),"."]}),fp,up]})})}dd.propTypes={onDismiss:E().func.isRequired};var yd=dd;function hd(){return(0,O.jsx)(fn,{centerOnly:!0,children:(0,O.jsxs)(tn,{dismissText:null,style:{width:"400px"},children:[(0,O.jsx)("h2",{children:"Authenticate with GitHub"}),(0,O.jsx)("p",{children:"Please log-in to GitHub to continue."}),(0,O.jsx)(Y,{collection:"brands",icon:"github",text:"Login with GitHub",style:{display:"block",margin:"0 auto"},onClick:function(){return _f.beginLoginFlow()}})]})})}hd.propTypes={};var md=hd;function bd(){var e=_f.username?"Welcome, ".concat(_f.username,"!"):"Welcome!";return(0,O.jsx)(fn,{centerOnly:!0,children:(0,O.jsxs)(tn,{dismissText:null,children:[(0,O.jsx)("h2",{children:e}),(0,O.jsx)("p",{children:"To begin import your own keymaps, you'll need to grant the Keymap Editor app access to the relevant GitHub repositories. Please make sure to only select repositories that are set up for ZMK keyboard configurations."}),(0,O.jsxs)("p",{children:["This app requires read and write access to the repositories you select in order to write to arbitrary ",(0,O.jsx)("code",{children:".keymap"})," files. It also receives all build action events for the repository, which generates quite a bit of traffic. Selecting ",(0,O.jsx)("code",{children:"All repositories"})," for the app installation will lead to a suspension."]}),(0,O.jsx)(Y,{collection:"brands",icon:"github",text:"Add Repository",style:{display:"block",margin:"0 auto"},onClick:function(){return _f.beginInstallAppFlow()}})]})})}bd.propTypes={};var Ad=bd;function vd(e){var n=e.onDismiss;return(0,O.jsx)(fn,{children:(0,O.jsxs)(tn,{onDismiss:n,children:[(0,O.jsx)("h2",{children:"No Keymap Available"}),(0,O.jsxs)("p",{children:["We couldn't find a ",(0,O.jsx)("code",{children:".keymap"})," file in your ",(0,O.jsx)("code",{children:"config/"})," folder."]}),(0,O.jsxs)("p",{children:["Please ensure that any keymap(s) you wish to edit are placed in that directory even if an accompanying keyboard definition exists in your under the ",(0,O.jsx)("code",{children:"config/boards/..."})," directory."]}),(0,O.jsxs)("p",{children:["If you have any questions please feel free to reach out by creating an issue at ",ap,"."]})]})})}vd.propTypes={onDismiss:E().func.isRequired};var gd=vd;function xd(e){var n=e.state,t=e.actions,r=e.choices,o=e.selections,i=r.repositories,a=r.repositoryChoices,c=r.branchChoices,l=r.keyboardChoices,s=o.selectedRepoChoice,u=o.selectedBranchChoice,f=o.selectedKeyboardChoice,p=n.branches,d=n.keyboards,y=n.loading;return(0,O.jsxs)(O.Fragment,{children:[(0,O.jsx)(Op,{label:"Repository",value:s,options:a,onChange:function(e){var n=e.id;if("installation"!==e.type){var r=ip()(i,{id:n});t.selectedRepository({repository:r})}else _f.manageInstallationRepos(n)},getValue:function(e){return e.id},getOptionValue:function(e){return e.id},getOptionLabel:function(e){return e.full||e.name},formatOptionLabel:function(e,n){var t=n.context;return(0,O.jsx)(O.Fragment,{children:"value"===t?e.name:e.full||e.name})}}),p.length>1&&(0,O.jsx)(Op,{label:"Branch",value:u,options:c,onChange:function(e){var n=e.id;return t.selectedBranch({name:n})},getOptionValue:function(e){return e.id},getOptionLabel:function(e){return e.name}}),d.length>1&&(0,O.jsx)(Op,{label:"Keyboard",value:f,options:l,getOptionValue:function(e){return e.id},getOptionLabel:function(e){return e.name},onChange:function(e){var n=e.id;return t.selectedKeyboard({name:n})}}),y&&(0,O.jsx)(jp,{children:(0,O.jsx)(gf,{})})]})}function jd(e){return jd="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},jd(e)}function Cd(){Cd=function(){return e};var e={},n=Object.prototype,t=n.hasOwnProperty,r=Object.defineProperty||function(e,n,t){e[n]=t.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function l(e,n,t){return Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}),e[n]}try{l({},"")}catch(e){l=function(e,n,t){return e[n]=t}}function s(e,n,t,o){var i=n&&n.prototype instanceof p?n:p,a=Object.create(i.prototype),c=new E(o||[]);return r(a,"_invoke",{value:x(e,t,c)}),a}function u(e,n,t){try{return{type:"normal",arg:e.call(n,t)}}catch(e){return{type:"throw",arg:e}}}e.wrap=s;var f={};function p(){}function d(){}function y(){}var h={};l(h,i,(function(){return this}));var m=Object.getPrototypeOf,b=m&&m(m(O([])));b&&b!==n&&t.call(b,i)&&(h=b);var A=y.prototype=p.prototype=Object.create(h);function v(e){["next","throw","return"].forEach((function(n){l(e,n,(function(e){return this._invoke(n,e)}))}))}function g(e,n){function o(r,i,a,c){var l=u(e[r],e,i);if("throw"!==l.type){var s=l.arg,f=s.value;return f&&"object"==jd(f)&&t.call(f,"__await")?n.resolve(f.__await).then((function(e){o("next",e,a,c)}),(function(e){o("throw",e,a,c)})):n.resolve(f).then((function(e){s.value=e,a(s)}),(function(e){return o("throw",e,a,c)}))}c(l.arg)}var i;r(this,"_invoke",{value:function(e,t){function r(){return new n((function(n,r){o(e,t,n,r)}))}return i=i?i.then(r,r):r()}})}function x(e,n,t){var r="suspendedStart";return function(o,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw i;return{value:void 0,done:!0}}for(t.method=o,t.arg=i;;){var a=t.delegate;if(a){var c=j(a,t);if(c){if(c===f)continue;return c}}if("next"===t.method)t.sent=t._sent=t.arg;else if("throw"===t.method){if("suspendedStart"===r)throw r="completed",t.arg;t.dispatchException(t.arg)}else"return"===t.method&&t.abrupt("return",t.arg);r="executing";var l=u(e,n,t);if("normal"===l.type){if(r=t.done?"completed":"suspendedYield",l.arg===f)continue;return{value:l.arg,done:t.done}}"throw"===l.type&&(r="completed",t.method="throw",t.arg=l.arg)}}}function j(e,n){var t=n.method,r=e.iterator[t];if(void 0===r)return n.delegate=null,"throw"===t&&e.iterator.return&&(n.method="return",n.arg=void 0,j(e,n),"throw"===n.method)||"return"!==t&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+t+"' method")),f;var o=u(r,e.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,f;var i=o.arg;return i?i.done?(n[e.resultName]=i.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=void 0),n.delegate=null,f):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,f)}function C(e){var n={tryLoc:e[0]};1 in e&&(n.catchLoc=e[1]),2 in e&&(n.finallyLoc=e[2],n.afterLoc=e[3]),this.tryEntries.push(n)}function w(e){var n=e.completion||{};n.type="normal",delete n.arg,e.completion=n}function E(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(C,this),this.reset(!0)}function O(e){if(e){var n=e[i];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,o=function n(){for(;++r<e.length;)if(t.call(e,r))return n.value=e[r],n.done=!1,n;return n.value=void 0,n.done=!0,n};return o.next=o}}return{next:k}}function k(){return{value:void 0,done:!0}}return d.prototype=y,r(A,"constructor",{value:y,configurable:!0}),r(y,"constructor",{value:d,configurable:!0}),d.displayName=l(y,c,"GeneratorFunction"),e.isGeneratorFunction=function(e){var n="function"==typeof e&&e.constructor;return!!n&&(n===d||"GeneratorFunction"===(n.displayName||n.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,y):(e.__proto__=y,l(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},e.awrap=function(e){return{__await:e}},v(g.prototype),l(g.prototype,a,(function(){return this})),e.AsyncIterator=g,e.async=function(n,t,r,o,i){void 0===i&&(i=Promise);var a=new g(s(n,t,r,o),i);return e.isGeneratorFunction(t)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},v(A),l(A,c,"Generator"),l(A,i,(function(){return this})),l(A,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var n=Object(e),t=[];for(var r in n)t.push(r);return t.reverse(),function e(){for(;t.length;){var r=t.pop();if(r in n)return e.value=r,e.done=!1,e}return e.done=!0,e}},e.values=O,E.prototype={constructor:E,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(w),!e)for(var n in this)"t"===n.charAt(0)&&t.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function r(t,r){return a.type="throw",a.arg=e,n.next=t,r&&(n.method="next",n.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var c=t.call(i,"catchLoc"),l=t.call(i,"finallyLoc");if(c&&l){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(e,n){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&t.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=n&&n<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=n,i?(this.method="next",this.next=i.finallyLoc,f):this.complete(a)},complete:function(e,n){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&n&&(this.next=n),f},finish:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.finallyLoc===e)return this.complete(t.completion,t.afterLoc),w(t),f}},catch:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.tryLoc===e){var r=t.completion;if("throw"===r.type){var o=r.arg;w(t)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,t){return this.delegate={iterator:O(e),resultName:n,nextLoc:t},"next"===this.method&&(this.arg=void 0),f}},e}function wd(e,n,t,r,o,i,a){try{var c=e[i](a),l=c.value}catch(e){return void t(e)}c.done?n(l):Promise.resolve(l).then(r,o)}function Ed(e){return function(){var n=this,t=arguments;return new Promise((function(r,o){var i=e.apply(n,t);function a(e){wd(i,r,o,a,c,"next",e)}function c(e){wd(i,r,o,a,c,"throw",e)}a(void 0)}))}}function Od(e){return function(e){if(Array.isArray(e))return kd(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,n){if(e){if("string"==typeof e)return kd(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?kd(e,n):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function kd(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function Sd(e){return Sd="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Sd(e)}function Bd(){Bd=function(){return e};var e={},n=Object.prototype,t=n.hasOwnProperty,r=Object.defineProperty||function(e,n,t){e[n]=t.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function l(e,n,t){return Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}),e[n]}try{l({},"")}catch(e){l=function(e,n,t){return e[n]=t}}function s(e,n,t,o){var i=n&&n.prototype instanceof p?n:p,a=Object.create(i.prototype),c=new E(o||[]);return r(a,"_invoke",{value:x(e,t,c)}),a}function u(e,n,t){try{return{type:"normal",arg:e.call(n,t)}}catch(e){return{type:"throw",arg:e}}}e.wrap=s;var f={};function p(){}function d(){}function y(){}var h={};l(h,i,(function(){return this}));var m=Object.getPrototypeOf,b=m&&m(m(O([])));b&&b!==n&&t.call(b,i)&&(h=b);var A=y.prototype=p.prototype=Object.create(h);function v(e){["next","throw","return"].forEach((function(n){l(e,n,(function(e){return this._invoke(n,e)}))}))}function g(e,n){function o(r,i,a,c){var l=u(e[r],e,i);if("throw"!==l.type){var s=l.arg,f=s.value;return f&&"object"==Sd(f)&&t.call(f,"__await")?n.resolve(f.__await).then((function(e){o("next",e,a,c)}),(function(e){o("throw",e,a,c)})):n.resolve(f).then((function(e){s.value=e,a(s)}),(function(e){return o("throw",e,a,c)}))}c(l.arg)}var i;r(this,"_invoke",{value:function(e,t){function r(){return new n((function(n,r){o(e,t,n,r)}))}return i=i?i.then(r,r):r()}})}function x(e,n,t){var r="suspendedStart";return function(o,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw i;return{value:void 0,done:!0}}for(t.method=o,t.arg=i;;){var a=t.delegate;if(a){var c=j(a,t);if(c){if(c===f)continue;return c}}if("next"===t.method)t.sent=t._sent=t.arg;else if("throw"===t.method){if("suspendedStart"===r)throw r="completed",t.arg;t.dispatchException(t.arg)}else"return"===t.method&&t.abrupt("return",t.arg);r="executing";var l=u(e,n,t);if("normal"===l.type){if(r=t.done?"completed":"suspendedYield",l.arg===f)continue;return{value:l.arg,done:t.done}}"throw"===l.type&&(r="completed",t.method="throw",t.arg=l.arg)}}}function j(e,n){var t=n.method,r=e.iterator[t];if(void 0===r)return n.delegate=null,"throw"===t&&e.iterator.return&&(n.method="return",n.arg=void 0,j(e,n),"throw"===n.method)||"return"!==t&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+t+"' method")),f;var o=u(r,e.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,f;var i=o.arg;return i?i.done?(n[e.resultName]=i.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=void 0),n.delegate=null,f):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,f)}function C(e){var n={tryLoc:e[0]};1 in e&&(n.catchLoc=e[1]),2 in e&&(n.finallyLoc=e[2],n.afterLoc=e[3]),this.tryEntries.push(n)}function w(e){var n=e.completion||{};n.type="normal",delete n.arg,e.completion=n}function E(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(C,this),this.reset(!0)}function O(e){if(e){var n=e[i];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,o=function n(){for(;++r<e.length;)if(t.call(e,r))return n.value=e[r],n.done=!1,n;return n.value=void 0,n.done=!0,n};return o.next=o}}return{next:k}}function k(){return{value:void 0,done:!0}}return d.prototype=y,r(A,"constructor",{value:y,configurable:!0}),r(y,"constructor",{value:d,configurable:!0}),d.displayName=l(y,c,"GeneratorFunction"),e.isGeneratorFunction=function(e){var n="function"==typeof e&&e.constructor;return!!n&&(n===d||"GeneratorFunction"===(n.displayName||n.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,y):(e.__proto__=y,l(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},e.awrap=function(e){return{__await:e}},v(g.prototype),l(g.prototype,a,(function(){return this})),e.AsyncIterator=g,e.async=function(n,t,r,o,i){void 0===i&&(i=Promise);var a=new g(s(n,t,r,o),i);return e.isGeneratorFunction(t)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},v(A),l(A,c,"Generator"),l(A,i,(function(){return this})),l(A,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var n=Object(e),t=[];for(var r in n)t.push(r);return t.reverse(),function e(){for(;t.length;){var r=t.pop();if(r in n)return e.value=r,e.done=!1,e}return e.done=!0,e}},e.values=O,E.prototype={constructor:E,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(w),!e)for(var n in this)"t"===n.charAt(0)&&t.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function r(t,r){return a.type="throw",a.arg=e,n.next=t,r&&(n.method="next",n.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var c=t.call(i,"catchLoc"),l=t.call(i,"finallyLoc");if(c&&l){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(e,n){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&t.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=n&&n<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=n,i?(this.method="next",this.next=i.finallyLoc,f):this.complete(a)},complete:function(e,n){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&n&&(this.next=n),f},finish:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.finallyLoc===e)return this.complete(t.completion,t.afterLoc),w(t),f}},catch:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.tryLoc===e){var r=t.completion;if("throw"===r.type){var o=r.arg;w(t)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,t){return this.delegate={iterator:O(e),resultName:n,nextLoc:t},"next"===this.method&&(this.arg=void 0),f}},e}function Pd(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Id(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Pd(Object(t),!0).forEach((function(n){Td(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Pd(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Td(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Sd(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Sd(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Sd(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Ld(e,n,t,r,o,i,a){try{var c=e[i](a),l=c.value}catch(e){return void t(e)}c.done?n(l):Promise.resolve(l).then(r,o)}function Dd(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(e,n)||function(e,n){if(e){if("string"==typeof e)return Rd(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Rd(e,n):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Rd(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var Nd=function(e){return Xp()(e,{name:"MissingRepoFile",path:"config"})},_d=function(e){return Xp()(e,{name:"MissingRepoFile",intent:"directory-structure"})},Md=function(e){return Xp()(e,{name:"MissingRepoFile",path:"config/info.json"})||Xp()(e,{name:"MissingRepoFile",intent:"metadata"})},Yd=function(e){return"MissingRepoFile"===(null==e?void 0:e.name)&&(null==e?void 0:e.path.match(/config\/boards\/[^/]+\/[^/]+\/[^/]+?\..*$/))};function qd(e){var n=Dd(id(),2),t=n[0],o=n[1],i=function(e,n){var t=e.branches,o=e.keyboards,i=e.selectedRepoId,a=e.selectedBranchName,c=e.selectedKeyboard,l=(_f.repositories||[]).map((function(e){return{id:e.id,name:e.name,full:e.full_name}})),s=(_f.installations||[]).map((function(e){return{id:e.id,type:"installation",name:"[Manage available repos for ".concat(e.account.login,"...]")}})),u=(0,r.useMemo)((function(){return[].concat(Od(l),Od(s))}),[l,s]),f=(0,r.useMemo)((function(){return t.map((function(e){return{id:e.name,name:e.name}}))}),[t]),p=(0,r.useMemo)((function(){return o.map((function(e){return{id:e,name:e}}))}),[o]),d=(0,r.useMemo)((function(){return ip()(l,{id:i})}),[l,i]),y=(0,r.useMemo)((function(){return ip()(f,{id:a})}),[f,a]),h=(0,r.useMemo)((function(){return ip()(p,{id:c})}),[p,c]);return(0,r.useEffect)((function(){i&&Ed(Cd().mark((function e(){var t,r;return Cd().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n.loadingBranchesList(),t=ip()(_f.repositories,{id:i}),e.next=4,_f.fetchRepoBranches(t);case 4:r=e.sent,n.loadedBranchesList({branches:r});case 6:case"end":return e.stop()}}),e)})))()}),[i,n]),(0,r.useEffect)((function(){i&&a&&Ed(Cd().mark((function e(){var t,r;return Cd().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n.loadingKeyboardsList(),t=ip()(_f.repositories,{id:i}),e.next=4,_f.fetchBranchKeyboards(t,a);case 4:r=e.sent,n.loadedKeyboardsList(r);case 6:case"end":return e.stop()}}),e)})))()}),[i,a,n]),[{repositories:l,repositoryChoices:u,branchChoices:f,keyboardChoices:p},{selectedRepoChoice:d,selectedBranchChoice:y,selectedKeyboardChoice:h}]}(t,o),a=Dd(i,2),c=a[0],l=a[1],s=t.initialized,u=t.selectedRepoId,f=t.selectedBranchName,p=t.selectedKeyboard,d=t.loading,y=e.onSelect,h=e.onError;(0,r.useEffect)((function(){var e=function(){return _f.beginLoginFlow()},n=function(){o.clearSelection(),h({dialog:pd})},t=function(){o.clearSelection(),h({dialog:dp})},r=function(e){var n=Hp;Nd(e)&&(n=fd),Yd(e)&&(n=cd),Md(e)&&(n=yd),_d(e)&&(n=gd),o.clearSelection(),h({dialog:n,dialogProps:{title:e.name,errors:e.errors}})};return _f.init().then(o.integrationInitialized),_f.on("authentication-failed",e),_f.on("blocked",n),_f.on("repo-validation-error",r),_f.on("layout-generation-failed",t),function(){_f.off("authentication-failed",e),_f.off("blocked",n),_f.off("repo-validation-error",r),_f.off("layout-generation-failed",t)}}),[o,h]);var m=(0,r.useCallback)(function(){var e,n=(e=Bd().mark((function e(n,t,r){var i,a,c,l;return Bd().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return a=_f.repositories,c=null===(i=ip()(a,{id:n}))||void 0===i?void 0:i.full_name,o.keyboardLoading(),e.next=5,_f.fetchLayoutAndKeymap(c,t,{keyboard:r});case 5:l=e.sent,o.keyboardLoadedSuccess({response:l}),y(Id({github:{repository:c,branch:t,keyboard:r}},l));case 8:case"end":return e.stop()}}),e)})),function(){var n=this,t=arguments;return new Promise((function(r,o){var i=e.apply(n,t);function a(e){Ld(i,r,o,a,c,"next",e)}function c(e){Ld(i,r,o,a,c,"throw",e)}a(void 0)}))});return function(e,t,r){return n.apply(this,arguments)}}(),[o,y]),b=(0,r.useCallback)((function(){return m(u,f,p)}),[m,u,f,p]);return(0,r.useEffect)((function(){u&&f&&m(u,f,p)}),[u,f,p,m]),s?t.blocked?(0,O.jsx)(pd,{}):_f.isGitHubAuthorized()?_f.isAppInstalled()?_f.isAppSuspendedForRepoSelection()?(0,O.jsx)(sd,{installation:_f.installations[0]}):(0,O.jsxs)(O.Fragment,{children:[(0,O.jsx)(xd,{state:t,actions:o,choices:c,selections:l}),f&&!d&&(0,O.jsx)(Cp,{onClick:b,children:(0,O.jsx)(L,{name:"sync"})})]}):(0,O.jsx)(Ad,{}):(0,O.jsx)(md,{}):null}qd.propTypes={expanded:E().bool.isRequired,onExpand:E().func.isRequired,onError:E().func.isRequired,onSelect:E().func.isRequired};var Zd=qd,Kd=St()([re&&{id:"demo",name:"Demo Keyboard"},te&&{id:"local",name:"Local"},ne&&{id:"github",name:"GitHub"}]),Ud=localStorage.getItem("selectedSource"),Gd=(1===Kd.length?Kd[0].id:null)||(Kd.find((function(e){return e.id===Ud}))?Ud:Kd[0].id);function zd(e){var n=e.onDismiss;return(0,O.jsx)(fn,{children:(0,O.jsxs)(tn,{onDismiss:n,children:[(0,O.jsx)("h2",{children:"Could not parse keymap"}),(0,O.jsx)("p",{children:"It looks like some bindings in your keymap are using custom pre-processor macros which isn't supported by the Keymap Editor. These macros make it difficult both to resolve bindings to behaviors and parameters, as well as to generate modified keymap code that is consistent with your original intentions."}),(0,O.jsx)("p",{children:"Please either continue editing your keymap by hand with these helpers or if you would like to use this editor, rewrite the keymap to use ZMK's syntax directly."}),up]})})}zd.propTypes={onDismiss:E().func.isRequired};var Wd=zd;function Fd(e){var n=e.onDismiss;return(0,O.jsx)(fn,{children:(0,O.jsxs)(tn,{onDismiss:n,children:[(0,O.jsx)("h2",{children:"Could not parse keymap"}),(0,O.jsx)("p",{children:"Something went wrong while trying to parse your keymap. It's hard to say what exactly, because I wasn't expecting this."}),(0,O.jsx)("p",{children:"A common occurrence here is keymaps using a variety of pre-processor macros to define layers/combos/etc."}),up]})})}Fd.propTypes={onDismiss:E().func.isRequired};var Xd=Fd;function Vd(e){var n=e.onDismiss;return(0,O.jsx)(fn,{children:(0,O.jsxs)(tn,{onDismiss:n,children:[(0,O.jsx)("h2",{children:"Could not parse Miryoku keymap"}),(0,O.jsx)("p",{children:"It looks like your keyboard is built using Miryoku to manage the configuration and keymap. Parsing and editing keymaps that use this syntax is unsupported by the Keymap Editor."}),(0,O.jsx)("p",{children:"Please either continue editing your keymap by hand with these helpers or if you would like to use this editor, rewrite the keymap to use ZMK's syntax directly."})]})})}Vd.propTypes={onDismiss:E().func.isRequired};var Qd=Vd;function Hd(e){var n=e.onDismiss;return(0,O.jsx)(fn,{children:(0,O.jsxs)(tn,{onDismiss:n,children:[(0,O.jsx)("h2",{children:"Could not parse keymap"}),(0,O.jsx)("p",{children:"Missing devicetree root node."}),(0,O.jsx)("p",{children:"The keymap editor was unable to find a devicetree root node in your keymap. This means that either something is wrong with the parser or something is wrong with your keymap's syntax."}),(0,O.jsxs)("p",{children:["If you've been using the keymap editor succesfully up to now it's possible that it has introduced an error in the keymap file. Please reach out for support at ",ap,"."]})]})})}Hd.propTypes={onDismiss:E().func.isRequired};var Jd=Hd;function $d(e){var n=e.onDismiss;return(0,O.jsx)(fn,{children:(0,O.jsxs)(tn,{onDismiss:n,children:[(0,O.jsx)("h2",{children:"Could not parse keymap"}),(0,O.jsxs)("p",{children:["Detected use of ",(0,O.jsx)("code",{children:"zmk-nodefree-config"})]}),(0,O.jsx)("p",{children:"It looks like your keymap is built using helper functions from the zmk-nodefree-config library to replace devicetree syntax. Parsing and editing keymaps that use this syntax is unsupported by the Keymap Editor."}),(0,O.jsx)("p",{children:"Please either continue editing your keymap by hand with these helpers or if you would like to use this editor, rewrite the keymap to use ZMK's syntax directly."})]})})}$d.propTypes={onDismiss:E().func.isRequired};var ey=$d;function ny(e){return ny="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},ny(e)}function ty(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function ry(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?ty(Object(t),!0).forEach((function(n){oy(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ty(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function oy(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==ny(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==ny(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===ny(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function iy(e){return(0,O.jsx)(fn,{children:(0,O.jsxs)(tn,ry(ry({},e),{},{children:[(0,O.jsx)("h2",{children:"This layout was Auto-Generated"}),(0,O.jsx)("p",{children:"Hi there! There wasn't a layout definition to accompany your keymap file, so the keymap editor tried to generate one automatically in a last-ditch effort to help you get into the app."}),(0,O.jsxs)("p",{children:["This layout definition was (or will be) saved when you first save keymap changes with the keymap editor, so remember that if there are any tweaks you'd like to make to improve it you can do so by editing the ",(0,O.jsx)("code",{children:"info.json"})," file."]}),fp]}))})}iy.propTypes={};var ay=iy;function cy(e){return cy="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},cy(e)}function ly(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function sy(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?ly(Object(t),!0).forEach((function(n){uy(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ly(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function uy(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==cy(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==cy(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===cy(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function fy(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(e,n)||function(e,n){if(e){if("string"==typeof e)return py(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?py(e,n):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function py(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function dy(e){var n,t,o,i=e.onSelect,a=(0,r.useRef)(),c=fy((0,r.useState)(Gd),2),l=c[0],s=c[1],u=fy((0,r.useState)({autoGenerated:!1}),2),f=u[0].autoGenerated,p=u[1],d=fy((0,r.useState)(null),2),y=d[0],h=d[1],m=(0,r.useCallback)((function(){return h(null)}),[h]),b=(!0,t=(n=fy((0,r.useState)(true),2))[0],o=n[1],[t,(0,r.useCallback)((function(){return o(!0)}),[o]),(0,r.useCallback)((function(){return o(!1)}),[o]),(0,r.useCallback)((function(){return o((function(e){return!e}))}),[o])]),A=fy(b,3),v=A[0],g=A[1],x=A[2],j=(0,r.useCallback)((function(){h({component:ay,onClose:m})}),[h,m]);!function(e,n){var t=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];(0,r.useEffect)((function(){if(t){var r=function(t){var r=document.body.contains(t.target),o=e.current.contains(t.target);r&&!o&&n()};return document.body.addEventListener("click",r),function(){return document.body.removeEventListener("click",r)}}}),[e,t,n])}(a,x,v&&"github"===l);var C=(0,r.useCallback)((function(e){var n=e.keymap.warningFlags,t=void 0===n?[]:n,r=(e.layoutMetadata||{}).autoGenerated,o=void 0!==r&&r,a=function(e){switch(e[0]){case"USING_ZMK_NODEFREE_MACROS":return ey;case"USING_MIRYOKU_DTSI":return Qd;case"USING_NON_ZMK_MACRO":return Wd;case"KEYMAP_PARSING_FAILED":return Xd;case"MISSING_ROOT_NODE":return Jd;default:return null}}(t);if(a)return h({component:a,onClose:m}),void i({source:l,keyboard:null});p({autoGenerated:o}),i(sy({source:l},e))}),[i,l,h,m]),w=(0,r.useCallback)((function(e){var n=e.dialog,t=e.dialogProps;h({component:n,dialogProps:t,onClose:m}),i({source:l,keyboard:null})}),[h,m,i,l]);(0,r.useEffect)((function(){localStorage.setItem("selectedSource",l)}),[l]);var E=ip()(Kd,{id:l});return(0,O.jsxs)("div",{ref:a,style:{display:"flex",flexDirection:"row",alignItems:"end",gap:"5px",margin:"5px"},children:[(0,O.jsx)(Op,{label:"Source",value:E,options:Kd,getOptionLabel:function(e){return e.name},getOptionValue:function(e){return e.id},onChange:function(e){var n=e.id;return s(n)}}),(null==y?void 0:y.component)&&(0,O.jsx)(y.component,sy(sy({},y.dialogProps||{}),{},{onDismiss:y.onClose})),"local"===l&&(0,O.jsx)(Lp,{onError:w,onSelect:C}),"demo"===l&&(0,O.jsx)(Wp,{onSelect:C}),"github"===l&&(0,O.jsx)(Zd,{expanded:v,onSelect:C,onError:w,onExpand:g}),f&&(0,O.jsxs)(Cp,{onClick:j,children:[(0,O.jsx)(L,{name:"warning"})," Layout wrong?"]})]})}dy.propTypes={onSelect:E().func.isRequired};var yy=dy,hy=t(70401),my=t.n(hy),by=t(14084),Ay={};Ay.styleTagTransform=b(),Ay.setAttributes=d(),Ay.insert=f().bind(null,"head"),Ay.domAPI=s(),Ay.insertStyleElement=h(),c()(by.Z,Ay);var vy=by.Z&&by.Z.locals?by.Z.locals:void 0;function gy(e){return gy="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},gy(e)}function xy(){xy=function(){return e};var e={},n=Object.prototype,t=n.hasOwnProperty,r=Object.defineProperty||function(e,n,t){e[n]=t.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function l(e,n,t){return Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}),e[n]}try{l({},"")}catch(e){l=function(e,n,t){return e[n]=t}}function s(e,n,t,o){var i=n&&n.prototype instanceof p?n:p,a=Object.create(i.prototype),c=new E(o||[]);return r(a,"_invoke",{value:x(e,t,c)}),a}function u(e,n,t){try{return{type:"normal",arg:e.call(n,t)}}catch(e){return{type:"throw",arg:e}}}e.wrap=s;var f={};function p(){}function d(){}function y(){}var h={};l(h,i,(function(){return this}));var m=Object.getPrototypeOf,b=m&&m(m(O([])));b&&b!==n&&t.call(b,i)&&(h=b);var A=y.prototype=p.prototype=Object.create(h);function v(e){["next","throw","return"].forEach((function(n){l(e,n,(function(e){return this._invoke(n,e)}))}))}function g(e,n){function o(r,i,a,c){var l=u(e[r],e,i);if("throw"!==l.type){var s=l.arg,f=s.value;return f&&"object"==gy(f)&&t.call(f,"__await")?n.resolve(f.__await).then((function(e){o("next",e,a,c)}),(function(e){o("throw",e,a,c)})):n.resolve(f).then((function(e){s.value=e,a(s)}),(function(e){return o("throw",e,a,c)}))}c(l.arg)}var i;r(this,"_invoke",{value:function(e,t){function r(){return new n((function(n,r){o(e,t,n,r)}))}return i=i?i.then(r,r):r()}})}function x(e,n,t){var r="suspendedStart";return function(o,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw i;return{value:void 0,done:!0}}for(t.method=o,t.arg=i;;){var a=t.delegate;if(a){var c=j(a,t);if(c){if(c===f)continue;return c}}if("next"===t.method)t.sent=t._sent=t.arg;else if("throw"===t.method){if("suspendedStart"===r)throw r="completed",t.arg;t.dispatchException(t.arg)}else"return"===t.method&&t.abrupt("return",t.arg);r="executing";var l=u(e,n,t);if("normal"===l.type){if(r=t.done?"completed":"suspendedYield",l.arg===f)continue;return{value:l.arg,done:t.done}}"throw"===l.type&&(r="completed",t.method="throw",t.arg=l.arg)}}}function j(e,n){var t=n.method,r=e.iterator[t];if(void 0===r)return n.delegate=null,"throw"===t&&e.iterator.return&&(n.method="return",n.arg=void 0,j(e,n),"throw"===n.method)||"return"!==t&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+t+"' method")),f;var o=u(r,e.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,f;var i=o.arg;return i?i.done?(n[e.resultName]=i.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=void 0),n.delegate=null,f):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,f)}function C(e){var n={tryLoc:e[0]};1 in e&&(n.catchLoc=e[1]),2 in e&&(n.finallyLoc=e[2],n.afterLoc=e[3]),this.tryEntries.push(n)}function w(e){var n=e.completion||{};n.type="normal",delete n.arg,e.completion=n}function E(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(C,this),this.reset(!0)}function O(e){if(e){var n=e[i];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,o=function n(){for(;++r<e.length;)if(t.call(e,r))return n.value=e[r],n.done=!1,n;return n.value=void 0,n.done=!0,n};return o.next=o}}return{next:k}}function k(){return{value:void 0,done:!0}}return d.prototype=y,r(A,"constructor",{value:y,configurable:!0}),r(y,"constructor",{value:d,configurable:!0}),d.displayName=l(y,c,"GeneratorFunction"),e.isGeneratorFunction=function(e){var n="function"==typeof e&&e.constructor;return!!n&&(n===d||"GeneratorFunction"===(n.displayName||n.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,y):(e.__proto__=y,l(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},e.awrap=function(e){return{__await:e}},v(g.prototype),l(g.prototype,a,(function(){return this})),e.AsyncIterator=g,e.async=function(n,t,r,o,i){void 0===i&&(i=Promise);var a=new g(s(n,t,r,o),i);return e.isGeneratorFunction(t)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},v(A),l(A,c,"Generator"),l(A,i,(function(){return this})),l(A,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var n=Object(e),t=[];for(var r in n)t.push(r);return t.reverse(),function e(){for(;t.length;){var r=t.pop();if(r in n)return e.value=r,e.done=!1,e}return e.done=!0,e}},e.values=O,E.prototype={constructor:E,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(w),!e)for(var n in this)"t"===n.charAt(0)&&t.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function r(t,r){return a.type="throw",a.arg=e,n.next=t,r&&(n.method="next",n.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var c=t.call(i,"catchLoc"),l=t.call(i,"finallyLoc");if(c&&l){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(e,n){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&t.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=n&&n<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=n,i?(this.method="next",this.next=i.finallyLoc,f):this.complete(a)},complete:function(e,n){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&n&&(this.next=n),f},finish:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.finallyLoc===e)return this.complete(t.completion,t.afterLoc),w(t),f}},catch:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.tryLoc===e){var r=t.completion;if("throw"===r.type){var o=r.arg;w(t)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,t){return this.delegate={iterator:O(e),resultName:n,nextLoc:t},"next"===this.method&&(this.arg=void 0),f}},e}function jy(e,n,t,r,o,i,a){try{var c=e[i](a),l=c.value}catch(e){return void t(e)}c.done?n(l):Promise.resolve(l).then(r,o)}function Cy(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(e,n)||function(e,n){if(e){if("string"==typeof e)return wy(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?wy(e,n):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function wy(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function Ey(e){return"  ".concat(e.fileName,":").concat(e.lineNumber,":").concat(e.columnNumber)}var Oy=(0,O.jsx)(ec,{external:!0,href:"https://github.com/nickcoutsos/keymap-editor/issues/new",children:"new issue"});function ky(e){var n=e.error,t=Cy((0,r.useState)([]),2),o=t[0],i=t[1],a=Cy((0,r.useState)(""),2),c=a[0],l=a[1],s=Cy((0,r.useState)(!1),2),u=s[0],f=s[1];return(0,r.useEffect)((function(){function e(){var t;return t=xy().mark((function e(){return xy().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.t0=i,e.next=3,my().fromError(n);case 3:e.t1=e.sent,(0,e.t0)(e.t1);case 5:case"end":return e.stop()}}),e)})),e=function(){var e=this,n=arguments;return new Promise((function(r,o){var i=t.apply(e,n);function a(e){jy(i,r,o,a,c,"next",e)}function c(e){jy(i,r,o,a,c,"throw",e)}a(void 0)}))},e.apply(this,arguments)}!function(){e.apply(this,arguments)}()}),[i,n]),(0,r.useEffect)((function(){l(function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];return"\n".concat(e.name,"\n\n").concat(e.message,"\n\n").concat(n.map(Ey).join("\n"),"\n").trim()}(n,o))}),[n,o]),(0,r.useEffect)((function(){u&&setTimeout((function(){f(!1)}),3e3)}),[u,f]),(0,O.jsx)(fn,{children:(0,O.jsxs)(tn,{dismissText:!1,style:{maxWidth:"700px"},children:[(0,O.jsx)("h2",{children:"Unexpected error"}),(0,O.jsxs)("p",{children:["Something unexpected happened and the keymap editor app cannot recover. Please consider taking a moment to open a ",Oy,"with the details below to help me investigate and improve the app."]}),(0,O.jsxs)("div",{className:vy.stackTrace,children:[(0,O.jsx)("pre",{children:c}),(0,O.jsx)(Y,{icon:"copy",title:"Copy error text",className:vy.button,onClick:function(){var e="".concat("```","\n").concat(c,"\n").concat("```");navigator.clipboard.writeText(e).then((function(){return f(!0)}))}}),u&&(0,O.jsx)("div",{className:vy.copyMessage,children:"Copied!"})]})]})})}ky.propTypes={error:E().instanceOf(Error).isRequired};var Sy=ky;function By(e){return By="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},By(e)}function Py(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,(void 0,o=function(e,n){if("object"!==By(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==By(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(r.key),"symbol"===By(o)?o:String(o)),r)}var o}function Iy(e,n){return Iy=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,n){return e.__proto__=n,e},Iy(e,n)}function Ty(e){return Ty=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},Ty(e)}var Ly=function(e){!function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),n&&Iy(e,n)}(c,e);var n,t,r,o,i,a=(o=c,i=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,n=Ty(o);if(i){var t=Ty(this).constructor;e=Reflect.construct(n,arguments,t)}else e=n.apply(this,arguments);return function(e,n){if(n&&("object"===By(n)||"function"==typeof n))return n;if(void 0!==n)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(this,e)});function c(e){var n;return function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,c),(n=a.call(this,e)).state={error:null},n}return n=c,r=[{key:"getDerivedStateFromError",value:function(e){return{error:e}}}],(t=[{key:"render",value:function(){var e=this.props.children,n=this.state.error;return n?(0,O.jsx)(Sy,{error:n}):e}}])&&Py(n.prototype,t),r&&Py(n,r),Object.defineProperty(n,"prototype",{writable:!1}),c}(r.Component);function Dy(e){var n=e.onDismiss;return(0,O.jsx)(fn,{children:(0,O.jsxs)(tn,{onDismiss:n,children:[(0,O.jsx)("h2",{children:"Failed to save keymap changes"}),(0,O.jsx)("p",{children:"Sorry, an unexpected error occurred while trying to save your keymap."}),(0,O.jsx)("p",{children:"Please try again or raise an issue if the problem persists and I'll try to work it out with you. Seriously I can only get this right if I know what's wrong, and in some cases that comes down to people using this editor in more advanced ways than I myself have."}),(0,O.jsx)("p",{children:ap})]})})}Dy.propTypes={onDismiss:E().func.isRequired};var Ry=Dy;function Ny(e){return Ny="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Ny(e)}var _y=["source","layout","keymap","sensors"];function My(){My=function(){return e};var e={},n=Object.prototype,t=n.hasOwnProperty,r=Object.defineProperty||function(e,n,t){e[n]=t.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function l(e,n,t){return Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}),e[n]}try{l({},"")}catch(e){l=function(e,n,t){return e[n]=t}}function s(e,n,t,o){var i=n&&n.prototype instanceof p?n:p,a=Object.create(i.prototype),c=new E(o||[]);return r(a,"_invoke",{value:x(e,t,c)}),a}function u(e,n,t){try{return{type:"normal",arg:e.call(n,t)}}catch(e){return{type:"throw",arg:e}}}e.wrap=s;var f={};function p(){}function d(){}function y(){}var h={};l(h,i,(function(){return this}));var m=Object.getPrototypeOf,b=m&&m(m(O([])));b&&b!==n&&t.call(b,i)&&(h=b);var A=y.prototype=p.prototype=Object.create(h);function v(e){["next","throw","return"].forEach((function(n){l(e,n,(function(e){return this._invoke(n,e)}))}))}function g(e,n){function o(r,i,a,c){var l=u(e[r],e,i);if("throw"!==l.type){var s=l.arg,f=s.value;return f&&"object"==Ny(f)&&t.call(f,"__await")?n.resolve(f.__await).then((function(e){o("next",e,a,c)}),(function(e){o("throw",e,a,c)})):n.resolve(f).then((function(e){s.value=e,a(s)}),(function(e){return o("throw",e,a,c)}))}c(l.arg)}var i;r(this,"_invoke",{value:function(e,t){function r(){return new n((function(n,r){o(e,t,n,r)}))}return i=i?i.then(r,r):r()}})}function x(e,n,t){var r="suspendedStart";return function(o,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw i;return{value:void 0,done:!0}}for(t.method=o,t.arg=i;;){var a=t.delegate;if(a){var c=j(a,t);if(c){if(c===f)continue;return c}}if("next"===t.method)t.sent=t._sent=t.arg;else if("throw"===t.method){if("suspendedStart"===r)throw r="completed",t.arg;t.dispatchException(t.arg)}else"return"===t.method&&t.abrupt("return",t.arg);r="executing";var l=u(e,n,t);if("normal"===l.type){if(r=t.done?"completed":"suspendedYield",l.arg===f)continue;return{value:l.arg,done:t.done}}"throw"===l.type&&(r="completed",t.method="throw",t.arg=l.arg)}}}function j(e,n){var t=n.method,r=e.iterator[t];if(void 0===r)return n.delegate=null,"throw"===t&&e.iterator.return&&(n.method="return",n.arg=void 0,j(e,n),"throw"===n.method)||"return"!==t&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+t+"' method")),f;var o=u(r,e.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,f;var i=o.arg;return i?i.done?(n[e.resultName]=i.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=void 0),n.delegate=null,f):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,f)}function C(e){var n={tryLoc:e[0]};1 in e&&(n.catchLoc=e[1]),2 in e&&(n.finallyLoc=e[2],n.afterLoc=e[3]),this.tryEntries.push(n)}function w(e){var n=e.completion||{};n.type="normal",delete n.arg,e.completion=n}function E(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(C,this),this.reset(!0)}function O(e){if(e){var n=e[i];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,o=function n(){for(;++r<e.length;)if(t.call(e,r))return n.value=e[r],n.done=!1,n;return n.value=void 0,n.done=!0,n};return o.next=o}}return{next:k}}function k(){return{value:void 0,done:!0}}return d.prototype=y,r(A,"constructor",{value:y,configurable:!0}),r(y,"constructor",{value:d,configurable:!0}),d.displayName=l(y,c,"GeneratorFunction"),e.isGeneratorFunction=function(e){var n="function"==typeof e&&e.constructor;return!!n&&(n===d||"GeneratorFunction"===(n.displayName||n.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,y):(e.__proto__=y,l(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},e.awrap=function(e){return{__await:e}},v(g.prototype),l(g.prototype,a,(function(){return this})),e.AsyncIterator=g,e.async=function(n,t,r,o,i){void 0===i&&(i=Promise);var a=new g(s(n,t,r,o),i);return e.isGeneratorFunction(t)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},v(A),l(A,c,"Generator"),l(A,i,(function(){return this})),l(A,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var n=Object(e),t=[];for(var r in n)t.push(r);return t.reverse(),function e(){for(;t.length;){var r=t.pop();if(r in n)return e.value=r,e.done=!1,e}return e.done=!0,e}},e.values=O,E.prototype={constructor:E,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(w),!e)for(var n in this)"t"===n.charAt(0)&&t.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function r(t,r){return a.type="throw",a.arg=e,n.next=t,r&&(n.method="next",n.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var c=t.call(i,"catchLoc"),l=t.call(i,"finallyLoc");if(c&&l){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(e,n){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&t.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=n&&n<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=n,i?(this.method="next",this.next=i.finallyLoc,f):this.complete(a)},complete:function(e,n){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&n&&(this.next=n),f},finish:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.finallyLoc===e)return this.complete(t.completion,t.afterLoc),w(t),f}},catch:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.tryLoc===e){var r=t.completion;if("throw"===r.type){var o=r.arg;w(t)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,t){return this.delegate={iterator:O(e),resultName:n,nextLoc:t},"next"===this.method&&(this.arg=void 0),f}},e}function Yy(e,n,t,r,o,i,a){try{var c=e[i](a),l=c.value}catch(e){return void t(e)}c.done?n(l):Promise.resolve(l).then(r,o)}var qy=function(){var e=(0,i.v9)((function(e){return e})),n=(0,i.I0)(),t=e.sourceOther,o=e.keyboard,a=e.saveError,c=e.theme,l=e.settingsVisible,s=e.experimentalSettings;(0,r.useEffect)((function(){var e;if(null!=t&&t.github)return(e=My().mark((function e(){var n,o,i;return My().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=t.github,o=n.repository,i=n.branch,e.t0=r,e.next=4,_f.fetchBuildStatus(o,i);case 4:e.t1=e.sent,(0,e.t0)(e.t1);case 6:case"end":return e.stop()}}),e)})),function(){var n=this,t=arguments;return new Promise((function(r,o){var i=e.apply(n,t);function a(e){Yy(i,r,o,a,c,"next",e)}function c(e){Yy(i,r,o,a,c,"throw",e)}a(void 0)}))})(),_f.on("build-update",r),function(){return _f.off("build-update",r)};function r(e){e.head_branch===t.github.branch&&n({type:"GITHUB_BUILD_UPDATE",build:e})}n({type:"GITHUB_BUILD_UPDATE",build:null})}),[t,n]);var u=(0,r.useCallback)((function(e){var t=e.source,r=e.layout,o=e.keymap,i=e.sensors,a=void 0===i?[]:i,c=function(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}(e,_y);n(o?{type:"SELECT_KEYBOARD",source:t,sourceOther:c,layout:r,keymap:o,sensors:a}:{type:"CLEAR_KEYBOARD_SELECTION"})}),[n]),f=(0,r.useCallback)((function(e){n({type:"SETTINGS_UPDATE",settings:e})}),[n]),p=(0,r.useCallback)((function(){return n({type:"SETTINGS_OPEN"})}),[n]);return(0,O.jsxs)(O.Fragment,{children:[(0,O.jsx)(Ly,{children:(0,O.jsxs)(C.Provider,{value:{settings:s,openSettingsDialog:p},children:[(0,O.jsx)(yy,{onSelect:u}),(0,O.jsxs)("div",{id:"settings-bar",children:[(0,O.jsx)(Y,{id:"light-mode",title:"Toggle theme",icon:{light:"sun",dark:"moon",system:"circle-half-stroke"}[c]||"circle-half-stroke",onClick:function(){return n({type:"CYCLE_THEME"})}}),(0,O.jsx)(Y,{id:"settings-button",icon:"cog",onClick:p}),l&&(0,O.jsx)(ff,{settings:s,onUpdate:f,onClose:function(){return n({type:"SETTINGS_CLOSE"})}})]}),(0,O.jsx)(rp,{}),(0,O.jsxs)(Pe,{children:[o&&(0,O.jsx)(ar,{layout:o.layout,children:(0,O.jsx)(Ju,{keymap:o.keymap,sensors:o.sensors})}),a&&(0,O.jsx)(Ry,{onDismiss:function(){return n({type:"CLEAR_SAVE_ERROR"})}})]})]})}),(0,O.jsx)(rf,{})]})};function Zy(e){return Zy="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Zy(e)}function Ky(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Uy(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Ky(Object(t),!0).forEach((function(n){Gy(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Ky(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Gy(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Zy(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Zy(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Zy(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function zy(){var e=JSON.parse(localStorage.getItem("experimental-settings")||"{}");return{definitions:null,source:null,sourceOther:null,keyboard:null,_unmodifiedKeymap:null,saving:null,saveError:null,settingsVisible:null,commitDialogOpen:!1,theme:JSON.parse(localStorage.getItem("theme")),experimentalSettings:{unicodeGlyphs:G()(e,"unicodeGlyphs",!0),platformGlyphs:G()(e,"platformGlyphs","auto"),enableBehaviorEditing:G()(e,"enableBehaviorEditing",!1)},latestBuild:null}}var Wy=zy();var Fy=t(14890);function Xy(e){return Xy="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Xy(e)}function Vy(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Qy(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Vy(Object(t),!0).forEach((function(n){Hy(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Vy(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Hy(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Xy(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Xy(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Xy(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}var Jy=(0,Fy.UY)({layout:function(){return arguments.length>0&&void 0!==arguments[0]?arguments[0]:[]},sensors:function(){return arguments.length>0&&void 0!==arguments[0]?arguments[0]:[]},keymap:(0,Fy.UY)({warningFlags:function(){return arguments.length>0&&void 0!==arguments[0]?arguments[0]:[]},defines:function(){return arguments.length>0&&void 0!==arguments[0]?arguments[0]:[]},chosen:function(){return arguments.length>0&&void 0!==arguments[0]?arguments[0]:{}},behaviors:vc,combos:ll,layers:Di,macros:$s})}),$y=(0,hi.xC)({reducer:function(e,n){var t=function(e,n){switch(n.type){case"INITIALIZE":return zy();case"DEFINITIONS_SET":return Uy(Uy({},e),{},{definitions:n.definitions});case"CLEAR_KEYBOARD_SELECTION":return Uy(Uy({},e),{},{keyboard:null});case"SELECT_KEYBOARD":return function(e,n){var t=e.keyboard,r=tt()(n,["layout","keymap","sensors"]);return r.keymap.macros=r.keymap.macros.map((function(e){return tt()(e,["index","name","labels","properties"])})),Uy(Uy({},e),{},{source:n.source,sourceOther:n.sourceOther,keyboard:Uy(Uy({},t),r),_unmodifiedKeymap:n.keymap})}(e,n);case"COMMIT_DIALOG_OPEN":return Uy(Uy({},e),{},{commitDialogOpen:!0});case"COMMIT_DIALOG_CLOSE":return Uy(Uy({},e),{},{commitDialogOpen:!1});case"GITHUB_BUILD_UPDATE":return Uy(Uy({},e),{},{latestBuild:n.build});case"KEYMAP_SAVE_START":return Uy(Uy({},e),{},{saving:!0,saveError:!1});case"KEYMAP_SAVE_SUCCESS":return Uy(Uy({},e),{},{saving:!1,unsaved:!1,keyboard:Uy(Uy({},e.keyboard),{},{keymap:n.keymap||e.keyboard.keymap}),_unmodifiedKeymap:n.keymap||e.keyboard.keymap});case"KEYMAP_SAVE_FAILURE":return Uy(Uy({},e),{},{saving:!1,saveError:!0});case"CLEAR_SAVE_ERROR":return Uy(Uy({},e),{},{saveError:null});case"SETTINGS_OPEN":return Uy(Uy({},e),{},{settingsVisible:!0});case"SETTINGS_CLOSE":return Uy(Uy({},e),{},{settingsVisible:!1});case"SETTINGS_UPDATE":return localStorage.setItem("experimental-settings",JSON.stringify(n.settings)),Uy(Uy({},e),{},{experimentalSettings:n.settings});case"CYCLE_THEME":return function(e,n){var t=["light","dark","system"],r=t.indexOf(e.theme),o=t.at((r+1)%t.length);return localStorage.setItem("theme",'"'.concat(o,'"')),document.body.dataset.theme=o,Uy(Uy({},e),{},{theme:o})}(e);default:return e}}(e,n);return Qy(Qy({},t),{},{keyboard:t.keyboard&&Qy(Qy({},t.keyboard),Jy(t.keyboard,n))})},preloadedState:Wy});document.body.dataset.theme=Wy.theme,o.createRoot(document.getElementById("app-root")).render((0,O.jsx)(r.StrictMode,{children:(0,O.jsx)(i.zt,{store:$y,children:(0,O.jsx)(qy,{})})}))},39087:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,':root {\n  --bg: white;\n  --bg-rgb: 255,255,255;\n  --fg: black;\n\t--dark-red: #910e0e;\n\t--dark-blue: #6d99c6;\n  --error-highlight: rgb(179, 60, 60);\n  --selection: rgb(60, 179, 113);\n  --hover-selection: rgba(60, 179, 113, 0.85);\n  --delete: rgb(179, 60, 72);\n  --delete-faint: rgba(179, 60, 72, 0.6);\n  --link: royalblue;\n  --link-hover: #6d99c6;\n  --key-bg-base: #f2f2f2;\n  --key-bg-hover: white;\n  --key-bg-highlight: sandybrown;\n  --key-color-base: #6f6f6f;\n  --key-color-extreme: #313131;\n  --key-color-hover: white;\n  --code-bg: rgba(0, 0, 0, 0.15);\n}\nhtml {\n  font-family: sans-serif;\n}\nhtml, body {\n\twidth: 100vw;\n\theight: 100vh;\n\toverflow: auto;\n\tpadding: 0;\n\tmargin: 0;\n  background-color: var(--bg);\n  color: var(--fg);\n\n  transition: 300ms ease-in-out;\n  transition-property: color, background-color, border-color;\n}\n\nh1, h2, h3, h4, h5, h6 {\n  font-family: Quicksand, avenir, sans-serif;\n}\n\nbody[data-theme="dark"] {\n  color-scheme: dark;\n  --bg: #123;\n  --bg-rgb: 17,34,51;\n  --fg: white;\n  --key-bg-base: #1c2c3b;\n  --key-color-base: #b7b7b7;\n  --key-color-extreme: #e7e7e7;\n}\n@media (prefers-color-scheme: dark) {\n  body[data-theme="system"] {\n    color-scheme: dark;\n    --bg: #123;\n    --bg-rgb: 17,34,51;\n    --fg: white;\n    --key-bg-base: #1c2c3b;\n    --key-color-base: #b7b7b7;\n    --key-color-extreme: #e7e7e7;\n  }\n}\n\nh3 {\n  margin-bottom: 10px;\n}\n\na { color: var(--link) }\na:hover { color: var(--link-hover) }\n\ncode {\n  background-color: var(--code-bg);\n  border-radius: 2px;\n  padding: .15em .3em .05em;\n}\n\n#actions {\n\tposition: absolute;\n  display: flex;\n\tbottom: 5px;\n\tright: 5px;\n  gap: 4px;\n}\n\n#actions button {\n  display: inline-block;\n  cursor: pointer;\n  background-color: var(--hover-selection);\n  color: white;\n\n  font-size: 16px;\n  border: none;\n  border-radius: 5px;\n  padding: 0 5px;\n\n  height: 30px;\n  line-height: 30px;\n  vertical-align: middle;\n}\n\n#actions button[disabled] {\n  filter: saturate(20%);\n  opacity: .5;\n  cursor: not-allowed;\n}\n\n#settings-bar {\n  position: absolute;\n  top: 10px;\n  right: 10px;\n}\n\n#settings-bar button {\n  background: none;\n  color: var(--fg);\n  border: none;\n}\n#settings-bar button:hover {\n  cursor: pointer;\n  color: royalblue;\n}\n\n.fa-delete-right::before {\n  content: \'\\f55a\';\n  transform-origin: center;\n  transform: rotateZ(180deg);\n  display: inline-block;\n}\n',"",{version:3,sources:["webpack://./src/App.css"],names:[],mappings:"AAAA;EACE,WAAW;EACX,qBAAqB;EACrB,WAAW;CACZ,mBAAmB;CACnB,oBAAoB;EACnB,mCAAmC;EACnC,8BAA8B;EAC9B,2CAA2C;EAC3C,0BAA0B;EAC1B,sCAAsC;EACtC,iBAAiB;EACjB,qBAAqB;EACrB,sBAAsB;EACtB,qBAAqB;EACrB,8BAA8B;EAC9B,yBAAyB;EACzB,4BAA4B;EAC5B,wBAAwB;EACxB,8BAA8B;AAChC;AACA;EACE,uBAAuB;AACzB;AACA;CACC,YAAY;CACZ,aAAa;CACb,cAAc;CACd,UAAU;CACV,SAAS;EACR,2BAA2B;EAC3B,gBAAgB;;EAEhB,6BAA6B;EAC7B,0DAA0D;AAC5D;;AAEA;EACE,0CAA0C;AAC5C;;AAEA;EACE,kBAAkB;EAClB,UAAU;EACV,kBAAkB;EAClB,WAAW;EACX,sBAAsB;EACtB,yBAAyB;EACzB,4BAA4B;AAC9B;AACA;EACE;IACE,kBAAkB;IAClB,UAAU;IACV,kBAAkB;IAClB,WAAW;IACX,sBAAsB;IACtB,yBAAyB;IACzB,4BAA4B;EAC9B;AACF;;AAEA;EACE,mBAAmB;AACrB;;AAEA,IAAI,mBAAmB;AACvB,UAAU,yBAAyB;;AAEnC;EACE,gCAAgC;EAChC,kBAAkB;EAClB,yBAAyB;AAC3B;;AAEA;CACC,kBAAkB;EACjB,aAAa;CACd,WAAW;CACX,UAAU;EACT,QAAQ;AACV;;AAEA;EACE,qBAAqB;EACrB,eAAe;EACf,wCAAwC;EACxC,YAAY;;EAEZ,eAAe;EACf,YAAY;EACZ,kBAAkB;EAClB,cAAc;;EAEd,YAAY;EACZ,iBAAiB;EACjB,sBAAsB;AACxB;;AAEA;EACE,qBAAqB;EACrB,WAAW;EACX,mBAAmB;AACrB;;AAEA;EACE,kBAAkB;EAClB,SAAS;EACT,WAAW;AACb;;AAEA;EACE,gBAAgB;EAChB,gBAAgB;EAChB,YAAY;AACd;AACA;EACE,eAAe;EACf,gBAAgB;AAClB;;AAEA;EACE,gBAAgB;EAChB,wBAAwB;EACxB,0BAA0B;EAC1B,qBAAqB;AACvB",sourcesContent:[':root {\n  --bg: white;\n  --bg-rgb: 255,255,255;\n  --fg: black;\n\t--dark-red: #910e0e;\n\t--dark-blue: #6d99c6;\n  --error-highlight: rgb(179, 60, 60);\n  --selection: rgb(60, 179, 113);\n  --hover-selection: rgba(60, 179, 113, 0.85);\n  --delete: rgb(179, 60, 72);\n  --delete-faint: rgba(179, 60, 72, 0.6);\n  --link: royalblue;\n  --link-hover: #6d99c6;\n  --key-bg-base: #f2f2f2;\n  --key-bg-hover: white;\n  --key-bg-highlight: sandybrown;\n  --key-color-base: #6f6f6f;\n  --key-color-extreme: #313131;\n  --key-color-hover: white;\n  --code-bg: rgba(0, 0, 0, 0.15);\n}\nhtml {\n  font-family: sans-serif;\n}\nhtml, body {\n\twidth: 100vw;\n\theight: 100vh;\n\toverflow: auto;\n\tpadding: 0;\n\tmargin: 0;\n  background-color: var(--bg);\n  color: var(--fg);\n\n  transition: 300ms ease-in-out;\n  transition-property: color, background-color, border-color;\n}\n\nh1, h2, h3, h4, h5, h6 {\n  font-family: Quicksand, avenir, sans-serif;\n}\n\nbody[data-theme="dark"] {\n  color-scheme: dark;\n  --bg: #123;\n  --bg-rgb: 17,34,51;\n  --fg: white;\n  --key-bg-base: #1c2c3b;\n  --key-color-base: #b7b7b7;\n  --key-color-extreme: #e7e7e7;\n}\n@media (prefers-color-scheme: dark) {\n  body[data-theme="system"] {\n    color-scheme: dark;\n    --bg: #123;\n    --bg-rgb: 17,34,51;\n    --fg: white;\n    --key-bg-base: #1c2c3b;\n    --key-color-base: #b7b7b7;\n    --key-color-extreme: #e7e7e7;\n  }\n}\n\nh3 {\n  margin-bottom: 10px;\n}\n\na { color: var(--link) }\na:hover { color: var(--link-hover) }\n\ncode {\n  background-color: var(--code-bg);\n  border-radius: 2px;\n  padding: .15em .3em .05em;\n}\n\n#actions {\n\tposition: absolute;\n  display: flex;\n\tbottom: 5px;\n\tright: 5px;\n  gap: 4px;\n}\n\n#actions button {\n  display: inline-block;\n  cursor: pointer;\n  background-color: var(--hover-selection);\n  color: white;\n\n  font-size: 16px;\n  border: none;\n  border-radius: 5px;\n  padding: 0 5px;\n\n  height: 30px;\n  line-height: 30px;\n  vertical-align: middle;\n}\n\n#actions button[disabled] {\n  filter: saturate(20%);\n  opacity: .5;\n  cursor: not-allowed;\n}\n\n#settings-bar {\n  position: absolute;\n  top: 10px;\n  right: 10px;\n}\n\n#settings-bar button {\n  background: none;\n  color: var(--fg);\n  border: none;\n}\n#settings-bar button:hover {\n  cursor: pointer;\n  color: royalblue;\n}\n\n.fa-delete-right::before {\n  content: \'\\f55a\';\n  transform-origin: center;\n  transform: rotateZ(180deg);\n  display: inline-block;\n}\n'],sourceRoot:""}]),n.Z=a},51424:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,"body {\n  margin: 0;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\ncode {\n  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n    monospace;\n}\n","",{version:3,sources:["webpack://./src/index.css"],names:[],mappings:"AAAA;EACE,SAAS;EACT,mCAAmC;EACnC,kCAAkC;AACpC;;AAEA;EACE;aACW;AACb",sourcesContent:["body {\n  margin: 0;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\ncode {\n  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n    monospace;\n}\n"],sourceRoot:""}]),n.Z=a},56281:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,"button.pi2Ig8c3Fdh4H2Jpxdo7 {\n  display: inline-block;\n  cursor: pointer;\n  background-color: var(--hover-selection);\n  color: white;\n\n  font-size: 16px;\n  border: none;\n  border-radius: 5px;\n  padding: 0 5px;\n\n  height: 30px;\n  line-height: 30px;\n  vertical-align: middle;\n}\n\nbutton.Ctpu4E2dZYJ6g8CUGFOF {\n  color: var(--fg);\n  background-color: transparent;\n}\n\nbutton.pi2Ig8c3Fdh4H2Jpxdo7[disabled] {\n  filter: saturate(20%);\n  opacity: .5;\n  cursor: not-allowed;\n}\n","",{version:3,sources:["webpack://./src/Common/action-button.module.css"],names:[],mappings:"AAAA;EACE,qBAAqB;EACrB,eAAe;EACf,wCAAwC;EACxC,YAAY;;EAEZ,eAAe;EACf,YAAY;EACZ,kBAAkB;EAClB,cAAc;;EAEd,YAAY;EACZ,iBAAiB;EACjB,sBAAsB;AACxB;;AAEA;EACE,gBAAgB;EAChB,6BAA6B;AAC/B;;AAEA;EACE,qBAAqB;EACrB,WAAW;EACX,mBAAmB;AACrB",sourcesContent:["button.action {\n  display: inline-block;\n  cursor: pointer;\n  background-color: var(--hover-selection);\n  color: white;\n\n  font-size: 16px;\n  border: none;\n  border-radius: 5px;\n  padding: 0 5px;\n\n  height: 30px;\n  line-height: 30px;\n  vertical-align: middle;\n}\n\nbutton.secondary {\n  color: var(--fg);\n  background-color: transparent;\n}\n\nbutton.action[disabled] {\n  filter: saturate(20%);\n  opacity: .5;\n  cursor: not-allowed;\n}\n"],sourceRoot:""}]),a.locals={action:"pi2Ig8c3Fdh4H2Jpxdo7",secondary:"Ctpu4E2dZYJ6g8CUGFOF"},n.Z=a},56634:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,".jThiLc5_BrUyl71v3rKn {\n  display: inline-block;\n  position: absolute;\n  z-index: 5;\n  font-size: 70%;\n  background: var(--bg);\n  padding: 5px 10px;\n  margin-left: 10px;\n\n  border-radius: 4px;\n}\n\n.jThiLc5_BrUyl71v3rKn p {\n  display: inline-block;\n  cursor: pointer;\n  margin: 0;\n}\n\n.jThiLc5_BrUyl71v3rKn ul {\n  display: none;\n}\n.jThiLc5_BrUyl71v3rKn.xG2GKlsc07jLEb2aMC6H {\n  box-shadow: 2px 2px 5px 0px rgba(0, 0, 0, 0.5);\n}\n.jThiLc5_BrUyl71v3rKn.xG2GKlsc07jLEb2aMC6H ul {\n  display: block;\n  padding: 0;\n  margin: 0;\n  list-style-type: none;\n}\n\n.jThiLc5_BrUyl71v3rKn li {\n  cursor: pointer;\n  margin: 2px 0;\n  line-height: 20px;\n  padding: 0 5px;\n  border-radius: 10px;\n}\n\n.jThiLc5_BrUyl71v3rKn li:hover {\n  background-color: var(--hover-selection);\n  color: white;\n}\n","",{version:3,sources:["webpack://./src/Common/action-menu.module.css"],names:[],mappings:"AAAA;EACE,qBAAqB;EACrB,kBAAkB;EAClB,UAAU;EACV,cAAc;EACd,qBAAqB;EACrB,iBAAiB;EACjB,iBAAiB;;EAEjB,kBAAkB;AACpB;;AAEA;EACE,qBAAqB;EACrB,eAAe;EACf,SAAS;AACX;;AAEA;EACE,aAAa;AACf;AACA;EACE,8CAA8C;AAChD;AACA;EACE,cAAc;EACd,UAAU;EACV,SAAS;EACT,qBAAqB;AACvB;;AAEA;EACE,eAAe;EACf,aAAa;EACb,iBAAiB;EACjB,cAAc;EACd,mBAAmB;AACrB;;AAEA;EACE,wCAAwC;EACxC,YAAY;AACd",sourcesContent:[".menu {\n  display: inline-block;\n  position: absolute;\n  z-index: 5;\n  font-size: 70%;\n  background: var(--bg);\n  padding: 5px 10px;\n  margin-left: 10px;\n\n  border-radius: 4px;\n}\n\n.menu p {\n  display: inline-block;\n  cursor: pointer;\n  margin: 0;\n}\n\n.menu ul {\n  display: none;\n}\n.menu.open {\n  box-shadow: 2px 2px 5px 0px rgba(0, 0, 0, 0.5);\n}\n.menu.open ul {\n  display: block;\n  padding: 0;\n  margin: 0;\n  list-style-type: none;\n}\n\n.menu li {\n  cursor: pointer;\n  margin: 2px 0;\n  line-height: 20px;\n  padding: 0 5px;\n  border-radius: 10px;\n}\n\n.menu li:hover {\n  background-color: var(--hover-selection);\n  color: white;\n}\n"],sourceRoot:""}]),a.locals={menu:"jThiLc5_BrUyl71v3rKn",open:"xG2GKlsc07jLEb2aMC6H"},n.Z=a},49502:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,".ZpdcqlK42OntJos3eGw0 {\n  background-color: var(--bg);\n  padding: 20px 40px;\n  margin: 40px;\n  max-width: 500px;\n  box-shadow: 0px 10px 25px rgba(0, 0, 0, 0.4);\n  border-radius: 2px;\n}\n\n.ZpdcqlK42OntJos3eGw0 p, .ZpdcqlK42OntJos3eGw0 ul {\n  font-family: sans-serif;\n  line-height: 1.3rem;\n}\n\n.Mywg1Gw3bKMc9Kd9qcEO {\n  display: block;\n  margin: 0 auto;\n}\n","",{version:3,sources:["webpack://./src/Common/dialog-box.module.css"],names:[],mappings:"AAAA;EACE,2BAA2B;EAC3B,kBAAkB;EAClB,YAAY;EACZ,gBAAgB;EAChB,4CAA4C;EAC5C,kBAAkB;AACpB;;AAEA;EACE,uBAAuB;EACvB,mBAAmB;AACrB;;AAEA;EACE,cAAc;EACd,cAAc;AAChB",sourcesContent:[".dialog {\n  background-color: var(--bg);\n  padding: 20px 40px;\n  margin: 40px;\n  max-width: 500px;\n  box-shadow: 0px 10px 25px rgba(0, 0, 0, 0.4);\n  border-radius: 2px;\n}\n\n.dialog p, .dialog ul {\n  font-family: sans-serif;\n  line-height: 1.3rem;\n}\n\n.button {\n  display: block;\n  margin: 0 auto;\n}\n"],sourceRoot:""}]),a.locals={dialog:"ZpdcqlK42OntJos3eGw0",button:"Mywg1Gw3bKMc9Kd9qcEO"},n.Z=a},86015:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,".ho3CuFFjX1VFNZJiAyVs {\n  position: relative;\n}\n\n.u9J3v5ZrIbuVICzNBkRw {\n  padding: 5px;\n  cursor: pointer;\n  opacity: 0.5;\n  color: var(--key-color-base);\n}\n.u9J3v5ZrIbuVICzNBkRw:hover {\n  opacity: 1;\n}\n\n.wmqWaOx7XyKADh7Kv4RZ {\n  position: absolute;\n  z-index: 10;\n  bottom: 0;\n  left: 50%;\n  transform: translate(-50%, 100%);\n  max-width: 250px;\n  width: 100%;\n\n  border-radius: 4px;\n  padding: 3px 5px;\n\n  color: white;\n  background-color: var(--error-highlight);\n  font-size: 85%;\n  font-family: sans-serif;\n\n  opacity: 0.9;\n}\n.wmqWaOx7XyKADh7Kv4RZ::before {\n  position: absolute;\n  display: block;\n  content: ' ';\n  z-index: -1;\n\n  left: 50%;\n  width: 10px;\n  height: 10px;\n\n  background-color: var(--error-highlight);\n  transform: translate(-50%, -7px) rotate(45deg);\n}\n","",{version:3,sources:["webpack://./src/Common/editablefield.module.css"],names:[],mappings:"AAAA;EACE,kBAAkB;AACpB;;AAEA;EACE,YAAY;EACZ,eAAe;EACf,YAAY;EACZ,4BAA4B;AAC9B;AACA;EACE,UAAU;AACZ;;AAEA;EACE,kBAAkB;EAClB,WAAW;EACX,SAAS;EACT,SAAS;EACT,gCAAgC;EAChC,gBAAgB;EAChB,WAAW;;EAEX,kBAAkB;EAClB,gBAAgB;;EAEhB,YAAY;EACZ,wCAAwC;EACxC,cAAc;EACd,uBAAuB;;EAEvB,YAAY;AACd;AACA;EACE,kBAAkB;EAClB,cAAc;EACd,YAAY;EACZ,WAAW;;EAEX,SAAS;EACT,WAAW;EACX,YAAY;;EAEZ,wCAAwC;EACxC,8CAA8C;AAChD",sourcesContent:[".container {\n  position: relative;\n}\n\n.edit {\n  padding: 5px;\n  cursor: pointer;\n  opacity: 0.5;\n  color: var(--key-color-base);\n}\n.edit:hover {\n  opacity: 1;\n}\n\n.error {\n  position: absolute;\n  z-index: 10;\n  bottom: 0;\n  left: 50%;\n  transform: translate(-50%, 100%);\n  max-width: 250px;\n  width: 100%;\n\n  border-radius: 4px;\n  padding: 3px 5px;\n\n  color: white;\n  background-color: var(--error-highlight);\n  font-size: 85%;\n  font-family: sans-serif;\n\n  opacity: 0.9;\n}\n.error::before {\n  position: absolute;\n  display: block;\n  content: ' ';\n  z-index: -1;\n\n  left: 50%;\n  width: 10px;\n  height: 10px;\n\n  background-color: var(--error-highlight);\n  transform: translate(-50%, -7px) rotate(45deg);\n}\n"],sourceRoot:""}]),a.locals={container:"ho3CuFFjX1VFNZJiAyVs",edit:"u9J3v5ZrIbuVICzNBkRw",error:"wmqWaOx7XyKADh7Kv4RZ"},n.Z=a},33988:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,".OaJISbD1WCmb03at77EG {\n  position: relative;\n}\n\n.MUN9De8dUvbPGH9cEDoQ {\n  position: absolute;\n  z-index: 10;\n  bottom: 0;\n  left: 50%;\n  transform: translate(-50%, 100%);\n  max-width: 250px;\n  width: 100%;\n\n  border-radius: 4px;\n  padding: 3px 5px;\n\n  color: white;\n  background-color: var(--error-highlight);\n  font-size: 85%;\n  font-family: sans-serif;\n\n  opacity: 0.9;\n}\n.MUN9De8dUvbPGH9cEDoQ::before {\n  position: absolute;\n  display: block;\n  content: ' ';\n  z-index: -1;\n\n  left: 50%;\n  width: 10px;\n  height: 10px;\n\n  background-color: var(--error-highlight);\n  transform: translate(-50%, -7px) rotate(45deg);\n}\n","",{version:3,sources:["webpack://./src/Common/input.module.css"],names:[],mappings:"AAAA;EACE,kBAAkB;AACpB;;AAEA;EACE,kBAAkB;EAClB,WAAW;EACX,SAAS;EACT,SAAS;EACT,gCAAgC;EAChC,gBAAgB;EAChB,WAAW;;EAEX,kBAAkB;EAClB,gBAAgB;;EAEhB,YAAY;EACZ,wCAAwC;EACxC,cAAc;EACd,uBAAuB;;EAEvB,YAAY;AACd;AACA;EACE,kBAAkB;EAClB,cAAc;EACd,YAAY;EACZ,WAAW;;EAEX,SAAS;EACT,WAAW;EACX,YAAY;;EAEZ,wCAAwC;EACxC,8CAA8C;AAChD",sourcesContent:[".wrapper {\n  position: relative;\n}\n\n.error {\n  position: absolute;\n  z-index: 10;\n  bottom: 0;\n  left: 50%;\n  transform: translate(-50%, 100%);\n  max-width: 250px;\n  width: 100%;\n\n  border-radius: 4px;\n  padding: 3px 5px;\n\n  color: white;\n  background-color: var(--error-highlight);\n  font-size: 85%;\n  font-family: sans-serif;\n\n  opacity: 0.9;\n}\n.error::before {\n  position: absolute;\n  display: block;\n  content: ' ';\n  z-index: -1;\n\n  left: 50%;\n  width: 10px;\n  height: 10px;\n\n  background-color: var(--error-highlight);\n  transform: translate(-50%, -7px) rotate(45deg);\n}\n"],sourceRoot:""}]),a.locals={wrapper:"OaJISbD1WCmb03at77EG",error:"MUN9De8dUvbPGH9cEDoQ"},n.Z=a},87617:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,".J2R67AQeCK_aC1DKFCMJ {\n  margin: 4px;\n}","",{version:3,sources:["webpack://./src/Common/link.module.css"],names:[],mappings:"AAAA;EACE,WAAW;AACb",sourcesContent:[".icon {\n  margin: 4px;\n}"],sourceRoot:""}]),a.locals={icon:"J2R67AQeCK_aC1DKFCMJ"},n.Z=a},92127:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,".FMkASzwt_oMscZdObpDQ {\n  display: inline-block;\n  text-align: center;\n}\n.TNF6aRMBPANvZifB27ZK {\n  display: inline-block;\n  animation: GGCs7iiBiwDCnT80cyTh 1s linear infinite;\n}\n\n@keyframes GGCs7iiBiwDCnT80cyTh {\n  from { transform: rotate(0deg); }\n  to { transform: rotate(360deg); }\n}","",{version:3,sources:["webpack://./src/Common/spinner.module.css"],names:[],mappings:"AAAA;EACE,qBAAqB;EACrB,kBAAkB;AACpB;AACA;EACE,qBAAqB;EACrB,kDAAkC;AACpC;;AAEA;EACE,OAAO,uBAAuB,EAAE;EAChC,KAAK,yBAAyB,EAAE;AAClC",sourcesContent:[".spinner {\n  display: inline-block;\n  text-align: center;\n}\n.icon {\n  display: inline-block;\n  animation: spin 1s linear infinite;\n}\n\n@keyframes spin {\n  from { transform: rotate(0deg); }\n  to { transform: rotate(360deg); }\n}"],sourceRoot:""}]),a.locals={spinner:"FMkASzwt_oMscZdObpDQ",icon:"TNF6aRMBPANvZifB27ZK",spin:"GGCs7iiBiwDCnT80cyTh"},n.Z=a},528:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,".sq9i7hQeTeeKuarmO8oA {\n  display: inline-block;\n  font-size: 70%;\n  background: rgba(0, 0, 0, 0.5);\n  color: white;\n  padding: 4px;\n  border-radius: 4px;\n}\n","",{version:3,sources:["webpack://./src/Common/tip.module.css"],names:[],mappings:"AAAA;EACE,qBAAqB;EACrB,cAAc;EACd,8BAA8B;EAC9B,YAAY;EACZ,YAAY;EACZ,kBAAkB;AACpB",sourcesContent:[".tip {\n  display: inline-block;\n  font-size: 70%;\n  background: rgba(0, 0, 0, 0.5);\n  color: white;\n  padding: 4px;\n  border-radius: 4px;\n}\n"],sourceRoot:""}]),a.locals={tip:"sq9i7hQeTeeKuarmO8oA"},n.Z=a},14084:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,".Q5veln3l3laVkuNPs5dQ {\n  position: relative;\n}\n\n.Q5veln3l3laVkuNPs5dQ pre {\n  white-space: pre;\n  background-color: var(--code-bg);\n  color: var(--key-color-base);\n  padding: 10px;\n  max-height: 320px;\n  overflow: scroll;\n}\n\n.dqzgBwJ1Rq0XgMqeAKe7 {\n  position: absolute;\n  top: 15px;\n  right: 15px;\n  padding: 4px 7px;\n  color: var(--key-color-base);\n  background-color: var(--key-bg-base);\n  border: 1px solid var(--key-color-base);\n  border-radius: 3px;\n}\n.dqzgBwJ1Rq0XgMqeAKe7:hover {\n  cursor: pointer;\n  background-color: var(--selection);\n  border: var(--selection);\n  color: white;\n}\n\n.YV2lKA9hbJpP4Vs4udw8 {\n  position: absolute;\n  top: 5px;\n  right: 0px;\n  background-color: var(--selection);\n  color: white;\n  padding: 10px;\n  border-radius: 2px;\n  cursor: none;\n}\n","",{version:3,sources:["webpack://./src/Dialogs/unexpected-error.module.css"],names:[],mappings:"AAAA;EACE,kBAAkB;AACpB;;AAEA;EACE,gBAAgB;EAChB,gCAAgC;EAChC,4BAA4B;EAC5B,aAAa;EACb,iBAAiB;EACjB,gBAAgB;AAClB;;AAEA;EACE,kBAAkB;EAClB,SAAS;EACT,WAAW;EACX,gBAAgB;EAChB,4BAA4B;EAC5B,oCAAoC;EACpC,uCAAuC;EACvC,kBAAkB;AACpB;AACA;EACE,eAAe;EACf,kCAAkC;EAClC,wBAAwB;EACxB,YAAY;AACd;;AAEA;EACE,kBAAkB;EAClB,QAAQ;EACR,UAAU;EACV,kCAAkC;EAClC,YAAY;EACZ,aAAa;EACb,kBAAkB;EAClB,YAAY;AACd",sourcesContent:[".stackTrace {\n  position: relative;\n}\n\n.stackTrace pre {\n  white-space: pre;\n  background-color: var(--code-bg);\n  color: var(--key-color-base);\n  padding: 10px;\n  max-height: 320px;\n  overflow: scroll;\n}\n\n.button {\n  position: absolute;\n  top: 15px;\n  right: 15px;\n  padding: 4px 7px;\n  color: var(--key-color-base);\n  background-color: var(--key-bg-base);\n  border: 1px solid var(--key-color-base);\n  border-radius: 3px;\n}\n.button:hover {\n  cursor: pointer;\n  background-color: var(--selection);\n  border: var(--selection);\n  color: white;\n}\n\n.copyMessage {\n  position: absolute;\n  top: 5px;\n  right: 0px;\n  background-color: var(--selection);\n  color: white;\n  padding: 10px;\n  border-radius: 2px;\n  cursor: none;\n}\n"],sourceRoot:""}]),a.locals={stackTrace:"Q5veln3l3laVkuNPs5dQ",button:"dqzgBwJ1Rq0XgMqeAKe7",copyMessage:"YV2lKA9hbJpP4Vs4udw8"},n.Z=a},14409:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,".xCOOsvxL5qQ3kR8ri91A {\n  box-shadow: 0 4px 10px 0px rgba(0, 0, 0, 0.5);\n}\n\n.u4uW9U2E0DfbUM9vP9pf {\n  text-align: center;\n  padding: 0;\n  margin: 0;\n}\n\n.u4uW9U2E0DfbUM9vP9pf li {\n  display: inline-block;\n  font-family: monospace;\n  font-size: 120%;\n  margin: 4px 2px;\n  padding: 4px 4px;\n  border-radius: 2px;\n  cursor: pointer;\n\n  background-color: rgba(0, 0, 0, .5);\n  opacity: 0.5;\n  color: white;\n}\n\n.u4uW9U2E0DfbUM9vP9pf li.YcHSun3PLo8dCb9qIZtc {\n  opacity: 1;\n  background-color: var(--selection);\n  color: white;\n}\n\n.u4uW9U2E0DfbUM9vP9pf li:hover {\n  opacity: 1;\n  background-color: var(--hover-selection);\n}\n\n.d3hMEDpEkH8H7YLG_NjI {\n  width: 100%;\n  box-sizing: border-box;\n  text-align: center;\n}\n","",{version:3,sources:["webpack://./src/EnhancedPickers/Keycode/styles.module.css"],names:[],mappings:"AAAA;EACE,6CAA6C;AAC/C;;AAEA;EACE,kBAAkB;EAClB,UAAU;EACV,SAAS;AACX;;AAEA;EACE,qBAAqB;EACrB,sBAAsB;EACtB,eAAe;EACf,eAAe;EACf,gBAAgB;EAChB,kBAAkB;EAClB,eAAe;;EAEf,mCAAmC;EACnC,YAAY;EACZ,YAAY;AACd;;AAEA;EACE,UAAU;EACV,kCAAkC;EAClC,YAAY;AACd;;AAEA;EACE,UAAU;EACV,wCAAwC;AAC1C;;AAEA;EACE,WAAW;EACX,sBAAsB;EACtB,kBAAkB;AACpB",sourcesContent:[".previewKeycode {\n  box-shadow: 0 4px 10px 0px rgba(0, 0, 0, 0.5);\n}\n\n.modifiers {\n  text-align: center;\n  padding: 0;\n  margin: 0;\n}\n\n.modifiers li {\n  display: inline-block;\n  font-family: monospace;\n  font-size: 120%;\n  margin: 4px 2px;\n  padding: 4px 4px;\n  border-radius: 2px;\n  cursor: pointer;\n\n  background-color: rgba(0, 0, 0, .5);\n  opacity: 0.5;\n  color: white;\n}\n\n.modifiers li.selected {\n  opacity: 1;\n  background-color: var(--selection);\n  color: white;\n}\n\n.modifiers li:hover {\n  opacity: 1;\n  background-color: var(--hover-selection);\n}\n\n.quickCloseTip {\n  width: 100%;\n  box-sizing: border-box;\n  text-align: center;\n}\n"],sourceRoot:""}]),a.locals={previewKeycode:"xCOOsvxL5qQ3kR8ri91A",modifiers:"u4uW9U2E0DfbUM9vP9pf",selected:"YcHSun3PLo8dCb9qIZtc",quickCloseTip:"d3hMEDpEkH8H7YLG_NjI"},n.Z=a},27470:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,'.S3t60CK1JCROFIrRlm4j [readonly] {\n  cursor: not-allowed;\n  color: gray;\n  outline: gray;\n}\n\ninput.S3t60CK1JCROFIrRlm4j[type="text"],\ninput.S3t60CK1JCROFIrRlm4j[type="number"],\nselect.S3t60CK1JCROFIrRlm4j {\n  width: 100%;\n}\n\nol.MedG7SPG2ge2h7j2yqrJ {\n  list-style-type: none;\n  margin-top: 0;\n  padding: 0;\n}\n.V50Bekt6td9yQOSiDGdx {\n  list-style-type: none;\n  margin: 0;\n  padding: 0;\n}\n.V50Bekt6td9yQOSiDGdx li {\n  display: inline-block;\n  line-height: 2rem;\n}\nol.QNg3v6_eJoK7_qV0_y9n {\n  margin: 0;\n}\nol.QNg3v6_eJoK7_qV0_y9n li {\n  line-height: 2rem;\n}\nol.u65C3Uji7covMUn996dR {\n  list-style-type: none;\n  padding: 0;\n}\n.xp5u4Uo4X2fxxX9KwwXu {\n  cursor: pointer;\n  margin: 2px;\n  padding: 5px;\n  font-family: monospace;\n  border-radius: 1rem;\n  background-color: var(--key-bg-base);\n}\n.xp5u4Uo4X2fxxX9KwwXu:hover {\n  background-color: var(--hover-selection);\n  color: white;\n}\n\n.gpFGP00LCwlGjK6yrGWw {\n  vertical-align: text-bottom;\n  margin: 0 2px;\n}\n.gpFGP00LCwlGjK6yrGWw:hover {\n  color: black;\n}\n\n.gsAzkKxnfzTcp5ApwmWS {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n  list-style-type: none;\n  padding: 0;\n  margin: 0;\n}\n\n/* Copied from MacroEditor :( */\n.KrcWDYfRVRfvRhpsBFxs {\n  visibility: hidden;\n  position: absolute;\n  top: 0px;\n  right: 0px;\n  font-size: 80%;\n\n  color: var(--key-color-hover);\n}\n.KrcWDYfRVRfvRhpsBFxs > * {\n  margin: 2px;\n  opacity: 0.5;\n  cursor: pointer;\n}\n.gsAzkKxnfzTcp5ApwmWS li :hover .KrcWDYfRVRfvRhpsBFxs {\n  visibility: visible;\n  z-index: 10;\n}\n\n.KrcWDYfRVRfvRhpsBFxs :hover {\n  opacity: 1;\n}\n',"",{version:3,sources:["webpack://./src/Keyboard/Behaviors/PropertyValue/styles.module.css"],names:[],mappings:"AAAA;EACE,mBAAmB;EACnB,WAAW;EACX,aAAa;AACf;;AAEA;;;EAGE,WAAW;AACb;;AAEA;EACE,qBAAqB;EACrB,aAAa;EACb,UAAU;AACZ;AACA;EACE,qBAAqB;EACrB,SAAS;EACT,UAAU;AACZ;AACA;EACE,qBAAqB;EACrB,iBAAiB;AACnB;AACA;EACE,SAAS;AACX;AACA;EACE,iBAAiB;AACnB;AACA;EACE,qBAAqB;EACrB,UAAU;AACZ;AACA;EACE,eAAe;EACf,WAAW;EACX,YAAY;EACZ,sBAAsB;EACtB,mBAAmB;EACnB,oCAAoC;AACtC;AACA;EACE,wCAAwC;EACxC,YAAY;AACd;;AAEA;EACE,2BAA2B;EAC3B,aAAa;AACf;AACA;EACE,YAAY;AACd;;AAEA;EACE,aAAa;EACb,eAAe;EACf,SAAS;EACT,qBAAqB;EACrB,UAAU;EACV,SAAS;AACX;;AAEA,+BAA+B;AAC/B;EACE,kBAAkB;EAClB,kBAAkB;EAClB,QAAQ;EACR,UAAU;EACV,cAAc;;EAEd,6BAA6B;AAC/B;AACA;EACE,WAAW;EACX,YAAY;EACZ,eAAe;AACjB;AACA;EACE,mBAAmB;EACnB,WAAW;AACb;;AAEA;EACE,UAAU;AACZ",sourcesContent:['.propertyValue [readonly] {\n  cursor: not-allowed;\n  color: gray;\n  outline: gray;\n}\n\ninput.propertyValue[type="text"],\ninput.propertyValue[type="number"],\nselect.propertyValue {\n  width: 100%;\n}\n\nol.propertyMultiSelect {\n  list-style-type: none;\n  margin-top: 0;\n  padding: 0;\n}\n.propertyMultiSelectChips {\n  list-style-type: none;\n  margin: 0;\n  padding: 0;\n}\n.propertyMultiSelectChips li {\n  display: inline-block;\n  line-height: 2rem;\n}\nol.propertyPhandleSelect {\n  margin: 0;\n}\nol.propertyPhandleSelect li {\n  line-height: 2rem;\n}\nol.propertyPhandleSingleton {\n  list-style-type: none;\n  padding: 0;\n}\n.behaviorBind {\n  cursor: pointer;\n  margin: 2px;\n  padding: 5px;\n  font-family: monospace;\n  border-radius: 1rem;\n  background-color: var(--key-bg-base);\n}\n.behaviorBind:hover {\n  background-color: var(--hover-selection);\n  color: white;\n}\n\n.phandleRemove {\n  vertical-align: text-bottom;\n  margin: 0 2px;\n}\n.phandleRemove:hover {\n  color: black;\n}\n\n.propertyBindingsValue {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n  list-style-type: none;\n  padding: 0;\n  margin: 0;\n}\n\n/* Copied from MacroEditor :( */\n.actions {\n  visibility: hidden;\n  position: absolute;\n  top: 0px;\n  right: 0px;\n  font-size: 80%;\n\n  color: var(--key-color-hover);\n}\n.actions > * {\n  margin: 2px;\n  opacity: 0.5;\n  cursor: pointer;\n}\n.propertyBindingsValue li :hover .actions {\n  visibility: visible;\n  z-index: 10;\n}\n\n.actions :hover {\n  opacity: 1;\n}\n'],sourceRoot:""}]),a.locals={propertyValue:"S3t60CK1JCROFIrRlm4j",propertyMultiSelect:"MedG7SPG2ge2h7j2yqrJ",propertyMultiSelectChips:"V50Bekt6td9yQOSiDGdx",propertyPhandleSelect:"QNg3v6_eJoK7_qV0_y9n",propertyPhandleSingleton:"u65C3Uji7covMUn996dR",behaviorBind:"xp5u4Uo4X2fxxX9KwwXu",phandleRemove:"gpFGP00LCwlGjK6yrGWw",propertyBindingsValue:"gsAzkKxnfzTcp5ApwmWS",actions:"KrcWDYfRVRfvRhpsBFxs"},n.Z=a},34288:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,".kcj881bnLDph62EcKelj {\n  padding-bottom: 60px;\n}\n\n.GeuMxQtBvZYr0nOURDHd {\n  display: flex;\n  width: 190px;\n  flex-direction: column;\n  padding: 10px;\n  gap: 10px;\n  position: fixed;\n}\n\n.NqlHG1MKBiOUUFAed3CM {\n  max-width: 700px;\n  margin: 0 auto;\n  padding-bottom: 60px;\n}\n\n.NqlHG1MKBiOUUFAed3CM table {\n  border-spacing: 0;\n}\n.NqlHG1MKBiOUUFAed3CM table thead {\n  text-align: left;\n}\n\n.NqlHG1MKBiOUUFAed3CM table tbody tr td {\n  padding: 10px;\n  margin: 0;\n}\n.NqlHG1MKBiOUUFAed3CM table tbody tr:nth-child(even) {\n  background-color: var(--key-bg-base);\n}\n\n.Q3_rmo3XiEVg8qfXgKX_ {\n  cursor: pointer;\n  padding: 5px;\n  opacity: 0.6;\n}\n.Q3_rmo3XiEVg8qfXgKX_:hover {\n  opacity: 1;\n}\n\ntable.czOKx_t_EDF44pilzyzA { max-height: 80vh; }\ntable.czOKx_t_EDF44pilzyzA th { text-align: left }\ntable.czOKx_t_EDF44pilzyzA input { font-family: monospace }\ntable.czOKx_t_EDF44pilzyzA td {\n  padding: 4px;\n  vertical-align: top;\n}\ntable.czOKx_t_EDF44pilzyzA .s8rWNi6e8BZ7yQubfDws {\n  font-family: monospace;\n}\n.Bux6GxjreGZZkcXqx6kv {\n  display: block;\n  font-style: italic;\n}\n","",{version:3,sources:["webpack://./src/Keyboard/Behaviors/styles.module.css"],names:[],mappings:"AAAA;EACE,oBAAoB;AACtB;;AAEA;EACE,aAAa;EACb,YAAY;EACZ,sBAAsB;EACtB,aAAa;EACb,SAAS;EACT,eAAe;AACjB;;AAEA;EACE,gBAAgB;EAChB,cAAc;EACd,oBAAoB;AACtB;;AAEA;EACE,iBAAiB;AACnB;AACA;EACE,gBAAgB;AAClB;;AAEA;EACE,aAAa;EACb,SAAS;AACX;AACA;EACE,oCAAoC;AACtC;;AAEA;EACE,eAAe;EACf,YAAY;EACZ,YAAY;AACd;AACA;EACE,UAAU;AACZ;;AAEA,6BAAmB,gBAAgB,EAAE;AACrC,gCAAsB,iBAAiB;AACvC,mCAAyB,uBAAuB;AAChD;EACE,YAAY;EACZ,mBAAmB;AACrB;AACA;EACE,sBAAsB;AACxB;AACA;EACE,cAAc;EACd,kBAAkB;AACpB",sourcesContent:[".main {\n  padding-bottom: 60px;\n}\n\n.sidebar {\n  display: flex;\n  width: 190px;\n  flex-direction: column;\n  padding: 10px;\n  gap: 10px;\n  position: fixed;\n}\n\n.panel {\n  max-width: 700px;\n  margin: 0 auto;\n  padding-bottom: 60px;\n}\n\n.panel table {\n  border-spacing: 0;\n}\n.panel table thead {\n  text-align: left;\n}\n\n.panel table tbody tr td {\n  padding: 10px;\n  margin: 0;\n}\n.panel table tbody tr:nth-child(even) {\n  background-color: var(--key-bg-base);\n}\n\n.action {\n  cursor: pointer;\n  padding: 5px;\n  opacity: 0.6;\n}\n.action:hover {\n  opacity: 1;\n}\n\ntable.editorForm { max-height: 80vh; }\ntable.editorForm th { text-align: left }\ntable.editorForm input { font-family: monospace }\ntable.editorForm td {\n  padding: 4px;\n  vertical-align: top;\n}\ntable.editorForm .propertyName {\n  font-family: monospace;\n}\n.propertyDeprecation {\n  display: block;\n  font-style: italic;\n}\n"],sourceRoot:""}]),a.locals={main:"kcj881bnLDph62EcKelj",sidebar:"GeuMxQtBvZYr0nOURDHd",panel:"NqlHG1MKBiOUUFAed3CM",action:"Q3_rmo3XiEVg8qfXgKX_",editorForm:"czOKx_t_EDF44pilzyzA",propertyName:"s8rWNi6e8BZ7yQubfDws",propertyDeprecation:"Bux6GxjreGZZkcXqx6kv"},n.Z=a},78207:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,'.pwXbGORsYKqyOPBm9_dW {\n  padding-bottom: 60px;\n}\n\n.QgFDXNybKD_XN66M_WpJ {\n  display: flex;\n  width: 190px;\n  flex-direction: column;\n  padding: 10px;\n  gap: 10px;\n  position: fixed;\n}\n\n.Gy0KZGCgOeVminAfggFQ {\n  cursor: pointer;\n  background-color: var(--key-bg-base);\n}\n.Gy0KZGCgOeVminAfggFQ:hover {\n  border: 4px solid var(--selection);\n  box-sizing: border-box;\n}\n\n.Ld9cVdtpS_DpbEifyX9Y {\n  background-color: var(--selection);\n}\n.Ld9cVdtpS_DpbEifyX9Y:hover {\n  background-color: var(--hover-selection);\n}\n\n.mqpJ7uHAMKxvORoOIPFK {\n  max-width: 450px;\n  margin: 0 auto;\n  padding-bottom: 60px;\n}\n\n.BVucwy4AZCyl7GyivzMn {\n  display: flex;\n  justify-content: space-between;\n  border-bottom: 2px solid var(--key-bg-base);\n  margin: 5px 0;\n}\n\n.U6g0njWjBrtb_I3XhAeV {\n  cursor: pointer;\n  padding: 5px;\n  opacity: 0.6;\n}\n.U6g0njWjBrtb_I3XhAeV:hover {\n  opacity: 1;\n}\n\n.CROhsBLtunQ2BbfWdkQw {\n  margin: 10px 0 40px;\n}\n\n.CROhsBLtunQ2BbfWdkQw .MhA4fXXuaZ1iPvv05w4m {\n  display: flex;\n  justify-content: space-evenly;\n  align-items: center;\n}\n\n.CROhsBLtunQ2BbfWdkQw h5 {\n  margin: 0;\n}\n\n.vujYcgQjiN4BGp37FMUH {\n  color: var(--key-color-base);\n}\n\n.uh2yPWyfEOZtgXo2_KtU {\n  color: var(--delete);\n}\n\n.NAB1EN6_pcYIy5Db9XnC {\n  display: none !important;\n}\n.NAB1EN6_pcYIy5Db9XnC:hover {\n  color: white;\n  cursor: pointer;\n}\n.kYn8brsFgEaf61oQyv4d:hover .NAB1EN6_pcYIy5Db9XnC {\n  display: flex !important;\n  position: absolute;\n  right: -48px;\n  transform: scale(0.5);\n}\n\n.NGxnhfSJaJ9FNu3hlBfc.NAB1EN6_pcYIy5Db9XnC,\n.NGxnhfSJaJ9FNu3hlBfc.GXgG_IaQTricqThqzsKe > * {\n  background-color: sandybrown;\n  color: white;\n}\n.NGxnhfSJaJ9FNu3hlBfc.NAB1EN6_pcYIy5Db9XnC {\n  display: flex;\n}\n\n.fljdvcebOv1gbKZpf0vW {\n  margin: 10px 0;\n  display: flex;\n}\n\n.fljdvcebOv1gbKZpf0vW label {\n  display: inline-block;\n  width: 120px;\n  text-align: right;\n  margin-right: 10px;\n}\n\n.bnN6JCit0RcjdQiqzw8w {\n  list-style-type: none;\n  margin: 0;\n  padding: 0;\n}\n.bnN6JCit0RcjdQiqzw8w li {\n  cursor: pointer;\n  display: inline-block;\n  padding: 5px 10px;\n  margin: 5px;\n  border-radius: 30px;\n  background-color: var(--key-bg-base);\n}\n.bnN6JCit0RcjdQiqzw8w li[data-selected="true"] {\n  background-color: var(--selection);\n  color: var(--key-color-hover);\n}\n.bnN6JCit0RcjdQiqzw8w li:hover {\n  background-color: var(--hover-selection);\n  color: var(--key-color-hover);\n}\n\n.NpLEYrC32KQ4rUx9hUFJ {\n  background-color: var(--key-bg-base);\n  border-radius: 30px;\n  color: var(--key-color-base);\n  font-size: 80%;\n  text-align: center;\n  padding: 5px;\n  position: absolute;\n  bottom: -40px;\n  left: 50%;\n  transform: translate(-50%, 0);\n  width: 110%;\n\n  pointer-events: none;\n  transition: opacity ease-in-out .5s;\n}\n\n.l2gtE1XKS63R5TM5unip { position: relative }\n.l2gtE1XKS63R5TM5unip:hover .NpLEYrC32KQ4rUx9hUFJ { opacity: 0.25 }\n',"",{version:3,sources:["webpack://./src/Keyboard/Combos/styles.module.css"],names:[],mappings:"AAAA;EACE,oBAAoB;AACtB;;AAEA;EACE,aAAa;EACb,YAAY;EACZ,sBAAsB;EACtB,aAAa;EACb,SAAS;EACT,eAAe;AACjB;;AAEA;EACE,eAAe;EACf,oCAAoC;AACtC;AACA;EACE,kCAAkC;EAClC,sBAAsB;AACxB;;AAEA;EACE,kCAAkC;AACpC;AACA;EACE,wCAAwC;AAC1C;;AAEA;EACE,gBAAgB;EAChB,cAAc;EACd,oBAAoB;AACtB;;AAEA;EACE,aAAa;EACb,8BAA8B;EAC9B,2CAA2C;EAC3C,aAAa;AACf;;AAEA;EACE,eAAe;EACf,YAAY;EACZ,YAAY;AACd;AACA;EACE,UAAU;AACZ;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,6BAA6B;EAC7B,mBAAmB;AACrB;;AAEA;EACE,SAAS;AACX;;AAEA;EACE,4BAA4B;AAC9B;;AAEA;EACE,oBAAoB;AACtB;;AAEA;EACE,wBAAwB;AAC1B;AACA;EACE,YAAY;EACZ,eAAe;AACjB;AACA;EACE,wBAAwB;EACxB,kBAAkB;EAClB,YAAY;EACZ,qBAAqB;AACvB;;AAEA;;EAEE,4BAA4B;EAC5B,YAAY;AACd;AACA;EACE,aAAa;AACf;;AAEA;EACE,cAAc;EACd,aAAa;AACf;;AAEA;EACE,qBAAqB;EACrB,YAAY;EACZ,iBAAiB;EACjB,kBAAkB;AACpB;;AAEA;EACE,qBAAqB;EACrB,SAAS;EACT,UAAU;AACZ;AACA;EACE,eAAe;EACf,qBAAqB;EACrB,iBAAiB;EACjB,WAAW;EACX,mBAAmB;EACnB,oCAAoC;AACtC;AACA;EACE,kCAAkC;EAClC,6BAA6B;AAC/B;AACA;EACE,wCAAwC;EACxC,6BAA6B;AAC/B;;AAEA;EACE,oCAAoC;EACpC,mBAAmB;EACnB,4BAA4B;EAC5B,cAAc;EACd,kBAAkB;EAClB,YAAY;EACZ,kBAAkB;EAClB,aAAa;EACb,SAAS;EACT,6BAA6B;EAC7B,WAAW;;EAEX,oBAAoB;EACpB,mCAAmC;AACrC;;AAEA,wBAAiB,mBAAmB;AACpC,oDAAwC,cAAc",sourcesContent:['.main {\n  padding-bottom: 60px;\n}\n\n.sidebar {\n  display: flex;\n  width: 190px;\n  flex-direction: column;\n  padding: 10px;\n  gap: 10px;\n  position: fixed;\n}\n\n.selectable {\n  cursor: pointer;\n  background-color: var(--key-bg-base);\n}\n.selectable:hover {\n  border: 4px solid var(--selection);\n  box-sizing: border-box;\n}\n\n.highlight {\n  background-color: var(--selection);\n}\n.highlight:hover {\n  background-color: var(--hover-selection);\n}\n\n.comboPanel {\n  max-width: 450px;\n  margin: 0 auto;\n  padding-bottom: 60px;\n}\n\n.heading {\n  display: flex;\n  justify-content: space-between;\n  border-bottom: 2px solid var(--key-bg-base);\n  margin: 5px 0;\n}\n\n.action {\n  cursor: pointer;\n  padding: 5px;\n  opacity: 0.6;\n}\n.action:hover {\n  opacity: 1;\n}\n\n.combo {\n  margin: 10px 0 40px;\n}\n\n.combo .detail {\n  display: flex;\n  justify-content: space-evenly;\n  align-items: center;\n}\n\n.combo h5 {\n  margin: 0;\n}\n\n.edit {\n  color: var(--key-color-base);\n}\n\n.remove {\n  color: var(--delete);\n}\n\n.addComboInput {\n  display: none !important;\n}\n.addComboInput:hover {\n  color: white;\n  cursor: pointer;\n}\n.comboInputList:hover .addComboInput {\n  display: flex !important;\n  position: absolute;\n  right: -48px;\n  transform: scale(0.5);\n}\n\n.active.addComboInput,\n.active.comboInput > * {\n  background-color: sandybrown;\n  color: white;\n}\n.active.addComboInput {\n  display: flex;\n}\n\n.field {\n  margin: 10px 0;\n  display: flex;\n}\n\n.field label {\n  display: inline-block;\n  width: 120px;\n  text-align: right;\n  margin-right: 10px;\n}\n\n.layerList {\n  list-style-type: none;\n  margin: 0;\n  padding: 0;\n}\n.layerList li {\n  cursor: pointer;\n  display: inline-block;\n  padding: 5px 10px;\n  margin: 5px;\n  border-radius: 30px;\n  background-color: var(--key-bg-base);\n}\n.layerList li[data-selected="true"] {\n  background-color: var(--selection);\n  color: var(--key-color-hover);\n}\n.layerList li:hover {\n  background-color: var(--hover-selection);\n  color: var(--key-color-hover);\n}\n\n.floatingMessage {\n  background-color: var(--key-bg-base);\n  border-radius: 30px;\n  color: var(--key-color-base);\n  font-size: 80%;\n  text-align: center;\n  padding: 5px;\n  position: absolute;\n  bottom: -40px;\n  left: 50%;\n  transform: translate(-50%, 0);\n  width: 110%;\n\n  pointer-events: none;\n  transition: opacity ease-in-out .5s;\n}\n\n.comboInputMap { position: relative }\n.comboInputMap:hover .floatingMessage { opacity: 0.25 }\n'],sourceRoot:""}]),a.locals={main:"pwXbGORsYKqyOPBm9_dW",sidebar:"QgFDXNybKD_XN66M_WpJ",selectable:"Gy0KZGCgOeVminAfggFQ",highlight:"Ld9cVdtpS_DpbEifyX9Y",comboPanel:"mqpJ7uHAMKxvORoOIPFK",heading:"BVucwy4AZCyl7GyivzMn",action:"U6g0njWjBrtb_I3XhAeV",combo:"CROhsBLtunQ2BbfWdkQw",detail:"MhA4fXXuaZ1iPvv05w4m",edit:"vujYcgQjiN4BGp37FMUH",remove:"uh2yPWyfEOZtgXo2_KtU",addComboInput:"NAB1EN6_pcYIy5Db9XnC",comboInputList:"kYn8brsFgEaf61oQyv4d",active:"NGxnhfSJaJ9FNu3hlBfc",comboInput:"GXgG_IaQTricqThqzsKe",field:"fljdvcebOv1gbKZpf0vW",layerList:"bnN6JCit0RcjdQiqzw8w",floatingMessage:"NpLEYrC32KQ4rUx9hUFJ",comboInputMap:"l2gtE1XKS63R5TM5unip"},n.Z=a},56520:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,".eEWh1kMxq0qwtAjWodL_ {\n  width: 100%;\n  height: 100%;\n  margin: 0;\n  padding: 0;\n}\n\n.eEWh1kMxq0qwtAjWodL_.Me2iewShkkUWEmhCKAJV {\n  cursor: crosshair;\n}\n\n.wou_rpm0nvB8wxB153cE {\n  position: absolute;\n  background-color: rgba(150, 255, 150, 0.1);\n  border: 3px dotted rgba(150, 255, 150, 0.7);\n  pointer-events: none;\n  box-sizing: border-box;\n}\n\n.wou_rpm0nvB8wxB153cE.fM8xQCv4KykkW5ssxgEg {\n  background-color: rgba(120, 120, 120, 0.1);\n  border-color: rgba(120, 120, 120, 0.25);\n}\n","",{version:3,sources:["webpack://./src/Keyboard/Common/dragSelector.module.css"],names:[],mappings:"AAAA;EACE,WAAW;EACX,YAAY;EACZ,SAAS;EACT,UAAU;AACZ;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,kBAAkB;EAClB,0CAA0C;EAC1C,2CAA2C;EAC3C,oBAAoB;EACpB,sBAAsB;AACxB;;AAEA;EACE,0CAA0C;EAC1C,uCAAuC;AACzC",sourcesContent:[".container {\n  width: 100%;\n  height: 100%;\n  margin: 0;\n  padding: 0;\n}\n\n.container.selecting {\n  cursor: crosshair;\n}\n\n.overlay {\n  position: absolute;\n  background-color: rgba(150, 255, 150, 0.1);\n  border: 3px dotted rgba(150, 255, 150, 0.7);\n  pointer-events: none;\n  box-sizing: border-box;\n}\n\n.overlay.negate {\n  background-color: rgba(120, 120, 120, 0.1);\n  border-color: rgba(120, 120, 120, 0.25);\n}\n"],sourceRoot:""}]),a.locals={container:"eEWh1kMxq0qwtAjWodL_",selecting:"Me2iewShkkUWEmhCKAJV",overlay:"wou_rpm0nvB8wxB153cE",negate:"fM8xQCv4KykkW5ssxgEg"},n.Z=a},49040:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,".lD5TsvdIbEAHNdmhfnlb {\n  background-color: var(--key-bg-base);\n}\n.yk89E4zK9zlO69OXhKn5:hover {\n  cursor: pointer;\n  border: 4px solid var(--selection);\n  box-sizing: border-box;\n}\n\n.pzTvsxKjpy6MqcFhxh9j {\n  background-color: var(--selection);\n}\n.pzTvsxKjpy6MqcFhxh9j:hover {\n  background-color: var(--hover-selection);\n}\n\n.r_Sdklnj57CE2ZjnBDw6 {\n  background-color: var(--hover-selection);\n  filter: brightness(135%);\n}\n\n.Ich9T1nSzHs1a84insfp {\n  background-color: var(--hover-selection);\n  filter: brightness(75%);\n}\n\n._3U1zi1J1sXT41AzpAA1j {\n  position: absolute;\n  bottom: 0;\n  right: 50%;\n  transform: translate(50%, 100%);\n}\n","",{version:3,sources:["webpack://./src/Keyboard/Common/keyPositionSelectorStyles.module.css"],names:[],mappings:"AAAA;EACE,oCAAoC;AACtC;AACA;EACE,eAAe;EACf,kCAAkC;EAClC,sBAAsB;AACxB;;AAEA;EACE,kCAAkC;AACpC;AACA;EACE,wCAAwC;AAC1C;;AAEA;EACE,wCAAwC;EACxC,wBAAwB;AAC1B;;AAEA;EACE,wCAAwC;EACxC,uBAAuB;AACzB;;AAEA;EACE,kBAAkB;EAClB,SAAS;EACT,UAAU;EACV,+BAA+B;AACjC",sourcesContent:[".key {\n  background-color: var(--key-bg-base);\n}\n.selectable:hover {\n  cursor: pointer;\n  border: 4px solid var(--selection);\n  box-sizing: border-box;\n}\n\n.highlight {\n  background-color: var(--selection);\n}\n.highlight:hover {\n  background-color: var(--hover-selection);\n}\n\n.previewAdd {\n  background-color: var(--hover-selection);\n  filter: brightness(135%);\n}\n\n.previewRemove {\n  background-color: var(--hover-selection);\n  filter: brightness(75%);\n}\n\n.tip {\n  position: absolute;\n  bottom: 0;\n  right: 50%;\n  transform: translate(50%, 100%);\n}\n"],sourceRoot:""}]),a.locals={key:"lD5TsvdIbEAHNdmhfnlb",selectable:"yk89E4zK9zlO69OXhKn5",highlight:"pzTvsxKjpy6MqcFhxh9j",previewAdd:"r_Sdklnj57CE2ZjnBDw6",previewRemove:"Ich9T1nSzHs1a84insfp",tip:"_3U1zi1J1sXT41AzpAA1j"},n.Z=a},2:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,'.CoLZlKR1WcMrFd9XhDMC {\n\tposition: relative;\n\tdisplay: flex;\n\tjustify-content: center;\n\talign-items: center;\n\n\tfont-family: Quicksand, avenir, sans-serif;\n\n\t/* TODO: remove this once I have a wrapper with size defaults */\n\twidth: 65px;\n\theight: 65px;\n\n\tfont-size: 110%;\n\tborder-radius: 5px;\n}\n\n.CoLZlKR1WcMrFd9XhDMC.CT4uGhwl8sY0LwT3p39g:not(:hover) .UNzQquWsoIanOpIN0Q9L {\n\ttext-decoration: underline wavy var(--error-highlight);\n\ttext-underline-offset: 4px;\n\tcolor: var(--error-highlight);\n\tfont-weight: bold;\n}\n\n.Y5EVt8b0BaXNd9uLxhfh {\n\tposition: absolute;\n\tleft: 2px;\n\tbottom: 2px;\n\tfont-size: 80%;\n\n\tanimation: sYr3l9y03JxO_2AP73jr ease-in-out 1s alternate-reverse;\n}\n.Y5EVt8b0BaXNd9uLxhfh.CT4uGhwl8sY0LwT3p39g:hover {\n\tcolor: rgb(255, 225, 0);\n}\n\n@keyframes sYr3l9y03JxO_2AP73jr {\n\t0% { color: var(--key-color-base) }\n\t100% { color: var(--key-color-extreme) }\n}\n\n\n.CoLZlKR1WcMrFd9XhDMC.CT4uGhwl8sY0LwT3p39g:hover .DejZXCvvhJILPbs9Q8ht,\n.CoLZlKR1WcMrFd9XhDMC.CT4uGhwl8sY0LwT3p39g:hover .GliE4Ybwli9X6TNTjD1_ {\n\tborder-bottom-left-radius: 0;\n\tborder-bottom-right-radius: 0;\n\ttext-decoration: underline dotted white 2px;\n\ttext-underline-offset: 4px;\n}\n\n\n.huQDP3GbTLThbVIP8wFp {\n\tcolor: var(--key-color-base);\n\tbackground-color: var(--key-bg-base);\n}\n\n.PpMmKpJfEi37Ldw7AeBT {\n\tborder-radius: 100%;\n\tbackground-color: var(--key-bg-base);\n\tcolor: var(--key-color-base);\n}\n\n.k2EIh8YlFvp9sBuklSxx {\n\tposition: absolute;\n\ttop: 0;\n\tleft: 50%;\n\ttransform: translateX(-50%);\n\tfont-size: 50%;\n}\n\n.CT4uGhwl8sY0LwT3p39g:hover, .PpMmKpJfEi37Ldw7AeBT.CT4uGhwl8sY0LwT3p39g:hover {\n\tbackground-color: var(--hover-selection);\n\ttransition: 200ms;\n\tz-index: 1;\n}\n.CoLZlKR1WcMrFd9XhDMC.CT4uGhwl8sY0LwT3p39g:hover .DejZXCvvhJILPbs9Q8ht, .CoLZlKR1WcMrFd9XhDMC.CT4uGhwl8sY0LwT3p39g:hover .GliE4Ybwli9X6TNTjD1_ {\n\tcolor: var(--key-color-hover);\n}\n.CoLZlKR1WcMrFd9XhDMC > .DejZXCvvhJILPbs9Q8ht {\n\tpadding: 5px;\n}\n\n[data-simple="true"] { font-size: 140%; }\n[data-long="true"] { font-size: 60%; }\n\n.ApHDJFJGYUaGTgzMeIKZ:not([data-is-root="true"])::before { content: \'(\'; opacity: 0.4; font-weight: bold; margin: 2px; }\n.ApHDJFJGYUaGTgzMeIKZ:not([data-is-root="true"])::after { content: \')\'; opacity: 0.4; font-weight: bold; margin: 2px; }\n.ApHDJFJGYUaGTgzMeIKZ:not([data-is-root="true"]) .mLz637Atn0jZXey6Rx4v:not(:last-child)::after { content: \',\'; }\n\n.DejZXCvvhJILPbs9Q8ht {\n\tcursor: default;\n\tpadding: 0px 4px;\n\tmargin-left: -2px;\n\tmargin-right: -2px;\n}\n\n.CT4uGhwl8sY0LwT3p39g .DejZXCvvhJILPbs9Q8ht {\n\tcursor: pointer;\n\tdisplay: inline-block;\n\tbox-sizing: content-box;\n\tmin-width: 0.5em;\n\ttext-align: center;\n\tborder-radius: 4px;\n}\n.CT4uGhwl8sY0LwT3p39g .DejZXCvvhJILPbs9Q8ht:hover {\n\tbackground-color: white !important;\n\tcolor: var(--hover-selection) !important;\n\tborder-radius: 4px !important;\n}\n\n.DejZXCvvhJILPbs9Q8ht * {\n\tpointer-events: none;\n}\n\n.GliE4Ybwli9X6TNTjD1_ {\n  position: absolute;\n  top: 0;\n  left: 0;\n  font-size: 10px;\n  padding: 2px;\n  opacity: 0.65;\n}\n\n.GliE4Ybwli9X6TNTjD1_:hover {\n  cursor: pointer;\n  color: var(--hover-selection) !important;\n  background-color: var(--key-bg-hover);\n  border-radius: 5px 0;\n  opacity: 1;\n}\n',"",{version:3,sources:["webpack://./src/Keyboard/Keys/styles.module.css"],names:[],mappings:"AAAA;CACC,kBAAkB;CAClB,aAAa;CACb,uBAAuB;CACvB,mBAAmB;;CAEnB,0CAA0C;;CAE1C,+DAA+D;CAC/D,WAAW;CACX,YAAY;;CAEZ,eAAe;CACf,kBAAkB;AACnB;;AAEA;CACC,sDAAsD;CACtD,0BAA0B;CAC1B,6BAA6B;CAC7B,iBAAiB;AAClB;;AAEA;CACC,kBAAkB;CAClB,SAAS;CACT,WAAW;CACX,cAAc;;CAEd,gEAAiD;AAClD;AACA;CACC,uBAAuB;AACxB;;AAEA;CACC,KAAK,6BAA6B;CAClC,OAAO,gCAAgC;AACxC;;;AAGA;;CAEC,4BAA4B;CAC5B,6BAA6B;CAC7B,2CAA2C;CAC3C,0BAA0B;AAC3B;;;AAGA;CACC,4BAA4B;CAC5B,oCAAoC;AACrC;;AAEA;CACC,mBAAmB;CACnB,oCAAoC;CACpC,4BAA4B;AAC7B;;AAEA;CACC,kBAAkB;CAClB,MAAM;CACN,SAAS;CACT,2BAA2B;CAC3B,cAAc;AACf;;AAEA;CACC,wCAAwC;CACxC,iBAAiB;CACjB,UAAU;AACX;AACA;CACC,6BAA6B;AAC9B;AACA;CACC,YAAY;AACb;;AAEA,uBAAuB,eAAe,EAAE;AACxC,qBAAqB,cAAc,EAAE;;AAErC,2DAA6C,YAAY,EAAE,YAAY,EAAE,iBAAiB,EAAE,WAAW,EAAE;AACzG,0DAA4C,YAAY,EAAE,YAAY,EAAE,iBAAiB,EAAE,WAAW,EAAE;AACxG,iGAAoE,YAAY,EAAE;;AAElF;CACC,eAAe;CACf,gBAAgB;CAChB,iBAAiB;CACjB,kBAAkB;AACnB;;AAEA;CACC,eAAe;CACf,qBAAqB;CACrB,uBAAuB;CACvB,gBAAgB;CAChB,kBAAkB;CAClB,kBAAkB;AACnB;AACA;CACC,kCAAkC;CAClC,wCAAwC;CACxC,6BAA6B;AAC9B;;AAEA;CACC,oBAAoB;AACrB;;AAEA;EACE,kBAAkB;EAClB,MAAM;EACN,OAAO;EACP,eAAe;EACf,YAAY;EACZ,aAAa;AACf;;AAEA;EACE,eAAe;EACf,wCAAwC;EACxC,qCAAqC;EACrC,oBAAoB;EACpB,UAAU;AACZ",sourcesContent:['.key {\n\tposition: relative;\n\tdisplay: flex;\n\tjustify-content: center;\n\talign-items: center;\n\n\tfont-family: Quicksand, avenir, sans-serif;\n\n\t/* TODO: remove this once I have a wrapper with size defaults */\n\twidth: 65px;\n\theight: 65px;\n\n\tfont-size: 110%;\n\tborder-radius: 5px;\n}\n\n.key.selectable:not(:hover) .missingValue {\n\ttext-decoration: underline wavy var(--error-highlight);\n\ttext-underline-offset: 4px;\n\tcolor: var(--error-highlight);\n\tfont-weight: bold;\n}\n\n.missing {\n\tposition: absolute;\n\tleft: 2px;\n\tbottom: 2px;\n\tfont-size: 80%;\n\n\tanimation: pulse ease-in-out 1s alternate-reverse;\n}\n.missing.selectable:hover {\n\tcolor: rgb(255, 225, 0);\n}\n\n@keyframes pulse {\n\t0% { color: var(--key-color-base) }\n\t100% { color: var(--key-color-extreme) }\n}\n\n\n.key.selectable:hover .code,\n.key.selectable:hover .behaviour-binding {\n\tborder-bottom-left-radius: 0;\n\tborder-bottom-right-radius: 0;\n\ttext-decoration: underline dotted white 2px;\n\ttext-underline-offset: 4px;\n}\n\n\n.keyDefaultTheme {\n\tcolor: var(--key-color-base);\n\tbackground-color: var(--key-bg-base);\n}\n\n.encoder {\n\tborder-radius: 100%;\n\tbackground-color: var(--key-bg-base);\n\tcolor: var(--key-color-base);\n}\n\n.encoderDirection {\n\tposition: absolute;\n\ttop: 0;\n\tleft: 50%;\n\ttransform: translateX(-50%);\n\tfont-size: 50%;\n}\n\n.selectable:hover, .encoder.selectable:hover {\n\tbackground-color: var(--hover-selection);\n\ttransition: 200ms;\n\tz-index: 1;\n}\n.key.selectable:hover .code, .key.selectable:hover .behaviour-binding {\n\tcolor: var(--key-color-hover);\n}\n.key > .code {\n\tpadding: 5px;\n}\n\n[data-simple="true"] { font-size: 140%; }\n[data-long="true"] { font-size: 60%; }\n\n.params:not([data-is-root="true"])::before { content: \'(\'; opacity: 0.4; font-weight: bold; margin: 2px; }\n.params:not([data-is-root="true"])::after { content: \')\'; opacity: 0.4; font-weight: bold; margin: 2px; }\n.params:not([data-is-root="true"]) .param:not(:last-child)::after { content: \',\'; }\n\n.code {\n\tcursor: default;\n\tpadding: 0px 4px;\n\tmargin-left: -2px;\n\tmargin-right: -2px;\n}\n\n.selectable .code {\n\tcursor: pointer;\n\tdisplay: inline-block;\n\tbox-sizing: content-box;\n\tmin-width: 0.5em;\n\ttext-align: center;\n\tborder-radius: 4px;\n}\n.selectable .code:hover {\n\tbackground-color: white !important;\n\tcolor: var(--hover-selection) !important;\n\tborder-radius: 4px !important;\n}\n\n.code * {\n\tpointer-events: none;\n}\n\n.behaviour-binding {\n  position: absolute;\n  top: 0;\n  left: 0;\n  font-size: 10px;\n  padding: 2px;\n  opacity: 0.65;\n}\n\n.behaviour-binding:hover {\n  cursor: pointer;\n  color: var(--hover-selection) !important;\n  background-color: var(--key-bg-hover);\n  border-radius: 5px 0;\n  opacity: 1;\n}\n'],sourceRoot:""}]),a.locals={key:"CoLZlKR1WcMrFd9XhDMC",selectable:"CT4uGhwl8sY0LwT3p39g",missingValue:"UNzQquWsoIanOpIN0Q9L",missing:"Y5EVt8b0BaXNd9uLxhfh",pulse:"sYr3l9y03JxO_2AP73jr",code:"DejZXCvvhJILPbs9Q8ht","behaviour-binding":"GliE4Ybwli9X6TNTjD1_",keyDefaultTheme:"huQDP3GbTLThbVIP8wFp",encoder:"PpMmKpJfEi37Ldw7AeBT",encoderDirection:"k2EIh8YlFvp9sBuklSxx",params:"ApHDJFJGYUaGTgzMeIKZ",param:"mLz637Atn0jZXey6Rx4v"},n.Z=a},50335:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,'.m8ytsfY_MWY9AIiiT3KI {\n  position: absolute;\n  pointer-events: none;\n  z-index: 2;\n}\n.m8ytsfY_MWY9AIiiT3KI > * {\n  pointer-events: all;\n}\n\n.m8ytsfY_MWY9AIiiT3KI ul {\n  display: flex;\n  flex-direction: column;\n  list-style-type: none;\n  gap: 4px;\n  margin: 0;\n  padding: 0;\n}\n.m8ytsfY_MWY9AIiiT3KI li {\n  cursor: pointer;\n  position: relative;\n  background-color: rgba(201, 201, 201, 0.5);\n  color: darkgray;\n  border-radius: 15px;\n  height: 30px;\n  padding: 0px;\n  margin: 0 2px;\n  width: max-content;\n}\n.m8ytsfY_MWY9AIiiT3KI li:hover {\n  background-color: rgba(60, 179, 113, 0.85);\n  color: white;\n  padding-right: 35px;\n}\n.m8ytsfY_MWY9AIiiT3KI li.rzXVahzmmEOXmjXi8olg {\n  background-color: rgb(60, 179, 113);\n  color: white;\n}\n\n.m8ytsfY_MWY9AIiiT3KI li * {\n  display: inline-block;\n}\n.m8ytsfY_MWY9AIiiT3KI li .L_GJEqnFbay_ZzM0Yh7B {\n  overflow: auto;\n  width: 30px;\n  height: 30px;\n  line-height: 30px;\n  text-align: center;\n}\n.m8ytsfY_MWY9AIiiT3KI li .fkZZwegREyu_Wk9Pw6s7 {\n  overflow: hidden;\n  width: 0;\n  height: 30px;\n  line-height: 30px;\n  padding: 0;\n  font-variant: small-caps;\n}\n\n.m8ytsfY_MWY9AIiiT3KI ul li:hover .fkZZwegREyu_Wk9Pw6s7,\n.m8ytsfY_MWY9AIiiT3KI[data-renaming="true"] li.rzXVahzmmEOXmjXi8olg .fkZZwegREyu_Wk9Pw6s7 {\n  transition: .15s ease-in;\n  width: auto;\n  padding: 0 0 0 10px;\n}\n\n.m8ytsfY_MWY9AIiiT3KI button {\n  width: 30px;\n  height: 30px;\n  line-height: 30px;\n  padding: 0;\n  text-align: center;\n  border-radius: 15px;\n}\n\n.m8ytsfY_MWY9AIiiT3KI input.fkZZwegREyu_Wk9Pw6s7 {\n  vertical-align: top;\n  width: 100px;\n  border: none;\n  outline: none;\n  background: transparent;\n  color: white;\n}\n\n.m8ytsfY_MWY9AIiiT3KI .NbFgZxnyAF9EIjx8ncPM {\n  cursor: pointer;\n  position: absolute;\n  right: 10px;\n  visibility: hidden;\n\n  height: 30px;\n  line-height: 30px;\n}\n.m8ytsfY_MWY9AIiiT3KI li:hover .NbFgZxnyAF9EIjx8ncPM {\n  visibility: visible;\n}\n\n.m8ytsfY_MWY9AIiiT3KI li.rzXVahzmmEOXmjXi8olg .fkZZwegREyu_Wk9Pw6s7 {\n  cursor: text;\n}\n',"",{version:3,sources:["webpack://./src/Keyboard/Layers/layer-selector.module.css"],names:[],mappings:"AAAA;EACE,kBAAkB;EAClB,oBAAoB;EACpB,UAAU;AACZ;AACA;EACE,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,qBAAqB;EACrB,QAAQ;EACR,SAAS;EACT,UAAU;AACZ;AACA;EACE,eAAe;EACf,kBAAkB;EAClB,0CAA0C;EAC1C,eAAe;EACf,mBAAmB;EACnB,YAAY;EACZ,YAAY;EACZ,aAAa;EACb,kBAAkB;AACpB;AACA;EACE,0CAA0C;EAC1C,YAAY;EACZ,mBAAmB;AACrB;AACA;EACE,mCAAmC;EACnC,YAAY;AACd;;AAEA;EACE,qBAAqB;AACvB;AACA;EACE,cAAc;EACd,WAAW;EACX,YAAY;EACZ,iBAAiB;EACjB,kBAAkB;AACpB;AACA;EACE,gBAAgB;EAChB,QAAQ;EACR,YAAY;EACZ,iBAAiB;EACjB,UAAU;EACV,wBAAwB;AAC1B;;AAEA;;EAEE,wBAAwB;EACxB,WAAW;EACX,mBAAmB;AACrB;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,iBAAiB;EACjB,UAAU;EACV,kBAAkB;EAClB,mBAAmB;AACrB;;AAEA;EACE,mBAAmB;EACnB,YAAY;EACZ,YAAY;EACZ,aAAa;EACb,uBAAuB;EACvB,YAAY;AACd;;AAEA;EACE,eAAe;EACf,kBAAkB;EAClB,WAAW;EACX,kBAAkB;;EAElB,YAAY;EACZ,iBAAiB;AACnB;AACA;EACE,mBAAmB;AACrB;;AAEA;EACE,YAAY;AACd",sourcesContent:['.layerSelector {\n  position: absolute;\n  pointer-events: none;\n  z-index: 2;\n}\n.layerSelector > * {\n  pointer-events: all;\n}\n\n.layerSelector ul {\n  display: flex;\n  flex-direction: column;\n  list-style-type: none;\n  gap: 4px;\n  margin: 0;\n  padding: 0;\n}\n.layerSelector li {\n  cursor: pointer;\n  position: relative;\n  background-color: rgba(201, 201, 201, 0.5);\n  color: darkgray;\n  border-radius: 15px;\n  height: 30px;\n  padding: 0px;\n  margin: 0 2px;\n  width: max-content;\n}\n.layerSelector li:hover {\n  background-color: rgba(60, 179, 113, 0.85);\n  color: white;\n  padding-right: 35px;\n}\n.layerSelector li.active {\n  background-color: rgb(60, 179, 113);\n  color: white;\n}\n\n.layerSelector li * {\n  display: inline-block;\n}\n.layerSelector li .index {\n  overflow: auto;\n  width: 30px;\n  height: 30px;\n  line-height: 30px;\n  text-align: center;\n}\n.layerSelector li .name {\n  overflow: hidden;\n  width: 0;\n  height: 30px;\n  line-height: 30px;\n  padding: 0;\n  font-variant: small-caps;\n}\n\n.layerSelector ul li:hover .name,\n.layerSelector[data-renaming="true"] li.active .name {\n  transition: .15s ease-in;\n  width: auto;\n  padding: 0 0 0 10px;\n}\n\n.layerSelector button {\n  width: 30px;\n  height: 30px;\n  line-height: 30px;\n  padding: 0;\n  text-align: center;\n  border-radius: 15px;\n}\n\n.layerSelector input.name {\n  vertical-align: top;\n  width: 100px;\n  border: none;\n  outline: none;\n  background: transparent;\n  color: white;\n}\n\n.layerSelector .delete {\n  cursor: pointer;\n  position: absolute;\n  right: 10px;\n  visibility: hidden;\n\n  height: 30px;\n  line-height: 30px;\n}\n.layerSelector li:hover .delete {\n  visibility: visible;\n}\n\n.layerSelector li.active .name {\n  cursor: text;\n}\n'],sourceRoot:""}]),a.locals={layerSelector:"m8ytsfY_MWY9AIiiT3KI",active:"rzXVahzmmEOXmjXi8olg",index:"L_GJEqnFbay_ZzM0Yh7B",name:"fkZZwegREyu_Wk9Pw6s7",delete:"NbFgZxnyAF9EIjx8ncPM"},n.Z=a},59500:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,'.EwvVNY6vlf7HwYmXTbzi {\n  margin: 10px 0;\n  display: flex;\n}\n\n.EwvVNY6vlf7HwYmXTbzi label {\n  display: inline-block;\n  width: 120px;\n  text-align: right;\n  margin-right: 10px;\n}\n\n.uhiC_7TzN7eCNbm5C6a8[data-sensor-count="0"] {\n  display: none;\n}\n\n.raNkhxmGTqtKQI9X2gVA:not(.y7y6ypMwmSafQKgt7oBw) {\n  cursor: pointer;\n}\n.raNkhxmGTqtKQI9X2gVA > * {\n  pointer-events: none;\n}\n.raNkhxmGTqtKQI9X2gVA:hover, .y7y6ypMwmSafQKgt7oBw {\n  color: var(--key-color-hover);\n  background-color: var(--selection);\n}\n.raNkhxmGTqtKQI9X2gVA:hover {\n  background-color: var(--hover-selection);\n}\n\n.sahMSNIG_94Hn9tEEZ8q {\n  max-width: 80vw;\n  overflow-x: scroll;\n}',"",{version:3,sources:["webpack://./src/Keyboard/Layers/style.module.css"],names:[],mappings:"AAAA;EACE,cAAc;EACd,aAAa;AACf;;AAEA;EACE,qBAAqB;EACrB,YAAY;EACZ,iBAAiB;EACjB,kBAAkB;AACpB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,eAAe;AACjB;AACA;EACE,oBAAoB;AACtB;AACA;EACE,6BAA6B;EAC7B,kCAAkC;AACpC;AACA;EACE,wCAAwC;AAC1C;;AAEA;EACE,eAAe;EACf,kBAAkB;AACpB",sourcesContent:['.field {\n  margin: 10px 0;\n  display: flex;\n}\n\n.field label {\n  display: inline-block;\n  width: 120px;\n  text-align: right;\n  margin-right: 10px;\n}\n\n.sensors[data-sensor-count="0"] {\n  display: none;\n}\n\n.quickBindKey:not(.quickBindKeyHighlight) {\n  cursor: pointer;\n}\n.quickBindKey > * {\n  pointer-events: none;\n}\n.quickBindKey:hover, .quickBindKeyHighlight {\n  color: var(--key-color-hover);\n  background-color: var(--selection);\n}\n.quickBindKey:hover {\n  background-color: var(--hover-selection);\n}\n\n.quickAssignDialog {\n  max-width: 80vw;\n  overflow-x: scroll;\n}'],sourceRoot:""}]),a.locals={field:"EwvVNY6vlf7HwYmXTbzi",sensors:"uhiC_7TzN7eCNbm5C6a8",quickBindKey:"raNkhxmGTqtKQI9X2gVA",quickBindKeyHighlight:"y7y6ypMwmSafQKgt7oBw",quickAssignDialog:"sahMSNIG_94Hn9tEEZ8q"},n.Z=a},35839:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,'\n.O8SEfqE2Ewc3b7c7mY_N {\n  position:absolute;\n  top: -5px;\n  left: 0px;\n  width: 100%;\n  /* border: 1px solid red; */\n  /* padding: 5px; */\n  /* opacity: 0.5; */\n  display: flex;\n  flex-wrap: wrap;\n}\n\n.s9O56LWZBKHctVZ4a6fa {\n  position: relative;\n  width: 37.5px;\n  height: 65px;\n  margin: 0;\n}\n\n.s9O56LWZBKHctVZ4a6fa[data-is-control="true"] {\n  width: 450px;\n  height: 15px;\n}\n\n.NNwZmurJWlIfvb3BWlNX {\n  position: relative;\n  width: 450px;\n  height: 10px;\n}\n.NNwZmurJWlIfvb3BWlNX.wVYVfDVsCKFNjQcGKIVI::after {\n  content: \'\';\n  display: block;\n  position: absolute;\n  top: 50%;\n  transform: translate(0, -50%);\n  width: 450px;\n  height: 4px;\n  background-color: var(--selection);\n}\n.MDfy6RcGBlm8W_ChRhyP[data-extend="1"] { width: calc(37.5px + 1 * 75px); }\n.MDfy6RcGBlm8W_ChRhyP[data-extend="2"] { width: calc(37.5px + 2 * 75px); }\n.MDfy6RcGBlm8W_ChRhyP[data-extend="3"] { width: calc(37.5px + 3 * 75px); }\n.MDfy6RcGBlm8W_ChRhyP[data-extend="4"] { width: calc(37.5px + 4 * 75px); }\n.MDfy6RcGBlm8W_ChRhyP[data-extend="5"] { width: calc(37.5px + 5 * 75px); }\n\n/* .dropTargetHalf {\n  background-color: blue;\n  opacity: 0.25;\n}\n.dropTargetHalf.secondHalf {\n  background-color: red;\n}\n.dropTargetRow {\n  background-color: purple;\n  opacity: 0.25;\n} */\n\n.wVYVfDVsCKFNjQcGKIVI.s9O56LWZBKHctVZ4a6fa:not(.MDfy6RcGBlm8W_ChRhyP):not([data-is-control="true"])::before,\n.wVYVfDVsCKFNjQcGKIVI.MDfy6RcGBlm8W_ChRhyP:not([data-is-control="true"])::after {\n  content: \'\';\n  display: block;\n  height: 65px;\n  width: 4px;\n  border-radius: 4px;\n  background-color: var(--selection);\n}\n\n.AuFB9WiCynP_oONYhOvq .wVYVfDVsCKFNjQcGKIVI:not([data-drop-mode="row"])::before,\n.AuFB9WiCynP_oONYhOvq .wVYVfDVsCKFNjQcGKIVI:not([data-drop-mode="row"])::after {\n   visibility: hidden;\n }\n\n.s9O56LWZBKHctVZ4a6fa:not(.MDfy6RcGBlm8W_ChRhyP):not([data-is-control="true"])::before {\n  transform: translate(-50%, 0);\n}\n.MDfy6RcGBlm8W_ChRhyP:not([data-is-control="true"])::after {\n  position: absolute;\n  left: 32.5px;\n  transform: translate(50%, 0);\n}\n',"",{version:3,sources:["webpack://./src/Keyboard/Macros/drag-and-drop.module.css"],names:[],mappings:";AACA;EACE,iBAAiB;EACjB,SAAS;EACT,SAAS;EACT,WAAW;EACX,2BAA2B;EAC3B,kBAAkB;EAClB,kBAAkB;EAClB,aAAa;EACb,eAAe;AACjB;;AAEA;EACE,kBAAkB;EAClB,aAAa;EACb,YAAY;EACZ,SAAS;AACX;;AAEA;EACE,YAAY;EACZ,YAAY;AACd;;AAEA;EACE,kBAAkB;EAClB,YAAY;EACZ,YAAY;AACd;AACA;EACE,WAAW;EACX,cAAc;EACd,kBAAkB;EAClB,QAAQ;EACR,6BAA6B;EAC7B,YAAY;EACZ,WAAW;EACX,kCAAkC;AACpC;AACA,yCAA+B,8BAA8B,EAAE;AAC/D,yCAA+B,8BAA8B,EAAE;AAC/D,yCAA+B,8BAA8B,EAAE;AAC/D,yCAA+B,8BAA8B,EAAE;AAC/D,yCAA+B,8BAA8B,EAAE;;AAE/D;;;;;;;;;;GAUG;;AAEH;;EAEE,WAAW;EACX,cAAc;EACd,YAAY;EACZ,UAAU;EACV,kBAAkB;EAClB,kCAAkC;AACpC;;AAEA;;GAEG,kBAAkB;CACpB;;AAED;EACE,6BAA6B;AAC/B;AACA;EACE,kBAAkB;EAClB,YAAY;EACZ,4BAA4B;AAC9B",sourcesContent:['\n.dropTargets {\n  position:absolute;\n  top: -5px;\n  left: 0px;\n  width: 100%;\n  /* border: 1px solid red; */\n  /* padding: 5px; */\n  /* opacity: 0.5; */\n  display: flex;\n  flex-wrap: wrap;\n}\n\n.dropTargetHalf {\n  position: relative;\n  width: 37.5px;\n  height: 65px;\n  margin: 0;\n}\n\n.dropTargetHalf[data-is-control="true"] {\n  width: 450px;\n  height: 15px;\n}\n\n.dropTargetRow {\n  position: relative;\n  width: 450px;\n  height: 10px;\n}\n.dropTargetRow.droppable::after {\n  content: \'\';\n  display: block;\n  position: absolute;\n  top: 50%;\n  transform: translate(0, -50%);\n  width: 450px;\n  height: 4px;\n  background-color: var(--selection);\n}\n.secondHalf[data-extend="1"] { width: calc(37.5px + 1 * 75px); }\n.secondHalf[data-extend="2"] { width: calc(37.5px + 2 * 75px); }\n.secondHalf[data-extend="3"] { width: calc(37.5px + 3 * 75px); }\n.secondHalf[data-extend="4"] { width: calc(37.5px + 4 * 75px); }\n.secondHalf[data-extend="5"] { width: calc(37.5px + 5 * 75px); }\n\n/* .dropTargetHalf {\n  background-color: blue;\n  opacity: 0.25;\n}\n.dropTargetHalf.secondHalf {\n  background-color: red;\n}\n.dropTargetRow {\n  background-color: purple;\n  opacity: 0.25;\n} */\n\n.droppable.dropTargetHalf:not(.secondHalf):not([data-is-control="true"])::before,\n.droppable.secondHalf:not([data-is-control="true"])::after {\n  content: \'\';\n  display: block;\n  height: 65px;\n  width: 4px;\n  border-radius: 4px;\n  background-color: var(--selection);\n}\n\n.dropRowOnly .droppable:not([data-drop-mode="row"])::before,\n.dropRowOnly .droppable:not([data-drop-mode="row"])::after {\n   visibility: hidden;\n }\n\n.dropTargetHalf:not(.secondHalf):not([data-is-control="true"])::before {\n  transform: translate(-50%, 0);\n}\n.secondHalf:not([data-is-control="true"])::after {\n  position: absolute;\n  left: 32.5px;\n  transform: translate(50%, 0);\n}\n'],sourceRoot:""}]),a.locals={dropTargets:"O8SEfqE2Ewc3b7c7mY_N",dropTargetHalf:"s9O56LWZBKHctVZ4a6fa",dropTargetRow:"NNwZmurJWlIfvb3BWlNX",droppable:"wVYVfDVsCKFNjQcGKIVI",secondHalf:"MDfy6RcGBlm8W_ChRhyP",dropRowOnly:"AuFB9WiCynP_oONYhOvq"},n.Z=a},96201:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,".kc8Au327pmIjKO7auLXT {\n  padding-bottom: 60px;\n}\n\n.B8FpRtVdxbvJjwZoVNB4 {\n  display: flex;\n  position: fixed;\n  width: 180px;\n  flex-direction: column;\n  padding: 10px;\n  gap: 10px;\n}\n\n.Us3Ihf0AoVbZvDulP74Q {\n  width: 550px;\n  margin: 10px auto 40px;\n}\n.OVI4IkVsVzyk0eIAn9NX {\n  display: flex;\n  position: relative;\n  justify-content: space-between;\n  border-bottom: 2px solid var(--key-bg-base);\n  margin: 5px 0;\n}\n.OVI4IkVsVzyk0eIAn9NX h5 {\n  margin: 0;\n  cursor: pointer;\n}\n.QNlSO_GSGhRfUFRE_v8E {\n  cursor: pointer;\n  padding: 5px;\n  opacity: 0.6;\n}\n.QNlSO_GSGhRfUFRE_v8E:hover {\n  opacity: 1;\n}\n.DvzBwGDH7HsnnIbqaeHi {\n  color: var(--delete);\n}\n\n.mwhR_W7iqHq803xNBV1H {\n  text-align: center;\n}\n.mwhR_W7iqHq803xNBV1H > * {\n  margin: 5px;\n}\n\n.TBgT7nB7JSSjnTpMQeXp {\n  position: relative;\n  width: 450px;\n  /* border: 1px solid lightgray; */\n  margin: 0 auto;\n  padding: 5px;\n\n  display: flex;\n  flex-wrap: wrap;\n}\n\n.TBgT7nB7JSSjnTpMQeXp > * {\n  margin: 5px;\n  width: 65px;\n  height: 65px;\n}\n\n.YMJbsLvnEGObUy4Y_i6w {\n  width: 100%;\n  height: 30px;\n  box-sizing: border-box;\n}\n.YMJbsLvnEGObUy4Y_i6w:hover {\n  background-color: var(--hover-selection);\n  color: var(--key-color-hover);\n}\n.YMJbsLvnEGObUy4Y_i6w > :first-child {\n  width: 100% !important;\n  height: 100% !important;\n}\n\n.TBgT7nB7JSSjnTpMQeXp [draggable] {\n  cursor: grab;\n}\n\n.I5drc4dA5Kpshp3PPle1 {\n  visibility: hidden;\n  position: absolute;\n  top: 0px;\n  right: 0px;\n  font-size: 80%;\n\n  color: var(--key-color-hover);\n}\n.I5drc4dA5Kpshp3PPle1 > * {\n  margin: 2px;\n  opacity: 0.5;\n  cursor: pointer;\n}\n.TBgT7nB7JSSjnTpMQeXp :hover .I5drc4dA5Kpshp3PPle1 {\n  visibility: visible;\n  z-index: 10;\n}\n\n.I5drc4dA5Kpshp3PPle1 :hover {\n  opacity: 1;\n}\n\n\n.iD9DsKMZZ1dQxr04488w {\n  margin: 10px 0;\n  display: flex;\n}\n\n.iD9DsKMZZ1dQxr04488w label {\n  display: inline-block;\n  width: 120px;\n  text-align: right;\n  margin-right: 10px;\n}\n\n.quGO7XFPrHoYiqu22mwg {\n  font-size: 80%;\n}","",{version:3,sources:["webpack://./src/Keyboard/Macros/styles.module.css"],names:[],mappings:"AAAA;EACE,oBAAoB;AACtB;;AAEA;EACE,aAAa;EACb,eAAe;EACf,YAAY;EACZ,sBAAsB;EACtB,aAAa;EACb,SAAS;AACX;;AAEA;EACE,YAAY;EACZ,sBAAsB;AACxB;AACA;EACE,aAAa;EACb,kBAAkB;EAClB,8BAA8B;EAC9B,2CAA2C;EAC3C,aAAa;AACf;AACA;EACE,SAAS;EACT,eAAe;AACjB;AACA;EACE,eAAe;EACf,YAAY;EACZ,YAAY;AACd;AACA;EACE,UAAU;AACZ;AACA;EACE,oBAAoB;AACtB;;AAEA;EACE,kBAAkB;AACpB;AACA;EACE,WAAW;AACb;;AAEA;EACE,kBAAkB;EAClB,YAAY;EACZ,iCAAiC;EACjC,cAAc;EACd,YAAY;;EAEZ,aAAa;EACb,eAAe;AACjB;;AAEA;EACE,WAAW;EACX,WAAW;EACX,YAAY;AACd;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,sBAAsB;AACxB;AACA;EACE,wCAAwC;EACxC,6BAA6B;AAC/B;AACA;EACE,sBAAsB;EACtB,uBAAuB;AACzB;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,kBAAkB;EAClB,kBAAkB;EAClB,QAAQ;EACR,UAAU;EACV,cAAc;;EAEd,6BAA6B;AAC/B;AACA;EACE,WAAW;EACX,YAAY;EACZ,eAAe;AACjB;AACA;EACE,mBAAmB;EACnB,WAAW;AACb;;AAEA;EACE,UAAU;AACZ;;;AAGA;EACE,cAAc;EACd,aAAa;AACf;;AAEA;EACE,qBAAqB;EACrB,YAAY;EACZ,iBAAiB;EACjB,kBAAkB;AACpB;;AAEA;EACE,cAAc;AAChB",sourcesContent:[".main {\n  padding-bottom: 60px;\n}\n\n.sidebar {\n  display: flex;\n  position: fixed;\n  width: 180px;\n  flex-direction: column;\n  padding: 10px;\n  gap: 10px;\n}\n\n.macro {\n  width: 550px;\n  margin: 10px auto 40px;\n}\n.heading {\n  display: flex;\n  position: relative;\n  justify-content: space-between;\n  border-bottom: 2px solid var(--key-bg-base);\n  margin: 5px 0;\n}\n.heading h5 {\n  margin: 0;\n  cursor: pointer;\n}\n.action {\n  cursor: pointer;\n  padding: 5px;\n  opacity: 0.6;\n}\n.action:hover {\n  opacity: 1;\n}\n.remove {\n  color: var(--delete);\n}\n\n.macroActions {\n  text-align: center;\n}\n.macroActions > * {\n  margin: 5px;\n}\n\n.macroBindings {\n  position: relative;\n  width: 450px;\n  /* border: 1px solid lightgray; */\n  margin: 0 auto;\n  padding: 5px;\n\n  display: flex;\n  flex-wrap: wrap;\n}\n\n.macroBindings > * {\n  margin: 5px;\n  width: 65px;\n  height: 65px;\n}\n\n.controlBinding {\n  width: 100%;\n  height: 30px;\n  box-sizing: border-box;\n}\n.controlBinding:hover {\n  background-color: var(--hover-selection);\n  color: var(--key-color-hover);\n}\n.controlBinding > :first-child {\n  width: 100% !important;\n  height: 100% !important;\n}\n\n.macroBindings [draggable] {\n  cursor: grab;\n}\n\n.actions {\n  visibility: hidden;\n  position: absolute;\n  top: 0px;\n  right: 0px;\n  font-size: 80%;\n\n  color: var(--key-color-hover);\n}\n.actions > * {\n  margin: 2px;\n  opacity: 0.5;\n  cursor: pointer;\n}\n.macroBindings :hover .actions {\n  visibility: visible;\n  z-index: 10;\n}\n\n.actions :hover {\n  opacity: 1;\n}\n\n\n.field {\n  margin: 10px 0;\n  display: flex;\n}\n\n.field label {\n  display: inline-block;\n  width: 120px;\n  text-align: right;\n  margin-right: 10px;\n}\n\n.betaDisclaimer {\n  font-size: 80%;\n}"],sourceRoot:""}]),a.locals={main:"kc8Au327pmIjKO7auLXT",sidebar:"B8FpRtVdxbvJjwZoVNB4",macro:"Us3Ihf0AoVbZvDulP74Q",heading:"OVI4IkVsVzyk0eIAn9NX",action:"QNlSO_GSGhRfUFRE_v8E",remove:"DvzBwGDH7HsnnIbqaeHi",macroActions:"mwhR_W7iqHq803xNBV1H",macroBindings:"TBgT7nB7JSSjnTpMQeXp",controlBinding:"YMJbsLvnEGObUy4Y_i6w",actions:"I5drc4dA5Kpshp3PPle1",field:"iD9DsKMZZ1dQxr04488w",betaDisclaimer:"quGO7XFPrHoYiqu22mwg"},n.Z=a},79577:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,"._Et43RIDBS31WGTsJW6Q {\n  margin: 20px 0 35px;\n}\n._Et43RIDBS31WGTsJW6Q h3 {\n  cursor: pointer;\n}\n._Et43RIDBS31WGTsJW6Q h3:hover {\n  color: royalblue;\n}\n\n.UD9L8GtxRyZNCl6a5dsA {\n  color: var(--key-color-base);\n  opacity: 0.7;\n}\n\n.sah4Bu1xq72L7DDemOzU {\n  padding-left: 16px;\n}\n\n.pSk7y6zU9J8U_IybbhZB .rhqw3NH8NqvbeV0idmJz {\n  transform: rotate(-90deg);\n  transition: 100ms;\n}\n\n.pSk7y6zU9J8U_IybbhZB .sah4Bu1xq72L7DDemOzU {\n  display: none;\n}\n","",{version:3,sources:["webpack://./src/Keyboard/Warnings/styles.module.css"],names:[],mappings:"AAAA;EACE,mBAAmB;AACrB;AACA;EACE,eAAe;AACjB;AACA;EACE,gBAAgB;AAClB;;AAEA;EACE,4BAA4B;EAC5B,YAAY;AACd;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,yBAAyB;EACzB,iBAAiB;AACnB;;AAEA;EACE,aAAa;AACf",sourcesContent:[".warningCategory {\n  margin: 20px 0 35px;\n}\n.warningCategory h3 {\n  cursor: pointer;\n}\n.warningCategory h3:hover {\n  color: royalblue;\n}\n\n.emptyCategory {\n  color: var(--key-color-base);\n  opacity: 0.7;\n}\n\n.warningDetails {\n  padding-left: 16px;\n}\n\n.collapsedCategory .caret {\n  transform: rotate(-90deg);\n  transition: 100ms;\n}\n\n.collapsedCategory .warningDetails {\n  display: none;\n}\n"],sourceRoot:""}]),a.locals={warningCategory:"_Et43RIDBS31WGTsJW6Q",emptyCategory:"UD9L8GtxRyZNCl6a5dsA",warningDetails:"sah4Bu1xq72L7DDemOzU",collapsedCategory:"pSk7y6zU9J8U_IybbhZB",caret:"rhqw3NH8NqvbeV0idmJz"},n.Z=a},87995:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,".D0BH39_6wwiclW8aKuoi {\n  display: inline-flex;\n  list-style-type: none;\n  margin: 0;\n  padding: 0;\n}\n.D0BH39_6wwiclW8aKuoi li {\n  cursor: pointer;\n  padding: 5px;\n  margin: 5px;\n  border-radius: 4px;\n  font-variant: small-caps;\n}\n.D0BH39_6wwiclW8aKuoi li.xwo6V7AWCmy8CDvuTwRg {\n  background-color: var(--selection);\n  color: white;\n  cursor: default;\n}\n\n.nVbskEoaGxWf96qEgtxz {\n  position: absolute;\n}\n.nVbskEoaGxWf96qEgtxz > * {\n  width: 100% !important;\n  height: 100% !important;\n}\n\n.Ae2s0eqIVhebTEcJGc3F {\n  position: relative\n}\n.Ae2s0eqIVhebTEcJGc3F::after {\n  content: 'beta';\n  background-color: red;\n  color: white;\n  font-size: 12px;\n  font-weight: bold;\n  padding: 1px 3px;\n  border-radius: 6px;\n  position: absolute;\n  top: 0;\n  right: 0;\n  transform: translate(60%, -60%) rotate(13deg);\n}\n.xwo6V7AWCmy8CDvuTwRg .Ae2s0eqIVhebTEcJGc3F::after {\n  background-color: white;\n  color: var(--selection);\n  border: 1px solid var(--selection);\n}\n.sQQ0qFjHptJbQ8qvuXGa {\n  color: var(--error-highlight);\n}\n.D0BH39_6wwiclW8aKuoi li.xwo6V7AWCmy8CDvuTwRg.sQQ0qFjHptJbQ8qvuXGa {\n  background-color: var(--error-highlight);\n  color: white;\n}","",{version:3,sources:["webpack://./src/Keyboard/styles.module.css"],names:[],mappings:"AAAA;EACE,oBAAoB;EACpB,qBAAqB;EACrB,SAAS;EACT,UAAU;AACZ;AACA;EACE,eAAe;EACf,YAAY;EACZ,WAAW;EACX,kBAAkB;EAClB,wBAAwB;AAC1B;AACA;EACE,kCAAkC;EAClC,YAAY;EACZ,eAAe;AACjB;;AAEA;EACE,kBAAkB;AACpB;AACA;EACE,sBAAsB;EACtB,uBAAuB;AACzB;;AAEA;EACE;AACF;AACA;EACE,eAAe;EACf,qBAAqB;EACrB,YAAY;EACZ,eAAe;EACf,iBAAiB;EACjB,gBAAgB;EAChB,kBAAkB;EAClB,kBAAkB;EAClB,MAAM;EACN,QAAQ;EACR,6CAA6C;AAC/C;AACA;EACE,uBAAuB;EACvB,uBAAuB;EACvB,kCAAkC;AACpC;AACA;EACE,6BAA6B;AAC/B;AACA;EACE,wCAAwC;EACxC,YAAY;AACd",sourcesContent:[".editorModeTabs {\n  display: inline-flex;\n  list-style-type: none;\n  margin: 0;\n  padding: 0;\n}\n.editorModeTabs li {\n  cursor: pointer;\n  padding: 5px;\n  margin: 5px;\n  border-radius: 4px;\n  font-variant: small-caps;\n}\n.editorModeTabs li.activeEditTab {\n  background-color: var(--selection);\n  color: white;\n  cursor: default;\n}\n\n.placer {\n  position: absolute;\n}\n.placer > * {\n  width: 100% !important;\n  height: 100% !important;\n}\n\n.beta {\n  position: relative\n}\n.beta::after {\n  content: 'beta';\n  background-color: red;\n  color: white;\n  font-size: 12px;\n  font-weight: bold;\n  padding: 1px 3px;\n  border-radius: 6px;\n  position: absolute;\n  top: 0;\n  right: 0;\n  transform: translate(60%, -60%) rotate(13deg);\n}\n.activeEditTab .beta::after {\n  background-color: white;\n  color: var(--selection);\n  border: 1px solid var(--selection);\n}\n.warningTab {\n  color: var(--error-highlight);\n}\n.editorModeTabs li.activeEditTab.warningTab {\n  background-color: var(--error-highlight);\n  color: white;\n}"],sourceRoot:""}]),a.locals={editorModeTabs:"D0BH39_6wwiclW8aKuoi",activeEditTab:"xwo6V7AWCmy8CDvuTwRg",placer:"nVbskEoaGxWf96qEgtxz",beta:"Ae2s0eqIVhebTEcJGc3F",warningTab:"sQQ0qFjHptJbQ8qvuXGa"},n.Z=a},33971:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,".QkewNzGagIbndi3rJpKm {\n  border: none;\n  cursor: pointer;\n  color: white;\n  background: #248;\n  border-radius: 100%;\n  width: 24px;\n  height: 24px;\n  line-height: 24px;\n  text-align: center;\n}\n.QkewNzGagIbndi3rJpKm:hover {\n  background: #48F;\n}","",{version:3,sources:["webpack://./src/Sources/Demo/style.module.css"],names:[],mappings:"AAAA;EACE,YAAY;EACZ,eAAe;EACf,YAAY;EACZ,gBAAgB;EAChB,mBAAmB;EACnB,WAAW;EACX,YAAY;EACZ,iBAAiB;EACjB,kBAAkB;AACpB;AACA;EACE,gBAAgB;AAClB",sourcesContent:[".help {\n  border: none;\n  cursor: pointer;\n  color: white;\n  background: #248;\n  border-radius: 100%;\n  width: 24px;\n  height: 24px;\n  line-height: 24px;\n  text-align: center;\n}\n.help:hover {\n  background: #48F;\n}"],sourceRoot:""}]),a.locals={help:"QkewNzGagIbndi3rJpKm"},n.Z=a},80047:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,".z8z3GXuYqlepCz4tRPZj {\n  cursor: pointer;\n  display: flex;\n  box-sizing: border-box;\n  border: 1px solid hsl(0, 0%, 80%);\n  border-radius: 4px;\n  gap: 5px;\n  height: 38px;\n  padding: 0 8px;\n\n  /* color: hsl(0, 0%, 20%); */\n}\n\n.yyHfal9pM4DzShMl4LAY {\n  display: inline-flex;\n  height: 30px;\n  border-radius: 5px;\n  align-items: center;\n\n  font-size: 70%;\n  padding: 0 4px;\n\n  background-color: royalblue;\n  color: white;\n  text-decoration: none;\n}\n\n.ukdycT4tarWVlV3PC6Rr {\n  display: flex;\n  height: 38px;\n  gap: 4px;\n}\n\n.ukdycT4tarWVlV3PC6Rr button,\n.ukdycT4tarWVlV3PC6Rr .yyHfal9pM4DzShMl4LAY {\n  height: 38px;\n}\n\n.yyHfal9pM4DzShMl4LAY code {\n  font-family: monospace;\n}\n\n.QvI5wo7_u6OeAc12ib0W {\n  width: 30px;\n  height: 30px;\n  line-height: 30px;\n  font-size: 200%;\n  text-align: center;\n}\n\n.eUw5NZqoPPF3BcyYDpJx {\n  /* color: var(--selection); */\n}\n\n.XjY4lN_lY3nSgHcw67bX {\n  /* color: brown; */\n}\n\n.Ap_OwCtp3j1Q29Phpw3V {\n  color: gold;\n  animation: WjBuPfls4V41d2sjbNFU 1s linear alternate infinite;\n}\n\n@keyframes WjBuPfls4V41d2sjbNFU {\n  from { opacity: 0.5; }\n  to { opacity: 1; }\n}\n","",{version:3,sources:["webpack://./src/Sources/Github/styles.module.css"],names:[],mappings:"AAAA;EACE,eAAe;EACf,aAAa;EACb,sBAAsB;EACtB,iCAAiC;EACjC,kBAAkB;EAClB,QAAQ;EACR,YAAY;EACZ,cAAc;;EAEd,4BAA4B;AAC9B;;AAEA;EACE,oBAAoB;EACpB,YAAY;EACZ,kBAAkB;EAClB,mBAAmB;;EAEnB,cAAc;EACd,cAAc;;EAEd,2BAA2B;EAC3B,YAAY;EACZ,qBAAqB;AACvB;;AAEA;EACE,aAAa;EACb,YAAY;EACZ,QAAQ;AACV;;AAEA;;EAEE,YAAY;AACd;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,iBAAiB;EACjB,eAAe;EACf,kBAAkB;AACpB;;AAEA;EACE,6BAA6B;AAC/B;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,WAAW;EACX,4DAA6C;AAC/C;;AAEA;EACE,OAAO,YAAY,EAAE;EACrB,KAAK,UAAU,EAAE;AACnB",sourcesContent:[".compactWrapper {\n  cursor: pointer;\n  display: flex;\n  box-sizing: border-box;\n  border: 1px solid hsl(0, 0%, 80%);\n  border-radius: 4px;\n  gap: 5px;\n  height: 38px;\n  padding: 0 8px;\n\n  /* color: hsl(0, 0%, 20%); */\n}\n\n.buildDetails {\n  display: inline-flex;\n  height: 30px;\n  border-radius: 5px;\n  align-items: center;\n\n  font-size: 70%;\n  padding: 0 4px;\n\n  background-color: royalblue;\n  color: white;\n  text-decoration: none;\n}\n\n.pickerActions {\n  display: flex;\n  height: 38px;\n  gap: 4px;\n}\n\n.pickerActions button,\n.pickerActions .buildDetails {\n  height: 38px;\n}\n\n.buildDetails code {\n  font-family: monospace;\n}\n\n.buildStatus {\n  width: 30px;\n  height: 30px;\n  line-height: 30px;\n  font-size: 200%;\n  text-align: center;\n}\n\n.buildSuccess {\n  /* color: var(--selection); */\n}\n\n.buildFailed {\n  /* color: brown; */\n}\n\n.buildPending {\n  color: gold;\n  animation: pulse 1s linear alternate infinite;\n}\n\n@keyframes pulse {\n  from { opacity: 0.5; }\n  to { opacity: 1; }\n}\n"],sourceRoot:""}]),a.locals={compactWrapper:"z8z3GXuYqlepCz4tRPZj",buildDetails:"yyHfal9pM4DzShMl4LAY",pickerActions:"ukdycT4tarWVlV3PC6Rr",buildStatus:"QvI5wo7_u6OeAc12ib0W",buildSuccess:"eUw5NZqoPPF3BcyYDpJx",buildFailed:"XjY4lN_lY3nSgHcw67bX",buildPending:"Ap_OwCtp3j1Q29Phpw3V",pulse:"WjBuPfls4V41d2sjbNFU"},n.Z=a},47881:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,".sP2kDRoTZElZUTNHq033 {\n  width: 300px;\n\tpadding: 10px;\n\tborder-radius: 4px;\n\tbackground: radial-gradient(\n\t\trgba(var(--bg-rgb), 1) 20%,\n\t\trgba(var(--bg-rgb), .6) 100%\n\t);\n}\n.sP2kDRoTZElZUTNHq033 input {\n\tdisplay: block;\n\twidth: 100%;\n\theight: 30px;\n\tline-height: 30px;\n\n\tfont-size: 120%;\n\tmargin: 0;\n\tpadding: 4px;\n\tborder: none;\n\tborder-radius: 4px;\n  box-sizing: border-box;\n}\nul.inAS9Qunkf3g5K3xz6o6 {\n\tposition: relative;\n\tfont-family: monospace;\n\tlist-style-position: inside;\n\tlist-style-type: none;\n\tmax-height: 300px;\n\toverflow: scroll;\n\tpadding: 4px;\n  margin: 4px 0;\n\tbackground: rgba(0, 0, 0, 0.75);\n\tborder-radius: 4px;\n}\n.inAS9Qunkf3g5K3xz6o6 li {\n\tcursor: pointer;\n\tcolor: white;\n\tpadding: 5px;\n}\n.inAS9Qunkf3g5K3xz6o6 li:hover, .inAS9Qunkf3g5K3xz6o6 li.BL7Cxrn_efblQXY3W1Sw {\n\tbackground: white;\n\tcolor: black;\n}\n.inAS9Qunkf3g5K3xz6o6 li b { color: red; }\n.inAS9Qunkf3g5K3xz6o6 li .uld0XaeoQaQJJwp0LT0X {\n\tfont-style: italic;\n\tfont-size: 90%;\n\tmargin: 0;\n\tcolor: gray;\n}\n\n.pqiZQublKXvmnT_ESDxQ {\n  font-size: 10px;\n}\n\n.pqiZQublKXvmnT_ESDxQ a {\n  color: var(--selection);\n  border-bottom: 1px dotted var(--selection);\n  cursor: pointer;\n}\n\n.ECUs4g2j1rekP4xxgQDr {\n  position: relative;\n}\n.ECUs4g2j1rekP4xxgQDr input {\n  padding: 4px 4px 4px 30px;\n}\n\n.xDUAgQZeBp0TZSOqCwHm {\n  position: absolute;\n\ttop: 50%;\n\tleft: 10px;\n\ttransform: translateY(-50%);\n\tpointer-events: none;\n}\n.eY5zRl49sESLjXmizMEP {\n  position: absolute;\n\ttop: 50%;\n\tright: 10px;\n\ttransform: translateY(-50%);\n\tcursor: pointer;\n}","",{version:3,sources:["webpack://./src/ValuePicker/style.module.css"],names:[],mappings:"AAAA;EACE,YAAY;CACb,aAAa;CACb,kBAAkB;CAClB;;;EAGC;AACF;AACA;CACC,cAAc;CACd,WAAW;CACX,YAAY;CACZ,iBAAiB;;CAEjB,eAAe;CACf,SAAS;CACT,YAAY;CACZ,YAAY;CACZ,kBAAkB;EACjB,sBAAsB;AACxB;AACA;CACC,kBAAkB;CAClB,sBAAsB;CACtB,2BAA2B;CAC3B,qBAAqB;CACrB,iBAAiB;CACjB,gBAAgB;CAChB,YAAY;EACX,aAAa;CACd,+BAA+B;CAC/B,kBAAkB;AACnB;AACA;CACC,eAAe;CACf,YAAY;CACZ,YAAY;AACb;AACA;CACC,iBAAiB;CACjB,YAAY;AACb;AACA,6BAAgB,UAAU,EAAE;AAC5B;CACC,kBAAkB;CAClB,cAAc;CACd,SAAS;CACT,WAAW;AACZ;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,uBAAuB;EACvB,0CAA0C;EAC1C,eAAe;AACjB;;AAEA;EACE,kBAAkB;AACpB;AACA;EACE,yBAAyB;AAC3B;;AAEA;EACE,kBAAkB;CACnB,QAAQ;CACR,UAAU;CACV,2BAA2B;CAC3B,oBAAoB;AACrB;AACA;EACE,kBAAkB;CACnB,QAAQ;CACR,WAAW;CACX,2BAA2B;CAC3B,eAAe;AAChB",sourcesContent:[".dialog {\n  width: 300px;\n\tpadding: 10px;\n\tborder-radius: 4px;\n\tbackground: radial-gradient(\n\t\trgba(var(--bg-rgb), 1) 20%,\n\t\trgba(var(--bg-rgb), .6) 100%\n\t);\n}\n.dialog input {\n\tdisplay: block;\n\twidth: 100%;\n\theight: 30px;\n\tline-height: 30px;\n\n\tfont-size: 120%;\n\tmargin: 0;\n\tpadding: 4px;\n\tborder: none;\n\tborder-radius: 4px;\n  box-sizing: border-box;\n}\nul.results {\n\tposition: relative;\n\tfont-family: monospace;\n\tlist-style-position: inside;\n\tlist-style-type: none;\n\tmax-height: 300px;\n\toverflow: scroll;\n\tpadding: 4px;\n  margin: 4px 0;\n\tbackground: rgba(0, 0, 0, 0.75);\n\tborder-radius: 4px;\n}\n.results li {\n\tcursor: pointer;\n\tcolor: white;\n\tpadding: 5px;\n}\n.results li:hover, .results li.highlighted {\n\tbackground: white;\n\tcolor: black;\n}\n.results li b { color: red; }\n.results li .description {\n\tfont-style: italic;\n\tfont-size: 90%;\n\tmargin: 0;\n\tcolor: gray;\n}\n\n.choices-counter {\n  font-size: 10px;\n}\n\n.choices-counter a {\n  color: var(--selection);\n  border-bottom: 1px dotted var(--selection);\n  cursor: pointer;\n}\n\n.searchWrapper {\n  position: relative;\n}\n.searchWrapper input {\n  padding: 4px 4px 4px 30px;\n}\n\n.searchIcon {\n  position: absolute;\n\ttop: 50%;\n\tleft: 10px;\n\ttransform: translateY(-50%);\n\tpointer-events: none;\n}\n.clearSearchIcon {\n  position: absolute;\n\ttop: 50%;\n\tright: 10px;\n\ttransform: translateY(-50%);\n\tcursor: pointer;\n}"],sourceRoot:""}]),a.locals={dialog:"sP2kDRoTZElZUTNHq033",results:"inAS9Qunkf3g5K3xz6o6",highlighted:"BL7Cxrn_efblQXY3W1Sw",description:"uld0XaeoQaQJJwp0LT0X","choices-counter":"pqiZQublKXvmnT_ESDxQ",searchWrapper:"ECUs4g2j1rekP4xxgQDr",searchIcon:"xDUAgQZeBp0TZSOqCwHm",clearSearchIcon:"eY5zRl49sESLjXmizMEP"},n.Z=a},2746:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,"\n._vWNIXMkemQax9rkCJQh {\n  display: inline-block;\n  position: absolute;\n  z-index: 100;\n  bottom: 5px;\n  left: 5px;\n}\n\n._vWNIXMkemQax9rkCJQh label {\n  font-size: 75%;\n  font-style: italic;\n  display: block;\n  padding: 0 10px;\n}\n\n.qiC2NrujE4ebqmHjzq0_ {\n  display: inline-block;\n  font-size: 110%;\n  font-style: italic;\n  background-color: var(--code-bg);\n  border-radius: 20px;\n  padding: 5px 10px;\n  text-decoration: none;\n\n  color: royalblue;\n}\n.qiC2NrujE4ebqmHjzq0_:hover {\n  background-color: royalblue;\n  color: white;\n}","",{version:3,sources:["webpack://./src/styles.module.css"],names:[],mappings:";AACA;EACE,qBAAqB;EACrB,kBAAkB;EAClB,YAAY;EACZ,WAAW;EACX,SAAS;AACX;;AAEA;EACE,cAAc;EACd,kBAAkB;EAClB,cAAc;EACd,eAAe;AACjB;;AAEA;EACE,qBAAqB;EACrB,eAAe;EACf,kBAAkB;EAClB,gCAAgC;EAChC,mBAAmB;EACnB,iBAAiB;EACjB,qBAAqB;;EAErB,gBAAgB;AAClB;AACA;EACE,2BAA2B;EAC3B,YAAY;AACd",sourcesContent:["\n.wrapper {\n  display: inline-block;\n  position: absolute;\n  z-index: 100;\n  bottom: 5px;\n  left: 5px;\n}\n\n.wrapper label {\n  font-size: 75%;\n  font-style: italic;\n  display: block;\n  padding: 0 10px;\n}\n\n.githubLink {\n  display: inline-block;\n  font-size: 110%;\n  font-style: italic;\n  background-color: var(--code-bg);\n  border-radius: 20px;\n  padding: 5px 10px;\n  text-decoration: none;\n\n  color: royalblue;\n}\n.githubLink:hover {\n  background-color: royalblue;\n  color: white;\n}"],sourceRoot:""}]),a.locals={wrapper:"_vWNIXMkemQax9rkCJQh",githubLink:"qiC2NrujE4ebqmHjzq0_"},n.Z=a},46700:function(e,n,t){var r={"./af":42786,"./af.js":42786,"./ar":30867,"./ar-dz":14130,"./ar-dz.js":14130,"./ar-kw":96135,"./ar-kw.js":96135,"./ar-ly":56440,"./ar-ly.js":56440,"./ar-ma":47702,"./ar-ma.js":47702,"./ar-sa":16040,"./ar-sa.js":16040,"./ar-tn":37100,"./ar-tn.js":37100,"./ar.js":30867,"./az":31083,"./az.js":31083,"./be":9808,"./be.js":9808,"./bg":68338,"./bg.js":68338,"./bm":67438,"./bm.js":67438,"./bn":8905,"./bn-bd":76225,"./bn-bd.js":76225,"./bn.js":8905,"./bo":11560,"./bo.js":11560,"./br":1278,"./br.js":1278,"./bs":80622,"./bs.js":80622,"./ca":2468,"./ca.js":2468,"./cs":5822,"./cs.js":5822,"./cv":50877,"./cv.js":50877,"./cy":47373,"./cy.js":47373,"./da":24780,"./da.js":24780,"./de":59740,"./de-at":60217,"./de-at.js":60217,"./de-ch":60894,"./de-ch.js":60894,"./de.js":59740,"./dv":5300,"./dv.js":5300,"./el":50837,"./el.js":50837,"./en-au":78348,"./en-au.js":78348,"./en-ca":77925,"./en-ca.js":77925,"./en-gb":22243,"./en-gb.js":22243,"./en-ie":46436,"./en-ie.js":46436,"./en-il":47207,"./en-il.js":47207,"./en-in":44175,"./en-in.js":44175,"./en-nz":76319,"./en-nz.js":76319,"./en-sg":31662,"./en-sg.js":31662,"./eo":92915,"./eo.js":92915,"./es":55655,"./es-do":55251,"./es-do.js":55251,"./es-mx":96112,"./es-mx.js":96112,"./es-us":71146,"./es-us.js":71146,"./es.js":55655,"./et":5603,"./et.js":5603,"./eu":77763,"./eu.js":77763,"./fa":76959,"./fa.js":76959,"./fi":11897,"./fi.js":11897,"./fil":42549,"./fil.js":42549,"./fo":94694,"./fo.js":94694,"./fr":94470,"./fr-ca":63049,"./fr-ca.js":63049,"./fr-ch":52330,"./fr-ch.js":52330,"./fr.js":94470,"./fy":5044,"./fy.js":5044,"./ga":29295,"./ga.js":29295,"./gd":2101,"./gd.js":2101,"./gl":38794,"./gl.js":38794,"./gom-deva":27884,"./gom-deva.js":27884,"./gom-latn":23168,"./gom-latn.js":23168,"./gu":95349,"./gu.js":95349,"./he":24206,"./he.js":24206,"./hi":30094,"./hi.js":30094,"./hr":30316,"./hr.js":30316,"./hu":22138,"./hu.js":22138,"./hy-am":11423,"./hy-am.js":11423,"./id":29218,"./id.js":29218,"./is":90135,"./is.js":90135,"./it":90626,"./it-ch":10150,"./it-ch.js":10150,"./it.js":90626,"./ja":39183,"./ja.js":39183,"./jv":24286,"./jv.js":24286,"./ka":12105,"./ka.js":12105,"./kk":47772,"./kk.js":47772,"./km":18758,"./km.js":18758,"./kn":79282,"./kn.js":79282,"./ko":33730,"./ko.js":33730,"./ku":1408,"./ku.js":1408,"./ky":33291,"./ky.js":33291,"./lb":36841,"./lb.js":36841,"./lo":55466,"./lo.js":55466,"./lt":57010,"./lt.js":57010,"./lv":37595,"./lv.js":37595,"./me":39861,"./me.js":39861,"./mi":35493,"./mi.js":35493,"./mk":95966,"./mk.js":95966,"./ml":87341,"./ml.js":87341,"./mn":5115,"./mn.js":5115,"./mr":10370,"./mr.js":10370,"./ms":9847,"./ms-my":41237,"./ms-my.js":41237,"./ms.js":9847,"./mt":72126,"./mt.js":72126,"./my":56165,"./my.js":56165,"./nb":64924,"./nb.js":64924,"./ne":16744,"./ne.js":16744,"./nl":93901,"./nl-be":59814,"./nl-be.js":59814,"./nl.js":93901,"./nn":83877,"./nn.js":83877,"./oc-lnc":92135,"./oc-lnc.js":92135,"./pa-in":15858,"./pa-in.js":15858,"./pl":64495,"./pl.js":64495,"./pt":89520,"./pt-br":57971,"./pt-br.js":57971,"./pt.js":89520,"./ro":96459,"./ro.js":96459,"./ru":21793,"./ru.js":21793,"./sd":40950,"./sd.js":40950,"./se":10490,"./se.js":10490,"./si":90124,"./si.js":90124,"./sk":64249,"./sk.js":64249,"./sl":14985,"./sl.js":14985,"./sq":51104,"./sq.js":51104,"./sr":49131,"./sr-cyrl":79915,"./sr-cyrl.js":79915,"./sr.js":49131,"./ss":95606,"./ss.js":95606,"./sv":98760,"./sv.js":98760,"./sw":91172,"./sw.js":91172,"./ta":27333,"./ta.js":27333,"./te":23110,"./te.js":23110,"./tet":52095,"./tet.js":52095,"./tg":27321,"./tg.js":27321,"./th":9041,"./th.js":9041,"./tk":19005,"./tk.js":19005,"./tl-ph":75768,"./tl-ph.js":75768,"./tlh":89444,"./tlh.js":89444,"./tr":72397,"./tr.js":72397,"./tzl":28254,"./tzl.js":28254,"./tzm":51106,"./tzm-latn":30699,"./tzm-latn.js":30699,"./tzm.js":51106,"./ug-cn":9288,"./ug-cn.js":9288,"./uk":67691,"./uk.js":67691,"./ur":13795,"./ur.js":13795,"./uz":6791,"./uz-latn":60588,"./uz-latn.js":60588,"./uz.js":6791,"./vi":65666,"./vi.js":65666,"./x-pseudo":14378,"./x-pseudo.js":14378,"./yo":75805,"./yo.js":75805,"./zh-cn":83839,"./zh-cn.js":83839,"./zh-hk":55726,"./zh-hk.js":55726,"./zh-mo":99807,"./zh-mo.js":99807,"./zh-tw":74152,"./zh-tw.js":74152};function o(e){var n=i(e);return t(n)}function i(e){if(!t.o(r,e)){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}return r[e]}o.keys=function(){return Object.keys(r)},o.resolve=i,e.exports=o,o.id=46700}},function(e){e.O(0,[712,216],(function(){return 87652,e(e.s=87652)})),e.O()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5mZjk2MDNmNTA4OTdkZTQ3ZGU5NS5qcyIsIm1hcHBpbmdzIjoiO3NRQVdJQSxFQUFVLENBQUMsRUFFZkEsRUFBUUMsa0JBQW9CLElBQzVCRCxFQUFRRSxjQUFnQixJQUVsQkYsRUFBUUcsT0FBUyxTQUFjLEtBQU0sUUFFM0NILEVBQVFJLE9BQVMsSUFDakJKLEVBQVFLLG1CQUFxQixJQUVoQixJQUFJLElBQVNMLEdBS0osS0FBVyxZQUFpQixvQkFMbEQsZUNWSSxFQUFVLENBQUMsRUFFZixFQUFRQyxrQkFBb0IsSUFDNUIsRUFBUUMsY0FBZ0IsSUFFbEIsRUFBUUMsT0FBUyxTQUFjLEtBQU0sUUFFM0MsRUFBUUMsT0FBUyxJQUNqQixFQUFRQyxtQkFBcUIsSUFFaEIsSUFBSSxJQUFTLEdBS0osS0FBVyxZQUFpQixXQUxsRCxJQ25CYUMsR0FBZ0JDLEVBQUFBLEVBQUFBLGVBQWMsQ0FDekNDLGlCQUFrQixPQUdQQyxHQUFrQkYsRUFBQUEsRUFBQUEsZUFBYyxDQUMzQ0csU0FBVSxLQUNWQyxtQkFBb0IsKzZCQ050QixJQUFNQyxFQUFnQixDQUNwQkMsT0FBUSxNQUNSQyxRQUFTLEtBQ1RDLE1BQU8sTUFDUEMsTUFBTyxPQUdULFNBQVNDLEVBQU1DLEdBQ2IsSUFBUUMsRUFBOENELEVBQTlDQyxLQUFNQyxFQUF3Q0YsRUFBeENFLFVBQVdDLEVBQTZCSCxFQUE3QkcsV0FBZUMsb1hBQVMsQ0FBS0osRUFBSyxHQUNyREssRUFBYVgsRUFBY1MsR0FDM0JHLEVBQVksTUFBSCxPQUFTTCxHQUV4QixPQUNFLGlYQUNFQyxVQUFXLENBQUNBLEVBQVdHLEVBQVlDLEdBQVdDLEtBQUssTUFDL0NILEdBR1YsQ0FFQUwsRUFBS1MsVUFBWSxDQUNmUCxLQUFNUSxJQUFBQSxPQUFBQSxXQUNOUCxVQUFXTyxJQUFBQSxPQUNYTixXQUFZTSxJQUFBQSxRQUdkVixFQUFLVyxhQUFlLENBQ2xCUCxXQUFZLFVBQ1pELFVBQVcsSUFHYixrd0NDL0JlLFNBQVNTLEVBQVUsR0FBMEQsSUFBdERSLEVBQVUsRUFBVkEsV0FBWVMsRUFBSSxFQUFKQSxLQUFNQyxFQUFJLEVBQUpBLEtBQU1DLEVBQVEsRUFBUkEsU0FBVUMsRUFBTyxFQUFQQSxRQUFZQyxvWEFBSSxNQUN0RixPQUNFLHdCQUFRRCxRQUFTQSxHQUFhQyxHQUFJLGVBQ2hDLFNBQUMsRUFBSSxDQUFDYixXQUFZQSxFQUFZRixLQUFNVyxJQUFRLElBQUVDLEdBQVFDLEtBRzVELHdJQ1JBLFNBQVNHLEVBQWNDLEdBQ3JCLE9BQU9BLEdBQU8sQ0FBQyxJQUFLLEtBQU0sTUFBTyxRQUFRQyxTQUFTRCxFQUFJRSxXQUFXQyxjQUNuRSxDQUVPLElBQU1DLEdBQWFDLG9DQUdiQyxHQUFlUCxFQUFhTSxRQUM1QkUsR0FBY1IsRUFBYU0sU0FDM0JHLEdBQWFULEVBQWFNLCtQQ1J2Qywwdk5BS08sU0FBZUksS0FBcUIsZ0NBTTFDLHNDQU5NLHlHQUMrQyw2Q0FBNEIsT0FBdkMsT0FBdUMsU0FBeEVDLEVBQWUsRUFBZkEsZ0JBQWlCQyxFQUFnQixFQUFoQkEsaUJBQWdCLGtCQUNsQyxDQUNMQyxVQUFXRixFQUNYRyxTQUFVRixJQUNYLDRDQUNGLHNCQUtBLHNDQUhNLHVHQUNzQixvQ0FBMkIsT0FBdEMsT0FBc0MsU0FBOUNHLEVBQVEsRUFBUkEsU0FBUSxrQkFDVEEsR0FBUSw0Q0FDaEIsc0JBS0Esc0NBSE0sdUdBQzJCLG9DQUEyQixPQUF0QyxPQUFzQyxTQUFuREMsRUFBYSxFQUFiQSxjQUFhLGtCQUNkQSxHQUFhLDRDQUNyQixzQkFFTSxTQUFlQyxLQUFzQixnQ0FHM0Msc0NBSE0scUdBQ2tCQyxNQUFNLEdBQUQsT0FBSUMsR0FBaUIsd0JBQXNCLE9BQXpELE9BQVJDLEVBQVcsRUFBSCx1QkFDUEEsRUFBU0MsUUFBTSw0Q0FDdkIsc0JBRU0sU0FBZUMsR0FBaUIsbUNBV3RDLHNDQVhNLFdBQWtDQyxHQUFRLDhFQUVQLE9BRGxDQyxFQUFPLHNCQUFILE9BQXlCQyxtQkFBbUJGLElBQ2hERyxFQUFNLEdBQUgsT0FBTVAsR0FBaUIsWUFBSUssR0FBSSxTQUNqQk4sTUFBTVEsR0FBSSxPQUFuQixJQUFSTixFQUFXLEVBQUgsTUFFQU8sR0FBSSxDQUFGLGVBRVMsTUFEakJDLEVBQU0sSUFBSUMsT0FDWlQsU0FBV0EsRUFDVFEsRUFBRyxnQ0FFSlIsRUFBU0MsUUFBTSw2Q0FDdkIsc0JBRU0sU0FBZVMsR0FBWSxxQ0FXakMsc0NBWE0sV0FBNkJQLEVBQVVRLEdBQU0sNEVBRVYsT0FEbENQLEVBQU8sc0JBQUgsT0FBeUJDLG1CQUFtQkYsR0FBUyxXQUN6REcsRUFBTSxHQUFILE9BQU1QLEdBQWlCLFlBQUlLLEdBQUksU0FFakJOLE1BQU1RLEVBQUssQ0FDaENNLE9BQVEsTUFDUkMsUUFBUyxDQUFFLGVBQWdCLG9CQUMzQkMsS0FBTUMsS0FBS0MsVUFBVUwsS0FDckIsT0FKWSxPQUFSWCxFQUFXLEVBQUgsdUJBTVBBLEVBQVNDLFFBQU0sMkNBQ3ZCLHlpQ0N6Q0QsU0FBU2dCLEdBQWVDLEdBQ3RCLFNBQVdBLDJWQUNSQyxNQUFLLFNBQUNDLEVBQUdDLEdBQUMsT0FBS0QsRUFBRUUsT0FBU0QsRUFBRUMsTUFBTSxJQUFFLFFBQ3pDLENBRUEsSUFBTUMsR0FBWSxvQkFFbEIsU0FBU0MsR0FBc0I3QixHQUM3QixPQUFPQSxFQUFTOEIsUUFBTyxTQUFDOUIsRUFBVStCLEdBQ2hDLElBYzBCLEVBZGxCQyxFQUF5Q0QsRUFBekNDLFlBQWFDLEVBQTRCRixFQUE1QkUsUUFBU0MsRUFBbUJILEVBQW5CRyxPQUFRQyxFQUFXSixFQUFYSSxPQUNoQ1osRUFBVVEsRUFBUUssTUFBTUMsUUFBTyxTQUFBcEUsR0FBSSxPQUFLQSxFQUFLcUUsTUFBTVYsR0FBVSxJQUM3RDNELEVBQU9xRCxHQUFjQyxHQUNyQmdCLEVBQVNSLEVBQVFLLE1BQU1JLEtBQUksU0FBQXZFLEdBQUksT0FBSUEsRUFBS3FFLE1BQU1WLEdBQVUsSUFBRVMsUUFBTyxTQUFBSSxHQUFDLFFBQU1BLENBQUMsSUFBRSxHQUMzRUMsRUFBTyxDQUNYekUsS0FBQUEsRUFDQXNELFFBQUFBLEVBQ0FTLFlBQUFBLEVBQ0FDLFFBQUFBLEVBQ0FFLE9BQUFBLEVBQ0FELE9BQVFBLEdBQVVqRSxFQUNsQjBFLE9BQVEsSUFDVCxLQUVrQnBCLEdBQU8sSUFBMUIsSUFBSyxFQUFMLHFCQUE0QixLQUFqQnFCLEVBQUksUUFDYjVDLEVBQVM2QyxLQUFLQyxPQUFPQyxPQUFPLENBQUMsRUFBR0wsRUFBTSxDQUNwQ0UsS0FBQUEsRUFDQUksYUFBY1QsSUFFbEIsQ0FBQywrQkFTRCxPQVBJQSxHQUNGdkMsRUFBUzZDLEtBQUtDLE9BQU9DLE9BQU8sQ0FBQyxFQUFHTCxFQUFNLENBQ3BDRSxLQUFNTCxFQUFPLEdBQ2JJLE9BQVFKLEVBQU8sR0FBR1UsTUFBTSxRQUlyQmpELENBQ1QsR0FBRyxHQUNMLHdQQ2xEQSxrbkdBQUFrRCxHQUFBLHdCQUFBQSxFQUFBLHNCQUFBQSxHQUFBLGlCQUFBQSxHQUFBLHNzREFBQUEsRUFBQSx5QkFBQUEsR0FBQSxJQUFBQSxFQUFBLHVCQUFBQSxHQUFBLDRiQUFBQSxFQUFBLHlCQUFBQSxHQUFBLElBQUFBLEVBQUEsdUJBQUFBLEdBQUEseWhCQUFBQSxFQUFBLHlCQUFBQSxHQUFBLElBQUFBLEVBQUEsdUJBQUFBLEdBQUEscUdBQUFBLEVBQUEseUJBQUFBLEdBQUEsSUFBQUEsRUFBQSx1QkFBQUEsR0FBQSxtVUFBQUEsRUFBQSxpQkFBQUEsRUFBQSxFQUFBQSxJQUFBLEVBQUFBLEdBQUEsRUFBQUEsR0FBQSxtSUFTTyxJQUFNQyxJQUFxQjlGLEVBQUFBLEVBQUFBLGVBQWMsQ0FDOUMyQyxTQUFVLEdBQ1ZvRCxXQUFZLEdBQ1p0RCxVQUFXLENBQUMsRUFDWnVELGNBQWUsR0FDZkMsT0FBUSxLQUlKQyxHQUFvQixTQUFBQyxHQUFLLE9BQUlBLEVBQU1DLFdBQVcsRUFFN0MsU0FBU0MsR0FBMEIsR0FBZ0IsSUFBWjVFLEVBQVEsRUFBUkEsU0FDdEMyRSxHQUFjRSxFQUFBQSxFQUFBQSxJQUFZSixJQUMxQkssR0FBV0MsRUFBQUEsRUFBQUEsTUE2Q2pCLElBM0NBQyxFQUFBQSxFQUFBQSxZQUFVLFdBeEJaLFNBeUJJLFdBQUMsb0dBQ3FCLE9BQWhCTCxFQUFvQixpRUFJb0JNLFFBQVFDLElBQUksQ0ZqQnZELFdBQTJCLGdDQ1R6QkMsR0FBbUJDLEtBQUtyQyxJQzRCekJsQyxLRmRELFdBQWdDLGdDQ1Y5QnNFLEtDMEJELGdCQWxDUmYsRUFrQ1EsSUFsQ1IsNENBa0NRLElBbENSLFdBQUFBLEdBQUEsMEpBQUFBLEVBQUEsNkZBQUFBLEdBQUEsbUlBQUFBLElBQUEsaVNBQUFBLElBQUEsK0tBOEJhbEQsRUFBUSxLQUFFRixFQUFTLEtBQUV3RCxFQUFNLEtBUzVCYSxFQUFVQyxJQUFVdEUsRUFBVUEsV0FDOUJzRCxFQUFhZ0IsSUFBVXRFLEVBQVVDLFVBRXZDQyxFQUFTcUUsUUFBVUMsSUFBTXRFLEVBQVUsUUFDbkNvRCxFQUFXaUIsUUFBVUMsSUFBTWxCLEVBQVksUUFDdkNBLEVBQVduQixRQUFVLENBQ25Cc0MsS0FBTW5CLEVBQVdmLFFBQU8sWUFBVSxTQUFQSixPQUFzQixJQUNqRHVDLE9BQVFuQyxJQUFPZSxFQUFZLENBQUVuQixRQUFTLFlBRXhDbUIsRUFBV3FCLFVBQVksQ0FDckJGLEtBQU1ELElBQU1sQixFQUFXbkIsUUFBUXNDLEtBQU0sUUFDckNDLE9BQVFGLElBQU1sQixFQUFXbkIsUUFBUXVDLE9BQVEsU0FHM0NaLEVBQVMsQ0FDUGMsS0FBTSxrQkFDTmpCLFlBQWEsQ0FDWHpELFNBQUFBLEVBQ0FvRCxXQUFBQSxFQUNBdEQsVUFBV3FFLEVBQ1hkLGNBQWVELEVBQ2ZFLE9BQUFBLEtBRUYsa0NBOURSLE1BQUFKLENBOERRLFNBOURSLGtMQWdFRSxHQUFHLENBQUNPLEVBQWFHLElBR1pILEVBSUwsT0FDRSxTQUFDTixHQUFtQndCLFNBQVEsQ0FBQ0MsTUFBT25CLEVBQVksU0FDN0MzRSxHQUdQLDB3QkN3REEsT0ExSEEsU0FBZ0IsR0FBMEIsSUFBdEJBLEVBQVEsRUFBUkEsU0FDVmtDLG9YQUQ0QixPQUM1QkEsT0FDUixHQUF5QzZELEVBQUFBLEVBQUFBLFlBQVcxQixJQUE1Q25ELEVBQVEsRUFBUkEsU0FBVW9ELEVBQVUsRUFBVkEsV0FBWUUsRUFBTSxFQUFOQSxPQUN0QjlGLEdBQWFxSCxFQUFBQSxFQUFBQSxZQUFXdEgsR0FBeEJDLFNBRUZzSCxHQUFlQyxFQUFBQSxFQUFBQSxVQUFRLFdBQzNCLElBQU1DLEVBQVFDLE9BQU9DLFVBQVVDLFNBQVNDLFdBQVcsT0FDN0NDLEVBQVFKLE9BQU9DLFVBQVVDLFNBQVNDLFdBQVcsT0FDN0NELEVBQVlILEVBQVMsTUFBV0ssR0FBUyxNQUUvQyxPRmdDRyxTQUEwQi9CLEVBQVF4RyxHQUN2QyxPQUFPd0ksRUFBQUEsRUFBQUEsU0FBUSxDQUNiaEMsRUFBT2lDLE1BQ1B6SSxFQUFRMEksU0FBV2xDLEVBQU9rQyxRQUNMLFFBQXJCMUksRUFBUXFJLFVBQXNCN0IsRUFBT21DLFVBQVVDLElBQzFCLFFBQXJCNUksRUFBUXFJLFVBQXNCN0IsRUFBT21DLFVBQVVFLE1BQzlDN0QsUUFBTyxTQUFDd0IsRUFBUW5GLEdBQWUsSUFDQSxFQURBLEtBQ1ZBLEdBQVUsSUFBaEMsSUFBSyxFQUFMLHFCQUFrQyxLQUF2QnlILEVBQU8sUUFDVnJFLEVBQVVxRSxFQUFReEQsTUFBTUMsUUFBTyxTQUFBcEUsR0FBSSxPQUFLQSxFQUFLcUUsTUFBTVYsR0FBVSxJQUM3RDNELEVBQU9xRCxHQUFjQyxHQUV0QitCLEVBQU9yRixLQUNWcUYsRUFBT3JGLEdBQVEsQ0FBQyxHQUdsQnFGLEVBQU9yRixHQUFNaUUsT0FBU29CLEVBQU9yRixHQUFNaUUsUUFBVTBELEVBQVExRCxPQUNyRG9CLEVBQU9yRixHQUFNa0UsT0FBU21CLEVBQU9yRixHQUFNa0UsUUFBVXlELEVBQVF6RCxNQUN2RCxDQUFDLCtCQUNELE9BQU9tQixDQUNULEdBQUcsQ0FBQyxFQUNOLENFcERXdUMsQ0FBZ0J2QyxFQUFRLENBQzdCa0MsUUFBU00sSUFBSXRJLEVBQVUsaUJBQWlCLEdBQ3hDMkgsU0FBc0QsU0FBNUNXLElBQUl0SSxFQUFVLGlCQUFrQixRQUN0Q0EsRUFBU3VJLGVBQ1RaLEdBRVIsR0FBRyxDQUFDN0IsRUFBUTlGLElBRU53SSxHQUFxQmpCLEVBQUFBLEVBQUFBLFVBQVEsV0FDakMsSUFBTWtCLEVBQVcsR0FBSCxVQUNUN0MsR0FBVSxJQUNUcEMsRUFBT2xCLFdBQWEsSUFBSTBDLEtBQUksU0FBQTBELEdBQVEsTUFBSyxDQUMzQ3RELEtBQU0sSUFBRixPQUFNc0QsRUFBU0MsT0FBTyxJQUMxQkMsS0FBTSxJQUFGLE9BQU1GLEVBQVNDLE9BQU8sSUFDMUJsSSxLQUFNaUksRUFBU2pJLEtBQ2YrRCxZQUFhLHFCQUFGLE9BQXVCa0UsRUFBU0csV0FBV0MsTUFBTUMsS0FBT0wsRUFBU2pJLEtBQUksS0FDaEYwRSxPQUFRdUQsRUFBU3ZELE9BQ2xCLEtBQUUsR0FDQTNCLEVBQU93RCxPQUFPaEMsS0FBSSxTQUFBZ0UsR0FBSyxNQUFLLENBQzdCNUQsS0FBTSxJQUFGLE9BQU00RCxFQUFNTCxPQUFPLElBQ3ZCbEksS0FBTXVJLEVBQU12SSxLQUNaK0QsWUFBYSxlQUNiVyxPQUFRLEdBQ1QsTUFpQkgsT0FWQXNELEVBQVM1QixRQUFVQyxJQUFNMkIsRUFBVSxRQUNuQ0EsRUFBU2hFLFFBQVUsQ0FDakJzQyxLQUFNMEIsRUFBUzVELFFBQU8sWUFBVSxTQUFQSixPQUFzQixJQUMvQ3VDLE9BQVFuQyxJQUFPNEQsRUFBVSxDQUFFaEUsUUFBUyxZQUV0Q2dFLEVBQVN4QixVQUFZLENBQ25CRixLQUFNRCxJQUFNMkIsRUFBU2hFLFFBQVFzQyxLQUFNLFFBQ25DQyxPQUFRRixJQUFNMkIsRUFBU2hFLFFBQVF1QyxPQUFRLFNBR2xDeUIsQ0FDVCxHQUFHLENBQUM3QyxFQUFZcEMsRUFBT2xCLFVBQVdrQixFQUFPd0QsU0FFbkNpQyxHQUFrQjFCLEVBQUFBLEVBQUFBLFVBQVEsa0JBQU0yQixJQUFRMUYsR0FDMUMsR0FFRUEsRUFBTzJGLE9BQU9uRSxLQUFJLFNBQUNvRSxFQUFPMUQsR0FBQyxNQUFNLENBQy9CTixLQUFNTSxFQUNObEIsWUFBYTRFLEVBQU0zSSxNQUFRLFNBQUosT0FBYWlGLEdBQ3JDLEdBQ0YsR0FBRSxDQUFDbEMsSUFPRjZGLEdBQVU5QixFQUFBQSxFQUFBQSxVQUFRLGlCQUFPLENBQzdCbkMsS0FBTTVDLEVBQVNxRSxRQUNmakIsV0FBWTRDLEVBQW1CM0IsUUFDL0J5QyxvQkFBcUJkLEVBQW1CdkIsVUFDeENtQyxNQUFPdEMsSUFBTW1DLEVBQWlCLFFBQy9CLEdBQUcsQ0FBQ3pHLEVBQVVnRyxFQUFvQlMsSUFFN0JNLEdBQWdCaEMsRUFBQUEsRUFBQUEsVUFBUSxXQUM1QixNQUFPLENBQ0xpQyxVQUFXaEIsRUFDWHBELEtBQU01QyxFQUVWLEdBQUcsQ0FBQ2dHLEVBQW9CaEcsSUFFbEIxQyxHQUFtQnlILEVBQUFBLEVBQUFBLFVBQVEsa0JBQU0sU0FBVWtDLEVBQU9ELEdBQTZCLElBQWxCL0UsRUFBVSxVQUFILDZDQUFHLE9BSTNFLE9BQUlnRixFQUFNQyxLQUNERCxFQUFNQyxLQUFLMUUsS0FBSSxTQUFBQyxHQUFDLE1BQUssQ0FBRUcsS0FBTUgsRUFBRyxJQUdyQ3dFLEVBQU1WLElBQ0QsR0FHSyxZQUFWVSxFQUNLbkIsSUFBSWUsRUFBUUMsb0JBQXFCLENBQUM3RSxFQUFTK0UsRUFBVyxZQUFhLEtBR3ZFRCxFQUFjRSxJQUNqQkUsUUFBUUMsTUFBTSx5QkFBMEJILEdBRzVCLGNBQVZBLEVBQ0tGLEVBQWNDLFVBQVUvRSxRQUFRQSxHQUdsQzhFLEVBQWNFLEdBQ3ZCLENBQUMsR0FBRSxDQUFDRixFQUFlRixJQUViUSxHQUFjdEMsRUFBQUEsRUFBQUEsVUFBUSxXQUMxQixNQUFPLEdBQVAsVUFDS3ZDLElBQUl4QyxFQUFVLFNBQU8sR0FDckI4QyxPQUFPd0UsS0FBS3RHLEVBQU91RyxTQUFXLENBQUMsSUFFdEMsR0FBRyxDQUFDdkgsRUFBVWdCLEVBQU91RyxVQUVyQixPQUNFLFNBQUNuSyxFQUFjdUgsU0FBUSxDQUFDQyxNQUFPLENBQUV0SCxpQkFBQUEsRUFBa0J3SCxhQUFBQSxFQUFjK0IsUUFBQUEsRUFBU1EsWUFBQUEsR0FBYyxTQUNyRnZJLEdBR1AsY0N4SEksR0FBVSxDQUFDLEVBRWYsR0FBUS9CLGtCQUFvQixJQUM1QixHQUFRQyxjQUFnQixJQUVsQixHQUFRQyxPQUFTLFNBQWMsS0FBTSxRQUUzQyxHQUFRQyxPQUFTLElBQ2pCLEdBQVFDLG1CQUFxQixJQUVoQixJQUFJLEtBQVMsSUFBMUIsSUFLTyxHQUFlLE1BQVcsWUFBaUIsaUJBQWlCcUssNHZDQ3hCbkUsU0FBU0MsR0FBWSxHQUFnRCxJQUE1QzNJLEVBQVEsRUFBUkEsU0FBVTRJLEVBQVMsRUFBVEEsVUFBV3hKLEVBQVMsRUFBVEEsVUFBY0Ysb1hBQUssT0FDL0QsT0FDRSx5QkFDRUUsVUFBVyxDQUNUQSxFQUNBeUosR0FBQUEsT0FDQUQsR0FBYUMsR0FBQUEsV0FDYnBKLEtBQUssTUFDSFAsR0FBSyxhQUVSYyxJQUdQLENBRUEySSxHQUFhL0ksYUFBZSxDQUMxQlIsVUFBVyxJQUdiLDZDQ1ZJLEdBQVUsQ0FBQyxFQUVmLEdBQVFuQixrQkFBb0IsSUFDNUIsR0FBUUMsY0FBZ0IsSUFFbEIsR0FBUUMsT0FBUyxTQUFjLEtBQU0sUUFFM0MsR0FBUUMsT0FBUyxJQUNqQixHQUFRQyxtQkFBcUIsSUFFaEIsSUFBSSxLQUFTLElBQTFCLElBS08sR0FBZSxNQUFXLFlBQWlCLGlCQUFpQnFLLG0zQ0N4QnBELFNBQVNJLEdBQVc1SixHQUNqQyxRQUEyRUEsRUFBbkU2SixZQUFBQSxPQUFXLElBQUcsT0FBSSxJQUFpRDdKLEVBQS9DOEosUUFBQUEsT0FBTyxJQUFHLEtBQUUsRUFBRUMsRUFBaUMvSixFQUFqQytKLFVBQVdqSixFQUFzQmQsRUFBdEJjLFNBQWFFLG9YQUFJLENBQUtoQixFQUFLLElBRWhGLE9BQ0UsdUJBQUtFLFVBQVcsQ0FBQ3lKLEdBQUFBLFFBQWEsVUFBS0csd25CQUFTdkosS0FBSyxNQUFVUyxHQUFJLGNBQzVERixFQUNBK0ksSUFDQyxtQkFBUTNKLFVBQVd5SixHQUFBQSxPQUFlNUksUUFBU2dKLEVBQVUsU0FDbERGLE9BS1gsK3RDQ1hBLElBQU1GLEdBQVMsQ0FDYkssUUFBUyxDQUNQQyxTQUFVLFdBQ1ZDLElBQUssSUFDTEMsS0FBTSxJQUNOQyxNQUFPLFFBQ1BDLE9BQVEsUUFDUkMsZ0JBQWlCLDRCQUNqQkMsZUFBZ0IsWUFDaEJDLE9BQVEsS0FDUkMsUUFBUyxPQUNUQyxlQUFnQixTQUNoQkMsV0FBWSxVQUVkQyxXQUFZLENBQ1ZDLFdBQVksY0FDWkMsY0FBZSxRQUVqQkMsUUFBUyxDQUNQTixRQUFTLFFBQ1RLLGNBQWUsUUFJbkIsU0FBU0UsR0FBSyxHQUErQyxJQUEzQ2pCLEVBQVMsRUFBVEEsVUFBUyxJQUFFYSxXQUFBQSxPQUFVLElBQUcsR0FBSyxFQUFFOUosRUFBUSxFQUFSQSxTQUN6Q2lLLEdBQVVFLEVBQUFBLEVBQUFBLFVBQ1ZDLEdBQWNDLEVBQUFBLEVBQUFBLGNBQVksU0FBVUMsR0FDcENyQixHQUFhZ0IsRUFBUU0sU0FBV0QsRUFBRUUsT0FBT0MsU0FBU1IsRUFBUU0sVUFDNUR0QixHQUVKLEdBQUcsQ0FBQ2dCLEVBQVNoQixJQUVQeUIsRUFBUVosRUFBVSxTQUNmakIsR0FBT0ssU0FBWUwsR0FBT2lCLFlBQy9CakIsR0FBT0ssUUFFWCxPQUFPeUIsR0FBQUEsY0FDTCxnQkFBSzFLLFFBQVNtSyxFQUFhTSxNQUFPQSxFQUFNLFVBQ3RDLGdCQUFLRSxJQUFLWCxFQUFTUyxNQUFPN0IsR0FBT29CLFFBQVEsU0FDdENqSyxNQUdMNkssU0FBU0MsZUFBZSxjQUU1QixDQUVBWixHQUFNeEssVUFBWSxDQUNoQnVKLFVBQVd0SixJQUFBQSxNQUdiLHNCQzNDSSxHQUFVLENBQUMsRUFFZixHQUFRMUIsa0JBQW9CLElBQzVCLEdBQVFDLGNBQWdCLElBRWxCLEdBQVFDLE9BQVMsU0FBYyxLQUFNLFFBRTNDLEdBQVFDLE9BQVMsSUFDakIsR0FBUUMsbUJBQXFCLElBRWhCLElBQUksS0FBUyxJQUExQixJQUtPLEdBQWUsTUFBVyxZQUFpQixpQkFBaUJxSyx3dkNDeEJwRCxTQUFTcUMsR0FBSyxHQUF3RCxJQUFwREMsRUFBUyxFQUFUQSxVQUFTLElBQUVDLFNBQUFBLE9BQVEsSUFBRyxHQUFLLE1BQUVuRixNQUFBQSxPQUFLLElBQUcsS0FBRSxFQUFLNUYsb1hBQUksT0FDekVvSSxFQUFRMEMsRUFBVWxGLEtBQVlBLEdBQVNtRixHQUFZLGtCQUV6RCxPQUNFLGtCQUFNN0wsVUFBV3lKLEdBQUFBLFFBQWUsV0FDOUIscUJBQU9qRCxLQUFLLE9BQU9FLE1BQU9BLEdBQVc1RixJQUNwQ29JLElBQVMsaUJBQU1sSixVQUFXeUosR0FBQUEsTUFBYSxTQUFFUCxNQUdoRCxDQ1RPLElBQU00QyxHQUFpQixDQUM1QkMsT0FBUXhMLElBQUFBLEtBQ1I4SCxJQUFLOUgsSUFBQUEsT0FDTHlMLE9BQVF6TCxJQUFBQSxLQUdHMEwsR0FBc0IsQ0FDakNsTSxLQUFNUSxJQUFBQSxPQUFBQSxXQUNOMEgsT0FBUTFILElBQUFBLFFBQWtCQSxJQUFBQSxRQUFrQjJMLFdBQzVDL0QsV0FBWTVILElBQUFBLFVBQW1CLFNBQVU0TCxFQUFXQyxFQUFLQyxFQUFlQyxFQUFVQyxHQUNoRixJQUNFaE0sSUFBQUEsZUFBeUIsQ0FDdkI0TCxVQUFXNUwsSUFBQUEsTUFBZ0J1TCxJQUFnQkksWUFDMUMsQ0FBRUMsVUFBQUEsR0FBYUcsRUFBVUQsRUFNOUIsQ0FMRSxNQUFPMUosR0FDUCxPQUFPLElBQUlDLE1BQ1QsaUJBQW1CMkosRUFBbkIsa0JBQ09GLEVBQWdCLHdCQUUzQixDQUNGLElBQUdILFlDckJFLFNBQVNNLEdBQTRCOUYsR0FDMUMsT0FBSUEsRUFBTWpELE9BQVMsR0FDVixxQkFDRWlELEVBQU10QyxNQUFNLGNBQ2QsbUNBQ0VzQyxFQUFNdEMsTUFBTSxxQkFDZCx3Q0FERixDQUdULENBRU8sSUFBTXFJLEdBQStCRCxHQUVyQyxTQUFTRSxHQUF5QmhHLEdBQ3ZDLE9BQUlBLEVBQU1qRCxPQUFTLEdBQ1YscUJBQ0VpRCxFQUFNdEMsTUFBTSxjQUNkLG1DQUNFc0MsRUFBTXRDLE1BQU0saUJBQ2Qsb0NBREYsQ0FHVCwwdUVDVkEsU0FBU3VJLEdBQVlDLEdBQ25CLElBQVE3TSxFQUFTNk0sRUFBVDdNLEtBQ1IsRUFBcUM2TSxFQUE3QjNFLE9BQVM0RSxFQUFlLFFBQWxCLE1BQWdCLEdBQUUsS0FBTixHQUNYQyxFQUFjRixFQUFLekUsV0FBMUJDLE1BRVIsT0FDRXJJLEVBQUtvQixpQkFBbUIwTCxHQUFhLElBQUkxTCxlQUN6Q3BCLEVBQUtvQixrQkFBbUIyTCxhQUFTLEVBQVRBLEVBQVdkLFNBQVUsSUFBSTdLLGFBRXJELENBRWUsU0FBUzRMLEdBQWUsR0FBc0IsSUFBbEJILEVBQUksRUFBSkEsS0FBTUksRUFBUSxFQUFSQSxTQUVtQixNQUExQkMsRUFBQUEsRUFBQUEsVUFBU04sR0FBV0MsSUFBTSxHQUEzRE0sRUFBWSxLQUFFQyxFQUFlLEtBQ2dDLE1BQTFCRixFQUFBQSxFQUFBQSxVQUFTTixHQUFXQyxJQUFNLEdBQTdEUSxFQUFhLEtBQUVDLEVBQWdCLEtBQ3RDLEVBbUVGLFNBQWdDVCxFQUFNSSxFQUFVRSxFQUFjRSxHQUM1RCxJQUFNRSxHQUF1QnJDLEVBQUFBLEVBQUFBLGNBQVksU0FBQUMsR0FDdkM4QixFQUFTLFNBQUtKLEdBQUksSUFBRTdNLEtBQU1tTCxFQUFFRSxPQUFPMUUsUUFDckMsR0FBRyxDQUFDa0csRUFBTUksSUFFSk8sR0FBd0J0QyxFQUFBQSxFQUFBQSxjQUFZLFNBQUFDLEdBQ3hDLE1BQVF4RSxFQUFVd0UsRUFBRUUsT0FBWjFFLE1BQ0Z1QixFQUFTLENBQUN2QixHQUFLLHVEQUFLa0csRUFBSzNFLE9BQU91RixNQUFNLDRTQUN0Q3pOLEVBQU9tTixFQUFleEcsRUFBUWtHLEVBQUs3TSxLQUNuQ29JLEVBQWFpRixFQUFhLFNBRXZCUixFQUFLekUsWUFBVSxJQUNsQkMsTUFBTyxDQUNMNEQsT0FBUXRGLEVBQU0rRyxjQUNkcEYsSUFBSyxJQUFGLE9BQU0zQixFQUFNK0csY0FBYSxLQUM1QjFCLFFBQVEsS0FHWmEsRUFBS3pFLFdBRVQ2RSxFQUFTLFNBQUtKLEdBQUksSUFBRTdNLEtBQUFBLEVBQU1rSSxPQUFBQSxFQUFRRSxXQUFBQSxJQUNwQyxHQUFHLENBQUN5RSxFQUFNSSxFQUFVRSxFQUFjRSxJQWNsQyxNQUFPLENBQ0xFLEVBQ0FDLEdBZGdDdEMsRUFBQUEsRUFBQUEsY0FBWSxTQUFBQyxHQUFDLE9BQUk4QixFQUFTLFNBQ3ZESixHQUFJLElBQ1B6RSxXQUFZLFNBQ1B5RSxFQUFLekUsWUFBVSxJQUNsQkMsTUFBTyxTQUNGd0UsRUFBS3pFLFdBQVdDLE9BQUssSUFDeEI0RCxPQUFRZCxFQUFFRSxPQUFPMUUsTUFDakJxRixRQUFRLFFBR1osR0FBRSxDQUFDYSxFQUFNSSxJQU9iLENBdkdNVSxDQUFzQmQsRUFBTUksRUFBVUUsRUFBY0UsR0FBYyxVQUhwRUUsRUFBb0IsS0FDcEJDLEVBQXFCLEtBQ3JCSSxFQUF5QixLQUczQixPQUNFLDRCQUNFLDhCQUNFLDJCQUNFLHdCQUFJLFVBQ0oseUJBQ0UsU0FBQ2hDLEdBQUssQ0FDSm5GLEtBQUssT0FDTEUsTUFBT2tHLEVBQUszRSxPQUFPLElBQU0sR0FDekI0RCxVQUFVLEVBQ1ZELFVBQVdjLEdBQ1hrQixTQUFVTCxVQUloQiwyQkFDRSx3QkFBSSxVQUNKLDJCQUNFLFNBQUM1QixHQUFLLENBQ0pqRixNQUFPa0csRUFBSzdNLEtBQ1o4TCxVQUFVLEVBQ1ZnQyxTQUFVWCxFQUNWWSxTQUFVWixFQUNWdEIsVUFBV1ksR0FDWG9CLFNBQVVOLEtBRVosbUJBQU9TLE1BQU0sb0NBQW1DLFdBQzlDLGtCQUNFdkgsS0FBSyxXQUNMd0gsUUFBU2QsRUFDVFUsU0FBVSxTQUFBMUMsR0FBQyxPQUFJaUMsRUFBZ0JqQyxFQUFFRSxPQUFPNEMsUUFBUSxJQUNoRCx1QkFJUiwyQkFDRSx3QkFBSSxXQUNKLDJCQUNFLFNBQUNyQyxHQUFLLENBQ0puRixLQUFLLE9BQ0xFLE1BQU9rRyxFQUFLekUsV0FBV0MsTUFBTTRELFFBQVUsR0FDdkNILFVBQVUsRUFDVmdDLFNBQVVULEVBQ1ZVLFNBQVVWLEVBQ1Z4QixVQUFXLGtCQUFNLElBQUksRUFDckJnQyxTQUFVRCxLQUVaLG1CQUFPSSxNQUFNLG9DQUFtQyxXQUM5QyxrQkFDRXZILEtBQUssV0FDTHdILFFBQVNaLEVBQ1RRLFNBQVUsU0FBQTFDLEdBQUMsT0FBSW1DLEVBQWlCbkMsRUFBRUUsT0FBTzRDLFFBQVEsSUFDakQsMEJBT2hCLCtzQ0N6RmUsU0FBU0MsR0FBZ0JuTyxHQUN0QyxJQUFROE0sRUFBUzlNLEVBQVQ4TSxLQUVSLE9BQ0UsNEJBQ0Usd0JBQUcsMEJBQU9BLEVBQUt6RSxXQUFXK0YsV0FBV2xDLFlBQ3JDLFNBQUNlLEdBQWUsTUFBS2pOLE1BRzNCLENENEhBaU4sR0FBZ0J6TSxVQUFZLENBQzFCc00sS0FBTXJNLElBQUFBLE1BQWdCMEwsSUFBcUJDLFdBQzNDYyxTQUFVek0sSUFBQUEsS0FBQUEsNEJFOUhSLEdBQVUsQ0FBQyxFQUVmLEdBQVExQixrQkFBb0IsSUFDNUIsR0FBUUMsY0FBZ0IsSUFFbEIsR0FBUUMsT0FBUyxTQUFjLEtBQU0sUUFFM0MsR0FBUUMsT0FBUyxJQUNqQixHQUFRQyxtQkFBcUIsSUFFaEIsSUFBSSxLQUFTLElBQTFCLElBS08sR0FBZSxNQUFXLFlBQWlCLGlCQUFpQnFLLEVDeEJwRCxTQUFTNkUsR0FBWSxHQUF3QixJQUFwQkMsRUFBUSxFQUFSQSxTQUFVQyxFQUFNLEVBQU5BLE9BQ2hELE9BQ0UsaUNBQ0UsaUJBQU1yTyxVQUFXeUosR0FBQUEsYUFBcUJzRSxNQUFPSyxFQUFTLFNBQ25EQSxJQUVGQyxFQUFPQyxlQUNOLGdCQUFLdE8sVUFBV3lKLEdBQUFBLG9CQUEyQixTQUFDLG1CQU1wRCxzdkJDYkEsSUFBTThFLEdBQWUsR0FDZkMsR0FBa0IsRUFFakIsU0FBU0MsR0FBbUIxRSxFQUFVMkUsR0FBcUIsSUFBZkMsRUFBVyxVQUFILDZDQUFHLENBQUMsRUFDN0QsTUFBTyxDQUNMQyxFQUFHN0UsRUFBUzZFLEdBQUtMLEdBQWVDLElBQ2hDSyxFQUFHOUUsRUFBUzhFLEdBQUtOLEdBQWVDLElBQ2hDTSxFQUFHSixFQUFLSSxFQUFJUCxHQUFlQyxJQUFtQkUsRUFBS0ksRUFBSSxHQUN2REMsRUFBR0wsRUFBS0ssRUFBSVIsR0FBZUMsSUFBbUJFLEVBQUtLLEVBQUksR0FDdkRDLElBQUtqRixFQUFTNkUsR0FBS0QsRUFBU0MsR0FBSzdFLEVBQVM2RSxNQUFRTCxHQUFlQyxJQUNqRVMsSUFBS2xGLEVBQVM4RSxHQUFLRixFQUFTRSxHQUFLOUUsRUFBUzhFLE1BQVFOLEdBQWVDLElBQ2pFakwsRUFBR29MLEVBQVNwTCxHQUFLLEVBRXJCLENBZU8sU0FBUzJMLEdBQXFCbkYsRUFBVTJFLEVBQU1DLEdBQ25ELE1BQWtDRixHQUFrQjFFLEVBQVUyRSxFQUFNQyxHQUE1REMsRUFBQyxFQUFEQSxFQUFHQyxFQUFDLEVBQURBLEVBQUdDLEVBQUMsRUFBREEsRUFBR0MsRUFBQyxFQUFEQSxFQUFHeEwsRUFBQyxFQUFEQSxFQUFHeUwsRUFBRSxFQUFGQSxHQUFJQyxFQUFFLEVBQUZBLEdBMkIzQixNQXpCZSxDQUNiLENBQUVMLEVBQUcsRUFBR0MsRUFBRyxHQUNYLENBQUVELEVBQUdFLEVBQUdELEVBQUcsR0FDWCxDQUFFRCxFQUFHRSxFQUFHRCxFQUFHRSxHQUNYLENBQUVILEVBQUcsRUFBR0MsRUFBR0UsSUFxQkN6SyxLQVhkLFNBQWlCNkssR0FDZixJQUFNUCxFQUFJTyxFQUFNUCxFQUFJSSxFQUNkSCxFQUFJTSxFQUFNTixFQUFJSSxFQUNkRyxFQUFRQyxLQUFLQyxHQUFLL0wsRUFBSSxJQUU1QixNQUFPLENBQ0xxTCxFQUFHSSxFQUFLSixFQUFJUyxLQUFLRSxJQUFJSCxHQUFTUCxFQUFJUSxLQUFLRyxJQUFJSixHQUMzQ1AsRUFBR0ksRUFBS0osRUFBSVEsS0FBS0UsSUFBSUgsR0FBU1IsRUFBSVMsS0FBS0csSUFBSUosR0FFL0MsSUFFMEI5SyxLQWxCMUIsU0FBb0I2SyxHQUNsQixNQUFPLENBQ0xQLEVBQUdPLEVBQU1QLEVBQUlBLEVBQ2JDLEVBQUdNLEVBQU1OLEVBQUlBLEVBRWpCLEdBY0YsMDJCQ2pETyxTQUFTWSxHQUFzQkMsR0FDcEMsT0FBT0EsRUFBT3BMLEtBQUksU0FBQThILEdBQUcsT0RrRGhCLFNBQTRCckMsRUFBVTJFLEVBQU1DLEdBQ2pELElBQU1nQixFQUFjVCxHQUFvQm5GLEVBQVUyRSxFQUFNQyxHQUNsRGlCLEVBQVV0TCxJQUFJcUwsRUFBYSxLQUMzQkUsRUFBVXZMLElBQUlxTCxFQUFhLEtBVWpDLE1BQU8sQ0FBRUcsSUFURyxDQUNWbEIsRUFBR1MsS0FBS1MsSUFBRyxNQUFSVCxLQUFJLEdBQVFPLElBQ2ZmLEVBQUdRLEtBQUtTLElBQUcsTUFBUlQsS0FBSSxHQUFRUSxLQU9IRSxJQUxGLENBQ1ZuQixFQUFHUyxLQUFLVSxJQUFHLE1BQVJWLEtBQUksR0FBUU8sSUFDZmYsRUFBR1EsS0FBS1UsSUFBRyxNQUFSVixLQUFJLEdBQVFRLEtBSW5CLENDaEUyQkcsQ0FDdkIsQ0FBRXBCLEVBQUd4QyxFQUFJd0MsRUFBR0MsRUFBR3pDLEVBQUl5QyxHQUNuQixDQUFFQyxFQUFHMUMsRUFBSTBDLEdBQUsxQyxFQUFJNkQsR0FBSyxFQUFHbEIsRUFBRzNDLEVBQUkyQyxHQUFLLEdBQ3RDLENBQUVILEVBQUd4QyxFQUFJNEMsR0FBSUgsRUFBR3pDLEVBQUk2QyxHQUFJMUwsRUFBRzZJLEVBQUk4RCxHQUNoQyxJQUFFdE0sUUFBTyxrQkFBR2dMLEVBQUMsRUFBREEsRUFBR0MsRUFBQyxFQUFEQSxFQUFPa0IsRUFBRyxFQUFIQSxJQUFHLE1BQVEsQ0FDaENuQixFQUFHUyxLQUFLVSxJQUFJbkIsRUFBR21CLEVBQUluQixHQUNuQkMsRUFBR1EsS0FBS1UsSUFBSWxCLEVBQUdrQixFQUFJbEIsR0FDcEIsR0FBRyxDQUFFRCxFQUFHLEVBQUdDLEVBQUcsR0FDakIsQ0FFTyxTQUFTc0IsR0FBaUJDLEdBQWtELDZEQUFKLENBQUMsRUFBQyxJQUFoQ0MsTUFBQUEsT0FBSyxJQUFHLElBQUMsTUFBRUMsVUFBQUEsT0FBUyxJQUFHLEdBQUMsRUFBQyxFQUNsRUMsRUFBT0MsTUFBTUMsUUFBUUwsR0FDdkJYLEdBQXFCVyxHQUNyQkEsRUFFSix5V0FBTyxFQUNMbEcsTUFBTyxHQUFGLE9BQUtxRyxFQUFLM0IsRUFBSXlCLEVBQUssTUFDeEJsRyxPQUFRLEdBQUYsT0FBS29HLEVBQUsxQixFQUFJd0IsRUFBSyxNQUN6QkssT0FBUSxTQUNSQyxRQUFTLGVBQ05MLEVBRVAsd0NDdEJJLEdBQVUsQ0FBQyxFQUVmLEdBQVF6UixrQkFBb0IsSUFDNUIsR0FBUUMsY0FBZ0IsSUFFbEIsR0FBUUMsT0FBUyxTQUFjLEtBQU0sUUFFM0MsR0FBUUMsT0FBUyxJQUNqQixHQUFRQyxtQkFBcUIsSUFFaEIsSUFBSSxLQUFTLElBQTFCLElBS08sR0FBZSxNQUFXLFlBQWlCLGlCQUFpQnFLLGd0Q0N4QjVELElBQU1TLEdBQVcsQ0FDdEI2RSxFQUFHck8sSUFBQUEsT0FBQUEsV0FDSHNPLEVBQUd0TyxJQUFBQSxPQUFBQSxZQUdRb08sR0FBVyxDQUN0QnBMLEVBQUdoRCxJQUFBQSxPQUNIeU8sR0FBSXpPLElBQUFBLE9BQ0owTyxHQUFJMU8sSUFBQUEsUUFHT3FRLEdBQWEsQ0FDeEI5QixFQUFHdk8sSUFBQUEsT0FDSHdPLEVBQUd4TyxJQUFBQSxRQUdRc1EsR0FBWXRRLElBQUFBLE1BQWdCLFlBQ3BDd0osSUFDQTRFLElBQ0FpQyxLQUdRbEIsR0FBU25QLElBQUFBLFFBQ3BCc1Esa3ZDQ2xCRixJQUFNQyxHQUFjLFNBQUFELEdBQVMsT0FBSUUsS0FBS0YsRUFBVyxDQUFDLElBQUssS0FBSyxFQUN0REcsR0FBYyxTQUFBSCxHQUVsQixNQUFPLENBQUVqQyxFQURhaUMsRUFBZDdCLEdBQ1FILEVBRE1nQyxFQUFWNUIsR0FDVzFMLEVBRERzTixFQUFOWCxFQUVsQixFQUNNZSxHQUFVLFNBQUFKLEdBQ2QsTUFBZ0NBLEVBQXhCWixFQUFBQSxPQUFDLElBQUcsSUFBQyxJQUFtQlksRUFBakIvQixFQUFBQSxPQUFDLElBQUcsRUFBQW1CLEVBQUMsSUFBWVksRUFBVjlCLEVBQ3RCLE1BQU8sQ0FBRUQsRUFBQUEsRUFBR0MsT0FEVyxJQUFHLElBQUMsRUFFN0IsRUFFQSxTQUFTbUMsR0FBUXBSLEdBQ2YsSUFBUStRLEVBQWlDL1EsRUFBakMrUSxVQUFXalEsRUFBc0JkLEVBQXRCYyxTQUFhRSxvWEFBSSxDQUFLaEIsRUFBSyxJQUN4Q2lLLEVBQVcrRyxHQUFZRCxHQUN2QmxDLEVBQVdxQyxHQUFZSCxHQUN2Qm5DLEVBQU91QyxHQUFRSixHQUNmTSxFSkxELFNBQXVCcEgsRUFBVTJFLEVBQU1DLEdBQzVDLE1BQWtDRixHQUFrQjFFLEVBQVUyRSxFQUFNQyxHQUE1REMsRUFBQyxFQUFEQSxFQUFHQyxFQUFDLEVBQURBLEVBQUdDLEVBQUMsRUFBREEsRUFBR0MsRUFBQyxFQUFEQSxFQUFHeEwsRUFBQyxFQUFEQSxFQUFHeUwsRUFBRSxFQUFGQSxHQUFJQyxFQUFFLEVBQUZBLEdBRTNCLE1BQU8sQ0FDTGpGLElBQUssR0FBRixPQUFLNkUsRUFBQyxNQUNUNUUsS0FBTSxHQUFGLE9BQUsyRSxFQUFDLE1BQ1YxRSxNQUFPLEdBQUYsT0FBSzRFLEVBQUMsTUFDWDNFLE9BQVEsR0FBRixPQUFLNEUsRUFBQyxNQUNacUMsZ0JBQWlCLEdBQUYsT0FBS3BDLEVBQUUsY0FBTUMsRUFBRSxNQUM5Qm9DLFVBQVcsVUFBRixPQUFZOU4sR0FBSyxFQUFDLFFBRS9CLENJTjJCK04sQ0FBYXZILEVBQVUyRSxFQUFNQyxHQUV0RCxPQUNFLHNCQUNFM08sVUFBV3lKLEdBQUFBLE9BQ1g2QixNQUFPNkYsRUFDUCxTQUFRekMsRUFBS0ksRUFDYixTQUFRSixFQUFLSyxHQUNUak8sR0FBSSxhQUVQRixJQUdQLENBRUFzUSxHQUFPNVEsVUFBWSxDQUNqQitQLE1BQU85UCxJQUFBQSxPQUNQc1EsVUFBV1UsR0FBQUEsWUFHYkwsR0FBTzFRLGFBQWUsQ0FDcEI2UCxNQUFPLEdBR1QsVUN6Q0EsU0FBU21CLEdBQWdCMVIsR0FDdkIsSUFBUTRQLEVBQTZCNVAsRUFBN0I0UCxPQUFRK0IsRUFBcUIzUixFQUFyQjJSLFVBQVdwQixFQUFVdlEsRUFBVnVRLE1BRTNCLE9BQ0UsZ0JBQUsvRSxNQUFPLENBQ1Z2QixTQUFVLFdBQ1ZzSCxVQUFXLFNBQUYsT0FBV2hCLEVBQUssS0FDekJlLGdCQUFpQixHQUNqQixTQUNDMUIsRUFBT3BMLEtBQUksU0FBQ3VNLEVBQVdhLEdBQUssT0FDM0IsU0FBQyxHQUFNLENBQWFiLFVBQVdBLEVBQVUsU0FDdENZLEVBQVUsQ0FBRUMsTUFBQUEsRUFBT2IsVUFBQUEsS0FEVGEsRUFFSixLQUlqQixDQUVBRixHQUFlbFIsVUFBWSxDQUN6Qm9QLE9BQVE2QixHQUFBQSxXQUNSRSxVQUFXbFIsSUFBQUEsS0FBQUEsV0FDWDhQLE1BQU85UCxJQUFBQSxRQUdUaVIsR0FBZWhSLGFBQWUsQ0FDNUI2UCxNQUFPLEdBR1QseUNDdEJJLEdBQVUsQ0FBQyxFQUVmLEdBQVF4UixrQkFBb0IsSUFDNUIsR0FBUUMsY0FBZ0IsSUFFbEIsR0FBUUMsT0FBUyxTQUFjLEtBQU0sUUFFM0MsR0FBUUMsT0FBUyxJQUNqQixHQUFRQyxtQkFBcUIsSUFFaEIsSUFBSSxLQUFTLElBQTFCLElBS08sR0FBZSxNQUFXLFlBQWlCLGlCQUFpQnFLLDB3Q0NBbkUsT0F2QkEsU0FBcUJ4SixHQUNuQixJQUNFYyxFQUtFZCxFQUxGYyxTQUFRLEVBS05kLEVBSkY2UixXQUFBQSxPQUFVLElBQUcsR0FBSSxJQUlmN1IsRUFIRjhSLFdBQUFBLE9BQVUsSUFBRyxPQUFBdEksRUFBUyxJQUdwQnhKLEVBRkZFLFVBQUFBLE9BQVMsSUFBRyxLQUFFLEVBQ1hjLG9YQUFJLENBQ0xoQixFQUFLLElBRUg4SixFQUFVeEMsS0FBUSxDQUN0QnFDLEdBQUFBLElBQ0FrSSxHQUFjbEksR0FBQUEsV0FDZG1JLFFBQUFBLEVBQWNuSSxHQUFBQSxnQkFDZHpKLElBQ0NLLEtBQUssS0FFUixPQUNFLHNCQUFLTCxVQUFXNEosR0FBYTlJLEdBQUksYUFDOUJGLElBR1AscUNDYkksR0FBVSxDQUFDLEVBRWYsR0FBUS9CLGtCQUFvQixJQUM1QixHQUFRQyxjQUFnQixJQUVsQixHQUFRQyxPQUFTLFNBQWMsS0FBTSxRQUUzQyxHQUFRQyxPQUFTLElBQ2pCLEdBQVFDLG1CQUFxQixJQUVoQixJQUFJLEtBQVMsSUFBMUIsSUFLTyxHQUFlLE1BQVcsWUFBaUIsaUJBQWlCcUssc3VFQ3BCbkUsU0FBU3VJLEdBQXFCL1IsR0FDNUIsSUFBUWdTLEVBQWdCaFMsRUFBaEJnUyxZQUNBQyxFQUFrQ2pTLEVBQWxDaVMsVUFBV0MsRUFBdUJsUyxFQUF2QmtTLE9BQVFDLEVBQWVuUyxFQUFmbVMsS0FBTXZELEVBQVM1TyxFQUFUNE8sS0FDekI5TixFQUFhZCxFQUFiYyxTQUVSLE9BQ0UsaUJBQ0VrUixZQUFhQSxFQUNiOVIsVUFBV29ILEtBQVEsQ0FDakJxQyxHQUFBQSxVQUNBc0ksR0FBYXRJLEdBQUFBLFlBQ1pwSixLQUFLLEtBQUssVUFFWk8sRUFDQW1SLElBQ0MsZ0JBQUsvUixVQUFXb0gsS0FBUSxDQUN0QnFDLEdBQUFBLFFBQ0F1SSxHQUFVdkksR0FBQUEsU0FDVHBKLEtBQUssS0FBTWlMLE1BQU8sQ0FDbkJ2QixTQUFVLFdBQ1ZDLElBQUtpSSxFQUFLLEdBQUcsR0FBSyxLQUNsQmhJLEtBQU1nSSxFQUFLLEdBQUcsR0FBSyxLQUNuQi9ILE1BQU93RSxFQUFLLEdBQUssS0FDakJ2RSxPQUFRdUUsRUFBSyxHQUFLLFVBSzVCLENBRU8sU0FBU3dELEdBQWUsR0FBMEIsSUFBdEJDLEVBQVEsRUFBUkEsU0FBVUMsRUFBUSxFQUFSQSxTQUNMLE1BQVpuRixFQUFBQSxFQUFBQSxVQUFTLENBQUMsR0FBRSxHQUEvQjNILEVBQUssS0FBRStNLEVBQVEsS0FFaEJDLEdBQWtCckgsRUFBQUEsRUFBQUEsY0FBWSxTQUFBc0gsR0FDbEMsSUFDTU4sRUE0RlYsU0FBOEJPLEdBUTVCLE1BQ0dBLEVBQVVBLEVBQVFDLGNBQ1MsYUFBM0JELEVBQVFsSCxNQUFNdkIsV0FBNEJ5SSxFQUFRRSx3QkFBd0J2SSxVQUc3RSxPQUFPcUksQ0FDVCxDQTNHMEJHLENBQW9CSixFQUFNbkgsUUFDckJzSCx3QkFDVjlELEVBQWtCMkQsRUFBM0JLLFFBQXFCL0QsRUFBTTBELEVBQWZNLFFBRXBCTixFQUFNTyxpQkFDTlQsRUFBUyxDQUNQVSxNQUFPLENBQUNuRSxFQUFHQyxHQUNYbUUsYUFBYyxHQUNkQyxPQUFRLENBQUNoQixFQUFLaEksS0FBTWdJLEVBQUtqSSxLQUN6QmtKLFdBQVlqQixHQUVoQixHQUFHLENBQUNJLElBRUVjLEdBQWdCbEksRUFBQUEsRUFBQUEsY0FBWSxTQUFBc0gsR0FDM0JqTixFQUFNeU0sWUFBYVEsRUFBTWEsUUFBV2IsRUFBTWMsVUFJL0NoQixHQUFTLFNBQUEvTSxHQUFLLGdCQUFVQSxHQUFLLElBQUUwTSxRQUFRLEdBQUksR0FDN0MsR0FBRyxDQUFDMU0sRUFBTXlNLFVBQVdNLElBRWZpQixHQUFjckksRUFBQUEsRUFBQUEsY0FBWSxTQUFBc0gsSUFDekJqTixFQUFNME0sUUFBVU8sRUFBTWEsUUFBVWIsRUFBTWMsVUFJM0NoQixHQUFTLFNBQUEvTSxHQUFLLGdCQUFVQSxHQUFLLElBQUUwTSxRQUFRLEdBQUssR0FDOUMsR0FBRyxDQUFDMU0sRUFBTTBNLE9BQVFLLElBRVprQixHQUFrQnRJLEVBQUFBLEVBQUFBLGNBQVksU0FBQXNILEdBQ2xDLElBQVFRLEVBQThCek4sRUFBOUJ5TixNQUFPRSxFQUF1QjNOLEVBQXZCMk4sT0FBUUMsRUFBZTVOLEVBQWY0TixXQUN2QixHQUFLSCxFQUFMLENBSUEsSUFBUU0sRUFBdUNkLEVBQXZDYyxTQUFVRyxFQUE2QmpCLEVBQTdCaUIsT0FBUVosRUFBcUJMLEVBQXJCSyxRQUFTQyxFQUFZTixFQUFaTSxRQUNuQyxLQUFpQkUsRUFBSyxHQUFmVSxFQUFFLEtBQUVDLEVBQUUsS0FFUDlFLEVBQUkrRSxLQUFNZixFQUFTTSxFQUFXakosS0FBTWlKLEVBQVdVLE9BQy9DL0UsRUFBSThFLEtBQU1kLEVBQVNLLEVBQVdsSixJQUFLa0osRUFBV1csUUFFOUM1QixFQUFPLENBQ1gsQ0FBQzVDLEtBQUtTLElBQUlsQixFQUFHNkUsR0FBTVIsRUFBTyxHQUFJNUQsS0FBS1MsSUFBSWpCLEVBQUc2RSxHQUFNVCxFQUFPLElBQ3ZELENBQUM1RCxLQUFLVSxJQUFJbkIsRUFBRzZFLEdBQU1SLEVBQU8sR0FBSTVELEtBQUtVLElBQUlsQixFQUFHNkUsR0FBTVQsRUFBTyxLQUVuRHZFLEVBQU8sQ0FDWFcsS0FBS3lFLElBQUlsRixFQUFJNkUsR0FDYnBFLEtBQUt5RSxJQUFJakYsRUFBSTZFLElBR2ZyQixHQUFTLFNBQUEvTSxHQUFLLGdCQUNUQSxHQUFLLElBQ1IwTSxPQUFRcUIsR0FBWUcsRUFDcEJ6QixVQUFXckQsRUFBSyxHQUFLLEdBQUtBLEVBQUssR0FBSyxFQUNwQ3NFLGFBQWNlLEdBQXdCOUIsRUFBTUUsR0FDNUNGLEtBQUFBLEVBQ0F2RCxLQUFBQSxHQUFJLEdBdkJOLENBeUJGLEdBQUcsQ0FBQ3BKLEVBQU82TSxFQUFVRSxJQUVmMkIsR0FBZ0IvSSxFQUFBQSxFQUFBQSxjQUFZLFNBQUFzSCxHQUM1QmpOLEVBQU15TixRQUNKek4sRUFBTXlNLFdBQ1JLLEVBQVMsQ0FDUEosT0FBUTFNLEVBQU0wTSxPQUNkZ0IsYUFBYzFOLEVBQU0wTixlQUl4QlgsRUFBUyxDQUFFVSxNQUFPLEtBQU1oQixXQUFXLElBRXZDLEdBQUcsQ0FBQ0ssRUFBVTlNLEVBQU8rTSxJQWVyQixPQWJBek0sRUFBQUEsRUFBQUEsWUFBVSxXQUtSLE9BSkFtQixPQUFPa04saUJBQWlCLFVBQVdELEdBQ25Dak4sT0FBT2tOLGlCQUFpQixZQUFhVixHQUNyQ3hNLE9BQU9rTixpQkFBaUIsVUFBV2QsR0FDbkNwTSxPQUFPa04saUJBQWlCLFFBQVNYLEdBQzFCLFdBQ0x2TSxPQUFPbU4sb0JBQW9CLFVBQVdGLEdBQ3RDak4sT0FBT21OLG9CQUFvQixZQUFhWCxHQUN4Q3hNLE9BQU9tTixvQkFBb0IsVUFBV2YsR0FDdENwTSxPQUFPbU4sb0JBQW9CLFFBQVNaLEVBQ3RDLENBQ0YsR0FBRyxDQUFDVSxFQUFlVCxFQUFpQkosRUFBZUcsSUFFNUMsQ0FBQyxTQUNIaE8sR0FBSyxJQUNSd00sWUFBYVEsRUFDYjZCLFlBQWFaLElBQ1oxQixHQUNMLENBa0JBLFNBQVNrQyxHQUF5QjlCLEVBQU1FLEdBQ3RDLE9BQU9BLEVBQVN2TyxRQUFPLFNBQUN3USxFQUFLQyxFQUFRclAsR0FPbkMsT0FOSXFQLEVBQU9DLE1BQUssZ0JBQUcxRixFQUFDLEVBQURBLEVBQUdDLEVBQUMsRUFBREEsRUFBQyxPQUNyQm9ELEVBQUssR0FBRyxHQUFLckQsR0FBS0EsRUFBSXFELEVBQUssR0FBRyxJQUM5QkEsRUFBSyxHQUFHLEdBQUtwRCxHQUFLQSxFQUFJb0QsRUFBSyxHQUFHLEVBQUUsS0FFaENtQyxFQUFJelAsS0FBS0ssR0FFSm9QLENBQ1QsR0FBRyxHQUNMLGlCQ3BKSSxHQUFVLENBQUMsRUFFZixHQUFRdlYsa0JBQW9CLElBQzVCLEdBQVFDLGNBQWdCLElBRWxCLEdBQVFDLE9BQVMsU0FBYyxLQUFNLFFBRTNDLEdBQVFDLE9BQVMsSUFDakIsR0FBUUMsbUJBQXFCLElBRWhCLElBQUksS0FBUyxJQUExQixJQUtPLEdBQWUsTUFBVyxZQUFpQixpQkFBaUJxSyxZQ2YvRCxHQUFVLENBQUMsRUFFZixHQUFRekssa0JBQW9CLElBQzVCLEdBQVFDLGNBQWdCLElBRWxCLEdBQVFDLE9BQVMsU0FBYyxLQUFNLFFBRTNDLEdBQVFDLE9BQVMsSUFDakIsR0FBUUMsbUJBQXFCLElBRWhCLElBQUksS0FBUyxJQUExQixJQUtPLEdBQWUsTUFBVyxZQUFpQixpQkFBaUJxSyxFQ3ZCcEQsU0FBU2lMLEdBQUcsR0FBZ0MsSUFBNUIzVCxFQUFRLEVBQVJBLFNBQVEsSUFBRVosVUFBQUEsT0FBUyxJQUFHLEtBQUUsRUFDL0N3VSxFQUFhLENBQUMvSyxHQUFBQSxJQUFZekosR0FBV0ssS0FBSyxLQUNoRCxPQUNFLGlCQUFLTCxVQUFXd1UsRUFBVyxXQUN6QixTQUFDLEVBQUksQ0FBQ3pVLEtBQUssa0JBQWtCLElBQUVhLElBR3JDLENDUE8sSUFBTTZULElBQWdCdFYsRUFBQUEsRUFBQUEsZUFBYyxDQUN6Q3VRLE9BQVEsR0FDUmdGLGFBQWMsRUFDZEMsa0JBQW1CLENBQUMsRUFDcEJDLGFBQWMsQ0FBQyxJQUdWLFNBQVNDLEdBQXFCLEdBQXdCLElBQXBCbkYsRUFBTSxFQUFOQSxPQUFROU8sRUFBUSxFQUFSQSxTQUN6QzhULEdBQWU3TixFQUFBQSxFQUFBQSxVQUFRLGtCQUFNNkksRUFBT2pNLE1BQU0sR0FBRSxDQUFDaU0sRUFBT2pNLFNBQ3BEa1IsR0FBb0I5TixFQUFBQSxFQUFBQSxVQUFRLGtCQUFNNEksR0FBcUJDLEVBQU8sR0FBRSxDQUFDQSxJQUNqRWtGLEdBQWUvTixFQUFBQSxFQUFBQSxVQUFRLGtCQUFNc0osR0FBZ0J3RSxFQUFrQixHQUFFLENBQUNBLElBRWxFNVEsRUFBVSxDQUNkMkwsT0FBQUEsRUFDQWdGLGFBQUFBLEVBQ0FDLGtCQUFBQSxFQUNBQyxhQUFBQSxHQUdGLE9BQ0UsU0FBQ0gsR0FBY2hPLFNBQVEsQ0FBQ0MsTUFBTzNDLEVBQVEsU0FDcENuRCxHQUdQLDR0R0NkQSxJQUFNa1UsR0FBYyxHQUNkQyxHQUFjLFNBQUFyRixHQUNsQixJQUM4QixFQUR4QnlDLEViYkQsU0FBNEJ6QyxFQUFRLEdBQ3pDLE9BQU9BLEVBQU9wTCxLQUFJLFNBQUE4SCxHQUFHLE9BQUk4QyxHQUN2QixDQUFFTixFQUFHeEMsRUFBSXdDLEVBQUdDLEVBQUd6QyxFQUFJeUMsR0FDbkIsQ0FBRUMsRUFBRzFDLEVBQUkwQyxHQUFLMUMsRUFBSTZELEdBQUssRUFBR2xCLEVBQUczQyxFQUFJMkMsR0FBSyxHQUN0QyxDQUFFSCxFQUFHeEMsRUFBSTRDLEdBQUlILEVBQUd6QyxFQUFJNkMsR0FBSTFMLEVBQUc2SSxFQUFJOEQsR0FDaEMsR0FDSCxDYU9tQjhFLENBQWtCdEYsR0FBK0IsS0FDNUN5QyxHQUFRLElBQTlCLElBQUssRUFBTCxxQkFBZ0MsS0FDSCxFQURYLGNBQ1csSUFBM0IsSUFBSyxFQUFMLHFCQUE2QixLQUFsQmhELEVBQUssUUFDZEEsRUFBTVAsR0FBS2tHLEdBQ1gzRixFQUFNTixHQUFLaUcsRUFDYixDQUFDLCtCQUNILENBQUMsK0JBQ0QsT0FBTzNDLENBQ1QsRUF3Q0EsU0FBUzhDLEdBQW1CLEdBQStCLElBbkJ2RCxFQWxCSzNQLEVBQU9JLEVBb0JSd1AsRUFDQUMsRUFDQUMsRUFDQUMsRUFjd0IzTyxFQUFLLEVBQUxBLE1BQU80TyxFQUFNLEVBQU5BLE9BQVF0SSxFQUFRLEVBQVJBLFNBQzdDLEdBQXNDckcsRUFBQUEsRUFBQUEsWUFBVzhOLElBQXpDL0UsRUFBTSxFQUFOQSxPQUFRaUYsRUFBaUIsRUFBakJBLGtCQUNWWSxHQUFjMU8sRUFBQUEsRUFBQUEsVUFBUSxrQkFBTWtPLEdBQVlyRixFQUFPLEdBQUUsQ0FBQ0EsSUFDbERrRixHQUFlL04sRUFBQUEsRUFBQUEsVUFBUSxrQkFBTXNKLEdBQWdCd0UsRUFBbUIsQ0FDcEV0RSxNQUFPeUUsR0FDUHhFLFVBQVcsQ0FDVHZHLFNBQVUsV0FDVjRHLFFBQVMsRUFDVEQsT0FBUSxJQUVWLEdBQUUsQ0FBQ2lFLElBRUwsR0EvQkUsTUFsQndCYSxFQUFBQSxFQUFBQSxhQUFXLFNBQUNsUSxFQUFPbVEsR0FDM0MsT0FBUUEsR0FDTixJQUFLLDZCQUNILE9BQU8sU0FBS25RLEdBQUssSUFBRW9RLHFCQUFzQnBRLEVBQU1vUSxxQkFBdUIsSUFDeEUsSUFBSywrQkFDSCxPQUFPLFNBQUtwUSxHQUFLLElBQUVxUSx1QkFBd0JyUSxFQUFNcVEsdUJBQXlCLElBQzVFLElBQUssdUJBQ0gsT0FBTyxTQUFLclEsR0FBSyxJQUFFc1EsbUJBQW1CLElBQ3hDLElBQUsseUJBQ0gsT0FBTyxTQUFLdFEsR0FBSyxJQUFFdVEscUJBQXFCLElBQzFDLFFBQ0UsTUFBTSxJQUFJalQsTUFBTSwrQkFBRCxPQUFnQzZTLElBRXJELEdBQUcsQ0FDREMscUJBQXNCLEVBQ3RCQyx1QkFBd0IsRUFDeEJDLG1CQUFtQixFQUNuQkMscUJBQXFCLElBQ3JCLEdBbEJLdlEsRUFBSyxLQUFFSSxFQUFRLEtBb0JoQndQLEdBQWtCakssRUFBQUEsRUFBQUEsY0FBWSxrQkFBTXZGLEVBQVMsNkJBQTZCLEdBQUUsQ0FBQ0EsSUFDN0V5UCxHQUFvQmxLLEVBQUFBLEVBQUFBLGNBQVksa0JBQU12RixFQUFTLCtCQUErQixHQUFFLENBQUNBLElBQ2pGMFAsR0FBZ0JuSyxFQUFBQSxFQUFBQSxjQUFZLGtCQUFNdkYsRUFBUyx1QkFBdUIsR0FBRSxDQUFDQSxJQUNyRTJQLEdBQWtCcEssRUFBQUEsRUFBQUEsY0FBWSxrQkFBTXZGLEVBQVMseUJBQXlCLEdBQUUsQ0FBQ0EsSUFFeEUsQ0FDTG9RLGVBQWdCeFEsRUFBTXNRLG1CQUFxQnRRLEVBQU1vUSxxQkFBdUIsRUFDeEVLLGlCQUFrQnpRLEVBQU11USxxQkFBdUJ2USxFQUFNcVEsdUJBQXlCLEVBQzlFSyxRQUFTLENBQ1BkLGdCQUFBQSxFQUNBQyxrQkFBQUEsRUFDQUMsY0FBQUEsRUFDQUMsZ0JBQUFBLEtBa0JGUyxFQUFhLEVBQWJBLGNBQ0FDLEVBQWUsRUFBZkEsZ0JBQ1NFLEVBQWdCLEVBQXpCRCxRQUdJRSxHQUFtQmpMLEVBQUFBLEVBQUFBLGNBQVksWUFBOEIsSUFBM0IrRyxFQUFNLEVBQU5BLE9BQVFnQixFQUFZLEVBQVpBLGFBQzlDaEIsRUFBU2lFLEVBQWlCWixrQkFBb0JZLEVBQWlCYixnQkFDL0RwSSxFQUNFZ0YsRUFDSXRMLEVBQU12QyxRQUFPLFNBQUFhLEdBQUMsT0FBS2dPLEVBQWEvUixTQUFTK0QsRUFBRSxJQUFDLGFBQ3hDMEIsR0FBSyxHQUFLc00sSUFFdEIsR0FBRyxDQUFDdE0sRUFBT3NHLEVBQVVpSixJQUVmRSxHQUFrQmxMLEVBQUFBLEVBQUFBLGNBQVksU0FBQXlHLEdBQ2xDLElBQU0wRSxFQUFhMVAsRUFBTXpGLFNBQVN5USxHQUNsQzBFLEVBQWFILEVBQWlCZCxvQkFBc0JjLEVBQWlCZixrQkFFckVsSSxFQUNFb0osRUFDSTFQLEVBQU12QyxRQUFPLFNBQUFrUyxHQUFXLE9BQUlBLElBQWdCM0UsQ0FBSyxJQUFDLGFBQzlDaEwsR0FBSyxDQUFFZ0wsSUFFbkIsR0FBRyxDQUFDaEwsRUFBT3NHLEVBQVVpSixJQUtuQixLQUh1Qy9ELEdBQWdCLENBQ3ZERSxTQUFVOEQsRUFDVi9ELFNBQVVvRCxJQUNWLEdBSEtlLEVBQVMsS0FBRXpFLEVBQW1CLEtBSy9CbUIsRUFBZXNELEVBQVV2RSxVQUMzQnVFLEVBQVV0RCxhQUNWLEdBRUV1RCxFQUFrQjdQLEVBQ2xCOFAsRUFBdUJGLEVBQVV0RSxPQUFTLEdBQUtnQixFQUFhN08sUUFBTyxTQUFBdU4sR0FBSyxPQUFLNkUsRUFBZ0J0VixTQUFTeVEsRUFBTSxJQUM1RytFLEVBQXlCSCxFQUFVdEUsT0FBU2dCLEVBQWE3TyxRQUFPLFNBQUF1TixHQUFLLE9BQUk2RSxFQUFnQnRWLFNBQVN5USxFQUFNLElBQUksR0FFbEgsT0FDRSxnQkFBS3BHLE1BQU9zSixFQUFhLFVBQ3ZCLFVBQUMvQyxFQUFtQixTQUFLeUUsR0FBUyxlQUNoQyxTQUFDLEdBQWMsQ0FDYjVHLE9BQVFBLEVBQ1I3TixTQUFVLEdBQ1Z3TyxNQUFPeUUsR0FDUHJELFVBQVcsZ0JBQUdDLEVBQUssRUFBTEEsTUFBSyxPQUNqQixTQUFDLEdBQVUsQ0FDVDdRLFFBQVMsa0JBQU1zVixFQUFnQnpFLEVBQU0sRUFDckNFLFlBQVl4SyxFQUFBQSxFQUFBQSxTQUFRLENBQ2xCcUMsR0FBQUEsSUFDQThNLEVBQWdCdFYsU0FBU3lRLElBQVVqSSxHQUFBQSxVQUNuQytNLEVBQXFCdlYsU0FBU3lRLElBQVVqSSxHQUFBQSxXQUN4Q2dOLEVBQXVCeFYsU0FBU3lRLElBQVVqSSxHQUFBQSxnQkFDekNwSixLQUFLLE1BQ1IsSUFHTGlWLElBQVUsc0JBQ1ZRLElBQWlCLFNBQUN2QixHQUFHLENBQUN2VSxVQUFXeUosR0FBQUEsSUFBVyxTQUFDLDRCQUM3Q3NNLElBQW1CLFNBQUN4QixHQUFHLENBQUN2VSxVQUFXeUosR0FBQUEsSUFBVyxTQUFDLDBDQUl4RCxDQUVBd0wsR0FBb0IzVSxVQUFZLENBQzlCME0sU0FBVXpNLElBQUFBLEtBQUFBLFdBQ1ZtRyxNQUFPbkcsSUFBQUEsUUFDTEEsSUFBQUEsUUFDQTJMLFdBQ0ZvSixPQUFRL1UsSUFBQUEsTUFHVixzQkMxSUksR0FBVSxDQUFDLEVBRWYsR0FBUTFCLGtCQUFvQixJQUM1QixHQUFRQyxjQUFnQixJQUVsQixHQUFRQyxPQUFTLFNBQWMsS0FBTSxRQUUzQyxHQUFRQyxPQUFTLElBQ2pCLEdBQVFDLG1CQUFxQixJQUVoQixJQUFJLEtBQVMsSUFBMUIsSUFLTyxHQUFlLE1BQVcsWUFBaUIsaUJBQWlCcUssZ3RDQ3ZCNUQsU0FBU29OLEdBQWdCLEdBQThCLElBQTFCQyxFQUFJLEVBQUpBLEtBQU10SSxFQUFNLEVBQU5BLE9BQVFyQixFQUFRLEVBQVJBLFNBQ2hELE9BQ0UsaUNBQ0UsU0FBQyxFQUFJLENBQUNqTixLQUFLLE9BQU9nTyxNQUFNLHVCQUF1QixLQUFDLGtCQUM5Q2xDLFNBQVV3QyxhQUFNLEVBQU5BLEVBQVF4QyxTQUNsQm5GLE1BQU9pUSxhQUFJLEVBQUpBLEVBQU10TyxJQUNidUYsU0FBVSxTQUFBMUMsR0FBQyxPQUFJOEIsRUFBUyxTQUNuQjJKLEdBQUksSUFDUHRPLElBQUs2QyxFQUFFRSxPQUFPMUUsTUFDZHFGLFFBQVEsSUFDUixNQUlWLENBRU8sU0FBUzZLLEdBQWtCLEdBQWMsSUFBVnZJLEVBQU0sRUFBTkEsT0FDcEMsT0FDRSxpQkFBTXJPLFVBQVcsQ0FDZnlKLEdBQUFBLGNBQ0FBLEdBQUFBLFVBQ0FwSixLQUFLLEtBQUssU0FDVGdPLEVBQU93SSxPQUdkLENBRU8sU0FBU0MsR0FBbUIsR0FBOEIsTUFBMUJILEVBQUksRUFBSkEsS0FBTXRJLEVBQU0sRUFBTkEsT0FBUXJCLEVBQVEsRUFBUkEsU0FDbkQsT0FDRSxrQkFDRXhHLEtBQUssT0FDTHhHLFVBQVd5SixHQUFBQSxjQUNYL0MsTUFBbUIsUUFBZCxFQUFFaVEsYUFBSSxFQUFKQSxFQUFNM0ssY0FBTSxRQUFJLEdBQ3ZCK0ssWUFBYTFJLEVBQU8zTyxTQUFXLFlBQUosT0FBZ0IyTyxFQUFPM08sU0FDbERrTyxTQUFVLFNBQUExQyxHQUNSOEIsRUFBUyxTQUNKMkosR0FBSSxJQUNQM0ssT0FBUWQsRUFBRUUsT0FBTzFFLE1BQ2pCcUYsUUFBUSxJQUVaLEdBR04sQ0FFTyxTQUFTaUwsR0FBb0IsR0FBOEIsTUFBMUJMLEVBQUksRUFBSkEsS0FBTXRJLEVBQU0sRUFBTkEsT0FBUXJCLEVBQVEsRUFBUkEsU0FDcEQsT0FDRSxrQkFDRXhHLEtBQUssU0FDTHhHLFVBQVd5SixHQUFBQSxjQUNYL0MsTUFBbUIsUUFBZCxFQUFFaVEsYUFBSSxFQUFKQSxFQUFNM0ssY0FBTSxRQUFJLEdBQ3ZCK0ssWUFBYTFJLEVBQU8zTyxTQUFXLFlBQUosT0FBZ0IyTyxFQUFPM08sU0FDbERrTyxTQUFVLFNBQUExQyxHQUNSOEIsRUFBUyxTQUNKMkosR0FBSSxJQUNQM0ssT0FBUWlMLE9BQU8vTCxFQUFFRSxPQUFPMUUsT0FDeEJxRixRQUFRLElBRVosR0FHTixDQUVPLFNBQVNtTCxHQUFvQixHQUFzQixJQUFsQlAsRUFBSSxFQUFKQSxLQUFNM0osRUFBUSxFQUFSQSxTQUM1QyxPQUNFLGtCQUNFeEcsS0FBSyxXQUNMeEcsVUFBV3lKLEdBQUFBLGNBQ1h1RSxTQUFTMkksYUFBSSxFQUFKQSxFQUFNM0ssVUFBVSxFQUN6QjRCLFNBQVUsU0FBQTFDLEdBQ1I4QixFQUFTLENBQ1BoQixTQUFVZCxFQUFFRSxPQUFPNEMsUUFDbkJqQyxRQUFRLEdBRVosR0FHTiw0QkMvRWFvTCxHQUFRLFNBQUNDLEVBQU8xRixHQUFvQixJQUN6QzJGLEdBQVEzRixHQUQyQixVQUFILDZDQUFHLElBQ1gwRixFQUFNM1QsT0FDcEMsT0FBTzRULEVBQU8sRUFBSUQsRUFBTTNULE9BQVM0VCxFQUFPQSxDQUMxQyxjQ09JLEdBQVUsQ0FBQyxFQUVmLEdBQVF4WSxrQkFBb0IsSUFDNUIsR0FBUUMsY0FBZ0IsSUFFbEIsR0FBUUMsT0FBUyxTQUFjLEtBQU0sUUFFM0MsR0FBUUMsT0FBUyxJQUNqQixHQUFRQyxtQkFBcUIsSUFFaEIsSUFBSSxLQUFTLElBQTFCLElBS08sR0FBZSxNQUFXLFlBQWlCLGlCQUFpQnFLLDZHQ3BCbkUsU0FBU2dPLEdBQVUsR0FBdUMsUUFBbkNDLEVBQU8sRUFBUEEsUUFBU25GLEVBQVEsRUFBUkEsU0FBVW9GLEVBQVksRUFBWkEsYUFDUyxNQUFYdkssRUFBQUEsRUFBQUEsVUFBUyxLQUFFLHM1QkFBMUN3SyxFQUFXLEtBQUVDLEVBQWMsS0FDNUJDLEdBQVU1TSxFQUFBQSxFQUFBQSxRQUFPLE1BRWpCNk0sR0FBYTNNLEVBQUFBLEVBQUFBLGNBQVksU0FBVTRNLEVBQVM1RSxHQUFRLE1GSnBCVCxFQUNoQ3NGLEVBQ0EzTixFQUNBSCxFQUNBNkosRUVDSixHQUF1QixJQUFuQjBELEVBQVE5VCxPQUdMLFFBQWU2RixJQUFYMkosRUFBSixDQUtQLElBQU1vRSxFQUF1QixPQUFoQkksRUFDVE4sR0FBTUksRUFBU0UsRUFBYXhFLEdBQzVCNEUsRUFFRUUsRUFBVyx5QkFBSCxPQUE0QlYsRUFBSSxNRmpCVjdFLEVFa0JMLFFBQWxCLEVBQUdtRixFQUFReE0sZUFBTyxhQUFmLEVBQWlCNk0sY0FBY0QsR0ZqQjNDRCxFQUFTdEYsRUFBUXlGLGFBQWFDLFVBQzlCL04sRUFBU3FJLEVBQVF5RixhQUFhRSxhQUM5Qm5PLEVBQU13SSxFQUFRNEYsVUFDZHZFLEVBQVM3SixFQUFNd0ksRUFBUTZGLGNBRXpCck8sRUFBTThOLEdBQVVqRSxFQUFTaUUsRUFBUzNOLElBQ3BDcUksRUFBUThGLGdCRWF3QixHQUNoQ1osRUFBZUwsRUFWZixNQUZFSyxFQUFlRyxRQUhmSCxFQUFlLEtBZ0JuQixHQUFHLENBQUNILEVBQVNFLEVBQWFDLElBRXBCYSxHQUFzQnROLEVBQUFBLEVBQUFBLGNBQVksV0FDdEMyTSxFQUFXLEVBQUcsRUFDaEIsR0FBRyxDQUFDQSxJQUVFWSxHQUFzQnZOLEVBQUFBLEVBQUFBLGNBQVksV0FDdEMyTSxFQUFXTCxFQUFROVQsT0FBUyxHQUFJLEVBQ2xDLEdBQUcsQ0FBQ21VLEVBQVlMLElBRVZrQixHQUFxQnhOLEVBQUFBLEVBQUFBLGNBQVksU0FBVXNILEdBQy9DSCxFQUFTbUYsRUFBUUUsR0FBY2xGLEVBQ2pDLEdBQUcsQ0FBQ2dGLEVBQVNFLEVBQWFyRixJQUVwQmUsR0FBZ0JsSSxFQUFBQSxFQUFBQSxjQUFZLFNBQVVzSCxHQUMxQyxJQU1Na0QsRUFOVSxDQUNkaUQsVUFBV0gsRUFDWEksUUFBU0gsRUFDVEksTUFBT0gsR0FHY2xHLEVBQU1uRyxLQUN6QnFKLElBQ0ZsRCxFQUFNTyxpQkFDTlAsRUFBTXNHLGtCQUNOcEQsRUFBT2xELEdBRVgsR0FBRyxDQUNEZ0csRUFDQUMsRUFDQUMsSUFRRixPQUxBN1MsRUFBQUEsRUFBQUEsWUFBVSxXQUVSLE9BREE2RixTQUFTeEksS0FBS2dSLGlCQUFpQixVQUFXZCxHQUNuQyxrQkFBTTFILFNBQVN4SSxLQUFLaVIsb0JBQW9CLFVBQVdmLEVBQWMsQ0FDMUUsR0FBRyxDQUFDd0UsRUFBU3hFLEtBR1gsZUFBSW5ULFVBQVdzTCxHQUFBQSxRQUFlRSxJQUFLbU0sRUFBUSxTQUN4Q0osRUFBUWpULEtBQUksU0FBQ3dVLEVBQVE5VCxHQUFDLE9BQ3JCLGVBRUVoRixVQUFXeVgsSUFBZ0J6UyxFQUFJc0csR0FBQUEsWUFBb0IsR0FDbkR5QyxNQUFPK0ssRUFBT2hWLFlBQ2Qsb0JBQW1Ca0IsRUFDbkJuRSxRQUFTLFNBQUEwUixHQUFLLE9BQUlILEVBQVMwRyxFQUFRdkcsRUFBTSxFQUN6Q3dHLGNBQWUsU0FBQXhHLEdBQUssT0FBSUgsRUFBUzBHLEVBQVF2RyxFQUFNLEVBQy9DeUcsWUFBYSxrQkFBTXBCLEVBQVc1UyxFQUFFLEVBQUMsU0FFaEN3UyxFQUFhc0IsRUFBUTlULElBUmpCQSxFQVNGLEtBSWIsQ0FFQXNTLEdBQVdoWCxVQUFZLENBQ3JCaVgsUUFBU2hYLElBQUFBLE1BQUFBLFdBQ1Q2UixTQUFVN1IsSUFBQUEsS0FBQUEsV0FDVmlYLGFBQWNqWCxJQUFBQSxLQUFBQSxZQUdoQixtMENDbEZBLFNBQVMwWSxHQUFZck0sR0FDZkEsSUFDRkEsRUFBS3NNLFFBQ0x0TSxFQUFLdU0sU0FFVCxDQUVBLElBQU1DLEdBQWUsU0FBSCxHQUE0RCxRQUF0REMsRUFBTyxFQUFQQSxRQUFTQyxFQUFTLEVBQVRBLFVBQVdDLEVBQWEsRUFBYkEsY0FBZUMsRUFBWSxFQUFaQSxhQUNuREMsR0FBYUosRUFBUTVWLFFBQVU0VixFQUFRNVYsT0FWdkIsR0FXMEIsTUFBdEJ3SixFQUFBQSxFQUFBQSxVQUFTdU0sS0FBYSxzNUJBQXpDRSxFQUFLLEtBQUVDLEVBQVEsS0FDaEJwQyxHQUFVMVEsRUFBQUEsRUFBQUEsVUFBUSxXQUN0QixJQUFLNlMsSUFBVUQsRUFDYixPQUFPSixFQUdULElBQU16YSxFQUFVLENBQUV3TixJQUFLa04sRUFBV00sTUFBTyxJQUV6QyxPQURpQkMsS0FBQUEsR0FBYUgsRUFBT0wsRUFBU3phLEdBQzlCMEYsS0FBSSxTQUFBd1UsR0FBTSxnQkFDckJBLEVBQU9nQixLQUFHLElBQ2JDLE9BQVFqQixHQUFNLEdBRWxCLEdBQUcsQ0FBQ1csRUFBV0MsRUFBT0wsRUFBU0MsSUFFekJVLEdBQWlCL08sRUFBQUEsRUFBQUEsY0FBWSxTQUFBc0gsR0FDakNvSCxFQUFTcEgsRUFBTW5ILE9BQU8xRSxNQUN4QixHQUFHLENBQUNpVCxJQUVKLE9BQ0UsZ0NBQ0dGLElBQ0MsaUJBQUt6WixVQUFXc0wsR0FBQUEsY0FBb0IsV0FDbEMsa0JBQ0VFLElBQUt5TixHQUNMelMsS0FBSyxPQUNMRSxNQUFPZ1QsRUFDUDlMLFNBQVVvTSxLQUVaLFNBQUMsRUFBSSxDQUFDaGEsVUFBV3NMLEdBQUFBLFdBQWtCdkwsS0FBSyxZQUN4QyxTQUFDLEVBQUksQ0FDSEMsVUFBV3NMLEdBQUFBLGdCQUNYdkwsS0FBSyxRQUNMYyxRQUFTLGtCQUFNOFksRUFBUyxHQUFHLE9BSWhDSixFQUFjaEMsS0FHckIsRUFFQTZCLEdBQWE5WSxVQUFZLENBQ3ZCK1ksUUFBUzlZLElBQUFBLE1BQUFBLFdBQ1QrWSxVQUFXL1ksSUFBQUEsT0FBQUEsV0FDWGlaLGFBQWNqWixJQUFBQSxPQUFBQSxXQUNkZ1osY0FBZWhaLElBQUFBLEtBQUFBLFlBR2pCNlksR0FBYTVZLGFBQWUsQ0FDMUJnWixhQUFjLElBR2hCLFVDOURBLFNBQVNTLEdBQWVuYSxHQUN0QixJQUFRdVosRUFBOEJ2WixFQUE5QnVaLFFBQVMvRCxFQUFxQnhWLEVBQXJCd1YsT0FBUWxELEVBQWF0UyxFQUFic1MsU0FDbkI4SCxHQUFtQnJULEVBQUFBLEVBQUFBLFVBQVEsV0FDL0IsT0FBT3dTLEVBQVEvVSxLQUFJLFNBQUFvQyxHQUFLLE1BQUssQ0FBRUEsTUFBQUEsRUFBTyxHQUN4QyxHQUFHLENBQUMyUyxJQUVFYyxHQUFxQmxQLEVBQUFBLEVBQUFBLGNBQVksU0FBQTZOLEdBQ3JDLElBQU0vSyxFQUFRK0ssRUFBT2lCLFFBRW5CLGlCQUFNSyx3QkFBeUIsQ0FDN0JDLE9BQVFSLEtBQUFBLFVBQW9CZixFQUFPaUIsWUFJckMsMEJBQ0dqQixFQUFPcFMsUUFJWixPQUNFLGdDQUNHcUgsRUFDQStLLEVBQU9oVixjQUFlLGNBQUc5RCxVQUFXc0wsR0FBQUEsWUFBa0IsU0FBRXdOLEVBQU9oVixnQkFHdEUsR0FBRyxJQUVILE9BQ0UsaUJBQUs5RCxVQUFXc0wsR0FBQUEsT0FBYSxXQUMzQix1QkFBSWdLLEdBQVUsWUFDZCxTQUFDLEdBQVksQ0FDWCtELFFBQVNhLEVBQ1RWLGFBQWEsR0FDYkYsVUFBVSxRQUNWQyxjQUFlLFNBQUFoQyxHQUFPLE9BQUlBLElBQ3hCLFNBQUMsR0FBVSxDQUNUQSxRQUFTQSxFQUNUbkYsU0FBVSxTQUFBa0ksR0FBTSxPQUFJbEksRUFBU2tJLEVBQU81VCxNQUFNLEVBQzFDOFEsYUFBYzJDLEdBRWpCLE1BSVQsQ0FFQUYsR0FBYzNaLFVBQVksQ0FDeEIrWSxRQUFTOVksSUFBQUEsUUFBa0JBLElBQUFBLFFBQWtCMkwsV0FDN0NvSixPQUFRL1UsSUFBQUEsT0FDUjZSLFNBQVU3UixJQUFBQSxLQUFBQSxZQUdaLGs5REN6Qk8sU0FBU2dhLEdBQWlCLEdBQW1DLFFBQS9CNUQsS0FBQUEsT0FBSSxJQUFHLEdBQUMsRUFBQyxFQUFFdEksRUFBTSxFQUFOQSxPQUFRckIsRUFBUSxFQUFSQSxTQUNoRHFNLEVBQVVoTCxFQUFPckYsS0FDakJ0QyxFQUFRaVEsRUFBSzNLLE9BQ2J3TyxHQUFldlAsRUFBQUEsRUFBQUEsY0FBWSxTQUFBc0gsR0FDL0J2RixFQUFTLFNBQ0oySixHQUFJLElBQ1AzSyxPQUFRcU4sRUFBUTlHLEVBQU1uSCxPQUFPMUUsT0FDN0JxRixRQUFRLElBRVosR0FBRyxDQUFDNEssRUFBTTBDLEVBQVNyTSxJQUVuQixPQUNFLG1CQUFRaE4sVUFBV3lKLEdBQUFBLGNBQXNCbUUsU0FBVTRNLEVBQWM5VCxNQUFPMlMsRUFBUW9CLFFBQVEvVCxHQUFPLFNBQzVGMlMsRUFBUS9VLEtBQUksU0FBQ3ZFLEVBQU1pRixHQUFDLE9BQ25CLG1CQUFnQjBCLE1BQU8xQixFQUFFLFNBQUVqRixHQUFkaUYsRUFBNEIsS0FJakQsQ0FFTyxTQUFTMFYsR0FBd0IsR0FBbUMsUUFBL0IvRCxLQUFBQSxPQUFJLElBQUcsR0FBQyxFQUFDLEVBQUV0SSxFQUFNLEVBQU5BLE9BQVFyQixFQUFRLEVBQVJBLFNBQ3ZEcU0sRUE3Q1IsU0FBMkJoTCxHQUN6QixJQUFNOUksR0FBY29CLEVBQUFBLEVBQUFBLFlBQVcxQixJQUMvQixPQUFPNEIsRUFBQUEsRUFBQUEsVUFBUSxXQUNiLElBQUt3SCxFQUFPZ0wsUUFDVixNQUFPLEdBR1QsR0FBSTdJLE1BQU1DLFFBQVFwQyxFQUFPZ0wsU0FDdkIsT0FBT2hMLEVBQU9nTCxRQUdoQixJQUFLaEwsRUFBT2dMLFFBQVFzQixRQUNsQixNQUFNLElBQUkvWCxNQUFNLG1DQUdsQixJQUFNZ1ksRUFBU3JWLEVBQVk4SSxFQUFPZ0wsUUFBUXNCLFNBQzFDLE9BQUl0TSxFQUFPZ0wsUUFBUXdCLEtBQ1Z2VyxJQUFJc1csRUFBUXZNLEVBQU9nTCxRQUFRd0IsTUFHN0JELENBQ1QsR0FBRyxDQUFDclYsRUFBYThJLEVBQU9nTCxTQUMxQixDQXVCa0J5QixDQUFpQnpNLEdBQ2pDLEVBQWtDc0ksRUFBMUIzSyxPQUFRK08sT0FBUSxJQUFHLEtBQUUsRUFDdkJQLEdBQWV2UCxFQUFBQSxFQUFBQSxjQUFZLFNBQUE4UCxHQUMvQi9OLEVBQVMsU0FBSzJKLEdBQUksSUFBRTVLLFFBQVEsRUFBT0MsT0FBUStPLElBQzdDLEdBQUcsQ0FBQ3BFLEVBQU0zSixJQUVKZ08sRUFBYzNCLEVBQVE1VixPQUFTLEdBQ2pDd1gsR0FDQUMsR0FFSixPQUNFLFNBQUNGLEVBQVcsQ0FDVkQsU0FBVUEsRUFDVjFCLFFBQVNBLEVBQ1RyTSxTQUFVd04sR0FHaEIsQ0FFQSxTQUFTVSxHQUFxQixHQUFtQyxJQUEvQkgsRUFBUSxFQUFSQSxTQUFVMUIsRUFBTyxFQUFQQSxRQUFTck0sRUFBUSxFQUFSQSxTQUM3Q3dOLEdBQWV2UCxFQUFBQSxFQUFBQSxjQUFZLFNBQUFxUCxHQUMvQnROLEVBQ0UrTixFQUFTOVosU0FBU3FaLEdBQ2RTLEVBQVM1VyxRQUFPLFNBQUFJLEdBQUMsT0FBSUEsSUFBTStWLENBQU0sSUFBQyxhQUM5QlMsR0FBUSxDQUFFVCxJQUV0QixHQUFHLENBQUNTLEVBQVUvTixJQUVkLE9BQ0UsZUFBSWhOLFVBQVd5SixHQUFBQSxvQkFBMkIsU0FDdkM0UCxFQUFRL1UsS0FBSSxTQUFDZ1csRUFBUXRWLEdBQUMsT0FDckIseUJBQ0UsOEJBQ0Usa0JBQ0V3QixLQUFLLFdBQ0x3SCxRQUFTK00sRUFBUzlaLFNBQVNxWixHQUMzQjFNLFNBQVUsU0FBQTFDLEdBQUMsT0FBSXNQLEVBQWFGLEVBQU8sSUFFcENBLE1BUEl0VixFQVNKLEtBSWIsQ0FFQSxTQUFTaVcsR0FBZ0IsR0FBbUMsUUFBL0JGLEVBQVEsRUFBUkEsU0FBVTFCLEVBQU8sRUFBUEEsUUFBU3JNLEVBQVEsRUFBUkEsU0FDSCxNQUFmQyxFQUFBQSxFQUFBQSxXQUFTLEtBQU0sMG5CQUFwQ2tPLEVBQU0sS0FBRUMsRUFBUyxLQUNsQkMsR0FBWXBRLEVBQUFBLEVBQUFBLGNBQVksU0FBQXFQLEdBQzVCdE4sRUFBUyxHQUFELFVBQUsrTixHQUFRLENBQUVULEtBQ3ZCYyxHQUFVLEVBQ1osR0FBRyxDQUFDQSxFQUFXTCxFQUFVL04sSUFDbkJzTyxHQUFTclEsRUFBQUEsRUFBQUEsY0FBWSxTQUFBcVAsR0FDekJ0TixFQUFTK04sRUFBUzVXLFFBQU8sU0FBQXVDLEdBQUssT0FBSUEsSUFBVTRULENBQU0sSUFDcEQsR0FBRyxDQUFDUyxFQUFVL04sSUFJZCxPQUNFLGlDQUNFLGVBQUloTixVQUFXeUosR0FBQUEseUJBQWdDLFNBQzVDc1IsRUFBU3pXLEtBQUksU0FBQ2dXLEVBQVF0VixHQUFDLE9BQ3RCLHlCQUNFLGtCQUFNaEYsVUFBV3lKLEdBQUFBLGFBQW9CLFVBQ2xDNlEsRUFBTyxLQUNOLFNBQUMsRUFBSSxDQUNIdmEsS0FBSyxRQUNMQyxVQUFXeUosR0FBQUEsY0FDWDVJLFFBQVMsa0JBQU15YSxFQUFPaEIsRUFBTyxRQU41QnRWLEVBVUosT0FHVCxVQUFDLEdBQVksQ0FBQ3dFLFdBQVMsRUFBQzNJLFFBQVMsa0JBQU11YSxHQUFVLEVBQUssRUFBQyxXQUNyRCxTQUFDLEVBQUksQ0FBQ3JiLEtBQUssU0FBUyxVQUVyQm9iLElBQ0MsU0FBQyxHQUFLLENBQUN0UixVQUFXLGtCQUFNdVIsR0FBVSxFQUFNLEVBQUMsVUFDdkMsU0FBQyxHQUFhLENBQ1ovQixRQUFTQSxFQUNUakgsU0FBVWlKLFFBTXRCLENDeklBLFNBQVNFLEdBQVl6YixHQUNuQixJQUFRVixHQUFxQnVILEVBQUFBLEVBQUFBLFlBQVd6SCxHQUFoQ0UsaUJBQ0EySixFQUE0QmpKLEVBQTVCaUosTUFBT3VNLEVBQXFCeFYsRUFBckJ3VixPQUFRbEQsRUFBYXRTLEVBQWJzUyxTQUVqQmlILEdBQVV4UyxFQUFBQSxFQUFBQSxVQUFRLGtCQUN0QnpILEVBQWlCMkosRUFBTSxHQUN0QixDQUFDM0osRUFBa0IySixJQUV0QixPQUNFLGlCQUFLL0ksVUFBV3NMLEdBQUFBLE9BQWEsV0FDM0IsdUJBQUlnSyxLQUNKLFNBQUMsR0FBVSxDQUNUaUMsUUFBUzhCLEVBQ1RqSCxTQUFVQSxFQUNWb0YsYUFBYyxTQUFBc0IsR0FBTSxPQUFJQSxFQUFPcFUsSUFBSSxNQUkzQyxDQUVBNlcsR0FBV2piLFVBQVksQ0FDckJvRyxNQUFPbkcsSUFBQUEsSUFBQUEsV0FDUHdJLE1BQU94SSxJQUFBQSxPQUFBQSxXQUNQK1UsT0FBUS9VLElBQUFBLE9BQUFBLFdBQ1I2UixTQUFVN1IsSUFBQUEsS0FBQUEsWUFHWmdiLEdBQVcvYSxhQUFlLENBQ3hCa0csTUFBTyxJQUdULFVDcENhcUMsR0FBUXhJLElBQUFBLFVBQW9CLENBQ3ZDQSxJQUFBQSxNQUFnQixDQUFDLE9BQVEsUUFBUyxZQUNsQ0EsSUFBQUEsTUFBZ0IsQ0FBRWlHLEtBQU1qRyxJQUFBQSxNQUFnQixDQUFDLGtCQUN6Q0EsSUFBQUEsTUFBZ0IsQ0FDZHlJLEtBQU16SSxJQUFBQSxNQUNOOEgsSUFBSzlILElBQUFBLEtBQ0xSLEtBQU1RLElBQUFBLE9BQUFBLFdBQ05pRyxLQUFNakcsSUFBQUEsT0FBQUEsZUFJR2tFLEdBQVNsRSxJQUFBQSxRQUFrQndJLElBQzNCckMsR0FBUW5HLElBQUFBLFVBQW9CLENBQ3ZDQSxJQUFBQSxPQUNBQSxJQUFBQSxTQUVXcWEsR0FBU3JhLElBQUFBLE1BQWdCLENBQ3BDa0UsT0FBQUEsR0FDQUMsS0FBTWdDLEdBQU13RixXQUNacEksWUFBYXZELElBQUFBLE9BQ2J5RCxPQUFRekQsSUFBQUEsT0FDUjBELE9BQVExRCxJQUFBQSxTQUdKaWIsR0FBWSxDQUFFOVUsTUFBQUEsR0FBT2tVLE9BQUFBLElBQzNCWSxHQUFVL1csT0FBU2xFLElBQUFBLFFBQWtCQSxJQUFBQSxNQUFnQmliLEtBRTlDLElBQU01TyxHQUFPck0sSUFBQUEsTUFBZ0JpYixJQUV2QkMsR0FBVzdPLEdDckJ4QixTQUFTOE8sR0FBZTViLEdBQ3RCLElBQVF3VixFQUFpRXhWLEVBQWpFd1YsT0FBUWdFLEVBQXlEeFosRUFBekR3WixVQUFXMU0sRUFBOEM5TSxFQUE5QzhNLEtBQU03RCxFQUF3Q2pKLEVBQXhDaUosTUFBT0QsRUFBaUNoSixFQUFqQ2dKLFVBQVcvRSxFQUFzQmpFLEVBQXRCaUUsUUFBU3FPLEVBQWF0UyxFQUFic1MsU0FFcERoVCxHQUFxQnVILEVBQUFBLEVBQUFBLFlBQVd6SCxHQUFoQ0UsaUJBQ0YrYSxHQUFxQmxQLEVBQUFBLEVBQUFBLGNBQVksU0FBQTZOLEdBQ3JDLElBQU0vSyxFQUFRK0ssRUFBT2lCLFFBRW5CLGlCQUFNSyx3QkFBeUIsQ0FDN0JDLE9BQVFSLEtBQUFBLFVBQW9CZixFQUFPaUIsWUFJckMsMEJBQ0dqQixFQUFPcFUsT0FJWixPQUNFLGdDQUNHcUosRUFDQStLLEVBQU9oVixjQUFlLGNBQUc5RCxVQUFXc0wsR0FBQUEsWUFBa0IsU0FBRXdOLEVBQU9oVixnQkFHdEUsR0FBRyxJQUVHdVYsR0FBVXhTLEVBQUFBLEVBQUFBLFVBQVEsV0FDdEIsT0FBT3pILEVBQWlCMkosRUFBT0QsRUFBVXBFLEtBQU1YLEVBQ2pELEdBQUcsQ0FBQzNFLEVBQWtCMkosRUFBT0QsRUFBVy9FLElBRXhDLE9BQ0UsaUJBQUsvRCxVQUFXc0wsR0FBQUEsT0FBYSxXQUMzQix1QkFBSWdLLEtBQ0osU0FBQyxHQUFZLENBQ1grRCxRQUFTQSxFQUNURyxhQUFjNU0sRUFBS2xHLE9BQVMsR0FDNUI0UyxVQUFXQSxFQUNYQyxjQUFlLFNBQUFoQyxHQUFPLE9BQUlBLElBQ3hCLFNBQUMsR0FBVSxDQUNUQSxRQUFTQSxFQUNUbkYsU0FBVUEsRUFDVm9GLGFBQWMyQyxHQUVqQixNQUlULENEdkJxQjVaLElBQUFBLFFBQWtCcU0sSUN5QnZDOE8sR0FBY3BiLFVBQVksQ0FDeEJzTSxLQUFNNk8sR0FBU3ZQLFdBQ2ZuRCxNQUFPeEksSUFBQUEsVUFBb0IsQ0FDekJBLElBQUFBLE9BQ0FBLElBQUFBLE1BQWdCLENBQ2R5SSxLQUFNekksSUFBQUEsTUFDTjhILElBQUs5SCxJQUFBQSxLQUNMaUcsS0FBTWpHLElBQUFBLFdBRVAyTCxXQUNIb0osT0FBUS9VLElBQUFBLE9BQUFBLFdBQ1IrWSxVQUFXL1ksSUFBQUEsT0FBQUEsV0FDWHVJLFVBQVd2SSxJQUFBQSxPQUFBQSxXQUNYd0QsUUFBU3hELElBQUFBLE9BQUFBLFdBQ1Q2UixTQUFVN1IsSUFBQUEsS0FBQUEsWUFHWixpSUN0RUEsU0FBU29iLEdBQVc3YixHQUNsQixRQUFROE0sRUFBbUI5TSxFQUFuQjhNLEtBQU13RixFQUFhdFMsRUFBYnNTLFNBS1osTUFKb0JuRixFQUFBQSxFQUFBQSxVQUFTLENBQzdCOEIsRUFBR2tJLE9BQU9ySyxFQUFLbkksT0FBTyxHQUFHaUMsT0FDekJrVixFQUFHM0UsT0FBT3JLLEVBQUtuSSxPQUFPLEdBQUdpQyxPQUFTLElBQ2xDbVYsRUFBRzVFLE9BQU9ySyxFQUFLbkksT0FBTyxHQUFHaUMsT0FBUyxRQUNsQyxzNUJBSktvVixFQUFHLEtBQUVDLEVBQU0sS0FNWnZCLEdBQWV2UCxFQUFBQSxFQUFBQSxjQUFZLFlBQWEsSUFBVjZRLEVBQUcsRUFBSEEsSUFDbENDLEVBQU9ELEVBQ1QsR0FBRyxDQUFDQyxJQUVFQyxHQUFnQi9RLEVBQUFBLEVBQUFBLGNBQVksV0FDaENtSCxFQUFTLENBQ1AsQ0FBRTFMLE1BQU8ySSxLQUFLelAsTUFBTWtjLEVBQUkvTSxJQUN4QixDQUFFckksTUFBTzJJLEtBQUt6UCxNQUFjLElBQVJrYyxFQUFJRixJQUN4QixDQUFFbFYsTUFBTzJJLEtBQUt6UCxNQUFjLElBQVJrYyxFQUFJRCxLQUU1QixHQUFHLENBQUNDLEVBQUsxSixJQUVULE9BQ0UsNEJBQ0UsdUJBQUcsbUJBQ0gsU0FBQyxNQUFZLENBQ1g2SixNQUFPSCxFQUNQSSxjQUFjLEVBQ2RDLGlCQUFrQjNCLEtBRXBCLGNBQUdsUCxNQUFPLENBQUU4USxVQUFXLFVBQVcsVUFDaEMsU0FBQyxHQUFZLENBQUN2YixRQUFTbWIsRUFBYyxTQUFDLGdCQUk5QyxDQUVBTCxHQUFVcmIsVUFBWSxDQUNwQm9HLE1BQU9uRyxJQUFBQSxJQUFBQSxXQUNQK1UsT0FBUS9VLElBQUFBLE9BQUFBLFdBQ1J3SSxNQUFPeEksSUFBQUEsVUFBb0IsQ0FDekJBLElBQUFBLE1BQWdCLENBQ2R5SSxLQUFNekksSUFBQUEsTUFDTjhILElBQUs5SCxJQUFBQSxLQUNMaUcsS0FBTWpHLElBQUFBLFdBRVAyTCxXQUNIa0csU0FBVTdSLElBQUFBLEtBQUFBLFlBR1pvYixHQUFVbmIsYUFBZSxDQUN2QmtHLE1BQU8sSUFHVCx5Z0JDckRPLFNBQVMyVixHQUFnQkMsR0FDOUIsT0FBT0EsRUFBSzdYLE9BQU9oQixPQUFTLEVBQUMsQ0FDeEI2WSxHQUFJLHVEQUFLRCxHQUFlQyxFQUFLN1gsT0FBTywrTEFDckMsQ0FBQzZYLFFBQ1AsQ0FFTyxTQUFTQyxHQUFjLEdBQW1CLHFQQUFoQjdWLEVBQUssS0FBSzhWLEVBQUcsV0FFNUMsTUFBTyxDQUFFOVYsTUFBQUEsRUFBT2pDLE9BRGMsSUFBZitYLEVBQUkvWSxPQUFlLEdBQUssQ0FBQzhZLEdBQWVDLElBRXpELGlCQ0ZJLEdBQVUsQ0FBQyxFQUVmLEdBQVEzZCxrQkFBb0IsSUFDNUIsR0FBUUMsY0FBZ0IsSUFFbEIsR0FBUUMsT0FBUyxTQUFjLEtBQU0sUUFFM0MsR0FBUUMsT0FBUyxJQUNqQixHQUFRQyxtQkFBcUIsSUFFaEIsSUFBSSxLQUFTLElBQTFCLElBS08sR0FBZSxNQUFXLFlBQWlCLGlCQUFpQnFLLDZHQ3ZCbkUsSUFBTW1ULEdBQWdCLENBQUMsUUFBUyxPQUFRLFFBQVMsUUFDM0NDLEdBQWlCLENBQUMsUUFBUyxPQUFRLFFBQVMsUUFFbEQsU0FBU0MsR0FBWSxHQUErQixJQUEzQjVCLEVBQVEsRUFBUkEsU0FBVTZCLEVBQUcsRUFBSEEsSUFBS3hLLEVBQVEsRUFBUkEsU0FDdEMsT0FDRSxlQUFJcFMsVUFBV3NMLEdBQUFBLFVBQWdCLFNBQzVCc1IsRUFBSXRZLEtBQUksU0FBQ3VZLEVBQUs3WCxHQUFDLE9BQ2QsZUFFRWhGLFVBQVcrYSxFQUFTOVosU0FBUzRiLEdBQU92UixHQUFBQSxTQUFpQixHQUNyRHpLLFFBQVMsa0JBQU11UixFQUFTeUssRUFBSSxFQUFDLFNBQzdCQSxHQUhLN1gsRUFHSSxLQUluQixDQUVBLFNBQVM4WCxHQUFlLEdBQTBCLElBQXRCL0IsRUFBUSxFQUFSQSxTQUFVbk4sRUFBUSxFQUFSQSxTQUNwQyxTQUFTbVAsRUFBaUJDLFNBQ3hCcFAsRUFDRW1OLEVBQVM5WixTQUFTK2IsR0FDZGpDLEVBQVM1VyxRQUFPLFNBQUEwWSxHQUFHLE9BQUlBLElBQVFHLENBQVEsSUFBQywwREFDcENqQyxza0JBQVEsQ0FBRWlDLElBRXRCLENBQ0EsT0FDRSxpQ0FDRSxTQUFDTCxHQUFZLENBQUNDLElBQUtILEdBQWUxQixTQUFVQSxFQUFVM0ksU0FBVTJLLEtBQ2hFLFNBQUNKLEdBQVksQ0FBQ0MsSUFBS0YsR0FBZ0IzQixTQUFVQSxFQUFVM0ksU0FBVTJLLE1BR3ZFLENBRUFELEdBQWdCeGMsVUFBWSxDQUMxQnlhLFNBQVV4YSxJQUFBQSxRQUFrQkEsSUFBQUEsU0FHOUIsVUNoQ08sU0FBUzBjLEtBQ2QsT0FBTywwQkFBTSxLQUNmLENBRU8sU0FBU0MsR0FBZ0J0QyxHQUM5QixPQUFPQSxHQUFVLElBQUosT0FBUUEsRUFBT2xXLEtBQUksYUFBS2tXLEVBQU85VyxZQUM5QyxDQUVPLFNBQVNxWixHQUFjdkMsR0FBUSxNQUM5QmphLEVBQU9pYSxLQUFXQSxhQUFNLEVBQU5BLEVBQVE1VyxVQUFVNFcsU0FBWSxRQUFOLEVBQU5BLEVBQVFsVyxZQUFJLFdBQU4sRUFBTixFQUFjeEQsYUFFeEQsT0FEYTBaLGFBQU0sRUFBTkEsRUFBUTNXLFVBQVUsU0FBQyxFQUFJLENBQUNsRSxLQUFNNmEsRUFBTzNXLFVBQ25DdEQsSUFBUSxTQUFDc2MsR0FBTyxHQUNqQyxDQUVBLFNBQVNHLEdBQVd0ZCxHQUNsQixJQUFROE0sRUFBbUI5TSxFQUFuQjhNLEtBQU13RixFQUFhdFMsRUFBYnNTLFNBQ04xTCxFQUFrQ2tHLEVBQWxDbEcsTUFBT2tVLEVBQTJCaE8sRUFBM0JnTyxPQUFReUMsRUFBbUJ6USxFQUFuQnlRLGVBQ2pCdFAsRUFBUW1QLEdBQWV0QyxHQUV2QjVQLEdBQWNDLEVBQUFBLEVBQUFBLGNBQVksU0FBVXNILEdBQ3hDQSxFQUFNc0csa0JBQ056RyxFQUFTLENBQUV4RixLQUFBQSxHQUNiLEdBQUcsQ0FBQ0EsRUFBTXdGLElBRVYsT0FDRSxpQkFDRXBTLFVBQVdvSCxLQUFRLENBQ2pCcUMsR0FBQUEsV0FDV0gsSUFBVjVDLEdBQXVCMlcsSUFBbUI1VCxHQUFBQSxlQUMxQ3BKLEtBQUssS0FDUjBOLE1BQU9BLEVBQ1BsTixRQUFTbUssRUFBWSxTQUVwQm1TLEdBQWF2QyxJQUdwQixDQUVBd0MsR0FBVTljLFVBQVksQ0FDcEJzTSxLQUFNMFEsR0FBQUEsV0FDTmxMLFNBQVU3UixJQUFBQSxLQUFBQSxZQUdaLHFIQ0hBLE9BeENBLFNBQXdCLEdBQXNCLE1BQWxCcU0sRUFBSSxFQUFKQSxLQUFNd0YsRUFBUSxFQUFSQSxTQUMxQnBILEdBQWNDLEVBQUFBLEVBQUFBLGNBQVksU0FBVXNILEdBQ3hDQSxFQUFNc0csa0JBQ056RyxFQUFTLENBQUV4RixLQUFBQSxFQUFNcEcsS0FBTSxRQUN6QixHQUFHLENBQUNvRyxFQUFNd0YsSUFFSm1MLEdBQVExVyxFQUFBQSxFQUFBQSxVQUFRLGtCQUFNdkMsSUFBSStYLEdBQWV6UCxHQUFPLFNBQVMsR0FBRSxDQUFDQSxJQUM1RDRRLEdBQWEzVyxFQUFBQSxFQUFBQSxVQUFRLGtCQUN6QjBXLEVBQU1qWixJQUFJNlksSUFDUDdZLEtBQUksU0FBQzhELEVBQU9wRCxHQUFDLE9BQUssU0FBQyxFQUFBeVksU0FBUSxVQUFVclYsR0FBSnBELEVBQXFCLElBQ3REcEIsUUFBTyxTQUFDcUUsRUFBUUcsR0FBSyxPQUNGLElBQWxCSCxFQUFPeEUsT0FDSCxDQUFDMkUsR0FBTSwwREFDSEgsc2tCQUFNLENBQUUsSUFBS0csU0FBTSxHQUMxQixHQUFHLEdBQ1AsQ0FBQ21WLElBQ0V4UCxHQUFRbEgsRUFBQUEsRUFBQUEsVUFBUSxrQkFDcEIwVyxFQUFNalosSUFBSTRZLElBQWdCN2MsS0FBSyxNQUFNLEdBQ3BDLENBQUNrZCxJQUVFRyxPQUNrQnBVLEtBQVgsUUFBWCxFQUFBc0QsRUFBS2dPLGNBQU0sYUFBWCxFQUFhbFcsWUFDRTRFLElBQWZzRCxFQUFLbEcsT0FDTGtHLEVBQUt5USxlQUdQLE9BQ0UsaUJBQ0VyZCxVQUFXb0gsS0FBUSxDQUNqQnFDLEdBQUFBLEtBQ0FpVSxHQUFXalUsR0FBQUEsZUFDVnBKLEtBQUssS0FDUjBOLE1BQU9BLEVBQ1BsTixRQUFTbUssRUFBWSxTQUVwQndTLEdBR1AsRUMxQ08sU0FBU0csR0FBb0JDLEVBQWM5VSxHQUNoRCxJQUFNK1UsRUFBbUJqVyxJQUFJZ1csRUFBYyxNQUFPLENBQUMsR0FDN0NFLEVBQVcxWCxJQUFNMEMsRUFBVWdWLFNBQVUsUUFDM0MsTUFBTyxHQUFHQyxPQUNSalYsRUFBVXJFLFFBQVUsR0FDWSxZQUFoQ21ELElBQUlrQixFQUFXLGFBQ1hsQixJQUFJa1csRUFBU0QsRUFBaUJuWCxPQUFRLG1CQUFvQixJQUMxRCxHQUVSLHF1RUNSTyxTQUFTc1gsR0FBVzFCLEdBQ3pCLElBQU01SyxFQUFRLEdBT2QsT0FOQyxTQUFVdU0sRUFBVTNCLEdBQ25CLElBQU03WCxFQUFTNlgsRUFBSzdYLFFBQVUsR0FDOUJpTixFQUFNL00sS0FBSzJYLEdBQ1g3WCxFQUFPeVosUUFBUUQsRUFDaEIsQ0FKQSxDQUlFM0IsR0FFSTVLLENBQ1QsQ0FXTyxTQUFTeU0sR0FBV0MsRUFBWUMsR0FDckMsSUFBT0MsRUFBUCxHQUFnQkYsRUFBVzNaLE9BQU0sR0FBckIsR0FDTlQsRUFBUzRELElBQUkwVyxFQUFPLGdCQUFpQjFXLElBQUkwVyxFQUFPLFFBQVMsS0FFekRDLEdBRFkzVyxJQUFJMFcsRUFBTyxrQkFDSXRhLEVBQU9QLE9BQVMsRUFDM0MrYSxFQUFlSCxFQUFnQjVhLE9BQVMsRUFDeENnYixFQUFnQjdXLElBQUkwVyxFQUFPLFNBQVUsSUFBSTdhLE9BQVMsRUFFeEQsT0FBTzhhLEdBQWdCQyxHQUFnQkMsQ0FDekMsQ0FFTyxTQUFTQyxHQUFxQjNWLEdBQ25DLElBQU00VixFQUFnQixDQUNwQmpXLE1BQU8sZUFDUG1VLElBQUssa0JBQ0wvVCxVQUFXLG1CQUNYOFYsUUFBUyxpQkFDVC9hLFFBQVMsbUJBR1gsT0FBSWtGLEVBQU1oSixLQUNELFVBQVAsT0FBaUJnSixFQUFNaEosTUFJdkI0ZSxFQUFjNVYsSUFDZDRWLEVBQWM5YSxPQUVsQixDQUVPLFNBQVNnYixHQUFhblksRUFBT2pDLEVBQVFrRSxHQUF5QyxJQUFoQzVFLEVBQVUsVUFBSCw2Q0FBRyxPQUFRNkMsRUFBWSx1Q0FDM0VzQixFQUFPeEIsRUFDUG9DLEVBQVlsQixJQUFJZSxFQUFRQyxvQkFBb0I3RSxHQUFVbUUsRUFBTSxDQUFDLEdBQzdEbVcsRUFBa0JWLEdBQW1CbFosRUFBUXFFLEdBQzdDZ1YsRUFBVzFYLElBQU0wQyxFQUFVZ1YsU0FBVSxRQVUzQyxTQUFTZ0IsRUFBYWxTLEVBQU1tUyxHQUMxQixJQUFLblMsRUFDSCxNQUFPLENBQUVsRyxXQUFPNEMsRUFBV3lWLEtBQUFBLEVBQU10YSxPQUFRLElBRTNDLElBQVFpQyxFQUFrQ2tHLEVBQWxDbEcsTUFBT2pDLEVBQTJCbUksRUFBM0JuSSxPQUFRNFksRUFBbUJ6USxFQUFuQnlRLGVBQ2pCekMsRUFiUixTQUF5QmxVLEVBQU9zWSxHQUFJLE1BQ2xDLE1BQVcsWUFBUEEsRUFBeUJsQixFQUFTcFgsR0FDbENzWSxFQUFHM1csS0FBTzJXLEVBQUdoVyxNQUVELGdCQUFaZ1csRUFBR3hZLEtBRnVCLENBQUU5QixLQUFNZ0MsR0FHL0JpQyxTQUFhLFFBQU4sRUFBUEEsRUFBVXFXLFVBQUcsV0FBTixFQUFQLEVBQWdCdFksRUFDekIsQ0FPaUJ1WSxDQUFldlksRUFBT3FZLEdBRXJDLE1BQU8sQ0FDTHJZLE1BQUFBLEVBQ0EyVyxlQUFBQSxFQUNBMEIsS0FBQUEsRUFDQW5FLE9BQVEsU0FDSEEsR0FBTSxJQUNUNVcsT0FBUTRELElBQUloQixFQUFjLENBQUNnVSxhQUFNLEVBQU5BLEVBQVE3YSxLQUFNLFVBQVc2YSxhQUFNLEVBQU5BLEVBQVE1VyxRQUM1REMsT0FBUTJELElBQUloQixFQUFjLENBQUNnVSxhQUFNLEVBQU5BLEVBQVE3YSxLQUFNLFVBQVc2YSxhQUFNLEVBQU5BLEVBQVEzVyxVQUU5RFEsT0FBUW1ELElBQUlnVCxFQUFRLFNBQVUsSUFBSXRXLEtBQUksU0FBQ3lhLEVBQU0vWixHQUFDLE9BQzVDOFosRUFBWXJhLEVBQU9PLEdBQUkrWixFQUFLLElBR2xDLENBRUEsTUFBTyxDQUNMclksTUFBQUEsRUFDQXFZLEtBQU0sWUFDTm5FLE9BQVE5UixFQUNSckUsT0FBUTRaLEVBQWdCL1osS0FBSSxTQUFDeWEsRUFBTS9aLEdBQUMsT0FDbEM4WixFQUFZcmEsRUFBT08sR0FBSStaLEVBQUssSUFHbEMsNGhDQzlFQSxJQUFNRyxHQUFlLENBQ25CQyxNQUFPLEtBQ1BDLE1BQU8sS0FDUEMsS0FBTSxLQUNOQyxLQUFNLEtBQ05DLE1BQU8sS0FDUEMsTUFBTyxLQUNQQyxLQUFNLEtBQ05DLEtBQU0sTUFHUixTQUFTdkYsR0FBb0JyQixHQUMzQixJQUFNL0ssRUFBUStLLEVBQU9pQixRQUNqQixpQkFBTUssd0JBQXlCLENBQUVDLE9BQVFSLEtBQUFBLFVBQW9CZixFQUFPaUIsWUFDcEUsMEJBQU9qQixFQUFPcFUsT0FFbEIsT0FDRSxnQ0FDR3FKLEdBQ0QsY0FBRy9OLFVBQVcyZixHQUFBQSxZQUE0QixTQUFFN0csRUFBT2hWLGdCQUd6RCxDQUVBLFNBQVM4YixHQUFhLEdBQWlDLElBQTdCaFQsRUFBSSxFQUFKQSxLQUFNd0YsRUFBUSxFQUFSQSxTQUFVdEosRUFBUyxFQUFUQSxVQUN4QyxHQUFvRG5DLEVBQUFBLEVBQUFBLFlBQVd6SCxHQUF2REUsRUFBZ0IsRUFBaEJBLGlCQUFrQnVKLEVBQU8sRUFBUEEsUUFBUy9CLEVBQVksRUFBWkEsYUFFN0IyVyxHQUFRMVcsRUFBQUEsRUFBQUEsVUFBUSxrQkFBTXZDLElBQUkrWCxHQUFlelAsR0FBTyxTQUFTLEdBQUUsQ0FBQ0EsSUFDNURpVCxFQUFvQyxJQUFqQnRDLEVBQU05WixPQUFlLEdBQUs4WixFQUFNL1AsTUFBTSxHQUFJLEdBQ3NCLE1BQXZDUCxFQUFBQSxFQUFBQSxVQUFTM0ksSUFBSXViLEVBQWtCLFNBQVEsR0FBbEZDLEVBQWlCLEtBQUVDLEVBQW9CLEtBQ3NCLE1BQXRCOVMsRUFBQUEsRUFBQUEsVUFBU3NRLEVBQU15QyxJQUFJLElBQUcsR0FBN0RDLEVBQWUsS0FBRUMsRUFBa0IsS0FFcEM3RyxHQUFVeFMsRUFBQUEsRUFBQUEsVUFBUSxXQU90QixPQURjekgsRUFBaUIsT0FBUTBKLEVBQVVwRSxNQUNwQ1AsUUFBTyxTQUFBTyxHQUFJLE9BQTJCLElBQXZCQSxFQUFLRCxPQUFPaEIsTUFBWSxHQUN0RCxHQUFHLENBQUNyRSxFQUFrQjBKLElBSWhCcVgsRUFBV3RCLEdBQ2YsTUFDQSxDQUFDLENBQUVuWSxNQUFPdVosYUFBZSxFQUFmQSxFQUFpQnZiLEtBQU1ELE9BQVF3YixhQUFlLEVBQWZBLEVBQWlCeGIsU0FDMURrRSxPQUNBVyxFQUNBMUMsR0FHSXVTLEdBQVNsTyxFQUFBQSxFQUFBQSxjQUFZLFNBQVVwSCxFQUFTdWMsR0FDNUMsTUFBTUMsRUFBb0JELEVBQVU5YixLQUFJLFNBQUF1WSxHQUFHLE9BQUlxQyxHQUFhckMsRUFBSSxJQUMxRFAsRUFBT0MsR0FBZW5WLEtBQVEsR0FBRCx1REFBS2laLDBTQUFpQixDQUFFeGMsYUFBTyxFQUFQQSxFQUFTYSxTQUVwRTBOLEVBQVNrSyxFQUNYLEdBQUcsQ0FBQ2xLLElBRUVrTyxHQUFzQnJWLEVBQUFBLEVBQUFBLGNBQVksU0FBQzZOLEVBQVF2RyxHQUM1QixhQUFmQSxFQUFNL0wsS0FLVjBaLEVBQW1CcEgsR0FKakJLLEVBQU9MLEVBQVFnSCxFQUtuQixHQUFHLENBQUMzRyxFQUFRMkcsRUFBbUJJLElBVS9CLE9BQ0UsaUJBQUtsZ0IsVUFBVzJmLEdBQUFBLE9BQXVCLFdBQ3JDLGlCQUFLclUsTUFBTyxDQUFFZixRQUFTLE9BQVFnVyxJQUFLLFFBQVMsV0FDM0MsNEJBQ0UsdUJBQUcsYUFDSCxTQUFDLEdBQVUsQ0FBQ3ZnQixVQUFXeUosR0FBQUEsZUFBdUJrSSxZQUFZLEVBQU0sVUFDOUQsU0FBQyxHQUFlLENBQ2QvRSxLQUFNdVQsRUFBUzFiLE9BQU8sR0FDdEIyTixTQUFVLFdBQU8sVUFJdkIsNEJBQ0UsdUJBQUcsZUFDSCxTQUFDLEdBQWUsQ0FDZDJJLFNBQVUrRSxFQUNWbFMsU0FBVW1TLFdBSWhCLHVCQUFHLHdCQUNILFNBQUMsR0FBWSxDQUNYMUcsUUFBU0EsRUFDVEcsYUFBY3lHLGFBQWUsRUFBZkEsRUFBaUJ2YixLQUMvQjRVLFVBQVUsT0FDVkMsY0FBZSxTQUFBaEMsR0FBTyxPQUFJQSxJQUN4QixTQUFDLEdBQVUsQ0FDVEEsUUFBU0EsRUFDVG5GLFNBQVVrTyxFQUNWOUksYUFBYzJDLElBRWpCLEtBRUgsU0FBQzVGLEdBQUcsQ0FBQ3ZVLFVBQVd5SixHQUFBQSxjQUFxQixTQUFDLGlEQUd0QyxlQUFHNkIsTUFBTyxDQUFFOFEsVUFBVyxVQUFXLFdBQ2hDLFNBQUMsR0FBWSxDQUFDdmIsUUE3Q3BCLFdBQ0VzWSxFQUFPOEcsRUFBaUJILEVBQzFCLEVBMkMyQyxTQUFDLGFBQ3RDLFNBQUMsR0FBWSxDQUFDamYsUUExQ3BCLFdBQ0V1UixFQUFTeEYsRUFDWCxFQXdDMkNwRCxXQUFTLFdBQUMsZ0JBSXZELENBRUFvVyxHQUFjdGYsVUFBWSxDQUN4QnNNLEtBQU02TyxHQUFTdlAsV0FDZm5ELE1BQU94SSxJQUFBQSxVQUFvQixDQUN6QkEsSUFBQUEsT0FDQUEsSUFBQUEsTUFBZ0IsQ0FDZHlJLEtBQU16SSxJQUFBQSxNQUNOOEgsSUFBSzlILElBQUFBLEtBQ0xpRyxLQUFNakcsSUFBQUEsV0FFUDJMLFdBQ0hvSixPQUFRL1UsSUFBQUEsT0FBQUEsV0FDUitZLFVBQVcvWSxJQUFBQSxPQUFBQSxXQUNYdUksVUFBV3ZJLElBQUFBLE9BQUFBLFdBQ1h3RCxRQUFTeEQsSUFBQUEsT0FBQUEsV0FDVDZSLFNBQVU3UixJQUFBQSxLQUFBQSxZQUdaLHFIQ3pKQSxTQUFTMFksR0FBWXJNLEdBQ2ZBLElBQ0ZBLEVBQUtzTSxRQUNMdE0sRUFBS3VNLFNBRVQsQ0FFQSxTQUFTcUgsR0FBZ0IxZ0IsR0FDdkIsUUFBZTJnQixFQUFrQzNnQixFQUF6QzRHLE1BQXFCcUMsRUFBb0JqSixFQUFwQmlKLE1BQU9xSixFQUFhdFMsRUFBYnNTLFNBQ1ksTUFBdEJuRixFQUFBQSxFQUFBQSxVQUFTd1QsS0FBYSxzNUJBQXpDL1osRUFBSyxLQUFFZ2EsRUFBUSxLQUVoQnZOLEdBQWdCbEksRUFBQUEsRUFBQUEsY0FBWSxTQUFBc0gsR0FDZCxVQUFkQSxFQUFNbkcsS0FDUmdHLEVBQVMsQ0FBRTFOLEtBQU1nQyxHQUVyQixHQUFHLENBQUNBLEVBQU8wTCxJQUVMNEgsR0FBaUIvTyxFQUFBQSxFQUFBQSxjQUFZLFNBQUFzSCxHQUNqQyxJQUFJN0wsRUFBUTZMLEVBQU1uSCxPQUFPMUUsTUFFTixXQUFmcUMsRUFBTXZDLE9BQ1JFLEVBQVF1USxPQUFPdlEsR0FDWHVRLE9BQU8wSixNQUFNamEsS0FLbkJnYSxFQUFTaGEsRUFDWCxHQUFHLENBQUNxQyxFQUFPMlgsSUFFWCxPQUNFLGlCQUFLMWdCLFVBQVdzTCxHQUFBQSxPQUFhLFdBQzNCLHVCQUFHLHFCQUNILGtCQUNFRSxJQUFLeU4sR0FDTHpTLEtBQUssT0FDTEUsTUFBT0EsRUFDUGtILFNBQVVvTSxFQUNWNEcsVUFBV3pOLE1BSW5CLENBRUFxTixHQUFlbGdCLFVBQVksQ0FDekJvRyxNQUFPbkcsSUFBQUEsSUFBQUEsV0FDUCtVLE9BQVEvVSxJQUFBQSxPQUFBQSxXQUNSd0ksTUFBT3hJLElBQUFBLFVBQW9CLENBQ3pCQSxJQUFBQSxNQUFnQixDQUNkeUksS0FBTXpJLElBQUFBLE1BQ044SCxJQUFLOUgsSUFBQUEsS0FDTGlHLEtBQU1qRyxJQUFBQSxXQUVQMkwsV0FDSGtHLFNBQVU3UixJQUFBQSxLQUFBQSxZQUdaaWdCLEdBQWVoZ0IsYUFBZSxDQUM1QmtHLE1BQU8sSUFHVCx3akNDOURBLElBQU1tYSxHQUF5QixTQUtsQkMsR0FBZSxTQUFBeGIsR0FBSyxPQUFJQSxFQUFNaEQsU0FBU1EsT0FBTzJGLE1BQU0sRUFFM0RzWSxJQUFjQyxFQUFBQSxHQUFBQSxJQUFZLENBQzlCamhCLEtBQU0sU0FDTmtoQixhQUFjLEdBQ2RDLFNBQVUsQ0FDUkMsWUFBVyxTQUFFN2IsRUFBT21RLEdBQ2xCblEsRUFBTVgsS0FBSyxDQUNUNUUsS0FBTSxVQUFGLE9BQVl1RixFQUFNN0IsUUFDdEI1QixTQUFVdWYsS0FBTTNMLEVBQU80TCxRQUFRM00sY0FBYyxrQkFiMUIsV0FBK0IsTUFBTSxDQUM5RGhPLE1BRGtDLFVBQUgsNkNBQUdtYSxHQUMzQnBjLE9BQVEsR0FDaEIsQ0FXMEQ2YyxFQUFvQixLQUUzRSxFQUNBQyxvQkFBbUIsU0FBRWpjLEVBQU9tUSxHQUMxQixJQUFRK0wsRUFBZS9MLEVBQU80TCxRQUF0QkcsV0FDUjVjLE9BQU9DLE9BQU9TLEVBQU1rYyxHQUFhelEsS0FBSzBFLEVBQU80TCxRQUFTLENBQUMsT0FBUSxVQUNqRSxFQUNBSSxZQUFXLFNBQUVuYyxFQUFPbVEsR0FDbEJuUSxFQUFNbVEsRUFBTzRMLFFBQVEzUCxPQUFPM1IsS0FBTzBWLEVBQU80TCxRQUFRdGhCLElBQ3BELEVBQ0EyaEIsWUFBVyxTQUFFcGMsRUFBT21RLEdBQ2xCblEsRUFBTXFjLE9BQU9sTSxFQUFPNEwsUUFBUTNQLE1BQU8sRUFDckMsRUFDQWtRLGlCQUFnQixTQUFFdGMsRUFBT21RLEdBQ3ZCblEsRUFBTW1RLEVBQU80TCxRQUFRRyxZQUFZM2YsU0FBUzRULEVBQU80TCxRQUFRUSxXQUFhcE0sRUFBTzRMLFFBQVFTLE9BQ3ZGLEVBQ0FDLHFCQUFvQixTQUFFemMsRUFBT21RLEdBQzNCblEsRUFBTW1RLEVBQU80TCxRQUFRRyxZQUFZUSxlQUFldk0sRUFBTzRMLFFBQVFZLGFBQWV4TSxFQUFPNEwsUUFBUXhmLFFBQy9GLEVBQ0FxZ0IsNEJBQTJCLFNBQUU1YyxFQUFPbVEsR0FBUSxJQUNxQixFQURyQixLQUNwQm5RLEVBQU1tUSxFQUFPNEwsUUFBUUcsWUFBWTNmLFVBQVEsSUFBL0QsSUFBSyxFQUFMLHFCQUFpRSxLQUF0RGlnQixFQUFPLFFBQ00sV0FBbEJBLEVBQVFwYixRQUNWb2IsRUFBUXBiLE1BQVEsTUFDaEJvYixFQUFRcmQsT0FBUyxHQUVyQixDQUFDLCtCQUNILEVBQ0EwZCx3QkFBdUIsU0FBRTdjLEVBQU9tUSxHQUFRLElBQ3lCLEVBRHpCLEtBQ2hCblEsRUFBTW1RLEVBQU80TCxRQUFRRyxZQUFZM2YsVUFBUSxJQUEvRCxJQUFLLEVBQUwscUJBQWlFLEtBQXREaWdCLEVBQU8sUUFDTSxXQUFsQkEsRUFBUXBiLFFBQ1ZvYixFQUFRcGIsTUFBUSxRQUNoQm9iLEVBQVFyZCxPQUFTLEdBRXJCLENBQUMsK0JBQ0gsRUFDQTJkLHFCQUFvQixTQUFFOWMsRUFBT21RLEdBQVEsSUFDNEIsRUFENUIsS0FDYm5RLEVBQU1tUSxFQUFPNEwsUUFBUUcsWUFBWTNmLFVBQVEsSUFBL0QsSUFBSyxFQUFMLHFCQUFpRSxLQUF0RGlnQixFQUFPLFFBQ00sVUFBbEJBLEVBQVFwYixRQUNWb2IsRUFBUXBiLE1BQVEsTUFDaEJvYixFQUFRcmQsT0FBUyxHQUVyQixDQUFDLCtCQUNILEVBQ0E0ZCx3QkFBdUIsU0FBRS9jLEVBQU9tUSxHQUFRLElBQ3lCLEVBRHpCLEtBQ2hCblEsRUFBTW1RLEVBQU80TCxRQUFRRyxZQUFZM2YsVUFBUSxJQUEvRCxJQUFLLEVBQUwscUJBQWlFLEtBQXREaWdCLEVBQU8sUUFDTSxVQUFsQkEsRUFBUXBiLFFBQ1ZvYixFQUFRcGIsTUFBUSxTQUNoQm9iLEVBQVFyZCxPQUFTLEdBRXJCLENBQUMsK0JBQ0gsRUFDQTZkLGlDQUFnQyxTQUFFaGQsRUFBT21RLEdBQVEsSUFDZ0IsRUFEaEIsS0FDekJuUSxFQUFNbVEsRUFBTzRMLFFBQVFHLFlBQVkzZixVQUFRLElBQS9ELElBQUssRUFBTCxxQkFBaUUsT0FBdERpZ0IsRUFBTyxRQUNNLFFBQWxCQSxFQUFRcGIsT0FBcUMsUUFBbEIsRUFBQ29iLEVBQVFyZCxPQUFPLFVBQUUsT0FBakIsRUFBbUJpQyxRQUNqRG9iLEVBQVFwYixNQUFRLFNBQ2hCb2IsRUFBUXJkLE9BQVMsR0FFckIsQ0FBQywrQkFDSCxFQUNBOGQsMEJBQXlCLFNBQUVqZCxFQUFPbVEsR0FBUSxJQUN1QixFQUR2QixLQUNsQm5RLEVBQU1tUSxFQUFPNEwsUUFBUUcsWUFBWTNmLFVBQVEsSUFBL0QsSUFBSyxFQUFMLHFCQUFpRSxPQUF0RGlnQixFQUFPLFFBQ00sUUFBbEJBLEVBQVFwYixPQUFxQyxRQUFsQixFQUFDb2IsRUFBUXJkLE9BQU8sVUFBRSxPQUFqQixFQUFtQmlDLFFBQ2pEb2IsRUFBUXBiLE1BQVEsUUFDaEJvYixFQUFRcmQsT0FBUyxHQUVyQixDQUFDLCtCQUNILEtBSUcsR0FhSHNjLEdBQVkvSyxRQVpkbUwsR0FBVyxHQUFYQSxZQUNBTSxHQUFXLEdBQVhBLFlBQ0FDLEdBQVcsR0FBWEEsWUFDQUgsR0FBbUIsR0FBbkJBLG9CQUNBSyxHQUFnQixHQUFoQkEsaUJBQ0FHLEdBQW9CLEdBQXBCQSxxQkFDQUcsR0FBMkIsR0FBM0JBLDRCQUNBQyxHQUF1QixHQUF2QkEsd0JBQ0FDLEdBQW9CLEdBQXBCQSxxQkFDQUMsR0FBdUIsR0FBdkJBLHdCQUNBQyxHQUFnQyxHQUFoQ0EsaUNBQ0FDLEdBQXlCLEdBQXpCQSwwQkFHRixHQUFleEIsR0FBbUIsUUMvRmxDLFNBQVN5QixHQUFXLEdBQWdCLElBQVpwUSxFQUFRLEVBQVJBLFNBQ2hCM0osR0FBU2hELEVBQUFBLEVBQUFBLElBQVlxYixJQUNyQnpILEdBQVV4UyxFQUFBQSxFQUFBQSxVQUFRLGtCQUFNNEIsRUFBT25FLEtBQUksU0FBQ29FLEVBQU8xRCxHQUFDLE1BQU0sQ0FDdEROLEtBQU1NLEVBQ05sQixZQUFhNEUsRUFBTTNJLE1BQVEsU0FBSixPQUFhaUYsR0FDckMsR0FBRSxHQUFFLENBQUN5RCxJQUVOLE9BQ0UsaUJBQUt6SSxVQUFXc0wsR0FBQUEsT0FBYSxXQUMzQix1QkFBRyxrQkFDSCxTQUFDLEdBQVUsQ0FDVGlNLFFBQVM4QixFQUNUakgsU0FBVUEsRUFDVm9GLGFBQWMsU0FBQXNCLEdBQU0sT0FDbEIsZ0NBQ0dBLEVBQU9wVSxLQUNQb1UsRUFBT2hWLGNBQWUsY0FBRzlELFVBQVdzTCxHQUFBQSxZQUFrQixTQUFFd04sRUFBT2hWLGdCQUMvRCxNQUtiLENBRUEwZSxHQUFZbGlCLFVBQVksQ0FDdEJvRyxNQUFPbkcsSUFBQUEsT0FBQUEsV0FDUHVJLFVBQVd2SSxJQUFBQSxPQUFBQSxXQUNYNlIsU0FBVTdSLElBQUFBLEtBQUFBLFlBR1ppaUIsR0FBWWhpQixhQUFlLENBQ3pCa0csTUFBTyxJQUdULHd0Q0M1QkEsU0FBUytiLEdBQWEzaUIsR0FDcEIsSUFBUThNLEVBQW1DOU0sRUFBbkM4TSxLQUFNcEcsRUFBNkIxRyxFQUE3QjBHLEtBQU1rYyxFQUF1QjVpQixFQUF2QjRpQixTQUFVdFEsRUFBYXRTLEVBQWJzUyxTQUN4QnVRLEdBQWM1UixFQUFBQSxFQUFBQSxNQUFLalIsRUFBTyxDQUM5QixPQUFRLFFBQVMsU0FBVSxRQUFTLE9BQVEsWUFBYSxVQUFXLGNBR2hFOGlCLEdBQWtCL2IsRUFBQUEsRUFBQUEsVUFBUSxXQUFNLE1BRXBDLE1BQWEsV0FBVEwsR0FBNkMsc0JBQWIsUUFBWCxFQUFBb0csRUFBS2dPLGNBQU0sYUFBWCxFQUFhaUksUUFBc0NDLEdBQ3hFbFcsRUFBS21TLEtBQUsxVyxLQUVTLGdCQUFuQnVFLEVBQUttUyxLQUFLdlksS0FGWWdhLEdBR3RCNVQsRUFBS21TLEtBQUsvVixLQUFhdVMsR0FDVCxTQUFkM08sRUFBS21TLEtBQXdCYSxHQUNmLFVBQWRoVCxFQUFLbVMsS0FBeUJ5RCxHQUMzQjlHLEVBQ1QsR0FBRyxDQUFDOU8sRUFBTXBHLElBRVYsT0FDRSxTQUFDLEdBQUssQ0FBQ3FELFVBQVc2WSxFQUFTLFVBQ3pCLFNBQUNFLEVBQWUsU0FDVkQsR0FBVyxJQUNmNVosTUFBTzZELEVBQUttUyxLQUNaM00sU0FBVUEsTUFJbEIsQ0FFQXFRLEdBQVluaUIsVUFBWSxDQUN0QmtHLEtBQU1qRyxJQUFBQSxPQUFBQSxXQUNOcU0sS0FBTTZPLEdBQVN2UCxXQUNmcEQsVUFBV3ZJLElBQUFBLE9BQUFBLFdBQ1grVSxPQUFRL1UsSUFBQUEsT0FBQUEsV0FDUitZLFVBQVcvWSxJQUFBQSxPQUFBQSxXQUNYd2lCLGdCQUFpQnhpQixJQUFBQSxPQUNqQm1pQixTQUFVbmlCLElBQUFBLEtBQUFBLFdBQ1Y2UixTQUFVN1IsSUFBQUEsS0FBQUEsWUFHWmtpQixHQUFZamlCLGFBQWUsQ0FDekJnRyxLQUFNLFFBQ05FLE1BQU8sR0FDUHNjLFVBQVUsRUFDVkQsZ0JBQWlCLElBR25CLCt2QkM1RE8sSUFBTUUsR0FBZSxTQUFDN0wsRUFBTzFGLEdBQUssbUJBQ3BDMEYsRUFBTTVKLE1BQU0sRUFBR2tFLElBQU0sR0FDckIwRixFQUFNNUosTUFBTWtFLEVBQVEsSUFBRSxFQUdkd1IsR0FBZSxTQUFDOUwsRUFBTzFGLEVBQU9oTCxHQUFLLG1CQUMzQzBRLEVBQU01SixNQUFNLEVBQUdrRSxJQUFNLENBQ3hCaEwsR0FBSyxHQUNGMFEsRUFBTTVKLE1BQU1rRSxFQUFRLElBQUUsMDhEQ0NaLFNBQVN5UixHQUF1QixHQUF3QyxZQUFwQ3hNLEtBQUFBLE9BQUksSUFBRyxHQUFDLEVBQUMsTUFBRXRJLE9BQUFBLE9BQU0sSUFBRyxHQUFDLEVBQUMsRUFBRXJCLEVBQVEsRUFBUkEsU0FDekUsRUFBbUMySixFQUEzQjNLLE9BQVFvWCxPQUFTLElBQUcsS0FBRSxFQUN0QjNmLEVBQVc0SyxFQUFYNUssT0FDb0MsTUFBZHdKLEVBQUFBLEVBQUFBLFVBQVMsUUFBSywwbkJBQXJDb1csRUFBTyxLQUFFQyxFQUFVLEtBRXBCQyxHQUFnQnRZLEVBQUFBLEVBQUFBLGNBQVksV0FDaEMrQixFQUFTLFNBQ0oySixHQUFJLElBQ1A1SyxRQUFRLEVBQ1JDLE9BQVEsR0FBRixVQUFNb1gsR0FBUyxDQUFFLFFBR3pCRSxFQUFXRixFQUFVM2YsT0FDdkIsR0FBRyxDQUFDa1QsRUFBTXlNLEVBQVdwVyxFQUFVc1csSUFFekJFLEdBQWdCdlksRUFBQUEsRUFBQUEsY0FBWSxTQUFBNk4sR0FDaEM5TCxFQUFTLFNBQ0oySixHQUFJLElBQ1A1SyxRQUFRLEVBQ1JDLE9BQVFrWCxHQUFhRSxFQUFXQyxFQUFTdkssRUFBT3BVLFNBR2xENGUsRUFBVyxLQUNiLEdBQUcsQ0FBQzNNLEVBQU15TSxFQUFXQyxFQUFTclcsSUFFeEJ5VyxHQUFnQnhZLEVBQUFBLEVBQUFBLGNBQVksU0FBQXlHLEdBQ2hDMUUsRUFBUyxTQUNKMkosR0FBSSxJQUNQNUssUUFBUSxFQUNSQyxPQUFRaVgsR0FBYUcsRUFBVzFSLEtBRXBDLEdBQUcsQ0FBQ2lGLEVBQU15TSxFQUFXcFcsSUFFckIsT0FDRSw0QkFDRSxlQUFJaE4sV0FBV29ILEVBQUFBLEVBQUFBLFNBQVEsQ0FDckJxQyxHQUFBQSxzQkFDVyxJQUFYaEcsR0FBZ0JnRyxHQUFBQSwyQkFDZnBKLEtBQUssS0FBSyxTQUNWK2lCLEVBQVU5ZSxLQUFJLFNBQUNvZixFQUFTMWUsR0FBQyxPQUN4Qix5QkFDRSxrQkFDRWhGLFVBQVd5SixHQUFBQSxhQUNYNUksUUFBUyxrQkFBTXlpQixFQUFXdGUsRUFBRSxFQUFDLFVBRTVCMGUsRUFDVyxJQUFYamdCLElBQ0MsU0FBQyxFQUFJLENBQ0gxRCxLQUFLLFFBQ0xDLFVBQVd5SixHQUFBQSxjQUNYNUksUUFBUyxTQUFBMFIsR0FDUEEsRUFBTXNHLGtCQUNONEssRUFBY3plLEVBQ2hCLFFBYkNBLEVBaUJKLE1BR0ksT0FBWnFlLElBQ0MsU0FBQyxHQUFXLENBQ1Z6VyxLQUFNLENBQUVsRyxNQUFPMGMsRUFBVUMsR0FBVTVlLE9BQVEsR0FBSXNhLEtBQU0sYUFDckR2WSxLQUFLLFFBQ0x6QyxRQUFRLE9BQ1IrRSxVQUFXLENBQUVwRSxLQUFNMGUsRUFBVUMsSUFDN0IvTixPQUFPLGtCQUNQZ0UsVUFBVSxPQUNWbEgsU0FBVW9SLEVBQ1ZkLFNBQVUsa0JBQU1ZLEVBQVcsS0FBSyxJQUduQzdmLEdBQVUyZixFQUFVM2YsT0FBU0EsSUFDNUIsVUFBQyxHQUFZLENBQUMrRixXQUFTLEVBQUMzSSxRQUFTMGlCLEVBQWMsV0FDN0MsU0FBQyxFQUFJLENBQUN4akIsS0FBSyxTQUFTLHFCQUs5QiwwekNDcEZBLElBQU00akIsR0FBYSxDQUNqQnBaLFFBQVMsZUFDVHFaLE9BQVEsVUFDUkMsY0FBZSxXQUNmQyxPQUFRLHFDQUNSQyxhQUFjLE9BRVZDLEdBQWEsQ0FDakJ6WixRQUFTLE9BQ1RDLGVBQWdCLFNBQ2hCQyxXQUFZLFNBQ1pQLE1BQU8sT0FDUEMsT0FBUSxPQUNSdUcsT0FBUSxNQUNScVQsYUFBYyxPQWlDaEIsR0E5QkEsU0FBMEIsR0FBc0IsUUFBbEJuWCxFQUFJLEVBQUpBLEtBQU13RixFQUFRLEVBQVJBLFNBQ2xDLEtBQThCeEYsRUFBdEJuSSxTQUFNLHM1QkFBR3NLLEVBQUMsS0FBRTZNLEVBQUMsS0FBRXBZLEVBQUMsS0FFbEJ5Z0IsR0FBcUJoWixFQUFBQSxFQUFBQSxjQUFZLFdBQ3JDbUgsRUFBUyxDQUFFeEYsS0FBQUEsRUFBTXBHLEtBQU0sVUFDekIsR0FBRyxDQUFDb0csRUFBTXdGLElBRUo1SixHQUFVM0IsRUFBQUEsRUFBQUEsVUFBUSxpQkFDdEIsQ0FBQ2tJLEVBQUc2TSxFQUFHcFksR0FBRzhRLE1BQUssU0FBQS9QLEdBQUMsWUFBZ0IrRSxJQUFaL0UsRUFBRW1DLEtBQW1CLEdBQUMsR0FDekMsQ0FBQ3FJLEVBQUc2TSxFQUFHcFksSUFFSjRHLEVBQWtCLE9BQUgsT0FBVTJFLEVBQUVySSxNQUFLLGFBQUtrVixFQUFFbFYsTUFBSyxjQUFNbEQsRUFBRWtELE1BQUssTUFFL0QsT0FDRSxpQ0FDRSxTQUFDLEdBQVMsQ0FBQ2tHLEtBQU1BLEVBQU13RixTQUFVQSxJQUMvQjVKLEdBU0UsU0FBQyxHQUFTLENBQUNvRSxLQUFNLENBQUMsRUFBR3dGLFNBQVU2UixLQVBqQyxnQkFBS3BqQixRQUFTb2pCLEVBQW9CM1ksTUFBT3FZLEdBQVcsVUFDbEQsZ0JBQ0UzakIsVUFBV3dJLEVBQVVpQixHQUFBQSxhQUFzQixLQUMzQzZCLE1BQUssU0FBTzBZLElBQVUsSUFBRTVaLGdCQUFBQSxVQU9wQyxndENDdkNBLFNBQVM4WixHQUFlLEdBQXNCLElBQWxCdFgsRUFBSSxFQUFKQSxLQUFNd0YsRUFBUSxFQUFSQSxTQUNoQyxPQUNFLGlDQUNFLFNBQUMsR0FBUyxDQUNSeEYsS0FBTUEsRUFDTndGLFNBQVVBLElBRVh4SyxJQUFJZ0YsRUFBTSx3QkFBMEIsR0FFL0IsU0FBQ3VYLEdBQWEsQ0FDWkMsTUFBT3hYLEVBQUtnTyxPQUFPblcsT0FDbkJBLE9BQVFtSSxFQUFLbkksT0FDYjJOLFNBQVVBLElBR2QsT0FHVixDQUVBLFNBQVNpUyxHQUFXdmtCLEdBQ2xCLElBQVE4TSxFQUF5QjlNLEVBQXpCOE0sS0FBTXdGLEVBQW1CdFMsRUFBbkJzUyxTQUFVMk0sRUFBU2pmLEVBQVRpZixLQUNsQnVGLEdBQWdCemQsRUFBQUEsRUFBQUEsVUFBUSxXQUFNLE1BRWxDLE1BQTRCLHNCQUFiLFFBQVgsRUFBQStGLEVBQUtnTyxjQUFNLGFBQVgsRUFBYWlJLFFBQXNDMEIsR0FDMUMsU0FBVHhGLEVBQXdCeUYsR0FDckJOLEVBQ1QsR0FBRyxDQUFDdFgsRUFBTW1TLElBRVYsT0FDRSxpQkFBTS9lLFVBQVd5SixHQUFBQSxNQUFhLFVBQzVCLFNBQUM2YSxFQUFhLENBQUMxWCxLQUFNQSxFQUFNd0YsU0FBVUEsS0FHM0MsQ0FFQSxTQUFTK1IsR0FBZXJrQixHQUN0QixJQUFRc2tCLEVBQWdEdGtCLEVBQWhEc2tCLE1BQU8zZixFQUF5QzNFLEVBQXpDMkUsT0FBUTJOLEVBQWlDdFMsRUFBakNzUyxTQUFVcVMsRUFBdUIza0IsRUFBdkIya0IsS0FBTUMsRUFBaUI1a0IsRUFBakI0a0IsYUFDdkMsT0FDRSx1QkFDRTFrQixVQUFXeUosR0FBQUEsT0FDWCxpQkFBZ0JnYixFQUNoQixtQkFBa0JoZ0IsRUFBT2hCLFFBQ3JCaWhCLEdBQVksYUFFZk4sRUFBTTlmLEtBQUksU0FBQ3lhLEVBQU0vWixHQUFDLE1BQW1CLGdCQUFkK1osRUFBS3ZZLE9BQzNCLFNBQUM2ZCxHQUFTLENBRVJ0RixLQUFNQSxFQUNOblMsS0FBTW5JLEVBQU9PLEdBQ2JvTixTQUFVQSxHQUhMcE4sRUFLUixNQUdQLENBRUFtZixHQUFjN2pCLFVBQVksQ0FDeEI4akIsTUFBTzdqQixJQUFBQSxRQUFrQitjLElBQXFCcFIsV0FDOUN6SCxPQUFRbEUsSUFBQUEsUUFBa0IrYyxJQUF3QnBSLFdBQ2xEME8sT0FBUTBDLEdBQ1JsTCxTQUFVN1IsSUFBQUEsS0FBQUEsWUFHWixzWkNsQ0EsU0FBU29rQixHQUFTN2tCLEdBQ2hCLElWMUJ3QnNlLEVBQ2pCRSxFQUNEdGEsRUFFQTRnQixNVXNCTixHQUFrQ2plLEVBQUFBLEVBQUFBLFlBQVd6SCxHQUFyQ3lKLEVBQU8sRUFBUEEsUUFBUy9CLEVBQVksRUFBWkEsYUFDakIsRUFBcUU5RyxFQUE3RGlFLFFBQUFBLE9BQU8sSUFBRyxTQUFNLEVBQUU4Z0IsRUFBMkMva0IsRUFBM0Mra0IsY0FBZW5lLEVBQTRCNUcsRUFBNUI0RyxNQUFPakMsRUFBcUIzRSxFQUFyQjJFLE9BQVF1SSxFQUFhbE4sRUFBYmtOLFNBQ1osTUFBZEMsRUFBQUEsRUFBQUEsVUFBUyxRQUFLLDBuQkFBckNvVyxFQUFPLEtBQUVDLEVBQVUsS0FFcEJwYixFQUFPeEIsRUFDUG9DLEVBQVlsQixJQUFJZSxFQUFRQyxvQkFBb0I3RSxHQUFVbUUsRUFBTSxDQUFDLEdBQzdEbVcsRUFBa0JWLEdBQW1CbFosRUFBUXFFLEdBRTdDZ2MsRUFBV2pHLEdBQVluWSxFQUFPakMsRUFBUWtFLEVBQVM1RSxFQUFTNkMsR0FFeEQ4SyxFQUFRc00sR0FBVThHLEdBQ2xCQyxFQTdCUixTQUFvQnJULEdBR2xCLElBQUtBLEVBQU0sR0FBR2tKLE9BQU9sVyxLQUNuQixPQUFPLEVBQ1IsSUFFd0IsRUFGeEIsbW1CQUVtQmdOLEdBQUssSUFBekIsSUFBSyxFQUFMLHFCQUEyQixPQUFoQmhMLEVBQUssUUFDZCxLQUFpQixRQUFaLEVBQUFBLEVBQU1rVSxjQUFNLGFBQVosRUFBY25XLFNBQVUsSUFBSWhCLE9BQVNpRCxFQUFNakMsT0FBT2hCLE9BQ3JELE9BQU8sRUFFVCxHQUFJaUQsRUFBTWpDLE9BQU82UCxNQUFLLFNBQUEvUCxHQUFDLFlBQWdCK0UsSUFBWi9FLEVBQUVtQyxPQUFtQyxLQUFabkMsRUFBRW1DLFlBQTZCNEMsSUFBYi9FLEVBQUVxVyxNQUFvQixJQUMxRixPQUFPLENBRVgsQ0FBQywrQkFDSCxDQWNpQm9LLENBQVV0VCxHQUV6QixTQUFTdVQsRUFBZ0IsR0FBNEIsSUFBeEJyWSxFQUFJLEVBQUpBLEtBQUksSUFBRXBHLEtBQ2pDOGMsRUFBVyxDQUFFMVcsS0FBQUEsRUFBTXBHLFVBRGtCLElBQUcsVUFBTyxFQUN0QjBlLFVBQVd4VCxFQUFNK0ksUUFBUTdOLElBQ3BELENBd0dBLE9BQ0UsZ0NBQ0c5RCxJQUFjK2IsR0FFYixpQkFDRTdrQixXQUFXb0gsRUFBQUEsRUFBQUEsU0FBUSxDQUNqQnFDLEdBQUFBLHNCQUNDWCxFQUFVcEUsTUFBUStFLEdBQUFBLGVBQ2xCcEosS0FBSyxLQUNSUSxRQUFTLGtCQUFNb2tCLEVBQWlCLENBQUVyWSxLQUFNa1ksR0FBVyxFQUFDLFNBRW5EaGMsRUFBVXBFLE1BQVEsTUFHbkIsS0FDSHFnQixJQUNDLFNBQUMsRUFBSSxDQUNIaGxCLEtBQUssVUFDTEMsVUFBV3lKLEdBQUFBLFFBQ1hzRSxNQUFNLGtDQUdWLFNBQUMsR0FBYSxDQUNaMFcsTUFBTSxFQUNOTCxNQUFPL0YsRUFDUDVaLE9BQVFxZ0IsRUFBU3JnQixPQUNqQjJOLFNBQVU2UyxFQUNWUCxhQUFjLENBQ1osZVY3S2dCdEcsRVU2S1EwRyxFVjVLekJ4RyxFQUFQLEdBQWdCRixFQUFXM1osT0FBTSxHQUFyQixHQUNOVCxFQUFTNEQsSUFBSTBXLEVBQU8sZ0JBQWlCMVcsSUFBSTBXLEVBQU8sY0FBZSxLQUUvRHNHLElBRFloZCxJQUFJMFcsRUFBTyxrQkFDb0IsSUFBbEJ0YSxFQUFPUCxPQUNXLElBQTdCMmEsRUFBVzNaLE9BQU9oQixRQUNoQm1oQixHVXdLZCxZQUFhekcsR0FBVTJHLEVBQVV6RyxNQUdwQ2dGLElBQ0MsU0FBQyxHQUFXLENBQ1Z6VyxLQUFNeVcsRUFBUXpXLEtBQ2RwRyxLQUFNNmMsRUFBUTdjLEtBQ2RzQyxVQUFXQSxFQUNYL0UsUUFBU0EsRUFDVHVSLE9BQVFvSixHQUFvQjJFLEVBQVF6VyxLQUFLbVMsTUFDekN6RixVQUFVLE9BQ1ZsSCxTQTlJUixTQUE0QndJLEdBQzFCLEdBQXFCLFNBQWpCeUksRUFBUTdjLEtBQ1YsT0FnRUosU0FBeUIsR0FBcUIsSUFBakJFLEVBQUssRUFBTEEsTUFBT2pDLEVBQU0sRUFBTkEsT0FDMUJ5Z0IsRUFBYzdCLEVBQWQ2QixVQUNGQyxFQUFVamYsSUFBVTRlLEdBQ3BCcFQsRUFBUXNNLEdBQVVtSCxHQUNsQkMsRUFBYTFULEVBQU13VCxHQUd6QkUsRUFBVzFlLE1BQVFBLEVBQ25CMGUsRUFBVzNnQixPQUFTQSxTQUNiMmdCLEVBQVcvSCxlQUVsQjNMLEVBQU13TSxTQUFRLFNBQUF0UixVQUNMQSxFQUFLZ08sTUFDZCxJQUVBMEksRUFBVyxNQUNYdFcsRUFBUytELEtBQUtvVSxFQUFTLENBQUMsUUFBUyxXQUNuQyxDQWpGV0UsQ0FBaUJ6SyxHQUcxQixHQUFxQixXQUFqQnlJLEVBQVE3YyxLQUNWLE9BK0VKLFNBQTZCL0IsR0FDM0IsSUFBUXlnQixFQUFjN0IsRUFBZDZCLFVBQ0ZDLEVBQVVqZixJQUFVNGUsR0FDcEJwVCxFQUFRc00sR0FBVW1ILEdBQ0x6VCxFQUFNd1QsR0FHZHpnQixPQUFTQSxFQUVwQmlOLEVBQU13TSxTQUFRLFNBQUF0UixVQUNMQSxFQUFLZ08sTUFDZCxJQUVBMEksRUFBVyxNQUNYdFcsRUFBUytELEtBQUtvVSxFQUFTLENBQUMsUUFBUyxXQUNuQyxDQTlGV2xCLENBQW1CckosR0FHNUIsSUFBUWhPLEVBQW9CeVcsRUFBcEJ6VyxLQUFNc1ksRUFBYzdCLEVBQWQ2QixVQUNSQyxFQUFVamYsSUFBVTRlLEdBQ3BCcFQsRUFBUXNNLEdBQVVtSCxHQUNsQkMsRUFBYTFULEVBQU13VCxHQUt6QixHQUFJdFksRUFBS21TLEtBQUsxVyxJQUNXLFdBQW5CdUUsRUFBS21TLEtBQUt2WSxPQUNab1UsRUFBT2xXLEtBQU91UyxPQUFPMkQsRUFBT2xXLFlBRXpCLEdBQWtCLFlBQWRrSSxFQUFLbVMsS0FBb0IsV0FDNUJ1RyxHQUF1QyxRQUFqQixFQUFBRixFQUFXeEssY0FBTSxPQUFrQixRQUFsQixFQUFqQixFQUFtQjJLLHdCQUFnQixXQUFsQixFQUFqQixFQUFxQzloQixTQUFVLEVBVTNFLEtBVG1ELFFBQXZCLEVBQUFtWCxFQUFPMkssd0JBQWdCLGFBQXZCLEVBQXlCOWhCLFNBQVUsR0FTckM2aEIsRUFBcUIsQ0FJN0MsSUFBTWhKLEVBQU81SyxFQUFNLEdBQ25CNEssRUFBSzdYLE9BQU9rZCxPQUFPLEVBQUdyRixFQUFLN1gsT0FBT2hCLE9BQVMsR0FDM0NpTyxFQUFNaVEsT0FBTyxFQUFHalEsRUFBTWpPLE9BQVMsRUFDakMsQ0FDRixDQUVBMmhCLEVBQVcxZSxNQUFRa1UsRUFBT2xXLFlBQ25CMGdCLEVBQVcvSCxlQU1sQitILEVBQVczZ0IsU0FBVW1XLGFBQU0sRUFBTkEsRUFBUW5XLFNBQVUsSUFBSWIsUUFBTyxTQUFDYSxFQUFRK2dCLEVBQUd4Z0IsR0FBTSxRQU1sRSxPQUxxQixRQUFqQixFQUFBb2dCLEVBQVd4SyxjQUFNLE9BQVEsUUFBUixFQUFqQixFQUFtQm5XLGNBQU0sV0FBUixFQUFqQixFQUE0Qk8sTUFBTzRWLEVBQU9uVyxPQUFPTyxHQUNuRFAsRUFBT0UsS0FBS3lnQixFQUFXM2dCLE9BQU9PLElBRTlCUCxFQUFPRSxLQUFLLENBQUUrQixNQUFPLEVBQUcyVyxnQkFBZ0IsSUFFbkM1WSxDQUNULEdBQUcsSUFFSGlOLEVBQU13TSxTQUFRLFNBQUF0UixVQUNMQSxFQUFLZ08sTUFDZCxJQUVBMEksRUFBVyxNQUNYdFcsRUFBUytELEtBQUtvVSxFQUFTLENBQUMsUUFBUyxTQUFVLG1CQUM3QyxFQStFUXpDLFNBQVUsa0JBQU1ZLEVBQVcsS0FBSyxNQUsxQyxDQUVBcUIsR0FBUXJrQixVQUFZLENBQ2xCeUQsUUFBU3hELElBQUFBLE9BQ1Rza0IsY0FBZXRrQixJQUFBQSxLQUFBQSxXQUNmbUcsTUFBTzRXLEdBQUFBLFdBQ1A3WSxPQUFRbEUsSUFBQUEsUUFBa0IrYyxJQUMxQnRRLFNBQVV6TSxJQUFBQSxLQUFBQSxZQUdab2tCLEdBQVFua0IsYUFBZSxDQUNyQnFrQixlQUFlLEdBR2pCLHd0Q0N0TkEsU0FBU1ksR0FBSzNsQixHQUNaLElBQVFpRSxFQUEyRGpFLEVBQTNEaUUsUUFBUzJDLEVBQWtENUcsRUFBbEQ0RyxNQUFPakMsRUFBMkMzRSxFQUEzQzJFLE9BQU0sRUFBcUMzRSxFQUFuQzRsQixnQkFBQUEsT0FBZSxJQUFHLEdBQUMsRUFBQyxFQUFFMVksRUFBYWxOLEVBQWJrTixTQUV0RCxPQUNFLFNBQUMsR0FBVSxTQUFLMFksR0FBZSxjQUM3QixTQUFDLEdBQU8sQ0FDTjNoQixRQUFTQSxFQUNUMkMsTUFBT0EsRUFDUGpDLE9BQVFBLEVBQ1J1SSxTQUFVQSxNQUlsQixDQUVBeVksR0FBSW5sQixVQUFZLENBQ2Q4SCxNQUFPN0gsSUFBQUEsT0FDUG1HLE1BQU80VyxHQUFBQSxXQUNQN1ksT0FBUWxFLElBQUFBLFFBQWtCK2MsSUFDMUJ0USxTQUFVek0sSUFBQUEsS0FBQUEsWUFHWixtMENDbkJlLFNBQVNvbEIsR0FBcUIsR0FBMkIsUUFBdkJoUCxLQUFBQSxPQUFJLElBQUcsR0FBQyxFQUFDLEVBQUUzSixFQUFRLEVBQVJBLFNBQzFELEVBQW1DMkosRUFBM0IzSyxPQUFRb1gsT0FBUyxJQUFHLEtBQUUsRUFFeEJ3QyxHQUFnQjNhLEVBQUFBLEVBQUFBLGNBQVksaUJBQ2hDK0IsRUFBUyxTQUNKMkosR0FBSSxJQUNQNUssUUFBUSxFQUNSQyxPQUFRLEdBQUYsVUFBTW9YLHVuQkFBUyxDQUFFLENBQUUxYyxNQUFPLEdBQUlqQyxPQUFRLFFBRWhELEdBQUcsQ0FBQ2tTLEVBQU15TSxFQUFXcFcsSUFFZjZZLEdBQWdCNWEsRUFBQUEsRUFBQUEsY0FBWSxTQUFDNlcsRUFBUzljLEdBQzFDZ0ksRUFBUyxTQUNKMkosR0FBSSxJQUNQNUssUUFBUSxFQUNSQyxPQUFRa1gsR0FBYUUsRUFBV3BlLEVBQUc4YyxLQUV2QyxHQUFHLENBQUNuTCxFQUFNeU0sRUFBV3BXLElBRWY4WSxHQUFnQjdhLEVBQUFBLEVBQUFBLGNBQVksU0FBQXlHLEdBQ2hDMUUsRUFBUyxTQUNKMkosR0FBSSxJQUNQNUssUUFBUSxFQUNSQyxPQUFRaVgsR0FBYUcsRUFBVzFSLEtBRXBDLEdBQUcsQ0FBQ2lGLEVBQU15TSxFQUFXcFcsSUFFckIsT0FDRSxpQ0FDRSxlQUFJaE4sVUFBV3lKLEdBQUFBLHNCQUE2QixTQUN6QzJaLEVBQVU5ZSxLQUFJLFNBQUN3ZCxFQUFTOWMsR0FBQyxPQUN4Qix5QkFDRSxVQUFDLEdBQVUsWUFDVCxTQUFDLEdBQUcsQ0FDRmpCLFFBQVEsT0FDUjJDLE1BQU9vYixFQUFRcGIsTUFDZmpDLE9BQVFxZCxFQUFRcmQsT0FDaEJ1SSxTQUFVLFNBQUE4VSxHQUFPLE9BQUkrRCxFQUFjL0QsRUFBUzljLEVBQUUsS0FFaEQsZ0JBQUtoRixVQUFXeUosR0FBQUEsUUFBZSxVQUM3QixTQUFDLEVBQUksQ0FDSDFKLEtBQUssUUFDTEMsVUFBV3lKLEdBQUFBLFdBQ1g1SSxRQUFTLFNBQUFxSyxHQUNQQSxFQUFFMk4sa0JBQ0ZpTixFQUFjOWdCLEVBQ2hCLFVBZkNBLEVBbUJKLE9BR1QsVUFBQyxHQUFZLENBQUN3RSxXQUFTLEVBQUMzSSxRQUFTK2tCLEVBQWMsV0FDN0MsU0FBQyxFQUFJLENBQUM3bEIsS0FBSyxTQUFTLG9CQUk1Qiwrc0NDbkRBLFNBQVNnbUIsR0FBZWptQixHQUN0QixNQUF3QkEsRUFBaEJ1TyxPQUFBQSxPQUFNLElBQUcsR0FBQyxFQUFDLEVBQ1g3SCxFQUFTNkgsRUFBVDdILEtBQ1IsR0FBSSxVQUFXNkgsRUFDYixPQUFPLFNBQUN1SSxHQUFrQixNQUFLOVcsSUFHakMsR0FBSSxTQUFVdU8sRUFDWixPQUFPLFNBQUNrTSxHQUFpQixNQUFLemEsSUFHaEMsR0FBc0Isd0JBQWxCdU8sRUFBT3dVLE9BQWtDLENBQzNDLE1BQWdDL2lCLEVBQXhCNlcsS0FBQUEsT0FBSSxJQUFHLEdBQUMsRUFBQyxFQUFFM0osRUFBYWxOLEVBQWJrTixTQUNuQixPQUNFLFNBQUMsR0FBbUIsQ0FDbEJ0RyxNQUFPaVEsRUFBSzNLLFFBQVUsR0FDdEJnQixTQUFVLFNBQUF0RyxHQUNSc0csRUFBUyxTQUNKMkosR0FBSSxJQUNQNUssUUFBUSxFQUNSQyxPQUFRdEYsSUFFWixHQUdOLENBRUEsR0FBSTJILEVBQU9nTCxRQUNULE9BQU8sU0FBQ3FCLEdBQXdCLE1BQUs1YSxJQUd2QyxPQUFRMEcsR0FDTixJQUFLLFNBQ0gsT0FBTyxTQUFDc1EsR0FBbUIsTUFBS2hYLElBQ2xDLElBQUssTUFDSCxPQUFPLFNBQUNrWCxHQUFvQixNQUFLbFgsSUFDbkMsSUFBSyxVQUNILE9BQU8sU0FBQ29YLEdBQW9CLE1BQUtwWCxJQUNuQyxJQUFLLFVBQ0wsSUFBSyxXQUNILE9BQU8sU0FBQyxHQUFzQixNQUFLQSxJQUNyQyxJQUFLLGdCQUNILE9BQU8sU0FBQzZsQixHQUFxQixNQUFLN2xCLElBQ3BDLFFBQ0UsT0FBTyxTQUFDNFcsR0FBZ0IsTUFBSzVXLElBRW5DLENBRUFpbUIsR0FBY3psQixVQUFZLENBQ3hCK04sT0FBUTlOLElBQUFBLE1BQWdCLENBQ3RCaUcsS0FBTWpHLElBQUFBLE1BQWdCLENBQ3BCLFNBQ0EsVUFDQSxNQUNBLFFBQ0EsVUFDQSxXQUNBLGdCQUVBLGtCQUVGc0wsU0FBVXRMLElBQUFBLEtBQ1Z1RCxZQUFhdkQsSUFBQUEsT0FDYmIsUUFBU2EsSUFBQUEsSUFDVHNXLE1BQU90VyxJQUFBQSxJQUNQc2lCLE9BQVF0aUIsSUFBQUEsTUFFVm9XLEtBQU1wVyxJQUFBQSxNQUFnQixDQUNwQnlMLE9BQVF6TCxJQUFBQSxJQUNSOEgsSUFBSzlILElBQUFBLFNBRVB5TSxTQUFVek0sSUFBQUEsS0FBQUEsWUFHWixJQ3pGQSxHRHlGQSw0ekNFc0NBLE9BbkhBLFNBQXVCLEdBQWdDLFVBQTVCcU0sRUFBSSxFQUFKQSxLQUFNSSxFQUFRLEVBQVJBLFNBQVUwVixFQUFRLEVBQVJBLFNBQ3RCemMsR0FBWVUsRUFBQUEsRUFBQUEsWUFBVzFCLElBQWxDckQsVUFDa0QsTUFBZHFMLEVBQUFBLEVBQUFBLFVBQVNMLEtBQUssczVCQUFuRG9aLEVBQWMsS0FBRUMsRUFBaUIsS0FDbEM1WCxFQUFTcEksRUFBa0MsUUFBM0IsRUFBQzJHLEVBQUt6RSxXQUFXK0Ysa0JBQVUsYUFBMUIsRUFBNEJsQyxRQWlCN0NrYSxFQUF3QixTQUFBbm1CLEdBQUksT0FBSSxTQUFBMkcsR0FDcEN1ZixFQUFrQixTQUNiRCxHQUFjLElBQ2pCN2QsV0FBWSxTQUNQNmQsRUFBZTdkLFlBQVUsU0FDM0JwSSxFQUFPMkcsTUFHZCxDQUFDLEVBU0t5ZixHQUFVbGIsRUFBQUEsRUFBQUEsY0FBWSxXQUMxQitCLEVBQVM5RyxJQUFVOGYsR0FDckIsR0FBRyxDQUFDQSxFQUFnQmhaLElBRWRvWixHQUFjL1gsYUFBTSxFQUFOQSxFQUFRbEcsYUFBYyxDQUFDLEVBQ3JDa2UsR0FDSmhZLEVBQ0l6SixPQUFPd0UsS0FBS2dkLEdBQ1p4aEIsT0FBT3dFLEtBQUs0YyxFQUFlN2QsYUFDL0JoRSxRQUFPLFNBQUFpSyxHQUFZLE1BQ25CLFFBQW9CLFVBQWJBLEdBQ2lCLFFBQXRCLEVBQUNnWSxFQUFZaFksVUFBUyxPQUFyQixFQUF1QkUsZUFDdEIwWCxFQUFlN2QsV0FBV2lHLEdBRWhDLElBRUEsT0FDRSxTQUFDLEdBQUssQ0FBQ3ZFLFVBQVc2WSxFQUFTLFVBQ3pCLFNBQUNoWixHQUFTLENBQUNDLGFBQWEsRUFBTSxVQUM1QixpQkFBSzJCLE1BQU8sQ0FBRWdiLFVBQVcsT0FBUUMsU0FBVSxRQUFTLFdBQ2xELDBCQUFJLFFBQU0zWixFQUFLN00sS0FBSyxLQUFDLDRCQUFNLEtBQU82TSxFQUFLM0UsT0FBTyxHQUFHLFdBQ2pELFNBQUNnRyxHQUFjLENBQ2JyQixLQUFNb1osRUFDTmhaLFNBQVVpWixLQUdaLHdCQUFJLG1CQUNKLG1CQUFPam1CLFVBQVd5SixHQUFBQSxXQUFrQixXQUNsQyw0QkFDRSwyQkFDRSx3QkFBSSxjQUNKLHdCQUFJLFdBQ0osd0JBR0osMkJBQ0c0YyxFQUFlL2hCLEtBQUksU0FBQ3ZFLEVBQU1pRixHQUFDLE1BcEVYMlIsRUFvRVcsT0FDMUIsMkJBQ0UsZUFBSTNXLFVBQVd5SixHQUFBQSxhQUFvQixTQUNoQzFKLEtBQVFxbUIsR0FFUCxTQUFDalksR0FBWSxDQUFDQyxTQUFVck8sRUFBTXNPLE9BQVErWCxFQUFZcm1CLE1BR2xELGtCQUFPMkcsTUFBTzNHLEVBQU02TixVQTVFWCtJLEVBNEUwQzVXLEVBNUVsQyxTQUFBd1MsR0FDbkMwVCxFQUFrQixTQUNiRCxHQUFjLElBQ2pCN2QsV0FBWXZELE9BQU93RSxLQUFLNGMsRUFBZTdkLFlBQVl2RSxRQUFPLFNBQUN3USxFQUFLaEksR0FDOUQsSUFBTTFGLEVBQVFzZixFQUFlN2QsV0FBV2lFLEdBTXhDLE9BTElBLElBQVF1SyxJQUNWdkssRUFBTW1HLEVBQU1uSCxPQUFPMUUsT0FHckIwTixFQUFJaEksR0FBTzFGLEVBQ0owTixDQUNULEdBQUcsQ0FBQyxLQUVSLFFBa0VnQixlQUFJcFUsVUFBV3lKLEdBQUFBLGNBQXFCLFVBQ2xDLFNBQUMsR0FBYSxDQUNaMUosS0FBTUEsRUFDTjRXLEtBQU1xUCxFQUFlN2QsV0FBV3BJLEdBQ2hDc08sT0FBUStYLEVBQVlybUIsR0FDcEJpTixTQUFVa1osRUFBc0JubUIsUUFHcEMsd0JBQ0lpbUIsRUFBZTdkLFdBQVdwSSxNQUEyQixRQUFsQixFQUFDcW1CLEVBQVlybUIsVUFBSyxPQUFqQixFQUFtQjhMLFlBQ3ZELFNBQUMsRUFBSSxDQUNIOUwsS0FBSyxZQUNMQyxVQUFXeUosR0FBQUEsT0FDWDVJLFFBQVMsa0JBbkVOLFNBQUFkLEdBQ3ZCa21CLEVBQWtCLFNBQ2JELEdBQWMsSUFDakI3ZCxXQUFZcWUsS0FBS1IsRUFBZTdkLFdBQVlwSSxLQUVoRCxDQThEcUMwbUIsQ0FBaUIxbUIsRUFBSyxRQXZCcENpRixFQTJCSixVQUlYLGlCQUFLc0csTUFBTyxDQUFFOFEsVUFBVyxVQUFXLFdBQ2xDLFNBQUMsR0FBWSxDQUFDdmIsUUFBU3NsQixFQUFRLFNBQUMsVUFDaEMsU0FBQyxHQUFZLENBQUN0bEIsUUFBUzZoQixFQUFVbFosV0FBUyxXQUFDLG9CQU12RCxjQ3BISSxHQUFVLENBQUMsRUFFZixHQUFRM0ssa0JBQW9CLElBQzVCLEdBQVFDLGNBQWdCLElBRWxCLEdBQVFDLE9BQVMsU0FBYyxLQUFNLFFBRTNDLEdBQVFDLE9BQVMsSUFDakIsR0FBUUMsbUJBQXFCLElBRWhCLElBQUksS0FBUyxJQUExQixJQUtPLEdBQWUsTUFBVyxZQUFpQixpQkFBaUJxSyxxd0NDckJuRSxTQUFTb2QsR0FBTTVtQixHQUNiLElBQVE2bUIsRUFBb0Q3bUIsRUFBcEQ2bUIsS0FBTS9sQixFQUE4Q2QsRUFBOUNjLFNBQVVnbUIsRUFBb0M5bUIsRUFBcEM4bUIsU0FBVUMsRUFBMEIvbUIsRUFBMUIrbUIsYUFBaUIvbEIsb1hBQUksQ0FBS2hCLEVBQUssSUFDM0RxSSxFQUFhdkQsT0FBT0MsT0FBTyxDQUFFOGhCLEtBQUFBLEdBQVE3bEIsRUFBTThsQixHQUFZLENBQzNERSxJQUFLLGFBQ0wxYixPQUFRLFdBR1YsT0FDRSx1QkFBT2pELEdBQVUsY0FDZHZILEVBQ0FnbUIsR0FBWUMsSUFDWCxTQUFDLEVBQUksQ0FDSDdtQixVQUFXeUosR0FBQUEsS0FDWDFKLEtBQUssa0NBS2YsQ0FFQTJtQixHQUFLcG1CLFVBQVksQ0FDZnFtQixLQUFNcG1CLElBQUFBLE9BQUFBLFdBQ05LLFNBQVVMLElBQUFBLFVBQW9CLENBQzVCQSxJQUFBQSxRQUFrQkEsSUFBQUEsTUFDbEJBLElBQUFBLE9BQ0MyTCxXQUNIMGEsU0FBVXJtQixJQUFBQSxLQUFBQSxXQUNWc21CLGFBQWN0bUIsSUFBQUEsTUFHaEJtbUIsR0FBS2xtQixhQUFlLENBQ2xCb21CLFVBQVUsRUFDVkMsY0FBYyxHQUdoQixVQ3BDZSxTQUFTRSxHQUFnQixHQUFpQixJQUFibGQsRUFBUyxFQUFUQSxVQUNwQ21kLEdBQ0osU0FBQyxHQUFJLENBQUNKLFVBQVEsRUFBQ0QsS0FBSyxzREFBcUQsU0FBQyx5QkFLNUUsT0FDRSxTQUFDLEdBQUssQ0FBQzljLFVBQVdBLEVBQVUsVUFDMUIsVUFBQ0gsR0FBUyxDQUFDRyxVQUFXQSxFQUFXeUIsTUFBTyxDQUFFZ2IsVUFBVyxPQUFRQyxTQUFVLFVBQVcsV0FDaEYsd0JBQUksZ0NBQ0osdUJBQUcsMkNBRUgsdUJBQUcsaVVBUUgseUJBQUcsK0xBRytDUyxFQUFXLFdBS3JFLDRHQzFCQSxJQUFNQyxHQUFxQixDQUN6Qix3QkFDQSx5QkFDQSx5QkFDQSwwQkFDQSwwQkFHRixTQUFTQyxHQUFnQixHQUEwQixRQUF0QmxhLEVBQVEsRUFBUkEsU0FBVTBWLEVBQVEsRUFBUkEsU0FDdUIsTUFBWnpWLEVBQUFBLEVBQUFBLFVBQVMsTUFBRyxzNUJBQXJEa2EsRUFBZ0IsS0FBRUMsRUFBbUIsS0FDNUMsT0FDRSxTQUFDLEdBQUssV0FDSixVQUFDMWQsR0FBUyxDQUFDQyxZQUFhLEtBQUssV0FDM0Isd0JBQUksc0JBQ0osNkJBQU8sU0FDQSxvQkFDSGtDLFVBQVEsRUFDUm5GLE1BQU95Z0IsRUFDUHZaLFNBQVUsU0FBQTFDLEdBQUMsT0FBSWtjLEVBQW9CbGMsRUFBRUUsT0FBTzFFLE1BQU0sRUFBQyxXQUVuRCxtQkFBUUEsTUFBTSxHQUFHb0gsVUFBUSxXQUFDLDJCQUN6Qm1aLEdBQW1CM2lCLEtBQUksU0FBQ2tDLEVBQU14QixHQUFDLE9BQzlCLG1CQUFnQjBCLE1BQU9GLEVBQUssU0FBRUEsR0FBakJ4QixFQUErQixXQUlsRCxpQkFBS3NHLE1BQU8sQ0FBRThRLFVBQVcsU0FBVTFMLE9BQVEsUUFBUyxXQUNsRCxTQUFDLEdBQVksQ0FDWDVDLFVBQVdxWixFQUNYdG1CLFFBQVMsa0JBQU1tTSxFQUFTbWEsRUFBaUIsRUFBQyxTQUMzQyxZQUdELFNBQUMsR0FBWSxDQUFDdG1CLFFBQVM2aEIsRUFBVWxaLFdBQVMsV0FBQyxrQkFLckQsQ0FFQTBkLEdBQWlCNW1CLFVBQVksQ0FDM0IwTSxTQUFVek0sSUFBQUEsS0FBQUEsV0FDVm1pQixTQUFVbmlCLElBQUFBLEtBQUFBLFlBR1osb3VDQzdDTyxTQUFTOG1CLEdBQWdCblosRUFBWSxHQUF5QixJQUF2Qm5PLEVBQUksRUFBSkEsS0FBTWtJLEVBQU0sRUFBTkEsT0FBUUcsRUFBSyxFQUFMQSxNQUNwRGlHLEVBQVMzTSxHQUFBQSxnQkFBZ0J3TSxHQUMvQixNQUFPLENBQ0xuTyxLQUFBQSxFQUNBa0ksT0FBQUEsRUFDQUUsV0FBWSxJQUNWK0YsV0FBWSxDQUNWN0YsSUFBSyxJQUFGLE9BQU02RixFQUFVLEtBQ25CbEMsT0FBUWtDLEdBRVY5RixNQUFPLENBQ0xDLElBQUssSUFBRixPQUFNRCxFQUFLLEtBQ2Q0RCxPQUFRNUQsSUFFUHhELE9BQU93RSxLQUFLaUYsRUFBT2xHLFlBQVl2RSxRQUFPLFNBQUM5RCxFQUFPNlcsR0FDL0MsSUFBTTJRLEVBQWFqWixFQUFPbEcsV0FBV3dPLEdBY3JDLE9BakNSLFNBQXdCMlEsR0FDdEIsTUFBTyxDQUFDLFVBQVcsV0FBWSxpQkFBaUJybUIsU0FBU3FtQixFQUFXOWdCLEtBQ3RFLENBa0JZK2dCLENBQWNELElBQWVBLEVBQVc3akIsT0FDMUMzRCxFQUFNNlcsR0FBUSxDQUNaM0ssT0FBUW9WLEtBQU1rRyxFQUFXN2pCLFFBQVEsaUJBQU0sT0FBTyxLQUV2QyxVQUFXNmpCLElBQ3BCeG5CLEVBQU02VyxHQUFRLENBQ1ozSyxPQUFRc2IsRUFBV3pRLE1BR25CeE8sSUFBSyxJQUFGLE9BQU1pZixFQUFXelEsTUFBTTNWLFdBQVUsT0FJakNwQixDQUNULEdBQUcsQ0FBQyxJQUdWLGlCQ3BDYTBuQixHQUFrQixTQUFBbGlCLEdBQUssT0FBSUEsRUFBTWhELFNBQVNRLE9BQU9sQixTQUFTLEVBRWpFNmxCLElBQWlCekcsRUFBQUEsR0FBQUEsSUFBWSxDQUNqQ2poQixLQUFNLFlBQ05raEIsYUFBYyxHQUNkQyxTQUFVLENBQ1J3RyxZQUFXLFNBQUVwaUIsRUFBT21RLEdBQ2xCblEsRUFBTVgsS0FBSzhRLEVBQU80TCxRQUFRclosU0FDNUIsRUFDQTJmLGVBQWMsU0FBRXJpQixFQUFPbVEsR0FDckJuUSxFQUFNbVEsRUFBTzRMLFFBQVF1RyxlQUFpQnBCLEtBQUsvUSxFQUFPNEwsUUFBUXJaLFNBQVUsV0FDcEU2ZixFQUFBQSxHQUFBQSx1QkFBc0J2aUIsRUFDeEIsRUFDQXdpQixlQUFjLFNBQUV4aUIsRUFBT21RLEdBQ3JCblEsRUFBTXFjLE9BQU9sTSxFQUFPNEwsUUFBUXVHLGNBQWUsRUFDN0MsS0FJRyxHQUlISCxHQUFlelIsUUFIakIwUixHQUFXLEdBQVhBLFlBQ0FDLEdBQWMsR0FBZEEsZUFDQUcsR0FBYyxHQUFkQSxlQUdGLEdBQWVMLEdBQXNCLDR1RUNzSHJDLE9BbElBLFdBQ0UsSUFBTU0sR0FBdUJ0aUIsRUFBQUEsRUFBQUEsS0FBWSxTQUFBSCxHQUFLLE9BQUlBLEVBQU15aUIsb0JBQW9CLElBRWhDLE1BQWQ5YSxFQUFBQSxFQUFBQSxVQUFTLE1BQUssR0FBckNvVyxFQUFPLEtBQUVDLEVBQVUsS0FDcUIsTUFBZnJXLEVBQUFBLEVBQUFBLFdBQVMsR0FBTSxHQUF4QythLEVBQVEsS0FBRUMsRUFBVyxLQUM2QyxNQUFmaGIsRUFBQUEsRUFBQUEsV0FBUyxHQUFNLEdBQWxFaWIsRUFBcUIsS0FBRUMsRUFBd0IsS0FDaER2bUIsR0FBWTZELEVBQUFBLEVBQUFBLElBQVkraEIsSUFDeEI5aEIsR0FBV0MsRUFBQUEsRUFBQUEsTUFFWHlpQixHQUFZbmQsRUFBQUEsRUFBQUEsY0FBWSxXQUM1QmdkLEdBQVksRUFDZCxHQUFHLENBQUNBLElBRUVJLEdBQW1CcGQsRUFBQUEsRUFBQUEsY0FBWSxTQUFBaUQsR0FDbkMrWixHQUFZLEdBQ1p2aUIsRUFBU2dpQixHQUFZLENBQ25CMWYsU0FBVXFmLEdBQWVuWixFQUFZLENBQ25Dbk8sS0FBTSxlQUNOa0ksT0FBUSxDQUFDLGdCQUNURyxNQUFPLG9CQUlYa2dCLFlBQVcsa0JBQU1oRixFQUFXMWhCLEVBQVU2QixPQUFPLEdBQy9DLEdBQUcsQ0FBQzdCLEVBQVc4RCxFQUFVdWlCLEVBQWEzRSxJQUVoQ2lGLEdBQWF0ZCxFQUFBQSxFQUFBQSxjQUFZLFNBQUF5RyxHQUM3QjRSLEVBQVc1UixFQUNiLEdBQUcsQ0FBQzRSLElBRUVrRixHQUFldmQsRUFBQUEsRUFBQUEsY0FBWSxTQUFDeUcsR0FDaENoTSxFQUFTb2lCLEdBQWUsQ0FBRUYsY0FBZWxXLElBQzNDLEdBQUcsQ0FBQ2hNLElBRUUraUIsR0FBaUJ4ZCxFQUFBQSxFQUFBQSxjQUFZLFNBQUFzSCxHQUNqQ0EsRUFBTXNHLGtCQUNOc1AsR0FBeUIsRUFDM0IsR0FBRyxDQUFDQSxJQUVFTyxHQUFpQnpkLEVBQUFBLEVBQUFBLGNBQVksV0FDakNrZCxHQUF5QixFQUMzQixHQUFHLENBQUNBLElBRUVRLEdBQWExZCxFQUFBQSxFQUFBQSxjQUFZLFNBQUEyZCxHQUM3QmxqQixFQUFTLENBQ1BjLEtBQU0sa0JBQ05sSCxTQUFVLFNBQ0x5b0IsR0FBb0IsSUFDdkJhLHNCQUFBQSxLQUdOLEdBQUcsQ0FBQ2IsRUFBc0JyaUIsSUFFMUIsT0FDRSxpQkFBSzFGLFVBQVd5SixHQUFBQSxLQUFZLFVBRXpCdWUsSUFDQyxTQUFDLEdBQWdCLENBQ2ZoYixTQUFVcWIsRUFDVjNGLFNBQVUsa0JBQU11RixHQUFZLEVBQU0sSUFJekIsT0FBWjVFLElBQ0MsU0FBQyxHQUFjLENBQ2J6VyxLQUFNaEwsRUFBVXloQixHQUNoQlgsU0FBVSxrQkFBTVksRUFBVyxLQUFLLEVBQ2hDdFcsU0FBVSxTQUFBaEYsR0FDUnNiLEVBQVcsTUFDWDVkLEVBQVNpaUIsR0FBZSxDQUN0QkMsY0FBZXZFLEVBQ2ZyYixTQUFBQSxJQUVKLElBSUhrZ0IsSUFDQyxTQUFDbkIsR0FBZ0IsQ0FBQ2xkLFVBQVc2ZSxLQUcvQixpQkFBSzFvQixVQUFXeUosR0FBQUEsTUFBYSxXQUMzQiw2QkFBTyxlQUVMLGtCQUNFakQsS0FBSyxXQUNMd0gsUUFBUytaLEVBQXFCYSxzQkFDOUJoYixTQUFVLFNBQUExQyxHQUFDLE9BQUl5ZCxFQUFXemQsRUFBRUUsT0FBTzRDLFFBQVEsUUFJL0MsVUFBQyxHQUFZLENBQUNuTixRQUFTNG5CLEVBQWdCbmQsTUFBTyxDQUFFbEIsZ0JBQWlCLFVBQVcsV0FDMUUsU0FBQyxFQUFJLENBQUNySyxLQUFLLFlBQVksZUFHekIsd0JBQUksc0JBQ0osbUJBQU91TCxNQUFPLENBQUVwQixNQUFPLFFBQVMsV0FDOUIsNEJBQ0UsMkJBQ0Usd0JBQUksYUFDSix3QkFBSSxnQkFDSix3QkFBSSxrQkFHUiwyQkFDR3RJLEVBQVUwQyxLQUFJLFNBQUMwRCxFQUFVaEQsR0FBQyxPQUN6QiwyQkFDRSx5QkFBSSw0QkFBTSxJQUFNZ0QsRUFBU0MsT0FBTyxTQUNoQyx3QkFBS0QsRUFBU0csV0FBVytGLFdBQVc3RixPQUNwQyx3QkFDRzBmLEVBQXFCYSx3QkFDcEIsaUNBQ0UsU0FBQyxFQUFJLENBQUM1b0IsVUFBV3lKLEdBQUFBLE9BQWU1SSxRQUFTLGtCQUFNMG5CLEVBQVd2akIsRUFBRSxFQUFFakYsS0FBSyxZQUNuRSxTQUFDLEVBQUksQ0FBQ0MsVUFBV3lKLEdBQUFBLE9BQWU1SSxRQUFTLGtCQUFNMm5CLEVBQWF4akIsRUFBRSxFQUFFakYsS0FBSyxxQkFQcEVpRixFQVdKLFVBS1gsU0FBQyxHQUFZLENBQUNuRSxRQUFTdW5CLEVBQVUsU0FBQywwQkFNMUMsY0N0SUksR0FBVSxDQUFDLEVBRWYsR0FBUXZwQixrQkFBb0IsSUFDNUIsR0FBUUMsY0FBZ0IsSUFFbEIsR0FBUUMsT0FBUyxTQUFjLEtBQU0sUUFFM0MsR0FBUUMsT0FBUyxJQUNqQixHQUFRQyxtQkFBcUIsSUFFaEIsSUFBSSxLQUFTLElBQTFCLElBS08sR0FBZSxNQUFXLFlBQWlCLGlCQUFpQnFLLEVDckJuRSxTQUFTdWYsS0FDUCxPQUNFLGNBQUc3b0IsVUFBV3lKLEdBQUFBLGdCQUF1QixTQUFDLHlDQUkxQyxDQUVBLFNBQVNxZixHQUFhLEdBQThCLElBQTFCQyxFQUFZLEVBQVpBLGFBQWMvYixFQUFRLEVBQVJBLFNBQ3RDLE9BQ0UsaUJBQUtoTixVQUFXeUosR0FBQUEsY0FBcUIsV0FDbkMsU0FBQyxHQUFtQixDQUNsQi9DLE1BQU9xaUIsRUFDUC9iLFNBQVVBLElBRVgrYixFQUFhdGxCLE9BQVMsSUFBSyxTQUFDb2xCLEdBQVksTUFHL0MsQ0FFQUMsR0FBY3hvQixVQUFZLENBQ3hCME0sU0FBVXpNLElBQUFBLEtBQUFBLFdBQ1Z3b0IsYUFBY3hvQixJQUFBQSxRQUNaQSxJQUFBQSxRQUNBMkwsWUFHSixzQkNyQkksR0FBVSxDQUFDLEVBRWYsR0FBUXJOLGtCQUFvQixJQUM1QixHQUFRQyxjQUFnQixJQUVsQixHQUFRQyxPQUFTLFNBQWMsS0FBTSxRQUUzQyxHQUFRQyxPQUFTLElBQ2pCLEdBQVFDLG1CQUFxQixJQUVoQixJQUFJLEtBQVMsSUFBMUIsSUFLTyxHQUFlLE1BQVcsWUFBaUIsaUJBQWlCcUssRUN6QjVELFNBQVMwZixHQUFNQyxHQUNwQixPQUFPLFNBQVUxVyxHQUNmQSxFQUFNc0csa0JBQ05vUSxHQUNGLENBQ0YsQ0FFTyxTQUFTQyxHQUFPQyxHQUNyQixPQUFPLFNBQVU1VyxHQUNYNFcsRUFBUTVXLEVBQU1uRyxNQUNoQitjLEVBQVE1VyxFQUFNbkcsTUFFbEIsQ0FDRiwwekNDUEEsU0FBU2dkLEdBQWEsR0FBbUQsUUFBL0MxaUIsRUFBSyxFQUFMQSxNQUFPMmlCLEVBQVEsRUFBUkEsU0FBVXhkLEVBQVEsRUFBUkEsU0FBVXlkLEVBQU0sRUFBTkEsT0FBUXRjLEVBQVEsRUFBUkEsU0FDckR4QixHQUFNVCxFQUFBQSxFQUFBQSxVQUtWLE1BSndCa0MsRUFBQUEsRUFBQUEsVUFBUyxDQUNqQ3ZHLE1BQUFBLEVBQ0EyYyxTQUFTLEVBQ1RrRyxnQkFBZ0IsTUFDaEIsczVCQUpLamtCLEVBQUssS0FBRStNLEVBQVEsS0FNaEJuSixFQUFRNUQsRUFBTWlrQixlQUNoQixrQkFDQ0YsR0FBWUEsRUFBUy9qQixFQUFNb0IsT0FFMUJ1UyxHQUFhaE8sRUFBQUEsRUFBQUEsY0FBWSxTQUFBMkIsR0FDekJBLElBQ0ZBLEVBQUtzTSxRQUNMdE0sRUFBS3VNLFNBRVQsR0FBRyxJQW1CR3FRLEdBQWdCdmUsRUFBQUEsRUFBQUEsY0FBWSxXQUNoQ29ILEdBQVMsU0FBQS9NLEdBQUssZ0JBQVVBLEdBQUssSUFBRStkLFNBQVMsR0FBSyxHQUMvQyxHQUFHLENBQUNoUixJQUVFb1gsR0FBcUJ4ZSxFQUFBQSxFQUFBQSxjQUFZLFNBQUFzSCxHQUNkL0csRUFBSUwsVUFBWUssRUFBSUwsUUFBUUUsU0FBU2tILEVBQU1uSCxTQUtsRW9lLEdBQ0YsR0FBRyxDQUFDaGUsRUFBS2dlLElBT1QsT0FMQTVqQixFQUFBQSxFQUFBQSxZQUFVLFdBRVIsT0FEQTZGLFNBQVN3SSxpQkFBaUIsUUFBU3dWLEdBQzVCLGtCQUFNaGUsU0FBU3lJLG9CQUFvQixRQUFTdVYsRUFBbUIsQ0FDeEUsR0FBRyxDQUFDQSxJQUVBbmtCLEVBQU0rZCxTQUVOLGtCQUFNcmpCLFVBQVd5SixHQUFBQSxVQUFrQitCLElBQUtBLEVBQUksV0FDMUMsa0JBQ0VBLElBQUt5TixFQUNMdlMsTUFBT3BCLEVBQU1vQixNQUNia0gsU0FBVSxTQUFBMUMsR0FBQyxPQUFJbUgsRUFBUyxTQUNuQi9NLEdBQUssSUFDUmlrQixnQkFBZ0IsRUFDaEI3aUIsTUFBT3dFLEVBQUVFLE9BQU8xRSxRQUNoQixFQUNGa2EsVUFBV3NJLEdBQU0sQ0FDZnRRLE1BL0NWLFdBQ090VCxFQUFNK2QsVUFJUyxLQUFoQi9kLEVBQU1vQixPQUFnQm1GLEVBQ3hCd0csRUFBUyxTQUFLL00sR0FBSyxJQUFFaWtCLGdCQUFnQixNQUlsQ3JnQixHQUNIOEQsRUFBUzFILEVBQU1vQixPQUdqQjJMLEVBQVMsU0FBSy9NLEdBQUssSUFBRW9CLE1BQU9wQixFQUFNb0IsTUFBTzJjLFNBQVMsTUFDcEQsRUFpQ1VxRyxPQUFRRixNQUdYdGdCLElBQVMsaUJBQU1sSixVQUFXeUosR0FBQUEsTUFBYSxTQUFFUCxPQUt6Q29nQixHQUNMLGlDQUNFLDBCQUFPNWlCLEtBQ1AsU0FBQyxFQUFJLENBQ0gzRyxLQUFLLFNBQ0xDLFVBQVd5SixHQUFBQSxLQUNYNUksUUFBU21vQixJQUFLLGtCQUFNM1csRUFBUyxTQUFLL00sR0FBSyxJQUFFK2QsU0FBUyxJQUFPLFNBSWpFLENBRUErRixHQUFjOW9CLFVBQVksQ0FDeEJvRyxNQUFPbkcsSUFBQUEsT0FBQUEsV0FDUDhvQixTQUFVOW9CLElBQUFBLEtBQ1ZzTCxTQUFVdEwsSUFBQUEsS0FBQUEsV0FDVitvQixPQUFRL29CLElBQUFBLEtBQUFBLFdBQ1J5TSxTQUFVek0sSUFBQUEsS0FBQUEsWUFHWjZvQixHQUFjNW9CLGFBQWUsQ0FDM0JxTCxVQUFVLEdBR1osb21EQ2pHQSxTQUFTbVAsR0FBVyxHQUFtQyxJQUEvQkQsRUFBUSxFQUFSQSxTQUFVbmMsRUFBTyxFQUFQQSxRQUFTb08sRUFBUSxFQUFSQSxTQVF6QyxPQUNFLGVBQUloTixVQUFXeUosR0FBQUEsVUFBaUIsU0FDN0I3SyxFQUFRMEYsS0FBSSxTQUFDcWxCLEVBQVEza0IsR0FBQyxPQUNyQixlQUNFLGdCQUFlK1YsRUFBUzlaLFNBQVMrRCxHQUNqQ25FLFFBQVMsa0JBWk02USxFQVlhMU0sT0FYbENnSSxFQUNFK04sRUFBUzlaLFNBQVN5USxHQUNkcUosRUFBUzVXLFFBQU8sU0FBQWEsR0FBQyxPQUFJQSxJQUFNME0sQ0FBSyxJQUFDLDBEQUM3QnFKLDBTQUFRLENBQUVySixLQUp0QixJQUF1QkEsR0FZZSxFQUFDLFNBRTlCaVksR0FDRSxLQUliLENBNkVBLE9BM0VBLFNBQW9CLEdBQXVCLFFBQW5CQyxFQUFLLEVBQUxBLE1BQU81YyxFQUFRLEVBQVJBLFNBQ3ZCdkUsR0FBU2hELEVBQUFBLEVBQUFBLElBQVlxYixJQUt4QixNQUoyQjdULEVBQUFBLEVBQUFBLFVBQVM4RCxLQUFLNlksRUFBTyxDQUNqRCxZQUNBLGNBQ0EsY0FDQywwbkJBSklDLEVBQU8sS0FBRUMsRUFBVSxLQU1wQnZoQixFQUFrQkUsRUFBT25FLEtBQUksU0FBQW9FLEdBQUssT0FBSUEsRUFBTTNJLElBQUksSUFLdEQsT0FDRSxTQUFDLEdBQUssV0FDSixVQUFDMkosR0FBUyxDQUFDRyxVQU5mLFdBQ0VtRCxFQUFTNmMsRUFDWCxFQUl3QyxXQUNsQywwQkFBSSxlQUFXLDBCQUFPRCxFQUFNRyxhQUFrQixRQUM5Qyw0QkFFRSxpQkFBSy9wQixVQUFXeUosR0FBQUEsTUFBYSxXQUMzQixrQkFBT3VnQixRQUFRLDBCQUF5QixTQUFDLGtCQUd6QyxrQkFDRUMsR0FBRywwQkFDSHpqQixLQUFLLFNBQ0x1USxZQUFZLFVBQ1pyUSxNQUFPbWpCLEVBQVFLLFVBQ2Z0YyxTQUFVLFNBQUEyRSxHQUFLLE9BQ2J1WCxHQUFXLFNBQUF4a0IsR0FBSyxnQkFDWEEsR0FBSyxJQUNSNGtCLFVBQWtDLEtBQXZCM1gsRUFBTW5ILE9BQU8xRSxXQUNwQjRDLEVBQ0EyTixPQUFPMUUsRUFBTW5ILE9BQU8xRSxRQUFNLEdBQzdCLFFBS1QsaUJBQUsxRyxVQUFXeUosR0FBQUEsTUFBYSxXQUMzQixrQkFBT3VnQixRQUFRLCtCQUE4QixTQUFDLGtCQUc5QyxrQkFDRUMsR0FBRywrQkFDSHpqQixLQUFLLFdBQ0x3SCxRQUFTNmIsRUFBUU0sWUFDakJ2YyxTQUFVLFNBQUEyRSxHQUFLLE9BQ2J1WCxHQUFXLFNBQUF4a0IsR0FBSyxnQkFDWEEsR0FBSyxJQUNSNmtCLFlBQWE1WCxFQUFNbkgsT0FBTzRDLFNBQU8sR0FDaEMsUUFLVCxpQkFBS2hPLFVBQVd5SixHQUFBQSxNQUFhLFdBQzNCLDJCQUFPLFlBQ1AsU0FBQ3VSLEdBQVcsQ0FDVkQsU0FBVThPLEVBQVFwaEIsUUFBVSxHQUM1QjdKLFFBQVMySixFQUNUeUUsU0FBVSxTQUFBdkUsR0FBTSxPQUNkcWhCLEdBQVcsU0FBQXhrQixHQUFLLGdCQUNYQSxHQUFLLElBQ1JtRCxPQUFBQSxHQUFNLEdBQ0wsY0FRbkIsRUN0R2EyaEIsR0FBZSxTQUFBOWtCLEdBQUssT0FBSUEsRUFBTWhELFNBQVNRLE9BQU91bkIsTUFBTSxFQUUzREMsSUFBY3RKLEVBQUFBLEdBQUFBLElBQVksQ0FDOUJqaEIsS0FBTSxTQUNOa2hCLGFBQWMsR0FDZEMsU0FBVSxDQUNScUosbUJBQWtCLFNBQUVqbEIsRUFBT21RLEdBQ3pCblEsRUFBTW1RLEVBQU80TCxRQUFRbUosWUFBWTNvQixTQUFXNFQsRUFBTzRMLFFBQVF4ZixRQUM3RCxFQUNBNG9CLHdCQUF1QixTQUFFbmxCLEVBQU9tUSxHQUM5Qm5RLEVBQU1tUSxFQUFPNEwsUUFBUW1KLFlBQVl6QixhQUFldFQsRUFBTzRMLFFBQVEwSCxZQUNqRSxFQUNBMkIsWUFBVyxTQUFFcGxCLEdBQ1hBLEVBQU1YLEtBQUssQ0FDVG9sQixXQUFZLFlBQ1poQixhQUFjLEdBQ2RsbkIsU0FBVSxDQUFDLENBQ1Q2RSxNQUFPLFNBQ1BqQyxPQUFRLE1BR2QsRUFDQWttQixZQUFXLFNBQUVybEIsRUFBT21RLEdBQ2xCblEsRUFBTW1RLEVBQU80TCxRQUFRM1AsT0FBT3FZLFdBQWF0VSxFQUFPNEwsUUFBUXRoQixJQUMxRCxFQUNBNnFCLFlBQVcsU0FBRXRsQixFQUFPbVEsR0FDbEJuUSxFQUFNcWMsT0FBT2xNLEVBQU80TCxRQUFRM1AsTUFBTyxFQUNyQyxFQUNBbVosZUFBYyxTQUFFdmxCLEVBQU9tUSxHQUNyQjdRLE9BQU9DLE9BQU9TLEVBQU1tUSxFQUFPNEwsUUFBUTNQLE9BQVErRCxFQUFPNEwsUUFBUW5mLE9BQzVELEtBSUcsR0FPSG9vQixHQUFZdFUsUUFOZHVVLEdBQWtCLEdBQWxCQSxtQkFDQUUsR0FBdUIsR0FBdkJBLHdCQUNBQyxHQUFXLEdBQVhBLFlBQ0FDLEdBQVcsR0FBWEEsWUFDQUMsR0FBVyxHQUFYQSxZQUNBQyxHQUFjLEdBQWRBLGVBR0YsR0FBZVAsR0FBbUIsaTBDQ3RCbEMsU0FBU1EsR0FBYWhyQixHQUNwQixRQUFRcUosR0FBZ0J4QyxFQUFBQSxFQUFBQSxZQUFXekgsR0FBM0JpSyxZQUNGa2hCLEdBQVM1a0IsRUFBQUEsRUFBQUEsSUFBWTJrQixJQUNyQjFrQixHQUFXQyxFQUFBQSxFQUFBQSxNQUNpQyxNQUFkc0gsRUFBQUEsRUFBQUEsVUFBUyxRQUFLLHM1QkFBM0M4ZCxFQUFVLEtBQUVDLEVBQWEsS0FFaEMsU0FBU0MsRUFBeUJ2a0IsR0FDaEMsT0FBTytGLEdBQTZCL0YsS0FDbEN5QyxFQUFZbEksU0FBU3lGLEdBQU0sMENBQ1lBLEVBQUssS0FDeEMsS0FFUixDQWlDQSxPQUNFLGlCQUFLMUcsVUFBV3lKLEdBQUFBLEtBQVksVUFDVixPQUFmc2hCLElBQ0MsU0FBQyxHQUFXLENBQ1ZuQixNQUFPUyxFQUFPVSxHQUNkL2QsU0FBVSxTQUFBOUssR0FBTSxPQVZ4QixTQUErQndQLEVBQU94UCxHQUNwQzhvQixFQUFjLE1BQ2R0bEIsRUFBU21sQixHQUFlLENBQUVuWixNQUFBQSxFQUFPeFAsT0FBQUEsSUFDbkMsQ0FPNEJncEIsQ0FBcUJILEVBQVk3b0IsRUFBTyxLQUloRSxpQkFBS2xDLFVBQVd5SixHQUFBQSxRQUFlLFdBQzdCLFVBQUMsR0FBSSxDQUFDbWQsVUFBUSxFQUFDRCxLQUFLLHVDQUFzQyxXQUN4RCxTQUFDLEVBQUksQ0FBQzVtQixLQUFLLFNBQVMsd0JBR3RCLFNBQUMsR0FBWSxDQUFDYyxRQTNCcEIsV0FDRTZFLEVBQVNnbEIsS0FDWCxFQXlCNEMsU0FBQyxzQkFLekMsZ0JBQUsxcUIsVUFBV3lKLEdBQUFBLFdBQWtCLFNBQy9CNGdCLEVBQU8vbEIsS0FBSSxTQUFDc2xCLEVBQU81a0IsR0FBQyxPQUNuQixpQkFBYWhGLFVBQVd5SixHQUFBQSxNQUFhLFdBQ25DLGlCQUFLekosVUFBV3lKLEdBQUFBLFFBQWUsV0FDN0IsU0FBQyxHQUFhLENBQ1ovQyxNQUFPa2pCLEVBQU1HLFdBQ2JWLFNBQVU0QixFQUNWM0IsT0FBUSxTQUFBMW9CLEdBQVEsT0FBSSx5QkFBSSwwQkFBT0EsS0FBcUIsRUFDcERvTSxTQUFVLFNBQUFqTixHQUFJLE9BNUM1QixTQUE0QjJSLEVBQU8zUixHQUNqQzJGLEVBQVNpbEIsR0FBWSxDQUFFalosTUFBQUEsRUFBTzNSLEtBQUFBLElBQ2hDLENBMENnQ29yQixDQUFrQm5tQixFQUFHakYsRUFBSyxLQUU5QyxpQkFBS0MsVUFBV3lKLEdBQUFBLFFBQWUsV0FDN0IsU0FBQyxFQUFJLENBQ0gxSixLQUFLLFNBQ0xDLFVBQVMsVUFBS3lKLEdBQUFBLFFBQ2Q1SSxRQUFTLGtCQUFNbXFCLEVBQWNobUIsRUFBRSxLQUVqQyxTQUFDLEVBQUksQ0FDSGpGLEtBQUssWUFDTEMsVUFBUyxVQUFLeUosR0FBQUEsT0FBYSxZQUFJQSxHQUFBQSxRQUMvQjVJLFFBQVMsV0E5Q3ZCNkUsRUFBU2tsQixHQUFZLENBQUVsWixNQThDd0IxTSxJQUFFLFdBS3pDLGlCQUFLaEYsVUFBV3lKLEdBQUFBLE9BQWMsV0FDNUIsZ0JBQUt6SixVQUFXeUosR0FBQUEsWUFBbUIsVUFDakMsU0FBQyxHQUFHLFNBQ0VtZ0IsRUFBTS9uQixTQUFTLElBQUUsSUFDckJtTCxTQUFVLFNBQUFvZSxJQTlFMUIsU0FBK0JwbUIsRUFBR29tQixHQUNoQzFsQixFQUFTNmtCLEdBQW1CLENBQzFCQyxXQUFZeGxCLEVBQ1puRCxTQUFVLENBQUN1cEIsS0FFZixDQTBFa0JDLENBQXFCcm1CLEVBQUdvbUIsRUFDMUIsUUFJSixTQUFDLEdBQWEsQ0FDWnJDLGFBQWNhLEVBQU1iLGFBQ3BCL2IsU0FBVSxTQUFBdEcsR0FBSyxPQS9FN0IsU0FBbUMxQixFQUFHb21CLEdBQ3BDMWxCLEVBQVMra0IsR0FBd0IsQ0FDL0JELFdBQVl4bEIsRUFDWitqQixhQUFjcUMsSUFFbEIsQ0EwRWlDRSxDQUF5QnRtQixFQUFHMEIsRUFBTSxTQWxDakQxQixFQXFDSixRQUtoQixDQUVBOGxCLEdBQVl4cUIsVUFBWSxDQUFDLEVBRXpCLHNCQzVISSxHQUFVLENBQUMsRUFFZixHQUFRekIsa0JBQW9CLElBQzVCLEdBQVFDLGNBQWdCLElBRWxCLEdBQVFDLE9BQVMsU0FBYyxLQUFNLFFBRTNDLEdBQVFDLE9BQVMsSUFDakIsR0FBUUMsbUJBQXFCLElBRWhCLElBQUksS0FBUyxJQUExQixJQUtPLEdBQWUsTUFBVyxZQUFpQixpQkFBaUJxSyx3aENDWG5FLFNBQVNpaUIsR0FBYSxHQUE2QixJQUF6QkMsRUFBVyxFQUFYQSxZQUFhcFosRUFBUSxFQUFSQSxTQUMvQjVHLEdBQU1ULEVBQUFBLEVBQUFBLFFBQU8sTUFDYnJGLEdBQVdDLEVBQUFBLEVBQUFBLE1BQ1QrTyxHQUFpQi9OLEVBQUFBLEVBQUFBLFlBQVc4TixJQUE1QkMsYUFDRmpNLEdBQVNoRCxFQUFBQSxFQUFBQSxJQUFZcWIsSUFDb0IsTUFBZjdULEVBQUFBLEVBQUFBLFdBQVMsR0FBTSxHQUF4Q3dlLEVBQVEsS0FBRUMsRUFBVyxLQUNjLE1BQVp6ZSxFQUFBQSxFQUFBQSxVQUFTLElBQUcsR0FBbkNvVyxFQUFPLEtBQUVDLEVBQVUsS0FFcEJxSSxHQUFlMWdCLEVBQUFBLEVBQUFBLGNBQVksU0FBVXVXLEdBQ3pDLEdBQUlBLElBQWVnSyxFQUdqQixPQUZBbEksRUFBVzdhLEVBQU8raUIsR0FBYXpyQixXQUMvQjJyQixHQUFZLEdBSWRBLEdBQVksR0FDWnRaLEVBQVNvUCxFQUNYLEdBQUcsQ0FBQy9ZLEVBQVEraUIsRUFBYWxJLEVBQVlvSSxFQUFhdFosSUFFNUNnVyxHQUFZbmQsRUFBQUEsRUFBQUEsY0FBWSxrQkFBTXZGLEVBQVN5YixHQUFZLENBQ3ZEek0sYUFBQUEsSUFDQyxHQUFFLENBQUNoUCxFQUFVZ1AsSUFFVjhULEdBQWUzaEIsRUFBQUEsRUFBQUEsVUFBUSxrQkFBTSxTQUFVMmEsRUFBWW9LLEdBQ25EN2tCLE9BQU9vZixRQUFRLHdCQUFELE9BQXlCeUYsRUFBUyxPQUNsRGxtQixFQUFTZ2MsR0FBWSxDQUFFaFEsTUFBTzhQLElBRWxDLENBQUMsR0FBRSxDQUFDOWIsSUFFRW1tQixHQUFnQjVnQixFQUFBQSxFQUFBQSxjQUFZLFdBQ2hDLEdBQUt3Z0IsRUFBTCxDQUlBLElBQU0vWixFQUFROFosRUFDUnpyQixFQUFPc2pCLEVBRWJDLEVBQVcsSUFDWG9JLEdBQVksR0FDWmhtQixFQUFTK2IsR0FBWSxDQUFFL1AsTUFBQUEsRUFBTzNSLEtBQUFBLElBUDlCLENBUUYsR0FBRyxDQUFDc2pCLEVBQVNvSSxFQUFVRCxFQUFhbEksRUFBWW9JLEVBQWFobUIsSUFFdkQ4akIsR0FBZ0J2ZSxFQUFBQSxFQUFBQSxjQUFZLFdBQzNCd2dCLElBSUxuSSxFQUFXLElBQ1hvSSxHQUFZLEdBQ2QsR0FBRyxDQUFDRCxFQUFVbkksRUFBWW9JLElBRXBCakMsR0FBcUI1aUIsRUFBQUEsRUFBQUEsVUFBUSxrQkFBTSxTQUFVMEwsR0FDMUIvRyxFQUFJTCxVQUFZSyxFQUFJTCxRQUFRRSxTQUFTa0gsRUFBTW5ILFNBS2xFb2UsR0FDRixDQUFDLEdBQUUsQ0FBQ2hlLEVBQUtnZSxLQUVUNWpCLEVBQUFBLEVBQUFBLFlBQVUsV0FFUixPQURBNkYsU0FBU3dJLGlCQUFpQixRQUFTd1YsR0FDNUIsa0JBQU1oZSxTQUFTeUksb0JBQW9CLFFBQVN1VixFQUFtQixDQUN4RSxHQUFHLENBQUNBLElBRUosSUFBTXhRLEdBQWFoTyxFQUFBQSxFQUFBQSxjQUFZLFNBQUEyQixHQUN6QkEsSUFDRkEsRUFBS3NNLFFBQ0x0TSxFQUFLdU0sU0FFVCxHQUFHLElBRUgsT0FDRSxnQkFDRW5aLFVBQVd5SixHQUFBQSxjQUNYLGdCQUFlZ2lCLEVBQ2ZqZ0IsSUFBS0EsRUFBSSxVQUVULDBCQUNHL0MsRUFBT25FLEtBQUksV0FBV1UsR0FBQyxJQUFUakYsRUFBSSxFQUFKQSxLQUFJLE9BQ2pCLGdCQUVFQyxVQUFXd3JCLElBQWdCeG1CLEVBQUl5RSxHQUFBQSxPQUFnQixHQUMvQyxhQUFZekUsRUFDWm5FLFFBQVNtb0IsSUFBSyxrQkFBTTJDLEVBQWEzbUIsRUFBRSxJQUFFLFdBRXJDLGlCQUFNaEYsVUFBV3lKLEdBQUFBLE1BQWEsU0FBRXpFLElBQzlCd21CLElBQWdCeG1CLEdBQUt5bUIsR0FFckIsa0JBQ0VqZ0IsSUFBS3lOLEVBQ0xqWixVQUFXeUosR0FBQUEsS0FDWG1FLFNBQVUsU0FBQTFDLEdBQUMsT0FBSW9ZLEVBQVdwWSxFQUFFRSxPQUFPMUUsTUFBTSxFQUN6Q2thLFVBQVdzSSxHQUFNLENBQ2Z0USxNQUFPaVQsRUFDUG5DLE9BQVFGLElBRVY5aUIsTUFDRzhrQixJQUFnQnhtQixHQUFLeW1CLEVBQ2xCcEksRUFDQXRqQixLQUtSLGtCQUFNQyxVQUFXeUosR0FBQUEsS0FBWSxVQUMxQjFKLEdBQ0QsU0FBQyxFQUFJLENBQ0hBLEtBQUssZUFDTEMsVUFBV3lKLEdBQUFBLE9BQ1g1SSxRQUFTbW9CLElBQUssa0JBQU1SLEVBQWF4akIsRUFBR2pGLEVBQUssV0FHMUMsZ0JBaENTaUYsR0FpQ1gsS0FFUCxnQkFBSW5FLFFBQVN1bkIsRUFBVSxXQUNyQixTQUFDLEVBQUksQ0FBQ3BvQixVQUFXeUosR0FBQUEsTUFBYzFKLEtBQUssVUFDcEMsaUJBQU1DLFVBQVd5SixHQUFBQSxLQUFZLFNBQUMscUJBS3hDLENBRUE4aEIsR0FBY2pyQixVQUFZLENBQ3hCa3JCLFlBQWFqckIsSUFBQUEsT0FBQUEsV0FDYjZSLFNBQVU3UixJQUFBQSxLQUFBQSxZQUdaLFVDeklBLFNBQVN1ckIsR0FBUyxHQUFpQixJQUFiQyxFQUFTLEVBQVRBLFVBQ3BCLE9BQ0UsZ0JBQ0VDLE1BQU0sNkJBQ045aEIsTUFBTSxPQUNOQyxPQUFPLE9BQ1A4aEIsUUFBUSxZQUNSM2dCLE1BQU8sQ0FDTHZCLFNBQVUsV0FDVkMsSUFBSyxRQUNMa2lCLE9BQVEsd0JBQ1JDLFlBQWEsRUFDYkMsS0FBTSxPQUNON2hCLFFBQVMsUUFDVEwsTUFBTyxPQUNQQyxPQUFRLE9BQ1JTLGNBQWUsUUFDZixVQUVGLGlCQUNFVSxNQUFPLENBQ0wrRixVQUFXLFVBQUYsT0FBMEIsT0FBZDBhLEdBQXNCLEVBQUksRUFBQyxvQkFDaEQzYSxnQkFBaUIsaUJBRW5CaWIsRUFBRSwyREFJVixDQUVBLFNBQVNDLEdBQWdCeHNCLEdBQ3ZCLElBQVFpRSxFQUF5Q2pFLEVBQXpDaUUsUUFBU2dvQixFQUFnQ2pzQixFQUFoQ2lzQixVQUFXdG5CLEVBQXFCM0UsRUFBckIyRSxPQUFRdUksRUFBYWxOLEVBQWJrTixTQUVwQyxPQUNFLFVBQUMsR0FBVSxDQUFDNEUsV0FBWW5JLEdBQUFBLFFBQWUsV0FDckMsU0FBQ3FpQixHQUFTLENBQUNDLFVBQVdBLEtBQ3RCLFNBQUMsR0FBTyxDQUNObEgsZUFBZSxFQUNmOWdCLFFBQVNBLEVBQ1QyQyxNQUFNLE1BQ05qQyxPQUFRQSxFQUNSdUksU0FBVUEsTUFJbEIsQ0FFQXNmLEdBQWVoc0IsVUFBWSxDQUN6Qm1FLE9BQVFsRSxJQUFBQSxRQUFrQitjLElBQzFCdFEsU0FBVXpNLElBQUFBLEtBQUFBLFlBR1osbTBDQ2FBLE9BbkVBLFNBQXVCLEdBQXNCLElBQWxCbUksRUFBSyxFQUFMQSxNQUFPNmpCLEVBQU8sRUFBUEEsUUFDMUI3bUIsR0FBV0MsRUFBQUEsRUFBQUEsTUFFakIsR0FEZUYsRUFBQUEsRUFBQUEsSUFBWXFiLElBQ1lwWSxHQUEvQnNaLGVBQUFBLE9BQWMsSUFBRyxLQUFFLEVBRTNCLFNBQVN3SyxFQUFjdkssRUFBYUosRUFBV0MsR0FFN0MsSUFBTTVaLEVBQU80WixFQUFRcmQsT0FBTyxHQUN0QmdvQixFQUFtQnpLLEVBQWVDLElBQWdCLENBQ3REdmIsTUFBTyxjQUNQakMsT0FBUSxDQUNOLENBQUVpQyxNQUFPLEdBQUlqQyxPQUFRLElBQ3JCLENBQUVpQyxNQUFPLEdBQUlqQyxPQUFRLE1BSXpCaUIsRUFBU3FjLEdBQXFCLENBQzVCUCxXQUFZOVksRUFDWnVaLFlBQUFBLEVBQ0FwZ0IsU0FBVSxTQUNMNHFCLEdBQWdCLElBQ25CaG9CLE9BQVF5ZSxHQUFhdUosRUFBaUJob0IsT0FBUW9kLEVBQVczWixPQUcvRCxDQUVBLE9BQ0UsaUJBQUtvRCxNQUFPLENBQUVvRixPQUFRLFlBQWEsV0FDakMsd0JBQUkscUJBQ0osZ0JBQUtwRixNQUFPLENBQ1ZmLFFBQVMsT0FDVG1pQixjQUFlLE1BQ2ZuTSxJQUFLLFFBQ0wsU0FDQ2dNLEVBQVFqb0IsS0FBSSxTQUFDcW9CLEVBQVEzbkIsR0FBTSxNQUNwQjRuQixFQUFZRCxFQUFPdmtCLE9BQVN1a0IsRUFBTzVDLFdBQ3FCLDQ2QkFBZCxRQUFqQixFQUFBL0gsRUFBZWhkLFVBQUUsYUFBakIsRUFBbUJQLFNBQVUsR0FBRSxHQUF2RG9vQixFQUFTLEtBQUVDLEVBQVMsS0FDM0IsT0FDRSxpQkFBYXhoQixNQUFPLENBQUVmLFFBQVMsU0FBVSxXQUN2QyxrQkFBT2UsTUFBTyxDQUFFeWhCLFlBQWEsYUFBY0MsU0FBVSxPQUFRLFVBQzNELDBCQUFPSixPQUVULGlCQUFLdGhCLE1BQU8sQ0FDVmYsUUFBUyxPQUNUbWlCLGNBQWUsTUFDZm5NLElBQUssTUFDTDBNLFVBQVcsUUFDWCxXQUNBLFNBQUMsR0FBYyxDQUNibEIsVUFBVSxNQUNWdG5CLE9BQVEsQ0FBQ3FvQixHQUNUOWYsU0FBVSxTQUFBOUUsR0FBSSxPQUFJc2tCLEVBQWF4bkIsRUFBRyxFQUFHa0QsRUFBSyxLQUU1QyxTQUFDLEdBQWMsQ0FDYjZqQixVQUFVLEtBQ1Z0bkIsT0FBUSxDQUFDb29CLEdBQ1Q3ZixTQUFVLFNBQUE5RSxHQUFJLE9BQUlza0IsRUFBYXhuQixFQUFHLEVBQUdrRCxFQUFLLFNBbEJ0Q2xELEVBdUJkLFFBSVIsY0M1REksR0FBVSxDQUFDLEVBRWYsR0FBUW5HLGtCQUFvQixJQUM1QixHQUFRQyxjQUFnQixJQUVsQixHQUFRQyxPQUFTLFNBQWMsS0FBTSxRQUUzQyxHQUFRQyxPQUFTLElBQ2pCLEdBQVFDLG1CQUFxQixJQUVoQixJQUFJLEtBQVMsSUFBMUIsSUFLTyxHQUFlLE1BQVcsWUFBaUIsaUJBQWlCcUssNkdDcEJwRCxTQUFTNGpCLEdBQVUsR0FBZSxRQUFYbFgsRUFBTyxFQUFQQSxRQUNLLE1BQWYvSSxFQUFBQSxFQUFBQSxXQUFTLEtBQU0sczVCQUFsQ2tnQixFQUFNLEtBQUVDLEVBQU8sS0FDaEI1YSxHQUFVekgsRUFBQUEsRUFBQUEsVUFPVkMsR0FBY0MsRUFBQUEsRUFBQUEsY0FBWSxTQUFVQyxHQUNwQ3NILEVBQVFySCxVQUFZcUgsRUFBUXJILFFBQVFFLFNBQVNILEVBQUVFLFNBQ2pEZ2lCLEdBQVEsRUFFWixHQUFHLENBQUM1YSxFQUFTNGEsSUFPYixPQUxBeG5CLEVBQUFBLEVBQUFBLFlBQVUsV0FFUixPQURBNkYsU0FBU3hJLEtBQUtnUixpQkFBaUIsUUFBU2pKLEdBQ2pDLGtCQUFNUyxTQUFTeEksS0FBS2lSLG9CQUFvQixRQUFTbEosRUFBWSxDQUN0RSxHQUFHLENBQUNBLEtBR0YsaUJBQUtRLElBQUtnSCxFQUFTeFMsVUFBVyxDQUM1QnlKLEdBQUFBLEtBQ0EwakIsR0FBVTFqQixHQUFBQSxNQUNWcEosS0FBSyxLQUFLLFdBQ1YsY0FBR1EsUUFBUyxrQkFBTXVzQixHQUFTRCxFQUFPLEVBQUMsVUFDakMsU0FBQyxFQUFJLENBQUNwdEIsS0FBSyxnQkFFYix3QkFDR2lXLEVBQVExUixLQUFJLFNBQUNtUixFQUFRelEsR0FBQyxPQUNyQixlQUVFbkUsUUFBUyxrQkE1Qm5CLFNBQW1CNFUsR0FDakIyWCxHQUFRLEdBQ1IzWCxHQUNGLENBeUJ5QjRYLENBQVM1WCxFQUFPNlgsU0FBUyxFQUFDLFNBRXhDN1gsRUFBTzVLLFNBSEg3RixFQUlGLFFBS2YsNEdDaENlLFNBQVN1b0IsR0FBZ0IsR0FBMkMsTUFBdkMvQixFQUFXLEVBQVhBLFlBQVcsSUFBRWdDLGtCQUFBQSxPQUFpQixJQUFHLEtBQUUsRUFDdkU5bkIsR0FBV0MsRUFBQUEsRUFBQUEsTUFDWHFRLEdBQVVuUCxFQUFBQSxFQUFBQSxVQUFRLGlCQUFPLENBQzdCNG1CLHNCQUF1QixrQkFBTS9uQixFQUFTd2MsR0FBNEIsQ0FBRVYsV0FBWWdLLElBQWUsRUFDL0ZrQyxrQkFBbUIsa0JBQU1ob0IsRUFBU3ljLEdBQXdCLENBQUVYLFdBQVlnSyxJQUFlLEVBQ3ZGbUMsZUFBZ0Isa0JBQU1qb0IsRUFBUzBjLEdBQXFCLENBQUVaLFdBQVlnSyxJQUFlLEVBQ2pGb0Msa0JBQW1CLGtCQUFNbG9CLEVBQVMyYyxHQUF3QixDQUFFYixXQUFZZ0ssSUFBZSxFQUN2RnFDLDJCQUE0QixrQkFBTW5vQixFQUFTNGMsR0FBaUMsQ0FBRWQsV0FBWWdLLElBQWUsRUFDekdzQyxvQkFBcUIsa0JBQU1wb0IsRUFBUzZjLEdBQTBCLENBQUVmLFdBQVlnSyxJQUFlLEVBQzVGLEdBQUcsQ0FBQzlsQixFQUFVOGxCLElBRWYsT0FDRSxTQUFDMEIsR0FBVSxDQUFDbFgsUUFBTyxhQUNkd1gsdW5CQUFpQixDQUNwQixDQUNFRixTQUFVdFgsRUFBUXlYLHNCQUNsQjVpQixTQUFTLGdDQUFFLFlBQVEsMEJBQU0sV0FBYSxRQUFJLDBCQUFNLFlBRWxELENBQ0V5aUIsU0FBVXRYLEVBQVEwWCxrQkFDbEI3aUIsU0FBUyxnQ0FBRSxZQUFRLDBCQUFNLFdBQWEsUUFBSSwwQkFBTSxjQUVsRCxDQUNFeWlCLFNBQVV0WCxFQUFRMlgsZUFDbEI5aUIsU0FBUyxnQ0FBRSxZQUFRLDBCQUFNLFVBQVksUUFBSSwwQkFBTSxZQUVqRCxDQUNFeWlCLFNBQVV0WCxFQUFRNFgsa0JBQ2xCL2lCLFNBQVMsZ0NBQUUsWUFBUSwwQkFBTSxVQUFZLFFBQUksMEJBQU0sZUFFakQsQ0FDRXlpQixTQUFVdFgsRUFBUTZYLDJCQUNsQmhqQixTQUFTLGdDQUFFLFlBQVEsMEJBQU0sVUFBWSxRQUFJLDBCQUFNLGVBRWpELENBQ0V5aUIsU0FBVXRYLEVBQVE4WCxvQkFDbEJqakIsU0FBUyxnQ0FBRSxZQUFRLDBCQUFNLFVBQVksUUFBSSwwQkFBTSxpQkFJdkQsQ0ROQXFpQixHQUFXNXNCLFVBQVksQ0FDckIwVixRQUFTelYsSUFBQUEsUUFDUEEsSUFBQUEsTUFBZ0IsQ0FDZCtzQixTQUFVL3NCLElBQUFBLEtBQUFBLFdBQ1ZzSyxRQUFTdEssSUFBQUEsVUFBb0IsQ0FDM0JBLElBQUFBLEtBQ0FBLElBQUFBLFNBQ0MyTCxjQUVMQSxZQ0RKcWhCLEdBQWlCanRCLFVBQVksQ0FDM0JrckIsWUFBYWpyQixJQUFBQSxPQUFBQSxXQUNiaXRCLGtCQUFtQmp0QixJQUFBQSxRQUNqQkEsSUFBQUEsTUFBZ0IsQ0FDZCtzQixTQUFVL3NCLElBQUFBLEtBQUFBLFdBQ1ZzSyxRQUFTdEssSUFBQUEsVUFBb0IsQ0FDM0JBLElBQUFBLEtBQ0FBLElBQUFBLFNBQ0MyTCwrQkNyREwsR0FBVSxDQUFDLEVBRWYsR0FBUXJOLGtCQUFvQixJQUM1QixHQUFRQyxjQUFnQixJQUVsQixHQUFRQyxPQUFTLFNBQWMsS0FBTSxRQUUzQyxHQUFRQyxPQUFTLElBQ2pCLEdBQVFDLG1CQUFxQixJQUVoQixJQUFJLEtBQVMsSUFBMUIsSUFLTyxHQUFlLE1BQVcsWUFBaUIsaUJBQWlCcUssMnpDQ2lEbkUsT0EvREEsU0FBb0IsR0FBNEIsUUFBeEJraUIsRUFBVyxFQUFYQSxZQUFhdUMsRUFBTyxFQUFQQSxRQUM3QnJvQixHQUFXQyxFQUFBQSxFQUFBQSxNQUVYK0MsR0FEU2pELEVBQUFBLEVBQUFBLElBQVlxYixJQUNOMEssR0FFaUQsTUFBeEN2ZSxFQUFBQSxFQUFBQSxVQUFTOEQsS0FBS3JJLEVBQU8sQ0FBQyxPQUFRLGFBQVUsczVCQUEvRG1oQixFQUFPLEtBQUVDLEVBQVUsS0FPMUIsT0FDRSxTQUFDLEdBQUssQ0FBQ2pnQixVQUFXa2tCLEVBQVEsVUFDeEIsVUFBQ3JrQixHQUFTLENBQUNDLFlBQVksR0FBRSxXQUN2QiwwQkFBSSxvQkFBZ0IsMEJBQU9qQixFQUFNM0ksV0FDakMsNEJBRUUsaUJBQUtDLFVBQVd5SixHQUFBQSxNQUFhLFdBQzNCLGtCQUFPdWdCLFFBQVEsdUJBQXNCLFNBQUMsVUFHdEMsU0FBQ3JlLEdBQUssQ0FDSnNlLEdBQUcsdUJBQ0hsVCxZQUFZLFVBQ1pyUSxNQUFPbWpCLEVBQVE5cEIsS0FDZjZMLFVBQVdZLEdBQ1hvQixTQUFVLFNBQUEyRSxHQUFLLE9BQ2J1WCxHQUFXLFNBQUF4a0IsR0FBSyxnQkFDWEEsR0FBSyxJQUNSdkYsS0FBTXdTLEVBQU1uSCxPQUFPMUUsT0FBSyxHQUN2QixRQUtULGlCQUFLMUcsVUFBV3lKLEdBQUFBLE1BQWEsV0FDM0Isa0JBQU91Z0IsUUFBUSx3QkFBdUIsU0FBQyxXQUd2QyxrQkFDRUMsR0FBRyx3QkFDSGxULFlBQVksVUFDWnJRLE1BQU9takIsRUFBUXpoQixNQUNmd0YsU0FBVSxTQUFBMkUsR0FBSyxPQUNidVgsR0FBVyxTQUFBeGtCLEdBQUssZ0JBQ1hBLEdBQUssSUFDUjhDLE1BQU9tSyxFQUFNbkgsT0FBTzFFLE9BQUssR0FDeEIsV0FNWCxpQkFBSzRFLE1BQU8sQ0FBRThRLFVBQVcsU0FBVW1FLElBQUssT0FBUSxXQUM5QyxTQUFDLEdBQVksQ0FBQzFmLFFBaER0QixXQUNFNkUsRUFBUzZiLEdBQW9CLElBQUVDLFdBQVlnSyxHQUFnQjNCLEtBQzNEa0UsR0FDRixFQTZDNkMsU0FBQyxRQUN0QyxTQUFDLEdBQVksQ0FBQ2x0QixRQUFTa3RCLEVBQVN2a0IsV0FBUyxXQUFDLGtCQUtwRCxFQ2xFZSxTQUFTd2tCLEtBQ3RCLElBQU10b0IsR0FBV0MsRUFBQUEsRUFBQUEsTUFDVCtPLEdBQWlCL04sRUFBQUEsRUFBQUEsWUFBVzhOLElBQTVCQyxhQUVSLE9BQ0UsaUJBQUtwSixNQUFPLENBQUU4USxVQUFXLFVBQVcsV0FDbEMsd0JBQUksOEJBQ0osU0FBQyxHQUFZLENBQUN2YixRQUFTLGtCQUFNNkUsRUFBU3liLEdBQVksQ0FBRXpNLGFBQUFBLElBQWdCLEVBQUMsU0FBQyxnQkFLNUUsQ0NiZSxTQUFTdVosR0FBYSxHQUEyQixJQUF2QnZlLEVBQU0sRUFBTkEsT0FBUThiLEVBQVcsRUFBWEEsWUFDekM5bEIsR0FBV0MsRUFBQUEsRUFBQUEsTUFFWCtDLEdBRFNqRCxFQUFBQSxFQUFBQSxJQUFZcWIsSUFDTjBLLEdBRWYwQyxHQUFtQmpqQixFQUFBQSxFQUFBQSxjQUFZLFNBQVU0VyxFQUFXQyxHQUN4RHBjLEVBQVNrYyxHQUFpQixDQUFFSixXQUFZZ0ssRUFBYTNKLFVBQUFBLEVBQVdDLFFBQUFBLElBQ2xFLEdBQUcsQ0FBQ3BjLEVBQVU4bEIsSUFFZCxPQUNFLFNBQUMsR0FBYyxDQUNiOWIsT0FBUUEsRUFDUjdOLFNBQVU2RyxFQUFNN0csU0FDaEI0UCxVQUFXLG9CQUFHQyxFQUFLLEVBQUxBLE1BQU9iLEVBQVMsRUFBVEEsVUFBUyxPQUFPbkksRUFBTTdHLFNBQVM2UCxLQUNsRCxTQUFDLEdBQUcsQ0FDRnRKLE1BQU95SSxFQUFVekksTUFDakIxQixNQUE0QixRQUF2QixFQUFFZ0MsRUFBTTdHLFNBQVM2UCxVQUFNLGFBQXJCLEVBQXVCaEwsTUFDOUJqQyxPQUE2QixRQUF2QixFQUFFaUUsRUFBTTdHLFNBQVM2UCxVQUFNLGFBQXJCLEVBQXVCak4sT0FDL0J1SSxTQUFVLFNBQUE5RSxHQUFJLE9BQUlnbUIsRUFBaUJ4YyxFQUFPeEosRUFBSyxHQUVsRCxHQUdQLDZaQzNCQSxJQUFNaW1CLEdBQWdCLENBQ3BCQyxTQUFVLEdBQ1ZDLDBCQUEyQiwwaENDSTdCLElBQU1DLEdBQVcsQ0FDZkMsSUFBSyxNQUNMQyxRQUFTLE9BQ1RDLE1BQU8sT0FDUEMsS0FBTSxNQUNOL1YsUUFBUyxLQUNURCxVQUFXLE9BQ1hpVyxVQUFXLE9BQ1hDLFdBQVksUUFDWmxGLE9BQVEsTUFDUm1GLElBQUssTUFDTGpXLE1BQU8sTUFDUGtXLEtBQU0sT0FDTkMsSUFBSyxNQUNMQyxTQUFVLFFBQ1ZDLE9BQVEsUUFDUkMsVUFBVyxPQUNYQyxPQUFRLE9BNERILFNBQVNDLEdBQW9CNU4sRUFBWTlSLEdBQThCLElBQXRCMmYsRUFBZSxVQUFILDhDQUM1RDNwQixHQUFXQyxFQUFBQSxFQUFBQSxNQUNxQyxNQUF0QnNILEVBQUFBLEVBQUFBLFVBQVNvaUIsR0FBYSxHQUEvQ0MsRUFBUSxLQUFFQyxFQUFXLEtBQ2lCLE1BQVh0aUIsRUFBQUEsRUFBQUEsVUFBUyxHQUFFLEdBQXRDNFUsRUFBUyxLQUFFMk4sRUFBWSxLQUV4QkMsR0FBV3hrQixFQUFBQSxFQUFBQSxjQUFZLFdBQ3ZCNFcsSUFBY25TLEVBQU9qTSxPQUFTLEdBQ2hDK3JCLEVBQWEsR0FDYkQsR0FBWSxJQUVaQyxFQUFhM04sRUFBWSxFQUU3QixHQUFHLENBQUNBLEVBQVcyTixFQUFjOWYsRUFBT2pNLE9BQVE4ckIsSUFFdEN2VixHQUFpQi9PLEVBQUFBLEVBQUFBLGNBQVksU0FBQXNILEdBQ2pDLElBQU11UCxFQWxDVixTQUF5QnZQLEdBQ3ZCLElBQU1tZCxFQVZSLFNBQXVCbmQsR0FDckIsT0FBT25MLEVBQUFBLEVBQUFBLFNBQVEsQ0FDYm1MLEVBQU1pQixRQUFVLEtBQ2hCakIsRUFBTW9kLFNBQVcsS0FDakJwZCxFQUFNcWQsU0FBVyxLQUNqQnJkLEVBQU1jLFVBQVksTUFFdEIsQ0FHMkJ3YyxDQUFhdGQsR0FDaEN1ZCxHQUNKQyxFQUFBQSxHQUFBQSxjQUFheGQsRUFBTW5HLElBQUlqTCxnQkF6QzNCLFNBQXVCb1IsR0FDckIsSUFBTXVkLEVBQVN4QixHQUFTL2IsRUFBTW5HLEtBQ3hCNGpCLEVBZVIsU0FBd0J6ZCxHQUN0QixPQUFRQSxFQUFNakcsVUFDWixLQUFLLEVBQ0gsTUFBTyxJQUNULEtBQUssRUFDSCxNQUFPLElBRVQsUUFDRSxNQUFPLEdBRWIsQ0F6QmlCMmpCLENBQWMxZCxHQUU3QixPQUFLdWQsRUFJRSxDQUNMcHBCLE1BQU8sTUFDUGpDLE9BQVEsQ0FBQyxDQUNQaUMsTUFBT3NwQixFQUFTRixFQUNoQnJyQixPQUFRLE1BUEgsSUFVWCxDQTJCSXlyQixDQUFhM2QsR0FHZixHQUFLdWQsRUFJTCxNQUFPLENBQ0xwcEIsTUFBT29wQixFQUFPcHBCLE1BQ2RqQyxPQUFRaXJCLEVBQWlCOXJCLFFBQU8sU0FBQ2EsRUFBUXVZLEdBQ3ZDLE1BQU8sQ0FBQyxDQUFFdFcsTUFBT3NXLEVBQVV2WSxPQUFBQSxHQUM3QixHQUFHcXJCLEVBQU9yckIsUUFFZCxDQWlCb0IwckIsQ0FBZTVkLEdBRTNCdVAsSUFDRnBjLEVBQVNrYyxHQUFpQixDQUN4QkosV0FBQUEsRUFDQUssVUFBQUEsRUFDQUMsUUFBQUEsS0FHRjJOLElBRUosR0FBRyxDQUFDak8sRUFBWUssRUFBVzROLEVBQVUvcEIsS0Q3RHhCLFNBQXdCNHBCLEVBQVVjLEdBQy9DLFFBQXVDLE1BNUJoQzVhLEVBQUFBLEVBQUFBLGFBQVcsU0FBQ2xRLEVBQU9tUSxHQUN4QixPQUFRQSxFQUFPalAsTUFDYixJQUFLLFdBQ0gsT0FuQlIsU0FBd0JsQixFQUFPbVEsR0FDN0IsTUFBTyxDQUNMMlksU0FBVSxHQUFGLFVBQU05b0IsRUFBTThvQixrV0FBUSxDQUFFM1ksRUFBT2xELE1BQU1uRyxNQUMzQ2lpQiwwQkFBMkIsU0FFL0IsQ0FjZWdDLENBQWMvcUIsRUFBT21RLEdBRTlCLElBQUssU0FDSCxPQWZSLFNBQXNCblEsRUFBT21RLEdBRTNCLE1BQU8sQ0FDTDJZLFNBQVUsR0FDVkMsMEJBSGUvb0IsRUFBTThvQixTQUFTanFCLFFBQU8sU0FBQWlJLEdBQUcsT0FBSUEsSUFBUXFKLEVBQU9sRCxNQUFNbkcsR0FBRyxJQUt4RSxDQVNla2tCLENBQVlockIsRUFBT21RLEdBRTVCLElBQUssUUFDSCxPQUFPMFksR0FFVCxRQUNFLE9BQU83b0IsRUFFYixHQUFHNm9CLE1BY29DLDBuQkFBaEM3b0IsRUFBSyxLQUFFSSxFQUFRLEtBQ2hCeU4sR0FBZ0JsSSxFQUFBQSxFQUFBQSxjQUFZLFNBQUNzSCxHQUM3QkEsRUFBTWEsU0FJVmIsRUFBTU8saUJBQ05wTixFQUFTLENBQUVjLEtBQU0sV0FBWStMLE1BQUFBLElBQy9CLEdBQUcsQ0FBQzdNLElBRUU0TixHQUFjckksRUFBQUEsRUFBQUEsY0FBWSxTQUFDc0gsR0FDM0JqTixFQUFNK29CLDBCQUEwQnB0QixTQUFTc1IsRUFBTW5HLE9BSW5EbUcsRUFBTU8saUJBQ05zZCxFQUFXN2QsR0FDWDdNLEVBQVMsQ0FBRWMsS0FBTSxTQUFVK0wsTUFBQUEsSUFDN0IsR0FBRyxDQUFDak4sRUFBTStvQiwwQkFBMkIrQixFQUFZMXFCLEtBRWpERSxFQUFBQSxFQUFBQSxZQUFVLFdBQ1IsR0FBSzBwQixFQU9MLE9BSEE3akIsU0FBU3hJLEtBQUtnUixpQkFBaUIsVUFBV2QsR0FDMUMxSCxTQUFTeEksS0FBS2dSLGlCQUFpQixRQUFTWCxHQUVqQyxXQUNMN0gsU0FBU3hJLEtBQUtpUixvQkFBb0IsVUFBV2YsR0FDN0MxSCxTQUFTeEksS0FBS2lSLG9CQUFvQixRQUFTWixFQUM3QyxDQUNGLEdBQUcsQ0FBQ2djLEVBQVVuYyxFQUFlRyxHQUMvQixDQzZCRWlkLENBQWNqQixFQUFVdFYsR0FFeEIsSUFBTXdXLEdBQXVCdmxCLEVBQUFBLEVBQUFBLGNBQVksV0FDdkNza0IsR0FBWSxFQUNkLEdBQUcsQ0FBQ0EsSUFFRWtCLEdBQXdCeGxCLEVBQUFBLEVBQUFBLGNBQVksV0FDeENza0IsR0FBWSxFQUNkLEdBQUcsQ0FBQ0EsSUFFSixNQUFPLENBQ0wsQ0FBRUQsU0FBQUEsRUFBVXpOLFVBQUFBLEdBQ1osQ0FBRTJPLHFCQUFBQSxFQUFzQkMsc0JBQUFBLEVBQXVCakIsYUFBQUEsR0FFbkQsNEdDaEhPLFNBQVNrQixHQUFvQixHQUFtQyxRQUEvQmhoQixFQUFNLEVBQU5BLE9BQVE4UixFQUFVLEVBQVZBLFdBQVl1TSxFQUFPLEVBQVBBLFFBRXBEcmxCLEdBRFNqRCxFQUFBQSxFQUFBQSxJQUFZcWIsSUFDTlUsR0FDaUQsS0FBNUM0TixHQUFtQjVOLEVBQVk5UixHQUFRLEtBQUssczVCQUEvRGloQixFQUFNLEtBQUUzYSxFQUFPLEtBQ2hCcEIsR0FBZS9OLEVBQUFBLEVBQUFBLFVBQVEsa0JBQU1zSixHQUFnQlQsRUFBUSxDQUN6RFksVUFBVyxDQUFFc2dCLFNBQVUsVUFDdkIsR0FBRSxDQUFDbGhCLElBUUwsT0FOQTlKLEVBQUFBLEVBQUFBLFlBQVUsV0FDSCtxQixFQUFPckIsVUFDVnZCLEdBRUosR0FBRyxDQUFDNEMsRUFBT3JCLFNBQVV2QixLQUduQixTQUFDLEdBQUssQ0FBQ2xrQixVQUFXa2tCLEVBQVEsVUFDeEIsVUFBQ3JrQixHQUFTLENBQUNFLFFBQVMsQ0FBQ0gsR0FBQUEsbUJBQTJCRSxZQUFZLEdBQUUsV0FDNUQsd0JBQUksb0NBQ0oseUJBQUcsMENBQ3FDLDBCQUFNLFFBQVUsMkRBR3hELGdCQUFLMkIsTUFBT3NKLEVBQWEsVUFDdkIsU0FBQyxHQUFjLENBQ2JsRixPQUFRQSxFQUNSN04sU0FBVTZHLEVBQU03RyxTQUNoQjRQLFVBQVcsb0JBQUdDLEVBQUssRUFBTEEsTUFBT2IsRUFBUyxFQUFUQSxVQUFTLE9BQU9uSSxFQUFNN0csU0FBUzZQLEtBQ2xELFNBQUMsR0FBRyxDQUNGdEosTUFBT3lJLEVBQVV6SSxNQUNqQnNkLGdCQUFpQixDQUNmL1QsWUFBWSxFQUNaOVEsUUFBUyxrQkFBTW1WLEVBQVF3WixhQUFhOWQsRUFBTSxFQUMxQzFSLFVBQVdvSCxLQUFRLENBQ2pCcUMsR0FBQUEsYUFDQWtuQixFQUFPOU8sWUFBY25RLEdBQVNqSSxHQUFBQSx3QkFDN0JwSixLQUFLLE1BRVZxRyxNQUE0QixRQUF2QixFQUFFZ0MsRUFBTTdHLFNBQVM2UCxVQUFNLGFBQXJCLEVBQXVCaEwsTUFDOUJqQyxPQUE2QixRQUF2QixFQUFFaUUsRUFBTTdHLFNBQVM2UCxVQUFNLGFBQXJCLEVBQXVCak4sT0FDL0J1SSxTQUFVLFNBQUE5RSxHQUFTLEdBRXRCLE9BR0wsaUJBQUtvRCxNQUFPLENBQUU4USxVQUFXLFVBQVcsV0FDbEMsU0FBQzdILEdBQUcsVUFBQywyRUFDTCx3QkFDRSxTQUFDLEdBQVksQ0FBQzFULFFBQVNrdEIsRUFBUSxTQUFDLGtCQU01Qyx1aENDckRBLElBMEVBLEdBMUVxQixTQUFILEdBQW9CLElBQWR4QixFQUFPLEVBQVBBLFFBQ2hCOWpCLEdBQVNoRCxFQUFBQSxFQUFBQSxJQUFZcWIsSUFDc0IsTUFBWDdULEVBQUFBLEVBQUFBLFVBQVMsR0FBRSxHQUExQ3VlLEVBQVcsS0FBRXFGLEVBQWMsS0FDaUIsTUFBZjVqQixFQUFBQSxFQUFBQSxXQUFTLEdBQU0sR0FBNUM2akIsRUFBVSxLQUFFQyxFQUFhLEtBQ3VDLE1BQWY5akIsRUFBQUEsRUFBQUEsV0FBUyxHQUFNLEdBQWhFK2pCLEVBQW9CLEtBQUVDLEVBQXVCLEtBRTlDdm9CLEVBQVEyRyxLQUFLVSxJQUFJLEVBQUdWLEtBQUtTLElBQUkwYixFQUFhL2lCLEVBQU9oRixPQUFTLElBQ2hFLEdBQWlDa0QsRUFBQUEsRUFBQUEsWUFBVzhOLElBQXBDL0UsRUFBTSxFQUFOQSxPQUFRa0YsRUFBWSxFQUFaQSxhQUVWc2MsR0FBYWptQixFQUFBQSxFQUFBQSxjQUFZLGtCQUFNOGxCLEdBQWMsRUFBSyxHQUFFLENBQUNBLElBQ3JESSxHQUFrQmxtQixFQUFBQSxFQUFBQSxjQUFZLGtCQUFNZ21CLEdBQXdCLEVBQUssR0FBRSxDQUFDQSxJQUNwRUcsR0FBbUJubUIsRUFBQUEsRUFBQUEsY0FBWSxrQkFBTWdtQixHQUF3QixFQUFNLEdBQUUsQ0FBQ0EsSUFDdEV6RCxHQUFvQjNtQixFQUFBQSxFQUFBQSxVQUFRLGlCQUFNLENBQ3RDLENBQUV5bUIsU0FBVTRELEVBQVlybUIsUUFBUyx3QkFDakMsQ0FBRXlpQixTQUFVNkQsRUFBaUJ0bUIsU0FBUyxnQ0FBRSxVQUFNLDBCQUFNLFFBQVUsa0JBQy9ELEdBQUUsQ0FBQ3FtQixFQUFZQyxJQUVoQixHQUFzQixJQUFsQjFvQixFQUFPaEYsT0FDVCxPQUFPLFNBQUN1cUIsR0FBbUIsSUFHN0IsSUFBUTlqQixFQUFtQzBLLEVBQW5DMUssTUFBT0MsRUFBNEJ5SyxFQUE1QnpLLE9BQVF1RyxFQUFvQmtFLEVBQXBCbEUsT0FBUUMsRUFBWWlFLEVBQVpqRSxRQUUvQixPQUNFLGlDQUNFLFNBQUMsR0FBYSxDQUNaNmEsWUFBYTlpQixFQUNiMEosU0FBVXllLEtBRVosaUJBQUt2bEIsTUFBTyxDQUFFb0YsT0FBQUEsRUFBUUMsUUFBQUEsRUFBU3pHLE1BQU8sZUFBZ0IsV0FDcEQsaUJBQUtvQixNQUFPLENBQUVwQixNQUFBQSxHQUFRLFdBQ3BCLGdCQUFJb0IsTUFBTyxDQUFFdkIsU0FBVSxZQUFhLFVBQUMsaUJBRWpDLFNBQUN3akIsR0FBZ0IsQ0FDZi9CLFlBQWFBLEVBQ2JnQyxrQkFBbUJBLFFBSXpCLGdCQUFLbGlCLE1BQU8sQ0FBRW5CLE9BQUFBLEdBQVMsVUFDckIsU0FBQzhqQixHQUFhLENBQ1p2ZSxPQUFRQSxFQUNSOGIsWUFBYTlpQixVQUluQixnQkFDRTFJLFVBQVd5SixHQUFBQSxRQUNYLG9CQUFtQjhpQixFQUFROW9CLE9BQzNCNkgsTUFBTyxDQUFDLEVBQUUsVUFFVixTQUFDLEdBQWMsQ0FDYmloQixRQUFTQSxFQUNUN2pCLE1BQU9BLFNBSVpvb0IsSUFDQyxTQUFDLEdBQVcsQ0FDVnRGLFlBQWE5aUIsRUFDYnFsQixRQUFTLGtCQUFNZ0QsR0FBYyxFQUFNLElBR3RDQyxJQUNDLFNBQUNOLEdBQW9CLENBQ25CaGhCLE9BQVFBLEVBQ1I4UixXQUFZOVksRUFDWnFsQixRQUFTcUQsTUFLbkIsRUN0Rk8sU0FBU0MsR0FBa0JucEIsR0FDaEMsTUFBTyxDQUNMLGFBQ0EsZUFDQSxpQkFDQSxrQkFDQSxtQkFDQSw0QkFDQWpILFNBQVNpSCxFQUFLeEIsTUFDbEIsaUJDQ0ksR0FBVSxDQUFDLEVBRWYsR0FBUTdILGtCQUFvQixJQUM1QixHQUFRQyxjQUFnQixJQUVsQixHQUFRQyxPQUFTLFNBQWMsS0FBTSxRQUUzQyxHQUFRQyxPQUFTLElBQ2pCLEdBQVFDLG1CQUFxQixJQUVoQixJQUFJLEtBQVMsSUFBMUIsSUFLTyxHQUFlLE1BQVcsWUFBaUIsaUJBQWlCcUsscUNDZi9ELEdBQVUsQ0FBQyxFQUVmLEdBQVF6SyxrQkFBb0IsSUFDNUIsR0FBUUMsY0FBZ0IsSUFFbEIsR0FBUUMsT0FBUyxTQUFjLEtBQU0sUUFFM0MsR0FBUUMsT0FBUyxJQUNqQixHQUFRQyxtQkFBcUIsSUFFaEIsSUFBSSxLQUFTLElBQTFCLElBS08sR0FBZSxNQUFXLFlBQWlCLGlCQUFpQnFLLHV1RkNFNUQsU0FBU2dvQixHQUFpQixHQUF1RCxJQUFuRHp2QixFQUFRLEVBQVJBLFNBQW9CMHZCLEdBQUYsRUFBUjN3QixTQUFrQixFQUFSMndCLFVBQVVDLEVBQVEsRUFBUkEsU0FBYTF3QixFQUFJLFNBQ2xCLE1BQXRCbU0sRUFBQUEsRUFBQUEsVUFBUyxDQUFDLEtBQU0sT0FBTSxHQUF6RHdrQixFQUFhLEtBQUVDLEVBQWdCLEtBQ2hDQyxHQUFjOXFCLEVBQUFBLEVBQUFBLFVBQ2xCLGtCQXpCRyxTQUF3QmhGLEdBQzdCLE9BQU9BLEVBQVMrQixRQUFPLFNBQUNndUIsRUFBTTFwQixFQUFNbEQsR0FDbEMsSUFFTTZzQixFQUFhLFdBQUgsT0FBZ0MsSUFBdkJELEVBQUs1UixJQUFJLEdBQUd2YyxNQUFZLEVBY2pELE9BUkk0dEIsR0FBaUJucEIsS0FBVTJwQixNQUozQkEsS0FBZ0JSLEdBQWlCTyxFQUFLNVIsSUFBSSxHQUFHLEtBQ3hCLElBQXZCNFIsRUFBSzVSLElBQUksR0FBR3ZjLFNBTE9tdUIsRUFBS2p0QixLQUFLLElBQ1JpdEIsRUFBSzVSLElBQUksR0FBR3JiLEtBQUssU0FBS3VELEdBQUksSUFBRXdKLE1BQU8xTSxLQWVuRDRzQixDQUNULEdBQUcsQ0FBQyxJQUNOLENBS1VFLENBQWNqd0IsRUFBUyxHQUM3QixDQUFDQSxJQUdILFNBQVNrd0IsRUFBaUIzbUIsR0FDeEJuQyxRQUFRK29CLElBQUksUUFBUzVtQixHQUNyQnNtQixHQUFpQixrQkFBTXRtQixDQUFNLEdBQy9CLENBRUEsU0FBUzZtQixFQUFpQjdtQixHQUN4QixPQUFPOG1CLEtBQVFULEVBQWVybUIsRUFDaEMsQ0FFQSxTQUFTK21CLEVBQWlCL21CLEdBQ3hCc21CLEdBQWlCLFNBQUFwc0IsR0FFZixPQURBMkQsUUFBUStvQixJQUFJLFVBQVc1bUIsRUFBUSxlQUFnQjlGLEdBQ3hDNHNCLEtBQVE1c0IsRUFBTzhGLEdBQVUsQ0FBQyxLQUFNLE1BQVE5RixDQUNqRCxHQUNGLENBRUEsU0FBUzhzQixJQUNQbnBCLFFBQVErb0IsSUFBSSxhQUFjUCxHQUMxQixTQUF5QkEsRUFBYSxHQUEvQjdVLEVBQUcsS0FBRXlWLEVBQUcsS0FBRUMsRUFBSSxLQUNiNWdCLEVBQVVpZ0IsRUFBWS9VLEdBQUt5VixHQUEzQjNnQixNQUNGMkYsRUFBTzNGLEVBQVE3UCxFQUFTNEIsT0FBUyxFQUNuQ2lPLEVBQVEsR0FDUCxFQUVMNVEsRUFBS3l4QixPQUFnQixJQUFURCxFQUFhamIsRUFBTzNGLEVBQ2xDLENBRUEsT0FBTzZmLElBQ0wsaUJBQUt2eEIsVUFBVyxDQUNkeUosR0FBQUEsWUFDQThuQixFQUFXOW5CLEdBQUFBLFNBQWtCLEdBQ2hCLFFBQWIrbkIsRUFBcUIvbkIsR0FBQUEsWUFBcUIsSUFDMUNwSixLQUFLLEtBQUssVUFDVHN4QixFQUFZcnRCLEtBQUksU0FBQ3NZLEVBQUs1WCxHQUFDLE9BQ3RCLFVBQUMsRUFBQXlZLFNBQVEsWUFDUCxTQUFDK1UsR0FBVyxDQUNWNVYsSUFBS0EsRUFDTDZWLFdBQVlSLEVBQWdCLENBQUNqdEIsRUFBRyxHQUFJLElBQ3BDMHRCLFlBQWEsa0JBQU1YLEVBQWdCLENBQUMvc0IsRUFBRyxHQUFJLEdBQUcsRUFDOUMydEIsWUFBYSxrQkFBTVIsRUFBZ0IsQ0FBQ250QixFQUFHLEdBQUksR0FBRyxFQUM5Q3V0QixPQUFRSCxJQUVUeFYsRUFBSXRZLEtBQUksU0FBQzRELEVBQU0wcUIsR0FBQyxPQUNmLFVBQUMsRUFBQW5WLFNBQVEsWUFDUCxTQUFDb1YsR0FBYyxDQUNiM3FCLEtBQU1BLEVBQ051cUIsV0FBWVIsRUFBZ0IsQ0FBQ2p0QixFQUFHNHRCLEVBQUcsSUFDbkNGLFlBQWEsa0JBQU1YLEVBQWdCLENBQUMvc0IsRUFBRzR0QixFQUFHLEdBQUcsRUFDN0NELFlBQWEsa0JBQU1SLEVBQWdCLENBQUNudEIsRUFBRzR0QixFQUFHLEdBQUcsRUFDN0NMLE9BQVFILEtBRVYsU0FBQ1UsR0FBYSxDQUNaNXFCLEtBQU1BLEVBQ051cUIsV0FBWVIsRUFBZ0IsQ0FBQ2p0QixFQUFHNHRCLEVBQUcsSUFDbkNGLFlBQWEsa0JBQU1YLEVBQWdCLENBQUMvc0IsRUFBRzR0QixFQUFHLEdBQUcsRUFDN0NELFlBQWEsa0JBQU1SLEVBQWdCLENBQUNudEIsRUFBRzR0QixFQUFHLEdBQUcsRUFDN0NMLE9BQVFILEVBQ1IsY0FDR2YsR0FBaUJucEIsSUFBUzBxQixJQUFNaFcsRUFBSW5aLE9BQVMsRUFFMUMsRUFEQTRMLEtBQUtVLElBQUksRUFBRyxFQUFJNmlCLE9BaEJYQSxFQW9CSixNQTdCQTV0QixFQStCSixLQUViLFNBQUN3dEIsR0FBVyxDQUNWNVYsSUFBSytVLEVBQVlsdUIsT0FBUyxFQUMxQmd2QixXQUFZUixFQUFnQixDQUFDTixFQUFZbHVCLE9BQVMsRUFBR2t1QixFQUFZM1IsSUFBSSxHQUFHdmMsT0FBUyxFQUFHLElBQ3BGaXZCLFlBQWEsa0JBQU1YLEVBQWdCLENBQUNKLEVBQVlsdUIsT0FBUyxFQUFHa3VCLEVBQVkzUixJQUFJLEdBQUd2YyxPQUFTLEVBQUcsR0FBRyxFQUM5Rmt2QixZQUFhLGtCQUFNUixFQUFnQixDQUFDUixFQUFZbHVCLE9BQVMsRUFBR2t1QixFQUFZM1IsSUFBSSxHQUFHdmMsT0FBUyxFQUFHLEdBQUcsRUFDOUY4dUIsT0FBUUgsTUFJaEIsQ0FFQSxTQUFTVyxHQUFRLEdBQTBELE1BQXRETixFQUFVLEVBQVZBLFdBQVUsSUFBRU8sUUFBQUEsT0FBTyxJQUFHLEdBQUssTUFBRXBwQixRQUFBQSxPQUFPLElBQUcsS0FBRSxFQUFLOUksRUFBSSxTQUNyRSxPQUNFLG1CQUNFLGtCQUFpQmt5QixFQUNqQmh6QixVQUFXLENBQ1R5SixHQUFBQSxlQUNBZ3BCLEVBQWFocEIsR0FBQUEsVUFBbUIsSUFBRSxVQUMvQkcsNFZBQ0h2SixLQUFLLE1BQ0hTLEdBR1YsQ0FFTyxTQUFTK3hCLEdBQWMsR0FBcUIsSUFBakIzcUIsRUFBSSxFQUFKQSxLQUFTcEgsRUFBSSxTQUM3QyxPQUNFLFNBQUNpeUIsR0FBUSxJQUFDQyxRQUFTM0IsR0FBaUJucEIsSUFBV3BILEdBRW5ELENBRU8sU0FBU2d5QixHQUFhLEdBQXFCLElBQWpCNXFCLEVBQUksRUFBSkEsS0FBU3BILEVBQUksU0FDNUMsT0FDRSxTQUFDaXlCLEdBQVEsSUFBQ0MsUUFBUzNCLEdBQWlCbnBCLEdBQU8wQixRQUFTLENBQUNILEdBQUFBLGFBQXdCM0ksR0FFakYsQ0FFTyxTQUFTMHhCLEdBQVcsR0FBTyxFQUFINVYsSUFBNEIsSUFBdkI2VixFQUFVLEVBQVZBLFdBQWUzeEIsRUFBSSxTQUNyRCxPQUNFLG1CQUNFLGlCQUFlLE1BQ2ZkLFVBQVcsQ0FDVHlKLEdBQUFBLGNBQ0FncEIsRUFBYWhwQixHQUFBQSxVQUFtQixJQUNoQ3BKLEtBQUssTUFDSFMsR0FHViw2WUMzSUEsSUFBTW15QixHQUFjLFNBQUF2c0IsR0FBSyxNQUFLLENBQUVBLE1BQU8sTUFBT2pDLE9BQVEsQ0FBQyxDQUFFaUMsTUFBQUEsRUFBT2pDLE9BQVEsS0FBTyxFQUV6RXl1QixHQUFrQixDQUN0QixDQUFFQyxRQUFTLFFBQVNDLFFBQVMsU0FBQUMsR0FBSyxPQUFJSixHQUFZLElBQUQsT0FBS0ksR0FBUSxHQUM5RCxDQUFFRixRQUFTLFFBQVNDLFFBQVMsU0FBQUUsR0FBSSxPQUFJTCxHQUFZSyxFQUFLN2xCLGNBQWMsR0FDcEUsQ0FDRTBsQixRQUFTLFFBQ1RDLFFBQVMsU0FBQUUsR0FBSSxNQUFLLENBQ2hCNXNCLE1BQU8sTUFDUGpDLE9BQVEsQ0FBQyxDQUNQaUMsTUFBTyxLQUNQakMsT0FBUSxDQUFDLENBQ1BpQyxNQUFPNHNCLEVBQUs3bEIsY0FDWmhKLE9BQVEsT0FHYixJQUlDOHVCLEdBQWlCLENBQ3JCLElBQUtOLEdBQVksUUFDakIsSUFBS0EsR0FBWSxNQUNqQixJQUFLQSxHQUFZLFNBQ2pCTyxFQUFHUCxHQUFZLFFBQ2YsSUFBS0EsR0FBWSxTQUNqQixJQUFLQSxHQUFZLFNBQ2pCLElBQUtBLEdBQVksUUFDakIsSUFBS0EsR0FBWSxRQUNqQixJQUFLQSxHQUFZLFFBQ2pCLElBQUtBLEdBQVksUUFDakIsS0FBTUEsR0FBWSxPQUNsQixJQUFLQSxHQUFZLFNBQ2pCLElBQUtBLEdBQVksU0FDakJRLEVBQUdSLEdBQVksU0FDZixJQUFLQSxHQUFZLFNBQ2pCLElBQUtBLEdBQVksUUFDakIsSUFBS0EsR0FBWSxRQUNqQixJQUFLQSxHQUFZLFFBQ2pCLElBQUtBLEdBQVksUUFDakIsSUFBS0EsR0FBWSxRQUNqQixLQUFNQSxHQUFZLFFBQ2xCLElBQUtBLEdBQVksUUFDakIsR0FBSUEsR0FBWSxVQUNoQixJQUFLQSxHQUFZLFFBQ2pCLElBQUtBLEdBQVksU0FDakIsSUFBTUEsR0FBWSxPQUNsQixJQUFLQSxHQUFZLE9BQ2pCLElBQUtBLEdBQVksU0FDakIsSUFBS0EsR0FBWSxTQUNqQixJQUFLQSxHQUFZLFNBQ2pCLElBQUtBLEdBQVksTUFDakIsSUFBS0EsR0FBWSxPQUNqQixJQUFLQSxHQUFZLE1BQ2pCLElBQUtBLEdBQVksUUFDakIsSUFBS0EsR0FBWSxVQStFbkIsT0FoRUEsU0FBc0IsR0FBZSxRQUFYbEYsRUFBTyxFQUFQQSxRQUN4QixHQUFrQ3BuQixFQUFBQSxFQUFBQSxZQUFXekgsR0FBckN5SixFQUFPLEVBQVBBLFFBQVMvQixFQUFZLEVBQVpBLGFBQ3dDLE1BQTdCcUcsRUFBQUEsRUFBQUEsVUFBUyx1QkFBb0IsMG5CQUFsRHltQixFQUFNLEtBQUVDLEVBQVMsS0FZbEI5eEIsR0FYV2dGLEVBQUFBLEVBQUFBLFVBQVEsV0FDdkIsT0FBTzZzQixFQUFPM3VCLE1BQU0sSUFBSW5CLFFBQU8sU0FBQ2d3QixFQUFVTixHQUN4QyxJQUFNeEQsRUFqQlosU0FBdUJ3RCxHQUNyQixHQUFJQyxHQUFlRCxHQUNqQixPQUFPQyxHQUFlRCxHQUN2QixJQUVpRCxFQUZqRCxtbUJBRWtDSixJQUFlLElBQWxELElBQUssRUFBTCxxQkFBb0QsZUFBdkNDLEVBQU8sRUFBUEEsUUFBU0MsRUFBTyxFQUFQQSxRQUNwQixHQUFJRSxFQUFLbHZCLE1BQU0rdUIsR0FDYixPQUFPQyxFQUFRRSxFQUVuQixDQUFDLCtCQUNILENBT3FCdkQsQ0FBYXVELEdBSzVCLE9BSkl4RCxHQUNGOEQsRUFBU2p2QixLQUFLbXJCLEdBR1Q4RCxDQUNULEdBQUcsR0FDTCxHQUFHLENBQUNGLElBRXNCcHZCLEtBQUksWUFBZ0IsT0FBT3VhLEdBQWYsRUFBTG5ZLE1BQWEsRUFBTmpDLE9BR3RDa0UsT0FDQVcsRUFDQTFDLEVBQ0QsSUFFS3FTLEdBQWFoTyxFQUFBQSxFQUFBQSxjQUFZLFNBQUEyQixHQUN6QkEsSUFDRkEsRUFBS3NNLFFBQ0x0TSxFQUFLdU0sU0FFVCxHQUFHLElBRUgsT0FDRSxTQUFDLEdBQUssV0FDSixVQUFDelAsR0FBUyxDQUFDQyxhQUFhLEVBQU0sV0FDNUIsd0JBQUksNEJBQ0osdUJBQUcscUVBRUgscUJBQ0VqRCxNQUFPZ3RCLEVBQ1Bsb0IsSUFBS3lOLEVBQ0wzTixNQUFPLENBQUVwQixNQUFPLE9BQVFDLE9BQVEsUUFDaEN5RCxTQUFVLFNBQUExQyxHQUFDLE9BQUl5b0IsRUFBVXpvQixFQUFFRSxPQUFPMUUsTUFBTSxLQUcxQyxnQkFBSzFHLFVBQVd5SixHQUFBQSxjQUFxQixTQUNsQzVILEVBQVN5QyxLQUFJLFNBQUM0RCxFQUFNbEQsR0FBQyxPQUNwQixTQUFDLEVBQUF5WSxTQUFRLFdBQ1AsU0FBQyxHQUFVLENBQUM5TCxZQUFZLEVBQU0sVUFDNUIsU0FBQyxHQUFlLENBQ2QvRSxLQUFNMUUsRUFBS3pELE9BQU8sR0FDbEIyTixTQUFVLFdBQU8sT0FKUnBOLEVBT0osT0FJZixpQkFBS2hGLFVBQVd5SixHQUFBQSxhQUFvQixXQUNsQyxTQUFDLEdBQVksQ0FBQzVJLFFBQVMsa0JBQU1rdEIsRUFBUWxzQixFQUFTLEVBQUMsU0FBQyxrQkFDaEQsU0FBQyxHQUFZLENBQUNoQixRQUFTLGtCQUFNa3RCLEVBQVEsR0FBRyxFQUFFdmtCLFdBQVMsV0FBQyxrQkFLOUQsRUMzSWFxcUIsR0FBZSxTQUFBdnVCLEdBQUssT0FBSUEsRUFBTWhELFNBQVNRLE9BQU93RCxNQUFNLEVBRTNEd3RCLElBQWM5UyxFQUFBQSxHQUFBQSxJQUFZLENBQzlCamhCLEtBQU0sU0FDTmtoQixhQUFjLEdBQ2RDLFNBQVUsQ0FDUjZTLFNBQVEsU0FBRXp1QixHQUNSQSxFQUFNWCxLQUFLLENBQ1Q1RSxLQUFNLFlBQ05rSSxPQUFRLENBQUMsYUFDVEUsV0FBWSxDQUNWK0YsV0FBWSxDQUFFbEMsT0FBUSxxQkFBc0IzRCxJQUFLLHdCQUNqREQsTUFBTyxDQUFFNEQsT0FBUSxZQUFhM0QsSUFBSyxlQUNuQyxpQkFBa0IsQ0FBRTJELE9BQVEsR0FDNUJuSyxTQUFVLENBQUVtSyxPQUFRLEdBQUkzRCxJQUFLLE1BR25DLEVBQ0EyckIsWUFBVyxTQUFFMXVCLEVBQU9tUSxHQUNsQm5RLEVBQU1tUSxFQUFPNEwsUUFBUTNQLE9BQU8zUixLQUFPMFYsRUFBTzRMLFFBQVF0aEIsSUFDcEQsRUFDQWswQixZQUFXLFNBQUUzdUIsRUFBT21RLEdBQ2xCblEsRUFBTXFjLE9BQU9sTSxFQUFPNEwsUUFBUTNQLE1BQU8sRUFDckMsRUFDQXdpQix1QkFBc0IsU0FBRTV1QixFQUFPbVEsR0FDN0JuUSxFQUFNbVEsRUFBTzRMLFFBQVE4UyxZQUFZaHNCLFdBQVd0RyxTQUFTbUssT0FBT3JILEtBQUssQ0FDL0QrQixNQUFPLGVBQ1BqQyxPQUFRLElBRVosRUFDQTJ2QixtQkFBa0IsU0FBRTl1QixFQUFPbVEsR0FDekJuUSxFQUFNbVEsRUFBTzRMLFFBQVE4UyxZQUFZaHNCLFdBQVd0RyxTQUFTbUssT0FBT3JILEtBQUs4USxFQUFPNEwsUUFBUVMsUUFDbEYsRUFDQXVTLG1CQUFrQixTQUFFL3VCLEVBQU9tUSxHQUN6Qm5RLEVBQU1tUSxFQUFPNEwsUUFBUThTLFlBQVloc0IsV0FBV3RHLFNBQVNtSyxPQUFPeUosRUFBTzRMLFFBQVFRLFdBQWFwTSxFQUFPNEwsUUFBUVMsT0FDekcsRUFDQXdTLG9CQUFtQixTQUFFaHZCLEVBQU9tUSxHN0M1QnpCLElBQTRCMkIsRUFBTzFGLEVBQU90RyxFNkM2QjNDOUYsRUFBTW1RLEVBQU80TCxRQUFROFMsWUFBWWhzQixXQUFXdEcsU0FBU21LLFE3QzdCeEJvTCxFNkM4QjNCOVIsRUFBTW1RLEVBQU80TCxRQUFROFMsWUFBWWhzQixXQUFXdEcsU0FBU21LLE83QzlCbkIwRixFNkMrQmxDK0QsRUFBTzRMLFFBQVFRLFc3QzlCTCxLQUQrQnpXLEU2Q2dDekNxSyxFQUFPNEwsUUFBUWtULGE3QzlCWixHQUFQLFVBQVduZCxFQUFNalQsUUFBTyxTQUFDc3ZCLEVBQUd6dUIsR0FBQyxPQUFLQSxJQUFNME0sQ0FBSyxLQUFDLENBQUUwRixFQUFNMUYsS0FHdEMwRixFQUFNeFQsUUFBTyxTQUFDNHdCLEVBQUt4ekIsRUFBS2dFLEdBR3hDLE9BRklBLElBQU1vRyxHQUFRb3BCLEVBQUk3dkIsS0FBS3lTLEVBQU0xRixJQUM3QjFNLElBQU0wTSxHQUFPOGlCLEVBQUk3dkIsS0FBSzNELEdBQ25Cd3pCLENBQ1QsR0FBRyxJNkN5QkQsRUFDQUMsbUJBQWtCLFNBQUVudkIsRUFBT21RLEdBQ3pCblEsRUFBTW1RLEVBQU80TCxRQUFROFMsWUFBWWhzQixXQUFXdEcsU0FBU21LLE9BQU8yVixPQUFPbE0sRUFBTzRMLFFBQVFRLFVBQVcsRUFDL0YsRUFDQTZTLHNCQUFxQixTQUFFcHZCLEVBQU9tUSxHQUM1QjdRLE9BQU9DLE9BQU9TLEVBQU1tUSxFQUFPNEwsUUFBUThTLFlBQWExZSxFQUFPNEwsUUFBUXppQixRQUNqRSxLQUlHLEdBVUhrMUIsR0FBWTlkLFFBVGQrZCxHQUFRLEdBQVJBLFNBRUFFLElBRFcsR0FBWEQsWUFDVyxHQUFYQyxhQUNBQyxHQUFzQixHQUF0QkEsdUJBQ0FFLEdBQWtCLEdBQWxCQSxtQkFDQUMsR0FBa0IsR0FBbEJBLG1CQUNBQyxHQUFtQixHQUFuQkEsb0JBQ0FHLEdBQWtCLEdBQWxCQSxtQkFDQUMsR0FBcUIsR0FBckJBLHNCQUdGLEdBQWVaLEdBQW1CLG1pQ0M5Q2xDLFNBQVNhLEdBQVk3MEIsR0FDbkIsSUFBUXEwQixFQUFtQ3IwQixFQUFuQ3EwQixXQUFZdHlCLEVBQXVCL0IsRUFBdkIrQixTQUFVNkQsRUFBYTVGLEVBQWI0RixTQUNnQixNQUFkdUgsRUFBQUEsRUFBQUEsVUFBUyxNQUFLLEdBQXZDc2tCLEVBQVEsS0FBRXFELEVBQVcsS0FDcUMsTUFBZjNuQixFQUFBQSxFQUFBQSxXQUFTLEdBQU0sR0FBMUQ0bkIsRUFBaUIsS0FBRUMsRUFBb0IsS0EwQzlDLE9BMUJBbHZCLEVBQUFBLEVBQUFBLFlBQVUsV0FDUixTQUFTbXZCLElBQ1BILEVBQVksS0FDZCxDQUNBLFNBQVNJLEVBQVd6aUIsR0FDbEJBLEVBQU1zRyxrQkFDTnRHLEVBQU1PLGdCQUNSLENBSUEsT0FGQXJILFNBQVN4SSxLQUFLZ1IsaUJBQWlCLE9BQVE4Z0IsR0FDdkN0cEIsU0FBU3hJLEtBQUtnUixpQkFBaUIsV0FBWStnQixHQUNwQyxXQUNMdnBCLFNBQVN4SSxLQUFLaVIsb0JBQW9CLE9BQVE2Z0IsR0FDMUN0cEIsU0FBU3hJLEtBQUtpUixvQkFBb0IsV0FBWThnQixFQUNoRCxDQUNGLEdBQUcsQ0FBQ0osS0FZRixpQ0FDRSxpQkFBSzUwQixVQUFXeUosR0FBQUEsY0FBcUIsVUFDbEM1SCxFQUFTeUMsS0FBSSxTQUFDNEQsRUFBTWxELEdBQUMsT0FDcEIsU0FBQyxXQUFjLFdBQ2IsVUFBQyxHQUFVLENBRVQsYUFBWUEsRUFDWjRNLFdBQVl5ZixHQUFpQm5wQixHQUFRdUIsR0FBQUEsZUFBd0IsR0FDN0R3ckIsV0FBUyxFQUNUQyxZQUFhLFNBQUFocUIsR0FBQyxPQWxEMUIsU0FBMEJxSCxFQUFPYixHQUMvQixHQUFJYSxFQUFNNGlCLGFBQWFDLE1BQU0zeEIsT0FDM0I4TyxFQUFNNGlCLGFBQWFFLGdCQURyQixDQUtBLElBQU12VCxFQUFVamdCLEVBQVM2UCxHQUN6QmtqQixFQUFZLENBQ1ZsakIsTUFBQUEsRUFDQTRqQixLQUFNakUsR0FBaUJ2UCxHQUFXLE1BQVEsTUFDMUN1UCxpQkFBa0JBLEdBQWlCdlAsSUFOckMsQ0FRRixDQXNDOEJ5VCxDQUFnQnJxQixFQUFHbEcsRUFBRSxFQUFDLFdBRXhDLFNBQUMsR0FBRyxDQUNGakIsUUFBU3N0QixHQUFpQm5wQixHQUFRLGNBQVdvQixFQUM3QzVDLE1BQU93QixFQUFLeEIsTUFDWmpDLE9BQVF5RCxFQUFLekQsT0FDYnVJLFNBQVUsU0FBQW1ZLEdBQ1J6ZixFQUFTMnVCLEdBQW1CLENBQzFCRixXQUFBQSxFQUNBdFMsVUFBVzdjLEVBQ1g4YyxRQUFTcUQsSUFFYixLQUVGLGdCQUFLbmxCLFVBQVd5SixHQUFBQSxRQUFlLFVBQzdCLFNBQUMsRUFBSSxDQUNIMUosS0FBSyxRQUNMQyxVQUFXeUosR0FBQUEsV0FDWDVJLFFBQVNtb0IsSUFBSyxrQkFBTXRqQixFQUFTK3VCLEdBQW1CLENBQzlDTixXQUFBQSxFQUNBdFMsVUFBVzdjLElBQ1YsVUF6QkZBLElBRllBLEVBK0JKLEtBRW5CLFNBQUNzc0IsR0FBaUIsQ0FDaEJDLFNBQVVBLEVBQ1YxdkIsU0FBVUEsRUFDVjB3QixPQWpEUixTQUFxQmdDLEdBQ25CN3VCLEVBQVM0dUIsR0FBb0IsQ0FDM0JILFdBQUFBLEVBQ0F0UyxVQUFXMFAsRUFBUzdmLE1BQ3BCNmlCLFlBQUFBLEtBRUZLLEVBQVksS0FDZCxPQThDS0MsSUFDQyxTQUFDLEdBQWEsQ0FBQzlHLFFBQVMsU0FBQWxzQixHQUN0Qml6QixHQUFxQixHQUFNLElBQ0csRUFESCxtbUJBQ0xqekIsR0FBUSxJQUE5QixJQUFLLEVBQUwscUJBQWdDLEtBQXJCaWdCLEVBQU8sUUFDaEJwYyxFQUFTMHVCLEdBQW1CLENBQzFCRCxXQUFBQSxFQUNBclMsUUFBQUEsSUFFSixDQUFDLCtCQUNILEtBR0YsaUJBQUs5aEIsVUFBV3lKLEdBQUFBLGFBQW9CLFdBQ2xDLFNBQUMsR0FBWSxDQUFDNUksUUFBUyxrQkFBTTZFLEVBQVN3dUIsR0FBdUIsQ0FBRUMsV0FBQUEsSUFBYyxFQUFDLFNBQUMseUJBRy9FLFNBQUMsR0FBWSxDQUFDdHpCLFFBQVMsV0FDckI2RSxFQUFTMHVCLEdBQW1CLENBQzFCdFMsUUFBUyxDQUFFcGIsTUFBTyxNQUFPakMsT0FBUSxJQUNqQzB2QixXQUFBQSxJQUVKLEVBQUUsU0FBQyxxQkFHSCxTQUFDLEdBQVksQ0FBQ3R6QixRQUFTLGtCQUFNaTBCLEdBQXFCLEVBQUssRUFBQyxTQUFDLDZCQU1qRSxDQUVBSCxHQUFXcjBCLFVBQVksQ0FDckJ1QixTQUFVdEIsSUFBQUEsTUFBQUEsV0FDVjR6QixXQUFZNXpCLElBQUFBLE9BQUFBLFdBQ1ptRixTQUFVbkYsSUFBQUEsS0FBQUEsWUFHWixtMENDckVBLE9BekVBLFNBQW9CLEdBQXVCLFlBQW5CK0gsRUFBSyxFQUFMQSxNQUFPMEUsRUFBUSxFQUFSQSxTQUNnQixNQUFmQyxFQUFBQSxFQUFBQSxVQUFTM0UsS0FBTSxzNUJBQXRDdWhCLEVBQU8sS0FBRUMsRUFBVSxLQVUxQixPQUNFLFNBQUMsR0FBSyxDQUFDamdCLFVBTFQsV0FDRW1ELEVBQVMxRSxFQUNYLEVBR2lDLFVBQzdCLFVBQUNvQixHQUFTLENBQUNHLFVBVmYsV0FDRW1ELEVBQVM2YyxFQUNYLEVBUXdDLFdBQ2xDLDBCQUFJLGNBQVUsMEJBQU92aEIsRUFBTXZJLFdBQzNCLDRCQUNFLFNBQUNnTixHQUFlLENBQ2RILEtBQU1pZCxFQUNON2MsU0FBVThjLEtBR1osaUJBQUs5cEIsVUFBV3lKLEdBQUFBLE1BQWEsV0FDM0Isa0JBQU91Z0IsUUFBUSx1QkFBc0IsU0FBQyxlQUd0QyxrQkFDRUMsR0FBRyx1QkFDSHpqQixLQUFLLFNBQ0x1USxZQUFZLFVBQ1pyUSxPQUFvQyxRQUE3QixFQUFBbWpCLEVBQVExaEIsV0FBVyxrQkFBVSxhQUE3QixFQUErQjZELFNBQVUsR0FDaEQ0QixTQUFVLFNBQUEyRSxHQUFLLE9BQ2J1WCxHQUFXLFNBQUF4a0IsR0FBSyxnQkFDWEEsR0FBSyxJQUNSNkMsV0FBWSxTQUNQN0MsRUFBTTZDLFlBQVUsSUFDbkIsVUFBa0MsS0FBdkJvSyxFQUFNbkgsT0FBTzFFLFdBQ3BCNEMsRUFDQSxDQUFFMEMsT0FBUWlMLE9BQU8xRSxFQUFNbkgsT0FBTzFFLFdBQ25DLEdBQ0EsUUFLVCxpQkFBSzFHLFVBQVd5SixHQUFBQSxNQUFhLFdBQzNCLGtCQUFPdWdCLFFBQVEsc0JBQXFCLFNBQUMsY0FHckMsa0JBQ0VDLEdBQUcsc0JBQ0h6akIsS0FBSyxTQUNMdVEsWUFBWSxVQUNaclEsT0FBbUMsUUFBNUIsRUFBQW1qQixFQUFRMWhCLFdBQVcsaUJBQVMsYUFBNUIsRUFBOEI2RCxTQUFVLEdBQy9DNEIsU0FBVSxTQUFBMkUsR0FBSyxPQUNidVgsR0FBVyxTQUFBeGtCLEdBQUssZ0JBQ1hBLEdBQUssSUFDUjZDLFdBQVksU0FDUDdDLEVBQU02QyxZQUFVLElBQ25CLFNBQWlDLEtBQXZCb0ssRUFBTW5ILE9BQU8xRSxXQUNuQjRDLEVBQ0EsQ0FBRTBDLE9BQVFpTCxPQUFPMUUsRUFBTW5ILE9BQU8xRSxXQUNuQyxHQUNBLGNBU25CLDZHQ3JFQSxTQUFTOHVCLEdBQU8xMUIsR0FDZCxRQUFRNFIsRUFBMkI1UixFQUEzQjRSLE1BQU9wSixFQUFvQnhJLEVBQXBCd0ksTUFBTzVDLEVBQWE1RixFQUFiNEYsU0FDNkIsTUFBZnVILEVBQUFBLEVBQUFBLFdBQVMsS0FBTSxzNUJBQTVDNmpCLEVBQVUsS0FBRUMsRUFBYSxLQUUxQjBFLEdBQWtCeHFCLEVBQUFBLEVBQUFBLGNBQVksU0FBVXNILEdBQzVDQSxFQUFNc0csaUJBQW1CdEcsRUFBTXNHLGtCQUMvQmtZLEdBQWMsRUFDaEIsR0FBRyxDQUFDQSxJQU9KLE9BQ0UsaUJBQUsvd0IsVUFBV3lKLEdBQUFBLE1BQWEsVUFDMUJxbkIsSUFDQyxTQUFDLEdBQVcsQ0FBQ3hvQixNQUFPQSxFQUFPMEUsU0FSakMsU0FBNkJwTyxHQUMzQm15QixHQUFjLEdBQ2RyckIsRUFBU2d2QixHQUFzQixDQUFFUCxXQUFZemlCLEVBQU85UyxRQUFBQSxJQUN0RCxLQU9JLGlCQUFLb0IsVUFBV3lKLEdBQUFBLFFBQWUsV0FDN0IsZUFBSTVJLFFBQVM0MEIsRUFBZ0IsU0FDMUJudEIsRUFBTUwsT0FBTyxNQUVoQiw0QkFDRSxTQUFDLEVBQUksQ0FDSGxJLEtBQUssU0FDTEMsVUFBUyxVQUFLeUosR0FBQUEsUUFDZDVJLFFBQVM0MEIsS0FFWCxTQUFDLEVBQUksQ0FDSDExQixLQUFLLFlBQ0xDLFVBQVMsVUFBS3lKLEdBQUFBLE9BQWEsWUFBSUEsR0FBQUEsUUFDL0I1SSxRQUFTLGtCQUFNNkUsRUFBU3V1QixHQUFZLENBQUV2aUIsTUFBQUEsSUFBUyxXQUlyRCxTQUFDLEdBQVUsQ0FDVHlpQixXQUFZemlCLEVBQ1o3UCxTQUFVeUcsRUFBTUgsV0FBV3RHLFNBQVNtSyxPQUNwQ3RHLFNBQVVBLE1BSWxCLENBRUE4dkIsR0FBTWwxQixVQUFZLENBQ2hCb1IsTUFBT25SLElBQUFBLE9BQUFBLFdBQ1ArSCxNQUFPL0gsSUFBQUEsTUFBZ0IsQ0FDckJSLEtBQU1RLElBQUFBLE9BQUFBLFdBQ04wSCxPQUFRMUgsSUFBQUEsUUFBa0JBLElBQUFBLFFBQWtCMkwsV0FDNUMvRCxXQUFZNUgsSUFBQUEsT0FBQUEsYUFDWDJMLFdBQ0h4RyxTQUFVbkYsSUFBQUEsS0FBQUEsWUFHWixVQzFCQSxHQTVCQSxXQUNFLElBQU0rRixHQUFTYixFQUFBQSxFQUFBQSxJQUFZb3VCLElBQ3JCbnVCLEdBQVdDLEVBQUFBLEVBQUFBLE1BRWpCLE9BQ0UsaUJBQUszRixVQUFXeUosR0FBQUEsS0FBWSxXQUMxQixpQkFBS3pKLFVBQVd5SixHQUFBQSxRQUFlLFdBQzdCLFVBQUMsR0FBSSxDQUFDbWQsVUFBUSxFQUFDRCxLQUFLLHdDQUF1QyxXQUN6RCxTQUFDLEVBQUksQ0FBQzVtQixLQUFLLFNBQVMsd0JBR3RCLFNBQUMsR0FBWSxDQUFDYyxRQUFTLGtCQUFNNkUsRUFBU3F1QixLQUFXLEVBQUMsU0FBQyxxQkFLcER6dEIsRUFBT2hDLEtBQUksU0FBQ2dFLEVBQU90RCxHQUFDLE9BQ25CLFNBQUMsR0FBSyxDQUVKc0QsTUFBT0EsRUFDUG9KLE1BQU8xTSxFQUNQVSxTQUFVQSxHQUhMVixFQUlMLE1BSVYsRUNsQ00wd0IsR0FBWSxDQUFDLEVBRU5odkIsR0FBUW5HLElBQUFBLE9BQUFBLFdBQ1JrRSxHQUFTbEUsSUFBQUEsUUFBa0JBLElBQUFBLE1BQWdCbTFCLEtBRXhEQSxHQUFVaHZCLE1BQVFBLEdBQ2xCZ3ZCLEdBQVVqeEIsT0FBU0EsR0FFWixJQUFNcWQsR0FBVXZoQixJQUFBQSxNQUFnQm0xQixJQ1AxQjlMLEdBQVFycEIsSUFBQUEsTUFBZ0IsQ0FDbkN3cEIsV0FBWXhwQixJQUFBQSxPQUNabVIsTUFBT25SLElBQUFBLE9BQ1BzQixTQUFVdEIsSUFBQUEsUUFBa0J1aEIsSUFDNUJpSCxhQUFjeG9CLElBQUFBLFFBQ1pBLElBQUFBLFFBQ0EyTCxhQ0xTeEQsR0FBUW5JLElBQUFBLE1BQWdCLENBQ25DbVIsTUFBT25SLElBQUFBLE9BQ1BSLEtBQU1RLElBQUFBLE9BQ053cEIsV0FBWXhwQixJQUFBQSxPQUNac0IsU0FBVXRCLElBQUFBLFFBQWtCdWhCLElBQVM1VixXQUNyQzhWLGVBQWdCemhCLElBQUFBLFFBQWtCdWhCLE1BR3ZCaGYsR0FBU3ZDLElBQUFBLE1BQWdCLENBQ3BDa0ksT0FBUWxJLElBQUFBLFFBQWtCbUksSUFBT3dELFdBQ2pDbWUsT0FBUTlwQixJQUFBQSxRQUFrQnFwQiw0QkNKNUIsU0FBUytMLEdBQXVCam1CLEdBTTlCLE9BTHlCQSxFQUFPa21CLE9BQU0sU0FBQXhwQixHQUFHLFlBQzNCOUMsSUFBWjhDLEVBQUl3USxVQUNRdFQsSUFBWjhDLEVBQUlpbUIsR0FBaUIsSUFJbkIsQ0FBQyx3R0FDRCxFQUNOLDhtRENkQSxJQUFNd0QsR0FBYSxTQUFBQyxHQUFJLE9BQUlBLEVBQUsvMUIsSUFBSSxFQUM5QmcyQixHQUFhLFNBQUFELEdBQUksT0FBSUEsRUFBSzd0QixPQUFPLEVBQUUsRUFDbkMrdEIsR0FBYyxTQUFBRixHQUFJLE9BQUlBLEVBQUszdEIsV0FBV0MsTUFBTTRELE1BQU0sRUFXeEQsU0FBU2lxQixHQUFpQmgyQixFQUFZbU0sR0FDcEMsSUFBTThwQixFQUFhQyxLQUFRbDJCLEVBQVltTSxHQUN2QyxPQUFPeEgsT0FBT3d4QixPQUFPRixHQUNsQi94QixRQUFPLFNBQUFreUIsR0FBSyxPQUFJQSxFQUFNNXlCLE9BQVMsQ0FBQyxHQUNyQyxDQVNBLFNBQVM2eUIsR0FBc0J4ekIsR0FDN0IsSUFBTXl6QixFQUErQnp6QixFQUFPMkYsT0FzRDlCbkUsS0FBSSxTQUFDb0UsRUFBTzFELEdBQUMsTUFBTSxDQUMvQnNILFNBQVUsbUJBQUYsT0FBcUJ0SCxFQUFDLGFBQUswRCxFQUFNM0ksS0FBSSxLQUM3Q3dDLEtBQU0saUJBQUYsT0FBbUJ5QyxFQUFDLEtBQ3hCakYsS0FBTTJJLEVBQU0zSSxLQUNiLElBekRLeTJCLEVBQStCMXpCLEVBQU91bkIsT0EyRTlCL2xCLEtBQUksU0FBQ3NsQixFQUFPNWtCLEdBQUMsTUFBTSxDQUMvQnNILFNBQVUsbUJBQUYsT0FBcUJ0SCxFQUFDLGFBQUs0a0IsRUFBTUcsV0FBVSxLQUNuRHhuQixLQUFNLFVBQUYsT0FBWXlDLEVBQUMsVUFDakJqRixLQUFNNnBCLEVBQU1HLFdBQ2IsSUE5RUswTSxFQUErQjN6QixFQUFPd0QsT0FrRjlCaEMsS0FBSSxTQUFDZ0UsRUFBT3RELEdBQUMsTUFBTSxDQUMvQnNILFNBQVUsbUJBQUYsT0FBcUJ0SCxFQUFDLGFBQUs2d0IsR0FBV3Z0QixHQUFNLEtBQ3BEL0YsS0FBTSxVQUFGLE9BQVl5QyxFQUFDLFVBQ2pCakYsS0FBTTgxQixHQUFXdnRCLEdBQ2xCLElBckZLb3VCLEVBOEdSLFNBQStCOTBCLEdBQzdCLE9BQU9BLEVBQVUwQyxLQUFJLFNBQUMwRCxFQUFVaEQsR0FBQyxNQUFNLENBQ3JDc0gsU0FBVSx5QkFBRixPQUEyQnRILEVBQUMsYUFBSyt3QixHQUFXL3RCLEdBQVMsWUFDN0R6RixLQUFNLGFBQUYsT0FBZXlDLEVBQUMsVUFDcEJqRixLQUFNODFCLEdBQVc3dEIsR0FDbEIsR0FDSCxDQXBId0IydUIsQ0FBcUI3ekIsRUFBT2xCLFdBRTVDZzFCLEVBQWEsR0FBSCxVQUNYWCxHQUFnQk0sRUFBWSxTQUFPLEdBQ25DTixHQUFnQk8sRUFBWSxTQUFPLEdBQ25DUCxHQUFnQlEsRUFBWSxTQUFPLEdBQ25DUixHQUFnQlMsRUFBZSxVQUc5QkcsRUFBWSxHQUFILFVBQ1ZOLEVBQVdweUIsUUFBTyxTQUFBdUUsR0FBSyxPQUFJb3VCLEdBQUFBLFNBQTZCcHVCLEVBQU0zSSxLQUFLLEtBQUMsR0FDcEV5MkIsRUFBV3J5QixRQUFPLFNBQUF5bEIsR0FBSyxPQUFJa04sR0FBQUEsU0FBNkJsTixFQUFNN3BCLEtBQUssS0FBQyxHQUNwRTAyQixFQUFXdHlCLFFBQU8sU0FBQW1FLEdBQUssT0FBSXd1QixHQUFBQSxTQUE2Qnh1QixFQUFNdkksS0FBSyxLQUFDLEdBQ3BFMjJCLEVBQWN2eUIsUUFBTyxTQUFBNkQsR0FBUSxPQUFJOHVCLEdBQUFBLFNBQTZCOXVCLEVBQVNqSSxLQUFLLE1BT2pGLE1BQU8sQ0FBRTYyQixXQUFBQSxFQUFZQyxVQUFBQSxFQUFXRSxlQUpULEdBQ2xCTixFQUFXdHlCLFFBQU8sU0FBQW1FLEdBQUssT0E1Qkl2SSxFQTRCd0J1SSxFQUFNdkksS0EzQjdDLENBQ2YsaUNBRWN1VSxNQUFLLFNBQUE2ZSxHQUFPLE9BQUlwekIsRUFBS3FFLE1BQU0rdUIsRUFBUSxJQUpyRCxJQUFrQ3B6QixDQTRCbUMsS0FJckUsQ0FFQSxTQUFTaTNCLEdBQXVCbDBCLEdBQzlCLElBQU04ekIsRUFBYVgsR0FBZ0IsR0FBR2xZLE9BQ3JCamIsRUFBTzJGLE9Ba0NWN0UsUUFBTyxTQUFDcUUsRUFBUVMsRUFBTzFELEdBU25DLE9BUkkwRCxFQUFNTixPQUNSSCxFQUFPdEQsS0FBSyxDQUNWMkgsU0FBVSxtQkFBRixPQUFxQnRILEVBQUMsYUFBSzBELEVBQU0zSSxLQUFJLEtBQzdDd0MsS0FBTSxpQkFBRixPQUFtQnlDLEVBQUMsV0FDeEJvRCxNQUFPTSxFQUFNTixRQUlWSCxDQUNULEdBQUcsSUEzQ2NuRixFQUFPd0QsT0ErRFYxQyxRQUFPLFNBQUNxRSxFQUFRSyxFQUFPdEQsR0FTbkMsT0FSSXNELEVBQU1GLE9BQ1JILEVBQU90RCxLQUFLLENBQ1YySCxTQUFVLG1CQUFGLE9BQXFCdEgsRUFBQyxhQUFLZ3hCLEdBQVkxdEIsR0FBTSxhQUNyRC9GLEtBQU0sVUFBRixPQUFZeUMsRUFBQyxXQUNqQm9ELE1BQU80dEIsR0FBWTF0QixLQUloQkwsQ0FDVCxHQUFHLElBbUJMLFNBQTRCckcsR0FDMUIsT0FBT0EsRUFBVWdDLFFBQU8sU0FBQ3FFLEVBQVFELEVBQVVoRCxHQUN6QyxJQUFNb0QsRUFBUTR0QixHQUFZaHVCLEdBQ3BCd0QsRUFBTXVxQixHQUFXL3RCLEdBU3ZCLE9BUklJLEdBQ0ZILEVBQU90RCxLQUFLLENBQ1YySCxTQUFVLHlCQUFGLE9BQTJCdEgsRUFBQyxhQUFLd0csRUFBRyxhQUM1Q2pKLEtBQU0sYUFBRixPQUFleUMsRUFBQyxXQUNwQm9ELE1BQUFBLElBSUdILENBQ1QsR0FBRyxHQUNMLENBekdJZ3ZCLENBQWtCbjBCLEVBQU9sQixZQUN4QixTQUVILE1BQU8sQ0FBRWcxQixXQUFBQSxFQUNYLENBRUEsU0FBU00sR0FBMkJwMEIsR0FDbEMsSUFBTXEwQixFQUFhaEIsS0FBUSxHQUFHcFksT0FDVGpiLEVBQU93RCxPQW9FZGhDLEtBQUksU0FBQ2dFLEVBQU90RCxHQUFDLE1BQU0sQ0FDL0JzSCxTQUFVLG1CQUFGLE9BQXFCdEgsRUFBQyxhQUFLK3dCLEdBQVd6dEIsR0FBTSxLQUNwRC9GLEtBQU0sVUFBRixPQUFZeUMsRUFBQyxVQUNqQndHLElBQUt1cUIsR0FBV3p0QixHQUNqQixJQTJCSCxTQUFnQzFHLEdBQzlCLE9BQU9BLEVBQVUwQyxLQUFJLFNBQUMwRCxFQUFVaEQsR0FBQyxNQUFNLENBQ3JDc0gsU0FBVSx5QkFBRixPQUEyQnRILEVBQUMsYUFBSyt3QixHQUFXL3RCLEdBQVMsWUFDN0R6RixLQUFNLGFBQUYsT0FBZXlDLEVBQUMsVUFDcEJ3RyxJQUFLdXFCLEdBQVcvdEIsR0FDakIsR0FDSCxDQXhHSW92QixDQUFzQnQwQixFQUFPbEIsWUFDNUIsT0FVSCxNQUFPLENBQUVnMUIsV0FSVWh5QixPQUFPd3hCLE9BQU9lLEdBQVl2ekIsUUFBTyxTQUFDZ3pCLEVBQVlTLEdBSy9ELE9BSklBLEVBQU01ekIsT0FBUyxHQUNqQm16QixFQUFXanlCLEtBQUsweUIsR0FHWFQsQ0FDVCxHQUFHLElBR0wsaUJDeEVJLEdBQVUsQ0FBQyxFQUVmLEdBQVEvM0Isa0JBQW9CLElBQzVCLEdBQVFDLGNBQWdCLElBRWxCLEdBQVFDLE9BQVMsU0FBYyxLQUFNLFFBRTNDLEdBQVFDLE9BQVMsSUFDakIsR0FBUUMsbUJBQXFCLElBRWhCLElBQUksS0FBUyxJQUExQixJQUtPLEdBQWUsTUFBVyxZQUFpQixpQkFBaUJxSyw2R0NuQm5FLFNBQVNndUIsR0FBb0J4QixHQUMzQixPQUFPQSxFQUFLeHBCLFFBQ2QsQ0FJQSxTQUFTaXJCLEdBQWlCejNCLEdBQ3hCLFFBQVFDLEVBQW9FRCxFQUFwRUMsS0FBTXkzQixFQUE4RDEzQixFQUE5RDAzQixZQUFhQyxFQUFpRDMzQixFQUFqRDIzQixTQUFRLEVBQXlDMzNCLEVBQXZDNDNCLGNBQUFBLE9BQWEsSUFBRyxFQUFBSixHQUFrQixFQUNOLE1BQS9CcnFCLEVBQUFBLEVBQUFBLFVBQTZCLElBQXBCd3FCLEVBQVNoMEIsVUFBYSxzNUJBQTFEazBCLEVBQVMsS0FBRUMsRUFBWSxLQUU5QixPQUNFLGlCQUFLNTNCLFVBQVdvSCxLQUFRLENBQ3RCcUMsR0FBQUEsZ0JBQ29CLElBQXBCZ3VCLEVBQVNoMEIsUUFBZ0JnRyxHQUFBQSxjQUN6Qmt1QixHQUFhbHVCLEdBQUFBLG9CQUNacEosS0FBSyxLQUFLLFdBQ1gsZ0JBQUlRLFFBQVMsa0JBQU0rMkIsR0FBY0QsRUFBVSxFQUFDLFdBQzFDLFNBQUMsRUFBSSxDQUFDMzNCLFVBQVd5SixHQUFBQSxNQUFjMUosS0FBSyxlQUNuQyxJQUFJLElBQUVBLEVBQUssS0FBQywwQkFBSSxJQUFFMDNCLEVBQVNoMEIsT0FBTyxrQkFFckMsaUJBQUt6RCxVQUFXeUosR0FBQUEsZUFBc0IsV0FDcEMsZ0NBQ0crdEIsSUFFRkMsRUFBU2gwQixPQUFTLEdBRWpCLHdCQUNHZzBCLEVBQVNuekIsS0FBSSxTQUFDd3hCLEVBQU05d0IsR0FBQyxPQUNwQix3QkFDRzB5QixFQUFjNUIsSUFEUjl3QixFQUVKLE9BSVAsdUJBQUcscUJBSWYsQ0FFQSxJQUFNNnlCLElBQ0osU0FBQyxHQUFJLENBQUNqUixVQUFRLEVBQUNELEtBQUssc0RBQXFELFNBQUMsVUEwSTVFLEdBcklBLFNBQWlCLEdBQW9CLElBQWhCbVIsRUFBWSxFQUFaQSxhQUNYQyxFQUFrRUQsRUFBbEVDLFVBQVdDLEVBQXVERixFQUF2REUsV0FBWUMsRUFBMkNILEVBQTNDRyxlQUFnQkMsRUFBMkJKLEVBQTNCSSx1QkFFL0MsT0FDRSxpQkFBSzVzQixNQUFPLENBQUU2c0IsU0FBVSxRQUFTem5CLE9BQVEsU0FBVTBuQixjQUFlLFFBQVMsV0FDekUsd0JBQUksY0FFSixTQUFDYixHQUFlLENBQ2R4M0IsS0FBSywyQkFDTDAzQixTQUFVUyxFQUNWVixhQUNFLGlDQUNFLHdCQUNFLDBCQUFJLHFEQUMrQywwQkFBTSxRQUFVLFFBQzdELDBCQUFNLFFBQVUsa0VBQ0osMEJBQU0sYUFBZSxnQkFHekMseUJBQUcsNkJBQ3dCLFNBQUMsR0FBSSxDQUFDNVEsVUFBUSxFQUFDRCxLQTlEaEMsOEVBOERvRCxTQUFDLHVCQUV0RCxVQUliK1EsY0FBZSxXQUFPLEtBR3hCLFNBQUNILEdBQWUsQ0FDZHgzQixLQUFLLHVCQUNMMDNCLFNBQVVNLEVBQVVuQixXQUNwQlksYUFDRSx3QkFDRSx3QkFBSSw4REFHUkUsY0FBZSxTQUFBdEMsR0FBSyxPQUNsQixpQ0FDRSwwQkFBSSxTQUFLLDBCQUFPQSxFQUFNLEdBQUdyMUIsT0FBWSxtQkFDckMsd0JBQ0dxMUIsRUFBTTl3QixLQUFJLFNBQUN3eEIsRUFBTWxELEdBQUMsT0FDakIsd0JBQWFrRCxFQUFLeHBCLFVBQVRzbUIsRUFBdUIsUUFHbkMsS0FJUCxTQUFDMkUsR0FBZSxDQUNkeDNCLEtBQUssaUJBQ0wwM0IsU0FBVU0sRUFBVWxCLFVBQ3BCVyxhQUNFLHdCQUNFLHdCQUFJLHlEQUtWLFNBQUNELEdBQWUsQ0FDZHgzQixLQUFLLGtCQUNMMDNCLFNBQVVNLEVBQVVoQixlQUNwQlMsYUFDRSxpQ0FDRSx3QkFDRSx3QkFBSSxnR0FLTix1QkFBRyx1WkFTSCx5QkFBRyx3UEFJb0RLLEdBQU0seURBT25FLFNBQUNOLEdBQWUsQ0FDZHgzQixLQUFLLG1CQUNMMDNCLFNBQVVPLEVBQVdwQixXQUNyQlksYUFDRSx3QkFDRSx3QkFBSSx5RUFHUkUsY0FBZSxTQUFBdEMsR0FBSyxPQUNsQixpQ0FDRSwwQkFBSSxTQUFLLDBCQUFPQSxFQUFNLEdBQUdodEIsUUFBYSxtQkFDdEMsd0JBQ0dndEIsRUFBTTl3QixLQUFJLFNBQUN3eEIsRUFBTWxELEdBQUMsT0FDakIsd0JBQWFrRCxFQUFLeHBCLFVBQVRzbUIsRUFBdUIsUUFHbkMsS0FJUCxTQUFDMkUsR0FBZSxDQUNkeDNCLEtBQUssNEJBQ0wwM0IsU0FBVVEsRUFBZXJCLFdBQ3pCWSxhQUNFLHdCQUNFLHdCQUFJLG1FQUdSRSxjQUFlLFNBQUF0QyxHQUFLLE9BQ2xCLGlDQUNFLDBCQUFJLGNBQVUsNEJBQU0sSUFBTUEsRUFBTSxHQUFHNXBCLE9BQVcsbUJBQzlDLHdCQUNHNHBCLEVBQU05d0IsS0FBSSxTQUFDd3hCLEVBQU1sRCxHQUFDLE9BQ2pCLHdCQUFha0QsRUFBS3hwQixVQUFUc21CLEVBQXVCLFFBR25DLE1BS2IsNHZCQzFKQSxTQUFTeUYsR0FBSSxHQUF3QyxRQUFwQzEzQixFQUFJLEVBQUpBLEtBQU0yM0IsRUFBSSxFQUFKQSxLQUFNQyxFQUFVLEVBQVZBLFdBQVkzM0IsRUFBUSxFQUFSQSxTQUNlLE1BQXBCcU0sRUFBQUEsRUFBQUEsVUFBU3NyQixLQUFXLDBuQkFBL0NDLEVBQVMsS0FBRUMsRUFBWSxLQUU5QixPQUNFLGlDQUNFLGVBQUludEIsTUFBTyxDQUFFZixRQUFTLFVBQVcsU0FBRTVKLEtBQ25DLGVBQUlYLFVBQVd5SixHQUFBQSxlQUFzQixTQUNsQzZ1QixFQUFLaDBCLEtBQUksV0FBaUNVLEdBQUMsSUFBekIwekIsRUFBRyxFQUFUMzRCLEtBQUksSUFBTzQ0QixXQUFBQSxPQUFVLElBQUcsS0FBRSxTQUNyQyxlQUVFOTNCLFFBQVMsa0JBQU00M0IsRUFBYXp6QixFQUFFLEVBQzlCaEYsV0FBV29ILEVBQUFBLEVBQUFBLFNBQVEsQ0FDakJveEIsSUFBY3h6QixHQUFLeUUsR0FBQUEsZUFBb0IsVUFDcENrdkIsS0FDRnQ0QixLQUFLLEtBQUssU0FFWnE0QixHQVBJMXpCLEVBUUYsTUFHUnBFLEVBQVM0M0IsS0FHaEIsQ0FFQSxJQUFNSSxHQUFlLFNBQUF0ekIsR0FBSyxPQUFJQSxFQUFNaEQsU0FBU1EsTUFBTSxFQUVuRCxTQUFTKzFCLEdBQVUvNEIsR0FDakIsSUFBTWdELEdBQVMyQyxFQUFBQSxFQUFBQSxJQUFZbXpCLElBQ25CbHBCLEdBQVcvSSxFQUFBQSxFQUFBQSxZQUFXOE4sSUFBdEIvRSxPQUNBNmMsRUFBWXpzQixFQUFaeXNCLFFBQ0Z1TCxHQUFlanhCLEVBQUFBLEVBQUFBLFVBQVEsa0JIcER4QixTQUFzQi9ELEVBQVE0TSxHQUNuQyx5V0FBTyxFQUNMcW9CLFVBQVd6QixHQUFxQnh6QixHQUNoQ2sxQixXQUFZaEIsR0FBc0JsMEIsR0FDbENtMUIsZUFBZ0JmLEdBQTBCcDBCLElEWnZDLFNBQTRCNE0sR0FDakMsTUFBTyxDQUNMd29CLHVCQUF3QnZDLEdBQXNCam1CLEdBS2xELENDTU9vcEIsQ0FBa0JwcEIsR0FFekIsQ0c2Q3FDcXBCLENBQVlqMkIsRUFBUTRNLEVBQU8sR0FBRSxDQUFDNU0sRUFBUTRNLElBQ25Fc3BCLEdBQWVueUIsRUFBQUEsRUFBQUEsVUFBUSxXQUMzQixJQUFRa3hCLEVBQWtFRCxFQUFsRUMsVUFBV0MsRUFBdURGLEVBQXZERSxXQUFZQyxFQUEyQ0gsRUFBM0NHLGVBQWdCQyxFQUEyQkosRUFBM0JJLHVCQUMvQyxPQUNFSCxFQUFVbkIsV0FBV256QixPQUNyQnMwQixFQUFVbEIsVUFBVXB6QixPQUNwQnMwQixFQUFVaEIsZUFBZXR6QixPQUN6QnUwQixFQUFXcEIsV0FBV256QixPQUN0QncwQixFQUFlckIsV0FBV256QixPQUMxQnkwQixFQUF1QnowQixNQUUzQixHQUFHLENBQUNxMEIsSUFFRVEsR0FBT2x4QixFQUFBQSxFQUFBQSxTQUFRLENBQ25CLENBQUVySCxLQUFNLFNBQVVrNUIsV0FBVyxTQUFDQyxHQUFXLENBQUMzTSxRQUFTQSxLQUNuRCxDQUFFeHNCLEtBQU0sU0FBVWs1QixXQUFXLFNBQUMsR0FBVyxLQUN6QyxDQUFFbDVCLEtBQU0sU0FBVWs1QixXQUFXLFNBQUMsR0FBVyxLQUN6QyxDQUFFbDVCLE1BQU0saUJBQU1DLFVBQVd5SixHQUFBQSxLQUFZLFNBQUMsY0FBa0J3dkIsV0FBVyxTQUFDLEdBQVMsS0FDN0VELEVBQWUsR0FBTSxDQUNuQmo1QixLQUFNLGFBQUYsT0FBZWk1QixFQUFZLEtBQy9CTCxXQUFZLENBQUNsdkIsR0FBQUEsWUFDYnd2QixXQUFXLFNBQUMsR0FBUSxDQUFDbkIsYUFBY0EsT0FNdkMsT0FDRSxTQUFDLEdBQU8sQ0FBQ2gxQixPQUFRQSxFQUFPLFVBQ3RCLFNBQUN1MUIsR0FBSSxDQUFDMTNCLEtBQUssZUFBZTIzQixLQUFNQSxFQUFNQyxXQUp2QixFQUk4QyxTQUMxREQsRUFBS2gwQixLQUFJLFNBQUNvMEIsRUFBSzF6QixHQUFDLE9BQ2YsU0FBQyxFQUFBeVksU0FBUSxVQUNOaWIsRUFBSU8sV0FEUWowQixFQUVKLE9BS3JCLENBRUE2ekIsR0FBU3Y0QixVQUFZLENBQ25Cd0MsT0FBUXEyQixJQUdWLHFCQzlGSSxHQUFVLENBQUMsRUFFZixHQUFRdDZCLGtCQUFvQixJQUM1QixHQUFRQyxjQUFnQixJQUVsQixHQUFRQyxPQUFTLFNBQWMsS0FBTSxRQUUzQyxHQUFRQyxPQUFTLElBQ2pCLEdBQVFDLG1CQUFxQixJQUVoQixJQUFJLEtBQVMsSUFBMUIsSUFLTyxHQUFlLE1BQVcsWUFBaUIsaUJBQWlCcUssRUN0QjdEOHZCLEdBQWdCLCtDQUVQLFNBQVNDLEtBQ3RCLE9BQ0UsaUJBQUtyNUIsVUFBV3NMLEdBQUFBLFFBQWMsV0FDNUIsMkJBQU8sK0JBQ1AsZUFBR3RMLFVBQVdzTCxHQUFBQSxXQUFrQkYsT0FBTyxTQUFTMGIsSUFBSSxhQUFhSCxLQUFNeVMsR0FBYyxXQUNuRixTQUFDLEVBQUksQ0FBQ241QixXQUFXLFNBQVNGLEtBQUssV0FBVyxrQ0FJbEQsK3NDQ1RBLElBQU0wSixHQUFTLENBQ2IzRixZQUFhLENBQ1h3MUIsVUFBVyxTQUNYdE0sU0FBVSxRQUlkLFNBQVN1TSxHQUFVejVCLEdBQ2pCLElBQVFSLEVBQWdDUSxFQUFoQ1IsU0FBVTBOLEVBQXNCbE4sRUFBdEJrTixTQUFVK2dCLEVBQVlqdUIsRUFBWml1QixRQUU1QixTQUFTeUwsRUFBcUJwdEIsRUFBSzFGLEdBQ2pDc0csRUFBUyxTQUFLMU4sR0FBUSxTQUFHOE0sRUFBTTFGLElBQ2pDLENBRUEsT0FDRSxTQUFDLEdBQUssQ0FBQ21ELFVBQVdra0IsRUFBUSxVQUN4QixVQUFDcmtCLEdBQVMsQ0FBQ0csVUFBV2trQixFQUFRLFdBQzVCLHdCQUFJLGNBRUosd0JBQUksb0JBRUoseUJBQ0UsbUJBQU8vRCxRQUFRLHdCQUF1QixXQUNwQyxrQkFDRUMsR0FBRyx3QkFDSHpqQixLQUFLLFdBQ0x3SCxRQUFTMU8sRUFBU202QixjQUNsQjdyQixTQUFVLFNBQUExQyxHQUFDLE9BQ1RzdUIsRUFBb0IsZ0JBQWlCdHVCLEVBQUVFLE9BQU80QyxRQUFRLElBRXhELDJCQUlOLGVBQUcxQyxNQUFPN0IsR0FBTzNGLFlBQVksVUFBQyxtRUFFdkIsMEJBQU0sVUFBWSxVQUFNLDBCQUFNLGdCQUFrQiw2RUFJdkQseUJBQ0UsbUJBQU9rbUIsUUFBUSwyQkFBMEIsVUFBQyw0QkFFeEMsb0JBQ0VDLEdBQUcsMkJBQ0h2akIsTUFBT3BILEVBQVN1SSxnQkFBa0IsT0FDbEMrRixTQUFVLFNBQUExQyxHQUFDLE9BQ1RzdUIsRUFBb0IsaUJBQWtCdHVCLEVBQUVFLE9BQU8xRSxNQUFNLEVBQ3JELFdBRUYsbUJBQVFBLE1BQU0sT0FBTSxTQUFDLGVBQ3JCLG1CQUFRQSxNQUFNLE1BQUssU0FBQyxhQUNwQixtQkFBUUEsTUFBTSxNQUFLLFNBQUMsbUJBSTFCLGVBQUc0RSxNQUFPN0IsR0FBTzNGLFlBQVksVUFBQyxrRkFFckIsU0FBQyxFQUFJLENBQUMvRCxLQUFLLHNCQUFzQix1Q0FNbEQsQ0FFQXc1QixHQUFTajVCLFVBQVksQ0FDbkJoQixTQUFVaUIsSUFBQUEsT0FBQUEsV0FDVnlNLFNBQVV6TSxJQUFBQSxLQUFBQSxXQUNWd3RCLFFBQVN4dEIsSUFBQUEsS0FBQUEsWUFHWGc1QixHQUFTLzRCLGFBQWUsQ0FDdEJsQixTQUFVLENBQUMsR0FHYixzQkN2RUksR0FBVSxDQUFDLEVBRWYsR0FBUVQsa0JBQW9CLElBQzVCLEdBQVFDLGNBQWdCLElBRWxCLEdBQVFDLE9BQVMsU0FBYyxLQUFNLFFBRTNDLEdBQVFDLE9BQVMsSUFDakIsR0FBUUMsbUJBQXFCLElBRWhCLElBQUksS0FBUyxJQUExQixJQUtPLEdBQWUsTUFBVyxZQUFpQixpQkFBaUJxSyxvdUNDeEJwRCxTQUFTb3dCLEdBQU8sR0FBeUIsSUFBckI5NEIsRUFBUSxFQUFSQSxTQUFhRSxvWEFBSSxPQUNsRCxPQUNFLHlCQUFTQSxHQUFJLElBQUVkLFVBQVd5SixHQUFBQSxRQUFlLFdBQ3ZDLGNBQUd6SixVQUFTLFVBQUt5SixHQUFBQSxLQUFXLG9CQUMzQjdJLEtBR1AseVNDUkEsa25HQUFBb0UsR0FBQSx3QkFBQUEsRUFBQSxzQkFBQUEsR0FBQSxpQkFBQUEsR0FBQSxzc0RBQUFBLEVBQUEseUJBQUFBLEdBQUEsSUFBQUEsRUFBQSx1QkFBQUEsR0FBQSw0YkFBQUEsRUFBQSx5QkFBQUEsR0FBQSxJQUFBQSxFQUFBLHVCQUFBQSxHQUFBLHloQkFBQUEsRUFBQSx5QkFBQUEsR0FBQSxJQUFBQSxFQUFBLHVCQUFBQSxHQUFBLHFHQUFBQSxFQUFBLHlCQUFBQSxHQUFBLElBQUFBLEVBQUEsdUJBQUFBLEdBQUEsK2xCQUFBQSxFQUFBLEVBQUFBLEVBQUEsU0FBQUEsSUFBQSxTQUFBQSxHQUFBLDY1QkFJQSxJQUFNMjBCLEdBQWUsR0FBSCxPQUFNejNCLEdBQUFBLFFBQTBCLE9BQVEsTUFBSyxrQkFFbEQwM0IsR0FBRyxhQU5oQixzUkFNZ0IsVUFOaEIsSUF1UUcsRUFiQSxFQWpEQSxFQVZBLEVBVkEsRUF4S1ksRUFiZixJQU1nQixHQU5oQixFQU1nQixFQU5oQixpa0JBTWdCLG9CQU5oQiw0RkFNZ0IsaUZBT0QsT0FQQyxrREFDTixNQUFJLHlCQUNHLEdBQUsseUJBQ0osTUFBSSx3QkFDTCxNQUFJLCtCQUNHLE1BQUksb0JBQ2YsTUFBSSxrQkFDTixNQUFJLEVBK1JaLE9BNVNILEVBYWUsRUFiZixFQWFlLHdDQUViLFdBQWdCaDdCLEdBQU8sd0VBY3BCLE1BYnNCLGlCQUFaQSxJQUNUQSxFQUFVLENBQ1I2RCxJQUFLN0QsSUFJTEEsRUFBUTZELElBQUl5RSxXQUFXLE9BQ3pCdEksRUFBUTZELElBQU0sR0FBSCxPQUFNUCxJQUFpQixPQUFHdEQsRUFBUTZELE1BRy9DN0QsRUFBUW9FLFFBQVU0QixPQUFPQyxPQUFPLENBQUMsRUFBR2pHLEVBQVFvRSxTQUN4QzYyQixLQUFLQyxRQUFVbDdCLEVBQVFvRSxRQUFRKzJCLGdCQUNqQ243QixFQUFRb0UsUUFBUSsyQixjQUFnQixVQUFILE9BQWFGLEtBQUtDLFFBQ2hELGtCQUdjRSxLQUFNcDdCLEdBQVEsZ0RBSzFCLE1BTDBCLDBCQUVFLE9BQWIsUUFBWixPQUFJdUQsZ0JBQVEsYUFBWixFQUFjd3VCLFVBQ2hCMW5CLFFBQVFDLE1BQU0sMEJBQ2Qyd0IsS0FBS0ksS0FBSyx3QkFBeUIsS0FBSTkzQixXQUN4QywrREFJSixnRUFFRCxXQUFRLFdBQ04sT0FBSTAzQixLQUFLSyxlQUlUTCxLQUFLSyxhQUFlLGNBQUMsK0ZBV2xCLEdBVkQsRUFBS0MsYUFFQ0MsRUFBa0IsR0FBSCxPQUFNbDRCLEdBQWlCLHlCQUN0Q3VDLEVBQVMsSUFBSTQxQixnQkFBZ0J0ekIsT0FBT3VGLFNBQVN5TixTQUt4Q25TLElBQUksaUJBQW1CbkQsRUFBT21ELElBQUksb0JBQzNDLEVBQUsweUIsa0JBR0g3MUIsRUFBT21ELElBQUksV0FBWSxDQUFGLGVBQ2UsT0FBdEMwZ0IsWUFBVyxrQkFBTSxFQUFLMlIsS0FBSyxVQUFVLElBQUMsMEJBUXZDLEdBSktseEIsRUFBUXRFLEVBQU9tRCxJQUFJLFVBQ3BCYixPQUFPd3pCLGFBQWFDLFlBQWN6eEIsSUFDckNoQyxPQUFPMHpCLFFBQVFDLGFBQWEsQ0FBQyxFQUFHLEtBQU0zekIsT0FBT3VGLFNBQVNxdUIsVUFDdEQ1ekIsT0FBT3d6QixhQUFhQyxXQUFhenhCLElBRy9CaEMsT0FBT3d6QixhQUFhQyxXQUFZLENBQUYsZ0JBQ1csT0FBM0MsRUFBS1YsTUFBUS95QixPQUFPd3pCLGFBQWFDLFdBQVUsVUFDcEIsRUFBS0ksU0FBU1IsR0FBZ0IsaUJBQTdDUyxFQUFJLEVBQUpBLEtBQ0ZDLEVBQVlELEVBQUtFLGNBQWM1MkIsUUFBTyxTQUFBNjJCLEdBQVksT0FBSUEsRUFBYUMsWUFBWSxJQUVqRkosRUFBS0UsY0FBY3QzQixTQUFXcTNCLEVBQVVyM0IsU0FDMUN3RixRQUFRaXlCLEtBQUssNERBQ2IsRUFBS2pCLEtBQUssc0JBR1osRUFBS2tCLFNBQVdOLEVBQUtNLFNBQ3JCLEVBQUtKLGNBQWdCRixFQUFLRSxjQUMxQixFQUFLSyxhQUFlUCxFQUFLTyxhQUN6QixFQUFLQyxvQkFBc0JSLEVBQUtRLG9CQUNoQyxFQUFLcEIsS0FBSyxpQkFBZ0IsMkNBdENWLElBSFhKLEtBQUtLLFlBOENoQixHQUFDLHdCQUVELFdBQWMsV0FDTm9CLEVBQW1CLEdBS25CQyxFQUFPLFNBQUNDLEdBSEwsRUFBS0MsT0FBT0MsYUFBZTMwQixPQUFPNDBCLFVBQVVDLE1BU25ETixFQUFpQjMyQixLQUFLNjJCLEdBQ3RCdnlCLFFBQVErb0IsSUFDTiw4QkFDQSxDQUFFMEosV0FBWSxFQUFLRCxPQUFPQyxZQUMxQkYsSUFSQSxFQUFLQyxPQUFPRixLQUFLQyxFQVVyQixFQVVBM0IsS0FBSzRCLE9BQVMsSUFBSTEwQixPQUFPNDBCLFVBQVVoQyxJQUNuQ0UsS0FBSzRCLE9BQU9JLE9BQVMsV0FDbkI1eUIsUUFBUStvQixJQUFJLElBQUk4SixLQUFRLHdCQVZaLFdBRVosSUFEQSxJQUFJTixFQUNJQSxFQUFVRixFQUFpQlMsU0FDakM5eUIsUUFBUStvQixJQUFJLHFDQUFzQ3dKLEdBQ2xELEVBQUtDLE9BQU9GLEtBQUtDLEVBRXJCLENBS0VRLEdBQ0FDLGFBQVksV0FDVlYsRUFBS3I0QixLQUFLQyxVQUFVLENBQUVxNEIsUUFBUyxTQUNqQyxHQUFHLElBQ0wsRUFFQTNCLEtBQUs0QixPQUFPUyxRQUFVLGtCQUFNanpCLFFBQVErb0IsSUFBSSxJQUFJOEosS0FBUSwyQkFBMkIsRUFDL0VqQyxLQUFLNEIsT0FBT1UsUUFBVSxTQUFBeDVCLEdBQUcsT0FBSXNHLFFBQVFDLE1BQU0sSUFBSTR5QixLQUFRbjVCLEVBQUksRUFDM0RrM0IsS0FBSzRCLE9BQU9XLFVBQVksU0FBQTdwQixHQUN0QixJQUFNaXBCLEVBQVV0NEIsS0FBS201QixNQUFNOXBCLEVBQU1zb0IsTUFDWCxpQkFBbEJXLEVBQVFqcEIsT0FDVixFQUFLMG5CLEtBQUssZUFBZ0J1QixFQUFRYyxhQUV0QyxFQUVBekMsS0FBSzBDLEdBQUcsaUJBQWlCLFdBQU0sTUFDTixRQUFuQixFQUFDLEVBQUt4QixxQkFBYSxPQUFsQixFQUFvQnQzQixTQUl6QixFQUFLKzRCLHlCQUVMakIsRUFBS3I0QixLQUFLQyxVQUFVLENBQ2xCcTRCLFFBQVMsWUFDVFgsS0FBTSxFQUFLZixTQUVmLEdBQ0YsR0FBQyw0QkFFRCxXQUNFL3lCLE9BQU93ekIsYUFBYWtDLFdBQVcsY0FDL0IxMUIsT0FBT3VGLFNBQVNxYSxLQUFPLEdBQUgsT0FBTXprQixHQUFpQixvQkFDN0MsR0FBQyxpQ0FFRCxXQUNFNkUsT0FBT3VGLFNBQVNxYSxLQUFPLDJCQUFILE94SDFKS3RsQixnQndIMEo2QyxxQkFDeEUsR0FBQyxxQ0FFRCxTQUF5QnE3QixHQUN2QixJQUFNMUIsRUFBZW5CLEtBQUtrQixjQUFjNEIsTUFBSyxTQUFBM0IsR0FBWSxPQUFJQSxFQUFhL1EsS0FBT3lTLENBQWMsSUFDL0YzMUIsT0FBT3VGLFNBQVNxYSxLQUFPcVUsRUFBYTRCLFFBQ3RDLEdBQUMsZ0NBRUQsV0FDRSxRQUFTL0MsS0FBS0MsS0FDaEIsR0FBQyw0Q0FFRCxXQUFrQyxVQUNoQyxPQUNvQixRQUFsQixFQUFBRCxLQUFLa0IscUJBQWEsYUFBbEIsRUFBb0J0M0IsUUFBUyxJQUNYLFFBRFksRUFDOUJvMkIsS0FBS2tCLHFCQUFhLGFBQWxCLEVBQW9CbkYsT0FBTSxTQUFBb0YsR0FBWSxPQUFJQSxFQUFhQyxZQUFZLE9BQ2pELFFBRGtELEVBQ3BFcEIsS0FBS2tCLHFCQUFhLGFBQWxCLEVBQW9Cem1CLE1BQUssU0FBQTBtQixHQUFZLE1BQTBDLFFBQXRDQSxFQUFhNkIsb0JBQThCLElBRXhGLEdBQUMsNEJBRUQsV0FBa0IsUUFDaEIsT0FBeUIsUUFBbEIsRUFBQWhELEtBQUtrQixxQkFBYSxhQUFsQixFQUFvQnQzQixVQUEyQixRQUFyQixFQUFJbzJCLEtBQUt1QixvQkFBWSxhQUFqQixFQUFtQjMzQixPQUMxRCxHQUFDLGdEQUVELFdBQXlCcTVCLEdBQUksOEVBRTBCLE9BRC9DOUIsRUFBZXg0QixtQkFBbUJxM0IsS0FBS3dCLG9CQUFvQnlCLEVBQUtDLFlBQ2hFQyxFQUFheDZCLG1CQUFtQnM2QixFQUFLQyxXQUFVLFNBQzlCbEQsS0FBS2UsU0FBUyx3QkFBRCxPQUNWSSxFQUFZLFlBQUlnQyxFQUFVLGNBQ25ELE9BRlcsT0FFWCxTQUZPbkMsRUFBSSxFQUFKQSxLQUFJLGtCQUlMQSxHQUFJLGdEQUNaLGlHQUVELFdBQTRCaUMsRUFBTUcsR0FBTSw4RUFFZSxPQUQvQ2pDLEVBQWV4NEIsbUJBQW1CcTNCLEtBQUt3QixvQkFBb0J5QixFQUFLQyxZQUNoRUMsRUFBYXg2QixtQkFBbUJzNkIsRUFBS0MsV0FBVSxTQUM5QmxELEtBQUtlLFNBQVMsd0JBQUQsT0FDVkksRUFBWSxZQUFJZ0MsRUFBVSxzQkFBY0MsSUFDakUsT0FGVyxPQUVYLFNBRk9wQyxFQUFJLEVBQUpBLEtBQUksa0JBSUxBLEdBQUksZ0RBQ1osbUdBRUQsV0FBNEJpQyxFQUFNRyxHQUFNLGdIQWFULE9BYmEzNkIsR0FBSiwrQkFBaUIsQ0FBQyxHQUFkQSxTQUNwQzA0QixFQUFleDRCLG1CQUFtQnEzQixLQUFLd0Isb0JBQW9CeUIsSUFDM0RFLEVBQWF4NkIsbUJBQW1CczZCLEdBQ2hDcjZCLEVBQU0sSUFBSXk2QixJQUFJLEdBQUQsT0FBSWg3QixHQUFpQixrQ0FBMEI4NEIsRUFBWSxZQUFJZ0MsSUFDNUV0akIsRUFBUSxJQUFJMmdCLGdCQUVkNEMsR0FDRnZqQixFQUFNeWpCLElBQUksU0FBVUYsR0FFbEIzNkIsR0FDRm9YLEVBQU15akIsSUFBSSxXQUFZNzZCLEdBR3hCRyxFQUFJc1gsT0FBU0wsRUFBTXhZLFdBQVUsbUJBR0oyNEIsS0FBS2UsU0FBU240QixFQUFJdkIsWUFBVyxRQVdoQixPQVhnQixTQUE1QzI1QixFQUFJLEVBQUpBLEtBQ1F1QyxFQUFzQnZDLEVBQTlCd0MsS0FBUUQsUUFBV3Q2QixFQUFXKzNCLEVBQVgvM0IsT0FDckJ3NkIsRUFBZ0IxNEIsT0FBT3dFLEtBQUt5eEIsRUFBS3dDLEtBQUtELFNBQVMsR0FDL0NHLEVBQWtCejZCLEVBQU8wNkIsT0FBTyx3QkFDbEMxNkIsRUFBTzA2QixPQUFPLHdCQUF3QkMsUUFBUSxLQUFNLElBQ3BELEtBRUVDLEVBQ0pOLEVBQVFHLElBQ1JILEVBQVFFLEdBRUo1dEIsRUFBU2d1QixFQUFlaHVCLE9BQU0sa0JBRTdCLENBQ0xndUIsZUFBQUEsRUFDQWh1QixPQUFBQSxFQUNBNU0sT0FBQUEsRUFDQTY2QixVQUFXOUMsRUFBSzhDLFVBQ2hCaitCLFFBQVNtN0IsRUFBSytDLGNBQ2RyUixRQUFTc08sRUFBS3RPLFVBQ2YsUUFPQSxNQVBBLDBCQUU0QixPQUFiLFFBQVosT0FBSXBxQixnQkFBUSxhQUFaLEVBQWN3dUIsU0FDaEIxbkIsUUFBUUMsTUFBTSwrQ0FBZ0QsS0FBSS9HLFNBQVMwNEIsTUFDM0VoQixLQUFLSSxLQUFLLHdCQUF5QixLQUFJOTNCLFNBQVMwNEIsT0FDZCxPQUFiLFFBQVosT0FBSTE0QixnQkFBUSxhQUFaLEVBQWN3dUIsU0FBNkMsMEJBQTNCLEtBQUl4dUIsU0FBUzA0QixLQUFLOTZCLE1BQzNEODVCLEtBQUtJLEtBQUssMkJBQTRCLEtBQUk5M0IsU0FBUzA0QixNQUNwRCwrREFJSixxR0FFRCwwRkFDT2hCLEtBQUtnRSxxQkFBc0IsQ0FBRix3Q0FDckIsQ0FBRUMsYUFBYyxLQUFJLE9BSzVCLE9BRklqRSxLQUFLa0UsV0FDUmxFLEtBQUtrRSxTQUFXbEUsS0FBS2UsU0FBUyxHQUFELE9BQUkxNEIsR0FBaUIsc0JBQ25ELFNBRXNCMjNCLEtBQUtrRSxTQUFRLE9BQXhCLE9BQXdCLFNBQTVCbEQsRUFBSSxFQUFKQSxLQUFJLGtCQUNMQSxHQUFJLGdEQUNaLDRGQUVELFdBQXdCaUMsRUFBTUcsR0FBTSxnRkFHdUYsT0FGbkhqQyxFQUFleDRCLG1CQUFtQnEzQixLQUFLd0Isb0JBQW9CeUIsSUFDM0RFLEVBQWF4NkIsbUJBQW1CczZCLEdBQ2hDcjZCLEVBQU0sSUFBSXk2QixJQUFJLEdBQUQsT0FBSWg3QixHQUFpQiw4QkFBc0I4NEIsRUFBWSxZQUFJZ0MsRUFBVSxZQUFJeDZCLG1CQUFtQnk2QixLQUFVLFNBRWxHcEQsS0FBS2UsU0FBU240QixFQUFJdkIsWUFBVyxPQUF4QyxPQUF3QyxTQUE1QzI1QixFQUFJLEVBQUpBLEtBQUksa0JBQ0xBLEdBQUksZ0RBQ1osMkVBRUQsU0FBZWlDLEVBQU1HLEVBQVF2dEIsRUFBUTVNLEdBQXNCLElBQWRsRSxFQUFVLFVBQUgsNkNBQUcsQ0FBQyxFQUN0RCxFQUlJQSxFQUhGNDhCLFFBQUFBLE9BQU8sSUFBRyxPQUFJLElBR1o1OEIsRUFGRm1wQixxQkFBQUEsT0FBb0IsSUFBRyxHQUFDLEVBQUMsRUFDekJ6bEIsRUFDRTFELEVBREYwRCxTQUVJMDRCLEVBQWV4NEIsbUJBQW1CcTNCLEtBQUt3QixvQkFBb0J5QixJQUMzREUsRUFBYXg2QixtQkFBbUJzNkIsR0FDaENyNkIsRUFBTSxJQUFJeTZCLElBQUksR0FBRCxPQUFJaDdCLEdBQWlCLGtDQUEwQjg0QixFQUFZLFlBQUlnQyxFQUFVLFlBQUl4NkIsbUJBQW1CeTZCLEtBQ25ILEVBQTBDbFYsRUFBbENhLHNCQUFBQSxPQUFxQixJQUFHLEdBQUssRUFDL0JsUCxFQUFRLElBQUkyZ0IsZ0JBQWdCLENBQ2hDelIsc0JBQUFBLElBU0YsT0FOSXRtQixHQUNGb1gsRUFBTXlqQixJQUFJLFdBQVk3NkIsR0FHeEJHLEVBQUlzWCxPQUFTTCxFQUFNeFksV0FFWjI0QixLQUFLZSxTQUFTLENBQ25CbjRCLElBQUtBLEVBQUl2QixXQUNUNkIsT0FBUSxPQUNSQyxRQUFTLENBQUUsZUFBZ0Isb0JBQzNCNjNCLEtBQU0sQ0FBRXY0QixTQUFBQSxFQUFVb04sT0FBQUEsRUFBUTVNLE9BQUFBLEVBQVEwNEIsUUFBQUEsRUFBUzVTLHNCQUFBQSxJQUUvQyxJQTVTRix3RUE0U0csRUF0U2EsQ0FBU29WLE1BMFN6QixHQURZLElBQUlwRSxzQ0NyU1osR0FBVSxDQUFDLEVBRWYsR0FBUS82QixrQkFBb0IsSUFDNUIsR0FBUUMsY0FBZ0IsSUFFbEIsR0FBUUMsT0FBUyxTQUFjLEtBQU0sUUFFM0MsR0FBUUMsT0FBUyxJQUNqQixHQUFRQyxtQkFBcUIsSUFFaEIsSUFBSSxLQUFTLElBQTFCLElBS08sR0FBZSxNQUFXLFlBQWlCLGlCQUFpQnFLLDZHQ2pCbkUsSUFBTTIwQixHQUFrQixDQUN0QixXQUdJQyxHQUFpQixDQUNyQixrQkFDQSxZQUNBLFVBQ0EsVUFDQSxRQUNBLGFBR0YsU0FBU0MsR0FBZ0JyK0IsR0FDdkIsUUFBUXMrQixFQUFjdCtCLEVBQWRzK0IsVUFHUCxNQUZ5Qm54QixFQUFBQSxFQUFBQSxVQUN4Qm94QixLQUFPRCxHQUFXRSxhQUNuQixzNUJBRk1DLEVBQUssS0FBRUMsRUFBUSxLQWF0QixPQVRBNTRCLEVBQUFBLEVBQUFBLFlBQVUsV0FDUjQ0QixFQUFTSCxLQUFPRCxHQUFXRSxXQUMzQixJQUFNRyxFQUFXeEMsYUFBWSxXQUMzQnVDLEVBQVNILEtBQU9ELEdBQVdFLFVBQzdCLEdBQUcsS0FFSCxPQUFPLGtCQUFNSSxjQUFjRCxFQUFTLENBQ3RDLEdBQUcsQ0FBQ0wsRUFBV0ksS0FHYixpQkFBTXp3QixNQUFPcXdCLEVBQVVPLGNBQWMsU0FDbENKLEdBR1AsQ0FFQSxTQUFTSyxHQUFXOStCLEdBQ2xCLElBQVErK0IsRUFBYy8rQixFQUFkKytCLFVBQ0ZDLEVBQWFiLEdBQWdCaDlCLFNBQVM0OUIsRUFBVUUsYUFDbEQsU0FBQyxFQUFJLENBQUNoL0IsS0FBSyxVQUNYbStCLEdBQWVqOUIsU0FBUzQ5QixFQUFVRSxhQUNoQyxTQUFDLEVBQUksQ0FBQ2gvQixLQUFLLFdBQ1gsU0FBQzI1QixHQUFPLElBRWQsT0FDRSxVQUFDLEdBQUksQ0FDSC9TLEtBQU1rWSxFQUFVakMsU0FDaEI1OEIsVUFBV3lKLEdBQUFBLGFBQ1htZCxVQUFVLEVBQ1ZDLGNBQWMsRUFBTSxXQUVwQixrQkFBTTdtQixVQUFXeUosR0FBQUEsYUFBb0IsVUFBQyxvQkFDcEIsMEJBQU9vMUIsRUFBVUcsU0FBU3h4QixNQUFNLEVBQUcsS0FBVSxLQUFHc3hCLEdBQ2hFLG1CQUNBLFNBQUNYLEdBQWMsQ0FBQ0MsVUFBVyxJQUFJdEMsS0FBSytDLEVBQVVJLGtCQUVoRCxTQUFDLEVBQUksQ0FDSGwvQixLQUFLLGtCQUNMQyxVQUFXLENBQ1R5SixHQUFBQSxZQUNBQSxHQUFBQSxjQUNBcEosS0FBSyxTQUlmLENBRUF1K0IsR0FBVXQrQixVQUFZLENBQ3BCdStCLFVBQVd0K0IsSUFBQUEsTUFBZ0IsQ0FDekIwcEIsR0FBSTFwQixJQUFBQSxPQUFBQSxXQUNKUixLQUFNUSxJQUFBQSxPQUFBQSxXQUNOeStCLFNBQVV6K0IsSUFBQUEsT0FBQUEsV0FDVm93QixPQUFRcHdCLElBQUFBLE1BQWdCLENBQ3RCLFlBQ0Esa0JBQ0EsWUFDQSxVQUNBLFVBQ0EsVUFDQSxRQUNBLFVBQ0EsWUFDQSxjQUNBLFNBQ0EsWUFDQSxZQUNDMkwsV0FDSDZ5QixXQUFZeCtCLElBQUFBLE1BQWdCLENBQzFCLEtBQ0Esa0JBQ0EsWUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFFBQ0EsY0FFRjIrQixXQUFZMytCLElBQUFBLE9BQUFBLFdBQ1owK0IsV0FBWTErQixJQUFBQSxPQUFBQSxjQUloQixxSEN4R0EsU0FBUzQrQixHQUFNLEdBQTJCLFFBQXZCQyxFQUFTLEVBQVRBLFVBQVcxYyxFQUFRLEVBQVJBLFNBQ2MsTUFBWnpWLEVBQUFBLEVBQUFBLFVBQVMsTUFBRyxzNUJBQW5DdXVCLEVBQU8sS0FBRTZELEVBQVUsS0FFMUIsT0FDRSxTQUFDLEdBQUssV0FDSixVQUFDMzFCLEdBQVMsQ0FBQ0MsWUFBYSxLQUFLLFdBQzNCLHdCQUFJLDJCQUNKLHFCQUNFMkIsTUFBTyxDQUFFcEIsTUFBTyxRQUNoQjZNLFlBQVkscUJBQ1pyUSxNQUFPODBCLEVBQ1A1dEIsU0FBVSxTQUFBMkUsR0FDUjhzQixFQUFXOXNCLEVBQU1uSCxPQUFPMUUsTUFDMUIsS0FFRixlQUFHNEUsTUFBTyxDQUFFOFEsVUFBVyxTQUFVbUUsSUFBSyxRQUFTLFdBQzdDLFNBQUMsR0FBWSxDQUFDMWYsUUFBUyxrQkFBTXUrQixFQUFVNUQsRUFBUSxFQUFDLFNBQUMsWUFDakQsU0FBQyxHQUFZLENBQUMzNkIsUUFBUzZoQixFQUFVbFosV0FBUyxXQUFDLGtCQUtyRCxDQUVBMjFCLEdBQU83K0IsVUFBWSxDQUNqQjgrQixVQUFXNytCLElBQUFBLEtBQUFBLFdBQ1htaUIsU0FBVW5pQixJQUFBQSxLQUFBQSxZQUdaLGlRQ25DQSxrbkdBQUF5RSxHQUFBLHdCQUFBQSxFQUFBLHNCQUFBQSxHQUFBLGlCQUFBQSxHQUFBLHNzREFBQUEsRUFBQSx5QkFBQUEsR0FBQSxJQUFBQSxFQUFBLHVCQUFBQSxHQUFBLDRiQUFBQSxFQUFBLHlCQUFBQSxHQUFBLElBQUFBLEVBQUEsdUJBQUFBLEdBQUEseWhCQUFBQSxFQUFBLHlCQUFBQSxHQUFBLElBQUFBLEVBQUEsdUJBQUFBLEdBQUEscUdBQUFBLEVBQUEseUJBQUFBLEdBQUEsSUFBQUEsRUFBQSx1QkFBQUEsR0FBQSxza0JBU0EsSUFBTXM2QixHQUFnQixTQUFBaDZCLEdBQUssT0FBSUEsQ0FBSyxFQUVyQixTQUFTaTZCLEtBQ3RCLElBQU03NUIsR0FBV0MsRUFBQUEsRUFBQUEsTUFDWEwsR0FBUUcsRUFBQUEsRUFBQUEsSUFBWTY1QixJQUV4QjFrQixFQU9FdFYsRUFQRnNWLE9BQ0E0a0IsRUFNRWw2QixFQU5GazZCLFlBQ0FsOUIsRUFLRWdELEVBTEZoRCxTQUNBbTlCLEVBSUVuNkIsRUFKRm02QixrQkFDQUMsRUFHRXA2QixFQUhGbzZCLE9BQ0EzWCxFQUVFemlCLEVBRkZ5aUIscUJBQ0E0WCxFQUNFcjZCLEVBREZxNkIsWUFHSUMsRUFBYXQ5QixJQUFhc0MsT0FBT2k3QixHQUFHdjlCLEVBQVNRLE9BQVEyOEIsR0FNL0IsYUFhM0IsT0FiMkIsZ0JBQTVCLHlGQUVnQixPQURSbjlCLEVBQVdrOUIsRUFBWWw5QixTQUNyQlEsRUFBV3dDLEVBQU1oRCxTQUFqQlEsT0FBTSxrQkFHVWlELEdBQWlCekQsRUFBVVEsR0FBTyxPQUFsRHFpQixFQUFVLEVBQUgsS0FDYnpmLEVBQVMsQ0FDUGMsS0FBTSxzQkFDTjFELE9BQVFxaUIsSUFDUixnREFFRnpmLEVBQVMsQ0FBRWMsS0FBTSx3QkFBd0IseURBRTVDLHdCQUVELElBQU1zNUIsR0FBc0I3MEIsRUFBQUEsRUFBQUEsY0FBWSxTQUFVdXdCLEdBQ2hELE1BQStCZ0UsRUFBWU8sT0FBbkMvQyxFQUFVLEVBQVZBLFdBQVlDLEVBQU0sRUFBTkEsT0FFbkIsY0FBQywyRkFJc0IsT0FIdEJ2M0IsRUFBUyxDQUFFYyxLQUFNLHdCQUNqQmQsRUFBUyxDQUFFYyxLQUFNLHNCQUVUa0osRUFBbUJwTixFQUFuQm9OLE9BQVE1TSxFQUFXUixFQUFYUSxPQUFNLGtCQUdZaTlCLEdBQUFBLGNBQXFCL0MsRUFBWUMsRUFBUXZ0QixFQUFRNU0sRUFBUSxDQUN2RjA0QixRQUFBQSxFQUFTelQscUJBQUFBLEVBQXNCemxCLFNBQVVrOUIsRUFBWU8sT0FBT3o5QixXQUM1RCxnQkFGWTZpQixFQUFPLEVBQWIwVixLQUdSbjFCLEVBQVMsQ0FBRWMsS0FBTSxzQkFBdUIxRCxPQUFRcWlCLElBQVUsa0RBRTFEemYsRUFBUyxDQUFFYyxLQUFNLHdCQUF3Qix5REFaNUMsRUFlSCxHQUFHLENBQUNnNUIsRUFBYWw5QixFQUFVb0QsRUFBVXFpQixJQUVyQyxPQUNFLGlCQUFLa0MsR0FBRyxVQUFTLFVBQ0gsVUFBWHJQLElBQ0MsbUJBQVE5TSxVQUFXOHhCLEVBQVkvK0IsUUF4Q3BDLFdBRTJCLGdDQXNDZ0MsU0FBQyxlQUk3QyxXQUFYK1osSUFDQyxvQkFDRTdNLE1BQU0sNkNBQ05ELFVBQVc4eEIsRUFDWC8rQixRQWxEUixXQUNFNkUsRUFBUyxDQUFFYyxLQUFNLHNCQUNuQixFQWdEa0MsVUFFekJrNUIsRUFBUyxTQUFXLGlCQUNwQkEsSUFBVSxTQUFDaEcsR0FBTyxPQUd0QnAwQixFQUFNMDZCLG1CQUNMLFNBQUMsR0FBTSxDQUNMWixVQUFXVSxFQUNYcGQsU0FBVSxrQkFBTWhkLEVBQVMsQ0FBRWMsS0FBTSx1QkFBd0IsSUFJNURtNUIsSUFBZSxTQUFDLEdBQVMsQ0FBQ2QsVUFBV2MsTUFHNUMsNEJDdEZhTSxJQUNYLFNBQUMsR0FBSSxDQUFDclosVUFBUSxFQUFDRCxLQU5jLHFEQU1RLFNBQUMseUJBSzNCdVosSUFDWCxTQUFDLEdBQUksQ0FBQ3RaLFVBQVEsRUFBQ0QsS0FYbUIsOEVBV1EsU0FBQyxrREFLaEN3WixJQUNYLFNBQUMsR0FBSSxDQUFDdlosVUFBUSxFQUFDRCxLQWhCbUIscURBZ0JRLFNBQUMsaUNBS2hDeVosSUFDWCxTQUFDLEdBQUksQ0FBQ3haLFVBQVEsRUFBQ0QsS0FyQmdCLCtDQXFCUSxTQUFDLCtCQUs3QjBaLElBQ1gsaUNBQ0UsdUJBQUcsNklBSUgsMkJBQ0Usd0JBQUtKLE1BQ0wsd0JBQUtHLFdBS0VFLElBQ1gseUJBQUcsa0ZBRUtKLEdBQXNCLDRFQUNIQyxHQUFnQixPQzFDN0MsU0FBU0ksR0FBdUJ6Z0MsR0FDOUIsSUFBUStKLEVBQWMvSixFQUFkK0osVUFFUixPQUNFLFNBQUMsR0FBSyxXQUNKLFVBQUNILEdBQVMsQ0FBQ0csVUFBV0EsRUFBVSxXQUM5Qix3QkFBSSx3Q0FDSix1QkFBRyxvSUFJSCx1QkFBRyw0UkFNSCx5QkFBRyw0QkFDeUJvMkIsR0FBaUIsV0FLckQsQ0FFQU0sR0FBc0JqZ0MsVUFBWSxDQUNoQ3VKLFVBQVd0SixJQUFBQSxLQUFBQSxZQUdiLDhuRENoQ08sU0FBU2l1QixHQUFPLEdBQTRCLFFBQXhCbGpCLE1BQUFBLE9BQUssSUFBRyxHQUFDLEVBQUMsRUFBRTFLLEVBQVEsRUFBUkEsU0FPckMsT0FDRSxnQkFBSzBLLE1BQUssU0FOTSxDQUNoQm5CLE9BQVEsT0FDUnEyQixXQUFZLFNBSW1CbDFCLEdBQVEsU0FDcEMxSyxHQUdQLENBRU8sU0FBUzYvQixHQUFNLEdBQXFDLElBQWpDNy9CLEVBQVEsRUFBUkEsU0FBUSxJQUFFMEssTUFBQUEsT0FBSyxJQUFHLEdBQUMsRUFBQyxFQUFLeEssRUFBSSxTQUNyRCxPQUNFLFNBQUMwdEIsR0FBTyxDQUFDbGpCLE1BQU9BLEVBQU0sVUFDcEIseUJBQVFBLE1BQU8sQ0FBRW5CLE9BQVEsU0FBY3JKLEdBQUksYUFDeENGLE1BSVQsQ0FFQSxJQUFNOC9CLEdBQXFCMzVCLE9BQU80NUIsV0FBVyxnQ0FDdkNDLEdBQXdCLENBQUMsRUFBRyxFQUFHLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxJQUFJaDlCLFFBQU8sU0FBQ2k5QixFQUFRNzdCLEdBRXZGLE9BREE2N0IsRUFBTyxVQUFELE9BQVc3N0IsSUFBTyxjQUFILE9BQWlCQSxFQUFDLE1BQ2hDNjdCLENBQ1QsR0FBRyxDQUFDLEdBRUcsU0FBU0MsR0FBTSxHQUFzQixJQUFsQjE0QixFQUFLLEVBQUxBLE1BQVV0SCxFQUFJLFNBQzlCaWdDLEdBQVV0N0IsRUFBQUEsRUFBQUEsS0FBWSxTQUFBSCxHQUFLLE9BQUlBLENBQUssSUFBcEN5N0IsTUFDRkMsRUFBbUIsU0FBVkQsR0FBK0IsV0FBVkEsR0FBc0JMLEdBQW1CTyxRQUU3RSxPQUNFLGlCQUFLMzFCLE1BQU8sQ0FDVmYsUUFBUyxlQUNUTCxNQUFPLFFBQ1AsV0FDQSxrQkFBT29CLE1BQU8sQ0FDWmYsUUFBUyxRQUNUTCxNQUFPLE9BQ1A4aUIsU0FBVSxPQUNWL1EsTUFBTyxhQUNQLFNBQ0M3VCxLQUVILFNBQUMsTUFBVyxJQUNWcUIsT0FBUSxDQUNOeTNCLFVBQVcsU0FBQ0MsRUFBWTc3QixHQUFLLGdCQUN4QjY3QixHQUFVLElBQ2I1MkIsUUFBUyxnQkFBYyxFQUV6QjYyQixLQUFNLFNBQUNELEdBQVUsZ0JBQ1pBLEdBQVUsSUFDYmozQixNQUFPLGNBQ1BJLE9BQVEsSUFBRSxHQUdkeTJCLE1BQU8sU0FBQUEsR0FBSyxnQkFDUEEsR0FBSyxJQUNSRixPQUFRLFNBQ0hFLEVBQU1GLFFBQ0xHLEVBQVNKLEdBQXdCLENBQUMsSUFDdkMsRUFFSFMsY0FBYyxHQUNWdmdDLE1BSVosd1BDekVBLGtuR0FBQWtFLEdBQUEsd0JBQUFBLEVBQUEsc0JBQUFBLEdBQUEsaUJBQUFBLEdBQUEsc3NEQUFBQSxFQUFBLHlCQUFBQSxHQUFBLElBQUFBLEVBQUEsdUJBQUFBLEdBQUEsNGJBQUFBLEVBQUEseUJBQUFBLEdBQUEsSUFBQUEsRUFBQSx1QkFBQUEsR0FBQSx5aEJBQUFBLEVBQUEseUJBQUFBLEdBQUEsSUFBQUEsRUFBQSx1QkFBQUEsR0FBQSxxR0FBQUEsRUFBQSx5QkFBQUEsR0FBQSxJQUFBQSxFQUFBLHVCQUFBQSxHQUFBLG9sQkFBQUEsR0FBQSxnRUFBQUEsR0FBQSwwSkFBQUEsRUFBQSw2RkFBQUEsR0FBQSxtSUFBQUEsSUFBQSxpU0FBQUEsSUFBQSw0T0FBQUEsRUFBQSxpQkFBQUEsRUFBQSxFQUFBQSxJQUFBLEVBQUFBLEdBQUEsRUFBQUEsR0FBQSxTQXFGQSxPQS9FQSxTQUFvQixHQUF5QixJQUFyQm9OLEVBQVEsRUFBUkEsU0FBVWt2QixFQUFPLEVBQVBBLFFBQ2MsTUFBWnIwQixFQUFBQSxFQUFBQSxVQUFTLElBQUcsR0FBdkMwd0IsRUFBUyxLQUFFNEQsRUFBWSxLQUNnQixNQUFkdDBCLEVBQUFBLEVBQUFBLFVBQVMsTUFBSyxHQUF2QzNLLEVBQVEsS0FBRWsvQixFQUFXLEtBRXRCbm9CLEdBQVV4UyxFQUFBQSxFQUFBQSxVQUFRLGtCQUN0QjgyQixFQUFVcjVCLEtBQUksU0FBQXZFLEdBQUksTUFBSyxDQUFFa3FCLEdBQUlscUIsRUFBTUEsS0FBQUEsRUFBTSxHQUFFLEdBQzFDLENBQUM0OUIsS0FFSi8zQixFQUFBQSxFQUFBQSxZQUFVLFdBQ1IsY0FBQyx5R0FDeUJHLEtBQTRCLE9BQTlDNDNCLEVBQVksRUFBSCxLQUNUOEQsRUFBb0J2K0IsS0FBS201QixNQUFNOUIsYUFBYW1ILFFBQVEsZ0NBQWtDLFFBQ3RGQyxFQUFtQmhFLEVBQVUxOEIsU0FBU3dnQyxHQUN4Q0EsRUFDQTlELEVBQVUsR0FFZDRELEVBQWE1RCxHQUNiNkQsRUFBWUcsR0FBaUIsMENBUi9CLEVBVUYsR0FBRyxDQUFDSixFQUFjQyxLQUVsQjU3QixFQUFBQSxFQUFBQSxZQUFVLFdBQ1IsY0FBQyx1R0FDS3RELEVBQVUsQ0FBRix5Q0FFZ0N5RCxHQUFzQnpELEdBQVMsZ0JBQS9EKzZCLEVBQUksRUFBSkEsS0FBTXY2QixFQUFNLEVBQU5BLE9BQVF5cEIsRUFBTyxFQUFQQSxRQUNkNlEsRUFBWUMsRUFBWkQsUUFDRkcsRUFBa0J6NkIsRUFBTzA2QixPQUFPLHdCQUNsQzE2QixFQUFPMDZCLE9BQU8sd0JBQXdCQyxRQUFRLEtBQU0sSUFDcEQsS0FFRUgsRUFBZ0IxNEIsT0FBT3dFLEtBQUtnMEIsR0FBUyxHQUNyQ00sRUFDSk4sRUFBUUcsSUFDUkgsRUFBUUUsR0FHVmxyQixFQUFTLENBQ1B3SSxPQUFRLFFBQ1J0WSxTQUFBQSxFQUNBbzdCLGVBQUFBLEVBQ0FodUIsT0FBUWd1QixFQUFlaHVCLE9BQ3ZCNU0sT0FBQUEsRUFDQXlwQixRQUFBQSxJQUNBLHNEQUVFLEtBQUlwcUIsU0FBVSxDQUFGLGlDQUNNLEtBQUlBLFNBQVNDLE9BQU0sUUFBNUIsR0FDUSwwQkFETCxFQUFILEtBQ0RyQyxLQUFnQyxpQkFDRSxPQUExQ3VoQyxFQUFRLENBQUVNLE9BQVFyQixLQUF3QiwrRkEzQnBELEVBb0NGLEdBQUcsQ0FBQ251QixFQUFVa3ZCLEVBQVNoL0IsSUFFdkIsSUFBTXUvQixHQUF1QjUyQixFQUFBQSxFQUFBQSxjQUFZLFlBQXNCLElBQWYzSSxFQUFRLEVBQVoybkIsR0FDMUNzUSxhQUFhdUgsUUFBUSw4QkFBK0I1K0IsS0FBS0MsVUFBVWIsSUFDbkVrL0IsRUFBWWwvQixFQUNkLEdBQUcsQ0FBQ2svQixJQUVFcGUsR0FBWXVaLEVBQUFBLEVBQUFBLE1BQUt0akIsRUFBUyxDQUFFNFEsR0FBSTNuQixJQUV0QyxPQUNFLFNBQUN3K0IsR0FBTSxDQUNMMTRCLE1BQU0sV0FDTjFCLE1BQU8wYyxFQUNQeGtCLFFBQVN5YSxFQUNUekwsU0FBVWkwQixFQUNWRSxlQUFnQixTQUFBcFksR0FBTSxPQUFJQSxFQUFPTSxFQUFFLEVBQ25DK1gsZUFBZ0IsU0FBQXJZLEdBQU0sT0FBSUEsRUFBTzVwQixJQUFJLEdBRzNDLGd0Q0NoRmUsU0FBU2tpQyxHQUFnQm5pQyxHQUN0QyxJQUVNb2lDLEdBQVcsU0FBQyxHQUFJLENBQUN2YixLQUZILHVEQUVzQkMsVUFBUSxXQUFDLGdCQUVuRCxPQUNFLFNBQUMsR0FBSyxXQUNKLFVBQUNsZCxHQUFTLFNBQUs1SixHQUFLLGVBQ2xCLHdCQUFJLHdCQUNKLHVCQUFHLGlJQUlILHdCQUFJLGNBQ0osMkJBQ0UsMkJBQ0UsNEJBQVEsb0JBQXdCLHVHQUdsQywyQkFDRSw0QkFBUSxzQkFBMEIseUlBRUYsMEJBQU0sWUFBYyxvQ0FHdEQsMkJBQ0UsNEJBQVEsdUJBQTJCLE1BQUUsd0JBQUksb0JBQW9CLHlDQUM5QiwwQkFBTSxZQUFjLHdGQUl2RCx3QkFBSSxrQkFDSix5QkFBRyx5RkFFZ0IsU0FBQyxHQUFJLENBQUM2bUIsS0FoQ1gsZ0VBZ0M4QkMsVUFBUSxXQUFDLHlCQUNwQywyQ0FBeUNzYixFQUFTLCtFQU0zRSxpQkNsQ0ksR0FBVSxDQUFDLEVBRWYsR0FBUXJqQyxrQkFBb0IsSUFDNUIsR0FBUUMsY0FBZ0IsSUFFbEIsR0FBUUMsT0FBUyxTQUFjLEtBQU0sUUFFM0MsR0FBUUMsT0FBUyxJQUNqQixHQUFRQyxtQkFBcUIsSUFFaEIsSUFBSSxLQUFTLElBQTFCLElBS08sR0FBZSxNQUFXLFlBQWlCLGlCQUFpQnFLLHlQQ3pCbkUsa25HQUFBdEUsR0FBQSx3QkFBQUEsRUFBQSxzQkFBQUEsR0FBQSxpQkFBQUEsR0FBQSxzc0RBQUFBLEVBQUEseUJBQUFBLEdBQUEsSUFBQUEsRUFBQSx1QkFBQUEsR0FBQSw0YkFBQUEsRUFBQSx5QkFBQUEsR0FBQSxJQUFBQSxFQUFBLHVCQUFBQSxHQUFBLHloQkFBQUEsRUFBQSx5QkFBQUEsR0FBQSxJQUFBQSxFQUFBLHVCQUFBQSxHQUFBLHFHQUFBQSxFQUFBLHlCQUFBQSxHQUFBLElBQUFBLEVBQUEsdUJBQUFBLEdBQUEsNmJBQUFBLEVBQUEsaUJBQUFBLEVBQUEsRUFBQUEsSUFBQSxFQUFBQSxHQUFBLEVBQUFBLEdBQUEsU0FrQ0EsT0E1QkEsU0FBbUIsR0FBZ0IsSUFObkMsRUFBQUEsRUFNdUJvTixFQUFRLEVBQVJBLFNBQzhDLEdBUHJFLEdBT3NEbkYsRUFBQUEsRUFBQUEsV0FBUyxHQVAvRGpJLEVBT3FFLEVBUHJFLHlEQUFBQSxHQUFBLDBKQUFBQSxFQUFBLDZGQUFBQSxHQUFBLG1JQUFBQSxJQUFBLGlTQUFBQSxJQUFBLGdMQU9TbTlCLEVBQWtCLEtBQUVDLEVBQXFCLEtBU2hELE9BUEF4OEIsRUFBQUEsRUFBQUEsWUFBVSxXQVRaLFNBVUksV0FBQyx5R0FDa0Msb0NBQTBCLGdCQUFuRDhKLEVBQU0sRUFBTkEsT0FBUTVNLEVBQU0sRUFBTkEsT0FDaEJzUCxFQUFTLENBQUV3SSxPQUFRLE9BQVFsTCxPQUFBQSxFQUFRNU0sT0FBQUEsSUFBUywwQ0FabEQsa0xBY0UsR0FBRyxDQUFDc1AsS0FHRixpQ0FDRSxVQUFDcXVCLEdBQU0sQ0FDTG4xQixNQUFPLENBQUVYLFdBQVksT0FBUW1aLE9BQVEsUUFDckNqakIsUUFBUyxrQkFBTXVoQyxHQUFzQixFQUFLLEVBQUMsV0FFM0MsU0FBQyxFQUFJLENBQ0hyaUMsS0FBSyxPQUNMQyxVQUFXeUosR0FBQUEsT0FDWCxvQkFFSDA0QixJQUNDLFNBQUNGLEdBQWMsQ0FBQ3A0QixVQUFXLGtCQUFNdTRCLEdBQXNCLEVBQU0sTUFJckUseUJDdEJNQyxHQUFZLENBQ2hCL2IsVUFBVyxRQUNYQyxTQUFVLE9BQ1Y1VixRQUFTLE9BQ1QyeEIsV0FBWSxZQUNadFYsU0FBVSxNQUNWNWlCLGdCQUFpQiwyQkFHYm00QixHQUFnQixDQUFFN3hCLE9BQVEsUUFFakIsU0FBUzh4QixHQUFrQjFpQyxHQUN4QyxJQUFRK0osRUFBNkIvSixFQUE3QitKLFVBQVdrRSxFQUFrQmpPLEVBQWxCaU8sTUFBT2dYLEVBQVdqbEIsRUFBWGlsQixPQUNwQjBkLEVBckJSLFNBQXdCMTBCLEdBQ3RCLE1BQWMsd0JBQVZBLEVBQ0ssbUJBQ1ksMEJBQVZBLEVBQ0YsMEJBREYsQ0FHVCxDQWVlMjBCLENBQWMzMEIsR0FFM0IsT0FDRSxTQUFDLEdBQUssV0FDSixVQUFDckUsR0FBUyxDQUFDRyxVQUFXQSxFQUFVLFdBQzlCLHdCQUFLa0UsSUFDSjAwQixJQUNDLHlCQUFHLHVCQUFtQiwwQkFBT0EsSUFBWSxRQUUzQyxlQUFJbjNCLE1BQU8rMkIsR0FBVSxTQUNsQnRkLEVBQU96Z0IsS0FBSSxTQUFDNEUsRUFBT2xFLEdBQUMsT0FDbkIsZUFBWXNHLE1BQU9pM0IsR0FBYyxTQUM5QnI1QixHQURNbEUsRUFFSixVQU1qQixDQzNDQSxJQUFNMjlCLEdBQWEsMkJBQ2JDLEdBQVMsdUJBQ1RDLEdBQVcseUJBc0JWLFNBQVNDLEdBQXNCQyxFQUFROUYsR0FDNUMsSUFDRSxPQUFPLzVCLEtBQUttNUIsTUFBTTlCLGFBQWFtSCxRQUFRLEdBQUQsT0FBSW1CLEdBQVEsWUFBSUUsRUFBTSxZQUFJOUYsSUFHbEUsQ0FGRSxTQUNBLE9BQU8sSUFDVCxDQUNGLDRHQ3RCQSxJQUFNOU8sR0FBZ0IsQ0FDcEI2VSxTQUFTLEVBQ1RDLGFBQWEsRUFDYkMsZUFBZ0IsS0FDaEJDLG1CQUFvQixLQUNwQkMsaUJBQWtCLEtBQ2xCQyxTQUFVLEdBQ1YxRixVQUFXLEdBQ1gyRixTQUFTLEVBQ1RDLGFBQWMsSUFHSEMsSUFBY3hpQixFQUFBQSxHQUFBQSxJQUFZLENBQ3JDamhCLEtBQU0sZ0JBQ05raEIsYUFBY2tOLEdBQ2RqTixTQUFVLENBQ1J1aUIsZUFBYyxTQUFFbitCLEdBQ2RBLEVBQU1pK0IsYUFBZSxHQUNyQmorQixFQUFNZytCLFNBQVUsQ0FDbEIsRUFDQUksdUJBQXNCLFNBQUVwK0IsR0FDdEIsSUFFSTQ5QixFQUZFUyxFRHpCTCxXQUNMLElBQ0UsT0FBT3pnQyxLQUFLbTVCLE1BQU05QixhQUFhbUgsUUFBUWlCLElBR3pDLENBRkUsU0FDQSxPQUFPLElBQ1QsQ0FDRixDQ21COEJpQixHQUNsQnhJLEVBQWUyRSxHQUFBQSxjQUF1QixHQUd4Q3BELEtBQUt2QixFQUFjLENBQUVuUixHQUFJMFosSUFDM0JULEVBQWlCUyxFQUNSdkksRUFBYTMzQixPQUFTLElBQy9CeS9CLEVBQWlCOUgsRUFBYSxHQUFHblIsSUFHbkMza0IsRUFBTTI5QixhQUFjLEVBQ3BCMzlCLEVBQU00OUIsZUFBaUJBLENBQ3pCLEVBQ0FXLG9CQUFtQixTQUFFditCLEdBQVNBLEVBQU1nK0IsU0FBVSxDQUFLLEVBQ25EUSxtQkFBa0IsU0FBRXgrQixFQUFPbVEsR0FDekIsSUFBUXl0QixFQUFtQjU5QixFQUFuQjQ5QixlQUNBRyxFQUFhNXRCLEVBQU80TCxRQUFwQmdpQixTQUNGckcsRUFBYUwsS0FBS29ELEdBQUFBLGFBQXFCLENBQUU5VixHQUFJaVosSUFFbkQ1OUIsRUFBTSs5QixTQUFXQSxFQUNqQi85QixFQUFNaEQsU0FBVyxLQUNqQmdELEVBQU1xNEIsVUFBWSxHQUNsQnI0QixFQUFNZytCLFNBQVUsRUFPaEIsSUFMQSxJQUFNUyxFQUFZei9CLElBQUkrK0IsRUFBVSxRQUMxQlcsRUFBZ0JoSCxFQUFXaUgsZUFDM0JDLEVEdkNMLFNBQTZCbkIsR0FDbEMsSUFDRSxPQUFPNy9CLEtBQUttNUIsTUFBTTlCLGFBQWFtSCxRQUFRLEdBQUQsT0FBSWtCLEdBQU0sWUFBSUcsSUFHdEQsQ0FGRSxTQUNBLE9BQU8sSUFDVCxDQUNGLENDaUM2QmEsQ0FBMkJWLEdBR2xELE1BQXFCLENBRmtCLElBQXBCRyxFQUFTNS9CLE9BQWU0L0IsRUFBUyxHQUFHdGpDLEtBQU8sS0FFNUJta0MsRUFBZ0JGLEdBQWMsZUFBRSxDQUE3RCxJQUFNL0csRUFBTSxLQUNmLEdBQUk4RyxFQUFVOWlDLFNBQVNnOEIsR0FBUyxDQUM5QjMzQixFQUFNNjlCLG1CQUFxQmxHLEVBQzNCMzNCLEVBQU04OUIsaUJBQW1CUSxHQUE2QlYsRUFBZ0JqRyxHQUN0RSxLQUNGLENBQ0YsQ0FDRixFQUNBa0gscUJBQW9CLFNBQUU3K0IsR0FBU0EsRUFBTWcrQixTQUFVLENBQUssRUFDcERjLG9CQUFtQixTQUFFOStCLEVBQU9tUSxHQUMxQixJQUFReXRCLEVBQXVDNTlCLEVBQXZDNDlCLGVBQWdCQyxFQUF1Qjc5QixFQUF2QjY5QixtQkFDeEIsRUFBZ0QxdEIsRUFBTzRMLFFBQS9Dc2MsRUFBUyxFQUFUQSxVQUFvQjBHLEVBQWUsRUFBeEIza0MsUUFFbkI0RixFQUFNcTRCLFVBQVlBLEVBQ2xCcjRCLEVBQU1nK0IsU0FBVSxFQUtoQixJQUhBLElBQU1nQixFQUFtQlYsR0FBNkJWLEVBQWdCQyxHQUd0RSxNQUF1QixDQUZtQixJQUFyQnhGLEVBQVVsNkIsT0FBZWs2QixFQUFVLEdBQUssS0FFdkIyRyxFQUFrQkQsR0FBZ0IsZUFBRSxDQUFyRSxJQUFNL2hDLEVBQVEsS0FDakIsR0FBSXE3QixFQUFVMThCLFNBQVNxQixHQUFXLENBQ2hDZ0QsRUFBTTg5QixpQkFBbUI5Z0MsRUFDekIsS0FDRixDQUNGLENBQ0YsRUFDQWlpQyxtQkFBa0IsU0FBRWovQixFQUFPbVEsR0R4RXhCLElBQWlDdW5CLEVDeUVsQzEzQixFQUFNNDlCLGVBQWlCenRCLEVBQU80TCxRQUFRMmIsV0FBVy9TLEdBQ2pEM2tCLEVBQU02OUIsbUJBQXFCLEtBQzNCNzlCLEVBQU04OUIsaUJBQW1CLEtEM0VTcEcsRUM2RUgxM0IsRUFBTTQ5QixlRDVFekMzSSxhQUFhdUgsUUFBUWEsR0FBWXovQixLQUFLQyxVQUFVNjVCLEdDNkU5QyxFQUNBd0gsZUFBYyxTQUFFbC9CLEVBQU9tUSxHRDNEcEIsSUFBNkJzdEIsRUFBUTlGLEVDNER0QzMzQixFQUFNNjlCLG1CQUFxQjF0QixFQUFPNEwsUUFBUXRoQixLQUMxQ3VGLEVBQU04OUIsaUJBQW1CUSxHQUN2QnQrQixFQUFNNDlCLGVBQ041OUIsRUFBTTY5QixvQkQvRHNCSixFQ2tFNUJ6OUIsRUFBTTQ5QixlRGxFOEJqRyxFQ21FcEMzM0IsRUFBTTY5QixtQkRsRVo1SSxhQUFhdUgsUUFBUSxHQUFELE9BQUljLEdBQU0sWUFBSUcsR0FBVTcvQixLQUFLQyxVQUFVODVCLEdDb0V6RCxFQUNBbUcsaUJBQWdCLFNBQUU5OUIsRUFBT21RLEdEbEV0QixJQUErQnN0QixFQUFROUYsRUFBUTM2QixFQ21FaERnRCxFQUFNODlCLGlCQUFtQjN0QixFQUFPNEwsUUFBUXRoQixLRG5FUmdqQyxFQ3FFOUJ6OUIsRUFBTTQ5QixlRHJFZ0NqRyxFQ3NFdEMzM0IsRUFBTTY5QixtQkR0RXdDN2dDLEVDdUU5Q2dELEVBQU04OUIsaUJEdEVaN0ksYUFBYXVILFFBQVEsR0FBRCxPQUFJZSxHQUFRLFlBQUlFLEVBQU0sWUFBSTlGLEdBQVUvNUIsS0FBS0MsVUFBVWIsR0N3RXJFLEVBQ0FtaUMsZ0JBQWUsU0FBRW4vQixFQUFPbVEsR0FDdEJuUSxFQUFNZytCLFNBQVUsQ0FDbEIsRUFDQW9CLHNCQUFxQixTQUFFcC9CLEVBQU9tUSxHQUM1QixJQUFvQjNTLEVBQWEyUyxFQUFPNEwsUUFBaENsZixTQUFZVyxPQUNwQndDLEVBQU1pK0IsYUFBZXpnQyxFQUFPeWdDLGNBQWdCLEdBQzVDaitCLEVBQU1nK0IsU0FBVSxDQUNsQixLQWFHLFNBQVNxQixLQUNkLElBVjZCai9CLE1BVTJDLE1BQTlDOFAsRUFBQUEsRUFBQUEsWUFBV2d1QixHQUFZb0IsUUFBU3pXLE1BQWMsczVCQUFqRTdvQixFQUFLLEtBQ051L0IsR0FYdUJuL0IsRUFVUCxNQVRmbUIsRUFBQUEsRUFBQUEsVUFBUSxrQkFDYmpDLE9BQU93RSxLQUFLbzZCLEdBQVl4dEIsU0FBU3BTLFFBQU8sU0FBQ29TLEVBQVNQLEdBRWhELE9BREFPLEVBQVFQLEdBQVUsd0JBQWEvUCxHQUFTLEVBQUE4OUIsR0FBWXh0QixTQUFRUCxHQUFPLG1CQUFVLEVBQ3RFTyxDQUNULEdBQUcsQ0FBQyxFQUFFLEdBQ0wsQ0FBQ3RRLEtBT0osTUFBTyxDQUFDSixFQUFPdS9CLEVBQ2pCLENDbElBLFNBQVNDLEdBQW1CaGxDLEdBQzFCLElBQVErSixFQUEyQi9KLEVBQTNCK0osVUFBV2s3QixFQUFnQmpsQyxFQUFoQmlsQyxZQUNuQixPQUNFLFNBQUMsR0FBSyxXQUNKLFVBQUNyN0IsR0FBUyxDQUFDRyxVQUFXQSxFQUFVLFdBQzlCLHdCQUFJLGtDQUNKLHlCQUFHLCtFQUVPLDBCQUFPazdCLElBQW1CLHVLQUlwQyx1QkFBRyw0S0FLSCx1QkFBRywrUUFTWCxDQUVBRCxHQUFrQnhrQyxVQUFZLENBQzVCdUosVUFBV3RKLElBQUFBLEtBQUFBLFdBQ1h3a0MsWUFBYXhrQyxJQUFBQSxPQUFBQSxZQUdmLFVDaENBLFNBQVN5a0MsR0FBb0IsR0FBb0IsSUFBaEJoSyxFQUFZLEVBQVpBLGFBQ3pCdjRCLEVBQU0sNkNBQUgsT0FBZ0R1NEIsRUFBYS9RLElBRXRFLE9BQ0UsU0FBQyxHQUFLLFdBQ0osVUFBQ3ZnQixHQUFTLENBQUNDLFlBQWEsS0FBSyxXQUMzQix3QkFBSSxrQkFDSix5QkFBRyw0RkFFbUIsd0JBQUksMkJBRTFCLHlCQUFHLDZFQUVHLHdCQUFJLFFBQVEsZ01BSWxCLHdCQUFJLHFCQUNKLHlCQUFHLGlIQUV3QyxTQUFDLEdBQUksQ0FBQ2dkLEtBQU1sa0IsRUFBSSxTQUFDLDBCQUMzQyxtSkFJakIsdUJBQUcsbUpBT1gsQ0FFQXVpQyxHQUFxQjFrQyxVQUFZLENBQy9CMDZCLGFBQWN6NkIsSUFBQUEsTUFBZ0IsQ0FDNUIwcEIsR0FBSTFwQixJQUFBQSxPQUFBQSxhQUNIMkwsWUFHTCxVQ3hDQSxTQUFTKzRCLEdBQWtCbmxDLEdBQ3pCLElBQVErSixFQUFjL0osRUFBZCtKLFVBRVIsT0FDRSxTQUFDLEdBQUssV0FDSixVQUFDSCxHQUFTLENBQUNHLFVBQVdBLEVBQVUsV0FDOUIsd0JBQUksZ0NBQ0oseUJBQUcsK0VBRU8sMEJBQU0sV0FBYSwySEFJNUJ3MkIsT0FJVCxDQUVBNEUsR0FBaUIza0MsVUFBWSxDQUMzQnVKLFVBQVd0SixJQUFBQSxLQUFBQSxXQUNYMmtDLDJCQUE0QjNrQyxJQUFBQSxNQUc5QixVQ1BBLEdBcEJBLFdBQ0UsT0FDRSxTQUFDLEdBQUssV0FDSixVQUFDbUosR0FBUyxDQUFDQyxZQUFhLEtBQUssV0FDM0Isd0JBQUksNEJBQ0osdUJBQUcsNERBR0gseUJBQUcsNE9BSTBCLHdCQUFJLGdCQUFnQixvRUFNekQsRUNmQSxTQUFTdzdCLEdBQWVybEMsR0FDdEIsSUFBUStKLEVBQWMvSixFQUFkK0osVUFFUixPQUNFLFNBQUMsR0FBSyxXQUNKLFVBQUNILEdBQVMsQ0FBQ0csVUFBV0EsRUFBVSxXQUM5Qix3QkFBSSx5QkFDSix1QkFBRyx5SUFJSCx5QkFBRyw4R0FHSSwwQkFBTSxxQkFBdUIsUUFBSSwwQkFBTSwyQkFBbUMsT0FFaEZ5MkIsR0FDQUQsT0FJVCxDQUVBOEUsR0FBYzdrQyxVQUFZLENBQ3hCdUosVUFBV3RKLElBQUFBLEtBQUFBLFlBR2IsVUM1QkEsU0FBUzZrQyxLQUNQLE9BQ0UsU0FBQyxHQUFLLENBQUMxNkIsWUFBVSxZQUNmLFVBQUNoQixHQUFTLENBQUNDLFlBQWEsS0FBTTJCLE1BQU8sQ0FBRXBCLE1BQU8sU0FBVSxXQUN0RCx3QkFBSSw4QkFDSix1QkFBRywwQ0FHSCxTQUFDekosRUFBVSxDQUNUUixXQUFXLFNBQ1hTLEtBQUssU0FDTEMsS0FBSyxvQkFDTDJLLE1BQU8sQ0FBRWYsUUFBUyxRQUFTbUcsT0FBUSxVQUNuQzdQLFFBQVMsa0JBQU1rL0IsR0FBQUEsZ0JBQXVCLFFBS2hELENBRUFxRixHQUFNOWtDLFVBQVksQ0FBQyxFQUVuQixVQ3RCQSxTQUFTK2tDLEtBQ1AsSUFBTUMsRUFBV3ZGLEdBQUFBLFNBQWUsbUJBQ2hCQSxHQUFBQSxTQUFlLEtBQzNCLFdBRUosT0FDRSxTQUFDLEdBQUssQ0FBQ3IxQixZQUFVLFlBQ2YsVUFBQ2hCLEdBQVMsQ0FBQ0MsWUFBYSxLQUFLLFdBQzNCLHdCQUFLMjdCLEtBQ0wsdUJBQUcsNE5BTUgseUJBQUcsMEdBRThCLDBCQUFNLFlBQWMsMkhBRWpCLDBCQUFNLHFCQUF1QiwyREFHakUsU0FBQzdrQyxFQUFVLENBQ1RSLFdBQVcsU0FDWFMsS0FBSyxTQUNMQyxLQUFLLGlCQUNMMkssTUFBTyxDQUFFZixRQUFTLFFBQVNtRyxPQUFRLFVBQ25DN1AsUUFBUyxrQkFBTWsvQixHQUFBQSxxQkFBNEIsUUFLckQsQ0FFQXNGLEdBQVEva0MsVUFBWSxDQUFDLEVBRXJCLFVDbkNBLFNBQVNpbEMsR0FBZ0J6bEMsR0FDdkIsSUFBUStKLEVBQWMvSixFQUFkK0osVUFFUixPQUNFLFNBQUMsR0FBSyxXQUNKLFVBQUNILEdBQVMsQ0FBQ0csVUFBV0EsRUFBVSxXQUM5Qix3QkFBSSx5QkFDSix5QkFBRyx1QkFDa0IsMEJBQU0sWUFBYyxrQkFBYywwQkFBTSxZQUFjLGVBRTNFLHlCQUFHLHdKQUdTLDBCQUFNLHNCQUF3QixrQkFFMUMseUJBQUcsbUZBRVNvMkIsR0FBaUIsV0FLckMsQ0FFQXNGLEdBQWVqbEMsVUFBWSxDQUN6QnVKLFVBQVd0SixJQUFBQSxLQUFBQSxZQUdiLFVDM0JPLFNBQVNpbEMsR0FBcUIsR0FBMkMsSUFBdkNsZ0MsRUFBSyxFQUFMQSxNQUFPMFEsRUFBTyxFQUFQQSxRQUFTcUQsRUFBTyxFQUFQQSxRQUFTb3NCLEVBQVUsRUFBVkEsV0FDeERySyxFQUFvRS9oQixFQUFwRStoQixhQUFjc0ssRUFBc0Ryc0IsRUFBdERxc0Isa0JBQW1CQyxFQUFtQ3RzQixFQUFuQ3NzQixjQUFlQyxFQUFvQnZzQixFQUFwQnVzQixnQkFDaERDLEVBQXFFSixFQUFyRUksbUJBQW9CQyxFQUFpREwsRUFBakRLLHFCQUFzQkMsRUFBMkJOLEVBQTNCTSx1QkFDMUMxQyxFQUFpQy85QixFQUFqQys5QixTQUFVMUYsRUFBdUJyNEIsRUFBdkJxNEIsVUFBVzJGLEVBQVloK0IsRUFBWmcrQixRQVk3QixPQUNFLGlDQUNFLFNBQUN4QyxHQUFNLENBQ0wxNEIsTUFBTSxhQUNOMUIsTUFBT20vQixFQUNQam5DLFFBQVM4bUMsRUFDVDkzQixTQWhCTixTQUF5QixHQUFnQixJQUFacWMsRUFBRSxFQUFGQSxHQUMzQixHQUFhLGlCQURzQixFQUFKempCLEtBQy9CLENBS0EsSUFBTXcyQixFQUFhTCxLQUFLdkIsRUFBYyxDQUFFblIsR0FBQUEsSUFDeENqVSxFQUFRdXVCLG1CQUFtQixDQUFFdkgsV0FBQUEsR0FIN0IsTUFGRStDLEdBQUFBLHdCQUErQjlWLEVBTW5DLEVBU00rYixTQUFVLFNBQUFyYyxHQUFNLE9BQUlBLEVBQU9NLEVBQUUsRUFDN0I4WCxlQUFnQixTQUFBcFksR0FBTSxPQUFJQSxFQUFPTSxFQUFFLEVBQ25DK1gsZUFBZ0IsU0FBQXJZLEdBQU0sT0FBSUEsRUFBT3NjLE1BQVF0YyxFQUFPNXBCLElBQUksRUFDcERtbUMsa0JBQW1CLFNBQUN2YyxFQUFRLEdBQUYsSUFBSTVsQixFQUFPLEVBQVBBLFFBQU8sT0FDbkMsOEJBQWUsVUFBWkEsRUFBc0I0bEIsRUFBTzVwQixLQUFPNHBCLEVBQU9zYyxNQUFRdGMsRUFBTzVwQixNQUFRLElBSXhFc2pDLEVBQVM1L0IsT0FBUyxJQUNqQixTQUFDcTlCLEdBQU0sQ0FDTDE0QixNQUFNLFNBQ04xQixNQUFPby9CLEVBQ1BsbkMsUUFBUyttQyxFQUNULzNCLFNBQVUsZ0JBQUdxYyxFQUFFLEVBQUZBLEdBQUUsT0FBT2pVLEVBQVF3dUIsZUFBZSxDQUFFemtDLEtBQU1rcUIsR0FBSyxFQUMxRDhYLGVBQWdCLFNBQUFwWSxHQUFNLE9BQUlBLEVBQU9NLEVBQUUsRUFDbkMrWCxlQUFnQixTQUFBclksR0FBTSxPQUFJQSxFQUFPNXBCLElBQUksSUFJeEM0OUIsRUFBVWw2QixPQUFTLElBQ2xCLFNBQUNxOUIsR0FBTSxDQUNMMTRCLE1BQU0sV0FDTjFCLE1BQU9xL0IsRUFDUG5uQyxRQUFTZ25DLEVBQ1Q3RCxlQUFnQixTQUFBcFksR0FBTSxPQUFJQSxFQUFPTSxFQUFFLEVBQ25DK1gsZUFBZ0IsU0FBQXJZLEdBQU0sT0FBSUEsRUFBTzVwQixJQUFJLEVBQ3JDNk4sU0FBVSxnQkFBR3FjLEVBQUUsRUFBRkEsR0FBRSxPQUFPalUsRUFBUW90QixpQkFBaUIsQ0FBRXJqQyxLQUFNa3FCLEdBQUssSUFJL0RxWixJQUNDLFNBQUM5VSxHQUFPLFdBQ04sU0FBQ2tMLEdBQU8sUUFLbEIsd1BDakVBLGtuR0FBQTEwQixHQUFBLHdCQUFBQSxFQUFBLHNCQUFBQSxHQUFBLGlCQUFBQSxHQUFBLHNzREFBQUEsRUFBQSx5QkFBQUEsR0FBQSxJQUFBQSxFQUFBLHVCQUFBQSxHQUFBLDRiQUFBQSxFQUFBLHlCQUFBQSxHQUFBLElBQUFBLEVBQUEsdUJBQUFBLEdBQUEseWhCQUFBQSxFQUFBLHlCQUFBQSxHQUFBLElBQUFBLEVBQUEsdUJBQUFBLEdBQUEscUdBQUFBLEVBQUEseUJBQUFBLEdBQUEsSUFBQUEsRUFBQSx1QkFBQUEsR0FBQSw2d0NBQUFBLEVBQUEsaUJBQUFBLEVBQUEsRUFBQUEsSUFBQSxFQUFBQSxHQUFBLEVBQUFBLEdBQUEsZ1FDQUEsa25HQUFBQSxHQUFBLHdCQUFBQSxFQUFBLHNCQUFBQSxHQUFBLGlCQUFBQSxHQUFBLHNzREFBQUEsRUFBQSx5QkFBQUEsR0FBQSxJQUFBQSxFQUFBLHVCQUFBQSxHQUFBLDRiQUFBQSxFQUFBLHlCQUFBQSxHQUFBLElBQUFBLEVBQUEsdUJBQUFBLEdBQUEseWhCQUFBQSxFQUFBLHlCQUFBQSxHQUFBLElBQUFBLEVBQUEsdUJBQUFBLEdBQUEscUdBQUFBLEVBQUEseUJBQUFBLEdBQUEsSUFBQUEsRUFBQSx1QkFBQUEsR0FBQSw0ZkFBQUEsRUFBQSxFQUFBQSxFQUFBLGlCQUFBQSxJQUFBLHVCQUFBQSxHQUFBLFVBQUFBLEdBQUEsR0FBQUEsRUFBQSxnekJBQUFBLEdBQUEsZ0VBQUFBLEdBQUEsMEpBQUFBLEVBQUEsNkZBQUFBLEdBQUEsbUlBQUFBLElBQUEsaVNBQUFBLElBQUEsNE9BQUFBLEVBQUEsaUJBQUFBLEVBQUEsRUFBQUEsSUFBQSxFQUFBQSxHQUFBLEVBQUFBLEdBQUEsU0F5QkEsSUFBTW1oQyxHQUFrQixTQUFBeGpDLEdBQUcsT0FBSXlqQyxLQUFRempDLEVBQUssQ0FBRTVDLEtBQU0sa0JBQW1Cd0MsS0FBTSxVQUFXLEVBQ2xGOGpDLEdBQW1CLFNBQUExakMsR0FBRyxPQUFJeWpDLEtBQVF6akMsRUFBSyxDQUFFNUMsS0FBTSxrQkFBbUJ1bUMsT0FBUSx1QkFBd0IsRUFDbEdDLEdBQWtCLFNBQUE1akMsR0FBRyxPQUN6QnlqQyxLQUFRempDLEVBQUssQ0FBRTVDLEtBQU0sa0JBQW1Cd0MsS0FBTSxzQkFDOUM2akMsS0FBUXpqQyxFQUFLLENBQUU1QyxLQUFNLGtCQUFtQnVtQyxPQUFRLFlBQWEsRUFFekRFLEdBQWlCLFNBQUE3akMsR0FBRyxNQUNWLHFCQUFkQSxhQUFHLEVBQUhBLEVBQUs1QyxRQUNMNEMsYUFBRyxFQUFIQSxFQUFLSixLQUFLNkIsTUFBTSw2Q0FBNEMsRUFHOUQsU0FBU3FpQyxHQUFjM21DLEdBQ3JCLElBQXlDLEtBQWhCNmtDLEtBQWdCLEdBQWxDci9CLEVBQUssS0FBRTBRLEVBQU8sS0FDckIsRURoQ0ssU0FBK0IxUSxFQUFPMFEsR0FDM0MsSUFDRXF0QixFQUtFLzlCLEVBTEYrOUIsU0FDQTFGLEVBSUVyNEIsRUFKRnE0QixVQUNBdUYsRUFHRTU5QixFQUhGNDlCLGVBQ0FDLEVBRUU3OUIsRUFGRjY5QixtQkFDQUMsRUFDRTk5QixFQURGODlCLGlCQUdJaEksR0FBZ0IyRSxHQUFBQSxjQUF1QixJQUFJejdCLEtBQUksU0FBQXc0QixHQUFJLE1BQUssQ0FDNUQ3UyxHQUFJNlMsRUFBSzdTLEdBQ1RscUIsS0FBTSs4QixFQUFLLzhCLEtBQ1hrbUMsS0FBTW5KLEVBQUtDLFVBQ1osSUFFSzJKLEdBQVUzRyxHQUFBQSxlQUF3QixJQUFJejdCLEtBQUksU0FBQTAyQixHQUFZLE1BQUssQ0FDL0QvUSxHQUFJK1EsRUFBYS9RLEdBQ2pCempCLEtBQU0sZUFDTnpHLEtBQU0sK0JBQUYsT0FBaUNpN0IsRUFBYTJMLFFBQVFDLE1BQUssUUFDaEUsSUFFS2xCLEdBQW9CNytCLEVBQUFBLEVBQUFBLFVBQVEsOEJBQVV1MEIsR0FBWSxHQUFLc0wsR0FBTSxHQUFHLENBQUN0TCxFQUFjc0wsSUFDL0VmLEdBQWdCOStCLEVBQUFBLEVBQUFBLFVBQVEsa0JBQU13OEIsRUFBUy8rQixLQUFJLFNBQUEyNEIsR0FBTSxNQUFLLENBQUVoVCxHQUFJZ1QsRUFBT2w5QixLQUFNQSxLQUFNazlCLEVBQU9sOUIsS0FBTSxHQUFFLEdBQUUsQ0FBQ3NqQyxJQUNqR3VDLEdBQWtCLytCLEVBQUFBLEVBQUFBLFVBQVEsa0JBQU04MkIsRUFBVXI1QixLQUFJLFNBQUFoQyxHQUFRLE1BQUssQ0FBRTJuQixHQUFJM25CLEVBQVV2QyxLQUFNdUMsRUFBVSxHQUFFLEdBQUUsQ0FBQ3E3QixJQUVoR2tJLEdBQXFCaC9CLEVBQUFBLEVBQUFBLFVBQVEsa0JBQU04MUIsS0FBS3ZCLEVBQWMsQ0FBRW5SLEdBQUlpWixHQUFpQixHQUFFLENBQUM5SCxFQUFjOEgsSUFDOUY0QyxHQUF1QmovQixFQUFBQSxFQUFBQSxVQUFRLGtCQUFNODFCLEtBQUtnSixFQUFlLENBQUUxYixHQUFJa1osR0FBcUIsR0FBRSxDQUFDd0MsRUFBZXhDLElBQ3RHNEMsR0FBeUJsL0IsRUFBQUEsRUFBQUEsVUFBUSxrQkFBTTgxQixLQUFLaUosRUFBaUIsQ0FBRTNiLEdBQUltWixHQUFtQixHQUFFLENBQUN3QyxFQUFpQnhDLElBZ0NoSCxPQTlCQXg5QixFQUFBQSxFQUFBQSxZQUFVLFdBQ0hzOUIsR0FJTCxjQUFDLHVGQUdxRSxPQUZwRWx0QixFQUFRNnRCLHNCQUVGN0csRUFBYUwsS0FBS29ELEdBQUFBLGFBQXFCLENBQUU5VixHQUFJaVosSUFBaUIsU0FDN0NuRCxHQUFBQSxrQkFBeUIvQyxHQUFXLE9BQXJEcUcsRUFBVyxFQUFILEtBRWRydEIsRUFBUTh0QixtQkFBbUIsQ0FBRVQsU0FBQUEsSUFBVywwQ0FOMUMsRUFRRixHQUFHLENBQUNILEVBQWdCbHRCLEtBRXBCcFEsRUFBQUEsRUFBQUEsWUFBVSxXQUNIczlCLEdBQW1CQyxHQUl4QixjQUFDLHVGQUdxRSxPQUZwRW50QixFQUFRbXVCLHVCQUVGbkgsRUFBYUwsS0FBS29ELEdBQUFBLGFBQXFCLENBQUU5VixHQUFJaVosSUFBaUIsU0FDeENuRCxHQUFBQSxxQkFBNEIvQyxFQUFZbUcsR0FBbUIsT0FBakYwRCxFQUFnQixFQUFILEtBRW5CN3dCLEVBQVFvdUIsb0JBQW9CeUMsR0FBYywwQ0FONUMsRUFRRixHQUFHLENBQUMzRCxFQUFnQkMsRUFBb0JudEIsSUFFakMsQ0FDTCxDQUFFb2xCLGFBQUFBLEVBQWNzSyxrQkFBQUEsRUFBbUJDLGNBQUFBLEVBQWVDLGdCQUFBQSxHQUNsRCxDQUFFQyxtQkFBQUEsRUFBb0JDLHFCQUFBQSxFQUFzQkMsdUJBQUFBLEdBRWhELENDL0JnQ2UsQ0FBcUJ4aEMsRUFBTzBRLEdBQVEsVUFBM0RxRCxFQUFPLEtBQUVvc0IsRUFBVSxLQUVsQnhDLEVBQW9EMzlCLEVBQXBEMjlCLFlBQWFDLEVBQXVDNTlCLEVBQXZDNDlCLGVBQWdCQyxFQUF1Qjc5QixFQUF2QjY5QixtQkFDN0JDLEVBQXFCOTlCLEVBQXJCODlCLGlCQUNBRSxFQUFZaCtCLEVBQVpnK0IsUUFFQWx4QixFQUFzQnRTLEVBQXRCc1MsU0FBVWt2QixFQUFZeGhDLEVBQVp3aEMsU0FFbEIxN0IsRUFBQUEsRUFBQUEsWUFBVSxXQUNSLElBQU1naEMsRUFBUSxXQUFILE9BQVM3RyxHQUFBQSxnQkFBdUIsRUFDckNpRCxFQUFVLFdBQVFodEIsRUFBUXl0QixpQkFBa0JuQyxFQUFRLENBQUVNLE9BQVFtRixJQUFXLEVBQ3pFQyxFQUF3QixXQUFRaHhCLEVBQVF5dEIsaUJBQWtCbkMsRUFBUSxDQUFFTSxPQUFRckIsSUFBeUIsRUFDckcwRyxFQUFpQixTQUFBLzlCLEdBQ3JCLElBQUkwNEIsRUFBU1ksR0FDVDJELEdBQWdCajlCLEtBQVEwNEIsRUFBU3FELElBQ2pDdUIsR0FBZXQ5QixLQUFRMDRCLEVBQVNrRCxJQUNoQ3lCLEdBQWdCcjlCLEtBQVEwNEIsRUFBU3VELElBQ2pDa0IsR0FBaUJuOUIsS0FBUTA0QixFQUFTMkQsSUFFdEN2dkIsRUFBUXl0QixpQkFDUm5DLEVBQVEsQ0FDTk0sT0FBQUEsRUFDQXNGLFlBQWEsQ0FDWG41QixNQUFPN0UsRUFBTW5KLEtBQ2JnbEIsT0FBUTdiLEVBQU02YixTQUdwQixFQVFBLE9BTkFnYixHQUFBQSxPQUFjLzVCLEtBQUtnUSxFQUFRMHRCLHdCQUMzQjNELEdBQUFBLEdBQVUsd0JBQXlCNkcsR0FDbkM3RyxHQUFBQSxHQUFVLFVBQVdpRCxHQUNyQmpELEdBQUFBLEdBQVUsd0JBQXlCa0gsR0FDbkNsSCxHQUFBQSxHQUFVLDJCQUE0QmlILEdBRS9CLFdBQ0xqSCxHQUFBQSxJQUFXLHdCQUF5QjZHLEdBQ3BDN0csR0FBQUEsSUFBVyxVQUFXaUQsR0FDdEJqRCxHQUFBQSxJQUFXLHdCQUF5QmtILEdBQ3BDbEgsR0FBQUEsSUFBVywyQkFBNEJpSCxFQUN6QyxDQUNGLEdBQUcsQ0FBQ2h4QixFQUFTc3JCLElBRWIsSUFBTTZGLEdBQWVsOEIsRUFBQUEsRUFBQUEsYUFBVyxlQWpGbEMsRUFpRmtDLEdBakZsQyxFQWlGa0MsV0FBQyxXQUFnQjgzQixFQUFROUYsRUFBUTM2QixHQUFRLDhFQUk5QyxPQUhuQnloQyxFQUFZaEUsR0FBQUEsYUFDWi9DLEVBQTRDLFFBQWxDLEVBQUdMLEtBQUtvSCxFQUFXLENBQUU5WixHQUFJOFksV0FBUyxhQUEvQixFQUFpQ2hHLFVBRXBEL21CLEVBQVF5dUIsa0JBQWlCLFNBRUYxRSxHQUFBQSxxQkFBNEIvQyxFQUFZQyxFQUFRLENBQ3JFMzZCLFNBQUFBLElBQ0EsT0FGSUgsRUFBVyxFQUFILEtBSWQ2VCxFQUFRMHVCLHNCQUFzQixDQUFFdmlDLFNBQUFBLElBRWhDaVEsRUFBUyxJQUFFMnRCLE9BQVEsQ0FBRS9DLFdBQUFBLEVBQVlDLE9BQUFBLEVBQVEzNkIsU0FBQUEsSUFBZUgsSUFBVywwQ0E3RnZFLGlMQThGRyx1REFiK0IsR0FhN0IsQ0FBQzZULEVBQVM1RCxJQUVQZzFCLEdBQWlCbjhCLEVBQUFBLEVBQUFBLGNBQVksa0JBQ2pDazhCLEVBQWFqRSxFQUFnQkMsRUFBb0JDLEVBQWlCLEdBQ2pFLENBQUMrRCxFQUFjakUsRUFBZ0JDLEVBQW9CQyxJQVV0RCxPQVJBeDlCLEVBQUFBLEVBQUFBLFlBQVUsV0FDSHM5QixHQUFtQkMsR0FJeEJnRSxFQUFhakUsRUFBZ0JDLEVBQW9CQyxFQUNuRCxHQUFHLENBQUNGLEVBQWdCQyxFQUFvQkMsRUFBa0IrRCxJQUVyRGxFLEVBQ0QzOUIsRUFBTTA5QixTQUFnQixTQUFDLEdBQU8sSUFDN0JqRCxHQUFBQSxxQkFDQUEsR0FBQUEsaUJBQ0RBLEdBQUFBLGtDQUNLLFNBQUMsR0FBb0IsQ0FBQy9FLGFBQWMrRSxHQUFBQSxjQUFBQSxNQUkzQyxpQ0FDRSxTQUFDeUYsR0FBcUIsQ0FBQ2xnQyxNQUFPQSxFQUFPMFEsUUFBU0EsRUFBU3FELFFBQVNBLEVBQVNvc0IsV0FBWUEsSUFDcEZ0QyxJQUF1QkcsSUFDdEIsU0FBQzdDLEdBQU0sQ0FBQzUvQixRQUFTdW1DLEVBQWUsVUFDOUIsU0FBQyxFQUFJLENBQUNybkMsS0FBSyxlQVZrQixTQUFDLEdBQU8sS0FESixTQUFDLEdBQUssSUFGdEIsSUFrQjNCLENBRUEwbUMsR0FBYW5tQyxVQUFZLENBQ3ZCK21DLFNBQVU5bUMsSUFBQUEsS0FBQUEsV0FDVittQyxTQUFVL21DLElBQUFBLEtBQUFBLFdBQ1YrZ0MsUUFBUy9nQyxJQUFBQSxLQUFBQSxXQUNUNlIsU0FBVTdSLElBQUFBLEtBQUFBLFlBR1osVUNySWFnbkMsR0FBZ0JuZ0MsS0FBUSxDQUNuQ2xGLElBQXFCLENBQ25CK25CLEdBQUksT0FDSmxxQixLQUFNLGlCQUVSbUMsSUFBc0IsQ0FDcEIrbkIsR0FBSSxRQUNKbHFCLEtBQU0sU0FFUm1DLElBQXVCLENBQ3JCK25CLEdBQUksU0FDSmxxQixLQUFNLFlBSUp5bkMsR0FBaUJqTixhQUFhbUgsUUFBUSxrQkFHL0IrRixJQUYrQixJQUF6QkYsR0FBYzlqQyxPQUFlOGpDLEdBQWMsR0FBR3RkLEdBQUssUUFHcEVzZCxHQUFjNUssTUFBSyxTQUFBL2hCLEdBQU0sT0FBSUEsRUFBT3FQLEtBQU91ZCxFQUFjLElBQ3JEQSxHQUNBRCxHQUFjLEdBQUd0ZCxJQ2xCdkIsU0FBU3lkLEdBQXFDNW5DLEdBQzVDLElBQVErSixFQUFjL0osRUFBZCtKLFVBRVIsT0FDRSxTQUFDLEdBQUssV0FDSixVQUFDSCxHQUFTLENBQUNHLFVBQVdBLEVBQVUsV0FDOUIsd0JBQUksNEJBQ0osdUJBQUcscVRBT0gsdUJBQUcsb0tBS0Z3MkIsT0FJVCxDQUVBcUgsR0FBb0NwbkMsVUFBWSxDQUM5Q3VKLFVBQVd0SixJQUFBQSxLQUFBQSxZQUdiLFVDN0JBLFNBQVNvbkMsR0FBcUI3bkMsR0FDNUIsSUFBUStKLEVBQWMvSixFQUFkK0osVUFFUixPQUNFLFNBQUMsR0FBSyxXQUNKLFVBQUNILEdBQVMsQ0FBQ0csVUFBV0EsRUFBVSxXQUM5Qix3QkFBSSw0QkFDSix1QkFBRyw2SEFJSCx1QkFBRyw2R0FJRncyQixPQUlULENBRUFzSCxHQUFvQnJuQyxVQUFZLENBQzlCdUosVUFBV3RKLElBQUFBLEtBQUFBLFlBR2IsVUMxQkEsU0FBU3FuQyxHQUFvQjluQyxHQUMzQixJQUFRK0osRUFBYy9KLEVBQWQrSixVQUVSLE9BQ0UsU0FBQyxHQUFLLFdBQ0osVUFBQ0gsR0FBUyxDQUFDRyxVQUFXQSxFQUFVLFdBQzlCLHdCQUFJLG9DQUNKLHVCQUFHLHNMQUtILHVCQUFHLHdLQVFYLENBRUErOUIsR0FBbUJ0bkMsVUFBWSxDQUM3QnVKLFVBQVd0SixJQUFBQSxLQUFBQSxZQUdiLFVDekJBLFNBQVNzbkMsR0FBaUIvbkMsR0FDeEIsSUFBUStKLEVBQWMvSixFQUFkK0osVUFFUixPQUNFLFNBQUMsR0FBSyxXQUNKLFVBQUNILEdBQVMsQ0FBQ0csVUFBV0EsRUFBVSxXQUM5Qix3QkFBSSw0QkFDSix1QkFBRyxtQ0FHSCx1QkFBRyw0TEFLSCx5QkFBRyxrS0FHeUJvMkIsR0FBaUIsV0FLckQsQ0FFQTRILEdBQWdCdm5DLFVBQVksQ0FDMUJ1SixVQUFXdEosSUFBQUEsS0FBQUEsWUFHYixVQzlCQSxTQUFTdW5DLEdBQW1CaG9DLEdBQzFCLElBQVErSixFQUFjL0osRUFBZCtKLFVBRVIsT0FDRSxTQUFDLEdBQUssV0FDSixVQUFDSCxHQUFTLENBQUNHLFVBQVdBLEVBQVUsV0FDOUIsd0JBQUksNEJBQ0oseUJBQUcsb0JBQ2UsMEJBQU0sNEJBRXhCLHVCQUFHLHdOQU1ILHVCQUFHLHdLQVFYLENBRUFpK0IsR0FBa0J4bkMsVUFBWSxDQUM1QnVKLFVBQVd0SixJQUFBQSxLQUFBQSxZQUdiLHd0Q0MvQkEsU0FBU3duQyxHQUF3QmpvQyxHQUMvQixPQUNFLFNBQUMsR0FBSyxXQUNKLFVBQUM0SixHQUFTLFNBQUs1SixHQUFLLGVBQ2xCLHdCQUFJLG9DQUNKLHVCQUFHLDZMQUtILHlCQUFHLG9OQUlHLDBCQUFNLGNBQWdCLFlBRTNCd2dDLFFBSVQsQ0FFQXlILEdBQXVCem5DLFVBQVksQ0FBQyxFQUVwQyw4dUVDV0EsU0FBUzBuQyxHQUFnQmxvQyxHQUN2QixJQTFCdUQsRUFBaERtb0MsRUFBYUMsRUEwQlo5MUIsRUFBYXRTLEVBQWJzUyxTQUNGKzFCLEdBQWFwOUIsRUFBQUEsRUFBQUEsVUFDZ0MsTUFBdkJrQyxFQUFBQSxFQUFBQSxVQUFTdzZCLElBQWMsR0FBNUM3c0IsRUFBTSxLQUFFd3RCLEVBQVMsS0FDcUQsTUFBbENuN0IsRUFBQUEsRUFBQUEsVUFBUyxDQUFFbzdCLGVBQWUsSUFBUSxHQUFwRUEsRUFBYSxLQUFiQSxjQUFpQkMsRUFBYSxLQUNXLE1BQWRyN0IsRUFBQUEsRUFBQUEsVUFBUyxNQUFLLEdBQTNDczdCLEVBQVUsS0FBRUMsRUFBYSxLQUMxQkMsR0FBY3g5QixFQUFBQSxFQUFBQSxjQUFZLGtCQUFNdTlCLEVBQWMsS0FBSyxHQUFFLENBQUNBLElBQzVELElBQXdELEVBaENqRFAsR0FBZ0QsTUFBakJoN0IsRUFBQUEsRUFBQUEsVUFnQ2tCLE1BaENELElBQXJDLEdBQUVpN0IsRUFBYyxLQUszQixDQUFDRCxHQUpRaDlCLEVBQUFBLEVBQUFBLGNBQVksa0JBQU1pOUIsR0FBZSxFQUFLLEdBQUUsQ0FBQ0EsS0FDeENqOUIsRUFBQUEsRUFBQUEsY0FBWSxrQkFBTWk5QixHQUFlLEVBQU0sR0FBRSxDQUFDQSxLQUN6Q2o5QixFQUFBQSxFQUFBQSxjQUFZLGtCQUFNaTlCLEdBQWUsU0FBQTVpQyxHQUFLLE9BQUtBLENBQUssR0FBQyxHQUFFLENBQUM0aUMsTUE2QlQsVUFBdERRLEVBQVUsS0FBRUMsRUFBVyxLQUFFQyxFQUFVLEtBQ3BDQyxHQUFpQjU5QixFQUFBQSxFQUFBQSxjQUFZLFdBQ2pDdTlCLEVBQWMsQ0FDWnZQLFVBQVc4TyxHQUNYaGEsUUFBUzBhLEdBRWIsR0FBRyxDQUFDRCxFQUFlQyxLQTlCckIsU0FBaUNqOUIsRUFBSzhoQixHQUEwQixJQUFoQndiLElBQVUsVUFBSCxnREFDckRsakMsRUFBQUEsRUFBQUEsWUFBVSxXQUNSLEdBQUlrakMsRUFBUyxDQUNYLElBQU05OUIsRUFBYyxTQUFBdUgsR0FDbEIsSUFBTXcyQixFQUFldDlCLFNBQVN4SSxLQUFLb0ksU0FBU2tILEVBQU1uSCxRQUM1QzQ5QixFQUFjeDlCLEVBQUlMLFFBQVFFLFNBQVNrSCxFQUFNbkgsUUFDM0MyOUIsSUFBaUJDLEdBQ25CMWIsR0FFSixFQUdBLE9BREE3aEIsU0FBU3hJLEtBQUtnUixpQkFBaUIsUUFBU2pKLEdBQ2pDLGtCQUFNUyxTQUFTeEksS0FBS2lSLG9CQUFvQixRQUFTbEosRUFBWSxDQUN0RSxDQUNGLEdBQUcsQ0FBQ1EsRUFBS3M5QixFQUFTeGIsR0FDcEIsQ0FpQkUyYixDQUF1QmQsRUFBWVMsRUFBWUYsR0FBeUIsV0FBWDl0QixHQUU3RCxJQUFNc3VCLEdBQXlCaitCLEVBQUFBLEVBQUFBLGNBQVksU0FBVXNILEdBQ25ELE1BQThCQSxFQUFNelAsT0FBNUJ5Z0MsYUFBQUEsT0FBWSxJQUFHLEtBQUUsRUFDbUMsR0FBMUJoeEIsRUFBTW1yQixnQkFBa0IsQ0FBQyxHQUFuRDJLLGNBQUFBLE9BQWEsSUFBRyxHQUFLLEVBQ3ZCbi9CLEVDckRILFNBQXlCcTZCLEdBQzlCLE9BQVFBLEVBQWEsSUFDbkIsSUFBSyw0QkFDSCxPQUFPdUUsR0FDVCxJQUFLLHFCQUNILE9BQU9GLEdBQ1QsSUFBSyxzQkFDSCxPQUFPRixHQUNULElBQUssd0JBQ0gsT0FBT0MsR0FDVCxJQUFLLG9CQUNILE9BQU9FLEdBQ1QsUUFDRSxPQUFPLEtBRWIsQ0RzQ2tCc0IsQ0FBZTVGLEdBRTdCLEdBQUlyNkIsRUFHRixPQUZBcy9CLEVBQWMsQ0FBRXZQLFVBQVcvdkIsRUFBTzZrQixRQUFTMGEsU0FDM0NyMkIsRUFBUyxDQUFFd0ksT0FBQUEsRUFBUXRZLFNBQVUsT0FJL0JnbUMsRUFBYyxDQUFFRCxjQUFBQSxJQUNoQmoyQixFQUFTLElBQUV3SSxPQUFBQSxHQUFXckksR0FDeEIsR0FBRyxDQUFDSCxFQUFVd0ksRUFBUTR0QixFQUFlQyxJQUUvQlcsR0FBY24rQixFQUFBQSxFQUFBQSxjQUFZLFNBQVUsR0FBeUIsSUFBdkIyMkIsRUFBTSxFQUFOQSxPQUFRc0YsRUFBVyxFQUFYQSxZQUNsRHNCLEVBQWMsQ0FBRXZQLFVBQVcySSxFQUFRc0YsWUFBQUEsRUFBYW5aLFFBQVMwYSxJQUN6RHIyQixFQUFTLENBQUV3SSxPQUFBQSxFQUFRdFksU0FBVSxNQUMvQixHQUFHLENBQUNrbUMsRUFBZUMsRUFBYXIyQixFQUFVd0ksS0FFMUNoVixFQUFBQSxFQUFBQSxZQUFVLFdBQ1IyMEIsYUFBYXVILFFBQVEsaUJBQWtCbG5CLEVBQ3pDLEdBQUcsQ0FBQ0EsSUFRSixJQUFNNHNCLEVBQWlCN0ssS0FBSzRLLEdBQWUsQ0FBRXRkLEdBQUlyUCxJQUVqRCxPQUNFLGlCQUFLcFAsSUFBSzI4QixFQUFZNzhCLE1BQU8sQ0FDM0JmLFFBQVMsT0FDVG1pQixjQUFlLE1BQ2ZqaUIsV0FBWSxNQUNaOFYsSUFBSyxNQUNMN1AsT0FBUSxPQUNSLFdBQ0EsU0FBQ293QixHQUFNLENBQ0wxNEIsTUFBTSxTQUNOMUIsTUFBTzhnQyxFQUNQNW9DLFFBQVMyb0MsR0FDVHZGLGVBQWdCLFNBQUFyWSxHQUFNLE9BQUlBLEVBQU81cEIsSUFBSSxFQUNyQ2dpQyxlQUFnQixTQUFBcFksR0FBTSxPQUFJQSxFQUFPTSxFQUFFLEVBQ25DcmMsU0FBVSxnQkFBR3FjLEVBQUUsRUFBRkEsR0FBRSxPQUFPbWUsRUFBVW5lLEVBQUcsS0FHcENzZSxhQUFVLEVBQVZBLEVBQVl0UCxhQUFhLFNBQUNzUCxFQUFXdFAsVUFBUyxTQUFLc1AsRUFBV3JCLGFBQWUsQ0FBQyxHQUFDLElBQUVyOUIsVUFBVzArQixFQUFXeGEsV0FFNUYsVUFBWG5ULElBQXNCLFNBQUMsR0FBVyxDQUFDMG1CLFFBQVM4SCxFQUFhaDNCLFNBQVU4MkIsSUFDeEQsU0FBWHR1QixJQUFxQixTQUFDLEdBQVUsQ0FBQ3hJLFNBQVU4MkIsSUFDaEMsV0FBWHR1QixJQUNDLFNBQUMsR0FBWSxDQUNYeXNCLFNBQVVxQixFQUNWdDJCLFNBQVU4MkIsRUFDVjVILFFBQVM4SCxFQUNUOUIsU0FBVXFCLElBSWJOLElBQ0MsVUFBQzVILEdBQU0sQ0FBQzUvQixRQUFTZ29DLEVBQWUsV0FDOUIsU0FBQyxFQUFJLENBQUM5b0MsS0FBSyxZQUFZLHNCQUtqQyxDQUVBaW9DLEdBQWUxbkMsVUFBWSxDQUN6QjhSLFNBQVU3UixJQUFBQSxLQUFBQSxZQUdaLDZDRXhISSxHQUFVLENBQUMsRUFFZixHQUFRMUIsa0JBQW9CLElBQzVCLEdBQVFDLGNBQWdCLElBRWxCLEdBQVFDLE9BQVMsU0FBYyxLQUFNLFFBRTNDLEdBQVFDLE9BQVMsSUFDakIsR0FBUUMsbUJBQXFCLElBRWhCLElBQUksS0FBUyxJQUExQixJQUtPLEdBQWUsTUFBVyxZQUFpQixpQkFBaUJxSyx5UEN6Qm5FLGtuR0FBQXRFLEdBQUEsd0JBQUFBLEVBQUEsc0JBQUFBLEdBQUEsaUJBQUFBLEdBQUEsc3NEQUFBQSxFQUFBLHlCQUFBQSxHQUFBLElBQUFBLEVBQUEsdUJBQUFBLEdBQUEsNGJBQUFBLEVBQUEseUJBQUFBLEdBQUEsSUFBQUEsRUFBQSx1QkFBQUEsR0FBQSx5aEJBQUFBLEVBQUEseUJBQUFBLEdBQUEsSUFBQUEsRUFBQSx1QkFBQUEsR0FBQSxxR0FBQUEsRUFBQSx5QkFBQUEsR0FBQSxJQUFBQSxFQUFBLHVCQUFBQSxHQUFBLDhZQUFBQSxHQUFBLGdFQUFBQSxHQUFBLDBKQUFBQSxFQUFBLDZGQUFBQSxHQUFBLG1JQUFBQSxJQUFBLGlTQUFBQSxJQUFBLDRPQUFBQSxFQUFBLGlCQUFBQSxFQUFBLEVBQUFBLElBQUEsRUFBQUEsR0FBQSxFQUFBQSxHQUFBLFNBVUEsU0FBU3FrQyxHQUFrQkMsR0FDekIsTUFBTyxLQUFQLE9BQVlBLEVBQU1DLFNBQVEsWUFBSUQsRUFBTUUsV0FBVSxZQUFJRixFQUFNRyxhQUMxRCxDQVlBLElBQU1DLElBQ0osU0FBQyxHQUFJLENBQUM5aUIsVUFBUSxFQUFDRCxLQUFLLDBEQUF5RCxTQUFDLGNBS2hGLFNBQVNnakIsR0FBZSxHQUFhLElBQVR6Z0MsRUFBSyxFQUFMQSxNQUNZLE1BQVorRCxFQUFBQSxFQUFBQSxVQUFTLElBQUcsR0FBL0IyOEIsRUFBSyxLQUFFQyxFQUFRLEtBQ2tDLE1BQVo1OEIsRUFBQUEsRUFBQUEsVUFBUyxJQUFHLEdBQWpENjhCLEVBQWMsS0FBRUMsRUFBaUIsS0FDRyxNQUFmOThCLEVBQUFBLEVBQUFBLFdBQVMsR0FBTSxHQUFwQys4QixFQUFNLEtBQUVDLEVBQVMsS0E2QnhCLE9BM0JBcmtDLEVBQUFBLEVBQUFBLFlBQVUsV0FDaUIsYUFwQzdCLE1Bc0NLLE9BdENMLEVBb0M2QixXQUF6QiwrRUFDVSxPQURWLEtBQ0Vpa0MsRUFBUSxTQUFPSyxLQUFBQSxVQUFxQmhoQyxHQUFNLDRFQURuQixFQXBDN0IsZ0xBc0NLLHlCQUhhLFdBQ1csd0JBSXpCaWhDLEVBQ0YsR0FBRyxDQUFDTixFQUFVM2dDLEtBRWR0RCxFQUFBQSxFQUFBQSxZQUFVLFdBQ1Jta0MsRUE5QkosU0FBMEI3Z0MsR0FBbUIsSUFBWjBnQyxFQUFRLFVBQUgsNkNBQUcsR0FDdkMsTUFBTyxZQUNQMWdDLEVBQU1uSixLQUFJLGVBRVZtSixFQUFNc3lCLFFBQU8sZUFFYm9PLEVBQU10bEMsSUFBSStrQyxJQUFrQmhwQyxLQUFLLE1BQUssTUFDdEMrcEMsTUFDRixDQXNCc0JDLENBQWdCbmhDLEVBQU8wZ0MsR0FDM0MsR0FBRyxDQUFDMWdDLEVBQU8wZ0MsS0FFWGhrQyxFQUFBQSxFQUFBQSxZQUFVLFdBQ0pva0MsR0FDRjFoQixZQUFXLFdBQ1QyaEIsR0FBVSxFQUNaLEdBQUcsSUFFUCxHQUFHLENBQUNELEVBQVFDLEtBVVYsU0FBQyxHQUFLLFdBQ0osVUFBQ3ZnQyxHQUFTLENBQUNDLGFBQWEsRUFBTzJCLE1BQU8sQ0FBRTZzQixTQUFVLFNBQVUsV0FDMUQsd0JBQUksc0JBQ0oseUJBQUcscUhBRW1EdVIsR0FBZSx5RUFHckUsaUJBQUsxcEMsVUFBV3lKLEdBQUFBLFdBQWtCLFdBQ2hDLHlCQUFNcWdDLEtBQ04sU0FBQ3JwQyxFQUFVLENBQ1RDLEtBQUssT0FDTHFOLE1BQU0sa0JBQ04vTixVQUFXeUosR0FBQUEsT0FDWDVJLFFBdEJWLFdBQ0UsSUFDTUYsRUFBTyxHQUFILE9BRFEsTUFDTyxhQUFLbXBDLEVBQWMsYUFEMUIsT0FFbEI5aUMsVUFBVXNqQyxVQUFVQyxVQUFVNXBDLEdBQzNCcUYsTUFBSyxrQkFBTWlrQyxHQUFVLEVBQUssR0FDL0IsSUFtQlNELElBQ0MsZ0JBQUtocUMsVUFBV3lKLEdBQUFBLFlBQW1CLFNBQUMsbUJBTWhELENBRUFrZ0MsR0FBZ0JycEMsVUFBWSxDQUMxQjRJLE1BQU8zSSxJQUFBQSxXQUFxQnFDLE9BQU9zSixZQUdyQyw0N0JDNUZ1RCxJQUVsQ3MrQixHQUFhLHMvQkFDaEMsV0FBYTFxQyxHQUFPLE1BSWpCLG1HQUppQixVQUNsQixjQUFNQSxJQUNEd0YsTUFBUSxDQUNYNEQsTUFBTyxNQUNSLENBQ0gsQ0FJQyxTQUpBLElBZUEsdUNBYkQsU0FBaUNBLEdBQy9CLE1BQU8sQ0FBRUEsTUFBQUEsRUFDWCxPQUpDLHFCQU1ELFdBQ0UsSUFBUXRJLEVBQWFpNUIsS0FBSy81QixNQUFsQmMsU0FDQXNJLEVBQVUyd0IsS0FBS3YwQixNQUFmNEQsTUFFUixPQUFJQSxHQUNLLFNBQUMsR0FBZSxDQUFDQSxNQUFPQSxJQUcxQnRJLENBQ1Qsc0ZBWEMsRUFWK0IsQ0FBUzZwQyxFQUFBQSxXQ0czQyxTQUFTQyxHQUFrQjVxQyxHQUN6QixJQUFRK0osRUFBYy9KLEVBQWQrSixVQUNSLE9BQ0UsU0FBQyxHQUFLLFdBQ0osVUFBQ0gsR0FBUyxDQUFDRyxVQUFXQSxFQUFVLFdBQzlCLHdCQUFJLG1DQUNKLHVCQUFHLDJFQUdILHVCQUFHLDBRQU1ILHVCQUNHbzJCLFNBS1gsQ0FFQXlLLEdBQWlCcHFDLFVBQVksQ0FDM0J1SixVQUFXdEosSUFBQUEsS0FBQUEsWUFHYiwrU0NoQ0Esb2pOQW1KQSxPQS9IQSxXQUNFLElBQU0rRSxHQUFRRyxFQUFBQSxFQUFBQSxLQUFZLFNBQUFILEdBQUssT0FBSUEsQ0FBSyxJQUNsQ0ksR0FBV0MsRUFBQUEsRUFBQUEsTUFFZjY1QixFQU1FbDZCLEVBTkZrNkIsWUFDQWw5QixFQUtFZ0QsRUFMRmhELFNBQ0Fxb0MsRUFJRXJsQyxFQUpGcWxDLFVBQ0E1SixFQUdFejdCLEVBSEZ5N0IsTUFDQTZKLEVBRUV0bEMsRUFGRnNsQyxnQkFDQTdpQixFQUNFemlCLEVBREZ5aUIsc0JBYUZuaUIsRUFBQUEsRUFBQUEsWUFBVSxXQTFDWixNQTJDSSxHQUFLNDVCLFNBQUFBLEVBQWFPLE9BaUJsQixPQTVESixFQXNESyxXQUFDLHlGQUVPLE9BRlAsRUFDK0JQLEVBQVlPLE9BQW5DL0MsRUFBVSxFQUFWQSxXQUFZQyxFQUFNLEVBQU5BLE9BQU0sS0FDMUI0TixFQUFPLFNBQU85SyxHQUFBQSxpQkFBd0IvQyxFQUFZQyxHQUFPLDRFQXhEL0QsbUxBMkRJOEMsR0FBQUEsR0FBVSxlQUFnQjhLLEdBQ25CLGtCQUFNOUssR0FBQUEsSUFBVyxlQUFnQjhLLEVBQVEsRUFaaEQsU0FBU0EsRUFBU0MsR0FDWkEsRUFBSUMsY0FBZ0J2TCxFQUFZTyxPQUFPOUMsUUFDekN2M0IsRUFBUyxDQUFFYyxLQUFNLHNCQUF1QndrQyxNQUFPRixHQUVuRCxDQVJFcGxDLEVBQVMsQ0FBRWMsS0FBTSxzQkFBdUJ3a0MsTUFBTyxNQWlCbkQsR0FBRyxDQUFDeEwsRUFBYTk1QixJQUVqQixJQUFNd2pDLEdBQXlCaitCLEVBQUFBLEVBQUFBLGNBQVksU0FBVXNILEdBQ25ELElBQVFxSSxFQUFtRHJJLEVBQW5EcUksT0FBUWxMLEVBQTJDNkMsRUFBM0M3QyxPQUFRNU0sRUFBbUN5UCxFQUFuQ3pQLE9BQU0sRUFBNkJ5UCxFQUEzQmdhLFFBQUFBLE9BQU8sSUFBRyxLQUFFLEVBQUswZSxvWEFBSyxDQUFLMTRCLEVBQUssSUFPaEU3TSxFQUxLNUMsRUFLSSxDQUNQMEQsS0FBTSxrQkFDTm9VLE9BQUFBLEVBQ0E0a0IsWUFBYXlMLEVBQ2J2N0IsT0FBQUEsRUFDQTVNLE9BQUFBLEVBQ0F5cEIsUUFBQUEsR0FWUyxDQUFFL2xCLEtBQU0sNEJBWXJCLEdBQUcsQ0FBQ2QsSUFFRXdsQyxHQUF1QmpnQyxFQUFBQSxFQUFBQSxjQUFZLFNBQVUzTCxHQUNqRG9HLEVBQVMsQ0FBRWMsS0FBTSxrQkFBbUJsSCxTQUFBQSxHQUN0QyxHQUFHLENBQUNvRyxJQUVFbkcsR0FBcUIwTCxFQUFBQSxFQUFBQSxjQUN6QixrQkFBTXZGLEVBQVMsQ0FBRWMsS0FBTSxpQkFBa0IsR0FDekMsQ0FBQ2QsSUFHSCxPQUNFLGlDQUNFLFNBQUM4a0MsR0FBYSxXQUNaLFVBQUNuckMsRUFBZ0JvSCxTQUFRLENBQUNDLE1BQU8sQ0FDL0JwSCxTQUFVeW9CLEVBQ1Z4b0IsbUJBQUFBLEdBQ0EsV0FDQSxTQUFDNHJDLEdBQVksQ0FBQy80QixTQUFVODJCLEtBRXhCLGlCQUFLamYsR0FBRyxlQUFjLFdBQ3BCLFNBQUN4cEIsRUFBVSxDQUNUd3BCLEdBQUcsYUFDSGxjLE1BQU0sZUFDTnJOLEtBQU0sQ0FDSjBxQyxNQUFPLE1BQ1BDLEtBQU0sT0FDTkMsT0FBUSxzQkFDUnZLLElBQVUscUJBQ1psZ0MsUUFBUyxrQkFBTTZFLEVBQVMsQ0FBRWMsS0FBTSxlQUFnQixLQUdsRCxTQUFDL0YsRUFBVSxDQUNUd3BCLEdBQUcsa0JBQ0h2cEIsS0FBSyxNQUNMRyxRQUFTdEIsSUFFVnFyQyxJQUNDLFNBQUMsR0FBUSxDQUNQdHJDLFNBQVV5b0IsRUFDVi9hLFNBQVVrK0IsRUFDVm5kLFFBQVMsa0JBQU1yb0IsRUFBUyxDQUFFYyxLQUFNLGtCQUFtQixRQUt6RCxTQUFDKzRCLEdBQWEsS0FFZCxVQUFDLzVCLEdBQTBCLFdBQ3hCbEQsSUFDQyxTQUFDdVMsR0FBcUIsQ0FBQ25GLE9BQVFwTixFQUFTb04sT0FBTyxVQUM3QyxTQUFDLEdBQVEsQ0FDUDVNLE9BQVFSLEVBQVNRLE9BQ2pCeXBCLFFBQVNqcUIsRUFBU2lxQixZQUl2Qm9lLElBQ0MsU0FBQyxHQUFnQixDQUFDOWdDLFVBQVcsa0JBQU1uRSxFQUFTLENBQUVjLEtBQU0sb0JBQXFCLGFBS2pGLFNBQUM2eUIsR0FBVSxNQUdqQixndENDL0lBLFNBQVNrUyxLQUNQLElBQU1qc0MsRUFBVzRELEtBQUttNUIsTUFDcEI5QixhQUFhbUgsUUFBUSwwQkFBNEIsTUFHbkQsTUFBTyxDQUNMbjhCLFlBQWEsS0FDYnFWLE9BQVEsS0FDUjRrQixZQUFhLEtBQ2JsOUIsU0FBVSxLQUNWbTlCLGtCQUFtQixLQUNuQkMsT0FBUSxLQUNSaUwsVUFBVyxLQUNYQyxnQkFBaUIsS0FDakI1SyxrQkFBa0IsRUFDbEJlLE1BQU83OUIsS0FBS201QixNQUFNOUIsYUFBYW1ILFFBQVEsVUFDdkMzWixxQkFBc0IsQ0FDcEIwUixjQUFlN3hCLElBQUl0SSxFQUFVLGlCQUFpQixHQUM5Q3VJLGVBQWdCRCxJQUFJdEksRUFBVSxpQkFBa0IsUUFDaERzcEIsc0JBQXVCaGhCLElBQUl0SSxFQUFVLHlCQUF5QixJQUVoRXFnQyxZQUFhLEtBRWpCLENBRU8sSUFBTXhSLEdBQWdCb2QsbXVDQ3BCN0IsSUFBTUMsSUFBa0JDLEVBQUFBLEdBQUFBLElBQWdCLENBQ3RDLzdCLE9BQVEsV0FBVyxPQUFGLFVBQUgsNkNBQUcsRUFBWSxFQUM3QjZjLFFBQVMsV0FBVyxPQUFGLFVBQUgsNkNBQUcsRUFBWSxFQUM5QnpwQixRQUFRMm9DLEVBQUFBLEdBQUFBLElBQWdCLENBQ3RCbEksYUFBYyxXQUFXLE9BQUYsVUFBSCw2Q0FBRyxFQUFZLEVBQ25DbDZCLFFBQVMsV0FBVyxPQUFGLFVBQUgsNkNBQUcsRUFBWSxFQUM5Qm0wQixPQUFRLFdBQVcsT0FBRixVQUFILDZDQUFHLENBQUMsQ0FBVyxFQUM3QjU3QixVQUFXOHBDLEdBQ1hyaEIsT0FBUXNoQixHQUNSbGpDLE9BQVFtakMsR0FDUnRsQyxPQUFRdWxDLE9Bb0JaLElBTGNDLEVBQUFBLEdBQUFBLElBQWUsQ0FDM0JsSCxRQVpGLFNBQXNCdC9CLEVBQU9tUSxHQUMzQixJQUFNczJCLEVET08sU0FBa0J6bUMsRUFBT21RLEdBR3RDLE9BRmlCQSxFQUFUalAsTUFHTixJQUFLLGFBQ0gsT0FBTytrQyxLQUVULElBQUssa0JBQ0gsT0FBTyxTQUFLam1DLEdBQUssSUFBRUMsWUFBYWtRLEVBQU9sUSxjQUV6QyxJQUFLLDJCQUNILE9BQU8sU0FBS0QsR0FBSyxJQUFFaEQsU0FBVSxPQUUvQixJQUFLLGtCQUNILE9BdUROLFNBQXlCZ0QsRUFBT21RLEdBQzlCLElBQVFuVCxFQUFhZ0QsRUFBYmhELFNBQ0YwcEMsRUFBbUJqN0IsS0FBSzBFLEVBQVEsQ0FBQyxTQUFVLFNBQVUsWUFNM0QsT0FKQXUyQixFQUFpQmxwQyxPQUFPd0QsT0FBUzBsQyxFQUFpQmxwQyxPQUFPd0QsT0FBT2hDLEtBQUksU0FBQWdFLEdBQUssT0FDdkV5SSxLQUFLekksRUFBTyxDQUFDLFFBQVMsT0FBUSxTQUFVLGNBQWMsSUFHakQsU0FDRmhELEdBQUssSUFDUnNWLE9BQVFuRixFQUFPbUYsT0FDZjRrQixZQUFhL3BCLEVBQU8rcEIsWUFDcEJsOUIsU0FBVSxTQUFLQSxHQUFhMHBDLEdBQzVCdk0sa0JBQW1CaHFCLEVBQU8zUyxRQUU5QixDQXRFYW1wQyxDQUFlM21DLEVBQU9tUSxHQUUvQixJQUFLLHFCQUNILE9BQU8sU0FBS25RLEdBQUssSUFBRTA2QixrQkFBa0IsSUFFdkMsSUFBSyxzQkFDSCxPQUFPLFNBQUsxNkIsR0FBSyxJQUFFMDZCLGtCQUFrQixJQUV2QyxJQUFLLHNCQUNILE9BQU8sU0FBSzE2QixHQUFLLElBQUVxNkIsWUFBYWxxQixFQUFPdTFCLFFBRXpDLElBQUssb0JBQ0gsT0FBTyxTQUFLMWxDLEdBQUssSUFBRW82QixRQUFRLEVBQU1pTCxXQUFXLElBRTlDLElBQUssc0JBQ0gsT0FBTyxTQUNGcmxDLEdBQUssSUFDUm82QixRQUFRLEVBQ1J3TSxTQUFTLEVBQ1Q1cEMsU0FBVSxTQUNMZ0QsRUFBTWhELFVBQVEsSUFDakJRLE9BQVEyUyxFQUFPM1MsUUFBVXdDLEVBQU1oRCxTQUFTUSxTQUUxQzI4QixrQkFBbUJocUIsRUFBTzNTLFFBQVV3QyxFQUFNaEQsU0FBU1EsU0FHdkQsSUFBSyxzQkFDSCxPQUFPLFNBQ0Z3QyxHQUFLLElBQ1JvNkIsUUFBUSxFQUNSaUwsV0FBVyxJQUdmLElBQUssbUJBQ0gsT0FBTyxTQUFLcmxDLEdBQUssSUFBRXFsQyxVQUFXLE9BRWhDLElBQUssZ0JBQ0gsT0FBTyxTQUFLcmxDLEdBQUssSUFBRXNsQyxpQkFBaUIsSUFFdEMsSUFBSyxpQkFDSCxPQUFPLFNBQUt0bEMsR0FBSyxJQUFFc2xDLGlCQUFpQixJQUV0QyxJQUFLLGtCQUVILE9BREFyUSxhQUFhdUgsUUFBUSx3QkFBeUI1K0IsS0FBS0MsVUFBVXNTLEVBQU9uVyxXQUM3RCxTQUFLZ0csR0FBSyxJQUFFeWlCLHFCQUFzQnRTLEVBQU9uVyxXQUVsRCxJQUFLLGNBQ0gsT0F5Qk4sU0FBcUJnRyxFQUFPbVEsR0FDMUIsSUFBTTAyQixFQUFTLENBQUMsUUFBUyxPQUFRLFVBQzNCejZCLEVBQVF5NkIsRUFBTzF4QixRQUFRblYsRUFBTXk3QixPQUM3QkEsRUFBUW9MLEVBQU9uc0IsSUFBSXRPLEVBQVEsR0FBS3k2QixFQUFPMW9DLFFBRzdDLE9BRkE4MkIsYUFBYXVILFFBQVEsUUFBUyxJQUFGLE9BQU1mLEVBQUssTUFDdkN0MUIsU0FBU3hJLEtBQUttcEMsUUFBUXJMLE1BQVFBLEVBQ3ZCLFNBQUt6N0IsR0FBSyxJQUFFeTdCLE1BQUFBLEdBQ3JCLENBaENhc0wsQ0FBVy9tQyxHQUVwQixRQUNFLE9BQU9BLEVBRWIsQ0N6RW1CZ25DLENBQVdobkMsRUFBT21RLEdBQ25DLE9BQU8sU0FDRnMyQixHQUFRLElBQ1h6cEMsU0FBVXlwQyxFQUFTenBDLFVBQVksU0FDMUJ5cEMsRUFBU3pwQyxVQUNUa3BDLEdBQWdCTyxFQUFTenBDLFNBQVVtVCxLQUc1QyxFQUlFODJCLGVBQWdCcGUsS0N6QmxCMWlCLFNBQVN4SSxLQUFLbXBDLFFBQVFyTCxNQUFRNVMsR0FBQUEsTUFFakI1aUIsRUFBQUEsV0FBb0JFLFNBQVNDLGVBQWUsYUFFcEQ0ZCxRQUNILFNBQUMsYUFBZ0IsV0FDZixTQUFDLEtBQVEsQ0FBQ2tqQixNQUFPQSxHQUFNLFVBQ3JCLFNBQUMsR0FBRyxnRkNkTkMsUUFBMEIsR0FBNEIsS0FFMURBLEVBQXdCOW5DLEtBQUssQ0FBQytuQyxFQUFPemlCLEdBQUksNDZFQUErNkUsR0FBRyxDQUFDLFFBQVUsRUFBRSxRQUFVLENBQUMsMkJBQTJCLE1BQVEsR0FBRyxTQUFXLHlvQ0FBeW9DLGVBQWlCLENBQUMsNjZFQUErNkUsV0FBYSxNQUUzbk0sNkVDSkl3aUIsUUFBMEIsR0FBNEIsS0FFMURBLEVBQXdCOW5DLEtBQUssQ0FBQytuQyxFQUFPemlCLEdBQUksaU5BQWtOLEdBQUcsQ0FBQyxRQUFVLEVBQUUsUUFBVSxDQUFDLDZCQUE2QixNQUFRLEdBQUcsU0FBVyxxRUFBcUUsZUFBaUIsQ0FBQyxrTkFBa04sV0FBYSxNQUUvbkIsNkVDSkl3aUIsUUFBMEIsR0FBNEIsS0FFMURBLEVBQXdCOW5DLEtBQUssQ0FBQytuQyxFQUFPemlCLEdBQUksaWZBQWtmLEdBQUcsQ0FBQyxRQUFVLEVBQUUsUUFBVSxDQUFDLG1EQUFtRCxNQUFRLEdBQUcsU0FBVywrTkFBK04sZUFBaUIsQ0FBQywyY0FBMmMsV0FBYSxNQUV4MEN3aUIsRUFBd0JFLE9BQVMsQ0FDaEMsT0FBVSx1QkFDVixVQUFhLHdCQUVkLDZFQ1JJRixRQUEwQixHQUE0QixLQUUxREEsRUFBd0I5bkMsS0FBSyxDQUFDK25DLEVBQU96aUIsR0FBSSwreUJBQWd6QixHQUFHLENBQUMsUUFBVSxFQUFFLFFBQVUsQ0FBQyxpREFBaUQsTUFBUSxHQUFHLFNBQVcsaVdBQWlXLGVBQWlCLENBQUMsZ3FCQUFncUIsV0FBYSxNQUUzOUR3aUIsRUFBd0JFLE9BQVMsQ0FDaEMsS0FBUSx1QkFDUixLQUFRLHdCQUVULDZFQ1JJRixRQUEwQixHQUE0QixLQUUxREEsRUFBd0I5bkMsS0FBSyxDQUFDK25DLEVBQU96aUIsR0FBSSxzWEFBdVgsR0FBRyxDQUFDLFFBQVUsRUFBRSxRQUFVLENBQUMsZ0RBQWdELE1BQVEsR0FBRyxTQUFXLDRKQUE0SixlQUFpQixDQUFDLCtUQUErVCxXQUFhLE1BRTMvQndpQixFQUF3QkUsT0FBUyxDQUNoQyxPQUFVLHVCQUNWLE9BQVUsd0JBRVgsNkVDUklGLFFBQTBCLEdBQTRCLEtBRTFEQSxFQUF3QjluQyxLQUFLLENBQUMrbkMsRUFBT3ppQixHQUFJLHl6QkFBMHpCLEdBQUcsQ0FBQyxRQUFVLEVBQUUsUUFBVSxDQUFDLG1EQUFtRCxNQUFRLEdBQUcsU0FBVyxpWUFBaVksZUFBaUIsQ0FBQyxpdkJBQWl2QixXQUFhLE1BRXhsRXdpQixFQUF3QkUsT0FBUyxDQUNoQyxVQUFhLHVCQUNiLEtBQVEsdUJBQ1IsTUFBUyx3QkFFViw2RUNUSUYsUUFBMEIsR0FBNEIsS0FFMURBLEVBQXdCOW5DLEtBQUssQ0FBQytuQyxFQUFPemlCLEdBQUksbXBCQUFvcEIsR0FBRyxDQUFDLFFBQVUsRUFBRSxRQUFVLENBQUMsMkNBQTJDLE1BQVEsR0FBRyxTQUFXLHVUQUF1VCxlQUFpQixDQUFDLHltQkFBeW1CLFdBQWEsTUFFeHREd2lCLEVBQXdCRSxPQUFTLENBQ2hDLFFBQVcsdUJBQ1gsTUFBUyx3QkFFViw2RUNSSUYsUUFBMEIsR0FBNEIsS0FFMURBLEVBQXdCOW5DLEtBQUssQ0FBQytuQyxFQUFPemlCLEdBQUksNkNBQThDLEdBQUcsQ0FBQyxRQUFVLEVBQUUsUUFBVSxDQUFDLDBDQUEwQyxNQUFRLEdBQUcsU0FBVyxzQkFBc0IsZUFBaUIsQ0FBQyw4QkFBOEIsV0FBYSxNQUVyUXdpQixFQUF3QkUsT0FBUyxDQUNoQyxLQUFRLHdCQUVULDZFQ1BJRixRQUEwQixHQUE0QixLQUUxREEsRUFBd0I5bkMsS0FBSyxDQUFDK25DLEVBQU96aUIsR0FBSSw2U0FBOFMsR0FBRyxDQUFDLFFBQVUsRUFBRSxRQUFVLENBQUMsNkNBQTZDLE1BQVEsR0FBRyxTQUFXLG1JQUFtSSxlQUFpQixDQUFDLGlQQUFpUCxXQUFhLE1BRXgwQndpQixFQUF3QkUsT0FBUyxDQUNoQyxRQUFXLHVCQUNYLEtBQVEsdUJBQ1IsS0FBUSx3QkFFVCwyRUNUSUYsUUFBMEIsR0FBNEIsS0FFMURBLEVBQXdCOW5DLEtBQUssQ0FBQytuQyxFQUFPemlCLEdBQUksd0tBQXlLLEdBQUcsQ0FBQyxRQUFVLEVBQUUsUUFBVSxDQUFDLHlDQUF5QyxNQUFRLEdBQUcsU0FBVyxpRkFBaUYsZUFBaUIsQ0FBQyx3SkFBd0osV0FBYSxNQUVwakJ3aUIsRUFBd0JFLE9BQVMsQ0FDaEMsSUFBTyx3QkFFUiw2RUNQSUYsUUFBMEIsR0FBNEIsS0FFMURBLEVBQXdCOW5DLEtBQUssQ0FBQytuQyxFQUFPemlCLEdBQUksbXpCQUFvekIsR0FBRyxDQUFDLFFBQVUsRUFBRSxRQUFVLENBQUMsdURBQXVELE1BQVEsR0FBRyxTQUFXLHdYQUF3WCxlQUFpQixDQUFDLDJ2QkFBMnZCLFdBQWEsTUFFdmxFd2lCLEVBQXdCRSxPQUFTLENBQ2hDLFdBQWMsdUJBQ2QsT0FBVSx1QkFDVixZQUFlLHdCQUVoQiw2RUNUSUYsUUFBMEIsR0FBNEIsS0FFMURBLEVBQXdCOW5DLEtBQUssQ0FBQytuQyxFQUFPemlCLEdBQUksNnVCQUE4dUIsR0FBRyxDQUFDLFFBQVUsRUFBRSxRQUFVLENBQUMsNkRBQTZELE1BQVEsR0FBRyxTQUFXLGlVQUFpVSxlQUFpQixDQUFDLHlxQkFBeXFCLFdBQWEsTUFFOTREd2lCLEVBQXdCRSxPQUFTLENBQ2hDLGVBQWtCLHVCQUNsQixVQUFhLHVCQUNiLFNBQVksdUJBQ1osY0FBaUIsd0JBRWxCLDZFQ1ZJRixRQUEwQixHQUE0QixLQUUxREEsRUFBd0I5bkMsS0FBSyxDQUFDK25DLEVBQU96aUIsR0FBSSw0bERBQWltRCxHQUFHLENBQUMsUUFBVSxFQUFFLFFBQVUsQ0FBQyxzRUFBc0UsTUFBUSxHQUFHLFNBQVcsd3JCQUF3ckIsZUFBaUIsQ0FBQyw4L0NBQWtnRCxXQUFhLE1BRTE5SHdpQixFQUF3QkUsT0FBUyxDQUNoQyxjQUFpQix1QkFDakIsb0JBQXVCLHVCQUN2Qix5QkFBNEIsdUJBQzVCLHNCQUF5Qix1QkFDekIseUJBQTRCLHVCQUM1QixhQUFnQix1QkFDaEIsY0FBaUIsdUJBQ2pCLHNCQUF5Qix1QkFDekIsUUFBVyx3QkFFWiw2RUNmSUYsUUFBMEIsR0FBNEIsS0FFMURBLEVBQXdCOW5DLEtBQUssQ0FBQytuQyxFQUFPemlCLEdBQUksaW1DQUFrbUMsR0FBRyxDQUFDLFFBQVUsRUFBRSxRQUFVLENBQUMsd0RBQXdELE1BQVEsR0FBRyxTQUFXLGdkQUFnZCxlQUFpQixDQUFDLG02QkFBbTZCLFdBQWEsTUFFdG9Gd2lCLEVBQXdCRSxPQUFTLENBQ2hDLEtBQVEsdUJBQ1IsUUFBVyx1QkFDWCxNQUFTLHVCQUNULE9BQVUsdUJBQ1YsV0FBYyx1QkFDZCxhQUFnQix1QkFDaEIsb0JBQXVCLHdCQUV4Qiw2RUNiSUYsUUFBMEIsR0FBNEIsS0FFMURBLEVBQXdCOW5DLEtBQUssQ0FBQytuQyxFQUFPemlCLEdBQUksdTNGQUEwM0YsR0FBRyxDQUFDLFFBQVUsRUFBRSxRQUFVLENBQUMscURBQXFELE1BQVEsR0FBRyxTQUFXLGdxQ0FBZ3FDLGVBQWlCLENBQUMscytFQUF3K0UsV0FBYSxNQUVock53aUIsRUFBd0JFLE9BQVMsQ0FDaEMsS0FBUSx1QkFDUixRQUFXLHVCQUNYLFdBQWMsdUJBQ2QsVUFBYSx1QkFDYixXQUFjLHVCQUNkLFFBQVcsdUJBQ1gsT0FBVSx1QkFDVixNQUFTLHVCQUNULE9BQVUsdUJBQ1YsS0FBUSx1QkFDUixPQUFVLHVCQUNWLGNBQWlCLHVCQUNqQixlQUFrQix1QkFDbEIsT0FBVSx1QkFDVixXQUFjLHVCQUNkLE1BQVMsdUJBQ1QsVUFBYSx1QkFDYixnQkFBbUIsdUJBQ25CLGNBQWlCLHdCQUVsQiw2RUN6QklGLFFBQTBCLEdBQTRCLEtBRTFEQSxFQUF3QjluQyxLQUFLLENBQUMrbkMsRUFBT3ppQixHQUFJLDRmQUE2ZixHQUFHLENBQUMsUUFBVSxFQUFFLFFBQVUsQ0FBQywyREFBMkQsTUFBUSxHQUFHLFNBQVcsNkxBQTZMLGVBQWlCLENBQUMsb2JBQW9iLFdBQWEsTUFFbHlDd2lCLEVBQXdCRSxPQUFTLENBQ2hDLFVBQWEsdUJBQ2IsVUFBYSx1QkFDYixRQUFXLHVCQUNYLE9BQVUsd0JBRVgsNkVDVklGLFFBQTBCLEdBQTRCLEtBRTFEQSxFQUF3QjluQyxLQUFLLENBQUMrbkMsRUFBT3ppQixHQUFJLDBwQkFBMnBCLEdBQUcsQ0FBQyxRQUFVLEVBQUUsUUFBVSxDQUFDLHdFQUF3RSxNQUFRLEdBQUcsU0FBVyx5UEFBeVAsZUFBaUIsQ0FBQyx1a0JBQXVrQixXQUFhLE1BRTVwRHdpQixFQUF3QkUsT0FBUyxDQUNoQyxJQUFPLHVCQUNQLFdBQWMsdUJBQ2QsVUFBYSx1QkFDYixXQUFjLHVCQUNkLGNBQWlCLHVCQUNqQixJQUFPLHlCQUVSLHlFQ1pJRixRQUEwQixHQUE0QixLQUUxREEsRUFBd0I5bkMsS0FBSyxDQUFDK25DLEVBQU96aUIsR0FBSSxzdkdBQTJ2RyxHQUFHLENBQUMsUUFBVSxFQUFFLFFBQVUsQ0FBQyxtREFBbUQsTUFBUSxHQUFHLFNBQVcsb3FDQUFvcUMsZUFBaUIsQ0FBQyxvd0ZBQXd3RixXQUFhLE1BRW4xT3dpQixFQUF3QkUsT0FBUyxDQUNoQyxJQUFPLHVCQUNQLFdBQWMsdUJBQ2QsYUFBZ0IsdUJBQ2hCLFFBQVcsdUJBQ1gsTUFBUyx1QkFDVCxLQUFRLHVCQUNSLG9CQUFxQix1QkFDckIsZ0JBQW1CLHVCQUNuQixRQUFXLHVCQUNYLGlCQUFvQix1QkFDcEIsT0FBVSx1QkFDVixNQUFTLHdCQUVWLDZFQ2xCSUYsUUFBMEIsR0FBNEIsS0FFMURBLEVBQXdCOW5DLEtBQUssQ0FBQytuQyxFQUFPemlCLEdBQUksMmdFQUE4Z0UsR0FBRyxDQUFDLFFBQVUsRUFBRSxRQUFVLENBQUMsNkRBQTZELE1BQVEsR0FBRyxTQUFXLHMwQkFBczBCLGVBQWlCLENBQUMsdXZEQUF5dkQsV0FBYSxNQUVud0p3aUIsRUFBd0JFLE9BQVMsQ0FDaEMsY0FBaUIsdUJBQ2pCLE9BQVUsdUJBQ1YsTUFBUyx1QkFDVCxLQUFRLHVCQUNSLE9BQVUsd0JBRVgsNkVDWElGLFFBQTBCLEdBQTRCLEtBRTFEQSxFQUF3QjluQyxLQUFLLENBQUMrbkMsRUFBT3ppQixHQUFJLHFxQkFBd3FCLEdBQUcsQ0FBQyxRQUFVLEVBQUUsUUFBVSxDQUFDLG9EQUFvRCxNQUFRLEdBQUcsU0FBVywyUEFBMlAsZUFBaUIsQ0FBQywwbEJBQTRsQixXQUFhLE1BRTVxRHdpQixFQUF3QkUsT0FBUyxDQUNoQyxNQUFTLHVCQUNULFFBQVcsdUJBQ1gsYUFBZ0IsdUJBQ2hCLHNCQUF5Qix1QkFDekIsa0JBQXFCLHdCQUV0Qiw2RUNYSUYsUUFBMEIsR0FBNEIsS0FFMURBLEVBQXdCOW5DLEtBQUssQ0FBQytuQyxFQUFPemlCLEdBQUksbWpFQUF3a0UsR0FBRyxDQUFDLFFBQVUsRUFBRSxRQUFVLENBQUMsNERBQTRELE1BQVEsR0FBRyxTQUFXLHNwQkFBc3BCLGVBQWlCLENBQUMsazJEQUFzM0QsV0FBYSxNQUV6d0p3aUIsRUFBd0JFLE9BQVMsQ0FDaEMsWUFBZSx1QkFDZixlQUFrQix1QkFDbEIsY0FBaUIsdUJBQ2pCLFVBQWEsdUJBQ2IsV0FBYyx1QkFDZCxZQUFlLHdCQUVoQiw2RUNaSUYsUUFBMEIsR0FBNEIsS0FFMURBLEVBQXdCOW5DLEtBQUssQ0FBQytuQyxFQUFPemlCLEdBQUksc2dFQUF1Z0UsR0FBRyxDQUFDLFFBQVUsRUFBRSxRQUFVLENBQUMscURBQXFELE1BQVEsR0FBRyxTQUFXLHE1QkFBcTVCLGVBQWlCLENBQUMsaXdEQUFpd0QsV0FBYSxNQUUzMEp3aUIsRUFBd0JFLE9BQVMsQ0FDaEMsS0FBUSx1QkFDUixRQUFXLHVCQUNYLE1BQVMsdUJBQ1QsUUFBVyx1QkFDWCxPQUFVLHVCQUNWLE9BQVUsdUJBQ1YsYUFBZ0IsdUJBQ2hCLGNBQWlCLHVCQUNqQixlQUFrQix1QkFDbEIsUUFBVyx1QkFDWCxNQUFTLHVCQUNULGVBQWtCLHdCQUVuQiw2RUNsQklGLFFBQTBCLEdBQTRCLEtBRTFEQSxFQUF3QjluQyxLQUFLLENBQUMrbkMsRUFBT3ppQixHQUFJLHVkQUF3ZCxHQUFHLENBQUMsUUFBVSxFQUFFLFFBQVUsQ0FBQyx1REFBdUQsTUFBUSxHQUFHLFNBQVcseUxBQXlMLGVBQWlCLENBQUMsaWFBQWlhLFdBQWEsTUFFbHVDd2lCLEVBQXdCRSxPQUFTLENBQ2hDLGdCQUFtQix1QkFDbkIsY0FBaUIsdUJBQ2pCLGVBQWtCLHVCQUNsQixrQkFBcUIsdUJBQ3JCLE1BQVMsd0JBRVYsNkVDWElGLFFBQTBCLEdBQTRCLEtBRTFEQSxFQUF3QjluQyxLQUFLLENBQUMrbkMsRUFBT3ppQixHQUFJLDJxQ0FBNHFDLEdBQUcsQ0FBQyxRQUFVLEVBQUUsUUFBVSxDQUFDLDhDQUE4QyxNQUFRLEdBQUcsU0FBVyx1ZUFBdWUsZUFBaUIsQ0FBQywraENBQStoQyxXQUFhLE1BRXoxRndpQixFQUF3QkUsT0FBUyxDQUNoQyxlQUFrQix1QkFDbEIsY0FBaUIsdUJBQ2pCLE9BQVUsdUJBQ1YsS0FBUSx1QkFDUixXQUFjLHdCQUVmLDZFQ1hJRixRQUEwQixHQUE0QixLQUUxREEsRUFBd0I5bkMsS0FBSyxDQUFDK25DLEVBQU96aUIsR0FBSSxxUUFBc1EsR0FBRyxDQUFDLFFBQVUsRUFBRSxRQUFVLENBQUMsaURBQWlELE1BQVEsR0FBRyxTQUFXLHlJQUF5SSxlQUFpQixDQUFDLHNPQUFzTyxXQUFhLE1BRS94QndpQixFQUF3QkUsT0FBUyxDQUNoQyxLQUFRLHdCQUVULDZFQ1BJRixRQUEwQixHQUE0QixLQUUxREEsRUFBd0I5bkMsS0FBSyxDQUFDK25DLEVBQU96aUIsR0FBSSx5b0NBQTBvQyxHQUFHLENBQUMsUUFBVSxFQUFFLFFBQVUsQ0FBQyxvREFBb0QsTUFBUSxHQUFHLFNBQVcsMGdCQUEwZ0IsZUFBaUIsQ0FBQyx1aENBQXVoQyxXQUFhLE1BRXgxRndpQixFQUF3QkUsT0FBUyxDQUNoQyxlQUFrQix1QkFDbEIsYUFBZ0IsdUJBQ2hCLGNBQWlCLHVCQUNqQixZQUFlLHVCQUNmLGFBQWdCLHVCQUNoQixZQUFlLHVCQUNmLGFBQWdCLHVCQUNoQixNQUFTLHdCQUVWLDZFQ2RJRixRQUEwQixHQUE0QixLQUUxREEsRUFBd0I5bkMsS0FBSyxDQUFDK25DLEVBQU96aUIsR0FBSSxvbURBQXFtRCxHQUFHLENBQUMsUUFBVSxFQUFFLFFBQVUsQ0FBQyxnREFBZ0QsTUFBUSxHQUFHLFNBQVcsMHNCQUEwc0IsZUFBaUIsQ0FBQyxrOENBQWs4QyxXQUFhLE1BRTE1SHdpQixFQUF3QkUsT0FBUyxDQUNoQyxPQUFVLHVCQUNWLFFBQVcsdUJBQ1gsWUFBZSx1QkFDZixZQUFlLHVCQUNmLGtCQUFtQix1QkFDbkIsY0FBaUIsdUJBQ2pCLFdBQWMsdUJBQ2QsZ0JBQW1CLHdCQUVwQiw0RUNkSUYsUUFBMEIsR0FBNEIsS0FFMURBLEVBQXdCOW5DLEtBQUssQ0FBQytuQyxFQUFPemlCLEdBQUksOGlCQUEraUIsR0FBRyxDQUFDLFFBQVUsRUFBRSxRQUFVLENBQUMscUNBQXFDLE1BQVEsR0FBRyxTQUFXLDhRQUE4USxlQUFpQixDQUFDLGlnQkFBaWdCLFdBQWEsTUFFNTlDd2lCLEVBQXdCRSxPQUFTLENBQ2hDLFFBQVcsdUJBQ1gsV0FBYyx3QkFFZiw2QkNYQSxJQUFJcm9DLEVBQU0sQ0FDVCxPQUFRLE1BQ1IsVUFBVyxNQUNYLE9BQVEsTUFDUixVQUFXLE1BQ1gsYUFBYyxNQUNkLFVBQVcsTUFDWCxhQUFjLE1BQ2QsVUFBVyxNQUNYLGFBQWMsTUFDZCxVQUFXLE1BQ1gsYUFBYyxNQUNkLFVBQVcsTUFDWCxhQUFjLE1BQ2QsVUFBVyxNQUNYLGFBQWMsTUFDZCxVQUFXLE1BQ1gsT0FBUSxNQUNSLFVBQVcsTUFDWCxPQUFRLEtBQ1IsVUFBVyxLQUNYLE9BQVEsTUFDUixVQUFXLE1BQ1gsT0FBUSxNQUNSLFVBQVcsTUFDWCxPQUFRLEtBQ1IsVUFBVyxNQUNYLGFBQWMsTUFDZCxVQUFXLEtBQ1gsT0FBUSxNQUNSLFVBQVcsTUFDWCxPQUFRLEtBQ1IsVUFBVyxLQUNYLE9BQVEsTUFDUixVQUFXLE1BQ1gsT0FBUSxLQUNSLFVBQVcsS0FDWCxPQUFRLEtBQ1IsVUFBVyxLQUNYLE9BQVEsTUFDUixVQUFXLE1BQ1gsT0FBUSxNQUNSLFVBQVcsTUFDWCxPQUFRLE1BQ1IsVUFBVyxNQUNYLE9BQVEsTUFDUixVQUFXLE1BQ1gsYUFBYyxNQUNkLFVBQVcsTUFDWCxhQUFjLE1BQ2QsVUFBVyxNQUNYLE9BQVEsS0FDUixVQUFXLEtBQ1gsT0FBUSxNQUNSLFVBQVcsTUFDWCxVQUFXLE1BQ1gsYUFBYyxNQUNkLFVBQVcsTUFDWCxhQUFjLE1BQ2QsVUFBVyxNQUNYLGFBQWMsTUFDZCxVQUFXLE1BQ1gsYUFBYyxNQUNkLFVBQVcsTUFDWCxhQUFjLE1BQ2QsVUFBVyxNQUNYLGFBQWMsTUFDZCxVQUFXLE1BQ1gsYUFBYyxNQUNkLFVBQVcsTUFDWCxhQUFjLE1BQ2QsT0FBUSxNQUNSLFVBQVcsTUFDWCxPQUFRLE1BQ1IsVUFBVyxNQUNYLGFBQWMsTUFDZCxVQUFXLE1BQ1gsYUFBYyxNQUNkLFVBQVcsTUFDWCxhQUFjLE1BQ2QsVUFBVyxNQUNYLE9BQVEsS0FDUixVQUFXLEtBQ1gsT0FBUSxNQUNSLFVBQVcsTUFDWCxPQUFRLE1BQ1IsVUFBVyxNQUNYLE9BQVEsTUFDUixVQUFXLE1BQ1gsUUFBUyxNQUNULFdBQVksTUFDWixPQUFRLE1BQ1IsVUFBVyxNQUNYLE9BQVEsTUFDUixVQUFXLE1BQ1gsYUFBYyxNQUNkLFVBQVcsTUFDWCxhQUFjLE1BQ2QsVUFBVyxNQUNYLE9BQVEsS0FDUixVQUFXLEtBQ1gsT0FBUSxNQUNSLFVBQVcsTUFDWCxPQUFRLEtBQ1IsVUFBVyxLQUNYLE9BQVEsTUFDUixVQUFXLE1BQ1gsYUFBYyxNQUNkLGdCQUFpQixNQUNqQixhQUFjLE1BQ2QsZ0JBQWlCLE1BQ2pCLE9BQVEsTUFDUixVQUFXLE1BQ1gsT0FBUSxNQUNSLFVBQVcsTUFDWCxPQUFRLE1BQ1IsVUFBVyxNQUNYLE9BQVEsTUFDUixVQUFXLE1BQ1gsT0FBUSxNQUNSLFVBQVcsTUFDWCxVQUFXLE1BQ1gsYUFBYyxNQUNkLE9BQVEsTUFDUixVQUFXLE1BQ1gsT0FBUSxNQUNSLFVBQVcsTUFDWCxPQUFRLE1BQ1IsVUFBVyxNQUNYLGFBQWMsTUFDZCxVQUFXLE1BQ1gsT0FBUSxNQUNSLFVBQVcsTUFDWCxPQUFRLE1BQ1IsVUFBVyxNQUNYLE9BQVEsTUFDUixVQUFXLE1BQ1gsT0FBUSxNQUNSLFVBQVcsTUFDWCxPQUFRLE1BQ1IsVUFBVyxNQUNYLE9BQVEsTUFDUixVQUFXLE1BQ1gsT0FBUSxNQUNSLFVBQVcsTUFDWCxPQUFRLEtBQ1IsVUFBVyxLQUNYLE9BQVEsTUFDUixVQUFXLE1BQ1gsT0FBUSxNQUNSLFVBQVcsTUFDWCxPQUFRLE1BQ1IsVUFBVyxNQUNYLE9BQVEsTUFDUixVQUFXLE1BQ1gsT0FBUSxNQUNSLFVBQVcsTUFDWCxPQUFRLE1BQ1IsVUFBVyxNQUNYLE9BQVEsTUFDUixVQUFXLE1BQ1gsT0FBUSxNQUNSLFVBQVcsTUFDWCxPQUFRLE1BQ1IsVUFBVyxNQUNYLE9BQVEsS0FDUixVQUFXLEtBQ1gsT0FBUSxNQUNSLFVBQVcsTUFDWCxPQUFRLEtBQ1IsVUFBVyxNQUNYLGFBQWMsTUFDZCxVQUFXLEtBQ1gsT0FBUSxNQUNSLFVBQVcsTUFDWCxPQUFRLE1BQ1IsVUFBVyxNQUNYLE9BQVEsTUFDUixVQUFXLE1BQ1gsT0FBUSxNQUNSLFVBQVcsTUFDWCxPQUFRLE1BQ1IsVUFBVyxNQUNYLGFBQWMsTUFDZCxVQUFXLE1BQ1gsT0FBUSxNQUNSLFVBQVcsTUFDWCxXQUFZLE1BQ1osY0FBZSxNQUNmLFVBQVcsTUFDWCxhQUFjLE1BQ2QsT0FBUSxNQUNSLFVBQVcsTUFDWCxPQUFRLE1BQ1IsVUFBVyxNQUNYLGFBQWMsTUFDZCxVQUFXLE1BQ1gsT0FBUSxNQUNSLFVBQVcsTUFDWCxPQUFRLE1BQ1IsVUFBVyxNQUNYLE9BQVEsTUFDUixVQUFXLE1BQ1gsT0FBUSxNQUNSLFVBQVcsTUFDWCxPQUFRLE1BQ1IsVUFBVyxNQUNYLE9BQVEsTUFDUixVQUFXLE1BQ1gsT0FBUSxNQUNSLFVBQVcsTUFDWCxPQUFRLE1BQ1IsVUFBVyxNQUNYLE9BQVEsTUFDUixZQUFhLE1BQ2IsZUFBZ0IsTUFDaEIsVUFBVyxNQUNYLE9BQVEsTUFDUixVQUFXLE1BQ1gsT0FBUSxNQUNSLFVBQVcsTUFDWCxPQUFRLE1BQ1IsVUFBVyxNQUNYLE9BQVEsTUFDUixVQUFXLE1BQ1gsT0FBUSxNQUNSLFVBQVcsTUFDWCxRQUFTLE1BQ1QsV0FBWSxNQUNaLE9BQVEsTUFDUixVQUFXLE1BQ1gsT0FBUSxLQUNSLFVBQVcsS0FDWCxPQUFRLE1BQ1IsVUFBVyxNQUNYLFVBQVcsTUFDWCxhQUFjLE1BQ2QsUUFBUyxNQUNULFdBQVksTUFDWixPQUFRLE1BQ1IsVUFBVyxNQUNYLFFBQVMsTUFDVCxXQUFZLE1BQ1osUUFBUyxNQUNULGFBQWMsTUFDZCxnQkFBaUIsTUFDakIsV0FBWSxNQUNaLFVBQVcsS0FDWCxhQUFjLEtBQ2QsT0FBUSxNQUNSLFVBQVcsTUFDWCxPQUFRLE1BQ1IsVUFBVyxNQUNYLE9BQVEsS0FDUixZQUFhLE1BQ2IsZUFBZ0IsTUFDaEIsVUFBVyxLQUNYLE9BQVEsTUFDUixVQUFXLE1BQ1gsYUFBYyxNQUNkLGdCQUFpQixNQUNqQixPQUFRLE1BQ1IsVUFBVyxNQUNYLFVBQVcsTUFDWCxhQUFjLE1BQ2QsVUFBVyxNQUNYLGFBQWMsTUFDZCxVQUFXLE1BQ1gsYUFBYyxNQUNkLFVBQVcsTUFDWCxhQUFjLE9BSWYsU0FBU3NvQyxFQUFlQyxHQUN2QixJQUFJNWlCLEVBQUs2aUIsRUFBc0JELEdBQy9CLE9BQU9FLEVBQW9COWlCLEVBQzVCLENBQ0EsU0FBUzZpQixFQUFzQkQsR0FDOUIsSUFBSUUsRUFBb0JDLEVBQUUxb0MsRUFBS3VvQyxHQUFNLENBQ3BDLElBQUkzaEMsRUFBSSxJQUFJdEksTUFBTSx1QkFBeUJpcUMsRUFBTSxLQUVqRCxNQURBM2hDLEVBQUV4RyxLQUFPLG1CQUNId0csQ0FDUCxDQUNBLE9BQU81RyxFQUFJdW9DLEVBQ1osQ0FDQUQsRUFBZXhqQyxLQUFPLFdBQ3JCLE9BQU94RSxPQUFPd0UsS0FBSzlFLEVBQ3BCLEVBQ0Fzb0MsRUFBZUssUUFBVUgsRUFDekJKLEVBQU9RLFFBQVVOLEVBQ2pCQSxFQUFlM2lCLEdBQUsiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXguY3NzP2NmZTQiLCJ3ZWJwYWNrOi8vLy4vc3JjL0FwcC5jc3M/ZDljZCIsIndlYnBhY2s6Ly8vLi9zcmMvcHJvdmlkZXJzLmpzIiwid2VicGFjazovLy8uL3NyYy9Db21tb24vSWNvbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvQ29tbW9uL0ljb25CdXR0b24uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbmZpZy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBpLmpzIiwid2VicGFjazovLy8uL3NyYy9rZXljb2Rlcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvQ29udGV4dHMvRGVmaW5pdGlvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0tleWJvYXJkL0NvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0NvbW1vbi9hY3Rpb24tYnV0dG9uLm1vZHVsZS5jc3M/ZWQ4MyIsIndlYnBhY2s6Ly8vLi9zcmMvQ29tbW9uL0FjdGlvbkJ1dHRvbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvQ29tbW9uL2RpYWxvZy1ib3gubW9kdWxlLmNzcz9iZWU2Iiwid2VicGFjazovLy8uL3NyYy9Db21tb24vRGlhbG9nQm94LmpzIiwid2VicGFjazovLy8uL3NyYy9Db21tb24vTW9kYWwuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0NvbW1vbi9pbnB1dC5tb2R1bGUuY3NzPzgzNDciLCJ3ZWJwYWNrOi8vLy4vc3JjL0NvbW1vbi9JbnB1dC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvS2V5Ym9hcmQvQ29tbW9uL0RldmljZXRyZWUvbm9kZVByb3BUeXBlcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvS2V5Ym9hcmQvQ29tbW9uL0RldmljZXRyZWUvdmFsaWRhdG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvS2V5Ym9hcmQvQ29tbW9uL0RldmljZXRyZWUvTm9kZUlkZW50aWZpZXJzLmpzIiwid2VicGFjazovLy8uL3NyYy9LZXlib2FyZC9CZWhhdmlvcnMvQmVoYXZpb3JIZWFkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0tleWJvYXJkL0JlaGF2aW9ycy9zdHlsZXMubW9kdWxlLmNzcz80NjExIiwid2VicGFjazovLy8uL3NyYy9LZXlib2FyZC9CZWhhdmlvcnMvUHJvcGVydHlOYW1lLmpzIiwid2VicGFjazovLy8uL3NyYy9rZXktdW5pdHMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0tleWJvYXJkL3V0aWwuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0tleWJvYXJkL3N0eWxlcy5tb2R1bGUuY3NzPzc1ZGEiLCJ3ZWJwYWNrOi8vLy4vc3JjL0tleWJvYXJkL2xheW91dFByb3BUeXBlcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvS2V5Ym9hcmQvS2V5UGxhY2VyLmpzIiwid2VicGFjazovLy8uL3NyYy9LZXlib2FyZC9LZXlib2FyZExheW91dC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvS2V5Ym9hcmQvS2V5cy9zdHlsZXMubW9kdWxlLmNzcz9iZjljIiwid2VicGFjazovLy8uL3NyYy9LZXlib2FyZC9LZXlzL0tleVdyYXBwZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0tleWJvYXJkL0NvbW1vbi9kcmFnU2VsZWN0b3IubW9kdWxlLmNzcz8xYzZmIiwid2VicGFjazovLy8uL3NyYy9LZXlib2FyZC9Db21tb24vRHJhZ1NlbGVjdG9yLmpzIiwid2VicGFjazovLy8uL3NyYy9LZXlib2FyZC9Db21tb24va2V5UG9zaXRpb25TZWxlY3RvclN0eWxlcy5tb2R1bGUuY3NzP2Q1NGQiLCJ3ZWJwYWNrOi8vLy4vc3JjL0NvbW1vbi90aXAubW9kdWxlLmNzcz80Zjc2Iiwid2VicGFjazovLy8uL3NyYy9Db21tb24vVGlwLmpzIiwid2VicGFjazovLy8uL3NyYy9Db250ZXh0cy9MYXlvdXQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0tleWJvYXJkL0NvbW1vbi9LZXlQb3NpdGlvblNlbGVjdG9yLmpzIiwid2VicGFjazovLy8uL3NyYy9LZXlib2FyZC9CZWhhdmlvcnMvUHJvcGVydHlWYWx1ZS9zdHlsZXMubW9kdWxlLmNzcz85YzdkIiwid2VicGFjazovLy8uL3NyYy9LZXlib2FyZC9CZWhhdmlvcnMvUHJvcGVydHlWYWx1ZS9zaW1wbGUtdHlwZXMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1ZhbHVlUGlja2VyL3V0aWwuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1ZhbHVlUGlja2VyL3N0eWxlLm1vZHVsZS5jc3M/MGZmZiIsIndlYnBhY2s6Ly8vLi9zcmMvVmFsdWVQaWNrZXIvUmVzdWx0TGlzdC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvVmFsdWVQaWNrZXIvU2VhcmNoRmlsdGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9WYWx1ZVBpY2tlci9DaG9pY2VzUGlja2VyLmpzIiwid2VicGFjazovLy8uL3NyYy9LZXlib2FyZC9CZWhhdmlvcnMvUHJvcGVydHlWYWx1ZS9jb2xsZWN0aW9uLXR5cGVzLmpzIiwid2VicGFjazovLy8uL3NyYy9WYWx1ZVBpY2tlci9FbnVtUGlja2VyLmpzIiwid2VicGFjazovLy8uL3NyYy9LZXlib2FyZC9CaW5kaW5nL2JpbmRQcm9wVHlwZXMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1ZhbHVlUGlja2VyL0dlbmVyaWNQaWNrZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0VuaGFuY2VkUGlja2Vycy9SR0IvSHVlU2F0VmFsUGlja2VyLmpzIiwid2VicGFjazovLy8uL3NyYy9FbmhhbmNlZFBpY2tlcnMvS2V5Y29kZS9oZWxwZXJzLmpzIiwid2VicGFjazovLy8uL3NyYy9FbmhhbmNlZFBpY2tlcnMvS2V5Y29kZS9zdHlsZXMubW9kdWxlLmNzcz9kMmJhIiwid2VicGFjazovLy8uL3NyYy9FbmhhbmNlZFBpY2tlcnMvS2V5Y29kZS9Nb2RpZmllcnNQaWNrZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0tleWJvYXJkL0JpbmRpbmcvQmluZFZhbHVlLmpzIiwid2VicGFjazovLy8uL3NyYy9FbmhhbmNlZFBpY2tlcnMvS2V5Y29kZS9LZXljb2RlQmluZE5vZGUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2tleW1hcC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvS2V5Ym9hcmQvQmluZGluZy91dGlsLmpzIiwid2VicGFjazovLy8uL3NyYy9FbmhhbmNlZFBpY2tlcnMvS2V5Y29kZS9LZXljb2RlUGlja2VyLmpzIiwid2VicGFjazovLy8uL3NyYy9WYWx1ZVBpY2tlci9SYXdWYWx1ZVBpY2tlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvS2V5Ym9hcmQvTGF5ZXJzL2xheWVyc1NsaWNlLmpzIiwid2VicGFjazovLy8uL3NyYy9WYWx1ZVBpY2tlci9MYXllclBpY2tlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvVmFsdWVQaWNrZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3JlZHVjZXItdXRpbC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvS2V5Ym9hcmQvQmVoYXZpb3JzL1Byb3BlcnR5VmFsdWUvQmVoYXZpb3JzUHJvcGVydHlWYWx1ZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvRW5oYW5jZWRQaWNrZXJzL1JHQi9IdWVTYXRWYWxCaW5kTm9kZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvS2V5Ym9hcmQvQmluZGluZy9CaW5kUGFyYW1saXN0LmpzIiwid2VicGFjazovLy8uL3NyYy9LZXlib2FyZC9CaW5kaW5nL0JpbmRpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0tleWJvYXJkL0tleXMvS2V5LmpzIiwid2VicGFjazovLy8uL3NyYy9LZXlib2FyZC9CZWhhdmlvcnMvUHJvcGVydHlWYWx1ZS9CaW5kaW5nc1Byb3BlcnR5VmFsdWUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0tleWJvYXJkL0JlaGF2aW9ycy9Qcm9wZXJ0eVZhbHVlL1Byb3BlcnR5VmFsdWUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0tleWJvYXJkL0JlaGF2aW9ycy9Qcm9wZXJ0eVZhbHVlL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9LZXlib2FyZC9CZWhhdmlvcnMvQmVoYXZpb3JFZGl0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0NvbW1vbi9saW5rLm1vZHVsZS5jc3M/ZGY0ZSIsIndlYnBhY2s6Ly8vLi9zcmMvQ29tbW9uL0xpbmsuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0tleWJvYXJkL0JlaGF2aW9ycy9CZXRhTm90aWNlRGlhbG9nLmpzIiwid2VicGFjazovLy8uL3NyYy9LZXlib2FyZC9CZWhhdmlvcnMvTmV3QmVoYXZpb3JNb2RhbC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvS2V5Ym9hcmQvQmVoYXZpb3JzL2NyZWF0ZS1iZWhhdmlvci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvS2V5Ym9hcmQvQmVoYXZpb3JzL2JlaGF2aW9yc1NsaWNlLmpzIiwid2VicGFjazovLy8uL3NyYy9LZXlib2FyZC9CZWhhdmlvcnMvQmVoYXZpb3JzLmpzIiwid2VicGFjazovLy8uL3NyYy9LZXlib2FyZC9Db21ib3Mvc3R5bGVzLm1vZHVsZS5jc3M/Zjc2NSIsIndlYnBhY2s6Ly8vLi9zcmMvS2V5Ym9hcmQvQ29tYm9zL0NvbWJvSW5wdXRNYXAuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0NvbW1vbi9lZGl0YWJsZWZpZWxkLm1vZHVsZS5jc3M/ODZhNSIsIndlYnBhY2s6Ly8vLi9zcmMvZXZlbnQtdXRpbC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvQ29tbW9uL0VkaXRhYmxlRmllbGQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0tleWJvYXJkL0NvbWJvcy9Db25maWdNb2RhbC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvS2V5Ym9hcmQvQ29tYm9zL2NvbWJvc1NsaWNlLmpzIiwid2VicGFjazovLy8uL3NyYy9LZXlib2FyZC9Db21ib3MvQ29tYm9FZGl0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0tleWJvYXJkL0xheWVycy9sYXllci1zZWxlY3Rvci5tb2R1bGUuY3NzPzVjZWEiLCJ3ZWJwYWNrOi8vLy4vc3JjL0tleWJvYXJkL0xheWVycy9MYXllclNlbGVjdG9yLmpzIiwid2VicGFjazovLy8uL3NyYy9LZXlib2FyZC9FbmNvZGVyQmluZGluZy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvS2V5Ym9hcmQvTGF5ZXJzL1NlbnNvckJpbmRpbmdzLmpzIiwid2VicGFjazovLy8uL3NyYy9Db21tb24vYWN0aW9uLW1lbnUubW9kdWxlLmNzcz84YzUyIiwid2VicGFjazovLy8uL3NyYy9Db21tb24vQWN0aW9uTWVudS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvS2V5Ym9hcmQvTGF5ZXJzL0xheWVyQWN0aW9uc01lbnUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0tleWJvYXJkL0xheWVycy9zdHlsZS5tb2R1bGUuY3NzPzIwMGQiLCJ3ZWJwYWNrOi8vLy4vc3JjL0tleWJvYXJkL0xheWVycy9Db25maWdNb2RhbC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvS2V5Ym9hcmQvTGF5ZXJzL1Byb21wdEZvckZpcnN0TGF5ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0tleWJvYXJkL0xheWVycy9MYXllckJpbmRpbmdzLmpzIiwid2VicGFjazovLy8uL3NyYy9LZXlib2FyZC9MYXllcnMvdXNlLWtleS1oYW5kbGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9LZXlib2FyZC9MYXllcnMvcXVpY2stYXNzaWdubWVudC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvS2V5Ym9hcmQvTGF5ZXJzL1F1aWNrQXNzaWduTW9kYWwuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0tleWJvYXJkL0xheWVycy9MYXllckVkaXRvci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvS2V5Ym9hcmQvTWFjcm9zL3V0aWwuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0tleWJvYXJkL01hY3Jvcy9zdHlsZXMubW9kdWxlLmNzcz9lZjhlIiwid2VicGFjazovLy8uL3NyYy9LZXlib2FyZC9NYWNyb3MvZHJhZy1hbmQtZHJvcC5tb2R1bGUuY3NzP2ZkZDgiLCJ3ZWJwYWNrOi8vLy4vc3JjL0tleWJvYXJkL01hY3Jvcy9EcmFnQW5kRHJvcC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvS2V5Ym9hcmQvTWFjcm9zL1NlcXVlbmNlTW9kYWwuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0tleWJvYXJkL01hY3Jvcy9tYWNyb3NTbGljZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvS2V5Ym9hcmQvTWFjcm9zL01hY3JvQmluZHMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0tleWJvYXJkL01hY3Jvcy9Db25maWdNb2RhbC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvS2V5Ym9hcmQvTWFjcm9zL01hY3JvLmpzIiwid2VicGFjazovLy8uL3NyYy9LZXlib2FyZC9NYWNyb3MvTWFjcm9FZGl0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0tleWJvYXJkL2JpbmRpbmdQcm9wVHlwZXMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0tleWJvYXJkL0NvbWJvcy9jb21ib1Byb3BUeXBlcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvS2V5Ym9hcmQva2V5bWFwUHJvcFR5cGVzLmpzIiwid2VicGFjazovLy8uL3NyYy9LZXlib2FyZC9XYXJuaW5ncy9zYW5pdHktY2hlY2tzLWxheW91dC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvS2V5Ym9hcmQvV2FybmluZ3Mvc2FuaXR5LWNoZWNrcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvS2V5Ym9hcmQvV2FybmluZ3Mvc3R5bGVzLm1vZHVsZS5jc3M/NzBjNSIsIndlYnBhY2s6Ly8vLi9zcmMvS2V5Ym9hcmQvV2FybmluZ3MvV2FybmluZ3MuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0tleWJvYXJkL0tleWJvYXJkLmpzIiwid2VicGFjazovLy8uL3NyYy9zdHlsZXMubW9kdWxlLmNzcz9mNzljIiwid2VicGFjazovLy8uL3NyYy9HaXRIdWJMaW5rLmpzIiwid2VicGFjazovLy8uL3NyYy9EaWFsb2dzL1NldHRpbmdzLmpzIiwid2VicGFjazovLy8uL3NyYy9Db21tb24vc3Bpbm5lci5tb2R1bGUuY3NzPzdlNTEiLCJ3ZWJwYWNrOi8vLy4vc3JjL0NvbW1vbi9TcGlubmVyLmpzIiwid2VicGFjazovLy8uL3NyYy9Tb3VyY2VzL0dpdGh1Yi9hcGkuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1NvdXJjZXMvR2l0aHViL3N0eWxlcy5tb2R1bGUuY3NzPzUyOWMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1NvdXJjZXMvR2l0aHViL0J1aWxkTGluay5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvU291cmNlcy9HaXRodWIvRGlhbG9ncy9Db21taXQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1NvdXJjZXMvU291cmNlQWN0aW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvRGlhbG9ncy9zdXBwb3J0LmpzIiwid2VicGFjazovLy8uL3NyYy9EaWFsb2dzL0xheW91dEdlbmVyYXRpb25FcnJvci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvU291cmNlcy9Db250cm9scy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvU291cmNlcy9Mb2NhbC9QaWNrZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1NvdXJjZXMvRGVtby9EaWFsb2dzL0RlbW9IZWxwRGlhbG9nLmpzIiwid2VicGFjazovLy8uL3NyYy9Tb3VyY2VzL0RlbW8vc3R5bGUubW9kdWxlLmNzcz9mZjdmIiwid2VicGFjazovLy8uL3NyYy9Tb3VyY2VzL0RlbW8vUGlja2VyLmpzIiwid2VicGFjazovLy8uL3NyYy9Tb3VyY2VzL0dpdGh1Yi9WYWxpZGF0aW9uRXJyb3JzLmpzIiwid2VicGFjazovLy8uL3NyYy9Tb3VyY2VzL0dpdGh1Yi9zdG9yYWdlLmpzIiwid2VicGFjazovLy8uL3NyYy9Tb3VyY2VzL0dpdGh1Yi9zdG9yZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvRGlhbG9ncy9TdWdnZXN0UmVtb3RlUmVwby5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvRGlhbG9ncy9TdWdnZXN0UmVwb1NlbGVjdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvRGlhbG9ncy9TdWdnZXN0V3JvbmdSZXBvLmpzIiwid2VicGFjazovLy8uL3NyYy9EaWFsb2dzL0Jsb2NrZWQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0RpYWxvZ3MvTWlzc2luZ0xheW91dC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvU291cmNlcy9HaXRodWIvRGlhbG9ncy9Mb2dpbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvU291cmNlcy9HaXRodWIvRGlhbG9ncy9JbnN0YWxsLmpzIiwid2VicGFjazovLy8uL3NyYy9EaWFsb2dzL01pc3NpbmdLZXltYXBzLmpzIiwid2VicGFjazovLy8uL3NyYy9Tb3VyY2VzL0dpdGh1Yi9HaXRIdWJFeHBhbmRlZFBpY2tlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvU291cmNlcy9HaXRodWIvcmVwb3NpdG9yeS1vcHRpb25zLmpzIiwid2VicGFjazovLy8uL3NyYy9Tb3VyY2VzL0dpdGh1Yi9QaWNrZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1NvdXJjZXMvc291cmNlcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvRGlhbG9ncy9LZXltYXBCaW5kaW5nc1VzZVByZXByb2Nlc3Nvck1hY3Jvcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvRGlhbG9ncy9LZXltYXBQYXJzaW5nRmFpbGVkLmpzIiwid2VicGFjazovLy8uL3NyYy9EaWFsb2dzL0tleW1hcFVzaW5nTWlyeW9rdS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvRGlhbG9ncy9NaXNzaW5nUm9vdE5vZGUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0RpYWxvZ3MvWm1rTm9kZWZyZWVDb25maWcuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0RpYWxvZ3MvU3VnZ2VzdEF1dG9MYXlvdXRUd2Vhay5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvU291cmNlcy9Tb3VyY2VQaWNrZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1NvdXJjZXMvZXJyb3JzLmpzIiwid2VicGFjazovLy8uL3NyYy9EaWFsb2dzL3VuZXhwZWN0ZWQtZXJyb3IubW9kdWxlLmNzcz85NGM3Iiwid2VicGFjazovLy8uL3NyYy9EaWFsb2dzL1VuZXhwZWN0ZWRFcnJvci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvRXJyb3JCb3VuZGFyeS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvRGlhbG9ncy9LZXltYXBTYXZlRmFpbGVkLmpzIiwid2VicGFjazovLy8uL3NyYy9BcHAuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcFJlZHVjZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0b3JlLmpzIiwid2VicGFjazovLy8uL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvQXBwLmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXguY3NzIiwid2VicGFjazovLy8uL3NyYy9Db21tb24vYWN0aW9uLWJ1dHRvbi5tb2R1bGUuY3NzIiwid2VicGFjazovLy8uL3NyYy9Db21tb24vYWN0aW9uLW1lbnUubW9kdWxlLmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvQ29tbW9uL2RpYWxvZy1ib3gubW9kdWxlLmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvQ29tbW9uL2VkaXRhYmxlZmllbGQubW9kdWxlLmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvQ29tbW9uL2lucHV0Lm1vZHVsZS5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL0NvbW1vbi9saW5rLm1vZHVsZS5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL0NvbW1vbi9zcGlubmVyLm1vZHVsZS5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL0NvbW1vbi90aXAubW9kdWxlLmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvRGlhbG9ncy91bmV4cGVjdGVkLWVycm9yLm1vZHVsZS5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL0VuaGFuY2VkUGlja2Vycy9LZXljb2RlL3N0eWxlcy5tb2R1bGUuY3NzIiwid2VicGFjazovLy8uL3NyYy9LZXlib2FyZC9CZWhhdmlvcnMvUHJvcGVydHlWYWx1ZS9zdHlsZXMubW9kdWxlLmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvS2V5Ym9hcmQvQmVoYXZpb3JzL3N0eWxlcy5tb2R1bGUuY3NzIiwid2VicGFjazovLy8uL3NyYy9LZXlib2FyZC9Db21ib3Mvc3R5bGVzLm1vZHVsZS5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL0tleWJvYXJkL0NvbW1vbi9kcmFnU2VsZWN0b3IubW9kdWxlLmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvS2V5Ym9hcmQvQ29tbW9uL2tleVBvc2l0aW9uU2VsZWN0b3JTdHlsZXMubW9kdWxlLmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvS2V5Ym9hcmQvS2V5cy9zdHlsZXMubW9kdWxlLmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvS2V5Ym9hcmQvTGF5ZXJzL2xheWVyLXNlbGVjdG9yLm1vZHVsZS5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL0tleWJvYXJkL0xheWVycy9zdHlsZS5tb2R1bGUuY3NzIiwid2VicGFjazovLy8uL3NyYy9LZXlib2FyZC9NYWNyb3MvZHJhZy1hbmQtZHJvcC5tb2R1bGUuY3NzIiwid2VicGFjazovLy8uL3NyYy9LZXlib2FyZC9NYWNyb3Mvc3R5bGVzLm1vZHVsZS5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL0tleWJvYXJkL1dhcm5pbmdzL3N0eWxlcy5tb2R1bGUuY3NzIiwid2VicGFjazovLy8uL3NyYy9LZXlib2FyZC9zdHlsZXMubW9kdWxlLmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvU291cmNlcy9EZW1vL3N0eWxlLm1vZHVsZS5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL1NvdXJjZXMvR2l0aHViL3N0eWxlcy5tb2R1bGUuY3NzIiwid2VicGFjazovLy8uL3NyYy9WYWx1ZVBpY2tlci9zdHlsZS5tb2R1bGUuY3NzIiwid2VicGFjazovLy8uL3NyYy9zdHlsZXMubW9kdWxlLmNzcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS8gc3luYyBeXFwuXFwvLiokIl0sInNvdXJjZXNDb250ZW50IjpbIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9pbmRleC5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2luZGV4LmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9BcHAuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9BcHAuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IHsgY3JlYXRlQ29udGV4dCB9IGZyb20gJ3JlYWN0J1xuXG5leHBvcnQgY29uc3QgU2VhcmNoQ29udGV4dCA9IGNyZWF0ZUNvbnRleHQoe1xuICBnZXRTZWFyY2hUYXJnZXRzOiBudWxsXG59KVxuXG5leHBvcnQgY29uc3QgU2V0dGluZ3NDb250ZXh0ID0gY3JlYXRlQ29udGV4dCh7XG4gIHNldHRpbmdzOiBudWxsLFxuICBvcGVuU2V0dGluZ3NEaWFsb2c6IG51bGxcbn0pXG4iLCJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnXG5cbmNvbnN0IGZhQ29sbGVjdGlvbnMgPSB7XG4gIGJyYW5kczogJ2ZhYicsXG4gIGRlZmF1bHQ6ICdmYScsXG4gIHNvbGlkOiAnZmFzJyxcbiAgcm91bmQ6ICdmYXInXG59XG5cbmZ1bmN0aW9uIEljb24gKHByb3BzKSB7XG4gIGNvbnN0IHsgbmFtZSwgY2xhc3NOYW1lLCBjb2xsZWN0aW9uLCAuLi5pY29uUHJvcHMgfSA9IHByb3BzXG4gIGNvbnN0IGdyb3VwQ2xhc3MgPSBmYUNvbGxlY3Rpb25zW2NvbGxlY3Rpb25dXG4gIGNvbnN0IGljb25DbGFzcyA9IGBmYS0ke25hbWV9YFxuXG4gIHJldHVybiAoXG4gICAgPHNwYW5cbiAgICAgIGNsYXNzTmFtZT17W2NsYXNzTmFtZSwgZ3JvdXBDbGFzcywgaWNvbkNsYXNzXS5qb2luKCcgJyl9XG4gICAgICB7Li4uaWNvblByb3BzfVxuICAgIC8+XG4gIClcbn1cblxuSWNvbi5wcm9wVHlwZXMgPSB7XG4gIG5hbWU6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBjb2xsZWN0aW9uOiBQcm9wVHlwZXMuc3RyaW5nXG59XG5cbkljb24uZGVmYXVsdFByb3BzID0ge1xuICBjb2xsZWN0aW9uOiAnZGVmYXVsdCcsXG4gIGNsYXNzTmFtZTogJydcbn1cblxuZXhwb3J0IGRlZmF1bHQgSWNvblxuIiwiaW1wb3J0IEljb24gZnJvbSAnLi9JY29uJ1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBJY29uQnV0dG9uICh7IGNvbGxlY3Rpb24sIGljb24sIHRleHQsIGNoaWxkcmVuLCBvbkNsaWNrLCAuLi5yZXN0IH0pIHtcbiAgcmV0dXJuIChcbiAgICA8YnV0dG9uIG9uQ2xpY2s9e29uQ2xpY2t9IHsuLi5yZXN0fT5cbiAgICAgIDxJY29uIGNvbGxlY3Rpb249e2NvbGxlY3Rpb259IG5hbWU9e2ljb259IC8+IHt0ZXh0IHx8IGNoaWxkcmVufVxuICAgIDwvYnV0dG9uPlxuICApXG59XG4iLCJmdW5jdGlvbiBwYXJzZUJvb2xlYW4gKHZhbCkge1xuICByZXR1cm4gdmFsICYmIFsnMScsICdvbicsICd5ZXMnLCAndHJ1ZSddLmluY2x1ZGVzKHZhbC50b1N0cmluZygpLnRvTG93ZXJDYXNlKCkpXG59XG5cbmV4cG9ydCBjb25zdCBhcGlCYXNlVXJsID0gcHJvY2Vzcy5lbnYuQVBJX0JBU0VfVVJMXG5leHBvcnQgY29uc3QgYXBwQmFzZVVybCA9IHByb2Nlc3MuZW52LkFQUF9CQVNFX1VSTFxuZXhwb3J0IGNvbnN0IGdpdGh1YkFwcE5hbWUgPSBwcm9jZXNzLmVudi5HSVRIVUJfQVBQX05BTUVcbmV4cG9ydCBjb25zdCBlbmFibGVHaXRIdWIgPSBwYXJzZUJvb2xlYW4ocHJvY2Vzcy5lbnYuRU5BQkxFX0dJVEhVQilcbmV4cG9ydCBjb25zdCBlbmFibGVMb2NhbCA9IHBhcnNlQm9vbGVhbihwcm9jZXNzLmVudi5FTkFCTEVfTE9DQUwpXG5leHBvcnQgY29uc3QgZW5hYmxlRGVtbyA9IHBhcnNlQm9vbGVhbihwcm9jZXNzLmVudi5FTkFCTEVfREVNTylcbiIsImltcG9ydCAqIGFzIGNvbmZpZyBmcm9tICcuL2NvbmZpZydcblxuZXhwb3J0IGZ1bmN0aW9uIGhlYWx0aGNoZWNrICgpIHtcbiAgcmV0dXJuIGZldGNoKGAke2NvbmZpZy5hcGlCYXNlVXJsfS9oZWFsdGhgKVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbG9hZEJlaGF2aW91ckJpbmRpbmdzICgpIHtcbiAgY29uc3QgeyBiZWhhdmlvclNjaGVtYXMsIGJlaGF2aW9yQmluZGluZ3MgfSA9IGF3YWl0IGltcG9ydCgnem1rLWRhdGEvYmVoYXZpb3JzJylcbiAgcmV0dXJuIHtcbiAgICBiZWhhdmlvcnM6IGJlaGF2aW9yU2NoZW1hcyxcbiAgICBiaW5kaW5nczogYmVoYXZpb3JCaW5kaW5nc1xuICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBsb2FkS2V5Y29kZXMgKCkge1xuICBjb25zdCB7IGtleWNvZGVzIH0gPSBhd2FpdCBpbXBvcnQoJ3ptay1kYXRhL2tleWNvZGVzJylcbiAgcmV0dXJuIGtleWNvZGVzXG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBsb2FkS2V5Y29kZUdseXBocyAoKSB7XG4gIGNvbnN0IHsga2V5Y29kZUdseXBocyB9ID0gYXdhaXQgaW1wb3J0KCd6bWstZGF0YS9rZXljb2RlcycpXG4gIHJldHVybiBrZXljb2RlR2x5cGhzXG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBsb2FkQXZhaWxhYmxlS2V5Ym9hcmRzICgpIHtcbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHtjb25maWcuYXBpQmFzZVVybH0vdjIvbG9jYWwva2V5Ym9hcmRzYClcbiAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbG9hZEtleWJvYXJkRmlsZXMgKGtleWJvYXJkKSB7XG4gIGNvbnN0IHBhdGggPSBgdjIvbG9jYWwva2V5Ym9hcmRzLyR7ZW5jb2RlVVJJQ29tcG9uZW50KGtleWJvYXJkKX1gXG4gIGNvbnN0IHVybCA9IGAke2NvbmZpZy5hcGlCYXNlVXJsfS8ke3BhdGh9YFxuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHVybClcblxuICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgY29uc3QgZXJyID0gbmV3IEVycm9yKClcbiAgICBlcnIucmVzcG9uc2UgPSByZXNwb25zZVxuICAgIHRocm93IGVyclxuICB9XG4gIHJldHVybiByZXNwb25zZS5qc29uKClcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHVwZGF0ZUtleW1hcCAoa2V5Ym9hcmQsIGtleW1hcCkge1xuICBjb25zdCBwYXRoID0gYHYyL2xvY2FsL2tleWJvYXJkcy8ke2VuY29kZVVSSUNvbXBvbmVudChrZXlib2FyZCl9L2tleW1hcGBcbiAgY29uc3QgdXJsID0gYCR7Y29uZmlnLmFwaUJhc2VVcmx9LyR7cGF0aH1gXG5cbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCh1cmwsIHtcbiAgICBtZXRob2Q6ICdQVVQnLFxuICAgIGhlYWRlcnM6IHsgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyB9LFxuICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGtleW1hcClcbiAgfSlcblxuICByZXR1cm4gcmVzcG9uc2UuanNvbigpXG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBsb2FkS2V5Ym9hcmQgKCkge1xuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAke2NvbmZpZy5hcGlCYXNlVXJsfS9rZXlib2FyZGApXG4gIGNvbnN0IHsgaW5mbywga2V5bWFwIH0gPSBhd2FpdCByZXNwb25zZS5qc29uKClcbiAgY29uc3QgZGVmYXVsdExheW91dCA9IChcbiAgICBpbmZvLmxheW91dHMuZGVmYXVsdCB8fFxuICAgIGluZm8ubGF5b3V0c1tPYmplY3Qua2V5cyhpbmZvLmxheW91dHMpWzBdXVxuICApXG5cbiAgcmV0dXJuIHtcbiAgICBsYXlvdXQ6IGRlZmF1bHRMYXlvdXQubGF5b3V0LFxuICAgIGtleW1hcCxcbiAgICBzZW5zb3JzOiBpbmZvLnNlbnNvcnNcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gbG9hZEtleW1hcCAoKSB7XG4gIGNvbnN0IHVybCA9IG5ldyBVUkwoYCR7Y29uZmlnLmFwaUJhc2VVcmx9L2tleW1hcGApXG4gIHJldHVybiBmZXRjaCh1cmwpXG4gICAgLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UuanNvbigpKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gbG9hZExheW91dCAoKSB7XG4gIHJldHVybiBmZXRjaChgJHtjb25maWcuYXBpQmFzZVVybH0vbGF5b3V0YClcbiAgICAudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS5qc29uKCkpXG59XG4iLCJpbXBvcnQgeyBjb21wYWN0IH0gZnJvbSAnbG9kYXNoJ1xuXG5pbXBvcnQgKiBhcyBhcGkgZnJvbSAnLi9hcGknXG5cbmV4cG9ydCBmdW5jdGlvbiBsb2FkS2V5Y29kZXMgKCkge1xuICByZXR1cm4gYXBpLmxvYWRLZXljb2RlcygpLnRoZW4obm9ybWFsaXplWm1rS2V5Y29kZXMpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsb2FkS2V5Y29kZUdseXBocyAoKSB7XG4gIHJldHVybiBhcGkubG9hZEtleWNvZGVHbHlwaHMoKVxufVxuXG5mdW5jdGlvbiBzaG9ydGVzdEFsaWFzIChhbGlhc2VzKSB7XG4gIHJldHVybiBbLi4uYWxpYXNlc11cbiAgICAuc29ydCgoYSwgYikgPT4gYS5sZW5ndGggLSBiLmxlbmd0aClbMF1cbn1cblxuY29uc3QgZm5QYXR0ZXJuID0gL14oLis/KVxcKChjb2RlKVxcKSQvXG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVpta0tleWNvZGVzIChrZXljb2Rlcykge1xuICByZXR1cm4ga2V5Y29kZXMucmVkdWNlKChrZXljb2Rlcywga2V5Y29kZSkgPT4ge1xuICAgIGNvbnN0IHsgZGVzY3JpcHRpb24sIGNvbnRleHQsIHN5bWJvbCwgZmFJY29uIH0gPSBrZXljb2RlXG4gICAgY29uc3QgYWxpYXNlcyA9IGtleWNvZGUubmFtZXMuZmlsdGVyKG5hbWUgPT4gIW5hbWUubWF0Y2goZm5QYXR0ZXJuKSlcbiAgICBjb25zdCBuYW1lID0gc2hvcnRlc3RBbGlhcyhhbGlhc2VzKVxuICAgIGNvbnN0IGZuQ29kZSA9IGtleWNvZGUubmFtZXMubWFwKG5hbWUgPT4gbmFtZS5tYXRjaChmblBhdHRlcm4pKS5maWx0ZXIodiA9PiAhIXYpWzBdXG4gICAgY29uc3QgYmFzZSA9IHtcbiAgICAgIG5hbWUsXG4gICAgICBhbGlhc2VzLFxuICAgICAgZGVzY3JpcHRpb24sXG4gICAgICBjb250ZXh0LFxuICAgICAgZmFJY29uLFxuICAgICAgc3ltYm9sOiBzeW1ib2wgfHwgbmFtZSxcbiAgICAgIHBhcmFtczogW11cbiAgICB9XG5cbiAgICBmb3IgKGNvbnN0IGNvZGUgb2YgYWxpYXNlcykge1xuICAgICAga2V5Y29kZXMucHVzaChPYmplY3QuYXNzaWduKHt9LCBiYXNlLCB7XG4gICAgICAgIGNvZGUsXG4gICAgICAgIGlzTW9kaWZpZXI6ICEhZm5Db2RlXG4gICAgICB9KSlcbiAgICB9XG5cbiAgICBpZiAoZm5Db2RlKSB7XG4gICAgICBrZXljb2Rlcy5wdXNoKE9iamVjdC5hc3NpZ24oe30sIGJhc2UsIHtcbiAgICAgICAgY29kZTogZm5Db2RlWzFdLFxuICAgICAgICBwYXJhbXM6IGZuQ29kZVsyXS5zcGxpdCgnLCcpXG4gICAgICB9KSlcbiAgICB9XG5cbiAgICByZXR1cm4ga2V5Y29kZXNcbiAgfSwgW10pXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRNZXJnZWRHbHlwaHMgKGdseXBocywgb3B0aW9ucykge1xuICByZXR1cm4gY29tcGFjdChbXG4gICAgZ2x5cGhzLmJhc2ljLFxuICAgIG9wdGlvbnMudW5pY29kZSAmJiBnbHlwaHMudW5pY29kZSxcbiAgICBvcHRpb25zLnBsYXRmb3JtID09PSAnbWFjJyAmJiBnbHlwaHMucGxhdGZvcm1zLm1hYyxcbiAgICBvcHRpb25zLnBsYXRmb3JtID09PSAnd2luJyAmJiBnbHlwaHMucGxhdGZvcm1zLndpblxuICBdKS5yZWR1Y2UoKGdseXBocywgY29sbGVjdGlvbikgPT4ge1xuICAgIGZvciAoY29uc3Qgb3ZlcmxheSBvZiBjb2xsZWN0aW9uKSB7XG4gICAgICBjb25zdCBhbGlhc2VzID0gb3ZlcmxheS5uYW1lcy5maWx0ZXIobmFtZSA9PiAhbmFtZS5tYXRjaChmblBhdHRlcm4pKVxuICAgICAgY29uc3QgbmFtZSA9IHNob3J0ZXN0QWxpYXMoYWxpYXNlcylcblxuICAgICAgaWYgKCFnbHlwaHNbbmFtZV0pIHtcbiAgICAgICAgZ2x5cGhzW25hbWVdID0ge31cbiAgICAgIH1cblxuICAgICAgZ2x5cGhzW25hbWVdLnN5bWJvbCA9IGdseXBoc1tuYW1lXS5zeW1ib2wgfHwgb3ZlcmxheS5zeW1ib2xcbiAgICAgIGdseXBoc1tuYW1lXS5mYUljb24gPSBnbHlwaHNbbmFtZV0uZmFJY29uIHx8IG92ZXJsYXkuZmFJY29uXG4gICAgfVxuICAgIHJldHVybiBnbHlwaHNcbiAgfSwge30pXG59XG4iLCJpbXBvcnQgY2xvbmVEZWVwIGZyb20gJ2xvZGFzaC9jbG9uZURlZXAnXG5pbXBvcnQgZmlsdGVyIGZyb20gJ2xvZGFzaC9maWx0ZXInXG5pbXBvcnQga2V5QnkgZnJvbSAnbG9kYXNoL2tleUJ5J1xuaW1wb3J0IHsgY3JlYXRlQ29udGV4dCwgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgeyB1c2VEaXNwYXRjaCwgdXNlU2VsZWN0b3IgfSBmcm9tICdyZWFjdC1yZWR1eCdcblxuLy8gVE9ETzogcHJvYmFibHkgaW1wb3J0IHRoZXNlIGRpcmVjdGx5IGZyb20gem1rLWRhdGE/XG5pbXBvcnQgeyBsb2FkQmVoYXZpb3VyQmluZGluZ3MgfSBmcm9tICcuLi9hcGknXG5pbXBvcnQgeyBsb2FkS2V5Y29kZUdseXBocywgbG9hZEtleWNvZGVzIH0gZnJvbSAnLi4va2V5Y29kZXMnXG5cbmV4cG9ydCBjb25zdCBEZWZpbml0aW9uc0NvbnRleHQgPSBjcmVhdGVDb250ZXh0KHtcbiAga2V5Y29kZXM6IFtdLFxuICBiZWhhdmlvdXJzOiBbXSxcbiAgYmVoYXZpb3JzOiB7fSxcbiAgYmVoYXZpb3JCaW5kczogW10sXG4gIGdseXBoczogW11cbn0pXG5cbi8vIFRPRE86IEkgYmV0IHRoaXMgZG9lc24ndCBuZWVkIHRvIGJlIGluIHRoZSBhcHAgc3RhdGUgYXQgYWxsXG5jb25zdCBzZWxlY3REZWZpbml0aW9ucyA9IHN0YXRlID0+IHN0YXRlLmRlZmluaXRpb25zXG5cbmV4cG9ydCBmdW5jdGlvbiBEZWZpbml0aW9uc0NvbnRleHRQcm92aWRlciAoeyBjaGlsZHJlbiB9KSB7XG4gIGNvbnN0IGRlZmluaXRpb25zID0gdXNlU2VsZWN0b3Ioc2VsZWN0RGVmaW5pdGlvbnMpXG4gIGNvbnN0IGRpc3BhdGNoID0gdXNlRGlzcGF0Y2goKVxuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgKGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChkZWZpbml0aW9ucyAhPT0gbnVsbCkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgY29uc3QgW2tleWNvZGVzLCBiZWhhdmlvcnMsIGdseXBoc10gPSBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICAgIGxvYWRLZXljb2RlcygpLFxuICAgICAgICBsb2FkQmVoYXZpb3VyQmluZGluZ3MoKSxcbiAgICAgICAgbG9hZEtleWNvZGVHbHlwaHMoKVxuICAgICAgXSlcblxuICAgICAgLy8gVE9ETzogdXBkYXRlIHJlZmVyZW5jZXMgdG8gYmV0dGVyIHVuZGVyc3RhbmQgdGhlIGRpZmZlcmVuY2UgYmV0d2VlblxuICAgICAgLy8gXCJiZWhhdmlvcnNcIiAoZS5nLiBob2xkIHRhcCkgYW5kIHRoZSBcImJlaGF2aW9yIGJpbmRpbmdzXCIgdGhhdCBpbXBsZW1lbnRcbiAgICAgIC8vIHRoZW0gKGUuZy4gJmx0IGFuZCAmbXQpXG4gICAgICBjb25zdCBzY2hlbWFzID0gY2xvbmVEZWVwKGJlaGF2aW9ycy5iZWhhdmlvcnMpXG4gICAgICBjb25zdCBiZWhhdmlvdXJzID0gY2xvbmVEZWVwKGJlaGF2aW9ycy5iaW5kaW5ncylcblxuICAgICAga2V5Y29kZXMuaW5kZXhlZCA9IGtleUJ5KGtleWNvZGVzLCAnY29kZScpXG4gICAgICBiZWhhdmlvdXJzLmluZGV4ZWQgPSBrZXlCeShiZWhhdmlvdXJzLCAnY29kZScpXG4gICAgICBiZWhhdmlvdXJzLmNvbnRleHQgPSB7XG4gICAgICAgIG5vbmU6IGJlaGF2aW91cnMuZmlsdGVyKCh7IGNvbnRleHQgfSkgPT4gIWNvbnRleHQpLFxuICAgICAgICBtYWNyb3M6IGZpbHRlcihiZWhhdmlvdXJzLCB7IGNvbnRleHQ6ICdtYWNyb3MnIH0pXG4gICAgICB9XG4gICAgICBiZWhhdmlvdXJzLmJ5Q29udGV4dCA9IHtcbiAgICAgICAgbm9uZToga2V5QnkoYmVoYXZpb3Vycy5jb250ZXh0Lm5vbmUsICdjb2RlJyksXG4gICAgICAgIG1hY3Jvczoga2V5QnkoYmVoYXZpb3Vycy5jb250ZXh0Lm1hY3JvcywgJ2NvZGUnKVxuICAgICAgfVxuXG4gICAgICBkaXNwYXRjaCh7XG4gICAgICAgIHR5cGU6ICdERUZJTklUSU9OU19TRVQnLFxuICAgICAgICBkZWZpbml0aW9uczoge1xuICAgICAgICAgIGtleWNvZGVzLFxuICAgICAgICAgIGJlaGF2aW91cnMsXG4gICAgICAgICAgYmVoYXZpb3JzOiBzY2hlbWFzLFxuICAgICAgICAgIGJlaGF2aW9yQmluZHM6IGJlaGF2aW91cnMsXG4gICAgICAgICAgZ2x5cGhzXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSkoKVxuICB9LCBbZGVmaW5pdGlvbnMsIGRpc3BhdGNoXSlcblxuICAvLyBUT0RPOiBzaG93IGEgc3Bpbm5lciBNQVlCRVxuICBpZiAoIWRlZmluaXRpb25zKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxEZWZpbml0aW9uc0NvbnRleHQuUHJvdmlkZXIgdmFsdWU9e2RlZmluaXRpb25zfT5cbiAgICAgIHtjaGlsZHJlbn1cbiAgICA8L0RlZmluaXRpb25zQ29udGV4dC5Qcm92aWRlcj5cbiAgKVxufVxuIiwiaW1wb3J0IGZpbHRlciBmcm9tICdsb2Rhc2gvZmlsdGVyJ1xuaW1wb3J0IGdldCBmcm9tICdsb2Rhc2gvZ2V0J1xuaW1wb3J0IGlzRW1wdHkgZnJvbSAnbG9kYXNoL2lzRW1wdHknXG5pbXBvcnQga2V5QnkgZnJvbSAnbG9kYXNoL2tleUJ5J1xuaW1wb3J0IG1hcCBmcm9tICdsb2Rhc2gvbWFwJ1xuaW1wb3J0IHsgdXNlQ29udGV4dCwgdXNlTWVtbyB9IGZyb20gJ3JlYWN0J1xuXG5pbXBvcnQgeyBEZWZpbml0aW9uc0NvbnRleHQgfSBmcm9tICcuLi9Db250ZXh0cy9EZWZpbml0aW9ucydcbmltcG9ydCB7IFNlYXJjaENvbnRleHQsIFNldHRpbmdzQ29udGV4dCB9IGZyb20gJy4uL3Byb3ZpZGVycydcbmltcG9ydCB7IGdldE1lcmdlZEdseXBocyB9IGZyb20gJy4uL2tleWNvZGVzJ1xuXG5mdW5jdGlvbiBDb250ZXh0ICh7IGNoaWxkcmVuLCAuLi5wcm9wcyB9KSB7XG4gIGNvbnN0IHsga2V5bWFwIH0gPSBwcm9wc1xuICBjb25zdCB7IGtleWNvZGVzLCBiZWhhdmlvdXJzLCBnbHlwaHMgfSA9IHVzZUNvbnRleHQoRGVmaW5pdGlvbnNDb250ZXh0KVxuICBjb25zdCB7IHNldHRpbmdzIH0gPSB1c2VDb250ZXh0KFNldHRpbmdzQ29udGV4dClcblxuICBjb25zdCBtZXJnZWRHbHlwaHMgPSB1c2VNZW1vKCgpID0+IHtcbiAgICBjb25zdCBpc01hYyA9IHdpbmRvdy5uYXZpZ2F0b3IucGxhdGZvcm0uc3RhcnRzV2l0aCgnTWFjJylcbiAgICBjb25zdCBpc1dpbiA9IHdpbmRvdy5uYXZpZ2F0b3IucGxhdGZvcm0uc3RhcnRzV2l0aCgnV2luJylcbiAgICBjb25zdCBwbGF0Zm9ybSA9IChpc01hYyAmJiAnbWFjJykgfHwgKGlzV2luICYmICd3aW4nKVxuXG4gICAgcmV0dXJuIGdldE1lcmdlZEdseXBocyhnbHlwaHMsIHtcbiAgICAgIHVuaWNvZGU6IGdldChzZXR0aW5ncywgJ3VuaWNvZGVHbHlwaHMnLCB0cnVlKSxcbiAgICAgIHBsYXRmb3JtOiBnZXQoc2V0dGluZ3MsICdwbGF0Zm9ybUdseXBocycsICdhdXRvJykgIT09ICdhdXRvJ1xuICAgICAgICA/IHNldHRpbmdzLnBsYXRmb3JtR2x5cGhzXG4gICAgICAgIDogcGxhdGZvcm1cbiAgICB9KVxuICB9LCBbZ2x5cGhzLCBzZXR0aW5nc10pXG5cbiAgY29uc3QgZXh0ZW5kZWRCZWhhdmlvdXJzID0gdXNlTWVtbygoKSA9PiB7XG4gICAgY29uc3QgZnVsbExpc3QgPSBbXG4gICAgICAuLi5iZWhhdmlvdXJzLFxuICAgICAgLi4uKGtleW1hcC5iZWhhdmlvcnMgfHwgW10pLm1hcChiZWhhdmlvciA9PiAoe1xuICAgICAgICBjb2RlOiBgJiR7YmVoYXZpb3IubGFiZWxzWzBdfWAsXG4gICAgICAgIGJpbmQ6IGAmJHtiZWhhdmlvci5sYWJlbHNbMF19YCxcbiAgICAgICAgbmFtZTogYmVoYXZpb3IubmFtZSxcbiAgICAgICAgZGVzY3JpcHRpb246IGBDdXN0b20gYmVoYXZpb3I6IFwiJHtiZWhhdmlvci5wcm9wZXJ0aWVzLmxhYmVsLnJhdyB8fCBiZWhhdmlvci5uYW1lfVwiYCxcbiAgICAgICAgcGFyYW1zOiBiZWhhdmlvci5wYXJhbXNcbiAgICAgIH0pKSxcbiAgICAgIC4uLmtleW1hcC5tYWNyb3MubWFwKG1hY3JvID0+ICh7XG4gICAgICAgIGNvZGU6IGAmJHttYWNyby5sYWJlbHNbMF19YCxcbiAgICAgICAgbmFtZTogbWFjcm8ubmFtZSxcbiAgICAgICAgZGVzY3JpcHRpb246ICdDdXN0b20gbWFjcm8nLFxuICAgICAgICBwYXJhbXM6IFtdXG4gICAgICB9KSlcbiAgICBdXG5cbiAgICAvLyBUT0RPOiBhdCB0aGlzIHBvaW50IHdlJ3JlIGp1c3QgZHVwbGljYXRpbmcgd29yayB0aGF0IHdhcyBkb25lIGF0IGEgaGlnaGVyXG4gICAgLy8gbGV2ZWwuIEl0IHN0aWxsIG5lZWRzIHRvIGhhcHBlbiBoZXJlIGJlY2F1c2Ugb2YgdGhlIGV4dGVuZGVkIGxpc3Qgb2ZcbiAgICAvLyBrZXlib2FyZC1zcGVjaWZpYyBiZWhhdmlvdXJzLCBzbyB0aGUgQXBwIGNhbiBqdXN0IHBhc3MgdGhlIGxpc3Qgd2l0aG91dFxuICAgIC8vIGRvaW5nIGl0cyBvd24gaW5kZXhpbmcuXG4gICAgZnVsbExpc3QuaW5kZXhlZCA9IGtleUJ5KGZ1bGxMaXN0LCAnY29kZScpXG4gICAgZnVsbExpc3QuY29udGV4dCA9IHtcbiAgICAgIG5vbmU6IGZ1bGxMaXN0LmZpbHRlcigoeyBjb250ZXh0IH0pID0+ICFjb250ZXh0KSxcbiAgICAgIG1hY3JvczogZmlsdGVyKGZ1bGxMaXN0LCB7IGNvbnRleHQ6ICdtYWNyb3MnIH0pXG4gICAgfVxuICAgIGZ1bGxMaXN0LmJ5Q29udGV4dCA9IHtcbiAgICAgIG5vbmU6IGtleUJ5KGZ1bGxMaXN0LmNvbnRleHQubm9uZSwgJ2NvZGUnKSxcbiAgICAgIG1hY3Jvczoga2V5QnkoZnVsbExpc3QuY29udGV4dC5tYWNyb3MsICdjb2RlJylcbiAgICB9XG5cbiAgICByZXR1cm4gZnVsbExpc3RcbiAgfSwgW2JlaGF2aW91cnMsIGtleW1hcC5iZWhhdmlvcnMsIGtleW1hcC5tYWNyb3NdKVxuXG4gIGNvbnN0IGF2YWlsYWJsZUxheWVycyA9IHVzZU1lbW8oKCkgPT4gaXNFbXB0eShrZXltYXApXG4gICAgPyBbXVxuICAgIDogKFxuICAgICAgICBrZXltYXAubGF5ZXJzLm1hcCgobGF5ZXIsIGkpID0+ICh7XG4gICAgICAgICAgY29kZTogaSxcbiAgICAgICAgICBkZXNjcmlwdGlvbjogbGF5ZXIubmFtZSB8fCBgTGF5ZXIgJHtpfWBcbiAgICAgICAgfSkpXG4gICAgICApLCBba2V5bWFwXSlcblxuICAvLyBFeHRlbmQgWk1LIGRlZmluaXRpb25zIChrZXljb2RlcyBhbmQgYmVoYXZpb3Vycykgd2l0aCBhZGRpdGlvbmFsXG4gIC8vIGRlZmluaXRpb25zIHNwZWNpZmljIHRvIHRoaXMga2V5Ym9hcmQuIFRoaXMgaW5jbHVkZXMgYSBsaXN0IG9mIGxheWVycyBmb3JcbiAgLy8gbGF5ZXItcmVsYXRlZCBiZWhhdmlvdXJzIGFuZCBpbiB0aGUgZnV0dXJlIGNhbiBpbmNsdWRlIGN1c3RvbSBiZWhhdmlvdXJzXG4gIC8vIGRlZmluZWQgaW4gdGhlIGtleW1hcCBhbmQgcG90ZW50aWFsbHkgcHJlcHJvY2Vzc29yIGRlZmluaXRpb25zIGZvciBwc3VlZG9cbiAgLy8gbGF5ZXIgbmFtZXMgb3IgYWxpYXNlZCBrZXkgY29kZXMuXG4gIGNvbnN0IHNvdXJjZXMgPSB1c2VNZW1vKCgpID0+ICh7XG4gICAgY29kZToga2V5Y29kZXMuaW5kZXhlZCxcbiAgICBiZWhhdmlvdXJzOiBleHRlbmRlZEJlaGF2aW91cnMuaW5kZXhlZCxcbiAgICBiZWhhdmlvdXJzQnlDb250ZXh0OiBleHRlbmRlZEJlaGF2aW91cnMuYnlDb250ZXh0LFxuICAgIGxheWVyOiBrZXlCeShhdmFpbGFibGVMYXllcnMsICdjb2RlJylcbiAgfSksIFtrZXljb2RlcywgZXh0ZW5kZWRCZWhhdmlvdXJzLCBhdmFpbGFibGVMYXllcnNdKVxuXG4gIGNvbnN0IHNlYXJjaFRhcmdldHMgPSB1c2VNZW1vKCgpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgYmVoYXZpb3VyOiBleHRlbmRlZEJlaGF2aW91cnMsXG4gICAgICBjb2RlOiBrZXljb2Rlc1xuICAgIH1cbiAgfSwgW2V4dGVuZGVkQmVoYXZpb3Vycywga2V5Y29kZXNdKVxuXG4gIGNvbnN0IGdldFNlYXJjaFRhcmdldHMgPSB1c2VNZW1vKCgpID0+IGZ1bmN0aW9uIChwYXJhbSwgYmVoYXZpb3VyLCBjb250ZXh0ID0gJ25vbmUnKSB7XG4gICAgLy8gU3BlY2lhbCBjYXNlIGZvciBiZWhhdmlvdXIgY29tbWFuZHMgd2hpY2ggY2FuIGR5bmFtaWNhbGx5IGFkZCBhbm90aGVyXG4gICAgLy8gcGFyYW1ldGVyIHRoYXQgaXNuJ3QgZGVmaW5lZCBhdCB0aGUgcm9vdCBsZXZlbCBvZiB0aGUgYmVoYXZpb3VyLlxuICAgIC8vIEN1cnJlbnRseSB0aGlzIGlzIGp1c3QgYCZidCBCVF9TRUxgIGFuZCBpcyBvbmx5IHJlcHJlc2VudGVkIGFzIGFuIGVudW0uXG4gICAgaWYgKHBhcmFtLmVudW0pIHtcbiAgICAgIHJldHVybiBwYXJhbS5lbnVtLm1hcCh2ID0+ICh7IGNvZGU6IHYgfSkpXG4gICAgfVxuXG4gICAgaWYgKHBhcmFtLnJhdykge1xuICAgICAgcmV0dXJuIFtdXG4gICAgfVxuXG4gICAgaWYgKHBhcmFtID09PSAnY29tbWFuZCcpIHtcbiAgICAgIHJldHVybiBnZXQoc291cmNlcy5iZWhhdmlvdXJzQnlDb250ZXh0LCBbY29udGV4dCwgYmVoYXZpb3VyLCAnY29tbWFuZHMnXSwgW10pXG4gICAgfVxuXG4gICAgaWYgKCFzZWFyY2hUYXJnZXRzW3BhcmFtXSkge1xuICAgICAgY29uc29sZS5lcnJvcignY2Fubm90IGZpbmQgdGFyZ2V0IGZvcicsIHBhcmFtKVxuICAgIH1cblxuICAgIGlmIChwYXJhbSA9PT0gJ2JlaGF2aW91cicpIHtcbiAgICAgIHJldHVybiBzZWFyY2hUYXJnZXRzLmJlaGF2aW91ci5jb250ZXh0W2NvbnRleHRdXG4gICAgfVxuXG4gICAgcmV0dXJuIHNlYXJjaFRhcmdldHNbcGFyYW1dXG4gIH0sIFtzZWFyY2hUYXJnZXRzLCBzb3VyY2VzXSlcblxuICBjb25zdCBpZGVudGlmaWVycyA9IHVzZU1lbW8oKCkgPT4ge1xuICAgIHJldHVybiBbXG4gICAgICAuLi5tYXAoa2V5Y29kZXMsICdjb2RlJyksXG4gICAgICAuLi5PYmplY3Qua2V5cyhrZXltYXAuZGVmaW5lcyB8fCB7fSlcbiAgICBdXG4gIH0sIFtrZXljb2Rlcywga2V5bWFwLmRlZmluZXNdKVxuXG4gIHJldHVybiAoXG4gICAgPFNlYXJjaENvbnRleHQuUHJvdmlkZXIgdmFsdWU9e3sgZ2V0U2VhcmNoVGFyZ2V0cywgbWVyZ2VkR2x5cGhzLCBzb3VyY2VzLCBpZGVudGlmaWVycyB9fT5cbiAgICAgIHtjaGlsZHJlbn1cbiAgICA8L1NlYXJjaENvbnRleHQuUHJvdmlkZXI+XG4gIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgQ29udGV4dFxuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1syXS51c2VbMV0hLi9hY3Rpb24tYnV0dG9uLm1vZHVsZS5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1syXS51c2VbMV0hLi9hY3Rpb24tYnV0dG9uLm1vZHVsZS5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgc3R5bGVzIGZyb20gJy4vYWN0aW9uLWJ1dHRvbi5tb2R1bGUuY3NzJ1xuXG5mdW5jdGlvbiBBY3Rpb25CdXR0b24gKHsgY2hpbGRyZW4sIHNlY29uZGFyeSwgY2xhc3NOYW1lLCAuLi5wcm9wcyB9KSB7XG4gIHJldHVybiAoXG4gICAgPGJ1dHRvblxuICAgICAgY2xhc3NOYW1lPXtbXG4gICAgICAgIGNsYXNzTmFtZSxcbiAgICAgICAgc3R5bGVzLmFjdGlvbixcbiAgICAgICAgc2Vjb25kYXJ5ICYmIHN0eWxlcy5zZWNvbmRhcnlcbiAgICAgIF0uam9pbignICcpfVxuICAgICAgey4uLnByb3BzfVxuICAgID5cbiAgICAgIHtjaGlsZHJlbn1cbiAgICA8L2J1dHRvbj5cbiAgKVxufVxuXG5BY3Rpb25CdXR0b24uZGVmYXVsdFByb3BzID0ge1xuICBjbGFzc05hbWU6ICcnXG59XG5cbmV4cG9ydCBkZWZhdWx0IEFjdGlvbkJ1dHRvblxuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1syXS51c2VbMV0hLi9kaWFsb2ctYm94Lm1vZHVsZS5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1syXS51c2VbMV0hLi9kaWFsb2ctYm94Lm1vZHVsZS5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgc3R5bGVzIGZyb20gJy4vZGlhbG9nLWJveC5tb2R1bGUuY3NzJ1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBEaWFsb2dCb3ggKHByb3BzKSB7XG4gIGNvbnN0IHsgZGlzbWlzc1RleHQgPSAnT2snLCBjbGFzc2VzID0gW10sIG9uRGlzbWlzcywgY2hpbGRyZW4sIC4uLnJlc3QgfSA9IHByb3BzXG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT17W3N0eWxlcy5kaWFsb2csIC4uLmNsYXNzZXNdLmpvaW4oJyAnKX0gey4uLnJlc3R9PlxuICAgICAge2NoaWxkcmVufVxuICAgICAge2Rpc21pc3NUZXh0ICYmIChcbiAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9e3N0eWxlcy5idXR0b259IG9uQ2xpY2s9e29uRGlzbWlzc30+XG4gICAgICAgICAge2Rpc21pc3NUZXh0fVxuICAgICAgICA8L2J1dHRvbj5cbiAgICAgICl9XG4gICAgPC9kaXY+XG4gIClcbn1cbiIsImltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nXG5pbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlUmVmIH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnXG5cbmNvbnN0IHN0eWxlcyA9IHtcbiAgd3JhcHBlcjoge1xuICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgIHRvcDogJzAnLFxuICAgIGxlZnQ6ICcwJyxcbiAgICB3aWR0aDogJzEwMHZ3JyxcbiAgICBoZWlnaHQ6ICcxMDB2aCcsXG4gICAgYmFja2dyb3VuZENvbG9yOiAncmdiYSgxMDQsIDEyMywgMTYyLCAwLjM5KScsXG4gICAgYmFja2Ryb3BGaWx0ZXI6ICdibHVyKDFweCknLFxuICAgIHpJbmRleDogJzUwJyxcbiAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgIGFsaWduSXRlbXM6ICdjZW50ZXInXG4gIH0sXG4gIGNlbnRlck9ubHk6IHtcbiAgICBiYWNrZ3JvdW5kOiAndHJhbnNwYXJlbnQnLFxuICAgIHBvaW50ZXJFdmVudHM6ICdub25lJ1xuICB9LFxuICBjb250ZW50OiB7XG4gICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICBwb2ludGVyRXZlbnRzOiAnYWxsJ1xuICB9XG59XG5cbmZ1bmN0aW9uIE1vZGFsICh7IG9uRGlzbWlzcywgY2VudGVyT25seSA9IGZhbHNlLCBjaGlsZHJlbiB9KSB7XG4gIGNvbnN0IGNvbnRlbnQgPSB1c2VSZWYoKVxuICBjb25zdCBoYW5kbGVDbGljayA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uIChlKSB7XG4gICAgaWYgKG9uRGlzbWlzcyAmJiBjb250ZW50LmN1cnJlbnQgJiYgZS50YXJnZXQuY29udGFpbnMoY29udGVudC5jdXJyZW50KSkge1xuICAgICAgb25EaXNtaXNzKClcbiAgICB9XG4gIH0sIFtjb250ZW50LCBvbkRpc21pc3NdKVxuXG4gIGNvbnN0IHN0eWxlID0gY2VudGVyT25seVxuICAgID8geyAuLi5zdHlsZXMud3JhcHBlciwgLi4uc3R5bGVzLmNlbnRlck9ubHkgfVxuICAgIDogc3R5bGVzLndyYXBwZXJcblxuICByZXR1cm4gUmVhY3RET00uY3JlYXRlUG9ydGFsKFxuICAgIDxkaXYgb25DbGljaz17aGFuZGxlQ2xpY2t9IHN0eWxlPXtzdHlsZX0+XG4gICAgICA8ZGl2IHJlZj17Y29udGVudH0gc3R5bGU9e3N0eWxlcy5jb250ZW50fT5cbiAgICAgICAge2NoaWxkcmVufVxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+LFxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtb2RhbC1yb290JylcbiAgKVxufVxuXG5Nb2RhbC5wcm9wVHlwZXMgPSB7XG4gIG9uRGlzbWlzczogUHJvcFR5cGVzLmZ1bmNcbn1cblxuZXhwb3J0IGRlZmF1bHQgTW9kYWxcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMl0udXNlWzFdIS4vaW5wdXQubW9kdWxlLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzJdLnVzZVsxXSEuL2lucHV0Lm1vZHVsZS5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgc3R5bGVzIGZyb20gJy4vaW5wdXQubW9kdWxlLmNzcydcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gSW5wdXQgKHsgdmFsaWRhdG9yLCByZXF1aXJlZCA9IGZhbHNlLCB2YWx1ZSA9ICcnLCAuLi5yZXN0IH0pIHtcbiAgY29uc3QgZXJyb3IgPSB2YWxpZGF0b3IodmFsdWUpIHx8ICghdmFsdWUgJiYgcmVxdWlyZWQgJiYgJ2Nhbm5vdCBiZSBlbXB0eScpXG5cbiAgcmV0dXJuIChcbiAgICA8c3BhbiBjbGFzc05hbWU9e3N0eWxlcy53cmFwcGVyfT5cbiAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIHZhbHVlPXt2YWx1ZX0gey4uLnJlc3R9IC8+XG4gICAgICB7ZXJyb3IgJiYgPHNwYW4gY2xhc3NOYW1lPXtzdHlsZXMuZXJyb3J9PntlcnJvcn08L3NwYW4+fVxuICAgIDwvc3Bhbj5cbiAgKVxufVxuIiwiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJ1xuXG5leHBvcnQgY29uc3QgcHJvcFZhbHVlU2hhcGUgPSB7XG4gIHVzZVJhdzogUHJvcFR5cGVzLmJvb2wsXG4gIHJhdzogUHJvcFR5cGVzLnN0cmluZyxcbiAgcGFyc2VkOiBQcm9wVHlwZXMuYW55XG59XG5cbmV4cG9ydCBjb25zdCBkZXZpY2V0cmVlTm9kZVNoYXBlID0ge1xuICBuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIGxhYmVsczogUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnN0cmluZykuaXNSZXF1aXJlZCxcbiAgcHJvcGVydGllczogUHJvcFR5cGVzLm9iamVjdE9mKGZ1bmN0aW9uIChwcm9wVmFsdWUsIGtleSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgIHRyeSB7XG4gICAgICBQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMoe1xuICAgICAgICBwcm9wVmFsdWU6IFByb3BUeXBlcy5zaGFwZShwcm9wVmFsdWVTaGFwZSkuaXNSZXF1aXJlZFxuICAgICAgfSwgeyBwcm9wVmFsdWUgfSwgbG9jYXRpb24sIGNvbXBvbmVudE5hbWUpXG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKFxuICAgICAgICAnSW52YWxpZCBwcm9wIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agc3VwcGxpZWQgdG8nICtcbiAgICAgICAgJyBgJyArIGNvbXBvbmVudE5hbWUgKyAnYC4gVmFsaWRhdGlvbiBmYWlsZWQuJ1xuICAgICAgKVxuICAgIH1cbiAgfSkuaXNSZXF1aXJlZFxufVxuIiwiXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVEZXZpY2V0cmVlTm9kZU5hbWUgKHZhbHVlKSB7XG4gIGlmICh2YWx1ZS5sZW5ndGggPiAzMSkge1xuICAgIHJldHVybiAnbWF4aW11bSBsZW5ndGg6IDMxJ1xuICB9IGVsc2UgaWYgKHZhbHVlLm1hdGNoKC9eW15hLXpBLVpdLykpIHtcbiAgICByZXR1cm4gJ2ZpcnN0IGNoYXJhY3RlciBtdXN0IGJlIGEgbGV0dGVyJ1xuICB9IGVsc2UgaWYgKHZhbHVlLm1hdGNoKC9bXmEtekEtWjAtOSwuXystXS8pKSB7XG4gICAgcmV0dXJuICd2YWxpZCBjaGFyYWN0ZXJzOiBhLXpBLVowLTksLl8rLSdcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgdmFsaWRhdGVEZXZpY2V0cmVlSWRlbnRpZmllciA9IHZhbGlkYXRlRGV2aWNldHJlZU5vZGVOYW1lXG5cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZURldmljZXRyZWVMYWJlbCAodmFsdWUpIHtcbiAgaWYgKHZhbHVlLmxlbmd0aCA+IDMxKSB7XG4gICAgcmV0dXJuICdtYXhpbXVtIGxlbmd0aDogMzEnXG4gIH0gZWxzZSBpZiAodmFsdWUubWF0Y2goL15bXmEtekEtWl0vKSkge1xuICAgIHJldHVybiAnZmlyc3QgY2hhcmFjdGVyIG11c3QgYmUgYSBsZXR0ZXInXG4gIH0gZWxzZSBpZiAodmFsdWUubWF0Y2goL1teYS16QS1aMC05X10vKSkge1xuICAgIHJldHVybiAndmFsaWQgY2hhcmFjdGVyczogYS16QS1aMC05XydcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVEZXZpY2V0cmVlUmVmZXJlbmNlICh2YWx1ZSkge1xuICBpZiAodmFsdWUubGVuZ3RoID4gMzEpIHtcbiAgICByZXR1cm4gJ21heGltdW0gbGVuZ3RoOiAzMSdcbiAgfSBlbHNlIGlmICh2YWx1ZS5tYXRjaCgvXlteJl0vKSkge1xuICAgIHJldHVybiAnbXVzdCBzdGFydCB3aXRoIFwiJlwiJ1xuICB9IGVsc2UgaWYgKHZhbHVlLm1hdGNoKC9eJlteYS16QS1aXS8pKSB7XG4gICAgcmV0dXJuICdmaXJzdCBjaGFyYWN0ZXIgbXVzdCBiZSBhIGxldHRlcidcbiAgfSBlbHNlIGlmICh2YWx1ZS5zbGljZSgxKS5tYXRjaCgvW15hLXpBLVowLTlfXS8pKSB7XG4gICAgcmV0dXJuICd2YWxpZCBjaGFyYWN0ZXJzOiBhLXpBLVowLTlfJ1xuICB9XG59XG4iLCJpbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCdcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcydcblxuaW1wb3J0IElucHV0IGZyb20gJy4uLy4uLy4uL0NvbW1vbi9JbnB1dCdcbmltcG9ydCB7IGRldmljZXRyZWVOb2RlU2hhcGUgfSBmcm9tICcuL25vZGVQcm9wVHlwZXMnXG5pbXBvcnQge1xuICB2YWxpZGF0ZURldmljZXRyZWVMYWJlbCxcbiAgdmFsaWRhdGVEZXZpY2V0cmVlTm9kZU5hbWVcbn0gZnJvbSAnLi92YWxpZGF0b3JzJ1xuXG4vLyBUT0RPOiBicmVhayB0aGlzIGFwYXJ0IHRvIG1hdGNoIGluZGl2aWR1YWwgdG9nZ2xlc1xuZnVuY3Rpb24gaXNDb21iaW5lZCAobm9kZSkge1xuICBjb25zdCB7IG5hbWUgfSA9IG5vZGVcbiAgY29uc3QgeyBsYWJlbHM6IFtub2RlTGFiZWxdID0gW10gfSA9IG5vZGVcbiAgY29uc3QgeyBsYWJlbDogbGFiZWxQcm9wIH0gPSBub2RlLnByb3BlcnRpZXNcblxuICByZXR1cm4gKFxuICAgIG5hbWUudG9Mb3dlckNhc2UoKSA9PT0gKG5vZGVMYWJlbCB8fCAnJykudG9Mb3dlckNhc2UoKSAmJlxuICAgIG5hbWUudG9Mb3dlckNhc2UoKSA9PT0gKGxhYmVsUHJvcD8ucGFyc2VkIHx8ICcnKS50b0xvd2VyQ2FzZSgpXG4gIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTm9kZUlkZW50aWZpZXJzICh7IG5vZGUsIG9uVXBkYXRlIH0pIHtcbiAgLy8gVE9ETzogdHJpZ2dlciB2YWx1ZSB1cGRhdGVzIHdoZW4gdG9nZ2xpbmdcbiAgY29uc3QgW25hbWVGcm9tQmluZCwgc2V0TmFtZUZyb21CaW5kXSA9IHVzZVN0YXRlKGlzQ29tYmluZWQobm9kZSkpXG4gIGNvbnN0IFtsYWJlbEZyb21CaW5kLCBzZXRMYWJlbEZyb21CaW5kXSA9IHVzZVN0YXRlKGlzQ29tYmluZWQobm9kZSkpXG4gIGNvbnN0IFtcbiAgICBoYW5kbGVVcGRhdGVOb2RlTmFtZSxcbiAgICBoYW5kbGVVcGRhdGVOb2RlTGFiZWwsXG4gICAgaGFuZGxlVXBkYXRlTGFiZWxQcm9wZXJ0eVxuICBdID0gdXNlSWRlbnRpZmllclVwZGF0ZXJzKG5vZGUsIG9uVXBkYXRlLCBuYW1lRnJvbUJpbmQsIGxhYmVsRnJvbUJpbmQpXG5cbiAgcmV0dXJuIChcbiAgICA8dGFibGU+XG4gICAgICA8dGJvZHk+XG4gICAgICAgIDx0cj5cbiAgICAgICAgICA8dGg+QmluZDwvdGg+XG4gICAgICAgICAgPHRkPlxuICAgICAgICAgICAgPElucHV0XG4gICAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgICAgICAgdmFsdWU9e25vZGUubGFiZWxzWzBdIHx8ICcnfVxuICAgICAgICAgICAgICByZXF1aXJlZD17dHJ1ZX1cbiAgICAgICAgICAgICAgdmFsaWRhdG9yPXt2YWxpZGF0ZURldmljZXRyZWVMYWJlbH1cbiAgICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZVVwZGF0ZU5vZGVMYWJlbH1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC90ZD5cbiAgICAgICAgPC90cj5cbiAgICAgICAgPHRyPlxuICAgICAgICAgIDx0aD5Ob2RlPC90aD5cbiAgICAgICAgICA8dGQ+XG4gICAgICAgICAgICA8SW5wdXRcbiAgICAgICAgICAgICAgdmFsdWU9e25vZGUubmFtZX1cbiAgICAgICAgICAgICAgcmVxdWlyZWQ9e3RydWV9XG4gICAgICAgICAgICAgIHJlYWRPbmx5PXtuYW1lRnJvbUJpbmR9XG4gICAgICAgICAgICAgIGRpc2FibGVkPXtuYW1lRnJvbUJpbmR9XG4gICAgICAgICAgICAgIHZhbGlkYXRvcj17dmFsaWRhdGVEZXZpY2V0cmVlTm9kZU5hbWV9XG4gICAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVVcGRhdGVOb2RlTmFtZX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8bGFiZWwgdGl0bGU9XCJTZXQgYXV0b21hdGljYWxseSB1c2luZyBiaW5kIG5hbWVcIj5cbiAgICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgICAgdHlwZT1cImNoZWNrYm94XCJcbiAgICAgICAgICAgICAgICBjaGVja2VkPXtuYW1lRnJvbUJpbmR9XG4gICAgICAgICAgICAgICAgb25DaGFuZ2U9e2UgPT4gc2V0TmFtZUZyb21CaW5kKGUudGFyZ2V0LmNoZWNrZWQpfVxuICAgICAgICAgICAgICAvPiBBdXRvbWF0aWNcbiAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgPC90ZD5cbiAgICAgICAgPC90cj5cbiAgICAgICAgPHRyPlxuICAgICAgICAgIDx0aD5MYWJlbDwvdGg+XG4gICAgICAgICAgPHRkPlxuICAgICAgICAgICAgPElucHV0XG4gICAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgICAgICAgdmFsdWU9e25vZGUucHJvcGVydGllcy5sYWJlbC5wYXJzZWQgfHwgJyd9XG4gICAgICAgICAgICAgIHJlcXVpcmVkPXt0cnVlfVxuICAgICAgICAgICAgICByZWFkT25seT17bGFiZWxGcm9tQmluZH1cbiAgICAgICAgICAgICAgZGlzYWJsZWQ9e2xhYmVsRnJvbUJpbmR9XG4gICAgICAgICAgICAgIHZhbGlkYXRvcj17KCkgPT4gbnVsbH1cbiAgICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZVVwZGF0ZUxhYmVsUHJvcGVydHl9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPGxhYmVsIHRpdGxlPVwiU2V0IGF1dG9tYXRpY2FsbHkgdXNpbmcgYmluZCBuYW1lXCI+XG4gICAgICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgICAgIHR5cGU9XCJjaGVja2JveFwiXG4gICAgICAgICAgICAgICAgY2hlY2tlZD17bGFiZWxGcm9tQmluZH1cbiAgICAgICAgICAgICAgICBvbkNoYW5nZT17ZSA9PiBzZXRMYWJlbEZyb21CaW5kKGUudGFyZ2V0LmNoZWNrZWQpfVxuICAgICAgICAgICAgICAvPiBBdXRvbWF0aWNcbiAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgPC90ZD5cbiAgICAgICAgPC90cj5cbiAgICAgIDwvdGJvZHk+XG4gICAgPC90YWJsZT5cbiAgKVxufVxuXG5mdW5jdGlvbiB1c2VJZGVudGlmaWVyVXBkYXRlcnMgKG5vZGUsIG9uVXBkYXRlLCBuYW1lRnJvbUJpbmQsIGxhYmVsRnJvbUJpbmQpIHtcbiAgY29uc3QgaGFuZGxlVXBkYXRlTm9kZU5hbWUgPSB1c2VDYWxsYmFjayhlID0+IHtcbiAgICBvblVwZGF0ZSh7IC4uLm5vZGUsIG5hbWU6IGUudGFyZ2V0LnZhbHVlIH0pXG4gIH0sIFtub2RlLCBvblVwZGF0ZV0pXG5cbiAgY29uc3QgaGFuZGxlVXBkYXRlTm9kZUxhYmVsID0gdXNlQ2FsbGJhY2soZSA9PiB7XG4gICAgY29uc3QgeyB2YWx1ZSB9ID0gZS50YXJnZXRcbiAgICBjb25zdCBsYWJlbHMgPSBbdmFsdWUsIC4uLm5vZGUubGFiZWxzLnNsaWNlKDEpXVxuICAgIGNvbnN0IG5hbWUgPSBuYW1lRnJvbUJpbmQgPyB2YWx1ZSA6IG5vZGUubmFtZVxuICAgIGNvbnN0IHByb3BlcnRpZXMgPSBsYWJlbEZyb21CaW5kXG4gICAgICA/IHtcbiAgICAgICAgICAuLi5ub2RlLnByb3BlcnRpZXMsXG4gICAgICAgICAgbGFiZWw6IHtcbiAgICAgICAgICAgIHBhcnNlZDogdmFsdWUudG9VcHBlckNhc2UoKSxcbiAgICAgICAgICAgIHJhdzogYFwiJHt2YWx1ZS50b1VwcGVyQ2FzZSgpfVwiYCxcbiAgICAgICAgICAgIHVzZVJhdzogZmFsc2VcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIDogbm9kZS5wcm9wZXJ0aWVzXG5cbiAgICBvblVwZGF0ZSh7IC4uLm5vZGUsIG5hbWUsIGxhYmVscywgcHJvcGVydGllcyB9KVxuICB9LCBbbm9kZSwgb25VcGRhdGUsIG5hbWVGcm9tQmluZCwgbGFiZWxGcm9tQmluZF0pXG5cbiAgY29uc3QgaGFuZGxlVXBkYXRlTGFiZWxQcm9wZXJ0eSA9IHVzZUNhbGxiYWNrKGUgPT4gb25VcGRhdGUoe1xuICAgIC4uLm5vZGUsXG4gICAgcHJvcGVydGllczoge1xuICAgICAgLi4ubm9kZS5wcm9wZXJ0aWVzLFxuICAgICAgbGFiZWw6IHtcbiAgICAgICAgLi4ubm9kZS5wcm9wZXJ0aWVzLmxhYmVsLFxuICAgICAgICBwYXJzZWQ6IGUudGFyZ2V0LnZhbHVlLFxuICAgICAgICB1c2VSYXc6IGZhbHNlXG4gICAgICB9XG4gICAgfVxuICB9KSwgW25vZGUsIG9uVXBkYXRlXSlcblxuICByZXR1cm4gW1xuICAgIGhhbmRsZVVwZGF0ZU5vZGVOYW1lLFxuICAgIGhhbmRsZVVwZGF0ZU5vZGVMYWJlbCxcbiAgICBoYW5kbGVVcGRhdGVMYWJlbFByb3BlcnR5XG4gIF1cbn1cblxuTm9kZUlkZW50aWZpZXJzLnByb3BUeXBlcyA9IHtcbiAgbm9kZTogUHJvcFR5cGVzLnNoYXBlKGRldmljZXRyZWVOb2RlU2hhcGUpLmlzUmVxdWlyZWQsXG4gIG9uVXBkYXRlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG59XG4iLCJpbXBvcnQgTm9kZUlkZW50aWZpZXJzIGZyb20gJy4uL0NvbW1vbi9EZXZpY2V0cmVlL05vZGVJZGVudGlmaWVycydcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gQmVoYXZpb3JIZWFkZXIgKHByb3BzKSB7XG4gIGNvbnN0IHsgbm9kZSB9ID0gcHJvcHNcblxuICByZXR1cm4gKFxuICAgIDxkaXY+XG4gICAgICA8cD48Y29kZT57bm9kZS5wcm9wZXJ0aWVzLmNvbXBhdGlibGUucGFyc2VkfTwvY29kZT48L3A+XG4gICAgICA8Tm9kZUlkZW50aWZpZXJzIHsuLi5wcm9wc30gLz5cbiAgICA8L2Rpdj5cbiAgKVxufVxuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1syXS51c2VbMV0hLi9zdHlsZXMubW9kdWxlLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzJdLnVzZVsxXSEuL3N0eWxlcy5tb2R1bGUuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IHN0eWxlcyBmcm9tICcuL3N0eWxlcy5tb2R1bGUuY3NzJ1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBQcm9wZXJ0eU5hbWUgKHsgcHJvcGVydHksIHNjaGVtYSB9KSB7XG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIDxzcGFuIGNsYXNzTmFtZT17c3R5bGVzLnByb3BlcnR5TmFtZX0gdGl0bGU9e3Byb3BlcnR5fT5cbiAgICAgICAge3Byb3BlcnR5fVxuICAgICAgPC9zcGFuPlxuICAgICAge3NjaGVtYS5kZXByZWNhdGVkQnkgJiYgKFxuICAgICAgICA8c3ViIGNsYXNzTmFtZT17c3R5bGVzLnByb3BlcnR5RGVwcmVjYXRpb259PlxuICAgICAgICAgIChkZXByZWNhdGVkKVxuICAgICAgICA8L3N1Yj5cbiAgICAgICl9XG4gICAgPC8+XG4gIClcbn1cbiIsImltcG9ydCBtYXAgZnJvbSAnbG9kYXNoL21hcCdcblxuY29uc3QgREVGQVVMVF9TSVpFID0gNjVcbmNvbnN0IERFRkFVTFRfUEFERElORyA9IDVcblxuZXhwb3J0IGZ1bmN0aW9uIGdldENvbXB1dGVkUGFyYW1zIChwb3NpdGlvbiwgc2l6ZSwgcm90YXRpb24gPSB7fSkge1xuICByZXR1cm4ge1xuICAgIHg6IHBvc2l0aW9uLnggKiAoREVGQVVMVF9TSVpFICsgREVGQVVMVF9QQURESU5HKSxcbiAgICB5OiBwb3NpdGlvbi55ICogKERFRkFVTFRfU0laRSArIERFRkFVTFRfUEFERElORyksXG4gICAgdTogc2l6ZS51ICogREVGQVVMVF9TSVpFICsgREVGQVVMVF9QQURESU5HICogKHNpemUudSAtIDEpLFxuICAgIGg6IHNpemUuaCAqIERFRkFVTFRfU0laRSArIERFRkFVTFRfUEFERElORyAqIChzaXplLmggLSAxKSxcbiAgICByeDogKHBvc2l0aW9uLnggLSAocm90YXRpb24ueCB8fCBwb3NpdGlvbi54KSkgKiAtKERFRkFVTFRfU0laRSArIERFRkFVTFRfUEFERElORyksXG4gICAgcnk6IChwb3NpdGlvbi55IC0gKHJvdGF0aW9uLnkgfHwgcG9zaXRpb24ueSkpICogLShERUZBVUxUX1NJWkUgKyBERUZBVUxUX1BBRERJTkcpLFxuICAgIGE6IHJvdGF0aW9uLmEgfHwgMFxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRLZXlTdHlsZXMgKHBvc2l0aW9uLCBzaXplLCByb3RhdGlvbikge1xuICBjb25zdCB7IHgsIHksIHUsIGgsIGEsIHJ4LCByeSB9ID0gZ2V0Q29tcHV0ZWRQYXJhbXMocG9zaXRpb24sIHNpemUsIHJvdGF0aW9uKVxuXG4gIHJldHVybiB7XG4gICAgdG9wOiBgJHt5fXB4YCxcbiAgICBsZWZ0OiBgJHt4fXB4YCxcbiAgICB3aWR0aDogYCR7dX1weGAsXG4gICAgaGVpZ2h0OiBgJHtofXB4YCxcbiAgICB0cmFuc2Zvcm1PcmlnaW46IGAke3J4fXB4ICR7cnl9cHhgLFxuICAgIHRyYW5zZm9ybTogYHJvdGF0ZSgke2EgfHwgMH1kZWcpYFxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2Zvcm1LZXlQb2x5Z29uIChwb3NpdGlvbiwgc2l6ZSwgcm90YXRpb24pIHtcbiAgY29uc3QgeyB4LCB5LCB1LCBoLCBhLCByeCwgcnkgfSA9IGdldENvbXB1dGVkUGFyYW1zKHBvc2l0aW9uLCBzaXplLCByb3RhdGlvbilcblxuICBjb25zdCBwb2ludHMgPSBbXG4gICAgeyB4OiAwLCB5OiAwIH0sXG4gICAgeyB4OiB1LCB5OiAwIH0sXG4gICAgeyB4OiB1LCB5OiBoIH0sXG4gICAgeyB4OiAwLCB5OiBoIH1cbiAgXVxuXG4gIGZ1bmN0aW9uIHRyYW5zbGF0ZSAocG9pbnQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgeDogcG9pbnQueCArIHgsXG4gICAgICB5OiBwb2ludC55ICsgeVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJvdGF0ZSAocG9pbnQpIHtcbiAgICBjb25zdCB4ID0gcG9pbnQueCAtIHJ4XG4gICAgY29uc3QgeSA9IHBvaW50LnkgLSByeVxuICAgIGNvbnN0IGFuZ2xlID0gTWF0aC5QSSAqIGEgLyAxODBcblxuICAgIHJldHVybiB7XG4gICAgICB4OiByeCArIHggKiBNYXRoLmNvcyhhbmdsZSkgLSB5ICogTWF0aC5zaW4oYW5nbGUpLFxuICAgICAgeTogcnkgKyB5ICogTWF0aC5jb3MoYW5nbGUpICsgeCAqIE1hdGguc2luKGFuZ2xlKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBwb2ludHMubWFwKHJvdGF0ZSkubWFwKHRyYW5zbGF0ZSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEtleUJvdW5kaW5nQm94IChwb3NpdGlvbiwgc2l6ZSwgcm90YXRpb24pIHtcbiAgY29uc3QgdHJhbnNmb3JtZWQgPSB0cmFuc2Zvcm1LZXlQb2x5Z29uKHBvc2l0aW9uLCBzaXplLCByb3RhdGlvbilcbiAgY29uc3QgeFZhbHVlcyA9IG1hcCh0cmFuc2Zvcm1lZCwgJ3gnKVxuICBjb25zdCB5VmFsdWVzID0gbWFwKHRyYW5zZm9ybWVkLCAneScpXG4gIGNvbnN0IG1pbiA9IHtcbiAgICB4OiBNYXRoLm1pbiguLi54VmFsdWVzKSxcbiAgICB5OiBNYXRoLm1pbiguLi55VmFsdWVzKVxuICB9XG4gIGNvbnN0IG1heCA9IHtcbiAgICB4OiBNYXRoLm1heCguLi54VmFsdWVzKSxcbiAgICB5OiBNYXRoLm1heCguLi55VmFsdWVzKVxuICB9XG5cbiAgcmV0dXJuIHsgbWluLCBtYXggfVxufVxuIiwiaW1wb3J0IHsgdHJhbnNmb3JtS2V5UG9seWdvbiwgZ2V0S2V5Qm91bmRpbmdCb3ggfSBmcm9tICcuLi9rZXktdW5pdHMnXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRMYXlvdXRQb2x5Z29ucyAobGF5b3V0LCB7IHNjYWxlID0gMSB9KSB7XG4gIHJldHVybiBsYXlvdXQubWFwKGtleSA9PiB0cmFuc2Zvcm1LZXlQb2x5Z29uKFxuICAgIHsgeDoga2V5LngsIHk6IGtleS55IH0sXG4gICAgeyB1OiBrZXkudSB8fCBrZXkudyB8fCAxLCBoOiBrZXkuaCB8fCAxIH0sXG4gICAgeyB4OiBrZXkucngsIHk6IGtleS5yeSwgYToga2V5LnIgfVxuICApKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0V3JhcHBlckRpbWVuc2lvbnMgKGxheW91dCkge1xuICByZXR1cm4gbGF5b3V0Lm1hcChrZXkgPT4gZ2V0S2V5Qm91bmRpbmdCb3goXG4gICAgeyB4OiBrZXkueCwgeToga2V5LnkgfSxcbiAgICB7IHU6IGtleS51IHx8IGtleS53IHx8IDEsIGg6IGtleS5oIHx8IDEgfSxcbiAgICB7IHg6IGtleS5yeCwgeToga2V5LnJ5LCBhOiBrZXkuciB9XG4gICkpLnJlZHVjZSgoeyB4LCB5IH0sIHsgbWF4IH0pID0+ICh7XG4gICAgeDogTWF0aC5tYXgoeCwgbWF4LngpLFxuICAgIHk6IE1hdGgubWF4KHksIG1heC55KVxuICB9KSwgeyB4OiAwLCB5OiAwIH0pXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRXcmFwcGVyU3R5bGUgKGxheW91dE9yQkJveCwgeyBzY2FsZSA9IDEsIG92ZXJyaWRlcyA9IHt9IH0gPSB7fSkge1xuICBjb25zdCBiYm94ID0gQXJyYXkuaXNBcnJheShsYXlvdXRPckJCb3gpXG4gICAgPyBnZXRXcmFwcGVyRGltZW5zaW9ucyhsYXlvdXRPckJCb3gpXG4gICAgOiBsYXlvdXRPckJCb3hcblxuICByZXR1cm4ge1xuICAgIHdpZHRoOiBgJHtiYm94LnggKiBzY2FsZX1weGAsXG4gICAgaGVpZ2h0OiBgJHtiYm94LnkgKiBzY2FsZX1weGAsXG4gICAgbWFyZ2luOiAnMCBhdXRvJyxcbiAgICBwYWRkaW5nOiAnMCA0MHB4IDQwcHgnLFxuICAgIC4uLm92ZXJyaWRlc1xuICB9XG59XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzJdLnVzZVsxXSEuL3N0eWxlcy5tb2R1bGUuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMl0udXNlWzFdIS4vc3R5bGVzLm1vZHVsZS5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnXG5cbmV4cG9ydCBjb25zdCBwb3NpdGlvbiA9IHtcbiAgeDogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxuICB5OiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWRcbn1cblxuZXhwb3J0IGNvbnN0IHJvdGF0aW9uID0ge1xuICBhOiBQcm9wVHlwZXMubnVtYmVyLFxuICByeDogUHJvcFR5cGVzLm51bWJlcixcbiAgcnk6IFByb3BUeXBlcy5udW1iZXJcbn1cblxuZXhwb3J0IGNvbnN0IGRpbWVuc2lvbnMgPSB7XG4gIHU6IFByb3BUeXBlcy5udW1iZXIsXG4gIGg6IFByb3BUeXBlcy5udW1iZXJcbn1cblxuZXhwb3J0IGNvbnN0IGtleUxheW91dCA9IFByb3BUeXBlcy5zaGFwZSh7XG4gIC4uLnBvc2l0aW9uLFxuICAuLi5yb3RhdGlvbixcbiAgLi4uZGltZW5zaW9uc1xufSlcblxuZXhwb3J0IGNvbnN0IGxheW91dCA9IFByb3BUeXBlcy5hcnJheU9mKFxuICBrZXlMYXlvdXRcbilcbiIsImltcG9ydCBwaWNrIGZyb20gJ2xvZGFzaC9waWNrJ1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJ1xuXG5pbXBvcnQgeyBnZXRLZXlTdHlsZXMgfSBmcm9tICcuLi9rZXktdW5pdHMnXG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vc3R5bGVzLm1vZHVsZS5jc3MnXG5pbXBvcnQgKiBhcyBsYXlvdXRQcm9wVHlwZXMgZnJvbSAnLi9sYXlvdXRQcm9wVHlwZXMnXG5cbmNvbnN0IGdldFBvc2l0aW9uID0ga2V5TGF5b3V0ID0+IHBpY2soa2V5TGF5b3V0LCBbJ3gnLCAneSddKVxuY29uc3QgZ2V0Um90YXRpb24gPSBrZXlMYXlvdXQgPT4ge1xuICBjb25zdCB7IHJ4LCByeSwgciB9ID0ga2V5TGF5b3V0XG4gIHJldHVybiB7IHg6IHJ4LCB5OiByeSwgYTogciB9XG59XG5jb25zdCBnZXRTaXplID0ga2V5TGF5b3V0ID0+IHtcbiAgY29uc3QgeyB3ID0gMSwgdSA9IHcsIGggPSAxIH0gPSBrZXlMYXlvdXRcbiAgcmV0dXJuIHsgdSwgaCB9XG59XG5cbmZ1bmN0aW9uIFBsYWNlciAocHJvcHMpIHtcbiAgY29uc3QgeyBrZXlMYXlvdXQsIGNoaWxkcmVuLCAuLi5yZXN0IH0gPSBwcm9wc1xuICBjb25zdCBwb3NpdGlvbiA9IGdldFBvc2l0aW9uKGtleUxheW91dClcbiAgY29uc3Qgcm90YXRpb24gPSBnZXRSb3RhdGlvbihrZXlMYXlvdXQpXG4gIGNvbnN0IHNpemUgPSBnZXRTaXplKGtleUxheW91dClcbiAgY29uc3QgcG9zaXRpb25pbmdTdHlsZSA9IGdldEtleVN0eWxlcyhwb3NpdGlvbiwgc2l6ZSwgcm90YXRpb24pXG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2XG4gICAgICBjbGFzc05hbWU9e3N0eWxlcy5wbGFjZXJ9XG4gICAgICBzdHlsZT17cG9zaXRpb25pbmdTdHlsZX1cbiAgICAgIGRhdGEtdT17c2l6ZS51fVxuICAgICAgZGF0YS1oPXtzaXplLmh9XG4gICAgICB7Li4ucmVzdH1cbiAgICA+XG4gICAgICB7Y2hpbGRyZW59XG4gICAgPC9kaXY+XG4gIClcbn1cblxuUGxhY2VyLnByb3BUeXBlcyA9IHtcbiAgc2NhbGU6IFByb3BUeXBlcy5udW1iZXIsXG4gIGtleUxheW91dDogbGF5b3V0UHJvcFR5cGVzLmtleUxheW91dC5pc1JlcXVpcmVkXG59XG5cblBsYWNlci5kZWZhdWx0UHJvcHMgPSB7XG4gIHNjYWxlOiAxXG59XG5cbmV4cG9ydCBkZWZhdWx0IFBsYWNlclxuIiwiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJ1xuXG5pbXBvcnQgUGxhY2VyIGZyb20gJy4vS2V5UGxhY2VyJ1xuaW1wb3J0ICogYXMgbGF5b3V0UHJvcFR5cGVzIGZyb20gJy4vbGF5b3V0UHJvcFR5cGVzJ1xuXG5mdW5jdGlvbiBLZXlib2FyZExheW91dCAocHJvcHMpIHtcbiAgY29uc3QgeyBsYXlvdXQsIHJlbmRlcktleSwgc2NhbGUgfSA9IHByb3BzXG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IHN0eWxlPXt7XG4gICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgIHRyYW5zZm9ybTogYHNjYWxlKCR7c2NhbGV9KWAsXG4gICAgICB0cmFuc2Zvcm1PcmlnaW46IDBcbiAgICB9fT5cbiAgICAgIHtsYXlvdXQubWFwKChrZXlMYXlvdXQsIGluZGV4KSA9PiAoXG4gICAgICAgIDxQbGFjZXIga2V5PXtpbmRleH0ga2V5TGF5b3V0PXtrZXlMYXlvdXR9PlxuICAgICAgICAgIHtyZW5kZXJLZXkoeyBpbmRleCwga2V5TGF5b3V0IH0pfVxuICAgICAgICA8L1BsYWNlcj5cbiAgICAgICkpfVxuICAgIDwvZGl2PlxuICApXG59XG5cbktleWJvYXJkTGF5b3V0LnByb3BUeXBlcyA9IHtcbiAgbGF5b3V0OiBsYXlvdXRQcm9wVHlwZXMubGF5b3V0LmlzUmVxdWlyZWQsXG4gIHJlbmRlcktleTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgc2NhbGU6IFByb3BUeXBlcy5udW1iZXJcbn1cblxuS2V5Ym9hcmRMYXlvdXQuZGVmYXVsdFByb3BzID0ge1xuICBzY2FsZTogMVxufVxuXG5leHBvcnQgZGVmYXVsdCBLZXlib2FyZExheW91dFxuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1syXS51c2VbMV0hLi9zdHlsZXMubW9kdWxlLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzJdLnVzZVsxXSEuL3N0eWxlcy5tb2R1bGUuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IGNvbXBhY3QgZnJvbSAnbG9kYXNoL2NvbXBhY3QnXG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vc3R5bGVzLm1vZHVsZS5jc3MnXG5cbmZ1bmN0aW9uIEtleVdyYXBwZXIgKHByb3BzKSB7XG4gIGNvbnN0IHtcbiAgICBjaGlsZHJlbixcbiAgICBzZWxlY3RhYmxlID0gdHJ1ZSxcbiAgICB0aGVtZUNsYXNzID0gdW5kZWZpbmVkLFxuICAgIGNsYXNzTmFtZSA9ICcnLFxuICAgIC4uLnJlc3RcbiAgfSA9IHByb3BzXG5cbiAgY29uc3QgY2xhc3NlcyA9IGNvbXBhY3QoW1xuICAgIHN0eWxlcy5rZXksXG4gICAgc2VsZWN0YWJsZSAmJiBzdHlsZXMuc2VsZWN0YWJsZSxcbiAgICB0aGVtZUNsYXNzID8/IHN0eWxlcy5rZXlEZWZhdWx0VGhlbWUsXG4gICAgY2xhc3NOYW1lXG4gIF0pLmpvaW4oJyAnKVxuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9e2NsYXNzZXN9IHsuLi5yZXN0fT5cbiAgICAgIHtjaGlsZHJlbn1cbiAgICA8L2Rpdj5cbiAgKVxufVxuXG5leHBvcnQgZGVmYXVsdCBLZXlXcmFwcGVyXG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzJdLnVzZVsxXSEuL2RyYWdTZWxlY3Rvci5tb2R1bGUuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMl0udXNlWzFdIS4vZHJhZ1NlbGVjdG9yLm1vZHVsZS5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgY2xhbXAgZnJvbSAnbG9kYXNoL2NsYW1wJ1xuaW1wb3J0IGNvbXBhY3QgZnJvbSAnbG9kYXNoL2NvbXBhY3QnXG5pbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlU3RhdGUsIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0J1xuXG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vZHJhZ1NlbGVjdG9yLm1vZHVsZS5jc3MnXG5cbmZ1bmN0aW9uIERyYWdTZWxlY3RDb250YWluZXIgKHByb3BzKSB7XG4gIGNvbnN0IHsgb25Nb3VzZURvd24gfSA9IHByb3BzXG4gIGNvbnN0IHsgc2VsZWN0aW5nLCBuZWdhdGUsIHJlY3QsIHNpemUgfSA9IHByb3BzXG4gIGNvbnN0IHsgY2hpbGRyZW4gfSA9IHByb3BzXG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2XG4gICAgICBvbk1vdXNlRG93bj17b25Nb3VzZURvd259XG4gICAgICBjbGFzc05hbWU9e2NvbXBhY3QoW1xuICAgICAgICBzdHlsZXMuY29udGFpbmVyLFxuICAgICAgICBzZWxlY3RpbmcgJiYgc3R5bGVzLnNlbGVjdGluZ1xuICAgICAgXSkuam9pbignICcpfVxuICAgID5cbiAgICAgIHtjaGlsZHJlbn1cbiAgICAgIHtzZWxlY3RpbmcgJiYgKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17Y29tcGFjdChbXG4gICAgICAgICAgc3R5bGVzLm92ZXJsYXksXG4gICAgICAgICAgbmVnYXRlICYmIHN0eWxlcy5uZWdhdGVcbiAgICAgICAgXSkuam9pbignICcpfSBzdHlsZT17e1xuICAgICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICAgIHRvcDogcmVjdFswXVsxXSArICdweCcsXG4gICAgICAgICAgbGVmdDogcmVjdFswXVswXSArICdweCcsXG4gICAgICAgICAgd2lkdGg6IHNpemVbMF0gKyAncHgnLFxuICAgICAgICAgIGhlaWdodDogc2l6ZVsxXSArICdweCdcbiAgICAgICAgfX0gLz5cbiAgICAgICl9XG4gICAgPC9kaXY+XG4gIClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVzZURyYWdTZWxlY3RvciAoeyBwb2x5Z29ucywgb25TZWxlY3QgfSkge1xuICBjb25zdCBbc3RhdGUsIHNldFN0YXRlXSA9IHVzZVN0YXRlKHt9KVxuXG4gIGNvbnN0IGhhbmRsZU1vdXNlRG93biA9IHVzZUNhbGxiYWNrKGV2ZW50ID0+IHtcbiAgICBjb25zdCBvZmZzZXRFbGVtZW50ID0gZ2V0UmVsYXRpdmVBbmNlc3RvcihldmVudC50YXJnZXQpXG4gICAgY29uc3QgcmVjdCA9IG9mZnNldEVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcbiAgICBjb25zdCB7IGNsaWVudFg6IHgsIGNsaWVudFk6IHkgfSA9IGV2ZW50XG5cbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgc2V0U3RhdGUoe1xuICAgICAgc3RhcnQ6IFt4LCB5XSxcbiAgICAgIGludGVyc2VjdGluZzogW10sXG4gICAgICBvZmZzZXQ6IFtyZWN0LmxlZnQsIHJlY3QudG9wXSxcbiAgICAgIG9mZnNldFJlY3Q6IHJlY3RcbiAgICB9KVxuICB9LCBbc2V0U3RhdGVdKVxuXG4gIGNvbnN0IGhhbmRsZUtleURvd24gPSB1c2VDYWxsYmFjayhldmVudCA9PiB7XG4gICAgaWYgKCFzdGF0ZS5zZWxlY3RpbmcgfHwgZXZlbnQucmVwZWF0IHx8ICFldmVudC5zaGlmdEtleSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgc2V0U3RhdGUoc3RhdGUgPT4gKHsgLi4uc3RhdGUsIG5lZ2F0ZTogdHJ1ZSB9KSlcbiAgfSwgW3N0YXRlLnNlbGVjdGluZywgc2V0U3RhdGVdKVxuXG4gIGNvbnN0IGhhbmRsZUtleVVwID0gdXNlQ2FsbGJhY2soZXZlbnQgPT4ge1xuICAgIGlmICghc3RhdGUubmVnYXRlIHx8IGV2ZW50LnJlcGVhdCB8fCBldmVudC5zaGlmdEtleSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgc2V0U3RhdGUoc3RhdGUgPT4gKHsgLi4uc3RhdGUsIG5lZ2F0ZTogZmFsc2UgfSkpXG4gIH0sIFtzdGF0ZS5uZWdhdGUsIHNldFN0YXRlXSlcblxuICBjb25zdCBoYW5kbGVNb3VzZU1vdmUgPSB1c2VDYWxsYmFjayhldmVudCA9PiB7XG4gICAgY29uc3QgeyBzdGFydCwgb2Zmc2V0LCBvZmZzZXRSZWN0IH0gPSBzdGF0ZVxuICAgIGlmICghc3RhcnQpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IHsgc2hpZnRLZXksIGFsdEtleSwgY2xpZW50WCwgY2xpZW50WSB9ID0gZXZlbnRcbiAgICBjb25zdCBbeDAsIHkwXSA9IHN0YXJ0XG5cbiAgICBjb25zdCB4ID0gY2xhbXAoY2xpZW50WCwgb2Zmc2V0UmVjdC5sZWZ0LCBvZmZzZXRSZWN0LnJpZ2h0KVxuICAgIGNvbnN0IHkgPSBjbGFtcChjbGllbnRZLCBvZmZzZXRSZWN0LnRvcCwgb2Zmc2V0UmVjdC5ib3R0b20pXG5cbiAgICBjb25zdCByZWN0ID0gW1xuICAgICAgW01hdGgubWluKHgsIHgwKSAtIG9mZnNldFswXSwgTWF0aC5taW4oeSwgeTApIC0gb2Zmc2V0WzFdXSxcbiAgICAgIFtNYXRoLm1heCh4LCB4MCkgLSBvZmZzZXRbMF0sIE1hdGgubWF4KHksIHkwKSAtIG9mZnNldFsxXV1cbiAgICBdXG4gICAgY29uc3Qgc2l6ZSA9IFtcbiAgICAgIE1hdGguYWJzKHggLSB4MCksXG4gICAgICBNYXRoLmFicyh5IC0geTApXG4gICAgXVxuXG4gICAgc2V0U3RhdGUoc3RhdGUgPT4gKHtcbiAgICAgIC4uLnN0YXRlLFxuICAgICAgbmVnYXRlOiBzaGlmdEtleSB8fCBhbHRLZXksXG4gICAgICBzZWxlY3Rpbmc6IHNpemVbMF0gPiAzIHx8IHNpemVbMV0gPiAzLFxuICAgICAgaW50ZXJzZWN0aW5nOiBnZXRJbnRlcnNlY3RpbmdQb2x5Z29ucyhyZWN0LCBwb2x5Z29ucyksXG4gICAgICByZWN0LFxuICAgICAgc2l6ZVxuICAgIH0pKVxuICB9LCBbc3RhdGUsIHBvbHlnb25zLCBzZXRTdGF0ZV0pXG5cbiAgY29uc3QgaGFuZGxlTW91c2VVcCA9IHVzZUNhbGxiYWNrKGV2ZW50ID0+IHtcbiAgICBpZiAoc3RhdGUuc3RhcnQpIHtcbiAgICAgIGlmIChzdGF0ZS5zZWxlY3RpbmcpIHtcbiAgICAgICAgb25TZWxlY3Qoe1xuICAgICAgICAgIG5lZ2F0ZTogc3RhdGUubmVnYXRlLFxuICAgICAgICAgIGludGVyc2VjdGluZzogc3RhdGUuaW50ZXJzZWN0aW5nXG4gICAgICAgIH0pXG4gICAgICB9XG5cbiAgICAgIHNldFN0YXRlKHsgc3RhcnQ6IG51bGwsIHNlbGVjdGluZzogZmFsc2UgfSlcbiAgICB9XG4gIH0sIFtvblNlbGVjdCwgc3RhdGUsIHNldFN0YXRlXSlcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgaGFuZGxlTW91c2VVcClcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgaGFuZGxlTW91c2VNb3ZlKVxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgaGFuZGxlS2V5RG93bilcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCBoYW5kbGVLZXlVcClcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBoYW5kbGVNb3VzZVVwKVxuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIGhhbmRsZU1vdXNlTW92ZSlcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgaGFuZGxlS2V5RG93bilcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXl1cCcsIGhhbmRsZUtleVVwKVxuICAgIH1cbiAgfSwgW2hhbmRsZU1vdXNlVXAsIGhhbmRsZU1vdXNlTW92ZSwgaGFuZGxlS2V5RG93biwgaGFuZGxlS2V5VXBdKVxuXG4gIHJldHVybiBbe1xuICAgIC4uLnN0YXRlLFxuICAgIG9uTW91c2VEb3duOiBoYW5kbGVNb3VzZURvd24sXG4gICAgb25Nb3VzZU1vdmU6IGhhbmRsZU1vdXNlTW92ZVxuICB9LCBEcmFnU2VsZWN0Q29udGFpbmVyXVxufVxuXG5mdW5jdGlvbiBnZXRSZWxhdGl2ZUFuY2VzdG9yIChlbGVtZW50KSB7XG4gIC8vIFRoaXMgaXNuJ3QgZ3JlYXQuIEl0ZXJhdGluZyB0aHJvdWdoIGFuY2VzdG9ycyBpcyBub3QgaWRlYWwsIGhhdmluZyB0byBjaGVja1xuICAvLyB0aGUgaGVpZ2h0IG9mIHRoZSBib3VuZGluZyBjbGllbnQgcmVjdCBiZWNhdXNlIEkga25vdyB0aGF0IG9uZSBvZiB0aGVtIGlzXG4gIC8vIG5vdCBnb2luZyB0byBnaXZlIG1lIHRoZSBkZXNpcmVkIHJlc3VsdCBpcyB3b3JzZS4gVGhpcyBpcyBsZXNzIGFwcHJvcHJpYXRlXG4gIC8vIHRoYW4gdXNpbmcgYSByZWYsIGJ1dCBJIGRvbid0IGxpa2UgcGFzc2luZyBpdCBiYWNrIGZyb20gdGhlIGhvb2sgYXMgaXRzXG4gIC8vIFwiY29udGV4dFwiIGluIG9yZGVyIHRvIHBhc3MgaXQgdG8gdGhlIHJlbmRlcmVkIGNvbXBvbmVudC5cbiAgLy8gTW9zdCBsaWtlbHkgdGhpcyB3aG9sZSBjb21wb25lbnQgc2hvdWxkIGJlIGEgd3JhcHBlciBvZiB0aGUgcGxhY2VkIGtleXMgYW5kXG4gIC8vIHVzaW5nIGNsb25lRWxlbWVudCBvciBzb21ldGhpbmcsIEkgZG9uJ3Qga25vdy5cbiAgd2hpbGUgKFxuICAgIChlbGVtZW50ID0gZWxlbWVudC5wYXJlbnROb2RlKSAmJlxuICAgIChlbGVtZW50LnN0eWxlLnBvc2l0aW9uICE9PSAncmVsYXRpdmUnIHx8ICFlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodClcbiAgKTtcblxuICByZXR1cm4gZWxlbWVudFxufVxuXG5mdW5jdGlvbiBnZXRJbnRlcnNlY3RpbmdQb2x5Z29ucyAocmVjdCwgcG9seWdvbnMpIHtcbiAgcmV0dXJuIHBvbHlnb25zLnJlZHVjZSgoYWNjLCBwb2ludHMsIGkpID0+IHtcbiAgICBpZiAocG9pbnRzLnNvbWUoKHsgeCwgeSB9KSA9PiAoXG4gICAgICByZWN0WzBdWzBdIDwgeCAmJiB4IDwgcmVjdFsxXVswXSAmJlxuICAgICAgcmVjdFswXVsxXSA8IHkgJiYgeSA8IHJlY3RbMV1bMV1cbiAgICApKSkge1xuICAgICAgYWNjLnB1c2goaSlcbiAgICB9XG4gICAgcmV0dXJuIGFjY1xuICB9LCBbXSlcbn1cbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMl0udXNlWzFdIS4va2V5UG9zaXRpb25TZWxlY3RvclN0eWxlcy5tb2R1bGUuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMl0udXNlWzFdIS4va2V5UG9zaXRpb25TZWxlY3RvclN0eWxlcy5tb2R1bGUuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1syXS51c2VbMV0hLi90aXAubW9kdWxlLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzJdLnVzZVsxXSEuL3RpcC5tb2R1bGUuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IEljb24gZnJvbSAnLi9JY29uJ1xuaW1wb3J0IHN0eWxlcyBmcm9tICcuL3RpcC5tb2R1bGUuY3NzJ1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBUaXAgKHsgY2hpbGRyZW4sIGNsYXNzTmFtZSA9ICcnIH0pIHtcbiAgY29uc3QgY2xhc3NOYW1lcyA9IFtzdHlsZXMudGlwLCBjbGFzc05hbWVdLmpvaW4oJyAnKVxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPXtjbGFzc05hbWVzfT5cbiAgICAgIDxJY29uIG5hbWU9XCJoYW5kLXBvaW50LXVwXCIgLz4ge2NoaWxkcmVufVxuICAgIDwvZGl2PlxuICApXG59XG4iLCJpbXBvcnQgeyBjcmVhdGVDb250ZXh0LCB1c2VNZW1vIH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBnZXRXcmFwcGVyRGltZW5zaW9ucywgZ2V0V3JhcHBlclN0eWxlIH0gZnJvbSAnLi4vS2V5Ym9hcmQvdXRpbCdcblxuZXhwb3J0IGNvbnN0IExheW91dENvbnRleHQgPSBjcmVhdGVDb250ZXh0KHtcbiAgbGF5b3V0OiBbXSxcbiAgYmluZGluZ0NvdW50OiAwLFxuICB3cmFwcGVyRGltZW5zaW9uczoge30sXG4gIHdyYXBwZXJTdHlsZToge31cbn0pXG5cbmV4cG9ydCBmdW5jdGlvbiBMYXlvdXRDb250ZXh0UHJvdmlkZXIgKHsgbGF5b3V0LCBjaGlsZHJlbiB9KSB7XG4gIGNvbnN0IGJpbmRpbmdDb3VudCA9IHVzZU1lbW8oKCkgPT4gbGF5b3V0Lmxlbmd0aCwgW2xheW91dC5sZW5ndGhdKVxuICBjb25zdCB3cmFwcGVyRGltZW5zaW9ucyA9IHVzZU1lbW8oKCkgPT4gZ2V0V3JhcHBlckRpbWVuc2lvbnMobGF5b3V0KSwgW2xheW91dF0pXG4gIGNvbnN0IHdyYXBwZXJTdHlsZSA9IHVzZU1lbW8oKCkgPT4gZ2V0V3JhcHBlclN0eWxlKHdyYXBwZXJEaW1lbnNpb25zKSwgW3dyYXBwZXJEaW1lbnNpb25zXSlcblxuICBjb25zdCBjb250ZXh0ID0ge1xuICAgIGxheW91dCxcbiAgICBiaW5kaW5nQ291bnQsXG4gICAgd3JhcHBlckRpbWVuc2lvbnMsXG4gICAgd3JhcHBlclN0eWxlXG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxMYXlvdXRDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXtjb250ZXh0fT5cbiAgICAgIHtjaGlsZHJlbn1cbiAgICA8L0xheW91dENvbnRleHQuUHJvdmlkZXI+XG4gIClcbn1cbiIsImltcG9ydCB7IHVzZUNhbGxiYWNrLCB1c2VDb250ZXh0LCB1c2VNZW1vLCB1c2VSZWR1Y2VyIH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnXG5cbmltcG9ydCB7IGdldExheW91dFBvbHlnb25zLCBnZXRXcmFwcGVyU3R5bGUgfSBmcm9tICcuLi91dGlsJ1xuaW1wb3J0IEtleWJvYXJkTGF5b3V0IGZyb20gJy4uL0tleWJvYXJkTGF5b3V0J1xuaW1wb3J0IEtleVdyYXBwZXIgZnJvbSAnLi4vS2V5cy9LZXlXcmFwcGVyJ1xuXG5pbXBvcnQgeyB1c2VEcmFnU2VsZWN0b3IgfSBmcm9tICcuL0RyYWdTZWxlY3RvcidcbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9rZXlQb3NpdGlvblNlbGVjdG9yU3R5bGVzLm1vZHVsZS5jc3MnXG5pbXBvcnQgeyBjb21wYWN0IH0gZnJvbSAnbG9kYXNoJ1xuaW1wb3J0IFRpcCBmcm9tICcuLi8uLi9Db21tb24vVGlwJ1xuaW1wb3J0IHsgTGF5b3V0Q29udGV4dCB9IGZyb20gJy4uLy4uL0NvbnRleHRzL0xheW91dCdcblxuY29uc3QgbGF5b3V0U2NhbGUgPSAwLjJcbmNvbnN0IGdldFBvbHlnb25zID0gbGF5b3V0ID0+IHtcbiAgY29uc3QgcG9seWdvbnMgPSBnZXRMYXlvdXRQb2x5Z29ucyhsYXlvdXQsIHsgc2NhbGU6IGxheW91dFNjYWxlIH0pXG4gIGZvciAoY29uc3QgcG9seWdvbiBvZiBwb2x5Z29ucykge1xuICAgIGZvciAoY29uc3QgcG9pbnQgb2YgcG9seWdvbikge1xuICAgICAgcG9pbnQueCAqPSBsYXlvdXRTY2FsZVxuICAgICAgcG9pbnQueSAqPSBsYXlvdXRTY2FsZVxuICAgIH1cbiAgfVxuICByZXR1cm4gcG9seWdvbnNcbn1cblxuZnVuY3Rpb24gdXNlVXNhZ2VNZXRyaWNzICgpIHtcbiAgY29uc3QgW3N0YXRlLCBkaXNwYXRjaF0gPSB1c2VSZWR1Y2VyKChzdGF0ZSwgYWN0aW9uKSA9PiB7XG4gICAgc3dpdGNoIChhY3Rpb24pIHtcbiAgICAgIGNhc2UgJ0lOQ1JFTUVOVF9NQU5VQUxfU0VMRUNUSU9OJzpcbiAgICAgICAgcmV0dXJuIHsgLi4uc3RhdGUsIG1hbnVhbFNlbGVjdGlvbkNvdW50OiBzdGF0ZS5tYW51YWxTZWxlY3Rpb25Db3VudCArIDEgfVxuICAgICAgY2FzZSAnSU5DUkVNRU5UX01BTlVBTF9ERVNFTEVDVElPTic6XG4gICAgICAgIHJldHVybiB7IC4uLnN0YXRlLCBtYW51YWxEZVNlbGVjdGlvbkNvdW50OiBzdGF0ZS5tYW51YWxEZVNlbGVjdGlvbkNvdW50ICsgMSB9XG4gICAgICBjYXNlICdUUkFDS19EUkFHX1NFTEVDVElPTic6XG4gICAgICAgIHJldHVybiB7IC4uLnN0YXRlLCB1c2VkRHJhZ1NlbGVjdGlvbjogdHJ1ZSB9XG4gICAgICBjYXNlICdUUkFDS19EUkFHX0RFU0VMRUNUSU9OJzpcbiAgICAgICAgcmV0dXJuIHsgLi4uc3RhdGUsIHVzZWREcmFnRGVTZWxlY3Rpb246IHRydWUgfVxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbnJlY29nbml6ZWQgYWN0aW9uIHR5cGUgaW4gJHthY3Rpb259YClcbiAgICB9XG4gIH0sIHtcbiAgICBtYW51YWxTZWxlY3Rpb25Db3VudDogMCxcbiAgICBtYW51YWxEZVNlbGVjdGlvbkNvdW50OiAwLFxuICAgIHVzZWREcmFnU2VsZWN0aW9uOiBmYWxzZSxcbiAgICB1c2VkRHJhZ0RlU2VsZWN0aW9uOiBmYWxzZVxuICB9KVxuXG4gIGNvbnN0IG1hbnVhbFNlbGVjdGlvbiA9IHVzZUNhbGxiYWNrKCgpID0+IGRpc3BhdGNoKCdJTkNSRU1FTlRfTUFOVUFMX1NFTEVDVElPTicpLCBbZGlzcGF0Y2hdKVxuICBjb25zdCBtYW51YWxEZVNlbGVjdGlvbiA9IHVzZUNhbGxiYWNrKCgpID0+IGRpc3BhdGNoKCdJTkNSRU1FTlRfTUFOVUFMX0RFU0VMRUNUSU9OJyksIFtkaXNwYXRjaF0pXG4gIGNvbnN0IGRyYWdTZWxlY3Rpb24gPSB1c2VDYWxsYmFjaygoKSA9PiBkaXNwYXRjaCgnVFJBQ0tfRFJBR19TRUxFQ1RJT04nKSwgW2Rpc3BhdGNoXSlcbiAgY29uc3QgZHJhZ0RlU2VsZWN0aW9uID0gdXNlQ2FsbGJhY2soKCkgPT4gZGlzcGF0Y2goJ1RSQUNLX0RSQUdfREVTRUxFQ1RJT04nKSwgW2Rpc3BhdGNoXSlcblxuICByZXR1cm4ge1xuICAgIHNob3dTZWxlY3RUaXA6ICFzdGF0ZS51c2VkRHJhZ1NlbGVjdGlvbiAmJiBzdGF0ZS5tYW51YWxTZWxlY3Rpb25Db3VudCA+IDMsXG4gICAgc2hvd0RlU2VsZWN0VGlwOiAhc3RhdGUudXNlZERyYWdEZVNlbGVjdGlvbiAmJiBzdGF0ZS5tYW51YWxEZVNlbGVjdGlvbkNvdW50ID4gMyxcbiAgICBhY3Rpb25zOiB7XG4gICAgICBtYW51YWxTZWxlY3Rpb24sXG4gICAgICBtYW51YWxEZVNlbGVjdGlvbixcbiAgICAgIGRyYWdTZWxlY3Rpb24sXG4gICAgICBkcmFnRGVTZWxlY3Rpb25cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gS2V5UG9zaXRpb25TZWxlY3RvciAoeyB2YWx1ZSwgcHJvbXB0LCBvblVwZGF0ZSB9KSB7XG4gIGNvbnN0IHsgbGF5b3V0LCB3cmFwcGVyRGltZW5zaW9ucyB9ID0gdXNlQ29udGV4dChMYXlvdXRDb250ZXh0KVxuICBjb25zdCBrZXlQb2x5Z29ucyA9IHVzZU1lbW8oKCkgPT4gZ2V0UG9seWdvbnMobGF5b3V0KSwgW2xheW91dF0pXG4gIGNvbnN0IHdyYXBwZXJTdHlsZSA9IHVzZU1lbW8oKCkgPT4gZ2V0V3JhcHBlclN0eWxlKHdyYXBwZXJEaW1lbnNpb25zLCB7XG4gICAgc2NhbGU6IGxheW91dFNjYWxlLFxuICAgIG92ZXJyaWRlczoge1xuICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICBwYWRkaW5nOiAwLFxuICAgICAgbWFyZ2luOiAwXG4gICAgfVxuICB9KSwgW3dyYXBwZXJEaW1lbnNpb25zXSlcblxuICBjb25zdCB7XG4gICAgc2hvd1NlbGVjdFRpcCxcbiAgICBzaG93RGVTZWxlY3RUaXAsXG4gICAgYWN0aW9uczogc2VsZWN0aW9uQWN0aW9uc1xuICB9ID0gdXNlVXNhZ2VNZXRyaWNzKClcblxuICBjb25zdCBoYW5kbGVEcmFnU2VsZWN0ID0gdXNlQ2FsbGJhY2soKHsgbmVnYXRlLCBpbnRlcnNlY3RpbmcgfSkgPT4ge1xuICAgIG5lZ2F0ZSA/IHNlbGVjdGlvbkFjdGlvbnMuZHJhZ0RlU2VsZWN0aW9uKCkgOiBzZWxlY3Rpb25BY3Rpb25zLmRyYWdTZWxlY3Rpb24oKVxuICAgIG9uVXBkYXRlKFxuICAgICAgbmVnYXRlXG4gICAgICAgID8gdmFsdWUuZmlsdGVyKGkgPT4gIWludGVyc2VjdGluZy5pbmNsdWRlcyhpKSlcbiAgICAgICAgOiBbLi4udmFsdWUsIC4uLmludGVyc2VjdGluZ11cbiAgICApXG4gIH0sIFt2YWx1ZSwgb25VcGRhdGUsIHNlbGVjdGlvbkFjdGlvbnNdKVxuXG4gIGNvbnN0IGhhbmRsZVNlbGVjdEtleSA9IHVzZUNhbGxiYWNrKGluZGV4ID0+IHtcbiAgICBjb25zdCBpc1NlbGVjdGVkID0gdmFsdWUuaW5jbHVkZXMoaW5kZXgpXG4gICAgaXNTZWxlY3RlZCA/IHNlbGVjdGlvbkFjdGlvbnMubWFudWFsRGVTZWxlY3Rpb24oKSA6IHNlbGVjdGlvbkFjdGlvbnMubWFudWFsU2VsZWN0aW9uKClcblxuICAgIG9uVXBkYXRlKFxuICAgICAgaXNTZWxlY3RlZFxuICAgICAgICA/IHZhbHVlLmZpbHRlcihrZXlQb3NpdGlvbiA9PiBrZXlQb3NpdGlvbiAhPT0gaW5kZXgpXG4gICAgICAgIDogWy4uLnZhbHVlLCBpbmRleF1cbiAgICApXG4gIH0sIFt2YWx1ZSwgb25VcGRhdGUsIHNlbGVjdGlvbkFjdGlvbnNdKVxuXG4gIGNvbnN0IFtkcmFnUHJvcHMsIERyYWdTZWxlY3RDb250YWluZXJdID0gdXNlRHJhZ1NlbGVjdG9yKHtcbiAgICBvblNlbGVjdDogaGFuZGxlRHJhZ1NlbGVjdCxcbiAgICBwb2x5Z29uczoga2V5UG9seWdvbnNcbiAgfSlcblxuICBjb25zdCBpbnRlcnNlY3RpbmcgPSBkcmFnUHJvcHMuc2VsZWN0aW5nXG4gICAgPyBkcmFnUHJvcHMuaW50ZXJzZWN0aW5nXG4gICAgOiBbXVxuXG4gIGNvbnN0IHNlbGVjdGVkSW5kaWNlcyA9IHZhbHVlXG4gIGNvbnN0IHByZXZpZXdBZGRpbmdJbmRpY2VzID0gZHJhZ1Byb3BzLm5lZ2F0ZSA/IFtdIDogaW50ZXJzZWN0aW5nLmZpbHRlcihpbmRleCA9PiAhc2VsZWN0ZWRJbmRpY2VzLmluY2x1ZGVzKGluZGV4KSlcbiAgY29uc3QgcHJldmlld1JlbW92aW5nSW5kaWNlcyA9IGRyYWdQcm9wcy5uZWdhdGUgPyBpbnRlcnNlY3RpbmcuZmlsdGVyKGluZGV4ID0+IHNlbGVjdGVkSW5kaWNlcy5pbmNsdWRlcyhpbmRleCkpIDogW11cblxuICByZXR1cm4gKFxuICAgIDxkaXYgc3R5bGU9e3dyYXBwZXJTdHlsZX0+XG4gICAgICA8RHJhZ1NlbGVjdENvbnRhaW5lciB7Li4uZHJhZ1Byb3BzfT5cbiAgICAgICAgPEtleWJvYXJkTGF5b3V0XG4gICAgICAgICAgbGF5b3V0PXtsYXlvdXR9XG4gICAgICAgICAgYmluZGluZ3M9e1tdfVxuICAgICAgICAgIHNjYWxlPXtsYXlvdXRTY2FsZX1cbiAgICAgICAgICByZW5kZXJLZXk9eyh7IGluZGV4IH0pID0+IChcbiAgICAgICAgICAgIDxLZXlXcmFwcGVyXG4gICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IGhhbmRsZVNlbGVjdEtleShpbmRleCl9XG4gICAgICAgICAgICAgIHRoZW1lQ2xhc3M9e2NvbXBhY3QoW1xuICAgICAgICAgICAgICAgIHN0eWxlcy5rZXksXG4gICAgICAgICAgICAgICAgc2VsZWN0ZWRJbmRpY2VzLmluY2x1ZGVzKGluZGV4KSAmJiBzdHlsZXMuaGlnaGxpZ2h0LFxuICAgICAgICAgICAgICAgIHByZXZpZXdBZGRpbmdJbmRpY2VzLmluY2x1ZGVzKGluZGV4KSAmJiBzdHlsZXMucHJldmlld0FkZCxcbiAgICAgICAgICAgICAgICBwcmV2aWV3UmVtb3ZpbmdJbmRpY2VzLmluY2x1ZGVzKGluZGV4KSAmJiBzdHlsZXMucHJldmlld1JlbW92ZVxuICAgICAgICAgICAgICBdKS5qb2luKCcgJyl9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICl9XG4gICAgICAgIC8+XG4gICAgICAgIHtwcm9tcHQgJiYgPHByb21wdCAvPn1cbiAgICAgICAge3Nob3dTZWxlY3RUaXAgJiYgPFRpcCBjbGFzc05hbWU9e3N0eWxlcy50aXB9PkRyYWcgdG8gc2VsZWN0IGEgcmVnaW9uPC9UaXA+fVxuICAgICAgICB7c2hvd0RlU2VsZWN0VGlwICYmIDxUaXAgY2xhc3NOYW1lPXtzdHlsZXMudGlwfT5TaGlmdCtEcmFnIHRvIGRlLXNlbGVjdCBhIHJlZ2lvbjwvVGlwPn1cbiAgICAgIDwvRHJhZ1NlbGVjdENvbnRhaW5lcj5cbiAgICA8L2Rpdj5cbiAgKVxufVxuXG5LZXlQb3NpdGlvblNlbGVjdG9yLnByb3BUeXBlcyA9IHtcbiAgb25VcGRhdGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIHZhbHVlOiBQcm9wVHlwZXMuYXJyYXlPZihcbiAgICBQcm9wVHlwZXMubnVtYmVyXG4gICkuaXNSZXF1aXJlZCxcbiAgcHJvbXB0OiBQcm9wVHlwZXMubm9kZVxufVxuXG5leHBvcnQgZGVmYXVsdCBLZXlQb3NpdGlvblNlbGVjdG9yXG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzJdLnVzZVsxXSEuL3N0eWxlcy5tb2R1bGUuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMl0udXNlWzFdIS4vc3R5bGVzLm1vZHVsZS5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgSWNvbiBmcm9tICcuLi8uLi8uLi9Db21tb24vSWNvbidcbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9zdHlsZXMubW9kdWxlLmNzcydcblxuZXhwb3J0IGZ1bmN0aW9uIFJhd1Byb3BlcnR5VmFsdWUgKHsgcHJvcCwgc2NoZW1hLCBvblVwZGF0ZSB9KSB7XG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIDxJY29uIG5hbWU9XCJjb2RlXCIgdGl0bGU9XCJSYXcgcHJvcGVydHkgdmFsdWVcIiAvPiA8aW5wdXRcbiAgICAgICAgcmVxdWlyZWQ9e3NjaGVtYT8ucmVxdWlyZWR9XG4gICAgICAgIHZhbHVlPXtwcm9wPy5yYXd9XG4gICAgICAgIG9uQ2hhbmdlPXtlID0+IG9uVXBkYXRlKHtcbiAgICAgICAgICAuLi5wcm9wLFxuICAgICAgICAgIHJhdzogZS50YXJnZXQudmFsdWUsXG4gICAgICAgICAgdXNlUmF3OiB0cnVlXG4gICAgICAgIH0pfVxuICAgICAgLz5cbiAgICA8Lz5cbiAgKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gQ29uc3RQcm9wZXJ0eVZhbHVlICh7IHNjaGVtYSB9KSB7XG4gIHJldHVybiAoXG4gICAgPHNwYW4gY2xhc3NOYW1lPXtbXG4gICAgICBzdHlsZXMucHJvcGVydHlWYWx1ZSxcbiAgICAgIHN0eWxlcy5yZWFkb25seVxuICAgIF0uam9pbignICcpfT5cbiAgICAgIHtzY2hlbWEuY29uc3R9XG4gICAgPC9zcGFuPlxuICApXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBTdHJpbmdQcm9wZXJ0eVZhbHVlICh7IHByb3AsIHNjaGVtYSwgb25VcGRhdGUgfSkge1xuICByZXR1cm4gKFxuICAgIDxpbnB1dFxuICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgY2xhc3NOYW1lPXtzdHlsZXMucHJvcGVydHlWYWx1ZX1cbiAgICAgIHZhbHVlPXtwcm9wPy5wYXJzZWQgPz8gJyd9XG4gICAgICBwbGFjZWhvbGRlcj17c2NoZW1hLmRlZmF1bHQgJiYgYERlZmF1bHQ6ICR7c2NoZW1hLmRlZmF1bHR9YH1cbiAgICAgIG9uQ2hhbmdlPXtlID0+IHtcbiAgICAgICAgb25VcGRhdGUoe1xuICAgICAgICAgIC4uLnByb3AsXG4gICAgICAgICAgcGFyc2VkOiBlLnRhcmdldC52YWx1ZSxcbiAgICAgICAgICB1c2VSYXc6IGZhbHNlXG4gICAgICAgIH0pXG4gICAgICB9fVxuICAgIC8+XG4gIClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEludGVnZXJQcm9wZXJ0eVZhbHVlICh7IHByb3AsIHNjaGVtYSwgb25VcGRhdGUgfSkge1xuICByZXR1cm4gKFxuICAgIDxpbnB1dFxuICAgICAgdHlwZT1cIm51bWJlclwiXG4gICAgICBjbGFzc05hbWU9e3N0eWxlcy5wcm9wZXJ0eVZhbHVlfVxuICAgICAgdmFsdWU9e3Byb3A/LnBhcnNlZCA/PyAnJ31cbiAgICAgIHBsYWNlaG9sZGVyPXtzY2hlbWEuZGVmYXVsdCAmJiBgRGVmYXVsdDogJHtzY2hlbWEuZGVmYXVsdH1gfVxuICAgICAgb25DaGFuZ2U9e2UgPT4ge1xuICAgICAgICBvblVwZGF0ZSh7XG4gICAgICAgICAgLi4ucHJvcCxcbiAgICAgICAgICBwYXJzZWQ6IE51bWJlcihlLnRhcmdldC52YWx1ZSksXG4gICAgICAgICAgdXNlUmF3OiBmYWxzZVxuICAgICAgICB9KVxuICAgICAgfX1cbiAgICAvPlxuICApXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBCb29sZWFuUHJvcGVydHlWYWx1ZSAoeyBwcm9wLCBvblVwZGF0ZSB9KSB7XG4gIHJldHVybiAoXG4gICAgPGlucHV0XG4gICAgICB0eXBlPVwiY2hlY2tib3hcIlxuICAgICAgY2xhc3NOYW1lPXtzdHlsZXMucHJvcGVydHlWYWx1ZX1cbiAgICAgIGNoZWNrZWQ9e3Byb3A/LnBhcnNlZCB8fCBmYWxzZX1cbiAgICAgIG9uQ2hhbmdlPXtlID0+IHtcbiAgICAgICAgb25VcGRhdGUoe1xuICAgICAgICAgIHBhcnNlZDogISFlLnRhcmdldC5jaGVja2VkLFxuICAgICAgICAgIHVzZVJhdzogZmFsc2VcbiAgICAgICAgfSlcbiAgICAgIH19XG4gICAgLz5cbiAgKVxufVxuIiwiXG5leHBvcnQgY29uc3QgY3ljbGUgPSAoYXJyYXksIGluZGV4LCBzdGVwID0gMSkgPT4ge1xuICBjb25zdCBuZXh0ID0gKGluZGV4ICsgc3RlcCkgJSBhcnJheS5sZW5ndGhcbiAgcmV0dXJuIG5leHQgPCAwID8gYXJyYXkubGVuZ3RoICsgbmV4dCA6IG5leHRcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNjcm9sbEludG9WaWV3SWZOZWVkZWQgKGVsZW1lbnQsIGFsaWduVG9Ub3ApIHtcbiAgY29uc3Qgc2Nyb2xsID0gZWxlbWVudC5vZmZzZXRQYXJlbnQuc2Nyb2xsVG9wXG4gIGNvbnN0IGhlaWdodCA9IGVsZW1lbnQub2Zmc2V0UGFyZW50Lm9mZnNldEhlaWdodFxuICBjb25zdCB0b3AgPSBlbGVtZW50Lm9mZnNldFRvcFxuICBjb25zdCBib3R0b20gPSB0b3AgKyBlbGVtZW50LnNjcm9sbEhlaWdodFxuXG4gIGlmICh0b3AgPCBzY3JvbGwgfHwgYm90dG9tID4gc2Nyb2xsICsgaGVpZ2h0KSB7XG4gICAgZWxlbWVudC5zY3JvbGxJbnRvVmlldyhhbGlnblRvVG9wKVxuICB9XG59XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzJdLnVzZVsxXSEuL3N0eWxlLm1vZHVsZS5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1syXS51c2VbMV0hLi9zdHlsZS5tb2R1bGUuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJ1xuaW1wb3J0IHsgdXNlQ2FsbGJhY2ssIHVzZUVmZmVjdCwgdXNlUmVmLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0J1xuXG5pbXBvcnQgeyBjeWNsZSwgc2Nyb2xsSW50b1ZpZXdJZk5lZWRlZCB9IGZyb20gJy4vdXRpbCdcbmltcG9ydCBzdHlsZSBmcm9tICcuL3N0eWxlLm1vZHVsZS5jc3MnXG5cbmZ1bmN0aW9uIFJlc3VsdExpc3QgKHsgcmVzdWx0cywgb25TZWxlY3QsIHJlbmRlclJlc3VsdCB9KSB7XG4gIGNvbnN0IFtjdXJzb3JJbmRleCwgc2V0Q3Vyc29ySW5kZXhdID0gdXNlU3RhdGUoMClcbiAgY29uc3QgbGlzdFJlZiA9IHVzZVJlZihudWxsKVxuXG4gIGNvbnN0IG1vdmVDdXJzb3IgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoaW5pdGlhbCwgb2Zmc2V0KSB7XG4gICAgaWYgKHJlc3VsdHMubGVuZ3RoID09PSAwKSB7XG4gICAgICBzZXRDdXJzb3JJbmRleChudWxsKVxuICAgICAgcmV0dXJuXG4gICAgfSBlbHNlIGlmIChvZmZzZXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgc2V0Q3Vyc29ySW5kZXgoaW5pdGlhbClcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IG5leHQgPSBjdXJzb3JJbmRleCAhPT0gbnVsbFxuICAgICAgPyBjeWNsZShyZXN1bHRzLCBjdXJzb3JJbmRleCwgb2Zmc2V0KVxuICAgICAgOiBpbml0aWFsXG5cbiAgICBjb25zdCBzZWxlY3RvciA9IGBsaVtkYXRhLXJlc3VsdC1pbmRleD1cIiR7bmV4dH1cIl1gXG4gICAgY29uc3QgZWxlbWVudCA9IGxpc3RSZWYuY3VycmVudD8ucXVlcnlTZWxlY3RvcihzZWxlY3RvcilcblxuICAgIHNjcm9sbEludG9WaWV3SWZOZWVkZWQoZWxlbWVudCwgZmFsc2UpXG4gICAgc2V0Q3Vyc29ySW5kZXgobmV4dClcbiAgfSwgW3Jlc3VsdHMsIGN1cnNvckluZGV4LCBzZXRDdXJzb3JJbmRleF0pXG5cbiAgY29uc3QgaGFuZGxlSGlnaGxpZ2h0TmV4dCA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICBtb3ZlQ3Vyc29yKDAsIDEpXG4gIH0sIFttb3ZlQ3Vyc29yXSlcblxuICBjb25zdCBoYW5kbGVIaWdodGlnaHRQcmV2ID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgIG1vdmVDdXJzb3IocmVzdWx0cy5sZW5ndGggLSAxLCAtMSlcbiAgfSwgW21vdmVDdXJzb3IsIHJlc3VsdHNdKVxuXG4gIGNvbnN0IGhhbmRsZVNlbGVjdEFjdGl2ZSA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uIChldmVudCkge1xuICAgIG9uU2VsZWN0KHJlc3VsdHNbY3Vyc29ySW5kZXhdLCBldmVudClcbiAgfSwgW3Jlc3VsdHMsIGN1cnNvckluZGV4LCBvblNlbGVjdF0pXG5cbiAgY29uc3QgaGFuZGxlS2V5RG93biA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uIChldmVudCkge1xuICAgIGNvbnN0IG1hcHBpbmcgPSB7XG4gICAgICBBcnJvd0Rvd246IGhhbmRsZUhpZ2hsaWdodE5leHQsXG4gICAgICBBcnJvd1VwOiBoYW5kbGVIaWdodGlnaHRQcmV2LFxuICAgICAgRW50ZXI6IGhhbmRsZVNlbGVjdEFjdGl2ZVxuICAgIH1cblxuICAgIGNvbnN0IGFjdGlvbiA9IG1hcHBpbmdbZXZlbnQua2V5XVxuICAgIGlmIChhY3Rpb24pIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpXG4gICAgICBhY3Rpb24oZXZlbnQpXG4gICAgfVxuICB9LCBbXG4gICAgaGFuZGxlSGlnaGxpZ2h0TmV4dCxcbiAgICBoYW5kbGVIaWdodGlnaHRQcmV2LFxuICAgIGhhbmRsZVNlbGVjdEFjdGl2ZVxuICBdKVxuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgaGFuZGxlS2V5RG93bilcbiAgICByZXR1cm4gKCkgPT4gZG9jdW1lbnQuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgaGFuZGxlS2V5RG93bilcbiAgfSwgW2xpc3RSZWYsIGhhbmRsZUtleURvd25dKVxuXG4gIHJldHVybiAoXG4gICAgPHVsIGNsYXNzTmFtZT17c3R5bGUucmVzdWx0c30gcmVmPXtsaXN0UmVmfT5cbiAgICAgIHtyZXN1bHRzLm1hcCgocmVzdWx0LCBpKSA9PiAoXG4gICAgICAgIDxsaVxuICAgICAgICAgIGtleT17aX1cbiAgICAgICAgICBjbGFzc05hbWU9e2N1cnNvckluZGV4ID09PSBpID8gc3R5bGUuaGlnaGxpZ2h0ZWQgOiAnJ31cbiAgICAgICAgICB0aXRsZT17cmVzdWx0LmRlc2NyaXB0aW9ufVxuICAgICAgICAgIGRhdGEtcmVzdWx0LWluZGV4PXtpfVxuICAgICAgICAgIG9uQ2xpY2s9e2V2ZW50ID0+IG9uU2VsZWN0KHJlc3VsdCwgZXZlbnQpfVxuICAgICAgICAgIG9uRG91YmxlQ2xpY2s9e2V2ZW50ID0+IG9uU2VsZWN0KHJlc3VsdCwgZXZlbnQpfVxuICAgICAgICAgIG9uTW91c2VPdmVyPXsoKSA9PiBtb3ZlQ3Vyc29yKGkpfVxuICAgICAgICA+XG4gICAgICAgICAge3JlbmRlclJlc3VsdChyZXN1bHQsIGkpfVxuICAgICAgICA8L2xpPlxuICAgICAgKSl9XG4gICAgPC91bD5cbiAgKVxufVxuXG5SZXN1bHRMaXN0LnByb3BUeXBlcyA9IHtcbiAgcmVzdWx0czogUHJvcFR5cGVzLmFycmF5LmlzUmVxdWlyZWQsXG4gIG9uU2VsZWN0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICByZW5kZXJSZXN1bHQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbn1cblxuZXhwb3J0IGRlZmF1bHQgUmVzdWx0TGlzdFxuIiwiaW1wb3J0IGZ1enp5c29ydCBmcm9tICdmdXp6eXNvcnQnXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnXG5pbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlTWVtbywgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCdcblxuaW1wb3J0IEljb24gZnJvbSAnLi4vQ29tbW9uL0ljb24nXG5pbXBvcnQgc3R5bGUgZnJvbSAnLi9zdHlsZS5tb2R1bGUuY3NzJ1xuXG5jb25zdCBzZWFyY2hUaHJlc2hvbGQgPSAxMFxuXG5mdW5jdGlvbiBmb2N1c0lucHV0IChub2RlKSB7XG4gIGlmIChub2RlKSB7XG4gICAgbm9kZS5mb2N1cygpXG4gICAgbm9kZS5zZWxlY3QoKVxuICB9XG59XG5cbmNvbnN0IFNlYXJjaEZpbHRlciA9ICh7IGNob2ljZXMsIHNlYXJjaEtleSwgcmVuZGVyUmVzdWx0cywgaW5pdGlhbFF1ZXJ5IH0pID0+IHtcbiAgY29uc3QgdXNlU2VhcmNoID0gIWNob2ljZXMubGVuZ3RoIHx8IGNob2ljZXMubGVuZ3RoID4gc2VhcmNoVGhyZXNob2xkXG4gIGNvbnN0IFtxdWVyeSwgc2V0UXVlcnldID0gdXNlU3RhdGUoaW5pdGlhbFF1ZXJ5KVxuICBjb25zdCByZXN1bHRzID0gdXNlTWVtbygoKSA9PiB7XG4gICAgaWYgKCFxdWVyeSB8fCAhdXNlU2VhcmNoKSB7XG4gICAgICByZXR1cm4gY2hvaWNlc1xuICAgIH1cblxuICAgIGNvbnN0IG9wdGlvbnMgPSB7IGtleTogc2VhcmNoS2V5LCBsaW1pdDogMzAgfVxuICAgIGNvbnN0IGZpbHRlcmVkID0gZnV6enlzb3J0LmdvKHF1ZXJ5LCBjaG9pY2VzLCBvcHRpb25zKVxuICAgIHJldHVybiBmaWx0ZXJlZC5tYXAocmVzdWx0ID0+ICh7XG4gICAgICAuLi5yZXN1bHQub2JqLFxuICAgICAgc2VhcmNoOiByZXN1bHRcbiAgICB9KSlcbiAgfSwgW3VzZVNlYXJjaCwgcXVlcnksIGNob2ljZXMsIHNlYXJjaEtleV0pXG5cbiAgY29uc3QgaGFuZGxlS2V5UHJlc3MgPSB1c2VDYWxsYmFjayhldmVudCA9PiB7XG4gICAgc2V0UXVlcnkoZXZlbnQudGFyZ2V0LnZhbHVlKVxuICB9LCBbc2V0UXVlcnldKVxuXG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIHt1c2VTZWFyY2ggJiYgKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGUuc2VhcmNoV3JhcHBlcn0+XG4gICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICByZWY9e2ZvY3VzSW5wdXR9XG4gICAgICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgICB2YWx1ZT17cXVlcnl9XG4gICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlS2V5UHJlc3N9XG4gICAgICAgICAgLz5cbiAgICAgICAgICA8SWNvbiBjbGFzc05hbWU9e3N0eWxlLnNlYXJjaEljb259IG5hbWU9XCJzZWFyY2hcIiAvPlxuICAgICAgICAgIDxJY29uXG4gICAgICAgICAgICBjbGFzc05hbWU9e3N0eWxlLmNsZWFyU2VhcmNoSWNvbn1cbiAgICAgICAgICAgIG5hbWU9XCJ0aW1lc1wiXG4gICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBzZXRRdWVyeSgnJyl9XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICApfVxuICAgICAge3JlbmRlclJlc3VsdHMocmVzdWx0cyl9XG4gICAgPC8+XG4gIClcbn1cblxuU2VhcmNoRmlsdGVyLnByb3BUeXBlcyA9IHtcbiAgY2hvaWNlczogUHJvcFR5cGVzLmFycmF5LmlzUmVxdWlyZWQsXG4gIHNlYXJjaEtleTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICBpbml0aWFsUXVlcnk6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgcmVuZGVyUmVzdWx0czogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxufVxuXG5TZWFyY2hGaWx0ZXIuZGVmYXVsdFByb3BzID0ge1xuICBpbml0aWFsUXVlcnk6ICcnXG59XG5cbmV4cG9ydCBkZWZhdWx0IFNlYXJjaEZpbHRlclxuIiwiaW1wb3J0IGZ1enp5c29ydCBmcm9tICdmdXp6eXNvcnQnXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnXG5pbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlTWVtbyB9IGZyb20gJ3JlYWN0J1xuXG5pbXBvcnQgUmVzdWx0TGlzdCBmcm9tICcuL1Jlc3VsdExpc3QnXG5pbXBvcnQgU2VhcmNoRmlsdGVyIGZyb20gJy4vU2VhcmNoRmlsdGVyJ1xuaW1wb3J0IHN0eWxlIGZyb20gJy4vc3R5bGUubW9kdWxlLmNzcydcblxuZnVuY3Rpb24gQ2hvaWNlc1BpY2tlciAocHJvcHMpIHtcbiAgY29uc3QgeyBjaG9pY2VzLCBwcm9tcHQsIG9uU2VsZWN0IH0gPSBwcm9wc1xuICBjb25zdCBmb3JtYXR0ZWRDaG9pY2VzID0gdXNlTWVtbygoKSA9PiB7XG4gICAgcmV0dXJuIGNob2ljZXMubWFwKHZhbHVlID0+ICh7IHZhbHVlIH0pKVxuICB9LCBbY2hvaWNlc10pXG5cbiAgY29uc3QgcmVuZGVyU2VhcmNoUmVzdWx0ID0gdXNlQ2FsbGJhY2socmVzdWx0ID0+IHtcbiAgICBjb25zdCB0aXRsZSA9IHJlc3VsdC5zZWFyY2hcbiAgICAgID8gKFxuICAgICAgPHNwYW4gZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e3tcbiAgICAgICAgX19odG1sOiBmdXp6eXNvcnQuaGlnaGxpZ2h0KHJlc3VsdC5zZWFyY2gpXG4gICAgICB9fSAvPlxuICAgICAgICApXG4gICAgICA6IChcbiAgICAgIDxzcGFuPlxuICAgICAgICB7cmVzdWx0LnZhbHVlfVxuICAgICAgPC9zcGFuPlxuICAgICAgICApXG5cbiAgICByZXR1cm4gKFxuICAgICAgPD5cbiAgICAgICAge3RpdGxlfVxuICAgICAgICB7cmVzdWx0LmRlc2NyaXB0aW9uICYmIDxwIGNsYXNzTmFtZT17c3R5bGUuZGVzY3JpcHRpb259PntyZXN1bHQuZGVzY3JpcHRpb259PC9wPn1cbiAgICAgIDwvPlxuICAgIClcbiAgfSwgW10pXG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGUuZGlhbG9nfT5cbiAgICAgIDxwPntwcm9tcHQgfHwgJ1NlbGVjdCd9PC9wPlxuICAgICAgPFNlYXJjaEZpbHRlclxuICAgICAgICBjaG9pY2VzPXtmb3JtYXR0ZWRDaG9pY2VzfVxuICAgICAgICBpbml0aWFsUXVlcnk9XCJcIlxuICAgICAgICBzZWFyY2hLZXk9XCJ2YWx1ZVwiXG4gICAgICAgIHJlbmRlclJlc3VsdHM9e3Jlc3VsdHMgPT4gcmVzdWx0cyAmJiAoXG4gICAgICAgICAgPFJlc3VsdExpc3RcbiAgICAgICAgICAgIHJlc3VsdHM9e3Jlc3VsdHN9XG4gICAgICAgICAgICBvblNlbGVjdD17Y2hvaWNlID0+IG9uU2VsZWN0KGNob2ljZS52YWx1ZSl9XG4gICAgICAgICAgICByZW5kZXJSZXN1bHQ9e3JlbmRlclNlYXJjaFJlc3VsdH1cbiAgICAgICAgICAvPlxuICAgICAgICApfVxuICAgICAgLz5cbiAgICA8L2Rpdj5cbiAgKVxufVxuXG5DaG9pY2VzUGlja2VyLnByb3BUeXBlcyA9IHtcbiAgY2hvaWNlczogUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnN0aXJuZykuaXNSZXF1aXJlZCxcbiAgcHJvbXB0OiBQcm9wVHlwZXMuc3RyaW5nLFxuICBvblNlbGVjdDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxufVxuXG5leHBvcnQgZGVmYXVsdCBDaG9pY2VzUGlja2VyXG4iLCJpbXBvcnQgbWFwIGZyb20gJ2xvZGFzaC9tYXAnXG5pbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlQ29udGV4dCwgdXNlTWVtbywgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCdcbmltcG9ydCBBY3Rpb25CdXR0b24gZnJvbSAnLi4vLi4vLi4vQ29tbW9uL0FjdGlvbkJ1dHRvbidcbmltcG9ydCBJY29uIGZyb20gJy4uLy4uLy4uL0NvbW1vbi9JY29uJ1xuaW1wb3J0IE1vZGFsIGZyb20gJy4uLy4uLy4uL0NvbW1vbi9Nb2RhbCdcblxuaW1wb3J0IHsgRGVmaW5pdGlvbnNDb250ZXh0IH0gZnJvbSAnLi4vLi4vLi4vQ29udGV4dHMvRGVmaW5pdGlvbnMnXG5pbXBvcnQgQ2hvaWNlc1BpY2tlciBmcm9tICcuLi8uLi8uLi9WYWx1ZVBpY2tlci9DaG9pY2VzUGlja2VyJ1xuXG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vc3R5bGVzLm1vZHVsZS5jc3MnXG5cbmZ1bmN0aW9uIHVzZVNjaGVtYUNob2ljZXMgKHNjaGVtYSkge1xuICBjb25zdCBkZWZpbml0aW9ucyA9IHVzZUNvbnRleHQoRGVmaW5pdGlvbnNDb250ZXh0KVxuICByZXR1cm4gdXNlTWVtbygoKSA9PiB7XG4gICAgaWYgKCFzY2hlbWEuY2hvaWNlcykge1xuICAgICAgcmV0dXJuIFtdXG4gICAgfVxuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoc2NoZW1hLmNob2ljZXMpKSB7XG4gICAgICByZXR1cm4gc2NoZW1hLmNob2ljZXNcbiAgICB9XG5cbiAgICBpZiAoIXNjaGVtYS5jaG9pY2VzLiRzb3VyY2UpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgc2NoZW1hLmNob2ljZXMuJHNvdXJjZScpXG4gICAgfVxuXG4gICAgY29uc3Qgc291cmNlID0gZGVmaW5pdGlvbnNbc2NoZW1hLmNob2ljZXMuJHNvdXJjZV1cbiAgICBpZiAoc2NoZW1hLmNob2ljZXMuJGtleSkge1xuICAgICAgcmV0dXJuIG1hcChzb3VyY2UsIHNjaGVtYS5jaG9pY2VzLiRrZXkpXG4gICAgfVxuXG4gICAgcmV0dXJuIHNvdXJjZVxuICB9LCBbZGVmaW5pdGlvbnMsIHNjaGVtYS5jaG9pY2VzXSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEVudW1Qcm9wZXJ0eVZhbHVlICh7IHByb3AgPSB7fSwgc2NoZW1hLCBvblVwZGF0ZSB9KSB7XG4gIGNvbnN0IGNob2ljZXMgPSBzY2hlbWEuZW51bVxuICBjb25zdCB2YWx1ZSA9IHByb3AucGFyc2VkXG4gIGNvbnN0IGhhbmRsZUNoYW5nZSA9IHVzZUNhbGxiYWNrKGV2ZW50ID0+IHtcbiAgICBvblVwZGF0ZSh7XG4gICAgICAuLi5wcm9wLFxuICAgICAgcGFyc2VkOiBjaG9pY2VzW2V2ZW50LnRhcmdldC52YWx1ZV0sXG4gICAgICB1c2VSYXc6IGZhbHNlXG4gICAgfSlcbiAgfSwgW3Byb3AsIGNob2ljZXMsIG9uVXBkYXRlXSlcblxuICByZXR1cm4gKFxuICAgIDxzZWxlY3QgY2xhc3NOYW1lPXtzdHlsZXMucHJvcGVydHlWYWx1ZX0gb25DaGFuZ2U9e2hhbmRsZUNoYW5nZX0gdmFsdWU9e2Nob2ljZXMuaW5kZXhPZih2YWx1ZSl9PlxuICAgICAge2Nob2ljZXMubWFwKChuYW1lLCBpKSA9PiAoXG4gICAgICAgIDxvcHRpb24ga2V5PXtpfSB2YWx1ZT17aX0+e25hbWV9PC9vcHRpb24+XG4gICAgICApKX1cbiAgICA8L3NlbGVjdD5cbiAgKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gTXVsdGlTZWxlY3RQcm9wZXJ0eVZhbHVlICh7IHByb3AgPSB7fSwgc2NoZW1hLCBvblVwZGF0ZSB9KSB7XG4gIGNvbnN0IGNob2ljZXMgPSB1c2VTY2hlbWFDaG9pY2VzKHNjaGVtYSlcbiAgY29uc3QgeyBwYXJzZWQ6IHNlbGVjdGVkID0gW10gfSA9IHByb3BcbiAgY29uc3QgaGFuZGxlQ2hhbmdlID0gdXNlQ2FsbGJhY2soc2VsZWN0ZWQgPT4ge1xuICAgIG9uVXBkYXRlKHsgLi4ucHJvcCwgdXNlUmF3OiBmYWxzZSwgcGFyc2VkOiBzZWxlY3RlZCB9KVxuICB9LCBbcHJvcCwgb25VcGRhdGVdKVxuXG4gIGNvbnN0IE11bHRpU2VsZWN0ID0gY2hvaWNlcy5sZW5ndGggPiAyMFxuICAgID8gTXVsdGlTZWxlY3RDaGlwc1xuICAgIDogTXVsdGlTZWxlY3RDaGVja2JveGVzXG5cbiAgcmV0dXJuIChcbiAgICA8TXVsdGlTZWxlY3RcbiAgICAgIHNlbGVjdGVkPXtzZWxlY3RlZH1cbiAgICAgIGNob2ljZXM9e2Nob2ljZXN9XG4gICAgICBvblVwZGF0ZT17aGFuZGxlQ2hhbmdlfVxuICAgIC8+XG4gIClcbn1cblxuZnVuY3Rpb24gTXVsdGlTZWxlY3RDaGVja2JveGVzICh7IHNlbGVjdGVkLCBjaG9pY2VzLCBvblVwZGF0ZSB9KSB7XG4gIGNvbnN0IGhhbmRsZUNoYW5nZSA9IHVzZUNhbGxiYWNrKGNob2ljZSA9PiB7XG4gICAgb25VcGRhdGUoXG4gICAgICBzZWxlY3RlZC5pbmNsdWRlcyhjaG9pY2UpXG4gICAgICAgID8gc2VsZWN0ZWQuZmlsdGVyKHYgPT4gdiAhPT0gY2hvaWNlKVxuICAgICAgICA6IFsuLi5zZWxlY3RlZCwgY2hvaWNlXVxuICAgIClcbiAgfSwgW3NlbGVjdGVkLCBvblVwZGF0ZV0pXG5cbiAgcmV0dXJuIChcbiAgICA8b2wgY2xhc3NOYW1lPXtzdHlsZXMucHJvcGVydHlNdWx0aVNlbGVjdH0+XG4gICAgICB7Y2hvaWNlcy5tYXAoKGNob2ljZSwgaSkgPT4gKFxuICAgICAgICA8bGkga2V5PXtpfT5cbiAgICAgICAgICA8bGFiZWw+XG4gICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgdHlwZT1cImNoZWNrYm94XCJcbiAgICAgICAgICAgICAgY2hlY2tlZD17c2VsZWN0ZWQuaW5jbHVkZXMoY2hvaWNlKX1cbiAgICAgICAgICAgICAgb25DaGFuZ2U9e2UgPT4gaGFuZGxlQ2hhbmdlKGNob2ljZSl9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAge2Nob2ljZX1cbiAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICA8L2xpPlxuICAgICAgKSl9XG4gICAgPC9vbD5cbiAgKVxufVxuXG5mdW5jdGlvbiBNdWx0aVNlbGVjdENoaXBzICh7IHNlbGVjdGVkLCBjaG9pY2VzLCBvblVwZGF0ZSB9KSB7XG4gIGNvbnN0IFthZGRpbmcsIHNldEFkZGluZ10gPSB1c2VTdGF0ZShmYWxzZSlcbiAgY29uc3QgYWRkQ2hvaWNlID0gdXNlQ2FsbGJhY2soY2hvaWNlID0+IHtcbiAgICBvblVwZGF0ZShbLi4uc2VsZWN0ZWQsIGNob2ljZV0pXG4gICAgc2V0QWRkaW5nKGZhbHNlKVxuICB9LCBbc2V0QWRkaW5nLCBzZWxlY3RlZCwgb25VcGRhdGVdKVxuICBjb25zdCByZW1vdmUgPSB1c2VDYWxsYmFjayhjaG9pY2UgPT4ge1xuICAgIG9uVXBkYXRlKHNlbGVjdGVkLmZpbHRlcih2YWx1ZSA9PiB2YWx1ZSAhPT0gY2hvaWNlKSlcbiAgfSwgW3NlbGVjdGVkLCBvblVwZGF0ZV0pXG5cbiAgLy8gVE9ETzogbWFrZSB0aGVzZSBDU1MgY2xhc3NlcyBtb3JlIGdlbmVyaWMgaWYgSSB3YW50IHRvIHNoYXJlIHRoZW0gYmV0d2VlblxuICAvLyB1bnJlbGF0ZWQgY29tcG9uZW50cy4gKG9yIHJlZmFjdG9yIHRoZSBlbGVtZW50cyB0aGVtc2VsdmVzKVxuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8dWwgY2xhc3NOYW1lPXtzdHlsZXMucHJvcGVydHlNdWx0aVNlbGVjdENoaXBzfT5cbiAgICAgICAge3NlbGVjdGVkLm1hcCgoY2hvaWNlLCBpKSA9PiAoXG4gICAgICAgICAgPGxpIGtleT17aX0+XG4gICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9e3N0eWxlcy5iZWhhdmlvckJpbmR9PlxuICAgICAgICAgICAgICB7Y2hvaWNlfSB7KFxuICAgICAgICAgICAgICAgIDxJY29uXG4gICAgICAgICAgICAgICAgICBuYW1lPVwidGltZXNcIlxuICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtzdHlsZXMucGhhbmRsZVJlbW92ZX1cbiAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHJlbW92ZShjaG9pY2UpfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgPC9saT5cbiAgICAgICAgKSl9XG4gICAgICA8L3VsPlxuICAgICAgPEFjdGlvbkJ1dHRvbiBzZWNvbmRhcnkgb25DbGljaz17KCkgPT4gc2V0QWRkaW5nKHRydWUpfT5cbiAgICAgICAgPEljb24gbmFtZT1cInBsdXNcIiAvPiBBZGRcbiAgICAgIDwvQWN0aW9uQnV0dG9uPlxuICAgICAge2FkZGluZyAmJiAoXG4gICAgICAgIDxNb2RhbCBvbkRpc21pc3M9eygpID0+IHNldEFkZGluZyhmYWxzZSl9PlxuICAgICAgICAgIDxDaG9pY2VzUGlja2VyXG4gICAgICAgICAgICBjaG9pY2VzPXtjaG9pY2VzfVxuICAgICAgICAgICAgb25TZWxlY3Q9e2FkZENob2ljZX1cbiAgICAgICAgICAvPlxuICAgICAgICA8L01vZGFsPlxuICAgICAgKX1cbiAgICA8Lz5cbiAgKVxufVxuIiwiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJ1xuaW1wb3J0IHsgdXNlQ29udGV4dCwgdXNlTWVtbyB9IGZyb20gJ3JlYWN0J1xuXG5pbXBvcnQgeyBTZWFyY2hDb250ZXh0IH0gZnJvbSAnLi4vcHJvdmlkZXJzJ1xuaW1wb3J0IFJlc3VsdExpc3QgZnJvbSAnLi9SZXN1bHRMaXN0J1xuaW1wb3J0IHN0eWxlIGZyb20gJy4vc3R5bGUubW9kdWxlLmNzcydcblxuZnVuY3Rpb24gRW51bVBpY2tlciAocHJvcHMpIHtcbiAgY29uc3QgeyBnZXRTZWFyY2hUYXJnZXRzIH0gPSB1c2VDb250ZXh0KFNlYXJjaENvbnRleHQpXG4gIGNvbnN0IHsgcGFyYW0sIHByb21wdCwgb25TZWxlY3QgfSA9IHByb3BzXG5cbiAgY29uc3QgY2hvaWNlcyA9IHVzZU1lbW8oKCkgPT4gKFxuICAgIGdldFNlYXJjaFRhcmdldHMocGFyYW0pXG4gICksIFtnZXRTZWFyY2hUYXJnZXRzLCBwYXJhbV0pXG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGUuZGlhbG9nfT5cbiAgICAgIDxwPntwcm9tcHR9PC9wPlxuICAgICAgPFJlc3VsdExpc3RcbiAgICAgICAgcmVzdWx0cz17Y2hvaWNlc31cbiAgICAgICAgb25TZWxlY3Q9e29uU2VsZWN0fVxuICAgICAgICByZW5kZXJSZXN1bHQ9e3Jlc3VsdCA9PiByZXN1bHQuY29kZX1cbiAgICAgIC8+XG4gICAgPC9kaXY+XG4gIClcbn1cblxuRW51bVBpY2tlci5wcm9wVHlwZXMgPSB7XG4gIHZhbHVlOiBQcm9wVHlwZXMuYW55LmlzUmVxdWlyZWQsXG4gIHBhcmFtOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gIHByb21wdDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICBvblNlbGVjdDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxufVxuXG5FbnVtUGlja2VyLmRlZmF1bHRQcm9wcyA9IHtcbiAgdmFsdWU6ICcnXG59XG5cbmV4cG9ydCBkZWZhdWx0IEVudW1QaWNrZXJcbiIsImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcydcblxuZXhwb3J0IGNvbnN0IHBhcmFtID0gUHJvcFR5cGVzLm9uZU9mVHlwZShbXG4gIFByb3BUeXBlcy5vbmVPZihbJ2NvZGUnLCAnbGF5ZXInLCAnY29tbWFuZCddKSxcbiAgUHJvcFR5cGVzLnNoYXBlKHsgdHlwZTogUHJvcFR5cGVzLm9uZU9mKFsncGxhY2Vob2xkZXInXSkgfSksXG4gIFByb3BUeXBlcy5zaGFwZSh7XG4gICAgZW51bTogUHJvcFR5cGVzLmFycmF5LFxuICAgIHJhdzogUHJvcFR5cGVzLmJvb2wsXG4gICAgbmFtZTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgIHR5cGU6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZFxuICB9KVxuXSlcblxuZXhwb3J0IGNvbnN0IHBhcmFtcyA9IFByb3BUeXBlcy5hcnJheU9mKHBhcmFtKVxuZXhwb3J0IGNvbnN0IHZhbHVlID0gUHJvcFR5cGVzLm9uZU9mVHlwZShbXG4gIFByb3BUeXBlcy5zdHJpbmcsXG4gIFByb3BUeXBlcy5udW1iZXJcbl0pXG5leHBvcnQgY29uc3Qgc291cmNlID0gUHJvcFR5cGVzLnNoYXBlKHtcbiAgcGFyYW1zLFxuICBjb2RlOiB2YWx1ZS5pc1JlcXVpcmVkLFxuICBkZXNjcmlwdGlvbjogUHJvcFR5cGVzLnN0cmluZyxcbiAgc3ltYm9sOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBmYUljb246IFByb3BUeXBlcy5zdHJpbmdcbn0pXG5cbmNvbnN0IG5vZGVTaGFwZSA9IHsgdmFsdWUsIHNvdXJjZSB9XG5ub2RlU2hhcGUucGFyYW1zID0gUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnNoYXBlKG5vZGVTaGFwZSkpXG5cbmV4cG9ydCBjb25zdCBub2RlID0gUHJvcFR5cGVzLnNoYXBlKG5vZGVTaGFwZSlcblxuZXhwb3J0IGNvbnN0IGJpbmROb2RlID0gbm9kZVxuXG5leHBvcnQgY29uc3QgaW5kZXggPSBQcm9wVHlwZXMuYXJyYXlPZihub2RlKVxuIiwiaW1wb3J0IGZ1enp5c29ydCBmcm9tICdmdXp6eXNvcnQnXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnXG5pbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlQ29udGV4dCwgdXNlTWVtbyB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgYmluZE5vZGUgfSBmcm9tICcuLi9LZXlib2FyZC9CaW5kaW5nL2JpbmRQcm9wVHlwZXMnXG5cbmltcG9ydCB7IFNlYXJjaENvbnRleHQgfSBmcm9tICcuLi9wcm92aWRlcnMnXG5pbXBvcnQgUmVzdWx0TGlzdCBmcm9tICcuL1Jlc3VsdExpc3QnXG5pbXBvcnQgU2VhcmNoRmlsdGVyIGZyb20gJy4vU2VhcmNoRmlsdGVyJ1xuaW1wb3J0IHN0eWxlIGZyb20gJy4vc3R5bGUubW9kdWxlLmNzcydcblxuZnVuY3Rpb24gR2VuZXJpY1BpY2tlciAocHJvcHMpIHtcbiAgY29uc3QgeyBwcm9tcHQsIHNlYXJjaEtleSwgbm9kZSwgcGFyYW0sIGJlaGF2aW91ciwgY29udGV4dCwgb25TZWxlY3QgfSA9IHByb3BzXG5cbiAgY29uc3QgeyBnZXRTZWFyY2hUYXJnZXRzIH0gPSB1c2VDb250ZXh0KFNlYXJjaENvbnRleHQpXG4gIGNvbnN0IHJlbmRlclNlYXJjaFJlc3VsdCA9IHVzZUNhbGxiYWNrKHJlc3VsdCA9PiB7XG4gICAgY29uc3QgdGl0bGUgPSByZXN1bHQuc2VhcmNoXG4gICAgICA/IChcbiAgICAgIDxzcGFuIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7XG4gICAgICAgIF9faHRtbDogZnV6enlzb3J0LmhpZ2hsaWdodChyZXN1bHQuc2VhcmNoKVxuICAgICAgfX0gLz5cbiAgICAgICAgKVxuICAgICAgOiAoXG4gICAgICA8c3Bhbj5cbiAgICAgICAge3Jlc3VsdC5jb2RlfVxuICAgICAgPC9zcGFuPlxuICAgICAgICApXG5cbiAgICByZXR1cm4gKFxuICAgICAgPD5cbiAgICAgICAge3RpdGxlfVxuICAgICAgICB7cmVzdWx0LmRlc2NyaXB0aW9uICYmIDxwIGNsYXNzTmFtZT17c3R5bGUuZGVzY3JpcHRpb259PntyZXN1bHQuZGVzY3JpcHRpb259PC9wPn1cbiAgICAgIDwvPlxuICAgIClcbiAgfSwgW10pXG5cbiAgY29uc3QgY2hvaWNlcyA9IHVzZU1lbW8oKCkgPT4ge1xuICAgIHJldHVybiBnZXRTZWFyY2hUYXJnZXRzKHBhcmFtLCBiZWhhdmlvdXIuY29kZSwgY29udGV4dClcbiAgfSwgW2dldFNlYXJjaFRhcmdldHMsIHBhcmFtLCBiZWhhdmlvdXIsIGNvbnRleHRdKVxuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlLmRpYWxvZ30+XG4gICAgICA8cD57cHJvbXB0fTwvcD5cbiAgICAgIDxTZWFyY2hGaWx0ZXJcbiAgICAgICAgY2hvaWNlcz17Y2hvaWNlc31cbiAgICAgICAgaW5pdGlhbFF1ZXJ5PXtub2RlLnZhbHVlIHx8ICcnfVxuICAgICAgICBzZWFyY2hLZXk9e3NlYXJjaEtleX1cbiAgICAgICAgcmVuZGVyUmVzdWx0cz17cmVzdWx0cyA9PiByZXN1bHRzICYmIChcbiAgICAgICAgICA8UmVzdWx0TGlzdFxuICAgICAgICAgICAgcmVzdWx0cz17cmVzdWx0c31cbiAgICAgICAgICAgIG9uU2VsZWN0PXtvblNlbGVjdH1cbiAgICAgICAgICAgIHJlbmRlclJlc3VsdD17cmVuZGVyU2VhcmNoUmVzdWx0fVxuICAgICAgICAgIC8+XG4gICAgICAgICl9XG4gICAgICAvPlxuICAgIDwvZGl2PlxuICApXG59XG5cbkdlbmVyaWNQaWNrZXIucHJvcFR5cGVzID0ge1xuICBub2RlOiBiaW5kTm9kZS5pc1JlcXVpcmVkLFxuICBwYXJhbTogUHJvcFR5cGVzLm9uZU9mVHlwZShbXG4gICAgUHJvcFR5cGVzLnN0cmluZyxcbiAgICBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgZW51bTogUHJvcFR5cGVzLmFycmF5LFxuICAgICAgcmF3OiBQcm9wVHlwZXMuYm9vbCxcbiAgICAgIHR5cGU6IFByb3BUeXBlcy5zdHJpbmdcbiAgICB9KVxuICBdKS5pc1JlcXVpcmVkLFxuICBwcm9tcHQ6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgc2VhcmNoS2V5OiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIGJlaGF2aW91cjogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICBjb250ZXh0OiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIG9uU2VsZWN0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG59XG5cbmV4cG9ydCBkZWZhdWx0IEdlbmVyaWNQaWNrZXJcbiIsImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcydcbmltcG9ydCB7IHVzZUNhbGxiYWNrLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgQ2hyb21lUGlja2VyIH0gZnJvbSAncmVhY3QtY29sb3InXG5pbXBvcnQgQWN0aW9uQnV0dG9uIGZyb20gJy4uLy4uL0NvbW1vbi9BY3Rpb25CdXR0b24nXG5cbmZ1bmN0aW9uIEhTQlBpY2tlciAocHJvcHMpIHtcbiAgY29uc3QgeyBub2RlLCBvblNlbGVjdCB9ID0gcHJvcHNcbiAgY29uc3QgW2hzbCwgc2V0SHNsXSA9IHVzZVN0YXRlKHtcbiAgICBoOiBOdW1iZXIobm9kZS5wYXJhbXNbMF0udmFsdWUpLFxuICAgIHM6IE51bWJlcihub2RlLnBhcmFtc1sxXS52YWx1ZSkgLyAxMDAsXG4gICAgbDogTnVtYmVyKG5vZGUucGFyYW1zWzJdLnZhbHVlKSAvIDEwMFxuICB9KVxuXG4gIGNvbnN0IGhhbmRsZUNoYW5nZSA9IHVzZUNhbGxiYWNrKCh7IGhzbCB9KSA9PiB7XG4gICAgc2V0SHNsKGhzbClcbiAgfSwgW3NldEhzbF0pXG5cbiAgY29uc3QgaGFuZGxlQ29uZmlybSA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBvblNlbGVjdChbXG4gICAgICB7IHZhbHVlOiBNYXRoLnJvdW5kKGhzbC5oKSB9LFxuICAgICAgeyB2YWx1ZTogTWF0aC5yb3VuZChoc2wucyAqIDEwMCkgfSxcbiAgICAgIHsgdmFsdWU6IE1hdGgucm91bmQoaHNsLmwgKiAxMDApIH1cbiAgICBdKVxuICB9LCBbaHNsLCBvblNlbGVjdF0pXG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2PlxuICAgICAgPHA+U2VsZWN0IGNvbG91cjwvcD5cbiAgICAgIDxDaHJvbWVQaWNrZXJcbiAgICAgICAgY29sb3I9e2hzbH1cbiAgICAgICAgZGlzYWJsZUFscGhhPXt0cnVlfVxuICAgICAgICBvbkNoYW5nZUNvbXBsZXRlPXtoYW5kbGVDaGFuZ2V9XG4gICAgICAvPlxuICAgICAgPHAgc3R5bGU9e3sgdGV4dEFsaWduOiAnY2VudGVyJyB9fT5cbiAgICAgICAgPEFjdGlvbkJ1dHRvbiBvbkNsaWNrPXtoYW5kbGVDb25maXJtfT5Db25maXJtPC9BY3Rpb25CdXR0b24+XG4gICAgICA8L3A+XG4gICAgPC9kaXY+XG4gIClcbn1cblxuSFNCUGlja2VyLnByb3BUeXBlcyA9IHtcbiAgdmFsdWU6IFByb3BUeXBlcy5hbnkuaXNSZXF1aXJlZCxcbiAgcHJvbXB0OiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIHBhcmFtOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtcbiAgICBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgZW51bTogUHJvcFR5cGVzLmFycmF5LFxuICAgICAgcmF3OiBQcm9wVHlwZXMuYm9vbCxcbiAgICAgIHR5cGU6IFByb3BUeXBlcy5zdHJpbmdcbiAgICB9KVxuICBdKS5pc1JlcXVpcmVkLFxuICBvblNlbGVjdDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxufVxuXG5IU0JQaWNrZXIuZGVmYXVsdFByb3BzID0ge1xuICB2YWx1ZTogJydcbn1cblxuZXhwb3J0IGRlZmF1bHQgSFNCUGlja2VyXG4iLCIvLyBgY29kZWAgdmFsdWVzIG1heSBiZSBcInRyZWVzXCIgaW4gdGVybXMgb2Ygc3RydWN0dXJlLCBidXQgdGhpcyBpcyBvbmx5XG4vLyBiZWNhdXNlIG9mIFwibW9kaWZpZXIgbWFjcm9zXCIgKGUuZy4gYExTKEEpYCkgd2hpY2ggbWF5IGJlIG5lc3RlZCByZWN1cnNpdmVseVxuLy8gYnV0IGVhY2ggbGV2ZWwgb2YgdGhlIHRyZWUgaGFzIGF0IG1vc3Qgb25lIGNoaWxkLiBUaGlzIG1lYW5zIHRoZSBkZWVwZXN0XG4vLyBub2RlIGlzIG91ciBhY3R1YWwga2V5Y29kZSBhbmQgZXZlcnl0aGluZyBhYm92ZSB0aGF0IGlzIGEgbW9kaWZpZXIuXG5leHBvcnQgZnVuY3Rpb24gdHJlZVRvU2VxdWVuY2UgKHRyZWUpIHtcbiAgcmV0dXJuIHRyZWUucGFyYW1zLmxlbmd0aCA+IDBcbiAgICA/IFt0cmVlLCAuLi50cmVlVG9TZXF1ZW5jZSh0cmVlLnBhcmFtc1swXSldXG4gICAgOiBbdHJlZV1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNlcXVlbmNlVG9UcmVlIChbdmFsdWUsIC4uLnNlcV0pIHtcbiAgY29uc3QgcGFyYW1zID0gc2VxLmxlbmd0aCA9PT0gMCA/IFtdIDogW3NlcXVlbmNlVG9UcmVlKHNlcSldXG4gIHJldHVybiB7IHZhbHVlLCBwYXJhbXMgfVxufVxuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1syXS51c2VbMV0hLi9zdHlsZXMubW9kdWxlLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzJdLnVzZVsxXSEuL3N0eWxlcy5tb2R1bGUuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJ1xuaW1wb3J0IHN0eWxlIGZyb20gJy4vc3R5bGVzLm1vZHVsZS5jc3MnXG5cbmNvbnN0IGxlZnRNb2RpZmllcnMgPSBbJ0xTSEZUJywgJ0xBTFQnLCAnTENUUkwnLCAnTEdVSSddXG5jb25zdCByaWdodE1vZGlmaWVycyA9IFsnUlNIRlQnLCAnUkFMVCcsICdSQ1RSTCcsICdSR1VJJ11cblxuZnVuY3Rpb24gTW9kaWZpZXJzUm93ICh7IHNlbGVjdGVkLCByb3csIG9uU2VsZWN0IH0pIHtcbiAgcmV0dXJuIChcbiAgICA8dWwgY2xhc3NOYW1lPXtzdHlsZS5tb2RpZmllcnN9PlxuICAgICAge3Jvdy5tYXAoKG1vZCwgaSkgPT4gKFxuICAgICAgICA8bGlcbiAgICAgICAgICBrZXk9e2l9XG4gICAgICAgICAgY2xhc3NOYW1lPXtzZWxlY3RlZC5pbmNsdWRlcyhtb2QpID8gc3R5bGUuc2VsZWN0ZWQgOiAnJ31cbiAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBvblNlbGVjdChtb2QpfVxuICAgICAgICA+e21vZH08L2xpPlxuICAgICAgKSl9XG4gICAgPC91bD5cbiAgKVxufVxuXG5mdW5jdGlvbiBNb2RpZmllcnNQaWNrZXIgKHsgc2VsZWN0ZWQsIG9uQ2hhbmdlIH0pIHtcbiAgZnVuY3Rpb24gaGFuZGxlU2VsZWN0aW9uIChtb2RpZmllcikge1xuICAgIG9uQ2hhbmdlKFxuICAgICAgc2VsZWN0ZWQuaW5jbHVkZXMobW9kaWZpZXIpXG4gICAgICAgID8gc2VsZWN0ZWQuZmlsdGVyKG1vZCA9PiBtb2QgIT09IG1vZGlmaWVyKVxuICAgICAgICA6IFsuLi5zZWxlY3RlZCwgbW9kaWZpZXJdXG4gICAgKVxuICB9XG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIDxNb2RpZmllcnNSb3cgcm93PXtsZWZ0TW9kaWZpZXJzfSBzZWxlY3RlZD17c2VsZWN0ZWR9IG9uU2VsZWN0PXtoYW5kbGVTZWxlY3Rpb259IC8+XG4gICAgICA8TW9kaWZpZXJzUm93IHJvdz17cmlnaHRNb2RpZmllcnN9IHNlbGVjdGVkPXtzZWxlY3RlZH0gb25TZWxlY3Q9e2hhbmRsZVNlbGVjdGlvbn0gLz5cbiAgICA8Lz5cbiAgKVxufVxuXG5Nb2RpZmllcnNQaWNrZXIucHJvcFR5cGVzID0ge1xuICBzZWxlY3RlZDogUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnN0cmluZylcbn1cblxuZXhwb3J0IGRlZmF1bHQgTW9kaWZpZXJzUGlja2VyXG4iLCJpbXBvcnQgY29tcGFjdCBmcm9tICdsb2Rhc2gvY29tcGFjdCdcbmltcG9ydCB7IHVzZUNhbGxiYWNrIH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnXG5cbmltcG9ydCAqIGFzIGJpbmRQcm9wVHlwZXMgZnJvbSAnLi9iaW5kUHJvcFR5cGVzJ1xuaW1wb3J0IHN0eWxlcyBmcm9tICcuLi9LZXlzL3N0eWxlcy5tb2R1bGUuY3NzJ1xuaW1wb3J0IEljb24gZnJvbSAnLi4vLi4vQ29tbW9uL0ljb24nXG5cbmV4cG9ydCBmdW5jdGlvbiBOdWxsS2V5ICgpIHtcbiAgcmV0dXJuIDxzcGFuPuKmuDwvc3Bhbj5cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFNvdXJjZVRpdGxlIChzb3VyY2UpIHtcbiAgcmV0dXJuIHNvdXJjZSAmJiBgKCR7c291cmNlLmNvZGV9KSAke3NvdXJjZS5kZXNjcmlwdGlvbn1gXG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW5kZXJTb3VyY2UgKHNvdXJjZSkge1xuICBjb25zdCB0ZXh0ID0gc291cmNlICYmIChzb3VyY2U/LnN5bWJvbCB8fCBzb3VyY2U/LmNvZGU/LnRvU3RyaW5nKCkpXG4gIGNvbnN0IGljb24gPSBzb3VyY2U/LmZhSWNvbiAmJiA8SWNvbiBuYW1lPXtzb3VyY2UuZmFJY29ufSAvPlxuICByZXR1cm4gaWNvbiB8fCB0ZXh0IHx8IDxOdWxsS2V5IC8+XG59XG5cbmZ1bmN0aW9uIEJpbmRWYWx1ZSAocHJvcHMpIHtcbiAgY29uc3QgeyBub2RlLCBvblNlbGVjdCB9ID0gcHJvcHNcbiAgY29uc3QgeyB2YWx1ZSwgc291cmNlLCBfaXNQbGFjZWhvbGRlciB9ID0gbm9kZVxuICBjb25zdCB0aXRsZSA9IGdldFNvdXJjZVRpdGxlKHNvdXJjZSlcblxuICBjb25zdCBoYW5kbGVDbGljayA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uIChldmVudCkge1xuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpXG4gICAgb25TZWxlY3QoeyBub2RlIH0pXG4gIH0sIFtub2RlLCBvblNlbGVjdF0pXG5cbiAgcmV0dXJuIChcbiAgICA8c3BhblxuICAgICAgY2xhc3NOYW1lPXtjb21wYWN0KFtcbiAgICAgICAgc3R5bGVzLmNvZGUsXG4gICAgICAgICh2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IF9pc1BsYWNlaG9sZGVyKSAmJiBzdHlsZXMubWlzc2luZ1ZhbHVlXG4gICAgICBdKS5qb2luKCcgJyl9XG4gICAgICB0aXRsZT17dGl0bGV9XG4gICAgICBvbkNsaWNrPXtoYW5kbGVDbGlja31cbiAgICA+XG4gICAgICB7cmVuZGVyU291cmNlKHNvdXJjZSl9XG4gICAgPC9zcGFuPlxuICApXG59XG5cbkJpbmRWYWx1ZS5wcm9wVHlwZXMgPSB7XG4gIG5vZGU6IGJpbmRQcm9wVHlwZXMuYmluZE5vZGUuaXNSZXF1aXJlZCxcbiAgb25TZWxlY3Q6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbn1cblxuZXhwb3J0IGRlZmF1bHQgQmluZFZhbHVlXG4iLCJpbXBvcnQgeyBGcmFnbWVudCwgdXNlQ2FsbGJhY2ssIHVzZU1lbW8gfSBmcm9tICdyZWFjdCdcbmltcG9ydCBjb21wYWN0IGZyb20gJ2xvZGFzaC9jb21wYWN0J1xuaW1wb3J0IG1hcCBmcm9tICdsb2Rhc2gvbWFwJ1xuXG5pbXBvcnQgeyBnZXRTb3VyY2VUaXRsZSwgcmVuZGVyU291cmNlIH0gZnJvbSAnLi4vLi4vS2V5Ym9hcmQvQmluZGluZy9CaW5kVmFsdWUnXG5pbXBvcnQgc3R5bGVzIGZyb20gJy4uLy4uL0tleWJvYXJkL0tleXMvc3R5bGVzLm1vZHVsZS5jc3MnXG5pbXBvcnQgeyB0cmVlVG9TZXF1ZW5jZSB9IGZyb20gJy4vaGVscGVycydcblxuZnVuY3Rpb24gS2V5Y29kZUJpbmROb2RlICh7IG5vZGUsIG9uU2VsZWN0IH0pIHtcbiAgY29uc3QgaGFuZGxlQ2xpY2sgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKVxuICAgIG9uU2VsZWN0KHsgbm9kZSwgdHlwZTogJ3RyZWUnIH0pXG4gIH0sIFtub2RlLCBvblNlbGVjdF0pXG5cbiAgY29uc3QgY29kZXMgPSB1c2VNZW1vKCgpID0+IG1hcCh0cmVlVG9TZXF1ZW5jZShub2RlKSwgJ3NvdXJjZScpLCBbbm9kZV0pXG4gIGNvbnN0IGNvZGVMYWJlbHMgPSB1c2VNZW1vKCgpID0+IChcbiAgICBjb2Rlcy5tYXAocmVuZGVyU291cmNlKVxuICAgICAgLm1hcCgobGFiZWwsIGkpID0+IDxGcmFnbWVudCBrZXk9e2l9PntsYWJlbH08L0ZyYWdtZW50PilcbiAgICAgIC5yZWR1Y2UoKGxhYmVscywgbGFiZWwpID0+IChcbiAgICAgICAgbGFiZWxzLmxlbmd0aCA9PT0gMFxuICAgICAgICAgID8gW2xhYmVsXVxuICAgICAgICAgIDogWy4uLmxhYmVscywgJyAnLCBsYWJlbF1cbiAgICAgICksIFtdKVxuICApLCBbY29kZXNdKVxuICBjb25zdCB0aXRsZSA9IHVzZU1lbW8oKCkgPT4gKFxuICAgIGNvZGVzLm1hcChnZXRTb3VyY2VUaXRsZSkuam9pbignICsgJylcbiAgKSwgW2NvZGVzXSlcblxuICBjb25zdCBtaXNzaW5nID0gKFxuICAgIG5vZGUuc291cmNlPy5jb2RlID09PSB1bmRlZmluZWQgfHxcbiAgICBub2RlLnZhbHVlID09PSB1bmRlZmluZWQgfHxcbiAgICBub2RlLl9pc1BsYWNlaG9sZGVyXG4gIClcblxuICByZXR1cm4gKFxuICAgIDxzcGFuXG4gICAgICBjbGFzc05hbWU9e2NvbXBhY3QoW1xuICAgICAgICBzdHlsZXMuY29kZSxcbiAgICAgICAgbWlzc2luZyAmJiBzdHlsZXMubWlzc2luZ1ZhbHVlXG4gICAgICBdKS5qb2luKCcgJyl9XG4gICAgICB0aXRsZT17dGl0bGV9XG4gICAgICBvbkNsaWNrPXtoYW5kbGVDbGlja31cbiAgICA+XG4gICAgICB7Y29kZUxhYmVsc31cbiAgICA8L3NwYW4+XG4gIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgS2V5Y29kZUJpbmROb2RlXG4iLCJpbXBvcnQgZ2V0IGZyb20gJ2xvZGFzaC9nZXQnXG5pbXBvcnQga2V5QnkgZnJvbSAnbG9kYXNoL2tleUJ5J1xuZXhwb3J0IHsgbG9hZEtleW1hcCB9IGZyb20gJy4vYXBpJ1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0QmVoYXZpb3VyUGFyYW1zIChwYXJzZWRQYXJhbXMsIGJlaGF2aW91cikge1xuICBjb25zdCBmaXJzdFBhcnNlZFBhcmFtID0gZ2V0KHBhcnNlZFBhcmFtcywgJ1swXScsIHt9KVxuICBjb25zdCBjb21tYW5kcyA9IGtleUJ5KGJlaGF2aW91ci5jb21tYW5kcywgJ2NvZGUnKVxuICByZXR1cm4gW10uY29uY2F0KFxuICAgIGJlaGF2aW91ci5wYXJhbXMgfHwgW10sXG4gICAgZ2V0KGJlaGF2aW91ciwgJ3BhcmFtc1swXScpID09PSAnY29tbWFuZCdcbiAgICAgID8gZ2V0KGNvbW1hbmRzW2ZpcnN0UGFyc2VkUGFyYW0udmFsdWVdLCAnYWRkaXRpb25hbFBhcmFtcycsIFtdKVxuICAgICAgOiBbXVxuICApXG59XG4iLCJpbXBvcnQgZ2V0IGZyb20gJ2xvZGFzaC9nZXQnXG5pbXBvcnQga2V5QnkgZnJvbSAnbG9kYXNoL2tleUJ5J1xuXG5pbXBvcnQgeyBnZXRCZWhhdmlvdXJQYXJhbXMgfSBmcm9tICcuLi8uLi9rZXltYXAnXG5cbmV4cG9ydCBmdW5jdGlvbiBtYWtlSW5kZXggKHRyZWUpIHtcbiAgY29uc3QgaW5kZXggPSBbXVxuICA7KGZ1bmN0aW9uIHRyYXZlcnNlICh0cmVlKSB7XG4gICAgY29uc3QgcGFyYW1zID0gdHJlZS5wYXJhbXMgfHwgW11cbiAgICBpbmRleC5wdXNoKHRyZWUpXG4gICAgcGFyYW1zLmZvckVhY2godHJhdmVyc2UpXG4gIH0pKHRyZWUpXG5cbiAgcmV0dXJuIGluZGV4XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1NpbXBsZSAobm9ybWFsaXplZCkge1xuICBjb25zdCBbZmlyc3RdID0gbm9ybWFsaXplZC5wYXJhbXNcbiAgY29uc3Qgc3ltYm9sID0gZ2V0KGZpcnN0LCAnc291cmNlLnN5bWJvbCcsIGdldChmaXJzdCwgJ3NvdXJjZS5jb2RlJywgJycpKVxuICBjb25zdCBoYXNJY29uID0gISFnZXQoZmlyc3QsICdzb3VyY2UuZmFJY29uJylcbiAgY29uc3Qgc2hvcnRTeW1ib2wgPSBoYXNJY29uIHx8IHN5bWJvbC5sZW5ndGggPT09IDFcbiAgY29uc3Qgc2luZ2xlUGFyYW0gPSBub3JtYWxpemVkLnBhcmFtcy5sZW5ndGggPT09IDFcbiAgcmV0dXJuIHNpbmdsZVBhcmFtICYmIHNob3J0U3ltYm9sXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0NvbXBsZXggKG5vcm1hbGl6ZWQsIGJlaGF2aW91clBhcmFtcykge1xuICBjb25zdCBbZmlyc3RdID0gbm9ybWFsaXplZC5wYXJhbXNcbiAgY29uc3Qgc3ltYm9sID0gZ2V0KGZpcnN0LCAnc291cmNlLnN5bWJvbCcsIGdldChmaXJzdCwgJ3ZhbHVlJywgJycpKVxuICBjb25zdCBoYXNJY29uID0gISFnZXQoZmlyc3QsICdzb3VyY2UuZmFJY29uJylcbiAgY29uc3QgaXNMb25nU3ltYm9sID0gIWhhc0ljb24gJiYgc3ltYm9sLmxlbmd0aCA+IDRcbiAgY29uc3QgaXNNdWx0aVBhcmFtID0gYmVoYXZpb3VyUGFyYW1zLmxlbmd0aCA+IDFcbiAgY29uc3QgaXNOZXN0ZWRQYXJhbSA9IGdldChmaXJzdCwgJ3BhcmFtcycsIFtdKS5sZW5ndGggPiAwXG5cbiAgcmV0dXJuIGlzTG9uZ1N5bWJvbCB8fCBpc011bHRpUGFyYW0gfHwgaXNOZXN0ZWRQYXJhbVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlUHJvbXB0TWVzc2FnZSAocGFyYW0pIHtcbiAgY29uc3QgcHJvbXB0TWFwcGluZyA9IHtcbiAgICBsYXllcjogJ1NlbGVjdCBsYXllcicsXG4gICAgbW9kOiAnU2VsZWN0IG1vZGlmaWVyJyxcbiAgICBiZWhhdmlvdXI6ICdTZWxlY3QgYmVoYXZpb3VyJyxcbiAgICBjb21tYW5kOiAnU2VsZWN0IGNvbW1hbmQnLFxuICAgIGtleWNvZGU6ICdTZWxlY3Qga2V5IGNvZGUnXG4gIH1cblxuICBpZiAocGFyYW0ubmFtZSkge1xuICAgIHJldHVybiBgU2VsZWN0ICR7cGFyYW0ubmFtZX1gXG4gIH1cblxuICByZXR1cm4gKFxuICAgIHByb21wdE1hcHBpbmdbcGFyYW1dIHx8XG4gICAgcHJvbXB0TWFwcGluZy5rZXljb2RlXG4gIClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGh5ZHJhdGVUcmVlICh2YWx1ZSwgcGFyYW1zLCBzb3VyY2VzLCBjb250ZXh0ID0gJ25vbmUnLCBtZXJnZWRHbHlwaHMpIHtcbiAgY29uc3QgYmluZCA9IHZhbHVlXG4gIGNvbnN0IGJlaGF2aW91ciA9IGdldChzb3VyY2VzLmJlaGF2aW91cnNCeUNvbnRleHRbY29udGV4dF0sIGJpbmQsIHt9KVxuICBjb25zdCBiZWhhdmlvdXJQYXJhbXMgPSBnZXRCZWhhdmlvdXJQYXJhbXMocGFyYW1zLCBiZWhhdmlvdXIpXG4gIGNvbnN0IGNvbW1hbmRzID0ga2V5QnkoYmVoYXZpb3VyLmNvbW1hbmRzLCAnY29kZScpXG5cbiAgZnVuY3Rpb24gZ2V0U291cmNlVmFsdWUgKHZhbHVlLCBhcykge1xuICAgIGlmIChhcyA9PT0gJ2NvbW1hbmQnKSByZXR1cm4gY29tbWFuZHNbdmFsdWVdXG4gICAgaWYgKGFzLnJhdyB8fCBhcy5lbnVtKSByZXR1cm4geyBjb2RlOiB2YWx1ZSB9XG4gICAgLy8gVE9ETzogU2hvdWxkbid0IG5lZWQgdG8gcmVuZGVyIHBsYWNlaG9sZGVyXG4gICAgaWYgKGFzLnR5cGUgPT09ICdwbGFjZWhvbGRlcicpIHJldHVybiB7IGNvZGU6IHZhbHVlIH1cbiAgICByZXR1cm4gc291cmNlcz8uW2FzXT8uW3ZhbHVlXVxuICB9XG5cbiAgZnVuY3Rpb24gaHlkcmF0ZU5vZGUgKG5vZGUsIHNsb3QpIHtcbiAgICBpZiAoIW5vZGUpIHtcbiAgICAgIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIHNsb3QsIHBhcmFtczogW10gfVxuICAgIH1cbiAgICBjb25zdCB7IHZhbHVlLCBwYXJhbXMsIF9pc1BsYWNlaG9sZGVyIH0gPSBub2RlXG4gICAgY29uc3Qgc291cmNlID0gZ2V0U291cmNlVmFsdWUodmFsdWUsIHNsb3QpXG5cbiAgICByZXR1cm4ge1xuICAgICAgdmFsdWUsXG4gICAgICBfaXNQbGFjZWhvbGRlcixcbiAgICAgIHNsb3QsXG4gICAgICBzb3VyY2U6IHtcbiAgICAgICAgLi4uc291cmNlLFxuICAgICAgICBzeW1ib2w6IGdldChtZXJnZWRHbHlwaHMsIFtzb3VyY2U/Lm5hbWUsICdzeW1ib2wnXSwgc291cmNlPy5zeW1ib2wpLFxuICAgICAgICBmYUljb246IGdldChtZXJnZWRHbHlwaHMsIFtzb3VyY2U/Lm5hbWUsICdmYUljb24nXSwgc291cmNlPy5mYUljb24pXG4gICAgICB9LFxuICAgICAgcGFyYW1zOiBnZXQoc291cmNlLCAncGFyYW1zJywgW10pLm1hcCgoc2xvdCwgaSkgPT4gKFxuICAgICAgICBoeWRyYXRlTm9kZShwYXJhbXNbaV0sIHNsb3QpXG4gICAgICApKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgdmFsdWUsXG4gICAgc2xvdDogJ2JlaGF2aW91cicsXG4gICAgc291cmNlOiBiZWhhdmlvdXIsXG4gICAgcGFyYW1zOiBiZWhhdmlvdXJQYXJhbXMubWFwKChzbG90LCBpKSA9PiAoXG4gICAgICBoeWRyYXRlTm9kZShwYXJhbXNbaV0sIHNsb3QpXG4gICAgKSlcbiAgfVxufVxuIiwiaW1wb3J0IGZ1enp5c29ydCBmcm9tICdmdXp6eXNvcnQnXG5pbXBvcnQgY29tcGFjdCBmcm9tICdsb2Rhc2gvY29tcGFjdCdcbmltcG9ydCBtYXAgZnJvbSAnbG9kYXNoL21hcCdcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcydcbmltcG9ydCB7IHVzZUNhbGxiYWNrLCB1c2VDb250ZXh0LCB1c2VNZW1vLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0J1xuXG5pbXBvcnQgeyB0cmVlVG9TZXF1ZW5jZSwgc2VxdWVuY2VUb1RyZWUgfSBmcm9tICcuL2hlbHBlcnMnXG5pbXBvcnQgeyBTZWFyY2hDb250ZXh0IH0gZnJvbSAnLi4vLi4vcHJvdmlkZXJzJ1xuaW1wb3J0IHsgYmluZE5vZGUgfSBmcm9tICcuLi8uLi9LZXlib2FyZC9CaW5kaW5nL2JpbmRQcm9wVHlwZXMnXG5cbmltcG9ydCBSZXN1bHRMaXN0IGZyb20gJy4uLy4uL1ZhbHVlUGlja2VyL1Jlc3VsdExpc3QnXG5pbXBvcnQgcmVzdWx0TGlzdFN0eWxlIGZyb20gJy4uLy4uL1ZhbHVlUGlja2VyL3N0eWxlLm1vZHVsZS5jc3MnXG5pbXBvcnQgU2VhcmNoRmlsdGVyIGZyb20gJy4uLy4uL1ZhbHVlUGlja2VyL1NlYXJjaEZpbHRlcidcbmltcG9ydCBNb2RpZmllcnNQaWNrZXIgZnJvbSAnLi9Nb2RpZmllcnNQaWNrZXInXG5pbXBvcnQgS2V5Y29kZUJpbmROb2RlIGZyb20gJy4vS2V5Y29kZUJpbmROb2RlJ1xuaW1wb3J0IHsgaHlkcmF0ZVRyZWUgfSBmcm9tICcuLi8uLi9LZXlib2FyZC9CaW5kaW5nL3V0aWwnXG5pbXBvcnQgS2V5V3JhcHBlciBmcm9tICcuLi8uLi9LZXlib2FyZC9LZXlzL0tleVdyYXBwZXInXG5pbXBvcnQgQWN0aW9uQnV0dG9uIGZyb20gJy4uLy4uL0NvbW1vbi9BY3Rpb25CdXR0b24nXG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vc3R5bGVzLm1vZHVsZS5jc3MnXG5pbXBvcnQgVGlwIGZyb20gJy4uLy4uL0NvbW1vbi9UaXAnXG5cbmNvbnN0IG1vZGlmaWVyc01hcCA9IHtcbiAgTFNIRlQ6ICdMUycsXG4gIExDVFJMOiAnTEMnLFxuICBMQUxUOiAnTEEnLFxuICBMR1VJOiAnTEcnLFxuICBSU0hGVDogJ1JTJyxcbiAgUkNUUkw6ICdSQycsXG4gIFJBTFQ6ICdSQScsXG4gIFJHVUk6ICdSRydcbn1cblxuZnVuY3Rpb24gcmVuZGVyU2VhcmNoUmVzdWx0IChyZXN1bHQpIHtcbiAgY29uc3QgdGl0bGUgPSByZXN1bHQuc2VhcmNoXG4gICAgPyA8c3BhbiBkYW5nZXJvdXNseVNldElubmVySFRNTD17eyBfX2h0bWw6IGZ1enp5c29ydC5oaWdobGlnaHQocmVzdWx0LnNlYXJjaCkgfX0gLz5cbiAgICA6IDxzcGFuPntyZXN1bHQuY29kZX08L3NwYW4+XG5cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAge3RpdGxlfVxuICAgICAgPHAgY2xhc3NOYW1lPXtyZXN1bHRMaXN0U3R5bGUuZGVzY3JpcHRpb259PntyZXN1bHQuZGVzY3JpcHRpb259PC9wPlxuICAgIDwvPlxuICApXG59XG5cbmZ1bmN0aW9uIEtleWNvZGVQaWNrZXIgKHsgbm9kZSwgb25TZWxlY3QsIGJlaGF2aW91ciB9KSB7XG4gIGNvbnN0IHsgZ2V0U2VhcmNoVGFyZ2V0cywgc291cmNlcywgbWVyZ2VkR2x5cGhzIH0gPSB1c2VDb250ZXh0KFNlYXJjaENvbnRleHQpXG5cbiAgY29uc3QgY29kZXMgPSB1c2VNZW1vKCgpID0+IG1hcCh0cmVlVG9TZXF1ZW5jZShub2RlKSwgJ3NvdXJjZScpLCBbbm9kZV0pXG4gIGNvbnN0IGluaXRpYWxNb2RpZmllcnMgPSBjb2Rlcy5sZW5ndGggPT09IDEgPyBbXSA6IGNvZGVzLnNsaWNlKDAsIC0xKVxuICBjb25zdCBbc2VsZWN0ZWRNb2RpZmllcnMsIHNldFNlbGVjdGVkTW9kaWZpZXJzXSA9IHVzZVN0YXRlKG1hcChpbml0aWFsTW9kaWZpZXJzLCAnbmFtZScpKVxuICBjb25zdCBbc2VsZWN0ZWRLZXljb2RlLCBzZXRTZWxlY3RlZEtleWNvZGVdID0gdXNlU3RhdGUoY29kZXMuYXQoLTEpKVxuXG4gIGNvbnN0IGNob2ljZXMgPSB1c2VNZW1vKCgpID0+IHtcbiAgICAvLyBiaXQgb2YgYSBoYWNrOyB3ZSBjYW4ndCB1c2UgdGhlIHNlYXJjaCBwaWNrZXIgdG8gc2VsZWN0IHRoZSBcImZ1bmN0aW9uXCJcbiAgICAvLyB2ZXJzaW9uIG9mIG1vZGlmaWVyIGtleWNvZGVzIGJlY2F1c2UgdGhleSB3b24ndCBlbmQgdXAgaW4gdGhlIG1vZGlmaWVyc1xuICAgIC8vIGxpc3QgYW5kIHdlIGFyZW4ndCBhbGxvd2luZyBmb3IgcG9wdWxhdGlvbiBvZiB0aGVpciBwYXJhbWV0ZXJzLlxuICAgIC8vIFRPRE86IG9uY2UgdGhpcyBwaWNrZXIgYmVjb21lcyB0aGUgXCJzdGFuZGFyZFwiIHRoZSBmdW5jdGlvbiBtYWNyb3Mgc2hvdWxkXG4gICAgLy8gbm90IGJlIHRyZWF0ZWQgYXMga2V5Y29kZXMuXG4gICAgY29uc3QgY29kZXMgPSBnZXRTZWFyY2hUYXJnZXRzKCdjb2RlJywgYmVoYXZpb3VyLmNvZGUpXG4gICAgcmV0dXJuIGNvZGVzLmZpbHRlcihjb2RlID0+IGNvZGUucGFyYW1zLmxlbmd0aCA9PT0gMClcbiAgfSwgW2dldFNlYXJjaFRhcmdldHMsIGJlaGF2aW91cl0pXG5cbiAgLy8gaGF2ZSB0byBoeWRyYXRlIHRvIGdldCBtZXJnZWQgZ2x5cGhzXG4gIC8vIGhhcmRjb2RpbmcgaXNuJ3QgZ3JlYXQgYnV0IGl0J3MgdGhlIGtleWNvZGUgcGlja2VyIHNvIG1heWJlICcma3AnIGlzIHJlYXNvbmFibGVcbiAgY29uc3QgaHlkcmF0ZWQgPSBoeWRyYXRlVHJlZShcbiAgICAnJmtwJyxcbiAgICBbeyB2YWx1ZTogc2VsZWN0ZWRLZXljb2RlPy5jb2RlLCBwYXJhbXM6IHNlbGVjdGVkS2V5Y29kZT8ucGFyYW1zIH1dLFxuICAgIHNvdXJjZXMsXG4gICAgdW5kZWZpbmVkLFxuICAgIG1lcmdlZEdseXBoc1xuICApXG5cbiAgY29uc3Qgc2VsZWN0ID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gKGtleWNvZGUsIG1vZGlmaWVycykge1xuICAgIGNvbnN0IG1vZGlmaWVyRnVuY3Rpb25zID0gbW9kaWZpZXJzLm1hcChtb2QgPT4gbW9kaWZpZXJzTWFwW21vZF0pXG4gICAgY29uc3QgdHJlZSA9IHNlcXVlbmNlVG9UcmVlKGNvbXBhY3QoWy4uLm1vZGlmaWVyRnVuY3Rpb25zLCBrZXljb2RlPy5jb2RlXSkpXG5cbiAgICBvblNlbGVjdCh0cmVlKVxuICB9LCBbb25TZWxlY3RdKVxuXG4gIGNvbnN0IGhhbmRsZVNlbGVjdEtleWNvZGUgPSB1c2VDYWxsYmFjaygocmVzdWx0LCBldmVudCkgPT4ge1xuICAgIGlmIChldmVudC50eXBlID09PSAnZGJsY2xpY2snKSB7XG4gICAgICBzZWxlY3QocmVzdWx0LCBzZWxlY3RlZE1vZGlmaWVycylcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHNldFNlbGVjdGVkS2V5Y29kZShyZXN1bHQpXG4gIH0sIFtzZWxlY3QsIHNlbGVjdGVkTW9kaWZpZXJzLCBzZXRTZWxlY3RlZEtleWNvZGVdKVxuXG4gIGZ1bmN0aW9uIGhhbmRsZUNvbmZpcm0gKCkge1xuICAgIHNlbGVjdChzZWxlY3RlZEtleWNvZGUsIHNlbGVjdGVkTW9kaWZpZXJzKVxuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlQ2FuY2VsICgpIHtcbiAgICBvblNlbGVjdChub2RlKVxuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT17cmVzdWx0TGlzdFN0eWxlLmRpYWxvZ30+XG4gICAgICA8ZGl2IHN0eWxlPXt7IGRpc3BsYXk6ICdmbGV4JywgZ2FwOiAnMTBweCcgfX0+XG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgPHA+S2V5Y29kZTwvcD5cbiAgICAgICAgICA8S2V5V3JhcHBlciBjbGFzc05hbWU9e3N0eWxlcy5wcmV2aWV3S2V5Y29kZX0gc2VsZWN0YWJsZT17ZmFsc2V9PlxuICAgICAgICAgICAgPEtleWNvZGVCaW5kTm9kZVxuICAgICAgICAgICAgICBub2RlPXtoeWRyYXRlZC5wYXJhbXNbMF19XG4gICAgICAgICAgICAgIG9uU2VsZWN0PXsoKSA9PiB7fX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9LZXlXcmFwcGVyPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdj5cbiAgICAgICAgICA8cD5Nb2RpZmllcnM8L3A+XG4gICAgICAgICAgPE1vZGlmaWVyc1BpY2tlclxuICAgICAgICAgICAgc2VsZWN0ZWQ9e3NlbGVjdGVkTW9kaWZpZXJzfVxuICAgICAgICAgICAgb25DaGFuZ2U9e3NldFNlbGVjdGVkTW9kaWZpZXJzfVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8cD5BdmFpbGFibGUgS2V5Y29kZXM8L3A+XG4gICAgICA8U2VhcmNoRmlsdGVyXG4gICAgICAgIGNob2ljZXM9e2Nob2ljZXN9XG4gICAgICAgIGluaXRpYWxRdWVyeT17c2VsZWN0ZWRLZXljb2RlPy5jb2RlfVxuICAgICAgICBzZWFyY2hLZXk9XCJjb2RlXCJcbiAgICAgICAgcmVuZGVyUmVzdWx0cz17cmVzdWx0cyA9PiByZXN1bHRzICYmIChcbiAgICAgICAgICA8UmVzdWx0TGlzdFxuICAgICAgICAgICAgcmVzdWx0cz17cmVzdWx0c31cbiAgICAgICAgICAgIG9uU2VsZWN0PXtoYW5kbGVTZWxlY3RLZXljb2RlfVxuICAgICAgICAgICAgcmVuZGVyUmVzdWx0PXtyZW5kZXJTZWFyY2hSZXN1bHR9XG4gICAgICAgICAgLz5cbiAgICAgICAgKX1cbiAgICAgIC8+XG4gICAgICA8VGlwIGNsYXNzTmFtZT17c3R5bGVzLnF1aWNrQ2xvc2VUaXB9PlxuICAgICAgICBEb3VibGUtY2xpY2sgdG8gc2VsZWN0IGFuZCBjbG9zZSB0aGUgZGlhbG9nXG4gICAgICA8L1RpcD5cbiAgICAgIDxwIHN0eWxlPXt7IHRleHRBbGlnbjogJ2NlbnRlcicgfX0+XG4gICAgICAgIDxBY3Rpb25CdXR0b24gb25DbGljaz17aGFuZGxlQ29uZmlybX0+Q29uZmlybTwvQWN0aW9uQnV0dG9uPlxuICAgICAgICA8QWN0aW9uQnV0dG9uIG9uQ2xpY2s9e2hhbmRsZUNhbmNlbH0gc2Vjb25kYXJ5PkNhbmNlbDwvQWN0aW9uQnV0dG9uPlxuICAgICAgPC9wPlxuICAgIDwvZGl2PlxuICApXG59XG5cbktleWNvZGVQaWNrZXIucHJvcFR5cGVzID0ge1xuICBub2RlOiBiaW5kTm9kZS5pc1JlcXVpcmVkLFxuICBwYXJhbTogUHJvcFR5cGVzLm9uZU9mVHlwZShbXG4gICAgUHJvcFR5cGVzLnN0cmluZyxcbiAgICBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgZW51bTogUHJvcFR5cGVzLmFycmF5LFxuICAgICAgcmF3OiBQcm9wVHlwZXMuYm9vbCxcbiAgICAgIHR5cGU6IFByb3BUeXBlcy5zdHJpbmdcbiAgICB9KVxuICBdKS5pc1JlcXVpcmVkLFxuICBwcm9tcHQ6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgc2VhcmNoS2V5OiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIGJlaGF2aW91cjogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICBjb250ZXh0OiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIG9uU2VsZWN0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG59XG5cbmV4cG9ydCBkZWZhdWx0IEtleWNvZGVQaWNrZXJcbiIsImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcydcbmltcG9ydCB7IHVzZUNhbGxiYWNrLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0J1xuXG5pbXBvcnQgc3R5bGUgZnJvbSAnLi9zdHlsZS5tb2R1bGUuY3NzJ1xuXG5mdW5jdGlvbiBmb2N1c0lucHV0IChub2RlKSB7XG4gIGlmIChub2RlKSB7XG4gICAgbm9kZS5mb2N1cygpXG4gICAgbm9kZS5zZWxlY3QoKVxuICB9XG59XG5cbmZ1bmN0aW9uIFJhd1ZhbHVlUGlja2VyIChwcm9wcykge1xuICBjb25zdCB7IHZhbHVlOiBpbml0aWFsVmFsdWUsIHBhcmFtLCBvblNlbGVjdCB9ID0gcHJvcHNcbiAgY29uc3QgW3ZhbHVlLCBzZXRWYWx1ZV0gPSB1c2VTdGF0ZShpbml0aWFsVmFsdWUpXG5cbiAgY29uc3QgaGFuZGxlS2V5RG93biA9IHVzZUNhbGxiYWNrKGV2ZW50ID0+IHtcbiAgICBpZiAoZXZlbnQua2V5ID09PSAnRW50ZXInKSB7XG4gICAgICBvblNlbGVjdCh7IGNvZGU6IHZhbHVlIH0pXG4gICAgfVxuICB9LCBbdmFsdWUsIG9uU2VsZWN0XSlcblxuICBjb25zdCBoYW5kbGVLZXlQcmVzcyA9IHVzZUNhbGxiYWNrKGV2ZW50ID0+IHtcbiAgICBsZXQgdmFsdWUgPSBldmVudC50YXJnZXQudmFsdWVcblxuICAgIGlmIChwYXJhbS50eXBlID09PSAnbnVtYmVyJykge1xuICAgICAgdmFsdWUgPSBOdW1iZXIodmFsdWUpXG4gICAgICBpZiAoTnVtYmVyLmlzTmFOKHZhbHVlKSkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICB9XG5cbiAgICBzZXRWYWx1ZSh2YWx1ZSlcbiAgfSwgW3BhcmFtLCBzZXRWYWx1ZV0pXG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGUuZGlhbG9nfT5cbiAgICAgIDxwPkVudGVyIHJhdyB2YWx1ZTwvcD5cbiAgICAgIDxpbnB1dFxuICAgICAgICByZWY9e2ZvY3VzSW5wdXR9XG4gICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgdmFsdWU9e3ZhbHVlfVxuICAgICAgICBvbkNoYW5nZT17aGFuZGxlS2V5UHJlc3N9XG4gICAgICAgIG9uS2V5RG93bj17aGFuZGxlS2V5RG93bn1cbiAgICAgIC8+XG4gICAgPC9kaXY+XG4gIClcbn1cblxuUmF3VmFsdWVQaWNrZXIucHJvcFR5cGVzID0ge1xuICB2YWx1ZTogUHJvcFR5cGVzLmFueS5pc1JlcXVpcmVkLFxuICBwcm9tcHQ6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgcGFyYW06IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xuICAgIFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICBlbnVtOiBQcm9wVHlwZXMuYXJyYXksXG4gICAgICByYXc6IFByb3BUeXBlcy5ib29sLFxuICAgICAgdHlwZTogUHJvcFR5cGVzLnN0cmluZ1xuICAgIH0pXG4gIF0pLmlzUmVxdWlyZWQsXG4gIG9uU2VsZWN0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG59XG5cblJhd1ZhbHVlUGlja2VyLmRlZmF1bHRQcm9wcyA9IHtcbiAgdmFsdWU6ICcnXG59XG5cbmV4cG9ydCBkZWZhdWx0IFJhd1ZhbHVlUGlja2VyXG4iLCJpbXBvcnQgcGljayBmcm9tICdsb2Rhc2gvcGljaydcbmltcG9ydCB0aW1lcyBmcm9tICdsb2Rhc2gvdGltZXMnXG5pbXBvcnQgeyBjcmVhdGVTbGljZSB9IGZyb20gJ0ByZWR1eGpzL3Rvb2xraXQnXG5cbmNvbnN0IERFRkFVTFRfQklORF9CRUhBVklPVVIgPSAnJnRyYW5zJ1xuY29uc3QgY3JlYXRlRW1wdHlCaW5kaW5nID0gKHZhbHVlID0gREVGQVVMVF9CSU5EX0JFSEFWSU9VUikgPT4gKHtcbiAgdmFsdWUsIHBhcmFtczogW11cbn0pXG5cbmV4cG9ydCBjb25zdCBzZWxlY3RMYXllcnMgPSBzdGF0ZSA9PiBzdGF0ZS5rZXlib2FyZC5rZXltYXAubGF5ZXJzXG5cbmNvbnN0IGxheWVyc1NsaWNlID0gY3JlYXRlU2xpY2Uoe1xuICBuYW1lOiAnbGF5ZXJzJyxcbiAgaW5pdGlhbFN0YXRlOiBbXSxcbiAgcmVkdWNlcnM6IHtcbiAgICBjcmVhdGVMYXllciAoc3RhdGUsIGFjdGlvbikge1xuICAgICAgc3RhdGUucHVzaCh7XG4gICAgICAgIG5hbWU6IGBMYXllciAjJHtzdGF0ZS5sZW5ndGh9YCxcbiAgICAgICAgYmluZGluZ3M6IHRpbWVzKGFjdGlvbi5wYXlsb2FkLmJpbmRpbmdDb3VudCwgKCkgPT4gY3JlYXRlRW1wdHlCaW5kaW5nKCkpXG4gICAgICB9KVxuICAgIH0sXG4gICAgdXBkYXRlTGF5ZXJNZXRhZGF0YSAoc3RhdGUsIGFjdGlvbikge1xuICAgICAgY29uc3QgeyBsYXllckluZGV4IH0gPSBhY3Rpb24ucGF5bG9hZFxuICAgICAgT2JqZWN0LmFzc2lnbihzdGF0ZVtsYXllckluZGV4XSwgcGljayhhY3Rpb24ucGF5bG9hZCwgWyduYW1lJywgJ2xhYmVsJ10pKVxuICAgIH0sXG4gICAgcmVuYW1lTGF5ZXIgKHN0YXRlLCBhY3Rpb24pIHtcbiAgICAgIHN0YXRlW2FjdGlvbi5wYXlsb2FkLmluZGV4XS5uYW1lID0gYWN0aW9uLnBheWxvYWQubmFtZVxuICAgIH0sXG4gICAgZGVsZXRlTGF5ZXIgKHN0YXRlLCBhY3Rpb24pIHtcbiAgICAgIHN0YXRlLnNwbGljZShhY3Rpb24ucGF5bG9hZC5pbmRleCwgMSlcbiAgICB9LFxuICAgIHVwZGF0ZUtleUJpbmRpbmcgKHN0YXRlLCBhY3Rpb24pIHtcbiAgICAgIHN0YXRlW2FjdGlvbi5wYXlsb2FkLmxheWVySW5kZXhdLmJpbmRpbmdzW2FjdGlvbi5wYXlsb2FkLmJpbmRJbmRleF0gPSBhY3Rpb24ucGF5bG9hZC5iaW5kaW5nXG4gICAgfSxcbiAgICB1cGRhdGVTZW5zb3JCaW5kaW5ncyAoc3RhdGUsIGFjdGlvbikge1xuICAgICAgc3RhdGVbYWN0aW9uLnBheWxvYWQubGF5ZXJJbmRleF0uc2Vuc29yQmluZGluZ3NbYWN0aW9uLnBheWxvYWQuc2Vuc29ySW5kZXhdID0gYWN0aW9uLnBheWxvYWQuYmluZGluZ3NcbiAgICB9LFxuICAgIHJlYmluZFRyYW5zcGFyZW50VG9LZXlQcmVzcyAoc3RhdGUsIGFjdGlvbikge1xuICAgICAgZm9yIChjb25zdCBiaW5kaW5nIG9mIHN0YXRlW2FjdGlvbi5wYXlsb2FkLmxheWVySW5kZXhdLmJpbmRpbmdzKSB7XG4gICAgICAgIGlmIChiaW5kaW5nLnZhbHVlID09PSAnJnRyYW5zJykge1xuICAgICAgICAgIGJpbmRpbmcudmFsdWUgPSAnJmtwJ1xuICAgICAgICAgIGJpbmRpbmcucGFyYW1zID0gW11cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgcmViaW5kVHJhbnNwYXJlbnRUb05vbmUgKHN0YXRlLCBhY3Rpb24pIHtcbiAgICAgIGZvciAoY29uc3QgYmluZGluZyBvZiBzdGF0ZVthY3Rpb24ucGF5bG9hZC5sYXllckluZGV4XS5iaW5kaW5ncykge1xuICAgICAgICBpZiAoYmluZGluZy52YWx1ZSA9PT0gJyZ0cmFucycpIHtcbiAgICAgICAgICBiaW5kaW5nLnZhbHVlID0gJyZub25lJ1xuICAgICAgICAgIGJpbmRpbmcucGFyYW1zID0gW11cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgcmViaW5kTm9uZVRvS2V5cHJlc3MgKHN0YXRlLCBhY3Rpb24pIHtcbiAgICAgIGZvciAoY29uc3QgYmluZGluZyBvZiBzdGF0ZVthY3Rpb24ucGF5bG9hZC5sYXllckluZGV4XS5iaW5kaW5ncykge1xuICAgICAgICBpZiAoYmluZGluZy52YWx1ZSA9PT0gJyZub25lJykge1xuICAgICAgICAgIGJpbmRpbmcudmFsdWUgPSAnJmtwJ1xuICAgICAgICAgIGJpbmRpbmcucGFyYW1zID0gW11cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgcmViaW5kTm9uZVRvVHJhbnNwYXJlbnQgKHN0YXRlLCBhY3Rpb24pIHtcbiAgICAgIGZvciAoY29uc3QgYmluZGluZyBvZiBzdGF0ZVthY3Rpb24ucGF5bG9hZC5sYXllckluZGV4XS5iaW5kaW5ncykge1xuICAgICAgICBpZiAoYmluZGluZy52YWx1ZSA9PT0gJyZub25lJykge1xuICAgICAgICAgIGJpbmRpbmcudmFsdWUgPSAnJnRyYW5zJ1xuICAgICAgICAgIGJpbmRpbmcucGFyYW1zID0gW11cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgcmViaW5kRW1wdHlLZXlwcmVzc1RvVHJhbnNwYXJlbnQgKHN0YXRlLCBhY3Rpb24pIHtcbiAgICAgIGZvciAoY29uc3QgYmluZGluZyBvZiBzdGF0ZVthY3Rpb24ucGF5bG9hZC5sYXllckluZGV4XS5iaW5kaW5ncykge1xuICAgICAgICBpZiAoYmluZGluZy52YWx1ZSA9PT0gJyZrcCcgJiYgIWJpbmRpbmcucGFyYW1zWzBdPy52YWx1ZSkge1xuICAgICAgICAgIGJpbmRpbmcudmFsdWUgPSAnJnRyYW5zJ1xuICAgICAgICAgIGJpbmRpbmcucGFyYW1zID0gW11cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgcmViaW5kRW1wdHlLZXlwcmVzc1RvTm9uZSAoc3RhdGUsIGFjdGlvbikge1xuICAgICAgZm9yIChjb25zdCBiaW5kaW5nIG9mIHN0YXRlW2FjdGlvbi5wYXlsb2FkLmxheWVySW5kZXhdLmJpbmRpbmdzKSB7XG4gICAgICAgIGlmIChiaW5kaW5nLnZhbHVlID09PSAnJmtwJyAmJiAhYmluZGluZy5wYXJhbXNbMF0/LnZhbHVlKSB7XG4gICAgICAgICAgYmluZGluZy52YWx1ZSA9ICcmbm9uZSdcbiAgICAgICAgICBiaW5kaW5nLnBhcmFtcyA9IFtdXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn0pXG5cbmV4cG9ydCBjb25zdCB7XG4gIGNyZWF0ZUxheWVyLFxuICByZW5hbWVMYXllcixcbiAgZGVsZXRlTGF5ZXIsXG4gIHVwZGF0ZUxheWVyTWV0YWRhdGEsXG4gIHVwZGF0ZUtleUJpbmRpbmcsXG4gIHVwZGF0ZVNlbnNvckJpbmRpbmdzLFxuICByZWJpbmRUcmFuc3BhcmVudFRvS2V5UHJlc3MsXG4gIHJlYmluZFRyYW5zcGFyZW50VG9Ob25lLFxuICByZWJpbmROb25lVG9LZXlwcmVzcyxcbiAgcmViaW5kTm9uZVRvVHJhbnNwYXJlbnQsXG4gIHJlYmluZEVtcHR5S2V5cHJlc3NUb1RyYW5zcGFyZW50LFxuICByZWJpbmRFbXB0eUtleXByZXNzVG9Ob25lXG59ID0gbGF5ZXJzU2xpY2UuYWN0aW9uc1xuXG5leHBvcnQgZGVmYXVsdCBsYXllcnNTbGljZS5yZWR1Y2VyXG4iLCJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnXG5pbXBvcnQgeyB1c2VNZW1vIH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgeyB1c2VTZWxlY3RvciB9IGZyb20gJ3JlYWN0LXJlZHV4J1xuXG5pbXBvcnQgeyBzZWxlY3RMYXllcnMgfSBmcm9tICcuLi9LZXlib2FyZC9MYXllcnMvbGF5ZXJzU2xpY2UnXG5pbXBvcnQgUmVzdWx0TGlzdCBmcm9tICcuL1Jlc3VsdExpc3QnXG5pbXBvcnQgc3R5bGUgZnJvbSAnLi9zdHlsZS5tb2R1bGUuY3NzJ1xuXG5mdW5jdGlvbiBMYXllclBpY2tlciAoeyBvblNlbGVjdCB9KSB7XG4gIGNvbnN0IGxheWVycyA9IHVzZVNlbGVjdG9yKHNlbGVjdExheWVycylcbiAgY29uc3QgY2hvaWNlcyA9IHVzZU1lbW8oKCkgPT4gbGF5ZXJzLm1hcCgobGF5ZXIsIGkpID0+ICh7XG4gICAgY29kZTogaSxcbiAgICBkZXNjcmlwdGlvbjogbGF5ZXIubmFtZSB8fCBgTGF5ZXIgJHtpfWBcbiAgfSkpLCBbbGF5ZXJzXSlcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZS5kaWFsb2d9PlxuICAgICAgPHA+U2VsZWN0IGxheWVyPC9wPlxuICAgICAgPFJlc3VsdExpc3RcbiAgICAgICAgcmVzdWx0cz17Y2hvaWNlc31cbiAgICAgICAgb25TZWxlY3Q9e29uU2VsZWN0fVxuICAgICAgICByZW5kZXJSZXN1bHQ9e3Jlc3VsdCA9PiAoXG4gICAgICAgICAgPD5cbiAgICAgICAgICAgIHtyZXN1bHQuY29kZX1cbiAgICAgICAgICAgIHtyZXN1bHQuZGVzY3JpcHRpb24gJiYgPHAgY2xhc3NOYW1lPXtzdHlsZS5kZXNjcmlwdGlvbn0+e3Jlc3VsdC5kZXNjcmlwdGlvbn08L3A+fVxuICAgICAgICAgIDwvPlxuICAgICAgICApfVxuICAgICAgLz5cbiAgICA8L2Rpdj5cbiAgKVxufVxuXG5MYXllclBpY2tlci5wcm9wVHlwZXMgPSB7XG4gIHZhbHVlOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIGJlaGF2aW91cjogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICBvblNlbGVjdDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxufVxuXG5MYXllclBpY2tlci5kZWZhdWx0UHJvcHMgPSB7XG4gIHZhbHVlOiAnJ1xufVxuXG5leHBvcnQgZGVmYXVsdCBMYXllclBpY2tlclxuIiwiaW1wb3J0IHsgcGljayB9IGZyb20gJ2xvZGFzaCdcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcydcbmltcG9ydCB7IHVzZU1lbW8gfSBmcm9tICdyZWFjdCdcblxuaW1wb3J0IE1vZGFsIGZyb20gJy4uL0NvbW1vbi9Nb2RhbCdcbmltcG9ydCBFbnVtUGlja2VyIGZyb20gJy4vRW51bVBpY2tlcidcbmltcG9ydCB7IGJpbmROb2RlIH0gZnJvbSAnLi4vS2V5Ym9hcmQvQmluZGluZy9iaW5kUHJvcFR5cGVzJ1xuXG5pbXBvcnQgR2VuZXJpY1BpY2tlciBmcm9tICcuL0dlbmVyaWNQaWNrZXInXG5pbXBvcnQgSHVlU2F0VmFsUGlja2VyIGZyb20gJy4uL0VuaGFuY2VkUGlja2Vycy9SR0IvSHVlU2F0VmFsUGlja2VyJ1xuaW1wb3J0IEtleWNvZGVQaWNrZXIgZnJvbSAnLi4vRW5oYW5jZWRQaWNrZXJzL0tleWNvZGUvS2V5Y29kZVBpY2tlcidcbmltcG9ydCBSYXdWYWx1ZVBpY2tlciBmcm9tICcuL1Jhd1ZhbHVlUGlja2VyJ1xuaW1wb3J0IExheWVyUGlja2VyIGZyb20gJy4vTGF5ZXJQaWNrZXInXG5cbmZ1bmN0aW9uIFZhbHVlUGlja2VyIChwcm9wcykge1xuICBjb25zdCB7IG5vZGUsIHR5cGUsIG9uQ2FuY2VsLCBvblNlbGVjdCB9ID0gcHJvcHNcbiAgY29uc3QgcGlja2VyUHJvcHMgPSBwaWNrKHByb3BzLCBbXG4gICAgJ25vZGUnLCAndmFsdWUnLCAncHJvbXB0JywgJ3BhcmFtJywgJ25vZGUnLCAnYmVoYXZpb3VyJywgJ2NvbnRleHQnLCAnc2VhcmNoS2V5J1xuICBdKVxuXG4gIGNvbnN0IFBpY2tlckNvbXBvbmVudCA9IHVzZU1lbW8oKCkgPT4ge1xuICAgIC8vIFRPRE86IGFsbG93IGNvbXBvbmVudHMgdG8gcmVnaXN0ZXIgaGVscGVyc1xuICAgIGlmICh0eXBlID09PSAncGFyYW1zJyAmJiBub2RlLnNvdXJjZT8uaGVscGVyID09PSAnaHNiLWNvbG9yLXBpY2tlcicpIHJldHVybiBIdWVTYXRWYWxQaWNrZXJcbiAgICBpZiAobm9kZS5zbG90LnJhdykgcmV0dXJuIFJhd1ZhbHVlUGlja2VyXG4gICAgLy8gVE9ETzogU2hvdWxkbid0IG5lZWQgdG8gcmVuZGVyIHBsYWNlaG9sZGVyXG4gICAgaWYgKG5vZGUuc2xvdC50eXBlID09PSAncGxhY2Vob2xkZXInKSByZXR1cm4gUmF3VmFsdWVQaWNrZXJcbiAgICBpZiAobm9kZS5zbG90LmVudW0pIHJldHVybiBFbnVtUGlja2VyXG4gICAgaWYgKG5vZGUuc2xvdCA9PT0gJ2NvZGUnKSByZXR1cm4gS2V5Y29kZVBpY2tlclxuICAgIGlmIChub2RlLnNsb3QgPT09ICdsYXllcicpIHJldHVybiBMYXllclBpY2tlclxuICAgIHJldHVybiBHZW5lcmljUGlja2VyXG4gIH0sIFtub2RlLCB0eXBlXSlcblxuICByZXR1cm4gKFxuICAgIDxNb2RhbCBvbkRpc21pc3M9e29uQ2FuY2VsfT5cbiAgICAgIDxQaWNrZXJDb21wb25lbnRcbiAgICAgICAgey4uLnBpY2tlclByb3BzfVxuICAgICAgICBwYXJhbT17bm9kZS5zbG90fVxuICAgICAgICBvblNlbGVjdD17b25TZWxlY3R9XG4gICAgICAvPlxuICAgIDwvTW9kYWw+XG4gIClcbn1cblxuVmFsdWVQaWNrZXIucHJvcFR5cGVzID0ge1xuICB0eXBlOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIG5vZGU6IGJpbmROb2RlLmlzUmVxdWlyZWQsXG4gIGJlaGF2aW91cjogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICBwcm9tcHQ6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgc2VhcmNoS2V5OiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIHNlYXJjaFRocmVzaG9sZDogUHJvcFR5cGVzLm51bWJlcixcbiAgb25DYW5jZWw6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIG9uU2VsZWN0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG59XG5cblZhbHVlUGlja2VyLmRlZmF1bHRQcm9wcyA9IHtcbiAgdHlwZTogJ3ZhbHVlJyxcbiAgdmFsdWU6ICcnLFxuICBmcmVlRm9ybTogZmFsc2UsXG4gIHNlYXJjaFRocmVzaG9sZDogMTBcbn1cblxuZXhwb3J0IGRlZmF1bHQgVmFsdWVQaWNrZXJcbiIsIlxuZXhwb3J0IGNvbnN0IHdpdGhvdXRJbmRleCA9IChhcnJheSwgaW5kZXgpID0+IFtcbiAgLi4uYXJyYXkuc2xpY2UoMCwgaW5kZXgpLFxuICAuLi5hcnJheS5zbGljZShpbmRleCArIDEpXG5dXG5cbmV4cG9ydCBjb25zdCByZXBsYWNlSW5kZXggPSAoYXJyYXksIGluZGV4LCB2YWx1ZSkgPT4gW1xuICAuLi5hcnJheS5zbGljZSgwLCBpbmRleCksXG4gIHZhbHVlLFxuICAuLi5hcnJheS5zbGljZShpbmRleCArIDEpXG5dXG5cbmV4cG9ydCBmdW5jdGlvbiByZXBvc2l0aW9uRWxlbWVudCAoYXJyYXksIGluZGV4LCB0YXJnZXQpIHtcbiAgaWYgKHRhcmdldCA9PT0gLTEpIHtcbiAgICByZXR1cm4gWy4uLmFycmF5LmZpbHRlcigoXywgaSkgPT4gaSAhPT0gaW5kZXgpLCBhcnJheVtpbmRleF1dXG4gIH1cblxuICBjb25zdCByZW9yZGVyZWQgPSBhcnJheS5yZWR1Y2UoKGFyciwgdmFsLCBpKSA9PiB7XG4gICAgaWYgKGkgPT09IHRhcmdldCkgYXJyLnB1c2goYXJyYXlbaW5kZXhdKVxuICAgIGlmIChpICE9PSBpbmRleCkgYXJyLnB1c2godmFsKVxuICAgIHJldHVybiBhcnJcbiAgfSwgW10pXG5cbiAgcmV0dXJuIHJlb3JkZXJlZFxufVxuIiwiaW1wb3J0IHsgdXNlQ2FsbGJhY2ssIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnXG5cbmltcG9ydCBJY29uIGZyb20gJy4uLy4uLy4uL0NvbW1vbi9JY29uJ1xuaW1wb3J0IFZhbHVlUGlja2VyIGZyb20gJy4uLy4uLy4uL1ZhbHVlUGlja2VyJ1xuaW1wb3J0IHsgcmVwbGFjZUluZGV4LCB3aXRob3V0SW5kZXggfSBmcm9tICcuLi8uLi8uLi9yZWR1Y2VyLXV0aWwnXG5cbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9zdHlsZXMubW9kdWxlLmNzcydcbmltcG9ydCBBY3Rpb25CdXR0b24gZnJvbSAnLi4vLi4vLi4vQ29tbW9uL0FjdGlvbkJ1dHRvbidcbmltcG9ydCB7IGNvbXBhY3QgfSBmcm9tICdsb2Rhc2gnXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEJlaGF2aW9yc3NQcm9wZXJ0eVZhbHVlICh7IHByb3AgPSB7fSwgc2NoZW1hID0ge30sIG9uVXBkYXRlIH0pIHtcbiAgY29uc3QgeyBwYXJzZWQ6IHNlbGVjdGlvbiA9IFtdIH0gPSBwcm9wXG4gIGNvbnN0IHsgbGVuZ3RoIH0gPSBzY2hlbWFcbiAgY29uc3QgW2VkaXRpbmcsIHNldEVkaXRpbmddID0gdXNlU3RhdGUobnVsbClcblxuICBjb25zdCBpbnNlcnRQaGFuZGxlID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIG9uVXBkYXRlKHtcbiAgICAgIC4uLnByb3AsXG4gICAgICB1c2VSYXc6IGZhbHNlLFxuICAgICAgcGFyc2VkOiBbLi4uc2VsZWN0aW9uLCAnJ11cbiAgICB9KVxuXG4gICAgc2V0RWRpdGluZyhzZWxlY3Rpb24ubGVuZ3RoKVxuICB9LCBbcHJvcCwgc2VsZWN0aW9uLCBvblVwZGF0ZSwgc2V0RWRpdGluZ10pXG5cbiAgY29uc3QgdXBkYXRlUGhhbmRsZSA9IHVzZUNhbGxiYWNrKHJlc3VsdCA9PiB7XG4gICAgb25VcGRhdGUoe1xuICAgICAgLi4ucHJvcCxcbiAgICAgIHVzZVJhdzogZmFsc2UsXG4gICAgICBwYXJzZWQ6IHJlcGxhY2VJbmRleChzZWxlY3Rpb24sIGVkaXRpbmcsIHJlc3VsdC5jb2RlKVxuICAgIH0pXG5cbiAgICBzZXRFZGl0aW5nKG51bGwpXG4gIH0sIFtwcm9wLCBzZWxlY3Rpb24sIGVkaXRpbmcsIG9uVXBkYXRlXSlcblxuICBjb25zdCByZW1vdmVQaGFuZGxlID0gdXNlQ2FsbGJhY2soaW5kZXggPT4ge1xuICAgIG9uVXBkYXRlKHtcbiAgICAgIC4uLnByb3AsXG4gICAgICB1c2VSYXc6IGZhbHNlLFxuICAgICAgcGFyc2VkOiB3aXRob3V0SW5kZXgoc2VsZWN0aW9uLCBpbmRleClcbiAgICB9KVxuICB9LCBbcHJvcCwgc2VsZWN0aW9uLCBvblVwZGF0ZV0pXG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2PlxuICAgICAgPG9sIGNsYXNzTmFtZT17Y29tcGFjdChbXG4gICAgICAgIHN0eWxlcy5wcm9wZXJ0eVBoYW5kbGVTZWxlY3QsXG4gICAgICAgIGxlbmd0aCA9PT0gMSAmJiBzdHlsZXMucHJvcGVydHlQaGFuZGxlU2luZ2xldG9uXG4gICAgICBdKS5qb2luKCcgJyl9PlxuICAgICAgICB7c2VsZWN0aW9uLm1hcCgocGhhbmRsZSwgaSkgPT4gKFxuICAgICAgICAgIDxsaSBrZXk9e2l9PlxuICAgICAgICAgICAgPHNwYW5cbiAgICAgICAgICAgICAgY2xhc3NOYW1lPXtzdHlsZXMuYmVoYXZpb3JCaW5kfVxuICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBzZXRFZGl0aW5nKGkpfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICB7cGhhbmRsZX1cbiAgICAgICAgICAgICAge2xlbmd0aCAhPT0gMSAmJiAoXG4gICAgICAgICAgICAgICAgPEljb25cbiAgICAgICAgICAgICAgICAgIG5hbWU9XCJ0aW1lc1wiXG4gICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e3N0eWxlcy5waGFuZGxlUmVtb3ZlfVxuICAgICAgICAgICAgICAgICAgb25DbGljaz17ZXZlbnQgPT4ge1xuICAgICAgICAgICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKVxuICAgICAgICAgICAgICAgICAgICByZW1vdmVQaGFuZGxlKGkpXG4gICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgPC9saT5cbiAgICAgICAgKSl9XG4gICAgICA8L29sPlxuICAgICAge2VkaXRpbmcgIT09IG51bGwgJiYgKFxuICAgICAgICA8VmFsdWVQaWNrZXJcbiAgICAgICAgICBub2RlPXt7IHZhbHVlOiBzZWxlY3Rpb25bZWRpdGluZ10sIHBhcmFtczogW10sIHNsb3Q6ICdiZWhhdmlvdXInIH19XG4gICAgICAgICAgdHlwZT1cInZhbHVlXCJcbiAgICAgICAgICBjb250ZXh0PVwibm9uZVwiXG4gICAgICAgICAgYmVoYXZpb3VyPXt7IGNvZGU6IHNlbGVjdGlvbltlZGl0aW5nXSB9fVxuICAgICAgICAgIHByb21wdD1cIlNlbGVjdCBCZWhhdmlvclwiXG4gICAgICAgICAgc2VhcmNoS2V5PVwiY29kZVwiXG4gICAgICAgICAgb25TZWxlY3Q9e3VwZGF0ZVBoYW5kbGV9XG4gICAgICAgICAgb25DYW5jZWw9eygpID0+IHNldEVkaXRpbmcobnVsbCl9XG4gICAgICAgIC8+XG4gICAgICApfVxuICAgICAge2xlbmd0aCAmJiBzZWxlY3Rpb24ubGVuZ3RoIDwgbGVuZ3RoICYmIChcbiAgICAgICAgPEFjdGlvbkJ1dHRvbiBzZWNvbmRhcnkgb25DbGljaz17aW5zZXJ0UGhhbmRsZX0+XG4gICAgICAgICAgPEljb24gbmFtZT1cInBsdXNcIiAvPiBBZGQgQmVoYXZpb3JcbiAgICAgICAgPC9BY3Rpb25CdXR0b24+XG4gICAgICApfVxuICAgIDwvZGl2PlxuICApXG59XG4iLCJpbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlTWVtbyB9IGZyb20gJ3JlYWN0J1xuXG5pbXBvcnQgQmluZFZhbHVlIGZyb20gJy4uLy4uL0tleWJvYXJkL0JpbmRpbmcvQmluZFZhbHVlJ1xuaW1wb3J0IHN0eWxlcyBmcm9tICcuLi8uLi9LZXlib2FyZC9LZXlzL3N0eWxlcy5tb2R1bGUuY3NzJ1xuXG5jb25zdCBvdXRlclN0eWxlID0ge1xuICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcbiAgY3Vyc29yOiAncG9pbnRlcicsXG4gIHZlcnRpY2FsQWxpZ246ICd0ZXh0LXRvcCcsXG4gIGJvcmRlcjogJzAuNzVweCBzb2xpZCB2YXIoLS1rZXktY29sb3ItYmFzZSknLFxuICBib3JkZXJSYWRpdXM6ICczcHgnXG59XG5jb25zdCBpbm5lclN0eWxlID0ge1xuICBkaXNwbGF5OiAnZmxleCcsXG4gIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gIHdpZHRoOiAnMTBweCcsXG4gIGhlaWdodDogJzEwcHgnLFxuICBtYXJnaW46ICcxcHgnLFxuICBib3JkZXJSYWRpdXM6ICcycHgnXG59XG5cbmZ1bmN0aW9uIEh1ZVNhdFZhbEJpbmROb2RlICh7IG5vZGUsIG9uU2VsZWN0IH0pIHtcbiAgY29uc3QgeyBwYXJhbXM6IFtoLCBzLCBiXSB9ID0gbm9kZVxuXG4gIGNvbnN0IGhhbmRsZVNlbGVjdFBhcmFtcyA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBvblNlbGVjdCh7IG5vZGUsIHR5cGU6ICdwYXJhbXMnIH0pXG4gIH0sIFtub2RlLCBvblNlbGVjdF0pXG5cbiAgY29uc3QgaXNFbXB0eSA9IHVzZU1lbW8oKCkgPT4gKFxuICAgIFtoLCBzLCBiXS5zb21lKHYgPT4gdi52YWx1ZSA9PT0gdW5kZWZpbmVkKVxuICApLCBbaCwgcywgYl0pXG5cbiAgY29uc3QgYmFja2dyb3VuZENvbG9yID0gYGhzbCgke2gudmFsdWV9LCAke3MudmFsdWV9JSwgJHtiLnZhbHVlfSUpYFxuXG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIDxCaW5kVmFsdWUgbm9kZT17bm9kZX0gb25TZWxlY3Q9e29uU2VsZWN0fSAvPlxuICAgICAgeyFpc0VtcHR5XG4gICAgICAgID8gKFxuICAgICAgICA8ZGl2IG9uQ2xpY2s9e2hhbmRsZVNlbGVjdFBhcmFtc30gc3R5bGU9e291dGVyU3R5bGV9PlxuICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgIGNsYXNzTmFtZT17aXNFbXB0eSA/IHN0eWxlcy5taXNzaW5nVmFsdWUgOiBudWxsfVxuICAgICAgICAgICAgc3R5bGU9e3sgLi4uaW5uZXJTdHlsZSwgYmFja2dyb3VuZENvbG9yIH19XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgICAgKVxuICAgICAgICA6IDxCaW5kVmFsdWUgbm9kZT17e319IG9uU2VsZWN0PXtoYW5kbGVTZWxlY3RQYXJhbXN9IC8+fVxuICAgIDwvPlxuICApXG59XG5cbmV4cG9ydCBkZWZhdWx0IEh1ZVNhdFZhbEJpbmROb2RlXG4iLCJpbXBvcnQgZ2V0IGZyb20gJ2xvZGFzaC9nZXQnXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnXG5pbXBvcnQgeyB1c2VNZW1vIH0gZnJvbSAncmVhY3QnXG5cbmltcG9ydCAqIGFzIGJpbmRQcm9wVHlwZXMgZnJvbSAnLi9iaW5kUHJvcFR5cGVzJ1xuaW1wb3J0IEJpbmRWYWx1ZSBmcm9tICcuL0JpbmRWYWx1ZSdcbmltcG9ydCBLZXljb2RlQmluZE5vZGUgZnJvbSAnLi4vLi4vRW5oYW5jZWRQaWNrZXJzL0tleWNvZGUvS2V5Y29kZUJpbmROb2RlJ1xuaW1wb3J0IEh1ZVNhdFZhbEJpbmROb2RlIGZyb20gJy4uLy4uL0VuaGFuY2VkUGlja2Vycy9SR0IvSHVlU2F0VmFsQmluZE5vZGUnXG5cbmltcG9ydCBzdHlsZXMgZnJvbSAnLi4vS2V5cy9zdHlsZXMubW9kdWxlLmNzcydcblxuZnVuY3Rpb24gR2VuZXJpY0JpbmROb2RlICh7IG5vZGUsIG9uU2VsZWN0IH0pIHtcbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPEJpbmRWYWx1ZVxuICAgICAgICBub2RlPXtub2RlfVxuICAgICAgICBvblNlbGVjdD17b25TZWxlY3R9XG4gICAgICAvPlxuICAgICAge2dldChub2RlLCAnc291cmNlLnBhcmFtcy5sZW5ndGgnKSA+IDBcbiAgICAgICAgPyAoXG4gICAgICAgICAgICA8QmluZFBhcmFtbGlzdFxuICAgICAgICAgICAgICBzbG90cz17bm9kZS5zb3VyY2UucGFyYW1zfVxuICAgICAgICAgICAgICBwYXJhbXM9e25vZGUucGFyYW1zfVxuICAgICAgICAgICAgICBvblNlbGVjdD17b25TZWxlY3R9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgIClcbiAgICAgICAgOiBudWxsfVxuICAgIDwvPlxuICApXG59XG5cbmZ1bmN0aW9uIEJpbmRQYXJhbSAocHJvcHMpIHtcbiAgY29uc3QgeyBub2RlLCBvblNlbGVjdCwgc2xvdCB9ID0gcHJvcHNcbiAgY29uc3QgQmluZENvbXBvbmVudCA9IHVzZU1lbW8oKCkgPT4ge1xuICAgIC8vIFRPRE86IGFsbG93IGNvbXBvbmVudHMgdG8gcmVnaXN0ZXIgaGVscGVyc1xuICAgIGlmIChub2RlLnNvdXJjZT8uaGVscGVyID09PSAnaHNiLWNvbG9yLXBpY2tlcicpIHJldHVybiBIdWVTYXRWYWxCaW5kTm9kZVxuICAgIGlmIChzbG90ID09PSAnY29kZScpIHJldHVybiBLZXljb2RlQmluZE5vZGVcbiAgICByZXR1cm4gR2VuZXJpY0JpbmROb2RlXG4gIH0sIFtub2RlLCBzbG90XSlcblxuICByZXR1cm4gKFxuICAgIDxzcGFuIGNsYXNzTmFtZT17c3R5bGVzLnBhcmFtfT5cbiAgICAgIDxCaW5kQ29tcG9uZW50IG5vZGU9e25vZGV9IG9uU2VsZWN0PXtvblNlbGVjdH0gLz5cbiAgICA8L3NwYW4+XG4gIClcbn1cblxuZnVuY3Rpb24gQmluZFBhcmFtbGlzdCAocHJvcHMpIHtcbiAgY29uc3QgeyBzbG90cywgcGFyYW1zLCBvblNlbGVjdCwgcm9vdCwgd3JhcHBlclByb3BzIH0gPSBwcm9wc1xuICByZXR1cm4gKFxuICAgIDxzcGFuXG4gICAgICBjbGFzc05hbWU9e3N0eWxlcy5wYXJhbXN9XG4gICAgICBkYXRhLWlzLXJvb3Q9eyEhcm9vdH1cbiAgICAgIGRhdGEtcGFyYW0tY291bnQ9e3BhcmFtcy5sZW5ndGh9XG4gICAgICB7Li4ud3JhcHBlclByb3BzfVxuICAgID5cbiAgICAgIHtzbG90cy5tYXAoKHNsb3QsIGkpID0+IHNsb3QudHlwZSAhPT0gJ3BsYWNlaG9sZGVyJyAmJiAoXG4gICAgICAgIDxCaW5kUGFyYW1cbiAgICAgICAgICBrZXk9e2l9XG4gICAgICAgICAgc2xvdD17c2xvdH1cbiAgICAgICAgICBub2RlPXtwYXJhbXNbaV19XG4gICAgICAgICAgb25TZWxlY3Q9e29uU2VsZWN0fVxuICAgICAgICAvPlxuICAgICAgKSl9XG4gICAgPC9zcGFuPlxuICApXG59XG5cbkJpbmRQYXJhbWxpc3QucHJvcFR5cGVzID0ge1xuICBzbG90czogUHJvcFR5cGVzLmFycmF5T2YoYmluZFByb3BUeXBlcy5wYXJhbSkuaXNSZXF1aXJlZCxcbiAgcGFyYW1zOiBQcm9wVHlwZXMuYXJyYXlPZihiaW5kUHJvcFR5cGVzLmJpbmROb2RlKS5pc1JlcXVpcmVkLFxuICBzb3VyY2U6IGJpbmRQcm9wVHlwZXMuc291cmNlLFxuICBvblNlbGVjdDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxufVxuXG5leHBvcnQgZGVmYXVsdCBCaW5kUGFyYW1saXN0XG4iLCJpbXBvcnQgY2xvbmVEZWVwIGZyb20gJ2xvZGFzaC9jbG9uZURlZXAnXG5pbXBvcnQgZ2V0IGZyb20gJ2xvZGFzaC9nZXQnXG5pbXBvcnQgcGljayBmcm9tICdsb2Rhc2gvcGljaydcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcydcbmltcG9ydCB7IHVzZUNvbnRleHQsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnXG5cbmltcG9ydCB7IFNlYXJjaENvbnRleHQgfSBmcm9tICcuLi8uLi9wcm92aWRlcnMnXG5pbXBvcnQgeyBnZXRCZWhhdmlvdXJQYXJhbXMgfSBmcm9tICcuLi8uLi9rZXltYXAnXG5cbmltcG9ydCBCaW5kUGFyYW1saXN0IGZyb20gJy4vQmluZFBhcmFtbGlzdCdcbmltcG9ydCAqIGFzIGJpbmRQcm9wVHlwZXMgZnJvbSAnLi9iaW5kUHJvcFR5cGVzJ1xuaW1wb3J0IHtcbiAgY3JlYXRlUHJvbXB0TWVzc2FnZSxcbiAgaHlkcmF0ZVRyZWUsXG4gIGlzU2ltcGxlLFxuICBpc0NvbXBsZXgsXG4gIG1ha2VJbmRleFxufSBmcm9tICcuL3V0aWwnXG5pbXBvcnQgc3R5bGVzIGZyb20gJy4uL0tleXMvc3R5bGVzLm1vZHVsZS5jc3MnXG5cbmltcG9ydCBJY29uIGZyb20gJy4uLy4uL0NvbW1vbi9JY29uJ1xuaW1wb3J0IFZhbHVlUGlja2VyIGZyb20gJy4uLy4uL1ZhbHVlUGlja2VyJ1xuaW1wb3J0IHsgY29tcGFjdCB9IGZyb20gJ2xvZGFzaCdcblxuZnVuY3Rpb24gaGFzRXJyb3JzIChpbmRleCkge1xuICAvLyBUaGUgZmlyc3QgdmFsdWUgaW4gdGhlIGxpc3QgaXMgdGhlIGJlaGF2aW91ci4gSWYgaXQgZG9lc24ndCBoYXZlIGEgc291cmNlXG4gIC8vIHRoYXQgbWVhbnMgdGhhdCB3ZSBkb24ndCBoYXZlIGRldGFpbHMgYWJvdXQgd2hhdCBpdCBpcy5cbiAgaWYgKCFpbmRleFswXS5zb3VyY2UuY29kZSkge1xuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICBmb3IgKGNvbnN0IHZhbHVlIG9mIGluZGV4KSB7XG4gICAgaWYgKCh2YWx1ZS5zb3VyY2U/LnBhcmFtcyB8fCBbXSkubGVuZ3RoID4gdmFsdWUucGFyYW1zLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gICAgaWYgKHZhbHVlLnBhcmFtcy5zb21lKHYgPT4gdi52YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHYudmFsdWUgPT09ICcnIHx8IHYuc291cmNlID09PSB1bmRlZmluZWQpKSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBCaW5kaW5nIChwcm9wcykge1xuICBjb25zdCB7IHNvdXJjZXMsIG1lcmdlZEdseXBocyB9ID0gdXNlQ29udGV4dChTZWFyY2hDb250ZXh0KVxuICBjb25zdCB7IGNvbnRleHQgPSAnbm9uZScsIGhpZGVCZWhhdmlvdXIsIHZhbHVlLCBwYXJhbXMsIG9uVXBkYXRlIH0gPSBwcm9wc1xuICBjb25zdCBbZWRpdGluZywgc2V0RWRpdGluZ10gPSB1c2VTdGF0ZShudWxsKVxuXG4gIGNvbnN0IGJpbmQgPSB2YWx1ZVxuICBjb25zdCBiZWhhdmlvdXIgPSBnZXQoc291cmNlcy5iZWhhdmlvdXJzQnlDb250ZXh0W2NvbnRleHRdLCBiaW5kLCB7fSlcbiAgY29uc3QgYmVoYXZpb3VyUGFyYW1zID0gZ2V0QmVoYXZpb3VyUGFyYW1zKHBhcmFtcywgYmVoYXZpb3VyKVxuXG4gIGNvbnN0IGJpbmRUcmVlID0gaHlkcmF0ZVRyZWUodmFsdWUsIHBhcmFtcywgc291cmNlcywgY29udGV4dCwgbWVyZ2VkR2x5cGhzKVxuXG4gIGNvbnN0IGluZGV4ID0gbWFrZUluZGV4KGJpbmRUcmVlKVxuICBjb25zdCBlcnJvcnMgPSBoYXNFcnJvcnMoaW5kZXgpXG5cbiAgZnVuY3Rpb24gaGFuZGxlU2VsZWN0Tm9kZSAoeyBub2RlLCB0eXBlID0gJ3ZhbHVlJyB9KSB7XG4gICAgc2V0RWRpdGluZyh7IG5vZGUsIHR5cGUsIG5vZGVJbmRleDogaW5kZXguaW5kZXhPZihub2RlKSB9KVxuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlU2VsZWN0VmFsdWUgKHNvdXJjZSkge1xuICAgIGlmIChlZGl0aW5nLnR5cGUgPT09ICd0cmVlJykge1xuICAgICAgcmV0dXJuIGhhbmRsZVNlbGVjdFRyZWUoc291cmNlKVxuICAgIH1cblxuICAgIGlmIChlZGl0aW5nLnR5cGUgPT09ICdwYXJhbXMnKSB7XG4gICAgICByZXR1cm4gaGFuZGxlU2VsZWN0UGFyYW1zKHNvdXJjZSkgLy8gdWdoXG4gICAgfVxuXG4gICAgY29uc3QgeyBub2RlLCBub2RlSW5kZXggfSA9IGVkaXRpbmdcbiAgICBjb25zdCB1cGRhdGVkID0gY2xvbmVEZWVwKGJpbmRUcmVlKVxuICAgIGNvbnN0IGluZGV4ID0gbWFrZUluZGV4KHVwZGF0ZWQpXG4gICAgY29uc3QgdGFyZ2V0Tm9kZSA9IGluZGV4W25vZGVJbmRleF1cblxuICAgIC8vIEF0dGVtcHQgdG8gY2FzdCByYXcgaW5wdXRzIHRvIG5vbi1zdHJpbmcgdHlwZSBpZiBzdWNoIGEgdHlwZSBpcyBkZWZpbmVkXG4gICAgLy8gYW5kIEkndmUgc3BlY2lmaWNhbGx5IGFjY291bnRlZCBmb3IgY2FzdGluZyB0byB0aGF0IHR5cGUgaGVyZS5cbiAgICAvLyBObyBlcnJvciBoYW5kbGluZyB5ZXQsIHNvLi4uXG4gICAgaWYgKG5vZGUuc2xvdC5yYXcpIHtcbiAgICAgIGlmIChub2RlLnNsb3QudHlwZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgc291cmNlLmNvZGUgPSBOdW1iZXIoc291cmNlLmNvZGUpXG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChub2RlLnNsb3QgPT09ICdjb21tYW5kJykge1xuICAgICAgY29uc3Qgb2xkQWRkaXRpb25hbFBhcmFtcyA9IHRhcmdldE5vZGUuc291cmNlPy5hZGRpdGlvbmFsUGFyYW1zPy5sZW5ndGggfHwgMFxuICAgICAgY29uc3QgbmV3QWRkaXRpb25hbFBhcmFtcyA9IHNvdXJjZS5hZGRpdGlvbmFsUGFyYW1zPy5sZW5ndGggfHwgMFxuICAgICAgLy8gV2hlbiBzd2l0Y2hpbmcgZnJvbSBhIGNvbW1hbmQgcGFyYW1ldGVyIHRoYXQgaGFzIGFkZGl0aW9uYWxQYXJhbXMgdG9cbiAgICAgIC8vIGFub3RoZXIgY29tbWFuZCBwYXJhbWV0ZXIgdGhhdCBoYXMgZmV3ZXIgKG9yIG5vbmUpLCB0aGUgc2VsZWN0ZWQgdmFsdWVzXG4gICAgICAvLyBhcmUgc3RpbGwgcHJlc2VudCBpbiB0aGUgdHJlZSBidXQgYXJlbid0IHJlbmRlcmVkLiBUaGVyZWZvcmUgaXQncyBzdGlsbFxuICAgICAgLy8gcG9zc2libGUgZm9yIHRoZSB1bnVzZWQgdmFsdWVzIHRvIGJlIHNhdmVkIHdoZW4gdGhlIGtleW1hcCBpcyB3cml0dGVuLlxuICAgICAgLy8gVGhpcyB0ZWNobmljYWxseSBkb2Vzbid0IGNhdXNlIGVycm9ycyBiZWNhdXNlIGJlaGF2aW91cnMgYXJlIHdyaXR0ZW4gdG9cbiAgICAgIC8vIGlnbm9yZSB0aGVzZSB2YWx1ZXMsIGJ1dCBpdCBjYW4gYmUgY29uZnVzaW5nLlxuICAgICAgLy8gVE9ETzogbG9vayBpbnRvIGFjdHVhbGx5IG1ha2luZyBzdXJlIHRoYXQgd2UgYXJlbid0IHNlbmRpbmcgdGhlc2VcbiAgICAgIC8vIHBoYW50b20gdmFsdWVzIHdoZW4gc3VibWl0dGluZyBrZXltYXAgc3RhdGUuXG4gICAgICBpZiAobmV3QWRkaXRpb25hbFBhcmFtcyA8IG9sZEFkZGl0aW9uYWxQYXJhbXMpIHtcbiAgICAgICAgLy8gdGVjaG5pY2FsbHkgdGhpcyBjb3VsZCBiZSBhbnl3aGVyZSBpbiB0aGUgdHJlZSBidXQgbGV0cyBhc3N1bWUgZm9yXG4gICAgICAgIC8vIGNvbnZlbmllbmNlIHRoYXQgc3dpdGNoaW5nIGEgXCJjb21tYW5kXCIgcGFyYW0gY2FuIG9ubHkgaGFwcGVuIHRvIHRoZVxuICAgICAgICAvLyBmaXJzdCBjaGlsZCBvZiB0aGUgYmVoYXZpb3VyIGJpbmQuXG4gICAgICAgIGNvbnN0IHRyZWUgPSBpbmRleFswXVxuICAgICAgICB0cmVlLnBhcmFtcy5zcGxpY2UoMSwgdHJlZS5wYXJhbXMubGVuZ3RoIC0gMSlcbiAgICAgICAgaW5kZXguc3BsaWNlKDIsIGluZGV4Lmxlbmd0aCAtIDEpXG4gICAgICB9XG4gICAgfVxuXG4gICAgdGFyZ2V0Tm9kZS52YWx1ZSA9IHNvdXJjZS5jb2RlXG4gICAgZGVsZXRlIHRhcmdldE5vZGUuX2lzUGxhY2Vob2xkZXJcblxuICAgIC8vIENsZWFyIHBhcmFtZXRlcnMgaWYgdGhlIG5ldyBzb3VyY2UgcGFyYW1zIGxpc3QgZG9lc24ndCBtYXRjaCB0aGUgb2xkIG9uZS5cbiAgICAvLyBUT0RPOiBpbnN0ZWFkIG9mIGEgcmVkdWNlIGFuZCBpdGVyYXRpbmcgdGhyb3VnaCB0aGUgZW50aXJlIGFycmF5IGluIGFsbFxuICAgIC8vIGNhc2VzLCB0aGlzIGNvdWxkIGxvb2sgZm9yIHRoZSBmaXJzdCBpbmRleCB3aGVyZSBib3RoIHBhcmFtcyBsaXN0cyBkb24ndFxuICAgIC8vIG1hdGNoIGFuZCB0aGVuIHNwbGljZSB0YXJnZXROb2RlLnBhcmFtcyBmcm9tIHRoZXJlXG4gICAgdGFyZ2V0Tm9kZS5wYXJhbXMgPSAoc291cmNlPy5wYXJhbXMgfHwgW10pLnJlZHVjZSgocGFyYW1zLCBwLCBpKSA9PiB7XG4gICAgICBpZiAodGFyZ2V0Tm9kZS5zb3VyY2U/LnBhcmFtcz8uW2ldID09PSBzb3VyY2UucGFyYW1zW2ldKSB7XG4gICAgICAgIHBhcmFtcy5wdXNoKHRhcmdldE5vZGUucGFyYW1zW2ldKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyYW1zLnB1c2goeyB2YWx1ZTogMCwgX2lzUGxhY2Vob2xkZXI6IHRydWUgfSlcbiAgICAgIH1cbiAgICAgIHJldHVybiBwYXJhbXNcbiAgICB9LCBbXSlcblxuICAgIGluZGV4LmZvckVhY2gobm9kZSA9PiB7XG4gICAgICBkZWxldGUgbm9kZS5zb3VyY2VcbiAgICB9KVxuXG4gICAgc2V0RWRpdGluZyhudWxsKVxuICAgIG9uVXBkYXRlKHBpY2sodXBkYXRlZCwgWyd2YWx1ZScsICdwYXJhbXMnLCAnX2lzUGxhY2Vob2xkZXInXSkpXG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVTZWxlY3RUcmVlICh7IHZhbHVlLCBwYXJhbXMgfSkge1xuICAgIGNvbnN0IHsgbm9kZUluZGV4IH0gPSBlZGl0aW5nXG4gICAgY29uc3QgdXBkYXRlZCA9IGNsb25lRGVlcChiaW5kVHJlZSlcbiAgICBjb25zdCBpbmRleCA9IG1ha2VJbmRleCh1cGRhdGVkKVxuICAgIGNvbnN0IHRhcmdldE5vZGUgPSBpbmRleFtub2RlSW5kZXhdXG5cbiAgICAvLyBBc3N1bWUgdGhlc2UgYXJlIGFsbCBmaW5lP1xuICAgIHRhcmdldE5vZGUudmFsdWUgPSB2YWx1ZVxuICAgIHRhcmdldE5vZGUucGFyYW1zID0gcGFyYW1zXG4gICAgZGVsZXRlIHRhcmdldE5vZGUuX2lzUGxhY2Vob2xkZXJcblxuICAgIGluZGV4LmZvckVhY2gobm9kZSA9PiB7XG4gICAgICBkZWxldGUgbm9kZS5zb3VyY2VcbiAgICB9KVxuXG4gICAgc2V0RWRpdGluZyhudWxsKVxuICAgIG9uVXBkYXRlKHBpY2sodXBkYXRlZCwgWyd2YWx1ZScsICdwYXJhbXMnXSkpXG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVTZWxlY3RQYXJhbXMgKHBhcmFtcykge1xuICAgIGNvbnN0IHsgbm9kZUluZGV4IH0gPSBlZGl0aW5nXG4gICAgY29uc3QgdXBkYXRlZCA9IGNsb25lRGVlcChiaW5kVHJlZSlcbiAgICBjb25zdCBpbmRleCA9IG1ha2VJbmRleCh1cGRhdGVkKVxuICAgIGNvbnN0IHRhcmdldE5vZGUgPSBpbmRleFtub2RlSW5kZXhdXG5cbiAgICAvLyBBc3N1bWUgdGhlc2UgYXJlIGFsbCBmaW5lP1xuICAgIHRhcmdldE5vZGUucGFyYW1zID0gcGFyYW1zXG5cbiAgICBpbmRleC5mb3JFYWNoKG5vZGUgPT4ge1xuICAgICAgZGVsZXRlIG5vZGUuc291cmNlXG4gICAgfSlcblxuICAgIHNldEVkaXRpbmcobnVsbClcbiAgICBvblVwZGF0ZShwaWNrKHVwZGF0ZWQsIFsndmFsdWUnLCAncGFyYW1zJ10pKVxuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAge2JlaGF2aW91ciAmJiAhaGlkZUJlaGF2aW91clxuICAgICAgICA/IChcbiAgICAgICAgPHNwYW5cbiAgICAgICAgICBjbGFzc05hbWU9e2NvbXBhY3QoW1xuICAgICAgICAgICAgc3R5bGVzWydiZWhhdmlvdXItYmluZGluZyddLFxuICAgICAgICAgICAgIWJlaGF2aW91ci5jb2RlICYmIHN0eWxlcy5taXNzaW5nVmFsdWVcbiAgICAgICAgICBdKS5qb2luKCcgJyl9XG4gICAgICAgICAgb25DbGljaz17KCkgPT4gaGFuZGxlU2VsZWN0Tm9kZSh7IG5vZGU6IGJpbmRUcmVlIH0pfVxuICAgICAgICA+XG4gICAgICAgICAge2JlaGF2aW91ci5jb2RlIHx8ICfiprgnfVxuICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgKVxuICAgICAgICA6IG51bGx9XG4gICAgICB7ZXJyb3JzICYmIChcbiAgICAgICAgPEljb25cbiAgICAgICAgICBuYW1lPVwid2FybmluZ1wiXG4gICAgICAgICAgY2xhc3NOYW1lPXtzdHlsZXMubWlzc2luZ31cbiAgICAgICAgICB0aXRsZT1cIkJpbmRpbmcgaGFzIG1pc3NpbmcgdmFsdWUocylcIlxuICAgICAgICAvPlxuICAgICAgKX1cbiAgICAgIDxCaW5kUGFyYW1saXN0XG4gICAgICAgIHJvb3Q9e3RydWV9XG4gICAgICAgIHNsb3RzPXtiZWhhdmlvdXJQYXJhbXN9XG4gICAgICAgIHBhcmFtcz17YmluZFRyZWUucGFyYW1zfVxuICAgICAgICBvblNlbGVjdD17aGFuZGxlU2VsZWN0Tm9kZX1cbiAgICAgICAgd3JhcHBlclByb3BzPXt7XG4gICAgICAgICAgJ2RhdGEtc2ltcGxlJzogaXNTaW1wbGUoYmluZFRyZWUpLFxuICAgICAgICAgICdkYXRhLWxvbmcnOiBpc0NvbXBsZXgoYmluZFRyZWUsIGJlaGF2aW91clBhcmFtcylcbiAgICAgICAgfX1cbiAgICAgIC8+XG4gICAgICB7ZWRpdGluZyAmJiAoXG4gICAgICAgIDxWYWx1ZVBpY2tlclxuICAgICAgICAgIG5vZGU9e2VkaXRpbmcubm9kZX1cbiAgICAgICAgICB0eXBlPXtlZGl0aW5nLnR5cGV9XG4gICAgICAgICAgYmVoYXZpb3VyPXtiZWhhdmlvdXJ9XG4gICAgICAgICAgY29udGV4dD17Y29udGV4dH1cbiAgICAgICAgICBwcm9tcHQ9e2NyZWF0ZVByb21wdE1lc3NhZ2UoZWRpdGluZy5ub2RlLnNsb3QpfVxuICAgICAgICAgIHNlYXJjaEtleT1cImNvZGVcIlxuICAgICAgICAgIG9uU2VsZWN0PXtoYW5kbGVTZWxlY3RWYWx1ZX1cbiAgICAgICAgICBvbkNhbmNlbD17KCkgPT4gc2V0RWRpdGluZyhudWxsKX1cbiAgICAgICAgLz5cbiAgICAgICl9XG4gICAgPC8+XG4gIClcbn1cblxuQmluZGluZy5wcm9wVHlwZXMgPSB7XG4gIGNvbnRleHQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGhpZGVCZWhhdmlvdXI6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG4gIHZhbHVlOiBiaW5kUHJvcFR5cGVzLnZhbHVlLmlzUmVxdWlyZWQsXG4gIHBhcmFtczogUHJvcFR5cGVzLmFycmF5T2YoYmluZFByb3BUeXBlcy5ub2RlKSxcbiAgb25VcGRhdGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbn1cblxuQmluZGluZy5kZWZhdWx0UHJvcHMgPSB7XG4gIGhpZGVCZWhhdmlvdXI6IGZhbHNlXG59XG5cbmV4cG9ydCBkZWZhdWx0IEJpbmRpbmdcbiIsImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcydcblxuaW1wb3J0IEtleVdyYXBwZXIgZnJvbSAnLi9LZXlXcmFwcGVyJ1xuXG5pbXBvcnQgQmluZGluZyBmcm9tICcuLi9CaW5kaW5nL0JpbmRpbmcnXG5pbXBvcnQgKiBhcyBiaW5kUHJvcFR5cGVzIGZyb20gJy4uL0JpbmRpbmcvYmluZFByb3BUeXBlcydcblxuZnVuY3Rpb24gS2V5IChwcm9wcykge1xuICBjb25zdCB7IGNvbnRleHQsIHZhbHVlLCBwYXJhbXMsIGtleVdyYXBwZXJQcm9wcyA9IHt9LCBvblVwZGF0ZSB9ID0gcHJvcHNcblxuICByZXR1cm4gKFxuICAgIDxLZXlXcmFwcGVyIHsuLi5rZXlXcmFwcGVyUHJvcHN9PlxuICAgICAgPEJpbmRpbmdcbiAgICAgICAgY29udGV4dD17Y29udGV4dH1cbiAgICAgICAgdmFsdWU9e3ZhbHVlfVxuICAgICAgICBwYXJhbXM9e3BhcmFtc31cbiAgICAgICAgb25VcGRhdGU9e29uVXBkYXRlfVxuICAgICAgLz5cbiAgICA8L0tleVdyYXBwZXI+XG4gIClcbn1cblxuS2V5LnByb3BUeXBlcyA9IHtcbiAgbGFiZWw6IFByb3BUeXBlcy5zdHJpbmcsXG4gIHZhbHVlOiBiaW5kUHJvcFR5cGVzLnZhbHVlLmlzUmVxdWlyZWQsXG4gIHBhcmFtczogUHJvcFR5cGVzLmFycmF5T2YoYmluZFByb3BUeXBlcy5ub2RlKSxcbiAgb25VcGRhdGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbn1cblxuZXhwb3J0IGRlZmF1bHQgS2V5XG4iLCJpbXBvcnQgeyB1c2VDYWxsYmFjayB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IEFjdGlvbkJ1dHRvbiBmcm9tICcuLi8uLi8uLi9Db21tb24vQWN0aW9uQnV0dG9uJ1xuaW1wb3J0IEljb24gZnJvbSAnLi4vLi4vLi4vQ29tbW9uL0ljb24nXG5pbXBvcnQgeyByZXBsYWNlSW5kZXgsIHdpdGhvdXRJbmRleCB9IGZyb20gJy4uLy4uLy4uL3JlZHVjZXItdXRpbCdcblxuaW1wb3J0IEtleSBmcm9tICcuLi8uLi9LZXlzL0tleSdcbmltcG9ydCBLZXlXcmFwcGVyIGZyb20gJy4uLy4uL0tleXMvS2V5V3JhcHBlcidcblxuaW1wb3J0IHN0eWxlcyBmcm9tICcuL3N0eWxlcy5tb2R1bGUuY3NzJ1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBCaW5kaW5nc1Byb3BlcnR5VmFsdWUgKHsgcHJvcCA9IHt9LCBvblVwZGF0ZSB9KSB7XG4gIGNvbnN0IHsgcGFyc2VkOiBzZWxlY3Rpb24gPSBbXSB9ID0gcHJvcFxuXG4gIGNvbnN0IGluc2VydEJpbmRpbmcgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgb25VcGRhdGUoe1xuICAgICAgLi4ucHJvcCxcbiAgICAgIHVzZVJhdzogZmFsc2UsXG4gICAgICBwYXJzZWQ6IFsuLi5zZWxlY3Rpb24sIHsgdmFsdWU6ICcnLCBwYXJhbXM6IFtdIH1dXG4gICAgfSlcbiAgfSwgW3Byb3AsIHNlbGVjdGlvbiwgb25VcGRhdGVdKVxuXG4gIGNvbnN0IHVwZGF0ZUJpbmRpbmcgPSB1c2VDYWxsYmFjaygoYmluZGluZywgaSkgPT4ge1xuICAgIG9uVXBkYXRlKHtcbiAgICAgIC4uLnByb3AsXG4gICAgICB1c2VSYXc6IGZhbHNlLFxuICAgICAgcGFyc2VkOiByZXBsYWNlSW5kZXgoc2VsZWN0aW9uLCBpLCBiaW5kaW5nKVxuICAgIH0pXG4gIH0sIFtwcm9wLCBzZWxlY3Rpb24sIG9uVXBkYXRlXSlcblxuICBjb25zdCByZW1vdmVCaW5kaW5nID0gdXNlQ2FsbGJhY2soaW5kZXggPT4ge1xuICAgIG9uVXBkYXRlKHtcbiAgICAgIC4uLnByb3AsXG4gICAgICB1c2VSYXc6IGZhbHNlLFxuICAgICAgcGFyc2VkOiB3aXRob3V0SW5kZXgoc2VsZWN0aW9uLCBpbmRleClcbiAgICB9KVxuICB9LCBbcHJvcCwgc2VsZWN0aW9uLCBvblVwZGF0ZV0pXG5cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPG9sIGNsYXNzTmFtZT17c3R5bGVzLnByb3BlcnR5QmluZGluZ3NWYWx1ZX0+XG4gICAgICAgIHtzZWxlY3Rpb24ubWFwKChiaW5kaW5nLCBpKSA9PiAoXG4gICAgICAgICAgPGxpIGtleT17aX0+XG4gICAgICAgICAgICA8S2V5V3JhcHBlcj5cbiAgICAgICAgICAgICAgPEtleVxuICAgICAgICAgICAgICAgIGNvbnRleHQ9XCJub25lXCJcbiAgICAgICAgICAgICAgICB2YWx1ZT17YmluZGluZy52YWx1ZX1cbiAgICAgICAgICAgICAgICBwYXJhbXM9e2JpbmRpbmcucGFyYW1zfVxuICAgICAgICAgICAgICAgIG9uVXBkYXRlPXtiaW5kaW5nID0+IHVwZGF0ZUJpbmRpbmcoYmluZGluZywgaSl9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMuYWN0aW9uc30+XG4gICAgICAgICAgICAgICAgPEljb25cbiAgICAgICAgICAgICAgICAgIG5hbWU9XCJ0cmFzaFwiXG4gICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e3N0eWxlcy5kZWxldGVCaW5kfVxuICAgICAgICAgICAgICAgICAgb25DbGljaz17ZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKClcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlQmluZGluZyhpKVxuICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvS2V5V3JhcHBlcj5cbiAgICAgICAgICA8L2xpPlxuICAgICAgICApKX1cbiAgICAgIDwvb2w+XG4gICAgICA8QWN0aW9uQnV0dG9uIHNlY29uZGFyeSBvbkNsaWNrPXtpbnNlcnRCaW5kaW5nfT5cbiAgICAgICAgPEljb24gbmFtZT1cInBsdXNcIiAvPiBBZGQgYmluZGluZ1xuICAgICAgPC9BY3Rpb25CdXR0b24+XG4gICAgPC8+XG4gIClcbn1cbiIsImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcydcblxuaW1wb3J0IEtleVBvc2l0aW9uU2VsZWN0b3IgZnJvbSAnLi4vLi4vQ29tbW9uL0tleVBvc2l0aW9uU2VsZWN0b3InXG5pbXBvcnQge1xuICBSYXdQcm9wZXJ0eVZhbHVlLFxuICBDb25zdFByb3BlcnR5VmFsdWUsXG4gIFN0cmluZ1Byb3BlcnR5VmFsdWUsXG4gIEludGVnZXJQcm9wZXJ0eVZhbHVlLFxuICBCb29sZWFuUHJvcGVydHlWYWx1ZVxufSBmcm9tICcuL3NpbXBsZS10eXBlcydcbmltcG9ydCB7XG4gIEVudW1Qcm9wZXJ0eVZhbHVlLFxuICBNdWx0aVNlbGVjdFByb3BlcnR5VmFsdWVcbn0gZnJvbSAnLi9jb2xsZWN0aW9uLXR5cGVzJ1xuaW1wb3J0IEJlaGF2aW9yc1Byb3BlcnR5VmFsdWUgZnJvbSAnLi9CZWhhdmlvcnNQcm9wZXJ0eVZhbHVlJ1xuaW1wb3J0IEJpbmRpbmdzUHJvcGVydHlWYWx1ZSBmcm9tICcuL0JpbmRpbmdzUHJvcGVydHlWYWx1ZSdcblxuZnVuY3Rpb24gUHJvcGVydHlWYWx1ZSAocHJvcHMpIHtcbiAgY29uc3QgeyBzY2hlbWEgPSB7fSB9ID0gcHJvcHNcbiAgY29uc3QgeyB0eXBlIH0gPSBzY2hlbWFcbiAgaWYgKCdjb25zdCcgaW4gc2NoZW1hKSB7XG4gICAgcmV0dXJuIDxDb25zdFByb3BlcnR5VmFsdWUgey4uLnByb3BzfSAvPlxuICB9XG5cbiAgaWYgKCdlbnVtJyBpbiBzY2hlbWEpIHtcbiAgICByZXR1cm4gPEVudW1Qcm9wZXJ0eVZhbHVlIHsuLi5wcm9wc30gLz5cbiAgfVxuXG4gIGlmIChzY2hlbWEuaGVscGVyID09PSAna2V5LXBvc2l0aW9uLXBpY2tlcicpIHtcbiAgICBjb25zdCB7IHByb3AgPSB7fSwgb25VcGRhdGUgfSA9IHByb3BzXG4gICAgcmV0dXJuIChcbiAgICAgIDxLZXlQb3NpdGlvblNlbGVjdG9yXG4gICAgICAgIHZhbHVlPXtwcm9wLnBhcnNlZCB8fCBbXX1cbiAgICAgICAgb25VcGRhdGU9e3ZhbHVlID0+IHtcbiAgICAgICAgICBvblVwZGF0ZSh7XG4gICAgICAgICAgICAuLi5wcm9wLFxuICAgICAgICAgICAgdXNlUmF3OiBmYWxzZSxcbiAgICAgICAgICAgIHBhcnNlZDogdmFsdWVcbiAgICAgICAgICB9KVxuICAgICAgICB9fVxuICAgICAgLz5cbiAgICApXG4gIH1cblxuICBpZiAoc2NoZW1hLmNob2ljZXMpIHtcbiAgICByZXR1cm4gPE11bHRpU2VsZWN0UHJvcGVydHlWYWx1ZSB7Li4ucHJvcHN9IC8+XG4gIH1cblxuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgcmV0dXJuIDxTdHJpbmdQcm9wZXJ0eVZhbHVlIHsuLi5wcm9wc30gLz5cbiAgICBjYXNlICdpbnQnOlxuICAgICAgcmV0dXJuIDxJbnRlZ2VyUHJvcGVydHlWYWx1ZSB7Li4ucHJvcHN9IC8+XG4gICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICByZXR1cm4gPEJvb2xlYW5Qcm9wZXJ0eVZhbHVlIHsuLi5wcm9wc30gLz5cbiAgICBjYXNlICdwaGFuZGxlJzpcbiAgICBjYXNlICdwaGFuZGxlcyc6XG4gICAgICByZXR1cm4gPEJlaGF2aW9yc1Byb3BlcnR5VmFsdWUgey4uLnByb3BzfSAvPlxuICAgIGNhc2UgJ3BoYW5kbGUtYXJyYXknOlxuICAgICAgcmV0dXJuIDxCaW5kaW5nc1Byb3BlcnR5VmFsdWUgey4uLnByb3BzfSAvPlxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gPFJhd1Byb3BlcnR5VmFsdWUgey4uLnByb3BzfSAvPlxuICB9XG59XG5cblByb3BlcnR5VmFsdWUucHJvcFR5cGVzID0ge1xuICBzY2hlbWE6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgdHlwZTogUHJvcFR5cGVzLm9uZU9mKFtcbiAgICAgICdzdHJpbmcnLFxuICAgICAgJ2Jvb2xlYW4nLFxuICAgICAgJ2ludCcsXG4gICAgICAnYXJyYXknLFxuICAgICAgJ3BoYW5kbGUnLFxuICAgICAgJ3BoYW5kbGVzJyxcbiAgICAgICdwaGFuZGxlLWFycmF5JyxcblxuICAgICAgJ2ludGVnZXItdW5pb24nXG4gICAgXSksXG4gICAgcmVxdWlyZWQ6IFByb3BUeXBlcy5ib29sLFxuICAgIGRlc2NyaXB0aW9uOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGRlZmF1bHQ6IFByb3BUeXBlcy5hbnksXG4gICAgY29uc3Q6IFByb3BUeXBlcy5hbnksXG4gICAgaGVscGVyOiBQcm9wVHlwZXMuYW55XG4gIH0pLFxuICBwcm9wOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIHBhcnNlZDogUHJvcFR5cGVzLmFueSxcbiAgICByYXc6IFByb3BUeXBlcy5zdHJpbmdcbiAgfSksXG4gIG9uVXBkYXRlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG59XG5cbmV4cG9ydCBkZWZhdWx0IFByb3BlcnR5VmFsdWVcbiIsImltcG9ydCBQcm9wZXJ0eVZhbHVlIGZyb20gJy4vUHJvcGVydHlWYWx1ZSdcblxuZXhwb3J0IGRlZmF1bHQgUHJvcGVydHlWYWx1ZVxuIiwiaW1wb3J0IGNsb25lRGVlcCBmcm9tICdsb2Rhc2gvY2xvbmVEZWVwJ1xuaW1wb3J0IG9taXQgZnJvbSAnbG9kYXNoL29taXQnXG5pbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlQ29udGV4dCwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCdcblxuaW1wb3J0IEFjdGlvbkJ1dHRvbiBmcm9tICcuLi8uLi9Db21tb24vQWN0aW9uQnV0dG9uJ1xuaW1wb3J0IERpYWxvZ0JveCBmcm9tICcuLi8uLi9Db21tb24vRGlhbG9nQm94J1xuaW1wb3J0IEljb24gZnJvbSAnLi4vLi4vQ29tbW9uL0ljb24nXG5pbXBvcnQgTW9kYWwgZnJvbSAnLi4vLi4vQ29tbW9uL01vZGFsJ1xuaW1wb3J0IHsgRGVmaW5pdGlvbnNDb250ZXh0IH0gZnJvbSAnLi4vLi4vQ29udGV4dHMvRGVmaW5pdGlvbnMnXG5pbXBvcnQgQmVoYXZpb3JIZWFkZXIgZnJvbSAnLi9CZWhhdmlvckhlYWRlcidcbmltcG9ydCBQcm9wZXJ0eU5hbWUgZnJvbSAnLi9Qcm9wZXJ0eU5hbWUnXG5pbXBvcnQgUHJvcGVydHlWYWx1ZSBmcm9tICcuL1Byb3BlcnR5VmFsdWUnXG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vc3R5bGVzLm1vZHVsZS5jc3MnXG5cbmZ1bmN0aW9uIEJlaGF2aW9yRWRpdG9yICh7IG5vZGUsIG9uVXBkYXRlLCBvbkNhbmNlbCB9KSB7XG4gIGNvbnN0IHsgYmVoYXZpb3JzOiBzY2hlbWFzIH0gPSB1c2VDb250ZXh0KERlZmluaXRpb25zQ29udGV4dClcbiAgY29uc3QgW3BlbmRpbmdDaGFuZ2VzLCBzZXRQZW5kaW5nQ2hhbmdlc10gPSB1c2VTdGF0ZShub2RlKVxuICBjb25zdCBzY2hlbWEgPSBzY2hlbWFzW25vZGUucHJvcGVydGllcy5jb21wYXRpYmxlPy5wYXJzZWRdXG5cbiAgY29uc3QgaGFuZGxlUHJvcE5hbWVDaGFuZ2UgPSBwcm9wID0+IGV2ZW50ID0+IHtcbiAgICBzZXRQZW5kaW5nQ2hhbmdlcyh7XG4gICAgICAuLi5wZW5kaW5nQ2hhbmdlcyxcbiAgICAgIHByb3BlcnRpZXM6IE9iamVjdC5rZXlzKHBlbmRpbmdDaGFuZ2VzLnByb3BlcnRpZXMpLnJlZHVjZSgoYWNjLCBrZXkpID0+IHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBwZW5kaW5nQ2hhbmdlcy5wcm9wZXJ0aWVzW2tleV1cbiAgICAgICAgaWYgKGtleSA9PT0gcHJvcCkge1xuICAgICAgICAgIGtleSA9IGV2ZW50LnRhcmdldC52YWx1ZVxuICAgICAgICB9XG5cbiAgICAgICAgYWNjW2tleV0gPSB2YWx1ZVxuICAgICAgICByZXR1cm4gYWNjXG4gICAgICB9LCB7fSlcbiAgICB9KVxuICB9XG5cbiAgY29uc3QgaGFuZGxlUHJvcFZhbHVlQ2hhbmdlID0gbmFtZSA9PiB2YWx1ZSA9PiB7XG4gICAgc2V0UGVuZGluZ0NoYW5nZXMoe1xuICAgICAgLi4ucGVuZGluZ0NoYW5nZXMsXG4gICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgIC4uLnBlbmRpbmdDaGFuZ2VzLnByb3BlcnRpZXMsXG4gICAgICAgIFtuYW1lXTogdmFsdWVcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgY29uc3QgaGFuZGxlRGVsZXRlUHJvcCA9IG5hbWUgPT4ge1xuICAgIHNldFBlbmRpbmdDaGFuZ2VzKHtcbiAgICAgIC4uLnBlbmRpbmdDaGFuZ2VzLFxuICAgICAgcHJvcGVydGllczogb21pdChwZW5kaW5nQ2hhbmdlcy5wcm9wZXJ0aWVzLCBuYW1lKVxuICAgIH0pXG4gIH1cblxuICBjb25zdCBjb25maXJtID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIG9uVXBkYXRlKGNsb25lRGVlcChwZW5kaW5nQ2hhbmdlcykpXG4gIH0sIFtwZW5kaW5nQ2hhbmdlcywgb25VcGRhdGVdKVxuXG4gIGNvbnN0IHNjaGVtYVByb3BzID0gc2NoZW1hPy5wcm9wZXJ0aWVzIHx8IHt9XG4gIGNvbnN0IHByb3BlcnRpZXNMaXN0ID0gKFxuICAgIHNjaGVtYVxuICAgICAgPyBPYmplY3Qua2V5cyhzY2hlbWFQcm9wcylcbiAgICAgIDogT2JqZWN0LmtleXMocGVuZGluZ0NoYW5nZXMucHJvcGVydGllcylcbiAgKS5maWx0ZXIocHJvcGVydHkgPT4ge1xuICAgIHJldHVybiBwcm9wZXJ0eSAhPT0gJ2xhYmVsJyAmJiAoXG4gICAgICAhc2NoZW1hUHJvcHNbcHJvcGVydHldPy5kZXByZWNhdGVkQnkgfHxcbiAgICAgICEhcGVuZGluZ0NoYW5nZXMucHJvcGVydGllc1twcm9wZXJ0eV1cbiAgICApXG4gIH0pXG5cbiAgcmV0dXJuIChcbiAgICA8TW9kYWwgb25EaXNtaXNzPXtvbkNhbmNlbH0+XG4gICAgICA8RGlhbG9nQm94IGRpc21pc3NUZXh0PXtmYWxzZX0+XG4gICAgICAgIDxkaXYgc3R5bGU9e3sgbWF4SGVpZ2h0OiAnODB2aCcsIG92ZXJmbG93OiAnYXV0bycgfX0+XG4gICAgICAgICAgPGgyPkVkaXQge25vZGUubmFtZX0gPGNvZGU+KCZhbXA7e25vZGUubGFiZWxzWzBdfSk8L2NvZGU+PC9oMj5cbiAgICAgICAgICA8QmVoYXZpb3JIZWFkZXJcbiAgICAgICAgICAgIG5vZGU9e3BlbmRpbmdDaGFuZ2VzfVxuICAgICAgICAgICAgb25VcGRhdGU9e3NldFBlbmRpbmdDaGFuZ2VzfVxuICAgICAgICAgIC8+XG5cbiAgICAgICAgICA8aDM+Q29uZmlndXJhdGlvbjwvaDM+XG4gICAgICAgICAgPHRhYmxlIGNsYXNzTmFtZT17c3R5bGVzLmVkaXRvckZvcm19PlxuICAgICAgICAgICAgPHRoZWFkPlxuICAgICAgICAgICAgICA8dHI+XG4gICAgICAgICAgICAgICAgPHRoPlByb3BlcnR5PC90aD5cbiAgICAgICAgICAgICAgICA8dGg+VmFsdWU8L3RoPlxuICAgICAgICAgICAgICAgIDx0aD48L3RoPlxuICAgICAgICAgICAgICA8L3RyPlxuICAgICAgICAgICAgPC90aGVhZD5cbiAgICAgICAgICAgIDx0Ym9keT5cbiAgICAgICAgICAgICAge3Byb3BlcnRpZXNMaXN0Lm1hcCgobmFtZSwgaSkgPT4gKFxuICAgICAgICAgICAgICAgIDx0ciBrZXk9e2l9PlxuICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT17c3R5bGVzLnByb3BlcnR5TmFtZX0+XG4gICAgICAgICAgICAgICAgICAgIHtuYW1lIGluIHNjaGVtYVByb3BzXG4gICAgICAgICAgICAgICAgICAgICAgPyAoXG4gICAgICAgICAgICAgICAgICAgICAgPFByb3BlcnR5TmFtZSBwcm9wZXJ0eT17bmFtZX0gc2NoZW1hPXtzY2hlbWFQcm9wc1tuYW1lXX0gLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICA6IChcbiAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdmFsdWU9e25hbWV9IG9uQ2hhbmdlPXtoYW5kbGVQcm9wTmFtZUNoYW5nZShuYW1lKX0gLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgICA8L3RkPlxuICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT17c3R5bGVzLnByb3BlcnR5VmFsdWV9PlxuICAgICAgICAgICAgICAgICAgICA8UHJvcGVydHlWYWx1ZVxuICAgICAgICAgICAgICAgICAgICAgIG5hbWU9e25hbWV9XG4gICAgICAgICAgICAgICAgICAgICAgcHJvcD17cGVuZGluZ0NoYW5nZXMucHJvcGVydGllc1tuYW1lXX1cbiAgICAgICAgICAgICAgICAgICAgICBzY2hlbWE9e3NjaGVtYVByb3BzW25hbWVdfVxuICAgICAgICAgICAgICAgICAgICAgIG9uVXBkYXRlPXtoYW5kbGVQcm9wVmFsdWVDaGFuZ2UobmFtZSl9XG4gICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICA8L3RkPlxuICAgICAgICAgICAgICAgICAgPHRkPlxuICAgICAgICAgICAgICAgICAgICB7KHBlbmRpbmdDaGFuZ2VzLnByb3BlcnRpZXNbbmFtZV0gJiYgIXNjaGVtYVByb3BzW25hbWVdPy5yZXF1aXJlZCkgJiYgKFxuICAgICAgICAgICAgICAgICAgICAgIDxJY29uXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lPVwidHJhc2gtY2FuXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17c3R5bGVzLmFjdGlvbn1cbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IGhhbmRsZURlbGV0ZVByb3AobmFtZSl9XG4gICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgICAgIDwvdGQ+XG4gICAgICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgICAgKSl9XG4gICAgICAgICAgICA8L3Rib2R5PlxuICAgICAgICAgIDwvdGFibGU+XG4gICAgICAgICAgPGRpdiBzdHlsZT17eyB0ZXh0QWxpZ246ICdjZW50ZXInIH19PlxuICAgICAgICAgICAgPEFjdGlvbkJ1dHRvbiBvbkNsaWNrPXtjb25maXJtfT5Pa2F5PC9BY3Rpb25CdXR0b24+XG4gICAgICAgICAgICA8QWN0aW9uQnV0dG9uIG9uQ2xpY2s9e29uQ2FuY2VsfSBzZWNvbmRhcnk+Q2FuY2VsPC9BY3Rpb25CdXR0b24+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9EaWFsb2dCb3g+XG4gICAgPC9Nb2RhbD5cbiAgKVxufVxuXG5leHBvcnQgZGVmYXVsdCBCZWhhdmlvckVkaXRvclxuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1syXS51c2VbMV0hLi9saW5rLm1vZHVsZS5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1syXS51c2VbMV0hLi9saW5rLm1vZHVsZS5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnXG5cbmltcG9ydCBJY29uIGZyb20gJy4vSWNvbidcbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9saW5rLm1vZHVsZS5jc3MnXG5cbmZ1bmN0aW9uIExpbmsgKHByb3BzKSB7XG4gIGNvbnN0IHsgaHJlZiwgY2hpbGRyZW4sIGV4dGVybmFsLCBzaG93RXh0ZXJuYWwsIC4uLnJlc3QgfSA9IHByb3BzXG4gIGNvbnN0IHByb3BlcnRpZXMgPSBPYmplY3QuYXNzaWduKHsgaHJlZiB9LCByZXN0LCBleHRlcm5hbCAmJiB7XG4gICAgcmVsOiAnbm9yZWZlcnJlcicsXG4gICAgdGFyZ2V0OiAnX2JsYW5rJ1xuICB9KVxuXG4gIHJldHVybiAoXG4gICAgPGEgey4uLnByb3BlcnRpZXN9PlxuICAgICAge2NoaWxkcmVufVxuICAgICAge2V4dGVybmFsICYmIHNob3dFeHRlcm5hbCAmJiAoXG4gICAgICAgIDxJY29uXG4gICAgICAgICAgY2xhc3NOYW1lPXtzdHlsZXMuaWNvbn1cbiAgICAgICAgICBuYW1lPVwiYXJyb3ctdXAtcmlnaHQtZnJvbS1zcXVhcmVcIlxuICAgICAgICAvPlxuICAgICAgKX1cbiAgICA8L2E+XG4gIClcbn1cblxuTGluay5wcm9wVHlwZXMgPSB7XG4gIGhyZWY6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xuICAgIFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5ub2RlKSxcbiAgICBQcm9wVHlwZXMubm9kZVxuICBdKS5pc1JlcXVpcmVkLFxuICBleHRlcm5hbDogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcbiAgc2hvd0V4dGVybmFsOiBQcm9wVHlwZXMuYm9vbFxufVxuXG5MaW5rLmRlZmF1bHRQcm9wcyA9IHtcbiAgZXh0ZXJuYWw6IGZhbHNlLFxuICBzaG93RXh0ZXJuYWw6IHRydWVcbn1cblxuZXhwb3J0IGRlZmF1bHQgTGlua1xuIiwiaW1wb3J0IERpYWxvZ0JveCBmcm9tICcuLi8uLi9Db21tb24vRGlhbG9nQm94J1xuaW1wb3J0IExpbmsgZnJvbSAnLi4vLi4vQ29tbW9uL0xpbmsnXG5pbXBvcnQgTW9kYWwgZnJvbSAnLi4vLi4vQ29tbW9uL01vZGFsJ1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBCZXRhTm90aWNlRGlhbG9nICh7IG9uRGlzbWlzcyB9KSB7XG4gIGNvbnN0IGlzc3Vlc0xpbmsgPSAoXG4gICAgPExpbmsgZXh0ZXJuYWwgaHJlZj1cImh0dHBzOi8vZ2l0aHViLmNvbS9uaWNrY291dHNvcy9rZXltYXAtZWRpdG9yL2lzc3Vlc1wiPlxuICAgICAgS2V5bWFwIEVkaXRvciBJc3N1ZXNcbiAgICA8L0xpbms+XG4gIClcblxuICByZXR1cm4gKFxuICAgIDxNb2RhbCBvbkRpc21pc3M9e29uRGlzbWlzc30+XG4gICAgICA8RGlhbG9nQm94IG9uRGlzbWlzcz17b25EaXNtaXNzfSBzdHlsZT17eyBtYXhIZWlnaHQ6ICc4MHZoJywgb3ZlcmZsb3c6ICdzY3JvbGwnIH19PlxuICAgICAgICA8aDI+QmVoYXZpb3IgRWRpdGluZyBCZXRhIFRlc3Q8L2gyPlxuICAgICAgICA8cD5XZWxjb21lIHRvIHRoZSBiZWhhdmlvciBlZGl0aW5nIGJldGEhPC9wPlxuXG4gICAgICAgIDxwPlxuICAgICAgICAgIFRoaXMgZmVhdHVyZSBoYXMgYmVlbiBhIGxvbmcgdGltZSBjb21pbmcsIGFuZCB3aGlsZSBpdCBzaG91bGQgZW5hYmxlIGFcbiAgICAgICAgICBsb3Qgb2YgYWR2YW5jZWQgWk1LIGZlYXR1cmVzIHRocm91Z2ggdGhlIGFwcCBpdCBpcyBzdGlsbCBhIHdvcmsgaW5cbiAgICAgICAgICBwcm9ncmVzcy4gU29tZSBmZWF0dXJlcyBhcmUgc3RpbGwgbWlzc2luZyBzbyB0aGUgdXNlIGV4cGVyaWVuY2UgaXMgYVxuICAgICAgICAgIGxpdHRsZSByb3VnaCwgYW5kIHRoZXJlIG1heSBiZSBlcnJvcnMgYXMgd2VsbC4gU29tZSBmYW1pbGlhcml0eSB3aXRoXG4gICAgICAgICAgWk1LIGJlaGF2aW9yIGZ1bmN0aW9uYWxpdHkgaXMgZXhwZWN0ZWQuXG4gICAgICAgIDwvcD5cblxuICAgICAgICA8cD5cbiAgICAgICAgICBJJ3ZlIGJlZW4gdXNpbmcgaXQgZm9yIGEgd2hpbGUgYW5kIGl0IHNlZW1zIHRvIGJlIGluIGEgcHJldHR5IHdvcmthYmxlXG4gICAgICAgICAgc3RhdGUsIGJ1dCBJIGNhbid0IGNhdGNoIGV2ZXJ5dGhpbmcsIHNvIGl0IHdvdWxkIG1lYW4gYSBsb3QgdG8gbWUgZm9yXG4gICAgICAgICAgeW91IHRvIHNoYXJlIGFueSBmZWVkYmFjayBvciBpc3N1ZXMgb24gR2l0SHViOiB7aXNzdWVzTGlua30uXG4gICAgICAgIDwvcD5cbiAgICAgIDwvRGlhbG9nQm94PlxuICAgIDwvTW9kYWw+XG4gIClcbn1cbiIsImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcydcbmltcG9ydCB7IHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgQWN0aW9uQnV0dG9uIGZyb20gJy4uLy4uL0NvbW1vbi9BY3Rpb25CdXR0b24nXG5cbmltcG9ydCBEaWFsb2dCb3ggZnJvbSAnLi4vLi4vQ29tbW9uL0RpYWxvZ0JveCdcbmltcG9ydCBNb2RhbCBmcm9tICcuLi8uLi9Db21tb24vTW9kYWwnXG5cbmNvbnN0IGtub3duQmVoYXZpb3JUeXBlcyA9IFtcbiAgJ3ptayxiZWhhdmlvci1ob2xkLXRhcCcsXG4gICd6bWssYmVoYXZpb3ItbW9kLW1vcnBoJyxcbiAgJ3ptayxiZWhhdmlvci10YXAtZGFuY2UnLFxuICAnem1rLGJlaGF2aW9yLXN0aWNreS1rZXknLFxuICAnem1rLGJlaGF2aW9yLWNhcHMtd29yZCdcbl1cblxuZnVuY3Rpb24gTmV3QmVoYXZpb3JNb2RhbCAoeyBvblVwZGF0ZSwgb25DYW5jZWwgfSkge1xuICBjb25zdCBbcGVuZGluZ1NlbGVjdGlvbiwgc2V0UGVuZGluZ1NlbGVjdGlvbl0gPSB1c2VTdGF0ZSgnJylcbiAgcmV0dXJuIChcbiAgICA8TW9kYWw+XG4gICAgICA8RGlhbG9nQm94IGRpc21pc3NUZXh0PXtudWxsfT5cbiAgICAgICAgPGgzPkFkZCBuZXcgYmVoYXZpb3I8L2gzPlxuICAgICAgICA8bGFiZWw+XG4gICAgICAgICAgVHlwZSA8c2VsZWN0XG4gICAgICAgICAgICByZXF1aXJlZFxuICAgICAgICAgICAgdmFsdWU9e3BlbmRpbmdTZWxlY3Rpb259XG4gICAgICAgICAgICBvbkNoYW5nZT17ZSA9PiBzZXRQZW5kaW5nU2VsZWN0aW9uKGUudGFyZ2V0LnZhbHVlKX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiXCIgZGlzYWJsZWQ+U2VsZWN0IGEgYmVoYXZpb3IgdHlwZTwvb3B0aW9uPlxuICAgICAgICAgICAge2tub3duQmVoYXZpb3JUeXBlcy5tYXAoKHR5cGUsIGkpID0+IChcbiAgICAgICAgICAgICAgPG9wdGlvbiBrZXk9e2l9IHZhbHVlPXt0eXBlfT57dHlwZX08L29wdGlvbj5cbiAgICAgICAgICAgICkpfVxuICAgICAgICAgIDwvc2VsZWN0PlxuICAgICAgICA8L2xhYmVsPlxuICAgICAgICA8ZGl2IHN0eWxlPXt7IHRleHRBbGlnbjogJ2NlbnRlcicsIG1hcmdpbjogJzEwcHgnIH19PlxuICAgICAgICAgIDxBY3Rpb25CdXR0b25cbiAgICAgICAgICAgIGRpc2FibGVkPXshcGVuZGluZ1NlbGVjdGlvbn1cbiAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IG9uVXBkYXRlKHBlbmRpbmdTZWxlY3Rpb24pfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIENyZWF0ZVxuICAgICAgICAgIDwvQWN0aW9uQnV0dG9uPlxuICAgICAgICAgIDxBY3Rpb25CdXR0b24gb25DbGljaz17b25DYW5jZWx9IHNlY29uZGFyeT5DYW5jZWw8L0FjdGlvbkJ1dHRvbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L0RpYWxvZ0JveD5cbiAgICA8L01vZGFsPlxuICApXG59XG5cbk5ld0JlaGF2aW9yTW9kYWwucHJvcFR5cGVzID0ge1xuICBvblVwZGF0ZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgb25DYW5jZWw6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbn1cblxuZXhwb3J0IGRlZmF1bHQgTmV3QmVoYXZpb3JNb2RhbFxuIiwiaW1wb3J0IHRpbWVzIGZyb20gJ2xvZGFzaC90aW1lcydcbmltcG9ydCB7IGJlaGF2aW9yU2NoZW1hcyB9IGZyb20gJ3ptay1kYXRhL2JlaGF2aW9ycydcblxuZnVuY3Rpb24gaXNCaW5kaW5nVHlwZSAocHJvcFNjaGVtYSkge1xuICByZXR1cm4gWydwaGFuZGxlJywgJ3BoYW5kbGVzJywgJ3BoYW5kbGUtYXJyYXknXS5pbmNsdWRlcyhwcm9wU2NoZW1hLnR5cGUpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVCZWhhdmlvciAoY29tcGF0aWJsZSwgeyBuYW1lLCBsYWJlbHMsIGxhYmVsIH0pIHtcbiAgY29uc3Qgc2NoZW1hID0gYmVoYXZpb3JTY2hlbWFzW2NvbXBhdGlibGVdXG4gIHJldHVybiB7XG4gICAgbmFtZSxcbiAgICBsYWJlbHMsXG4gICAgcHJvcGVydGllczoge1xuICAgICAgY29tcGF0aWJsZToge1xuICAgICAgICByYXc6IGBcIiR7Y29tcGF0aWJsZX1cImAsXG4gICAgICAgIHBhcnNlZDogY29tcGF0aWJsZVxuICAgICAgfSxcbiAgICAgIGxhYmVsOiB7XG4gICAgICAgIHJhdzogYFwiJHtsYWJlbH1cImAsXG4gICAgICAgIHBhcnNlZDogbGFiZWxcbiAgICAgIH0sXG4gICAgICAuLi5PYmplY3Qua2V5cyhzY2hlbWEucHJvcGVydGllcykucmVkdWNlKChwcm9wcywgcHJvcCkgPT4ge1xuICAgICAgICBjb25zdCBwcm9wU2NoZW1hID0gc2NoZW1hLnByb3BlcnRpZXNbcHJvcF1cbiAgICAgICAgaWYgKGlzQmluZGluZ1R5cGUocHJvcFNjaGVtYSkgJiYgcHJvcFNjaGVtYS5sZW5ndGgpIHtcbiAgICAgICAgICBwcm9wc1twcm9wXSA9IHtcbiAgICAgICAgICAgIHBhcnNlZDogdGltZXMocHJvcFNjaGVtYS5sZW5ndGgsICgpID0+ICcmbm9uZScpXG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKCdjb25zdCcgaW4gcHJvcFNjaGVtYSkge1xuICAgICAgICAgIHByb3BzW3Byb3BdID0ge1xuICAgICAgICAgICAgcGFyc2VkOiBwcm9wU2NoZW1hLmNvbnN0LFxuICAgICAgICAgICAgLy8gdGhpcyBpc24ndCByaWdodCBidXQgY29udmVuaWVudGx5IG9ubHkgYWZmZWN0cyAjYmluZGluZy1jZWxsc1xuICAgICAgICAgICAgLy8gd2hpY2ggaXMgYW4gaW50ZWdlciBhbmQgd2hpY2ggd2UgbmV2ZXIgbmVlZCB0byB1c2UgYXMgYSByYXcgdmFsdWVcbiAgICAgICAgICAgIHJhdzogYDwke3Byb3BTY2hlbWEuY29uc3QudG9TdHJpbmcoKX0+YFxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBwcm9wc1xuICAgICAgfSwge30pXG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgb21pdCBmcm9tICdsb2Rhc2gvb21pdCdcbmltcG9ydCB7IGNyZWF0ZVNsaWNlIH0gZnJvbSAnQHJlZHV4anMvdG9vbGtpdCdcbmltcG9ydCB7IHJlc29sdmVCZWhhdmlvclBhcmFtcyB9IGZyb20gJ3ptay1kYXRhL3BhcmFtZXRlcnMnXG5cbmV4cG9ydCBjb25zdCBzZWxlY3RCZWhhdmlvcnMgPSBzdGF0ZSA9PiBzdGF0ZS5rZXlib2FyZC5rZXltYXAuYmVoYXZpb3JzXG5cbmNvbnN0IGJlaGF2aW9yc1NsaWNlID0gY3JlYXRlU2xpY2Uoe1xuICBuYW1lOiAnYmVoYXZpb3JzJyxcbiAgaW5pdGlhbFN0YXRlOiBbXSxcbiAgcmVkdWNlcnM6IHtcbiAgICBhZGRCZWhhdmlvciAoc3RhdGUsIGFjdGlvbikge1xuICAgICAgc3RhdGUucHVzaChhY3Rpb24ucGF5bG9hZC5iZWhhdmlvcilcbiAgICB9LFxuICAgIHVwZGF0ZUJlaGF2aW9yIChzdGF0ZSwgYWN0aW9uKSB7XG4gICAgICBzdGF0ZVthY3Rpb24ucGF5bG9hZC5iZWhhdmlvckluZGV4XSA9IG9taXQoYWN0aW9uLnBheWxvYWQuYmVoYXZpb3IsICdwYXJhbXMnKVxuICAgICAgcmVzb2x2ZUJlaGF2aW9yUGFyYW1zKHN0YXRlKVxuICAgIH0sXG4gICAgZGVsZXRlQmVoYXZpb3IgKHN0YXRlLCBhY3Rpb24pIHtcbiAgICAgIHN0YXRlLnNwbGljZShhY3Rpb24ucGF5bG9hZC5iZWhhdmlvckluZGV4LCAxKVxuICAgIH1cbiAgfVxufSlcblxuZXhwb3J0IGNvbnN0IHtcbiAgYWRkQmVoYXZpb3IsXG4gIHVwZGF0ZUJlaGF2aW9yLFxuICBkZWxldGVCZWhhdmlvclxufSA9IGJlaGF2aW9yc1NsaWNlLmFjdGlvbnNcblxuZXhwb3J0IGRlZmF1bHQgYmVoYXZpb3JzU2xpY2UucmVkdWNlclxuIiwiaW1wb3J0IHsgdXNlQ2FsbGJhY2ssIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgeyB1c2VEaXNwYXRjaCwgdXNlU2VsZWN0b3IgfSBmcm9tICdyZWFjdC1yZWR1eCdcblxuaW1wb3J0IEFjdGlvbkJ1dHRvbiBmcm9tICcuLi8uLi9Db21tb24vQWN0aW9uQnV0dG9uJ1xuaW1wb3J0IEljb24gZnJvbSAnLi4vLi4vQ29tbW9uL0ljb24nXG5pbXBvcnQgQmVoYXZpb3JFZGl0b3IgZnJvbSAnLi9CZWhhdmlvckVkaXRvcidcbmltcG9ydCBCZXRhTm90aWNlRGlhbG9nIGZyb20gJy4vQmV0YU5vdGljZURpYWxvZydcbmltcG9ydCBOZXdCZWhhdmlvck1vZGFsIGZyb20gJy4vTmV3QmVoYXZpb3JNb2RhbCdcbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9zdHlsZXMubW9kdWxlLmNzcydcbmltcG9ydCB7IGNyZWF0ZUJlaGF2aW9yIH0gZnJvbSAnLi9jcmVhdGUtYmVoYXZpb3InXG5pbXBvcnQge1xuICBzZWxlY3RCZWhhdmlvcnMsXG4gIGFkZEJlaGF2aW9yLFxuICBkZWxldGVCZWhhdmlvcixcbiAgdXBkYXRlQmVoYXZpb3Jcbn0gZnJvbSAnLi9iZWhhdmlvcnNTbGljZSdcblxuZnVuY3Rpb24gQmVoYXZpb3JzICgpIHtcbiAgY29uc3QgZXhwZXJpbWVudGFsU2V0dGluZ3MgPSB1c2VTZWxlY3RvcihzdGF0ZSA9PiBzdGF0ZS5leHBlcmltZW50YWxTZXR0aW5ncylcblxuICBjb25zdCBbZWRpdGluZywgc2V0RWRpdGluZ10gPSB1c2VTdGF0ZShudWxsKVxuICBjb25zdCBbY3JlYXRpbmcsIHNldENyZWF0aW5nXSA9IHVzZVN0YXRlKGZhbHNlKVxuICBjb25zdCBbYmV0YURpc2NsYWltZXJWaXNpYmxlLCBzZXRCZXRhRGlzY2xhaW1lclZpc2libGVdID0gdXNlU3RhdGUoZmFsc2UpXG4gIGNvbnN0IGJlaGF2aW9ycyA9IHVzZVNlbGVjdG9yKHNlbGVjdEJlaGF2aW9ycylcbiAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpXG5cbiAgY29uc3QgaGFuZGxlQWRkID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIHNldENyZWF0aW5nKHRydWUpXG4gIH0sIFtzZXRDcmVhdGluZ10pXG5cbiAgY29uc3QgaGFuZGxlQWRkUGVuZGluZyA9IHVzZUNhbGxiYWNrKGNvbXBhdGlibGUgPT4ge1xuICAgIHNldENyZWF0aW5nKGZhbHNlKVxuICAgIGRpc3BhdGNoKGFkZEJlaGF2aW9yKHtcbiAgICAgIGJlaGF2aW9yOiBjcmVhdGVCZWhhdmlvcihjb21wYXRpYmxlLCB7XG4gICAgICAgIG5hbWU6ICduZXdfYmVoYXZpb3InLFxuICAgICAgICBsYWJlbHM6IFsnbmV3X2JlaGF2aW9yJ10sXG4gICAgICAgIGxhYmVsOiAnTkVXX0JFSEFWSU9SJ1xuICAgICAgfSlcbiAgICB9KSlcblxuICAgIHNldFRpbWVvdXQoKCkgPT4gc2V0RWRpdGluZyhiZWhhdmlvcnMubGVuZ3RoKSlcbiAgfSwgW2JlaGF2aW9ycywgZGlzcGF0Y2gsIHNldENyZWF0aW5nLCBzZXRFZGl0aW5nXSlcblxuICBjb25zdCBoYW5kbGVFZGl0ID0gdXNlQ2FsbGJhY2soaW5kZXggPT4ge1xuICAgIHNldEVkaXRpbmcoaW5kZXgpXG4gIH0sIFtzZXRFZGl0aW5nXSlcblxuICBjb25zdCBoYW5kbGVEZWxldGUgPSB1c2VDYWxsYmFjaygoaW5kZXgpID0+IHtcbiAgICBkaXNwYXRjaChkZWxldGVCZWhhdmlvcih7IGJlaGF2aW9ySW5kZXg6IGluZGV4IH0pKVxuICB9LCBbZGlzcGF0Y2hdKVxuXG4gIGNvbnN0IHNob3dCZXRhRGlhbG9nID0gdXNlQ2FsbGJhY2soZXZlbnQgPT4ge1xuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpXG4gICAgc2V0QmV0YURpc2NsYWltZXJWaXNpYmxlKHRydWUpXG4gIH0sIFtzZXRCZXRhRGlzY2xhaW1lclZpc2libGVdKVxuXG4gIGNvbnN0IGhpZGVCZXRhRGlhbG9nID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIHNldEJldGFEaXNjbGFpbWVyVmlzaWJsZShmYWxzZSlcbiAgfSwgW3NldEJldGFEaXNjbGFpbWVyVmlzaWJsZV0pXG5cbiAgY29uc3QgdG9nZ2xlQmV0YSA9IHVzZUNhbGxiYWNrKGVuYWJsZUJlaGF2aW9yRWRpdGluZyA9PiB7XG4gICAgZGlzcGF0Y2goe1xuICAgICAgdHlwZTogJ1NFVFRJTkdTX1VQREFURScsXG4gICAgICBzZXR0aW5nczoge1xuICAgICAgICAuLi5leHBlcmltZW50YWxTZXR0aW5ncyxcbiAgICAgICAgZW5hYmxlQmVoYXZpb3JFZGl0aW5nXG4gICAgICB9XG4gICAgfSlcbiAgfSwgW2V4cGVyaW1lbnRhbFNldHRpbmdzLCBkaXNwYXRjaF0pXG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLm1haW59PlxuXG4gICAgICB7Y3JlYXRpbmcgJiYgKFxuICAgICAgICA8TmV3QmVoYXZpb3JNb2RhbFxuICAgICAgICAgIG9uVXBkYXRlPXtoYW5kbGVBZGRQZW5kaW5nfVxuICAgICAgICAgIG9uQ2FuY2VsPXsoKSA9PiBzZXRDcmVhdGluZyhmYWxzZSl9XG4gICAgICAgIC8+XG4gICAgICApfVxuXG4gICAgICB7ZWRpdGluZyAhPT0gbnVsbCAmJiAoXG4gICAgICAgIDxCZWhhdmlvckVkaXRvclxuICAgICAgICAgIG5vZGU9e2JlaGF2aW9yc1tlZGl0aW5nXX1cbiAgICAgICAgICBvbkNhbmNlbD17KCkgPT4gc2V0RWRpdGluZyhudWxsKX1cbiAgICAgICAgICBvblVwZGF0ZT17YmVoYXZpb3IgPT4ge1xuICAgICAgICAgICAgc2V0RWRpdGluZyhudWxsKVxuICAgICAgICAgICAgZGlzcGF0Y2godXBkYXRlQmVoYXZpb3Ioe1xuICAgICAgICAgICAgICBiZWhhdmlvckluZGV4OiBlZGl0aW5nLFxuICAgICAgICAgICAgICBiZWhhdmlvclxuICAgICAgICAgICAgfSkpXG4gICAgICAgICAgfX1cbiAgICAgICAgLz5cbiAgICAgICl9XG5cbiAgICAgIHtiZXRhRGlzY2xhaW1lclZpc2libGUgJiYgKFxuICAgICAgICA8QmV0YU5vdGljZURpYWxvZyBvbkRpc21pc3M9e2hpZGVCZXRhRGlhbG9nfSAvPlxuICAgICAgKX1cblxuICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5wYW5lbH0+XG4gICAgICAgIDxsYWJlbD5cbiAgICAgICAgICBFbmFibGUgQmV0YVxuICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgdHlwZT1cImNoZWNrYm94XCJcbiAgICAgICAgICAgIGNoZWNrZWQ9e2V4cGVyaW1lbnRhbFNldHRpbmdzLmVuYWJsZUJlaGF2aW9yRWRpdGluZ31cbiAgICAgICAgICAgIG9uQ2hhbmdlPXtlID0+IHRvZ2dsZUJldGEoZS50YXJnZXQuY2hlY2tlZCl9XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9sYWJlbD5cblxuICAgICAgICA8QWN0aW9uQnV0dG9uIG9uQ2xpY2s9e3Nob3dCZXRhRGlhbG9nfSBzdHlsZT17eyBiYWNrZ3JvdW5kQ29sb3I6ICdvcmFuZ2UnIH19PlxuICAgICAgICAgIDxJY29uIG5hbWU9XCJ3YXJuaW5nXCIgLz4gRGV0YWlsc1xuICAgICAgICA8L0FjdGlvbkJ1dHRvbj5cblxuICAgICAgICA8aDM+Q3VzdG9tIEJlaGF2aW9yczwvaDM+XG4gICAgICAgIDx0YWJsZSBzdHlsZT17eyB3aWR0aDogJzEwMCUnIH19PlxuICAgICAgICAgIDx0aGVhZD5cbiAgICAgICAgICAgIDx0cj5cbiAgICAgICAgICAgICAgPHRoPkJpbmRpbmc8L3RoPlxuICAgICAgICAgICAgICA8dGg+Q29tcGF0aWJsZTwvdGg+XG4gICAgICAgICAgICAgIDx0aD5BY3Rpb25zPC90aD5cbiAgICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgPC90aGVhZD5cbiAgICAgICAgICA8dGJvZHk+XG4gICAgICAgICAgICB7YmVoYXZpb3JzLm1hcCgoYmVoYXZpb3IsIGkpID0+IChcbiAgICAgICAgICAgICAgPHRyIGtleT17aX0+XG4gICAgICAgICAgICAgICAgPHRkPjxjb2RlPiZhbXA7e2JlaGF2aW9yLmxhYmVsc1swXX08L2NvZGU+PC90ZD5cbiAgICAgICAgICAgICAgICA8dGQ+e2JlaGF2aW9yLnByb3BlcnRpZXMuY29tcGF0aWJsZS5yYXd9PC90ZD5cbiAgICAgICAgICAgICAgICA8dGQ+XG4gICAgICAgICAgICAgICAgICB7ZXhwZXJpbWVudGFsU2V0dGluZ3MuZW5hYmxlQmVoYXZpb3JFZGl0aW5nICYmIChcbiAgICAgICAgICAgICAgICAgICAgPD5cbiAgICAgICAgICAgICAgICAgICAgICA8SWNvbiBjbGFzc05hbWU9e3N0eWxlcy5hY3Rpb259IG9uQ2xpY2s9eygpID0+IGhhbmRsZUVkaXQoaSl9IG5hbWU9XCJ3cmVuY2hcIiAvPlxuICAgICAgICAgICAgICAgICAgICAgIDxJY29uIGNsYXNzTmFtZT17c3R5bGVzLmFjdGlvbn0gb25DbGljaz17KCkgPT4gaGFuZGxlRGVsZXRlKGkpfSBuYW1lPVwidHJhc2gtY2FuXCIgLz5cbiAgICAgICAgICAgICAgICAgICAgPC8+XG4gICAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgIDwvdGQ+XG4gICAgICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgICApKX1cbiAgICAgICAgICA8L3Rib2R5PlxuICAgICAgICA8L3RhYmxlPlxuXG4gICAgICAgIDxBY3Rpb25CdXR0b24gb25DbGljaz17aGFuZGxlQWRkfT5cbiAgICAgICAgICBBZGQgTmV3IEJlaGF2aW9yXG4gICAgICAgIDwvQWN0aW9uQnV0dG9uPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgQmVoYXZpb3JzXG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzJdLnVzZVsxXSEuL3N0eWxlcy5tb2R1bGUuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMl0udXNlWzFdIS4vc3R5bGVzLm1vZHVsZS5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnXG5cbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9zdHlsZXMubW9kdWxlLmNzcydcbmltcG9ydCBLZXlQb3NpdGlvblNlbGVjdG9yIGZyb20gJy4uL0NvbW1vbi9LZXlQb3NpdGlvblNlbGVjdG9yJ1xuXG5mdW5jdGlvbiBTZWxlY3RLZXlDVEEgKCkge1xuICByZXR1cm4gKFxuICAgIDxwIGNsYXNzTmFtZT17c3R5bGVzLmZsb2F0aW5nTWVzc2FnZX0+XG4gICAgICBDbGljayBvbiBhIGtleSB0byBhZGQgaXQgdG8gdGhlIGNvbWJvXG4gICAgPC9wPlxuICApXG59XG5cbmZ1bmN0aW9uIENvbWJvSW5wdXRNYXAgKHsga2V5UG9zaXRpb25zLCBvblVwZGF0ZSB9KSB7XG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5jb21ib0lucHV0TWFwfT5cbiAgICAgIDxLZXlQb3NpdGlvblNlbGVjdG9yXG4gICAgICAgIHZhbHVlPXtrZXlQb3NpdGlvbnN9XG4gICAgICAgIG9uVXBkYXRlPXtvblVwZGF0ZX1cbiAgICAgIC8+XG4gICAgICB7a2V5UG9zaXRpb25zLmxlbmd0aCA8IDIgJiYgPFNlbGVjdEtleUNUQSAvPn1cbiAgICA8L2Rpdj5cbiAgKVxufVxuXG5Db21ib0lucHV0TWFwLnByb3BUeXBlcyA9IHtcbiAgb25VcGRhdGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIGtleVBvc2l0aW9uczogUHJvcFR5cGVzLmFycmF5T2YoXG4gICAgUHJvcFR5cGVzLm51bWJlclxuICApLmlzUmVxdWlyZWRcbn1cblxuZXhwb3J0IGRlZmF1bHQgQ29tYm9JbnB1dE1hcFxuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1syXS51c2VbMV0hLi9lZGl0YWJsZWZpZWxkLm1vZHVsZS5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1syXS51c2VbMV0hLi9lZGl0YWJsZWZpZWxkLm1vZHVsZS5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJcbmV4cG9ydCBmdW5jdGlvbiBzdG9wIChmbikge1xuICByZXR1cm4gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKClcbiAgICBmbigpXG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG9uS2V5IChtYXBwaW5nKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICBpZiAobWFwcGluZ1tldmVudC5rZXldKSB7XG4gICAgICBtYXBwaW5nW2V2ZW50LmtleV0oKVxuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgdXNlQ2FsbGJhY2ssIHVzZUVmZmVjdCwgdXNlUmVmLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJ1xuXG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vZWRpdGFibGVmaWVsZC5tb2R1bGUuY3NzJ1xuaW1wb3J0IEljb24gZnJvbSAnLi9JY29uJ1xuaW1wb3J0IHsgc3RvcCwgb25LZXkgfSBmcm9tICcuLi9ldmVudC11dGlsJ1xuXG5mdW5jdGlvbiBFZGl0YWJsZUZpZWxkICh7IHZhbHVlLCB2YWxpZGF0ZSwgcmVxdWlyZWQsIHJlbmRlciwgb25VcGRhdGUgfSkge1xuICBjb25zdCByZWYgPSB1c2VSZWYoKVxuICBjb25zdCBbc3RhdGUsIHNldFN0YXRlXSA9IHVzZVN0YXRlKHtcbiAgICB2YWx1ZSxcbiAgICBlZGl0aW5nOiBmYWxzZSxcbiAgICBhdHRlbXB0ZWRFbXB0eTogZmFsc2VcbiAgfSlcblxuICBjb25zdCBlcnJvciA9IHN0YXRlLmF0dGVtcHRlZEVtcHR5XG4gICAgPyAnY2Fubm90IGJlIGVtcHR5J1xuICAgIDogKHZhbGlkYXRlICYmIHZhbGlkYXRlKHN0YXRlLnZhbHVlKSlcblxuICBjb25zdCBmb2N1c0lucHV0ID0gdXNlQ2FsbGJhY2sobm9kZSA9PiB7XG4gICAgaWYgKG5vZGUpIHtcbiAgICAgIG5vZGUuZm9jdXMoKVxuICAgICAgbm9kZS5zZWxlY3QoKVxuICAgIH1cbiAgfSwgW10pXG5cbiAgZnVuY3Rpb24gZmluaXNoRWRpdGluZyAoKSB7XG4gICAgaWYgKCFzdGF0ZS5lZGl0aW5nKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpZiAoc3RhdGUudmFsdWUgPT09ICcnICYmIHJlcXVpcmVkKSB7XG4gICAgICBzZXRTdGF0ZSh7IC4uLnN0YXRlLCBhdHRlbXB0ZWRFbXB0eTogdHJ1ZSB9KVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgaWYgKCFlcnJvcikge1xuICAgICAgb25VcGRhdGUoc3RhdGUudmFsdWUpXG4gICAgfVxuXG4gICAgc2V0U3RhdGUoeyAuLi5zdGF0ZSwgdmFsdWU6IHN0YXRlLnZhbHVlLCBlZGl0aW5nOiBmYWxzZSB9KVxuICB9XG5cbiAgY29uc3QgY2FuY2VsRWRpdGluZyA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBzZXRTdGF0ZShzdGF0ZSA9PiAoeyAuLi5zdGF0ZSwgZWRpdGluZzogZmFsc2UgfSkpXG4gIH0sIFtzZXRTdGF0ZV0pXG5cbiAgY29uc3QgaGFuZGxlQ2xpY2tPdXRzaWRlID0gdXNlQ2FsbGJhY2soZXZlbnQgPT4ge1xuICAgIGNvbnN0IGNsaWNrZWRPdXRzaWRlID0gcmVmLmN1cnJlbnQgJiYgIXJlZi5jdXJyZW50LmNvbnRhaW5zKGV2ZW50LnRhcmdldClcbiAgICBpZiAoIWNsaWNrZWRPdXRzaWRlKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjYW5jZWxFZGl0aW5nKClcbiAgfSwgW3JlZiwgY2FuY2VsRWRpdGluZ10pXG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGhhbmRsZUNsaWNrT3V0c2lkZSlcbiAgICByZXR1cm4gKCkgPT4gZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBoYW5kbGVDbGlja091dHNpZGUpXG4gIH0sIFtoYW5kbGVDbGlja091dHNpZGVdKVxuXG4gIGlmIChzdGF0ZS5lZGl0aW5nKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxzcGFuIGNsYXNzTmFtZT17c3R5bGVzLmNvbnRhaW5lcn0gcmVmPXtyZWZ9PlxuICAgICAgICA8aW5wdXRcbiAgICAgICAgICByZWY9e2ZvY3VzSW5wdXR9XG4gICAgICAgICAgdmFsdWU9e3N0YXRlLnZhbHVlfVxuICAgICAgICAgIG9uQ2hhbmdlPXtlID0+IHNldFN0YXRlKHtcbiAgICAgICAgICAgIC4uLnN0YXRlLFxuICAgICAgICAgICAgYXR0ZW1wdGVkRW1wdHk6IGZhbHNlLFxuICAgICAgICAgICAgdmFsdWU6IGUudGFyZ2V0LnZhbHVlXG4gICAgICAgICAgfSl9XG4gICAgICAgICAgb25LZXlEb3duPXtvbktleSh7XG4gICAgICAgICAgICBFbnRlcjogZmluaXNoRWRpdGluZyxcbiAgICAgICAgICAgIEVzY2FwZTogY2FuY2VsRWRpdGluZ1xuICAgICAgICAgIH0pfVxuICAgICAgICAvPlxuICAgICAgICB7ZXJyb3IgJiYgPHNwYW4gY2xhc3NOYW1lPXtzdHlsZXMuZXJyb3J9PntlcnJvcn08L3NwYW4+fVxuICAgICAgPC9zcGFuPlxuICAgIClcbiAgfVxuXG4gIHJldHVybiByZW5kZXIoXG4gICAgPD5cbiAgICAgIDxzcGFuPnt2YWx1ZX08L3NwYW4+XG4gICAgICA8SWNvblxuICAgICAgICBuYW1lPVwicGVuY2lsXCJcbiAgICAgICAgY2xhc3NOYW1lPXtzdHlsZXMuZWRpdH1cbiAgICAgICAgb25DbGljaz17c3RvcCgoKSA9PiBzZXRTdGF0ZSh7IC4uLnN0YXRlLCBlZGl0aW5nOiB0cnVlIH0pKX1cbiAgICAgIC8+XG4gICAgPC8+XG4gIClcbn1cblxuRWRpdGFibGVGaWVsZC5wcm9wVHlwZXMgPSB7XG4gIHZhbHVlOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIHZhbGlkYXRlOiBQcm9wVHlwZXMuZnVuYyxcbiAgcmVxdWlyZWQ6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG4gIHJlbmRlcjogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgb25VcGRhdGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbn1cblxuRWRpdGFibGVGaWVsZC5kZWZhdWx0UHJvcHMgPSB7XG4gIHJlcXVpcmVkOiB0cnVlXG59XG5cbmV4cG9ydCBkZWZhdWx0IEVkaXRhYmxlRmllbGRcbiIsImltcG9ydCBwaWNrIGZyb20gJ2xvZGFzaC9waWNrJ1xuaW1wb3J0IHsgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCdcbmltcG9ydCB7IHVzZVNlbGVjdG9yIH0gZnJvbSAncmVhY3QtcmVkdXgnXG5cbmltcG9ydCBNb2RhbCBmcm9tICcuLi8uLi9Db21tb24vTW9kYWwnXG5pbXBvcnQgRGlhbG9nQm94IGZyb20gJy4uLy4uL0NvbW1vbi9EaWFsb2dCb3gnXG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vc3R5bGVzLm1vZHVsZS5jc3MnXG5pbXBvcnQgeyBzZWxlY3RMYXllcnMgfSBmcm9tICcuLi9MYXllcnMvbGF5ZXJzU2xpY2UnXG5cbmZ1bmN0aW9uIE11bHRpU2VsZWN0ICh7IHNlbGVjdGVkLCBvcHRpb25zLCBvblVwZGF0ZSB9KSB7XG4gIGZ1bmN0aW9uIGhhbmRsZUNoYW5nZSAoaW5kZXgpIHtcbiAgICBvblVwZGF0ZShcbiAgICAgIHNlbGVjdGVkLmluY2x1ZGVzKGluZGV4KVxuICAgICAgICA/IHNlbGVjdGVkLmZpbHRlcihpID0+IGkgIT09IGluZGV4KVxuICAgICAgICA6IFsuLi5zZWxlY3RlZCwgaW5kZXhdXG4gICAgKVxuICB9XG4gIHJldHVybiAoXG4gICAgPHVsIGNsYXNzTmFtZT17c3R5bGVzLmxheWVyTGlzdH0+XG4gICAgICB7b3B0aW9ucy5tYXAoKG9wdGlvbiwgaSkgPT4gKFxuICAgICAgICA8bGlcbiAgICAgICAgICBkYXRhLXNlbGVjdGVkPXtzZWxlY3RlZC5pbmNsdWRlcyhpKX1cbiAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBoYW5kbGVDaGFuZ2UoaSl9XG4gICAgICAgID5cbiAgICAgICAgICB7b3B0aW9ufVxuICAgICAgICA8L2xpPlxuICAgICAgKSl9XG4gICAgPC91bD5cbiAgKVxufVxuXG5mdW5jdGlvbiBDb25maWdNb2RhbCAoeyBjb21ibywgb25VcGRhdGUgfSkge1xuICBjb25zdCBsYXllcnMgPSB1c2VTZWxlY3RvcihzZWxlY3RMYXllcnMpXG4gIGNvbnN0IFtwZW5kaW5nLCBzZXRQZW5kaW5nXSA9IHVzZVN0YXRlKHBpY2soY29tYm8sIFtcbiAgICAndGltZW91dE1zJyxcbiAgICAnc2xvd1JlbGVhc2UnLFxuICAgICdsYXllcnMnXG4gIF0pKVxuXG4gIGNvbnN0IGF2YWlsYWJsZUxheWVycyA9IGxheWVycy5tYXAobGF5ZXIgPT4gbGF5ZXIubmFtZSlcbiAgZnVuY3Rpb24gaGFuZGxlQ29uZmlybSAoKSB7XG4gICAgb25VcGRhdGUocGVuZGluZylcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPE1vZGFsPlxuICAgICAgPERpYWxvZ0JveCBvbkRpc21pc3M9e2hhbmRsZUNvbmZpcm19PlxuICAgICAgICA8aDI+Q3VzdG9taXplIFs8Y29kZT57Y29tYm8uaWRlbnRpZmllcn08L2NvZGU+XTwvaDI+XG4gICAgICAgIDxkaXY+XG5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLmZpZWxkfT5cbiAgICAgICAgICAgIDxsYWJlbCBodG1sRm9yPVwiY3VzdG9taXplLWNvbWJvLXRpbWVvdXRcIj5cbiAgICAgICAgICAgICAgVGltZW91dCAobXMpXG4gICAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgIGlkPVwiY3VzdG9taXplLWNvbWJvLXRpbWVvdXRcIlxuICAgICAgICAgICAgICB0eXBlPVwibnVtYmVyXCJcbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJEZWZhdWx0XCJcbiAgICAgICAgICAgICAgdmFsdWU9e3BlbmRpbmcudGltZW91dE1zfVxuICAgICAgICAgICAgICBvbkNoYW5nZT17ZXZlbnQgPT4gKFxuICAgICAgICAgICAgICAgIHNldFBlbmRpbmcoc3RhdGUgPT4gKHtcbiAgICAgICAgICAgICAgICAgIC4uLnN0YXRlLFxuICAgICAgICAgICAgICAgICAgdGltZW91dE1zOiBldmVudC50YXJnZXQudmFsdWUgPT09ICcnXG4gICAgICAgICAgICAgICAgICAgID8gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgICAgIDogTnVtYmVyKGV2ZW50LnRhcmdldC52YWx1ZSlcbiAgICAgICAgICAgICAgICB9KSlcbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLmZpZWxkfT5cbiAgICAgICAgICAgIDxsYWJlbCBodG1sRm9yPVwiY3VzdG9taXplLWNvbWJvLXNsb3ctcmVsZWFzZVwiPlxuICAgICAgICAgICAgICBTbG93IFJlbGVhc2VcbiAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgaWQ9XCJjdXN0b21pemUtY29tYm8tc2xvdy1yZWxlYXNlXCJcbiAgICAgICAgICAgICAgdHlwZT1cImNoZWNrYm94XCJcbiAgICAgICAgICAgICAgY2hlY2tlZD17cGVuZGluZy5zbG93UmVsZWFzZX1cbiAgICAgICAgICAgICAgb25DaGFuZ2U9e2V2ZW50ID0+IChcbiAgICAgICAgICAgICAgICBzZXRQZW5kaW5nKHN0YXRlID0+ICh7XG4gICAgICAgICAgICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgICAgICAgICAgIHNsb3dSZWxlYXNlOiBldmVudC50YXJnZXQuY2hlY2tlZFxuICAgICAgICAgICAgICAgIH0pKVxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMuZmllbGR9PlxuICAgICAgICAgICAgPGxhYmVsPkxheWVyczwvbGFiZWw+XG4gICAgICAgICAgICA8TXVsdGlTZWxlY3RcbiAgICAgICAgICAgICAgc2VsZWN0ZWQ9e3BlbmRpbmcubGF5ZXJzIHx8IFtdfVxuICAgICAgICAgICAgICBvcHRpb25zPXthdmFpbGFibGVMYXllcnN9XG4gICAgICAgICAgICAgIG9uVXBkYXRlPXtsYXllcnMgPT4gKFxuICAgICAgICAgICAgICAgIHNldFBlbmRpbmcoc3RhdGUgPT4gKHtcbiAgICAgICAgICAgICAgICAgIC4uLnN0YXRlLFxuICAgICAgICAgICAgICAgICAgbGF5ZXJzXG4gICAgICAgICAgICAgICAgfSkpXG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvRGlhbG9nQm94PlxuICAgIDwvTW9kYWw+XG4gIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgQ29uZmlnTW9kYWxcbiIsImltcG9ydCB7IGNyZWF0ZVNsaWNlIH0gZnJvbSAnQHJlZHV4anMvdG9vbGtpdCdcblxuZXhwb3J0IGNvbnN0IHNlbGVjdENvbWJvcyA9IHN0YXRlID0+IHN0YXRlLmtleWJvYXJkLmtleW1hcC5jb21ib3NcblxuY29uc3QgY29tYm9zU2xpY2UgPSBjcmVhdGVTbGljZSh7XG4gIG5hbWU6ICdjb21ib3MnLFxuICBpbml0aWFsU3RhdGU6IFtdLFxuICByZWR1Y2Vyczoge1xuICAgIHVwZGF0ZUNvbWJvQmluZGluZyAoc3RhdGUsIGFjdGlvbikge1xuICAgICAgc3RhdGVbYWN0aW9uLnBheWxvYWQuY29tYm9JbmRleF0uYmluZGluZ3MgPSBhY3Rpb24ucGF5bG9hZC5iaW5kaW5nc1xuICAgIH0sXG4gICAgdXBkYXRlQ29tYm9LZXlwb3NpdGlvbnMgKHN0YXRlLCBhY3Rpb24pIHtcbiAgICAgIHN0YXRlW2FjdGlvbi5wYXlsb2FkLmNvbWJvSW5kZXhdLmtleVBvc2l0aW9ucyA9IGFjdGlvbi5wYXlsb2FkLmtleVBvc2l0aW9uc1xuICAgIH0sXG4gICAgY3JlYXRlQ29tYm8gKHN0YXRlKSB7XG4gICAgICBzdGF0ZS5wdXNoKHtcbiAgICAgICAgaWRlbnRpZmllcjogJ25ld19jb21ibycsXG4gICAgICAgIGtleVBvc2l0aW9uczogW10sXG4gICAgICAgIGJpbmRpbmdzOiBbe1xuICAgICAgICAgIHZhbHVlOiAnJnRyYW5zJyxcbiAgICAgICAgICBwYXJhbXM6IFtdXG4gICAgICAgIH1dXG4gICAgICB9KVxuICAgIH0sXG4gICAgcmVuYW1lQ29tYm8gKHN0YXRlLCBhY3Rpb24pIHtcbiAgICAgIHN0YXRlW2FjdGlvbi5wYXlsb2FkLmluZGV4XS5pZGVudGlmaWVyID0gYWN0aW9uLnBheWxvYWQubmFtZVxuICAgIH0sXG4gICAgZGVsZXRlQ29tYm8gKHN0YXRlLCBhY3Rpb24pIHtcbiAgICAgIHN0YXRlLnNwbGljZShhY3Rpb24ucGF5bG9hZC5pbmRleCwgMSlcbiAgICB9LFxuICAgIGN1c3RvbWl6ZUNvbWJvIChzdGF0ZSwgYWN0aW9uKSB7XG4gICAgICBPYmplY3QuYXNzaWduKHN0YXRlW2FjdGlvbi5wYXlsb2FkLmluZGV4XSwgYWN0aW9uLnBheWxvYWQuY29uZmlnKVxuICAgIH1cbiAgfVxufSlcblxuZXhwb3J0IGNvbnN0IHtcbiAgdXBkYXRlQ29tYm9CaW5kaW5nLFxuICB1cGRhdGVDb21ib0tleXBvc2l0aW9ucyxcbiAgY3JlYXRlQ29tYm8sXG4gIHJlbmFtZUNvbWJvLFxuICBkZWxldGVDb21ibyxcbiAgY3VzdG9taXplQ29tYm9cbn0gPSBjb21ib3NTbGljZS5hY3Rpb25zXG5cbmV4cG9ydCBkZWZhdWx0IGNvbWJvc1NsaWNlLnJlZHVjZXJcbiIsImltcG9ydCB7IHVzZUNvbnRleHQsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgeyB1c2VEaXNwYXRjaCwgdXNlU2VsZWN0b3IgfSBmcm9tICdyZWFjdC1yZWR1eCdcblxuaW1wb3J0IENvbWJvSW5wdXRNYXAgZnJvbSAnLi9Db21ib0lucHV0TWFwJ1xuaW1wb3J0IHN0eWxlcyBmcm9tICcuL3N0eWxlcy5tb2R1bGUuY3NzJ1xuaW1wb3J0IEtleSBmcm9tICcuLi9LZXlzL0tleSdcbmltcG9ydCBBY3Rpb25CdXR0b24gZnJvbSAnLi4vLi4vQ29tbW9uL0FjdGlvbkJ1dHRvbidcbmltcG9ydCBJY29uIGZyb20gJy4uLy4uL0NvbW1vbi9JY29uJ1xuaW1wb3J0IExpbmsgZnJvbSAnLi4vLi4vQ29tbW9uL0xpbmsnXG5pbXBvcnQgRWRpdGFibGVGaWVsZCBmcm9tICcuLi8uLi9Db21tb24vRWRpdGFibGVGaWVsZCdcbmltcG9ydCB7IFNlYXJjaENvbnRleHQgfSBmcm9tICcuLi8uLi9wcm92aWRlcnMnXG5pbXBvcnQgQ29uZmlnTW9kYWwgZnJvbSAnLi9Db25maWdNb2RhbCdcbmltcG9ydCB7IHZhbGlkYXRlRGV2aWNldHJlZUlkZW50aWZpZXIgfSBmcm9tICcuLi9Db21tb24vRGV2aWNldHJlZS92YWxpZGF0b3JzJ1xuaW1wb3J0IHtcbiAgc2VsZWN0Q29tYm9zLFxuICBjcmVhdGVDb21ibyxcbiAgY3VzdG9taXplQ29tYm8sXG4gIGRlbGV0ZUNvbWJvLFxuICByZW5hbWVDb21ibyxcbiAgdXBkYXRlQ29tYm9CaW5kaW5nLFxuICB1cGRhdGVDb21ib0tleXBvc2l0aW9uc1xufSBmcm9tICcuL2NvbWJvc1NsaWNlJ1xuXG5mdW5jdGlvbiBDb21ib0VkaXRvciAocHJvcHMpIHtcbiAgY29uc3QgeyBpZGVudGlmaWVycyB9ID0gdXNlQ29udGV4dChTZWFyY2hDb250ZXh0KVxuICBjb25zdCBjb21ib3MgPSB1c2VTZWxlY3RvcihzZWxlY3RDb21ib3MpXG4gIGNvbnN0IGRpc3BhdGNoID0gdXNlRGlzcGF0Y2goKVxuICBjb25zdCBbY29uZmlnRWRpdCwgc2V0Q29uZmlnRWRpdF0gPSB1c2VTdGF0ZShudWxsKVxuXG4gIGZ1bmN0aW9uIHZhbGlkYXRlQ29tYm9JZGVudGlmaWVyICh2YWx1ZSkge1xuICAgIHJldHVybiB2YWxpZGF0ZURldmljZXRyZWVJZGVudGlmaWVyKHZhbHVlKSB8fCAoXG4gICAgICBpZGVudGlmaWVycy5pbmNsdWRlcyh2YWx1ZSlcbiAgICAgICAgPyBgQ2Fubm90IHVzZSBleGlzdGluZyBpZGVudGlmaWVyIFwiJHt2YWx1ZX1cImBcbiAgICAgICAgOiBudWxsXG4gICAgKVxuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlVXBkYXRlQmluZGluZ3MgKGksIHVwZGF0ZSkge1xuICAgIGRpc3BhdGNoKHVwZGF0ZUNvbWJvQmluZGluZyh7XG4gICAgICBjb21ib0luZGV4OiBpLFxuICAgICAgYmluZGluZ3M6IFt1cGRhdGVdXG4gICAgfSkpXG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVVcGRhdGVLZXlQb3NpdGlvbnMgKGksIHVwZGF0ZSkge1xuICAgIGRpc3BhdGNoKHVwZGF0ZUNvbWJvS2V5cG9zaXRpb25zKHtcbiAgICAgIGNvbWJvSW5kZXg6IGksXG4gICAgICBrZXlQb3NpdGlvbnM6IHVwZGF0ZVxuICAgIH0pKVxuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlUmVuYW1lQ29tYm8gKGluZGV4LCBuYW1lKSB7XG4gICAgZGlzcGF0Y2gocmVuYW1lQ29tYm8oeyBpbmRleCwgbmFtZSB9KSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZUFkZENvbWJvICgpIHtcbiAgICBkaXNwYXRjaChjcmVhdGVDb21ibygpKVxuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlRGVsZXRlQ29tYm8gKGluZGV4KSB7XG4gICAgZGlzcGF0Y2goZGVsZXRlQ29tYm8oeyBpbmRleCB9KSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZUN1c3RvbWl6ZUNvbWJvIChpbmRleCwgY29uZmlnKSB7XG4gICAgc2V0Q29uZmlnRWRpdChudWxsKVxuICAgIGRpc3BhdGNoKGN1c3RvbWl6ZUNvbWJvKHsgaW5kZXgsIGNvbmZpZyB9KSlcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5tYWlufT5cbiAgICAgIHtjb25maWdFZGl0ICE9PSBudWxsICYmIChcbiAgICAgICAgPENvbmZpZ01vZGFsXG4gICAgICAgICAgY29tYm89e2NvbWJvc1tjb25maWdFZGl0XX1cbiAgICAgICAgICBvblVwZGF0ZT17Y29uZmlnID0+IGhhbmRsZUN1c3RvbWl6ZUNvbWJvKGNvbmZpZ0VkaXQsIGNvbmZpZyl9XG4gICAgICAgIC8+XG4gICAgICApfVxuXG4gICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLnNpZGViYXJ9PlxuICAgICAgICA8TGluayBleHRlcm5hbCBocmVmPVwiaHR0cHM6Ly96bWsuZGV2L2RvY3MvZmVhdHVyZXMvY29tYm9zXCI+XG4gICAgICAgICAgPEljb24gbmFtZT1cImJvb2tcIiAvPiBaTUsgRG9jczogQ29tYm9zXG4gICAgICAgIDwvTGluaz5cblxuICAgICAgICA8QWN0aW9uQnV0dG9uIG9uQ2xpY2s9e2hhbmRsZUFkZENvbWJvfT5cbiAgICAgICAgICBBZGQgTmV3IENvbWJvXG4gICAgICAgIDwvQWN0aW9uQnV0dG9uPlxuICAgICAgPC9kaXY+XG5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMuY29tYm9QYW5lbH0+XG4gICAgICAgIHtjb21ib3MubWFwKChjb21ibywgaSkgPT4gKFxuICAgICAgICAgIDxkaXYga2V5PXtpfSBjbGFzc05hbWU9e3N0eWxlcy5jb21ib30+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLmhlYWRpbmd9PlxuICAgICAgICAgICAgICA8RWRpdGFibGVGaWVsZFxuICAgICAgICAgICAgICAgIHZhbHVlPXtjb21iby5pZGVudGlmaWVyfVxuICAgICAgICAgICAgICAgIHZhbGlkYXRlPXt2YWxpZGF0ZUNvbWJvSWRlbnRpZmllcn1cbiAgICAgICAgICAgICAgICByZW5kZXI9e2NoaWxkcmVuID0+IDxoNT48Y29kZT57Y2hpbGRyZW59PC9jb2RlPjwvaDU+fVxuICAgICAgICAgICAgICAgIG9uVXBkYXRlPXtuYW1lID0+IGhhbmRsZVJlbmFtZUNvbWJvKGksIG5hbWUpfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLmFjdGlvbnN9PlxuICAgICAgICAgICAgICAgIDxJY29uXG4gICAgICAgICAgICAgICAgICBuYW1lPVwid3JlbmNoXCJcbiAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17YCR7c3R5bGVzLmFjdGlvbn1gfVxuICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gc2V0Q29uZmlnRWRpdChpKX1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDxJY29uXG4gICAgICAgICAgICAgICAgICBuYW1lPVwidHJhc2gtY2FuXCJcbiAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17YCR7c3R5bGVzLmFjdGlvbn0gJHtzdHlsZXMucmVtb3ZlfWB9XG4gICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBoYW5kbGVEZWxldGVDb21ibyhpKX1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLmRldGFpbH0+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMuY29tYm9PdXRwdXR9PlxuICAgICAgICAgICAgICAgIDxLZXlcbiAgICAgICAgICAgICAgICAgIHsuLi5jb21iby5iaW5kaW5nc1swXX1cbiAgICAgICAgICAgICAgICAgIG9uVXBkYXRlPXt1cGRhdGUgPT4ge1xuICAgICAgICAgICAgICAgICAgICBoYW5kbGVVcGRhdGVCaW5kaW5ncyhpLCB1cGRhdGUpXG4gICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgIDxDb21ib0lucHV0TWFwXG4gICAgICAgICAgICAgICAga2V5UG9zaXRpb25zPXtjb21iby5rZXlQb3NpdGlvbnN9XG4gICAgICAgICAgICAgICAgb25VcGRhdGU9e3ZhbHVlID0+IGhhbmRsZVVwZGF0ZUtleVBvc2l0aW9ucyhpLCB2YWx1ZSl9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKSl9XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKVxufVxuXG5Db21ib0VkaXRvci5wcm9wVHlwZXMgPSB7fVxuXG5leHBvcnQgZGVmYXVsdCBDb21ib0VkaXRvclxuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1syXS51c2VbMV0hLi9sYXllci1zZWxlY3Rvci5tb2R1bGUuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMl0udXNlWzFdIS4vbGF5ZXItc2VsZWN0b3IubW9kdWxlLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcydcbmltcG9ydCB7IHVzZUNhbGxiYWNrLCB1c2VDb250ZXh0LCB1c2VFZmZlY3QsIHVzZU1lbW8sIHVzZVJlZiwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCdcbmltcG9ydCB7IHVzZURpc3BhdGNoLCB1c2VTZWxlY3RvciB9IGZyb20gJ3JlYWN0LXJlZHV4J1xuXG5pbXBvcnQgSWNvbiBmcm9tICcuLi8uLi9Db21tb24vSWNvbidcbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9sYXllci1zZWxlY3Rvci5tb2R1bGUuY3NzJ1xuaW1wb3J0IHsgc3RvcCwgb25LZXkgfSBmcm9tICcuLi8uLi9ldmVudC11dGlsJ1xuaW1wb3J0IHtcbiAgc2VsZWN0TGF5ZXJzLFxuICBjcmVhdGVMYXllcixcbiAgcmVuYW1lTGF5ZXIsXG4gIGRlbGV0ZUxheWVyXG59IGZyb20gJy4vbGF5ZXJzU2xpY2UnXG5pbXBvcnQgeyBMYXlvdXRDb250ZXh0IH0gZnJvbSAnLi4vLi4vQ29udGV4dHMvTGF5b3V0J1xuXG5mdW5jdGlvbiBMYXllclNlbGVjdG9yICh7IGFjdGl2ZUxheWVyLCBvblNlbGVjdCB9KSB7XG4gIGNvbnN0IHJlZiA9IHVzZVJlZihudWxsKVxuICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKClcbiAgY29uc3QgeyBiaW5kaW5nQ291bnQgfSA9IHVzZUNvbnRleHQoTGF5b3V0Q29udGV4dClcbiAgY29uc3QgbGF5ZXJzID0gdXNlU2VsZWN0b3Ioc2VsZWN0TGF5ZXJzKVxuICBjb25zdCBbcmVuYW1pbmcsIHNldFJlbmFtaW5nXSA9IHVzZVN0YXRlKGZhbHNlKVxuICBjb25zdCBbZWRpdGluZywgc2V0RWRpdGluZ10gPSB1c2VTdGF0ZSgnJylcblxuICBjb25zdCBoYW5kbGVTZWxlY3QgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAobGF5ZXJJbmRleCkge1xuICAgIGlmIChsYXllckluZGV4ID09PSBhY3RpdmVMYXllcikge1xuICAgICAgc2V0RWRpdGluZyhsYXllcnNbYWN0aXZlTGF5ZXJdLm5hbWUpXG4gICAgICBzZXRSZW5hbWluZyh0cnVlKVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgc2V0UmVuYW1pbmcoZmFsc2UpXG4gICAgb25TZWxlY3QobGF5ZXJJbmRleClcbiAgfSwgW2xheWVycywgYWN0aXZlTGF5ZXIsIHNldEVkaXRpbmcsIHNldFJlbmFtaW5nLCBvblNlbGVjdF0pXG5cbiAgY29uc3QgaGFuZGxlQWRkID0gdXNlQ2FsbGJhY2soKCkgPT4gZGlzcGF0Y2goY3JlYXRlTGF5ZXIoe1xuICAgIGJpbmRpbmdDb3VudFxuICB9KSksIFtkaXNwYXRjaCwgYmluZGluZ0NvdW50XSlcblxuICBjb25zdCBoYW5kbGVEZWxldGUgPSB1c2VNZW1vKCgpID0+IGZ1bmN0aW9uIChsYXllckluZGV4LCBsYXllck5hbWUpIHtcbiAgICBpZiAod2luZG93LmNvbmZpcm0oYFJlYWxseSBkZWxldGUgbGF5ZXI6ICR7bGF5ZXJOYW1lfT9gKSkge1xuICAgICAgZGlzcGF0Y2goZGVsZXRlTGF5ZXIoeyBpbmRleDogbGF5ZXJJbmRleCB9KSlcbiAgICB9XG4gIH0sIFtkaXNwYXRjaF0pXG5cbiAgY29uc3QgZmluaXNoRWRpdGluZyA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBpZiAoIXJlbmFtaW5nKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjb25zdCBpbmRleCA9IGFjdGl2ZUxheWVyXG4gICAgY29uc3QgbmFtZSA9IGVkaXRpbmdcblxuICAgIHNldEVkaXRpbmcoJycpXG4gICAgc2V0UmVuYW1pbmcoZmFsc2UpXG4gICAgZGlzcGF0Y2gocmVuYW1lTGF5ZXIoeyBpbmRleCwgbmFtZSB9KSlcbiAgfSwgW2VkaXRpbmcsIHJlbmFtaW5nLCBhY3RpdmVMYXllciwgc2V0RWRpdGluZywgc2V0UmVuYW1pbmcsIGRpc3BhdGNoXSlcblxuICBjb25zdCBjYW5jZWxFZGl0aW5nID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIGlmICghcmVuYW1pbmcpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHNldEVkaXRpbmcoJycpXG4gICAgc2V0UmVuYW1pbmcoZmFsc2UpXG4gIH0sIFtyZW5hbWluZywgc2V0RWRpdGluZywgc2V0UmVuYW1pbmddKVxuXG4gIGNvbnN0IGhhbmRsZUNsaWNrT3V0c2lkZSA9IHVzZU1lbW8oKCkgPT4gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgY29uc3QgY2xpY2tlZE91dHNpZGUgPSByZWYuY3VycmVudCAmJiAhcmVmLmN1cnJlbnQuY29udGFpbnMoZXZlbnQudGFyZ2V0KVxuICAgIGlmICghY2xpY2tlZE91dHNpZGUpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNhbmNlbEVkaXRpbmcoKVxuICB9LCBbcmVmLCBjYW5jZWxFZGl0aW5nXSlcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgaGFuZGxlQ2xpY2tPdXRzaWRlKVxuICAgIHJldHVybiAoKSA9PiBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIGhhbmRsZUNsaWNrT3V0c2lkZSlcbiAgfSwgW2hhbmRsZUNsaWNrT3V0c2lkZV0pXG5cbiAgY29uc3QgZm9jdXNJbnB1dCA9IHVzZUNhbGxiYWNrKG5vZGUgPT4ge1xuICAgIGlmIChub2RlKSB7XG4gICAgICBub2RlLmZvY3VzKClcbiAgICAgIG5vZGUuc2VsZWN0KClcbiAgICB9XG4gIH0sIFtdKVxuXG4gIHJldHVybiAoXG4gICAgPGRpdlxuICAgICAgY2xhc3NOYW1lPXtzdHlsZXMubGF5ZXJTZWxlY3Rvcn1cbiAgICAgIGRhdGEtcmVuYW1pbmc9e3JlbmFtaW5nfVxuICAgICAgcmVmPXtyZWZ9XG4gICAgPlxuICAgICAgPHVsPlxuICAgICAgICB7bGF5ZXJzLm1hcCgoeyBuYW1lIH0sIGkpID0+IChcbiAgICAgICAgICA8bGlcbiAgICAgICAgICAgIGtleT17YGxheWVyLSR7aX1gfVxuICAgICAgICAgICAgY2xhc3NOYW1lPXthY3RpdmVMYXllciA9PT0gaSA/IHN0eWxlcy5hY3RpdmUgOiAnJ31cbiAgICAgICAgICAgIGRhdGEtbGF5ZXI9e2l9XG4gICAgICAgICAgICBvbkNsaWNrPXtzdG9wKCgpID0+IGhhbmRsZVNlbGVjdChpKSl9XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPXtzdHlsZXMuaW5kZXh9PntpfTwvc3Bhbj5cbiAgICAgICAgICAgIHsoYWN0aXZlTGF5ZXIgPT09IGkgJiYgcmVuYW1pbmcpXG4gICAgICAgICAgICAgID8gKFxuICAgICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgICByZWY9e2ZvY3VzSW5wdXR9XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtzdHlsZXMubmFtZX1cbiAgICAgICAgICAgICAgICBvbkNoYW5nZT17ZSA9PiBzZXRFZGl0aW5nKGUudGFyZ2V0LnZhbHVlKX1cbiAgICAgICAgICAgICAgICBvbktleURvd249e29uS2V5KHtcbiAgICAgICAgICAgICAgICAgIEVudGVyOiBmaW5pc2hFZGl0aW5nLFxuICAgICAgICAgICAgICAgICAgRXNjYXBlOiBjYW5jZWxFZGl0aW5nXG4gICAgICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICAgICAgdmFsdWU9e1xuICAgICAgICAgICAgICAgICAgKGFjdGl2ZUxheWVyID09PSBpICYmIHJlbmFtaW5nKVxuICAgICAgICAgICAgICAgICAgICA/IGVkaXRpbmdcbiAgICAgICAgICAgICAgICAgICAgOiBuYW1lXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgOiAoXG4gICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT17c3R5bGVzLm5hbWV9PlxuICAgICAgICAgICAgICAgIHtuYW1lfVxuICAgICAgICAgICAgICAgIDxJY29uXG4gICAgICAgICAgICAgICAgICBuYW1lPVwidGltZXMtY2lyY2xlXCJcbiAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17c3R5bGVzLmRlbGV0ZX1cbiAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e3N0b3AoKCkgPT4gaGFuZGxlRGVsZXRlKGksIG5hbWUpKX1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICA8L2xpPlxuICAgICAgICApKX1cbiAgICAgICAgPGxpIG9uQ2xpY2s9e2hhbmRsZUFkZH0+XG4gICAgICAgICAgPEljb24gY2xhc3NOYW1lPXtzdHlsZXMuaW5kZXh9IG5hbWU9XCJwbHVzXCIgLz5cbiAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9e3N0eWxlcy5uYW1lfT5BZGQgTGF5ZXI8L3NwYW4+XG4gICAgICAgIDwvbGk+XG4gICAgICA8L3VsPlxuICAgIDwvZGl2PlxuICApXG59XG5cbkxheWVyU2VsZWN0b3IucHJvcFR5cGVzID0ge1xuICBhY3RpdmVMYXllcjogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxuICBvblNlbGVjdDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxufVxuXG5leHBvcnQgZGVmYXVsdCBMYXllclNlbGVjdG9yXG4iLCJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnXG5cbmltcG9ydCBCaW5kaW5nIGZyb20gJy4vQmluZGluZy9CaW5kaW5nJ1xuaW1wb3J0ICogYXMgYmluZFByb3BUeXBlcyBmcm9tICcuL0JpbmRpbmcvYmluZFByb3BUeXBlcydcblxuaW1wb3J0IEtleVdyYXBwZXIgZnJvbSAnLi9LZXlzL0tleVdyYXBwZXInXG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vS2V5cy9zdHlsZXMubW9kdWxlLmNzcydcblxuZnVuY3Rpb24gQXJyb3dJY29uICh7IGRpcmVjdGlvbiB9KSB7XG4gIHJldHVybiAoXG4gICAgPHN2Z1xuICAgICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gICAgICB3aWR0aD1cIjY1cHhcIlxuICAgICAgaGVpZ2h0PVwiNjVweFwiXG4gICAgICB2aWV3Qm94PVwiMCAwIDY1IDY1XCJcbiAgICAgIHN0eWxlPXt7XG4gICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICB0b3A6ICctMTBweCcsXG4gICAgICAgIHN0cm9rZTogJ3ZhcigtLWtleS1jb2xvci1iYXNlKScsXG4gICAgICAgIHN0cm9rZVdpZHRoOiAyLFxuICAgICAgICBmaWxsOiAnbm9uZScsXG4gICAgICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgICAgIHdpZHRoOiAnNjVweCcsXG4gICAgICAgIGhlaWdodDogJzY1cHgnLFxuICAgICAgICBwb2ludGVyRXZlbnRzOiAnbm9uZSdcbiAgICAgIH19XG4gICAgPlxuICAgICAgPHBhdGhcbiAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICB0cmFuc2Zvcm06IGBzY2FsZVgoJHtkaXJlY3Rpb24gPT09ICdjdycgPyAtMSA6IDF9KSByb3RhdGUoLTQ1ZGVnKWAsXG4gICAgICAgICAgdHJhbnNmb3JtT3JpZ2luOiAnY2VudGVyIGNlbnRlcidcbiAgICAgICAgfX1cbiAgICAgICAgZD1cIk0gNjMgMzEgQSAzMCAzMCA0NSAwIDAgMzIuNSAyIE0gMzcgLTIgTCAzMi41IDIgTCAzNyA2XCJcbiAgICAgIC8+XG4gICAgPC9zdmc+XG4gIClcbn1cblxuZnVuY3Rpb24gRW5jb2RlckJpbmRpbmcgKHByb3BzKSB7XG4gIGNvbnN0IHsgY29udGV4dCwgZGlyZWN0aW9uLCBwYXJhbXMsIG9uVXBkYXRlIH0gPSBwcm9wc1xuXG4gIHJldHVybiAoXG4gICAgPEtleVdyYXBwZXIgdGhlbWVDbGFzcz17c3R5bGVzLmVuY29kZXJ9PlxuICAgICAgPEFycm93SWNvbiBkaXJlY3Rpb249e2RpcmVjdGlvbn0gLz5cbiAgICAgIDxCaW5kaW5nXG4gICAgICAgIGhpZGVCZWhhdmlvdXI9e3RydWV9XG4gICAgICAgIGNvbnRleHQ9e2NvbnRleHR9XG4gICAgICAgIHZhbHVlPVwiJmtwXCJcbiAgICAgICAgcGFyYW1zPXtwYXJhbXN9XG4gICAgICAgIG9uVXBkYXRlPXtvblVwZGF0ZX1cbiAgICAgIC8+XG4gICAgPC9LZXlXcmFwcGVyPlxuICApXG59XG5cbkVuY29kZXJCaW5kaW5nLnByb3BUeXBlcyA9IHtcbiAgcGFyYW1zOiBQcm9wVHlwZXMuYXJyYXlPZihiaW5kUHJvcFR5cGVzLm5vZGUpLFxuICBvblVwZGF0ZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxufVxuXG5leHBvcnQgZGVmYXVsdCBFbmNvZGVyQmluZGluZ1xuIiwiaW1wb3J0IHsgdXNlRGlzcGF0Y2gsIHVzZVNlbGVjdG9yIH0gZnJvbSAncmVhY3QtcmVkdXgnXG5cbmltcG9ydCB7IHJlcGxhY2VJbmRleCB9IGZyb20gJy4uLy4uL3JlZHVjZXItdXRpbCdcbmltcG9ydCBFbmNvZGVyQmluZGluZyBmcm9tICcuLi9FbmNvZGVyQmluZGluZydcbmltcG9ydCB7IHNlbGVjdExheWVycywgdXBkYXRlU2Vuc29yQmluZGluZ3MgfSBmcm9tICcuL2xheWVyc1NsaWNlJ1xuXG5mdW5jdGlvbiBTZW5zb3JCaW5kaW5ncyAoeyBsYXllciwgc2Vuc29ycyB9KSB7XG4gIGNvbnN0IGRpc3BhdGNoID0gdXNlRGlzcGF0Y2goKVxuICBjb25zdCBsYXllcnMgPSB1c2VTZWxlY3RvcihzZWxlY3RMYXllcnMpXG4gIGNvbnN0IHsgc2Vuc29yQmluZGluZ3MgPSBbXSB9ID0gbGF5ZXJzW2xheWVyXVxuXG4gIGZ1bmN0aW9uIGhhbmRsZVVwZGF0ZSAoc2Vuc29ySW5kZXgsIGJpbmRJbmRleCwgYmluZGluZykge1xuICAgIC8vIFRPRE86IGhhbmRsZSBzZW5zb3IgYmluZGluZ3MgbGlzdCB0aGF0IGRvZXNuJ3QgbWF0Y2ggc2Vuc29yIGNvdW50XG4gICAgY29uc3QgYmluZCA9IGJpbmRpbmcucGFyYW1zWzBdXG4gICAgY29uc3Qgb3JpZ2luYWxCaW5kaW5ncyA9IHNlbnNvckJpbmRpbmdzW3NlbnNvckluZGV4XSB8fCB7XG4gICAgICB2YWx1ZTogJyZpbmNfZGVjX2twJyxcbiAgICAgIHBhcmFtczogW1xuICAgICAgICB7IHZhbHVlOiAnJywgcGFyYW1zOiBbXSB9LFxuICAgICAgICB7IHZhbHVlOiAnJywgcGFyYW1zOiBbXSB9XG4gICAgICBdXG4gICAgfVxuXG4gICAgZGlzcGF0Y2godXBkYXRlU2Vuc29yQmluZGluZ3Moe1xuICAgICAgbGF5ZXJJbmRleDogbGF5ZXIsXG4gICAgICBzZW5zb3JJbmRleCxcbiAgICAgIGJpbmRpbmdzOiB7XG4gICAgICAgIC4uLm9yaWdpbmFsQmluZGluZ3MsXG4gICAgICAgIHBhcmFtczogcmVwbGFjZUluZGV4KG9yaWdpbmFsQmluZGluZ3MucGFyYW1zLCBiaW5kSW5kZXgsIGJpbmQpXG4gICAgICB9XG4gICAgfSkpXG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxkaXYgc3R5bGU9e3sgbWFyZ2luOiAnMCAwIDMwcHgnIH19PlxuICAgICAgPGgzPlNlbnNvciBiaW5kaW5nczwvaDM+XG4gICAgICA8ZGl2IHN0eWxlPXt7XG4gICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgZmxleERpcmVjdGlvbjogJ3JvdycsXG4gICAgICAgIGdhcDogJzI1cHgnXG4gICAgICB9fT5cbiAgICAgICAge3NlbnNvcnMubWFwKChzZW5zb3IsIGkpID0+IHtcbiAgICAgICAgICBjb25zdCBsYWJlbFRleHQgPSBzZW5zb3IubGFiZWwgfHwgc2Vuc29yLmlkZW50aWZpZXJcbiAgICAgICAgICBjb25zdCBbaW5jcmVtZW50LCBkZWNyZW1lbnRdID0gc2Vuc29yQmluZGluZ3NbaV0/LnBhcmFtcyB8fCBbXVxuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8ZGl2IGtleT17aX0gc3R5bGU9e3sgZGlzcGxheTogJ2Jsb2NrJyB9fT5cbiAgICAgICAgICAgICAgPGxhYmVsIHN0eWxlPXt7IGZvbnRWYXJpYW50OiAnc21hbGwtY2FwcycsIGZvbnRTaXplOiAnOTAlJyB9fT5cbiAgICAgICAgICAgICAgICA8Y29kZT57bGFiZWxUZXh0fTwvY29kZT5cbiAgICAgICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICAgICAgPGRpdiBzdHlsZT17e1xuICAgICAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgICAgICBmbGV4RGlyZWN0aW9uOiAncm93JyxcbiAgICAgICAgICAgICAgICBnYXA6ICc1cHgnLFxuICAgICAgICAgICAgICAgIG1hcmdpblRvcDogJzIwcHgnXG4gICAgICAgICAgICAgIH19PlxuICAgICAgICAgICAgICAgIDxFbmNvZGVyQmluZGluZ1xuICAgICAgICAgICAgICAgICAgZGlyZWN0aW9uPVwiY2N3XCJcbiAgICAgICAgICAgICAgICAgIHBhcmFtcz17W2RlY3JlbWVudF19XG4gICAgICAgICAgICAgICAgICBvblVwZGF0ZT17YmluZCA9PiBoYW5kbGVVcGRhdGUoaSwgMSwgYmluZCl9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8RW5jb2RlckJpbmRpbmdcbiAgICAgICAgICAgICAgICAgIGRpcmVjdGlvbj1cImN3XCJcbiAgICAgICAgICAgICAgICAgIHBhcmFtcz17W2luY3JlbWVudF19XG4gICAgICAgICAgICAgICAgICBvblVwZGF0ZT17YmluZCA9PiBoYW5kbGVVcGRhdGUoaSwgMCwgYmluZCl9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICApXG4gICAgICAgIH0pfVxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgU2Vuc29yQmluZGluZ3NcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMl0udXNlWzFdIS4vYWN0aW9uLW1lbnUubW9kdWxlLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzJdLnVzZVsxXSEuL2FjdGlvbi1tZW51Lm1vZHVsZS5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlRWZmZWN0LCB1c2VSZWYsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnXG5cbmltcG9ydCBJY29uIGZyb20gJy4vSWNvbidcbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9hY3Rpb24tbWVudS5tb2R1bGUuY3NzJ1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBBY3Rpb25NZW51ICh7IGFjdGlvbnMgfSkge1xuICBjb25zdCBbaXNPcGVuLCBzZXRPcGVuXSA9IHVzZVN0YXRlKGZhbHNlKVxuICBjb25zdCBlbGVtZW50ID0gdXNlUmVmKClcblxuICBmdW5jdGlvbiBjbG9zZUFuZCAoYWN0aW9uKSB7XG4gICAgc2V0T3BlbihmYWxzZSlcbiAgICBhY3Rpb24oKVxuICB9XG5cbiAgY29uc3QgaGFuZGxlQ2xpY2sgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoZSkge1xuICAgIGlmIChlbGVtZW50LmN1cnJlbnQgJiYgIWVsZW1lbnQuY3VycmVudC5jb250YWlucyhlLnRhcmdldCkpIHtcbiAgICAgIHNldE9wZW4oZmFsc2UpXG4gICAgfVxuICB9LCBbZWxlbWVudCwgc2V0T3Blbl0pXG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgaGFuZGxlQ2xpY2spXG4gICAgcmV0dXJuICgpID0+IGRvY3VtZW50LmJvZHkucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBoYW5kbGVDbGljaylcbiAgfSwgW2hhbmRsZUNsaWNrXSlcblxuICByZXR1cm4gKFxuICAgIDxkaXYgcmVmPXtlbGVtZW50fSBjbGFzc05hbWU9e1tcbiAgICAgIHN0eWxlcy5tZW51LFxuICAgICAgaXNPcGVuICYmIHN0eWxlcy5vcGVuXG4gICAgXS5qb2luKCcgJyl9PlxuICAgICAgPHAgb25DbGljaz17KCkgPT4gc2V0T3BlbighaXNPcGVuKX0+XG4gICAgICAgIDxJY29uIG5hbWU9XCJlbGxpcHNpc1wiIC8+XG4gICAgICA8L3A+XG4gICAgICA8dWw+XG4gICAgICAgIHthY3Rpb25zLm1hcCgoYWN0aW9uLCBpKSA9PiAoXG4gICAgICAgICAgPGxpXG4gICAgICAgICAgICBrZXk9e2l9XG4gICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBjbG9zZUFuZChhY3Rpb24uY2FsbGJhY2spfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHthY3Rpb24uY29udGVudH1cbiAgICAgICAgICA8L2xpPlxuICAgICAgICApKX1cbiAgICAgIDwvdWw+XG4gICAgPC9kaXY+XG4gIClcbn1cblxuQWN0aW9uTWVudS5wcm9wVHlwZXMgPSB7XG4gIGFjdGlvbnM6IFByb3BUeXBlcy5hcnJheU9mKFxuICAgIFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICBjYWxsYmFjazogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICAgIGNvbnRlbnQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xuICAgICAgICBQcm9wVHlwZXMubm9kZSxcbiAgICAgICAgUHJvcFR5cGVzLnN0cmluZ1xuICAgICAgXSkuaXNSZXF1aXJlZFxuICAgIH0pXG4gICkuaXNSZXF1aXJlZFxufVxuIiwiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJ1xuaW1wb3J0IHsgdXNlTWVtbyB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgdXNlRGlzcGF0Y2ggfSBmcm9tICdyZWFjdC1yZWR1eCdcblxuaW1wb3J0IHtcbiAgcmViaW5kVHJhbnNwYXJlbnRUb0tleVByZXNzLFxuICByZWJpbmRUcmFuc3BhcmVudFRvTm9uZSxcbiAgcmViaW5kTm9uZVRvS2V5cHJlc3MsXG4gIHJlYmluZE5vbmVUb1RyYW5zcGFyZW50LFxuICByZWJpbmRFbXB0eUtleXByZXNzVG9UcmFuc3BhcmVudCxcbiAgcmViaW5kRW1wdHlLZXlwcmVzc1RvTm9uZVxufSBmcm9tICcuL2xheWVyc1NsaWNlJ1xuaW1wb3J0IEFjdGlvbk1lbnUgZnJvbSAnLi4vLi4vQ29tbW9uL0FjdGlvbk1lbnUnXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIExheWVyQWN0aW9uc01lbnUgKHsgYWN0aXZlTGF5ZXIsIGFkZGl0aW9uYWxBY3Rpb25zID0gW10gfSkge1xuICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKClcbiAgY29uc3QgYWN0aW9ucyA9IHVzZU1lbW8oKCkgPT4gKHtcbiAgICB0cmFuc3BhcmVudFRvS2V5cHJlc3M6ICgpID0+IGRpc3BhdGNoKHJlYmluZFRyYW5zcGFyZW50VG9LZXlQcmVzcyh7IGxheWVySW5kZXg6IGFjdGl2ZUxheWVyIH0pKSxcbiAgICB0cmFuc3BhcmVudFRvTm9uZTogKCkgPT4gZGlzcGF0Y2gocmViaW5kVHJhbnNwYXJlbnRUb05vbmUoeyBsYXllckluZGV4OiBhY3RpdmVMYXllciB9KSksXG4gICAgbm9uZVRvS2V5cHJlc3M6ICgpID0+IGRpc3BhdGNoKHJlYmluZE5vbmVUb0tleXByZXNzKHsgbGF5ZXJJbmRleDogYWN0aXZlTGF5ZXIgfSkpLFxuICAgIG5vbmVUb1RyYW5zcGFyZW50OiAoKSA9PiBkaXNwYXRjaChyZWJpbmROb25lVG9UcmFuc3BhcmVudCh7IGxheWVySW5kZXg6IGFjdGl2ZUxheWVyIH0pKSxcbiAgICBlbXB0eUtleXByZXNzVG9UcmFuc3BhcmVudDogKCkgPT4gZGlzcGF0Y2gocmViaW5kRW1wdHlLZXlwcmVzc1RvVHJhbnNwYXJlbnQoeyBsYXllckluZGV4OiBhY3RpdmVMYXllciB9KSksXG4gICAgZW1wdHlLZXlwcmVzc1RvTm9uZTogKCkgPT4gZGlzcGF0Y2gocmViaW5kRW1wdHlLZXlwcmVzc1RvTm9uZSh7IGxheWVySW5kZXg6IGFjdGl2ZUxheWVyIH0pKVxuICB9KSwgW2Rpc3BhdGNoLCBhY3RpdmVMYXllcl0pXG5cbiAgcmV0dXJuIChcbiAgICA8QWN0aW9uTWVudSBhY3Rpb25zPXtbXG4gICAgICAuLi5hZGRpdGlvbmFsQWN0aW9ucyxcbiAgICAgIHtcbiAgICAgICAgY2FsbGJhY2s6IGFjdGlvbnMudHJhbnNwYXJlbnRUb0tleXByZXNzLFxuICAgICAgICBjb250ZW50OiA8PkNvbnZlcnQgPGNvZGU+JnRyYW5zPC9jb2RlPiB0byA8Y29kZT4ma3A8L2NvZGU+PC8+XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBjYWxsYmFjazogYWN0aW9ucy50cmFuc3BhcmVudFRvTm9uZSxcbiAgICAgICAgY29udGVudDogPD5Db252ZXJ0IDxjb2RlPiZ0cmFuczwvY29kZT4gdG8gPGNvZGU+Jm5vbmU8L2NvZGU+PC8+XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBjYWxsYmFjazogYWN0aW9ucy5ub25lVG9LZXlwcmVzcyxcbiAgICAgICAgY29udGVudDogPD5Db252ZXJ0IDxjb2RlPiZub25lPC9jb2RlPiB0byA8Y29kZT4ma3A8L2NvZGU+PC8+XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBjYWxsYmFjazogYWN0aW9ucy5ub25lVG9UcmFuc3BhcmVudCxcbiAgICAgICAgY29udGVudDogPD5Db252ZXJ0IDxjb2RlPiZub25lPC9jb2RlPiB0byA8Y29kZT4mdHJhbnM8L2NvZGU+PC8+XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBjYWxsYmFjazogYWN0aW9ucy5lbXB0eUtleXByZXNzVG9UcmFuc3BhcmVudCxcbiAgICAgICAgY29udGVudDogPD5Db252ZXJ0IDxjb2RlPiZrcCDiprg8L2NvZGU+IHRvIDxjb2RlPiZ0cmFuczwvY29kZT48Lz5cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGNhbGxiYWNrOiBhY3Rpb25zLmVtcHR5S2V5cHJlc3NUb05vbmUsXG4gICAgICAgIGNvbnRlbnQ6IDw+Q29udmVydCA8Y29kZT4ma3Ag4qa4PC9jb2RlPiB0byA8Y29kZT4mbm9uZTwvY29kZT48Lz5cbiAgICAgIH1cbiAgICBdfSAvPlxuICApXG59XG5cbkxheWVyQWN0aW9uc01lbnUucHJvcFR5cGVzID0ge1xuICBhY3RpdmVMYXllcjogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxuICBhZGRpdGlvbmFsQWN0aW9uczogUHJvcFR5cGVzLmFycmF5T2YoXG4gICAgUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgIGNhbGxiYWNrOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgICAgY29udGVudDogUHJvcFR5cGVzLm9uZU9mVHlwZShbXG4gICAgICAgIFByb3BUeXBlcy5ub2RlLFxuICAgICAgICBQcm9wVHlwZXMuc3RyaW5nXG4gICAgICBdKS5pc1JlcXVpcmVkXG4gICAgfSlcbiAgKVxufVxuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1syXS51c2VbMV0hLi9zdHlsZS5tb2R1bGUuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMl0udXNlWzFdIS4vc3R5bGUubW9kdWxlLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCBwaWNrIGZyb20gJ2xvZGFzaC9waWNrJ1xuaW1wb3J0IHsgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCdcbmltcG9ydCB7IHVzZURpc3BhdGNoLCB1c2VTZWxlY3RvciB9IGZyb20gJ3JlYWN0LXJlZHV4J1xuXG5pbXBvcnQgSW5wdXQgZnJvbSAnLi4vLi4vQ29tbW9uL0lucHV0J1xuaW1wb3J0IE1vZGFsIGZyb20gJy4uLy4uL0NvbW1vbi9Nb2RhbCdcbmltcG9ydCBEaWFsb2dCb3ggZnJvbSAnLi4vLi4vQ29tbW9uL0RpYWxvZ0JveCdcbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9zdHlsZS5tb2R1bGUuY3NzJ1xuaW1wb3J0IHsgdmFsaWRhdGVEZXZpY2V0cmVlTm9kZU5hbWUgfSBmcm9tICcuLi9Db21tb24vRGV2aWNldHJlZS92YWxpZGF0b3JzJ1xuaW1wb3J0IEFjdGlvbkJ1dHRvbiBmcm9tICcuLi8uLi9Db21tb24vQWN0aW9uQnV0dG9uJ1xuaW1wb3J0IHsgc2VsZWN0TGF5ZXJzLCB1cGRhdGVMYXllck1ldGFkYXRhIH0gZnJvbSAnLi9sYXllcnNTbGljZSdcblxuZnVuY3Rpb24gQ29uZmlnTW9kYWwgKHsgYWN0aXZlTGF5ZXIsIG9uQ2xvc2UgfSkge1xuICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKClcbiAgY29uc3QgbGF5ZXJzID0gdXNlU2VsZWN0b3Ioc2VsZWN0TGF5ZXJzKVxuICBjb25zdCBsYXllciA9IGxheWVyc1thY3RpdmVMYXllcl1cblxuICBjb25zdCBbcGVuZGluZywgc2V0UGVuZGluZ10gPSB1c2VTdGF0ZShwaWNrKGxheWVyLCBbJ25hbWUnLCAnbGFiZWwnXSkpXG5cbiAgZnVuY3Rpb24gaGFuZGxlQ29uZmlybSAoKSB7XG4gICAgZGlzcGF0Y2godXBkYXRlTGF5ZXJNZXRhZGF0YSh7IGxheWVySW5kZXg6IGFjdGl2ZUxheWVyLCAuLi5wZW5kaW5nIH0pKVxuICAgIG9uQ2xvc2UoKVxuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8TW9kYWwgb25EaXNtaXNzPXtvbkNsb3NlfT5cbiAgICAgIDxEaWFsb2dCb3ggZGlzbWlzc1RleHQ9XCJcIj5cbiAgICAgICAgPGgyPkN1c3RvbWl6ZSBMYXllciA8Y29kZT57bGF5ZXIubmFtZX08L2NvZGU+PC9oMj5cbiAgICAgICAgPGRpdj5cblxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMuZmllbGR9PlxuICAgICAgICAgICAgPGxhYmVsIGh0bWxGb3I9XCJjdXN0b21pemUtbGF5ZXItbmFtZVwiPlxuICAgICAgICAgICAgICBOYW1lXG4gICAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgICAgPElucHV0XG4gICAgICAgICAgICAgIGlkPVwiY3VzdG9taXplLWxheWVyLW5hbWVcIlxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIkRlZmF1bHRcIlxuICAgICAgICAgICAgICB2YWx1ZT17cGVuZGluZy5uYW1lfVxuICAgICAgICAgICAgICB2YWxpZGF0b3I9e3ZhbGlkYXRlRGV2aWNldHJlZU5vZGVOYW1lfVxuICAgICAgICAgICAgICBvbkNoYW5nZT17ZXZlbnQgPT4gKFxuICAgICAgICAgICAgICAgIHNldFBlbmRpbmcoc3RhdGUgPT4gKHtcbiAgICAgICAgICAgICAgICAgIC4uLnN0YXRlLFxuICAgICAgICAgICAgICAgICAgbmFtZTogZXZlbnQudGFyZ2V0LnZhbHVlXG4gICAgICAgICAgICAgICAgfSkpXG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5maWVsZH0+XG4gICAgICAgICAgICA8bGFiZWwgaHRtbEZvcj1cImN1c3RvbWl6ZS1sYXllci1sYWJlbFwiPlxuICAgICAgICAgICAgICBMYWJlbFxuICAgICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgICBpZD1cImN1c3RvbWl6ZS1sYXllci1sYWJlbFwiXG4gICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiRGVmYXVsdFwiXG4gICAgICAgICAgICAgIHZhbHVlPXtwZW5kaW5nLmxhYmVsfVxuICAgICAgICAgICAgICBvbkNoYW5nZT17ZXZlbnQgPT4gKFxuICAgICAgICAgICAgICAgIHNldFBlbmRpbmcoc3RhdGUgPT4gKHtcbiAgICAgICAgICAgICAgICAgIC4uLnN0YXRlLFxuICAgICAgICAgICAgICAgICAgbGFiZWw6IGV2ZW50LnRhcmdldC52YWx1ZVxuICAgICAgICAgICAgICAgIH0pKVxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBzdHlsZT17eyB0ZXh0QWxpZ246ICdjZW50ZXInLCBnYXA6ICc1cHgnIH19PlxuICAgICAgICAgIDxBY3Rpb25CdXR0b24gb25DbGljaz17aGFuZGxlQ29uZmlybX0+T0s8L0FjdGlvbkJ1dHRvbj5cbiAgICAgICAgICA8QWN0aW9uQnV0dG9uIG9uQ2xpY2s9e29uQ2xvc2V9IHNlY29uZGFyeT5DYW5jZWw8L0FjdGlvbkJ1dHRvbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L0RpYWxvZ0JveD5cbiAgICA8L01vZGFsPlxuICApXG59XG5cbmV4cG9ydCBkZWZhdWx0IENvbmZpZ01vZGFsXG4iLCJpbXBvcnQgeyB1c2VDb250ZXh0IH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgeyB1c2VEaXNwYXRjaCB9IGZyb20gJ3JlYWN0LXJlZHV4J1xuXG5pbXBvcnQgeyBjcmVhdGVMYXllciB9IGZyb20gJy4vbGF5ZXJzU2xpY2UnXG5pbXBvcnQgQWN0aW9uQnV0dG9uIGZyb20gJy4uLy4uL0NvbW1vbi9BY3Rpb25CdXR0b24nXG5pbXBvcnQgeyBMYXlvdXRDb250ZXh0IH0gZnJvbSAnLi4vLi4vQ29udGV4dHMvTGF5b3V0J1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBQcm9tcHRGb3JGaXJzdExheWVyICgpIHtcbiAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpXG4gIGNvbnN0IHsgYmluZGluZ0NvdW50IH0gPSB1c2VDb250ZXh0KExheW91dENvbnRleHQpXG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IHN0eWxlPXt7IHRleHRBbGlnbjogJ2NlbnRlcicgfX0+XG4gICAgICA8aDM+Tm8ga2V5bWFwIGxheWVycyBkZWZpbmVkPC9oMz5cbiAgICAgIDxBY3Rpb25CdXR0b24gb25DbGljaz17KCkgPT4gZGlzcGF0Y2goY3JlYXRlTGF5ZXIoeyBiaW5kaW5nQ291bnQgfSkpfT5cbiAgICAgICAgQWRkIGxheWVyXG4gICAgICA8L0FjdGlvbkJ1dHRvbj5cbiAgICA8L2Rpdj5cbiAgKVxufVxuIiwiaW1wb3J0IHsgdXNlQ2FsbGJhY2sgfSBmcm9tICdyZWFjdCdcbmltcG9ydCB7IHVzZURpc3BhdGNoLCB1c2VTZWxlY3RvciB9IGZyb20gJ3JlYWN0LXJlZHV4J1xuaW1wb3J0IEtleWJvYXJkTGF5b3V0IGZyb20gJy4uL0tleWJvYXJkTGF5b3V0J1xuaW1wb3J0IEtleSBmcm9tICcuLi9LZXlzL0tleSdcbmltcG9ydCB7IHNlbGVjdExheWVycywgdXBkYXRlS2V5QmluZGluZyB9IGZyb20gJy4vbGF5ZXJzU2xpY2UnXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIExheWVyQmluZGluZ3MgKHsgbGF5b3V0LCBhY3RpdmVMYXllciB9KSB7XG4gIGNvbnN0IGRpc3BhdGNoID0gdXNlRGlzcGF0Y2goKVxuICBjb25zdCBsYXllcnMgPSB1c2VTZWxlY3RvcihzZWxlY3RMYXllcnMpXG4gIGNvbnN0IGxheWVyID0gbGF5ZXJzW2FjdGl2ZUxheWVyXVxuXG4gIGNvbnN0IGhhbmRsZVVwZGF0ZUJpbmQgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoYmluZEluZGV4LCBiaW5kaW5nKSB7XG4gICAgZGlzcGF0Y2godXBkYXRlS2V5QmluZGluZyh7IGxheWVySW5kZXg6IGFjdGl2ZUxheWVyLCBiaW5kSW5kZXgsIGJpbmRpbmcgfSkpXG4gIH0sIFtkaXNwYXRjaCwgYWN0aXZlTGF5ZXJdKVxuXG4gIHJldHVybiAoXG4gICAgPEtleWJvYXJkTGF5b3V0XG4gICAgICBsYXlvdXQ9e2xheW91dH1cbiAgICAgIGJpbmRpbmdzPXtsYXllci5iaW5kaW5nc31cbiAgICAgIHJlbmRlcktleT17KHsgaW5kZXgsIGtleUxheW91dCB9KSA9PiBsYXllci5iaW5kaW5nc1tpbmRleF0gJiYgKFxuICAgICAgICA8S2V5XG4gICAgICAgICAgbGFiZWw9e2tleUxheW91dC5sYWJlbH1cbiAgICAgICAgICB2YWx1ZT17bGF5ZXIuYmluZGluZ3NbaW5kZXhdPy52YWx1ZX1cbiAgICAgICAgICBwYXJhbXM9e2xheWVyLmJpbmRpbmdzW2luZGV4XT8ucGFyYW1zfVxuICAgICAgICAgIG9uVXBkYXRlPXtiaW5kID0+IGhhbmRsZVVwZGF0ZUJpbmQoaW5kZXgsIGJpbmQpfVxuICAgICAgICAvPlxuICAgICAgKX1cbiAgICAvPlxuICApXG59XG4iLCJpbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlRWZmZWN0LCB1c2VSZWR1Y2VyIH0gZnJvbSAncmVhY3QnXG5cbmNvbnN0IElOSVRJQUxfU1RBVEUgPSB7XG4gIGtleXNIZWxkOiBbXSxcbiAga2V5c0hlbGRCZWZvcmVMYXN0UmVsZWFzZTogW11cbn1cblxuZnVuY3Rpb24gcmVkdWNlS2V5RG93biAoc3RhdGUsIGFjdGlvbikge1xuICByZXR1cm4ge1xuICAgIGtleXNIZWxkOiBbLi4uc3RhdGUua2V5c0hlbGQsIGFjdGlvbi5ldmVudC5rZXldLFxuICAgIGtleXNIZWxkQmVmb3JlTGFzdFJlbGVhc2U6IFtdXG4gIH1cbn1cblxuZnVuY3Rpb24gcmVkdWNlS2V5VXAgKHN0YXRlLCBhY3Rpb24pIHtcbiAgY29uc3Qga2V5c0hlbGQgPSBzdGF0ZS5rZXlzSGVsZC5maWx0ZXIoa2V5ID0+IGtleSAhPT0gYWN0aW9uLmV2ZW50LmtleSlcbiAgcmV0dXJuIHtcbiAgICBrZXlzSGVsZDogW10sXG4gICAga2V5c0hlbGRCZWZvcmVMYXN0UmVsZWFzZToga2V5c0hlbGRcbiAgfVxufVxuXG5mdW5jdGlvbiB1c2VLZXlTdGF0ZSAoKSB7XG4gIHJldHVybiB1c2VSZWR1Y2VyKChzdGF0ZSwgYWN0aW9uKSA9PiB7XG4gICAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgICAgY2FzZSAnS0VZX0RPV04nOlxuICAgICAgICByZXR1cm4gcmVkdWNlS2V5RG93bihzdGF0ZSwgYWN0aW9uKVxuXG4gICAgICBjYXNlICdLRVlfVVAnOlxuICAgICAgICByZXR1cm4gcmVkdWNlS2V5VXAoc3RhdGUsIGFjdGlvbilcblxuICAgICAgY2FzZSAnUkVTRVQnOlxuICAgICAgICByZXR1cm4gSU5JVElBTF9TVEFURVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gc3RhdGVcbiAgICB9XG4gIH0sIElOSVRJQUxfU1RBVEUpXG59XG5cbi8qKlxuICogSGFuZGxlIGtleWRvd24va2V5dXAgZXZlbnRzXG4gKlxuICogVGhpcyB0YWtlcyBjYXJlIHRvIGF2b2lkIGZpcmluZyBhZ2FpbiB1cG9uIHJlbGVhc2Ugb2YgbW9kaWZpZXJzIGFmdGVyIHRoZVxuICogbW9kaWZpZWQga2V5IGhhcyBhbHJlYWR5IGJlZW4gZmlyZWQuXG4gKlxuICogQHBhcmFtIHtCb29sZWFufSBpc0FjdGl2ZSAtIHVzZSBmYWxzZSB0byBkZWFjdGl2YXRlIGV2ZW50c1xuICogQHBhcmFtIHtGdW5jdGlvbn0gb25LZXlQcmVzcyAtIGhhbmRsZXIgZm9yIGZpbHRlcmVkIGtleSBldmVudHNcbiAqIEByZXR1cm5zIG51bGxcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlS2V5SGFuZGxlciAoaXNBY3RpdmUsIG9uS2V5UHJlc3MpIHtcbiAgY29uc3QgW3N0YXRlLCBkaXNwYXRjaF0gPSB1c2VLZXlTdGF0ZSgpXG4gIGNvbnN0IGhhbmRsZUtleURvd24gPSB1c2VDYWxsYmFjaygoZXZlbnQpID0+IHtcbiAgICBpZiAoZXZlbnQucmVwZWF0KSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgZGlzcGF0Y2goeyB0eXBlOiAnS0VZX0RPV04nLCBldmVudCB9KVxuICB9LCBbZGlzcGF0Y2hdKVxuXG4gIGNvbnN0IGhhbmRsZUtleVVwID0gdXNlQ2FsbGJhY2soKGV2ZW50KSA9PiB7XG4gICAgaWYgKHN0YXRlLmtleXNIZWxkQmVmb3JlTGFzdFJlbGVhc2UuaW5jbHVkZXMoZXZlbnQua2V5KSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgIG9uS2V5UHJlc3MoZXZlbnQpXG4gICAgZGlzcGF0Y2goeyB0eXBlOiAnS0VZX1VQJywgZXZlbnQgfSlcbiAgfSwgW3N0YXRlLmtleXNIZWxkQmVmb3JlTGFzdFJlbGVhc2UsIG9uS2V5UHJlc3MsIGRpc3BhdGNoXSlcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICghaXNBY3RpdmUpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGhhbmRsZUtleURvd24pXG4gICAgZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIGhhbmRsZUtleVVwKVxuXG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGhhbmRsZUtleURvd24pXG4gICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleXVwJywgaGFuZGxlS2V5VXApXG4gICAgfVxuICB9LCBbaXNBY3RpdmUsIGhhbmRsZUtleURvd24sIGhhbmRsZUtleVVwXSlcbn1cbiIsImltcG9ydCB7IGNvbXBhY3QgfSBmcm9tICdsb2Rhc2gnXG5pbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCdcbmltcG9ydCB7IHVzZURpc3BhdGNoIH0gZnJvbSAncmVhY3QtcmVkdXgnXG5pbXBvcnQgeyBtYXBDaGFyYWN0ZXIgfSBmcm9tICd6bWstZGF0YS9rZXljb2RlLW1hcHBpbmdzJ1xuXG5pbXBvcnQgeyB1cGRhdGVLZXlCaW5kaW5nIH0gZnJvbSAnLi9sYXllcnNTbGljZSdcbmltcG9ydCB1c2VLZXlIYW5kbGVyIGZyb20gJy4vdXNlLWtleS1oYW5kbGVyJ1xuXG5jb25zdCBtYXBwaW5ncyA9IHtcbiAgQWx0OiAnQUxUJyxcbiAgQ29udHJvbDogJ0NUUkwnLFxuICBTaGlmdDogJ1NIRlQnLFxuICBNZXRhOiAnR1VJJyxcbiAgQXJyb3dVcDogJ1VQJyxcbiAgQXJyb3dEb3duOiAnRE9XTicsXG4gIEFycm93TGVmdDogJ0xFRlQnLFxuICBBcnJvd1JpZ2h0OiAnUklHSFQnLFxuICBFc2NhcGU6ICdFU0MnLFxuICBUYWI6ICdUQUInLFxuICBFbnRlcjogJ1JFVCcsXG4gIEhvbWU6ICdIT01FJyxcbiAgRW5kOiAnRU5EJyxcbiAgUGFnZURvd246ICdQR19ETicsXG4gIFBhZ2VVcDogJ1BHX1VQJyxcbiAgQmFja3NwYWNlOiAnQlNQQycsXG4gIERlbGV0ZTogJ0RFTCdcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplS2V5IChldmVudCkge1xuICBjb25zdCBtYXBwZWQgPSBtYXBwaW5nc1tldmVudC5rZXldXG4gIGNvbnN0IHByZWZpeCA9IGdldFNpZGVQcmVmaXgoZXZlbnQpXG5cbiAgaWYgKCFtYXBwZWQpIHtcbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB2YWx1ZTogJyZrcCcsXG4gICAgcGFyYW1zOiBbe1xuICAgICAgdmFsdWU6IHByZWZpeCArIG1hcHBlZCxcbiAgICAgIHBhcmFtczogW11cbiAgICB9XVxuICB9XG59XG5cbmZ1bmN0aW9uIGdldFNpZGVQcmVmaXggKGV2ZW50KSB7XG4gIHN3aXRjaCAoZXZlbnQubG9jYXRpb24pIHtcbiAgICBjYXNlIDE6XG4gICAgICByZXR1cm4gJ0wnXG4gICAgY2FzZSAyOlxuICAgICAgcmV0dXJuICdSJ1xuICAgIGNhc2UgMDpcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuICcnXG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0TW9kaWZpZXJzIChldmVudCkge1xuICByZXR1cm4gY29tcGFjdChbXG4gICAgZXZlbnQuYWx0S2V5ICYmICdMQScsXG4gICAgZXZlbnQuY3RybEtleSAmJiAnTEMnLFxuICAgIGV2ZW50Lm1ldGFLZXkgJiYgJ0xHJyxcbiAgICBldmVudC5zaGlmdEtleSAmJiAnTFMnXG4gIF0pXG59XG5cbmZ1bmN0aW9uIGdldEJpbmRGcm9tS2V5IChldmVudCkge1xuICBjb25zdCBhcHBsaWVkTW9kaWZpZXJzID0gZ2V0TW9kaWZpZXJzKGV2ZW50KVxuICBjb25zdCBtYXBwZWQgPSAoXG4gICAgbWFwQ2hhcmFjdGVyKGV2ZW50LmtleS50b0xvd2VyQ2FzZSgpKSB8fFxuICAgIG5vcm1hbGl6ZUtleShldmVudClcbiAgKVxuXG4gIGlmICghbWFwcGVkKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICByZXR1cm4ge1xuICAgIHZhbHVlOiBtYXBwZWQudmFsdWUsXG4gICAgcGFyYW1zOiBhcHBsaWVkTW9kaWZpZXJzLnJlZHVjZSgocGFyYW1zLCBtb2RpZmllcikgPT4ge1xuICAgICAgcmV0dXJuIFt7IHZhbHVlOiBtb2RpZmllciwgcGFyYW1zIH1dXG4gICAgfSwgbWFwcGVkLnBhcmFtcylcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdXNlUXVpY2tBc3NpZ25tZW50IChsYXllckluZGV4LCBsYXlvdXQsIGRlZmF1bHRTdGFydCA9IGZhbHNlKSB7XG4gIGNvbnN0IGRpc3BhdGNoID0gdXNlRGlzcGF0Y2goKVxuICBjb25zdCBbaXNBY3RpdmUsIHNldElzQWN0aXZlXSA9IHVzZVN0YXRlKGRlZmF1bHRTdGFydClcbiAgY29uc3QgW2JpbmRJbmRleCwgc2V0QmluZEluZGV4XSA9IHVzZVN0YXRlKDApXG5cbiAgY29uc3QgbmV4dEJpbmQgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgaWYgKGJpbmRJbmRleCA9PT0gbGF5b3V0Lmxlbmd0aCAtIDEpIHtcbiAgICAgIHNldEJpbmRJbmRleCgwKVxuICAgICAgc2V0SXNBY3RpdmUoZmFsc2UpXG4gICAgfSBlbHNlIHtcbiAgICAgIHNldEJpbmRJbmRleChiaW5kSW5kZXggKyAxKVxuICAgIH1cbiAgfSwgW2JpbmRJbmRleCwgc2V0QmluZEluZGV4LCBsYXlvdXQubGVuZ3RoLCBzZXRJc0FjdGl2ZV0pXG5cbiAgY29uc3QgaGFuZGxlS2V5UHJlc3MgPSB1c2VDYWxsYmFjayhldmVudCA9PiB7XG4gICAgY29uc3QgYmluZGluZyA9IGdldEJpbmRGcm9tS2V5KGV2ZW50KVxuXG4gICAgaWYgKGJpbmRpbmcpIHtcbiAgICAgIGRpc3BhdGNoKHVwZGF0ZUtleUJpbmRpbmcoe1xuICAgICAgICBsYXllckluZGV4LFxuICAgICAgICBiaW5kSW5kZXgsXG4gICAgICAgIGJpbmRpbmdcbiAgICAgIH0pKVxuXG4gICAgICBuZXh0QmluZCgpXG4gICAgfVxuICB9LCBbbGF5ZXJJbmRleCwgYmluZEluZGV4LCBuZXh0QmluZCwgZGlzcGF0Y2hdKVxuXG4gIHVzZUtleUhhbmRsZXIoaXNBY3RpdmUsIGhhbmRsZUtleVByZXNzKVxuXG4gIGNvbnN0IHN0YXJ0UXVpY2tBc3NpZ25tZW50ID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIHNldElzQWN0aXZlKHRydWUpXG4gIH0sIFtzZXRJc0FjdGl2ZV0pXG5cbiAgY29uc3QgY2FuY2VsUXVpY2tBc3NpZ25tZW50ID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIHNldElzQWN0aXZlKGZhbHNlKVxuICB9LCBbc2V0SXNBY3RpdmVdKVxuXG4gIHJldHVybiBbXG4gICAgeyBpc0FjdGl2ZSwgYmluZEluZGV4IH0sXG4gICAgeyBzdGFydFF1aWNrQXNzaWdubWVudCwgY2FuY2VsUXVpY2tBc3NpZ25tZW50LCBzZXRCaW5kSW5kZXggfVxuICBdXG59XG4iLCJpbXBvcnQgY29tcGFjdCBmcm9tICdsb2Rhc2gvY29tcGFjdCdcbmltcG9ydCB7IHVzZUVmZmVjdCwgdXNlTWVtbyB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgdXNlU2VsZWN0b3IgfSBmcm9tICdyZWFjdC1yZWR1eCdcbmltcG9ydCBBY3Rpb25CdXR0b24gZnJvbSAnLi4vLi4vQ29tbW9uL0FjdGlvbkJ1dHRvbidcbmltcG9ydCBEaWFsb2dCb3ggZnJvbSAnLi4vLi4vQ29tbW9uL0RpYWxvZ0JveCdcblxuaW1wb3J0IE1vZGFsIGZyb20gJy4uLy4uL0NvbW1vbi9Nb2RhbCdcbmltcG9ydCBUaXAgZnJvbSAnLi4vLi4vQ29tbW9uL1RpcCdcbmltcG9ydCBLZXlib2FyZExheW91dCBmcm9tICcuLi9LZXlib2FyZExheW91dCdcbmltcG9ydCBLZXkgZnJvbSAnLi4vS2V5cy9LZXknXG5pbXBvcnQgeyBnZXRXcmFwcGVyU3R5bGUgfSBmcm9tICcuLi91dGlsJ1xuaW1wb3J0IHsgc2VsZWN0TGF5ZXJzIH0gZnJvbSAnLi9sYXllcnNTbGljZSdcbmltcG9ydCB7IHVzZVF1aWNrQXNzaWdubWVudCB9IGZyb20gJy4vcXVpY2stYXNzaWdubWVudCdcbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9zdHlsZS5tb2R1bGUuY3NzJ1xuXG5leHBvcnQgZnVuY3Rpb24gUXVpY2tBc3NpZ25tZW50TW9kYWwgKHsgbGF5b3V0LCBsYXllckluZGV4LCBvbkNsb3NlIH0pIHtcbiAgY29uc3QgbGF5ZXJzID0gdXNlU2VsZWN0b3Ioc2VsZWN0TGF5ZXJzKVxuICBjb25zdCBsYXllciA9IGxheWVyc1tsYXllckluZGV4XVxuICBjb25zdCBbc3RhdHVzLCBhY3Rpb25zXSA9IHVzZVF1aWNrQXNzaWdubWVudChsYXllckluZGV4LCBsYXlvdXQsIHRydWUpXG4gIGNvbnN0IHdyYXBwZXJTdHlsZSA9IHVzZU1lbW8oKCkgPT4gZ2V0V3JhcHBlclN0eWxlKGxheW91dCwge1xuICAgIG92ZXJyaWRlczogeyBtaW5XaWR0aDogJzQwMHB4JyB9XG4gIH0pLCBbbGF5b3V0XSlcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICghc3RhdHVzLmlzQWN0aXZlKSB7XG4gICAgICBvbkNsb3NlKClcbiAgICB9XG4gIH0sIFtzdGF0dXMuaXNBY3RpdmUsIG9uQ2xvc2VdKVxuXG4gIHJldHVybiAoXG4gICAgPE1vZGFsIG9uRGlzbWlzcz17b25DbG9zZX0+XG4gICAgICA8RGlhbG9nQm94IGNsYXNzZXM9e1tzdHlsZXMucXVpY2tBc3NpZ25EaWFsb2ddfSBkaXNtaXNzVGV4dD1cIlwiPlxuICAgICAgICA8aDI+UXVpY2stYXNzaWduIGxheWVyIGtleWJpbmRpbmdzPC9oMj5cbiAgICAgICAgPHA+XG4gICAgICAgICAgUHJlc3MgYSBrZXkgb24geW91ciBrZXlib2FyZCB0byBzZXQgYSA8Y29kZT4ma3A8L2NvZGU+IGJpbmRpbmcgYXQgdGhlXG4gICAgICAgICAgaGlnaGxpZ2h0ZWQgcG9zaXRpb24gaW4geW91ciBrZXltYXAuXG4gICAgICAgIDwvcD5cbiAgICAgICAgPGRpdiBzdHlsZT17d3JhcHBlclN0eWxlfT5cbiAgICAgICAgICA8S2V5Ym9hcmRMYXlvdXRcbiAgICAgICAgICAgIGxheW91dD17bGF5b3V0fVxuICAgICAgICAgICAgYmluZGluZ3M9e2xheWVyLmJpbmRpbmdzfVxuICAgICAgICAgICAgcmVuZGVyS2V5PXsoeyBpbmRleCwga2V5TGF5b3V0IH0pID0+IGxheWVyLmJpbmRpbmdzW2luZGV4XSAmJiAoXG4gICAgICAgICAgICAgIDxLZXlcbiAgICAgICAgICAgICAgICBsYWJlbD17a2V5TGF5b3V0LmxhYmVsfVxuICAgICAgICAgICAgICAgIGtleVdyYXBwZXJQcm9wcz17e1xuICAgICAgICAgICAgICAgICAgc2VsZWN0YWJsZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICBvbkNsaWNrOiAoKSA9PiBhY3Rpb25zLnNldEJpbmRJbmRleChpbmRleCksXG4gICAgICAgICAgICAgICAgICBjbGFzc05hbWU6IGNvbXBhY3QoW1xuICAgICAgICAgICAgICAgICAgICBzdHlsZXMucXVpY2tCaW5kS2V5LFxuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuYmluZEluZGV4ID09PSBpbmRleCAmJiBzdHlsZXMucXVpY2tCaW5kS2V5SGlnaGxpZ2h0XG4gICAgICAgICAgICAgICAgICBdKS5qb2luKCcgJylcbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgIHZhbHVlPXtsYXllci5iaW5kaW5nc1tpbmRleF0/LnZhbHVlfVxuICAgICAgICAgICAgICAgIHBhcmFtcz17bGF5ZXIuYmluZGluZ3NbaW5kZXhdPy5wYXJhbXN9XG4gICAgICAgICAgICAgICAgb25VcGRhdGU9e2JpbmQgPT4ge319XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICApfVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IHN0eWxlPXt7IHRleHRBbGlnbjogJ2NlbnRlcicgfX0+XG4gICAgICAgICAgPFRpcD5DbGljayBvbiBhIGRpZmZlcmVudCBrZXkgdG8ganVtcCBhaGVhZCBvciBjb3JyZWN0IGEgcHJldmlvdXMgYmluZGluZy48L1RpcD5cbiAgICAgICAgICA8cD5cbiAgICAgICAgICAgIDxBY3Rpb25CdXR0b24gb25DbGljaz17b25DbG9zZX0+RG9uZTwvQWN0aW9uQnV0dG9uPlxuICAgICAgICAgIDwvcD5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L0RpYWxvZ0JveD5cbiAgICA8L01vZGFsPlxuICApXG59XG4iLCJpbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlQ29udGV4dCwgdXNlTWVtbywgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCdcbmltcG9ydCB7IHVzZVNlbGVjdG9yIH0gZnJvbSAncmVhY3QtcmVkdXgnXG5cbmltcG9ydCBMYXllclNlbGVjdG9yIGZyb20gJy4vTGF5ZXJTZWxlY3RvcidcbmltcG9ydCBTZW5zb3JCaW5kaW5ncyBmcm9tICcuL1NlbnNvckJpbmRpbmdzJ1xuaW1wb3J0IExheWVyQWN0aW9uc01lbnUgZnJvbSAnLi9MYXllckFjdGlvbnNNZW51J1xuaW1wb3J0IHsgc2VsZWN0TGF5ZXJzIH0gZnJvbSAnLi9sYXllcnNTbGljZSdcbmltcG9ydCBDb25maWdNb2RhbCBmcm9tICcuL0NvbmZpZ01vZGFsJ1xuXG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vc3R5bGUubW9kdWxlLmNzcydcbmltcG9ydCBQcm9tcHRGb3JGaXJzdExheWVyIGZyb20gJy4vUHJvbXB0Rm9yRmlyc3RMYXllcidcbmltcG9ydCBMYXllckJpbmRpbmdzIGZyb20gJy4vTGF5ZXJCaW5kaW5ncydcbmltcG9ydCB7IFF1aWNrQXNzaWdubWVudE1vZGFsIH0gZnJvbSAnLi9RdWlja0Fzc2lnbk1vZGFsJ1xuaW1wb3J0IHsgTGF5b3V0Q29udGV4dCB9IGZyb20gJy4uLy4uL0NvbnRleHRzL0xheW91dCdcblxuY29uc3QgS2V5bWFwRWRpdG9yID0gKHsgc2Vuc29ycyB9KSA9PiB7XG4gIGNvbnN0IGxheWVycyA9IHVzZVNlbGVjdG9yKHNlbGVjdExheWVycylcbiAgY29uc3QgW2FjdGl2ZUxheWVyLCBzZXRBY3RpdmVMYXllcl0gPSB1c2VTdGF0ZSgwKVxuICBjb25zdCBbc2hvd0NvbmZpZywgc2V0U2hvd0NvbmZpZ10gPSB1c2VTdGF0ZShmYWxzZSlcbiAgY29uc3QgW3Nob3dRdWlja0Fzc2lnbk1vZGFsLCBzZXRTaG93UXVpY2tBc3NpZ25Nb2RhbF0gPSB1c2VTdGF0ZShmYWxzZSlcblxuICBjb25zdCBsYXllciA9IE1hdGgubWF4KDAsIE1hdGgubWluKGFjdGl2ZUxheWVyLCBsYXllcnMubGVuZ3RoIC0gMSkpXG4gIGNvbnN0IHsgbGF5b3V0LCB3cmFwcGVyU3R5bGUgfSA9IHVzZUNvbnRleHQoTGF5b3V0Q29udGV4dClcblxuICBjb25zdCBvcGVuQ29uZmlnID0gdXNlQ2FsbGJhY2soKCkgPT4gc2V0U2hvd0NvbmZpZyh0cnVlKSwgW3NldFNob3dDb25maWddKVxuICBjb25zdCBvcGVuUXVpY2tBc3NpZ24gPSB1c2VDYWxsYmFjaygoKSA9PiBzZXRTaG93UXVpY2tBc3NpZ25Nb2RhbCh0cnVlKSwgW3NldFNob3dRdWlja0Fzc2lnbk1vZGFsXSlcbiAgY29uc3QgY2xvc2VRdWlja0Fzc2lnbiA9IHVzZUNhbGxiYWNrKCgpID0+IHNldFNob3dRdWlja0Fzc2lnbk1vZGFsKGZhbHNlKSwgW3NldFNob3dRdWlja0Fzc2lnbk1vZGFsXSlcbiAgY29uc3QgYWRkaXRpb25hbEFjdGlvbnMgPSB1c2VNZW1vKCgpID0+IFtcbiAgICB7IGNhbGxiYWNrOiBvcGVuQ29uZmlnLCBjb250ZW50OiAnQ2hhbmdlIENvbmZpZ3VyYXRpb24nIH0sXG4gICAgeyBjYWxsYmFjazogb3BlblF1aWNrQXNzaWduLCBjb250ZW50OiA8PlF1aWNrIDxjb2RlPiZrcDwvY29kZT4gQXNzaWdubWVudDwvPiB9XG4gIF0sIFtvcGVuQ29uZmlnLCBvcGVuUXVpY2tBc3NpZ25dKVxuXG4gIGlmIChsYXllcnMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIDxQcm9tcHRGb3JGaXJzdExheWVyIC8+XG4gIH1cblxuICBjb25zdCB7IHdpZHRoLCBoZWlnaHQsIG1hcmdpbiwgcGFkZGluZyB9ID0gd3JhcHBlclN0eWxlXG5cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPExheWVyU2VsZWN0b3JcbiAgICAgICAgYWN0aXZlTGF5ZXI9e2xheWVyfVxuICAgICAgICBvblNlbGVjdD17c2V0QWN0aXZlTGF5ZXJ9XG4gICAgICAvPlxuICAgICAgPGRpdiBzdHlsZT17eyBtYXJnaW4sIHBhZGRpbmcsIHdpZHRoOiAnZml0LWNvbnRlbnQnIH19PlxuICAgICAgICA8ZGl2IHN0eWxlPXt7IHdpZHRoIH19PlxuICAgICAgICAgIDxoMyBzdHlsZT17eyBwb3NpdGlvbjogJ3JlbGF0aXZlJyB9fT5cbiAgICAgICAgICAgIEtleSBCaW5kaW5ncyB7KFxuICAgICAgICAgICAgICA8TGF5ZXJBY3Rpb25zTWVudVxuICAgICAgICAgICAgICAgIGFjdGl2ZUxheWVyPXthY3RpdmVMYXllcn1cbiAgICAgICAgICAgICAgICBhZGRpdGlvbmFsQWN0aW9ucz17YWRkaXRpb25hbEFjdGlvbnN9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICApfVxuICAgICAgICAgIDwvaDM+XG4gICAgICAgICAgPGRpdiBzdHlsZT17eyBoZWlnaHQgfX0+XG4gICAgICAgICAgICA8TGF5ZXJCaW5kaW5nc1xuICAgICAgICAgICAgICBsYXlvdXQ9e2xheW91dH1cbiAgICAgICAgICAgICAgYWN0aXZlTGF5ZXI9e2xheWVyfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICBjbGFzc05hbWU9e3N0eWxlcy5zZW5zb3JzfVxuICAgICAgICAgIGRhdGEtc2Vuc29yLWNvdW50PXtzZW5zb3JzLmxlbmd0aH1cbiAgICAgICAgICBzdHlsZT17e319XG4gICAgICAgID5cbiAgICAgICAgICA8U2Vuc29yQmluZGluZ3NcbiAgICAgICAgICAgIHNlbnNvcnM9e3NlbnNvcnN9XG4gICAgICAgICAgICBsYXllcj17bGF5ZXJ9XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIHtzaG93Q29uZmlnICYmIChcbiAgICAgICAgPENvbmZpZ01vZGFsXG4gICAgICAgICAgYWN0aXZlTGF5ZXI9e2xheWVyfVxuICAgICAgICAgIG9uQ2xvc2U9eygpID0+IHNldFNob3dDb25maWcoZmFsc2UpfVxuICAgICAgICAvPlxuICAgICAgKX1cbiAgICAgIHtzaG93UXVpY2tBc3NpZ25Nb2RhbCAmJiAoXG4gICAgICAgIDxRdWlja0Fzc2lnbm1lbnRNb2RhbFxuICAgICAgICAgIGxheW91dD17bGF5b3V0fVxuICAgICAgICAgIGxheWVySW5kZXg9e2xheWVyfVxuICAgICAgICAgIG9uQ2xvc2U9e2Nsb3NlUXVpY2tBc3NpZ259XG4gICAgICAgIC8+XG4gICAgICApfVxuICAgIDwvPlxuICApXG59XG5cbmV4cG9ydCBkZWZhdWx0IEtleW1hcEVkaXRvclxuIiwiXG5leHBvcnQgZnVuY3Rpb24gaXNDb250cm9sQmluZGluZyAoYmluZCkge1xuICByZXR1cm4gW1xuICAgICcmbWFjcm9fdGFwJyxcbiAgICAnJm1hY3JvX3ByZXNzJyxcbiAgICAnJm1hY3JvX3JlbGVhc2UnLFxuICAgICcmbWFjcm9fdGFwX3RpbWUnLFxuICAgICcmbWFjcm9fd2FpdF90aW1lJyxcbiAgICAnJm1hY3JvX3BhdXNlX2Zvcl9yZWxlYXNlJ1xuICBdLmluY2x1ZGVzKGJpbmQudmFsdWUpXG59XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzJdLnVzZVsxXSEuL3N0eWxlcy5tb2R1bGUuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMl0udXNlWzFdIS4vc3R5bGVzLm1vZHVsZS5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzJdLnVzZVsxXSEuL2RyYWctYW5kLWRyb3AubW9kdWxlLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzJdLnVzZVsxXSEuL2RyYWctYW5kLWRyb3AubW9kdWxlLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCBpc0VxdWFsIGZyb20gJ2xvZGFzaC9pc0VxdWFsJ1xuaW1wb3J0IHsgRnJhZ21lbnQsIHVzZU1lbW8sIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnXG5cbmltcG9ydCB7IGlzQ29udHJvbEJpbmRpbmcgfSBmcm9tICcuL3V0aWwnXG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vZHJhZy1hbmQtZHJvcC5tb2R1bGUuY3NzJ1xuXG5leHBvcnQgZnVuY3Rpb24gZ3JvdXBJbnRvUm93cyAoYmluZGluZ3MpIHtcbiAgcmV0dXJuIGJpbmRpbmdzLnJlZHVjZSgocm93cywgYmluZCwgaSkgPT4ge1xuICAgIGNvbnN0IGFkZFJvdyA9ICgpID0+IHJvd3MucHVzaChbXSlcbiAgICBjb25zdCBhZGRUb1JvdyA9ICgpID0+IHJvd3MuYXQoLTEpLnB1c2goeyAuLi5iaW5kLCBpbmRleDogaSB9KVxuICAgIGNvbnN0IGlzUm93RW1wdHkgPSAoKSA9PiByb3dzLmF0KC0xKS5sZW5ndGggPT09IDBcbiAgICBjb25zdCBpc1Jvd0Z1bGwgPSAoKSA9PiAoXG4gICAgICAoIWlzUm93RW1wdHkoKSAmJiBpc0NvbnRyb2xCaW5kaW5nKHJvd3MuYXQoLTEpWzBdKSkgfHxcbiAgICAgIHJvd3MuYXQoLTEpLmxlbmd0aCA9PT0gNlxuICAgIClcblxuICAgIGlmIChpc0NvbnRyb2xCaW5kaW5nKGJpbmQpICYmICFpc1Jvd0VtcHR5KCkpIHtcbiAgICAgIGFkZFJvdygpXG4gICAgfSBlbHNlIGlmIChpc1Jvd0Z1bGwoKSkge1xuICAgICAgYWRkUm93KClcbiAgICB9XG5cbiAgICBhZGRUb1JvdygpXG5cbiAgICByZXR1cm4gcm93c1xuICB9LCBbW11dKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gRHJvcFpvbmVDb250YWluZXIgKHsgYmluZGluZ3MsIGNoaWxkcmVuLCBkcmFnZ2luZywgZHJhZ01vZGUsIC4uLnJlc3QgfSkge1xuICBjb25zdCBbY3VycmVudFRhcmdldCwgc2V0Q3VycmVudFRhcmdldF0gPSB1c2VTdGF0ZShbbnVsbCwgbnVsbF0pXG4gIGNvbnN0IGJpbmRpbmdSb3dzID0gdXNlTWVtbyhcbiAgICAoKSA9PiBncm91cEludG9Sb3dzKGJpbmRpbmdzKSxcbiAgICBbYmluZGluZ3NdXG4gIClcblxuICBmdW5jdGlvbiBoYW5kbGVEcmFnRW50ZXIgKHRhcmdldCkge1xuICAgIGNvbnNvbGUubG9nKCdlbnRlcicsIHRhcmdldClcbiAgICBzZXRDdXJyZW50VGFyZ2V0KCgpID0+IHRhcmdldClcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzQ3VycmVudFRhcmdldCAodGFyZ2V0KSB7XG4gICAgcmV0dXJuIGlzRXF1YWwoY3VycmVudFRhcmdldCwgdGFyZ2V0KVxuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlRHJhZ0xlYXZlICh0YXJnZXQpIHtcbiAgICBzZXRDdXJyZW50VGFyZ2V0KHN0YXRlID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKCdsZWF2aW5nJywgdGFyZ2V0LCAnY3VycmVudGx5IGluJywgc3RhdGUpXG4gICAgICByZXR1cm4gaXNFcXVhbChzdGF0ZSwgdGFyZ2V0KSA/IFtudWxsLCBudWxsXSA6IHN0YXRlXG4gICAgfSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZURyb3AgKCkge1xuICAgIGNvbnNvbGUubG9nKCdoYW5kbGVEcm9wJywgY3VycmVudFRhcmdldClcbiAgICBjb25zdCBbcm93LCBjb2wsIGhhbGZdID0gY3VycmVudFRhcmdldFxuICAgIGNvbnN0IHsgaW5kZXggfSA9IGJpbmRpbmdSb3dzW3Jvd11bY29sXVxuICAgIGNvbnN0IG5leHQgPSBpbmRleCA8IGJpbmRpbmdzLmxlbmd0aCAtIDFcbiAgICAgID8gaW5kZXggKyAxXG4gICAgICA6IC0xXG5cbiAgICByZXN0Lm9uRHJvcChoYWxmID09PSAxID8gbmV4dCA6IGluZGV4KVxuICB9XG5cbiAgcmV0dXJuIGRyYWdnaW5nICYmIChcbiAgICA8ZGl2IGNsYXNzTmFtZT17W1xuICAgICAgc3R5bGVzLmRyb3BUYXJnZXRzLFxuICAgICAgZHJhZ2dpbmcgPyBzdHlsZXMuZHJhZ2dpbmcgOiAnJyxcbiAgICAgIGRyYWdNb2RlID09PSAncm93JyA/IHN0eWxlcy5kcm9wUm93T25seSA6ICcnXG4gICAgXS5qb2luKCcgJyl9PlxuICAgICAge2JpbmRpbmdSb3dzLm1hcCgocm93LCBpKSA9PiAoXG4gICAgICAgIDxGcmFnbWVudCBrZXk9e2l9PlxuICAgICAgICAgIDxEcm9wWm9uZVJvd1xuICAgICAgICAgICAgcm93PXtyb3d9XG4gICAgICAgICAgICBpc0Ryb3BwaW5nPXtpc0N1cnJlbnRUYXJnZXQoW2ksIDAsIC0xXSl9XG4gICAgICAgICAgICBvbkRyYWdFbnRlcj17KCkgPT4gaGFuZGxlRHJhZ0VudGVyKFtpLCAwLCAtMV0pfVxuICAgICAgICAgICAgb25EcmFnTGVhdmU9eygpID0+IGhhbmRsZURyYWdMZWF2ZShbaSwgMCwgLTFdKX1cbiAgICAgICAgICAgIG9uRHJvcD17aGFuZGxlRHJvcH1cbiAgICAgICAgICAvPlxuICAgICAgICAgIHtyb3cubWFwKChiaW5kLCBqKSA9PiAoXG4gICAgICAgICAgICA8RnJhZ21lbnQga2V5PXtqfT5cbiAgICAgICAgICAgICAgPERyb3Bab25lQmVmb3JlXG4gICAgICAgICAgICAgICAgYmluZD17YmluZH1cbiAgICAgICAgICAgICAgICBpc0Ryb3BwaW5nPXtpc0N1cnJlbnRUYXJnZXQoW2ksIGosIDBdKX1cbiAgICAgICAgICAgICAgICBvbkRyYWdFbnRlcj17KCkgPT4gaGFuZGxlRHJhZ0VudGVyKFtpLCBqLCAwXSl9XG4gICAgICAgICAgICAgICAgb25EcmFnTGVhdmU9eygpID0+IGhhbmRsZURyYWdMZWF2ZShbaSwgaiwgMF0pfVxuICAgICAgICAgICAgICAgIG9uRHJvcD17aGFuZGxlRHJvcH1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPERyb3Bab25lQWZ0ZXJcbiAgICAgICAgICAgICAgICBiaW5kPXtiaW5kfVxuICAgICAgICAgICAgICAgIGlzRHJvcHBpbmc9e2lzQ3VycmVudFRhcmdldChbaSwgaiwgMV0pfVxuICAgICAgICAgICAgICAgIG9uRHJhZ0VudGVyPXsoKSA9PiBoYW5kbGVEcmFnRW50ZXIoW2ksIGosIDFdKX1cbiAgICAgICAgICAgICAgICBvbkRyYWdMZWF2ZT17KCkgPT4gaGFuZGxlRHJhZ0xlYXZlKFtpLCBqLCAxXSl9XG4gICAgICAgICAgICAgICAgb25Ecm9wPXtoYW5kbGVEcm9wfVxuICAgICAgICAgICAgICAgIGRhdGEtZXh0ZW5kPXtcbiAgICAgICAgICAgICAgICAgICFpc0NvbnRyb2xCaW5kaW5nKGJpbmQpICYmIGogPT09IHJvdy5sZW5ndGggLSAxXG4gICAgICAgICAgICAgICAgICAgID8gTWF0aC5tYXgoMCwgNSAtIGopXG4gICAgICAgICAgICAgICAgICAgIDogMFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvRnJhZ21lbnQ+XG4gICAgICAgICAgKSl9XG4gICAgICAgIDwvRnJhZ21lbnQ+XG4gICAgICApKX1cbiAgICAgIDxEcm9wWm9uZVJvd1xuICAgICAgICByb3c9e2JpbmRpbmdSb3dzLmxlbmd0aCAtIDF9XG4gICAgICAgIGlzRHJvcHBpbmc9e2lzQ3VycmVudFRhcmdldChbYmluZGluZ1Jvd3MubGVuZ3RoIC0gMSwgYmluZGluZ1Jvd3MuYXQoLTEpLmxlbmd0aCAtIDEsIDFdKX1cbiAgICAgICAgb25EcmFnRW50ZXI9eygpID0+IGhhbmRsZURyYWdFbnRlcihbYmluZGluZ1Jvd3MubGVuZ3RoIC0gMSwgYmluZGluZ1Jvd3MuYXQoLTEpLmxlbmd0aCAtIDEsIDFdKX1cbiAgICAgICAgb25EcmFnTGVhdmU9eygpID0+IGhhbmRsZURyYWdMZWF2ZShbYmluZGluZ1Jvd3MubGVuZ3RoIC0gMSwgYmluZGluZ1Jvd3MuYXQoLTEpLmxlbmd0aCAtIDEsIDFdKX1cbiAgICAgICAgb25Ecm9wPXtoYW5kbGVEcm9wfVxuICAgICAgLz5cbiAgICA8L2Rpdj5cbiAgKVxufVxuXG5mdW5jdGlvbiBEcm9wWm9uZSAoeyBpc0Ryb3BwaW5nLCBjb250cm9sID0gZmFsc2UsIGNsYXNzZXMgPSBbXSwgLi4ucmVzdCB9KSB7XG4gIHJldHVybiAoXG4gICAgPGRpdlxuICAgICAgZGF0YS1pcy1jb250cm9sPXtjb250cm9sfVxuICAgICAgY2xhc3NOYW1lPXtbXG4gICAgICAgIHN0eWxlcy5kcm9wVGFyZ2V0SGFsZixcbiAgICAgICAgaXNEcm9wcGluZyA/IHN0eWxlcy5kcm9wcGFibGUgOiAnJyxcbiAgICAgICAgLi4uY2xhc3Nlc1xuICAgICAgXS5qb2luKCcgJyl9XG4gICAgICB7Li4ucmVzdH1cbiAgICAvPlxuICApXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBEcm9wWm9uZUJlZm9yZSAoeyBiaW5kLCAuLi5yZXN0IH0pIHtcbiAgcmV0dXJuIChcbiAgICA8RHJvcFpvbmUgY29udHJvbD17aXNDb250cm9sQmluZGluZyhiaW5kKX0gey4uLnJlc3R9IC8+XG4gIClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIERyb3Bab25lQWZ0ZXIgKHsgYmluZCwgLi4ucmVzdCB9KSB7XG4gIHJldHVybiAoXG4gICAgPERyb3Bab25lIGNvbnRyb2w9e2lzQ29udHJvbEJpbmRpbmcoYmluZCl9IGNsYXNzZXM9e1tzdHlsZXMuc2Vjb25kSGFsZl19IHsuLi5yZXN0fSAvPlxuICApXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBEcm9wWm9uZVJvdyAoeyByb3csIGlzRHJvcHBpbmcsIC4uLnJlc3QgfSkge1xuICByZXR1cm4gKFxuICAgIDxkaXZcbiAgICAgIGRhdGEtZHJvcC1tb2RlPVwicm93XCJcbiAgICAgIGNsYXNzTmFtZT17W1xuICAgICAgICBzdHlsZXMuZHJvcFRhcmdldFJvdyxcbiAgICAgICAgaXNEcm9wcGluZyA/IHN0eWxlcy5kcm9wcGFibGUgOiAnJ1xuICAgICAgXS5qb2luKCcgJyl9XG4gICAgICB7Li4ucmVzdH1cbiAgICAvPlxuICApXG59XG4iLCJpbXBvcnQgeyBGcmFnbWVudCwgdXNlQ2FsbGJhY2ssIHVzZUNvbnRleHQsIHVzZU1lbW8sIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnXG5cbmltcG9ydCBNb2RhbCBmcm9tICcuLi8uLi9Db21tb24vTW9kYWwnXG5pbXBvcnQgRGlhbG9nQm94IGZyb20gJy4uLy4uL0NvbW1vbi9EaWFsb2dCb3gnXG5pbXBvcnQgS2V5V3JhcHBlciBmcm9tICcuLi9LZXlzL0tleVdyYXBwZXInXG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vc3R5bGVzLm1vZHVsZS5jc3MnXG5pbXBvcnQgeyBoeWRyYXRlVHJlZSB9IGZyb20gJy4uL0JpbmRpbmcvdXRpbCdcbmltcG9ydCB7IFNlYXJjaENvbnRleHQgfSBmcm9tICcuLi8uLi9wcm92aWRlcnMnXG5pbXBvcnQgS2V5Y29kZUJpbmROb2RlIGZyb20gJy4uLy4uL0VuaGFuY2VkUGlja2Vycy9LZXljb2RlL0tleWNvZGVCaW5kTm9kZSdcbmltcG9ydCBBY3Rpb25CdXR0b24gZnJvbSAnLi4vLi4vQ29tbW9uL0FjdGlvbkJ1dHRvbidcblxuY29uc3Qgc2luZ2xlVmFsdWUgPSB2YWx1ZSA9PiAoeyB2YWx1ZTogJyZrcCcsIHBhcmFtczogW3sgdmFsdWUsIHBhcmFtczogW10gfV0gfSlcblxuY29uc3QgcGF0dGVybk1hcHBpbmdzID0gW1xuICB7IHBhdHRlcm46IC9bMC05XS8sIGNvbnZlcnQ6IGRpZ2l0ID0+IHNpbmdsZVZhbHVlKGBOJHtkaWdpdH1gKSB9LFxuICB7IHBhdHRlcm46IC9bYS16XS8sIGNvbnZlcnQ6IGNoYXIgPT4gc2luZ2xlVmFsdWUoY2hhci50b1VwcGVyQ2FzZSgpKSB9LFxuICB7XG4gICAgcGF0dGVybjogL1tBLVpdLyxcbiAgICBjb252ZXJ0OiBjaGFyID0+ICh7XG4gICAgICB2YWx1ZTogJyZrcCcsXG4gICAgICBwYXJhbXM6IFt7XG4gICAgICAgIHZhbHVlOiAnTFMnLFxuICAgICAgICBwYXJhbXM6IFt7XG4gICAgICAgICAgdmFsdWU6IGNoYXIudG9VcHBlckNhc2UoKSxcbiAgICAgICAgICBwYXJhbXM6IFtdXG4gICAgICAgIH1dXG4gICAgICB9XVxuICAgIH0pXG4gIH1cbl1cblxuY29uc3Qgc2ltcGxlTWFwcGluZ3MgPSB7XG4gICchJzogc2luZ2xlVmFsdWUoJ0VYQ0wnKSxcbiAgJ0AnOiBzaW5nbGVWYWx1ZSgnQVQnKSxcbiAgJyMnOiBzaW5nbGVWYWx1ZSgnUE9VTkQnKSxcbiAgJDogc2luZ2xlVmFsdWUoJ0RMTFInKSxcbiAgJyUnOiBzaW5nbGVWYWx1ZSgnUFJDTlQnKSxcbiAgJ14nOiBzaW5nbGVWYWx1ZSgnQ0FSRVQnKSxcbiAgJyYnOiBzaW5nbGVWYWx1ZSgnQU1QUycpLFxuICAnKic6IHNpbmdsZVZhbHVlKCdTVEFSJyksXG4gICcoJzogc2luZ2xlVmFsdWUoJ0xQQVInKSxcbiAgJyknOiBzaW5nbGVWYWx1ZSgnUlBBUicpLFxuICAnXFxuJzogc2luZ2xlVmFsdWUoJ1JFVCcpLFxuICAnICc6IHNpbmdsZVZhbHVlKCdTUEFDRScpLFxuICAnLSc6IHNpbmdsZVZhbHVlKCdNSU5VUycpLFxuICBfOiBzaW5nbGVWYWx1ZSgnVU5ERVInKSxcbiAgJz0nOiBzaW5nbGVWYWx1ZSgnRVFVQUwnKSxcbiAgJysnOiBzaW5nbGVWYWx1ZSgnUExVUycpLFxuICAnWyc6IHNpbmdsZVZhbHVlKCdMQktUJyksXG4gICddJzogc2luZ2xlVmFsdWUoJ0xCUkMnKSxcbiAgJ3snOiBzaW5nbGVWYWx1ZSgnUkJLVCcpLFxuICAnfSc6IHNpbmdsZVZhbHVlKCdSQlJDJyksXG4gICdcXFxcJzogc2luZ2xlVmFsdWUoJ0JTTEgnKSxcbiAgJ3wnOiBzaW5nbGVWYWx1ZSgnUElQRScpLFxuICAnJzogc2luZ2xlVmFsdWUoJ1RJTERFMicpLFxuICAnOyc6IHNpbmdsZVZhbHVlKCdTRU1JJyksXG4gICc6Jzogc2luZ2xlVmFsdWUoJ0NPTE9OJyksXG4gICdcXCcnOiBzaW5nbGVWYWx1ZSgnU1FUJyksXG4gICdcIic6IHNpbmdsZVZhbHVlKCdEUVQnKSxcbiAgJ2AnOiBzaW5nbGVWYWx1ZSgnR1JBVkUnKSxcbiAgJ34nOiBzaW5nbGVWYWx1ZSgnVElMREUnKSxcbiAgJywnOiBzaW5nbGVWYWx1ZSgnQ09NTUEnKSxcbiAgJzwnOiBzaW5nbGVWYWx1ZSgnTFQnKSxcbiAgJy4nOiBzaW5nbGVWYWx1ZSgnRE9UJyksXG4gICc+Jzogc2luZ2xlVmFsdWUoJ0dUJyksXG4gICcvJzogc2luZ2xlVmFsdWUoJ0ZTTEgnKSxcbiAgJz8nOiBzaW5nbGVWYWx1ZSgnUU1BUksnKVxufVxuXG5mdW5jdGlvbiBtYXBDaGFyYWN0ZXIgKGNoYXIpIHtcbiAgaWYgKHNpbXBsZU1hcHBpbmdzW2NoYXJdKSB7XG4gICAgcmV0dXJuIHNpbXBsZU1hcHBpbmdzW2NoYXJdXG4gIH1cblxuICBmb3IgKGNvbnN0IHsgcGF0dGVybiwgY29udmVydCB9IG9mIHBhdHRlcm5NYXBwaW5ncykge1xuICAgIGlmIChjaGFyLm1hdGNoKHBhdHRlcm4pKSB7XG4gICAgICByZXR1cm4gY29udmVydChjaGFyKVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBTZXF1ZW5jZU1vZGFsICh7IG9uQ2xvc2UgfSkge1xuICBjb25zdCB7IHNvdXJjZXMsIG1lcmdlZEdseXBocyB9ID0gdXNlQ29udGV4dChTZWFyY2hDb250ZXh0KVxuICBjb25zdCBbc3RyaW5nLCBzZXRTdHJpbmddID0gdXNlU3RhdGUoJ1R5cGUgc29tZXRoaW5nLi4uJylcbiAgY29uc3Qgc2VxdWVuY2UgPSB1c2VNZW1vKCgpID0+IHtcbiAgICByZXR1cm4gc3RyaW5nLnNwbGl0KCcnKS5yZWR1Y2UoKHNlcXVlbmNlLCBjaGFyKSA9PiB7XG4gICAgICBjb25zdCBtYXBwZWQgPSBtYXBDaGFyYWN0ZXIoY2hhcilcbiAgICAgIGlmIChtYXBwZWQpIHtcbiAgICAgICAgc2VxdWVuY2UucHVzaChtYXBwZWQpXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzZXF1ZW5jZVxuICAgIH0sIFtdKVxuICB9LCBbc3RyaW5nXSlcblxuICBjb25zdCBiaW5kaW5ncyA9IHNlcXVlbmNlLm1hcCgoeyB2YWx1ZSwgcGFyYW1zIH0pID0+IGh5ZHJhdGVUcmVlKFxuICAgIHZhbHVlLFxuICAgIHBhcmFtcyxcbiAgICBzb3VyY2VzLFxuICAgIHVuZGVmaW5lZCxcbiAgICBtZXJnZWRHbHlwaHNcbiAgKSlcblxuICBjb25zdCBmb2N1c0lucHV0ID0gdXNlQ2FsbGJhY2sobm9kZSA9PiB7XG4gICAgaWYgKG5vZGUpIHtcbiAgICAgIG5vZGUuZm9jdXMoKVxuICAgICAgbm9kZS5zZWxlY3QoKVxuICAgIH1cbiAgfSwgW10pXG5cbiAgcmV0dXJuIChcbiAgICA8TW9kYWw+XG4gICAgICA8RGlhbG9nQm94IGRpc21pc3NUZXh0PXtmYWxzZX0+XG4gICAgICAgIDxoMj5DcmVhdGUgVHlwaW5nIFNlcXVlbmNlPC9oMj5cbiAgICAgICAgPHA+VHlwZSBhIG1lc3NhZ2UgdG8gZ2VuZXJhdGUgYSBzZXF1ZW5jZSBvZiBiaW5kaW5ncyBpbiB0aGUgbWFjcm8uPC9wPlxuXG4gICAgICAgIDx0ZXh0YXJlYVxuICAgICAgICAgIHZhbHVlPXtzdHJpbmd9XG4gICAgICAgICAgcmVmPXtmb2N1c0lucHV0fVxuICAgICAgICAgIHN0eWxlPXt7IHdpZHRoOiAnMTAwJScsIGhlaWdodDogJzZyZW0nIH19XG4gICAgICAgICAgb25DaGFuZ2U9e2UgPT4gc2V0U3RyaW5nKGUudGFyZ2V0LnZhbHVlKX1cbiAgICAgICAgLz5cblxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLm1hY3JvQmluZGluZ3N9PlxuICAgICAgICAgIHtiaW5kaW5ncy5tYXAoKGJpbmQsIGkpID0+IChcbiAgICAgICAgICAgIDxGcmFnbWVudCBrZXk9e2l9PlxuICAgICAgICAgICAgICA8S2V5V3JhcHBlciBzZWxlY3RhYmxlPXtmYWxzZX0+XG4gICAgICAgICAgICAgICAgPEtleWNvZGVCaW5kTm9kZVxuICAgICAgICAgICAgICAgICAgbm9kZT17YmluZC5wYXJhbXNbMF19XG4gICAgICAgICAgICAgICAgICBvblNlbGVjdD17KCkgPT4ge319XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPC9LZXlXcmFwcGVyPlxuICAgICAgICAgICAgPC9GcmFnbWVudD5cbiAgICAgICAgICApKX1cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5tYWNyb0FjdGlvbnN9PlxuICAgICAgICAgIDxBY3Rpb25CdXR0b24gb25DbGljaz17KCkgPT4gb25DbG9zZShiaW5kaW5ncyl9PkFkZCB0byBtYWNybzwvQWN0aW9uQnV0dG9uPlxuICAgICAgICAgIDxBY3Rpb25CdXR0b24gb25DbGljaz17KCkgPT4gb25DbG9zZShbXSl9IHNlY29uZGFyeT5DYW5jZWw8L0FjdGlvbkJ1dHRvbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L0RpYWxvZ0JveD5cbiAgICA8L01vZGFsPlxuICApXG59XG5cbmV4cG9ydCBkZWZhdWx0IFNlcXVlbmNlTW9kYWxcbiIsImltcG9ydCB7IGNyZWF0ZVNsaWNlIH0gZnJvbSAnQHJlZHV4anMvdG9vbGtpdCdcblxuaW1wb3J0IHsgcmVwb3NpdGlvbkVsZW1lbnQgfSBmcm9tICcuLi8uLi9yZWR1Y2VyLXV0aWwnXG5cbmV4cG9ydCBjb25zdCBzZWxlY3RNYWNyb3MgPSBzdGF0ZSA9PiBzdGF0ZS5rZXlib2FyZC5rZXltYXAubWFjcm9zXG5cbmNvbnN0IG1hY3Jvc1NsaWNlID0gY3JlYXRlU2xpY2Uoe1xuICBuYW1lOiAnbWFjcm9zJyxcbiAgaW5pdGlhbFN0YXRlOiBbXSxcbiAgcmVkdWNlcnM6IHtcbiAgICBhZGRNYWNybyAoc3RhdGUpIHtcbiAgICAgIHN0YXRlLnB1c2goe1xuICAgICAgICBuYW1lOiAnbmV3X21hY3JvJyxcbiAgICAgICAgbGFiZWxzOiBbJ25ld19tYWNybyddLFxuICAgICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgY29tcGF0aWJsZTogeyBwYXJzZWQ6ICd6bWssYmVoYXZpb3ItbWFjcm8nLCByYXc6ICdcInptayxiZWhhdmlvci1tYWNyb1wiJyB9LFxuICAgICAgICAgIGxhYmVsOiB7IHBhcnNlZDogJ25ld19tYWNybycsIHJhdzogJ1wibmV3X21hY3JvXCInIH0sXG4gICAgICAgICAgJyNiaW5kaW5nLWNlbGxzJzogeyBwYXJzZWQ6IDAgfSxcbiAgICAgICAgICBiaW5kaW5nczogeyBwYXJzZWQ6IFtdLCByYXc6ICcnIH1cbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9LFxuICAgIHJlbmFtZU1hY3JvIChzdGF0ZSwgYWN0aW9uKSB7XG4gICAgICBzdGF0ZVthY3Rpb24ucGF5bG9hZC5pbmRleF0ubmFtZSA9IGFjdGlvbi5wYXlsb2FkLm5hbWVcbiAgICB9LFxuICAgIGRlbGV0ZU1hY3JvIChzdGF0ZSwgYWN0aW9uKSB7XG4gICAgICBzdGF0ZS5zcGxpY2UoYWN0aW9uLnBheWxvYWQuaW5kZXgsIDEpXG4gICAgfSxcbiAgICBhZGRNYWNyb0NvbnRyb2xCaW5kaW5nIChzdGF0ZSwgYWN0aW9uKSB7XG4gICAgICBzdGF0ZVthY3Rpb24ucGF5bG9hZC5tYWNyb0luZGV4XS5wcm9wZXJ0aWVzLmJpbmRpbmdzLnBhcnNlZC5wdXNoKHtcbiAgICAgICAgdmFsdWU6ICcmbWFjcm9fcHJlc3MnLFxuICAgICAgICBwYXJhbXM6IFtdXG4gICAgICB9KVxuICAgIH0sXG4gICAgYWRkTWFjcm9LZXlCaW5kaW5nIChzdGF0ZSwgYWN0aW9uKSB7XG4gICAgICBzdGF0ZVthY3Rpb24ucGF5bG9hZC5tYWNyb0luZGV4XS5wcm9wZXJ0aWVzLmJpbmRpbmdzLnBhcnNlZC5wdXNoKGFjdGlvbi5wYXlsb2FkLmJpbmRpbmcpXG4gICAgfSxcbiAgICB1cGRhdGVNYWNyb0JpbmRpbmcgKHN0YXRlLCBhY3Rpb24pIHtcbiAgICAgIHN0YXRlW2FjdGlvbi5wYXlsb2FkLm1hY3JvSW5kZXhdLnByb3BlcnRpZXMuYmluZGluZ3MucGFyc2VkW2FjdGlvbi5wYXlsb2FkLmJpbmRJbmRleF0gPSBhY3Rpb24ucGF5bG9hZC5iaW5kaW5nXG4gICAgfSxcbiAgICByZW9yZGVyTWFjcm9CaW5kaW5nIChzdGF0ZSwgYWN0aW9uKSB7XG4gICAgICBzdGF0ZVthY3Rpb24ucGF5bG9hZC5tYWNyb0luZGV4XS5wcm9wZXJ0aWVzLmJpbmRpbmdzLnBhcnNlZCA9IHJlcG9zaXRpb25FbGVtZW50KFxuICAgICAgICBzdGF0ZVthY3Rpb24ucGF5bG9hZC5tYWNyb0luZGV4XS5wcm9wZXJ0aWVzLmJpbmRpbmdzLnBhcnNlZCxcbiAgICAgICAgYWN0aW9uLnBheWxvYWQuYmluZEluZGV4LFxuICAgICAgICBhY3Rpb24ucGF5bG9hZC50YXJnZXRJbmRleFxuICAgICAgKVxuICAgIH0sXG4gICAgZGVsZXRlTWFjcm9CaW5kaW5nIChzdGF0ZSwgYWN0aW9uKSB7XG4gICAgICBzdGF0ZVthY3Rpb24ucGF5bG9hZC5tYWNyb0luZGV4XS5wcm9wZXJ0aWVzLmJpbmRpbmdzLnBhcnNlZC5zcGxpY2UoYWN0aW9uLnBheWxvYWQuYmluZEluZGV4LCAxKVxuICAgIH0sXG4gICAgY3VzdG9taXplTWFjcm9PcHRpb25zIChzdGF0ZSwgYWN0aW9uKSB7XG4gICAgICBPYmplY3QuYXNzaWduKHN0YXRlW2FjdGlvbi5wYXlsb2FkLm1hY3JvSW5kZXhdLCBhY3Rpb24ucGF5bG9hZC5vcHRpb25zKVxuICAgIH1cbiAgfVxufSlcblxuZXhwb3J0IGNvbnN0IHtcbiAgYWRkTWFjcm8sXG4gIHJlbmFtZU1hY3JvLFxuICBkZWxldGVNYWNybyxcbiAgYWRkTWFjcm9Db250cm9sQmluZGluZyxcbiAgYWRkTWFjcm9LZXlCaW5kaW5nLFxuICB1cGRhdGVNYWNyb0JpbmRpbmcsXG4gIHJlb3JkZXJNYWNyb0JpbmRpbmcsXG4gIGRlbGV0ZU1hY3JvQmluZGluZyxcbiAgY3VzdG9taXplTWFjcm9PcHRpb25zXG59ID0gbWFjcm9zU2xpY2UuYWN0aW9uc1xuXG5leHBvcnQgZGVmYXVsdCBtYWNyb3NTbGljZS5yZWR1Y2VyXG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJ1xuXG5pbXBvcnQgeyBpc0NvbnRyb2xCaW5kaW5nIH0gZnJvbSAnLi91dGlsJ1xuaW1wb3J0IHN0eWxlcyBmcm9tICcuL3N0eWxlcy5tb2R1bGUuY3NzJ1xuaW1wb3J0IHsgRHJvcFpvbmVDb250YWluZXIgfSBmcm9tICcuL0RyYWdBbmREcm9wJ1xuaW1wb3J0IFNlcXVlbmNlTW9kYWwgZnJvbSAnLi9TZXF1ZW5jZU1vZGFsJ1xuXG5pbXBvcnQgS2V5IGZyb20gJy4uL0tleXMvS2V5J1xuaW1wb3J0IEtleVdyYXBwZXIgZnJvbSAnLi4vS2V5cy9LZXlXcmFwcGVyJ1xuXG5pbXBvcnQgQWN0aW9uQnV0dG9uIGZyb20gJy4uLy4uL0NvbW1vbi9BY3Rpb25CdXR0b24nXG5pbXBvcnQgSWNvbiBmcm9tICcuLi8uLi9Db21tb24vSWNvbidcbmltcG9ydCB7IHN0b3AgfSBmcm9tICcuLi8uLi9ldmVudC11dGlsJ1xuXG5pbXBvcnQge1xuICBhZGRNYWNyb0NvbnRyb2xCaW5kaW5nLFxuICBhZGRNYWNyb0tleUJpbmRpbmcsXG4gIGRlbGV0ZU1hY3JvQmluZGluZyxcbiAgcmVvcmRlck1hY3JvQmluZGluZywgdXBkYXRlTWFjcm9CaW5kaW5nXG59IGZyb20gJy4vbWFjcm9zU2xpY2UnXG5cbmZ1bmN0aW9uIE1hY3JvQmluZHMgKHByb3BzKSB7XG4gIGNvbnN0IHsgbWFjcm9JbmRleCwgYmluZGluZ3MsIGRpc3BhdGNoIH0gPSBwcm9wc1xuICBjb25zdCBbZHJhZ2dpbmcsIHNldERyYWdnaW5nXSA9IHVzZVN0YXRlKG51bGwpXG4gIGNvbnN0IFtzZXF1ZW5jZU1vZGFsT3Blbiwgc2V0U2VxdWVuY2VNb2RhbE9wZW5dID0gdXNlU3RhdGUoZmFsc2UpXG5cbiAgZnVuY3Rpb24gaGFuZGxlRHJhZ1N0YXJ0IChldmVudCwgaW5kZXgpIHtcbiAgICBpZiAoZXZlbnQuZGF0YVRyYW5zZmVyLml0ZW1zLmxlbmd0aCkge1xuICAgICAgZXZlbnQuZGF0YVRyYW5zZmVyLmNsZWFyRGF0YSgpXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjb25zdCBiaW5kaW5nID0gYmluZGluZ3NbaW5kZXhdXG4gICAgc2V0RHJhZ2dpbmcoe1xuICAgICAgaW5kZXgsXG4gICAgICBtb2RlOiBpc0NvbnRyb2xCaW5kaW5nKGJpbmRpbmcpID8gJ3JvdycgOiAnY29sJyxcbiAgICAgIGlzQ29udHJvbEJpbmRpbmc6IGlzQ29udHJvbEJpbmRpbmcoYmluZGluZylcbiAgICB9KVxuICB9XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBmdW5jdGlvbiBjbGVhckRyb3AgKCkge1xuICAgICAgc2V0RHJhZ2dpbmcobnVsbClcbiAgICB9XG4gICAgZnVuY3Rpb24gY2xlYXJEcmFnIChldmVudCkge1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKClcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICB9XG5cbiAgICBkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoJ2Ryb3AnLCBjbGVhckRyb3ApXG4gICAgZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKCdkcmFnb3ZlcicsIGNsZWFyRHJhZylcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKCdkcm9wJywgY2xlYXJEcm9wKVxuICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKCdkcmFnb3ZlcicsIGNsZWFyRHJhZylcbiAgICB9XG4gIH0sIFtzZXREcmFnZ2luZ10pXG5cbiAgZnVuY3Rpb24gaGFuZGxlRHJvcCAodGFyZ2V0SW5kZXgpIHtcbiAgICBkaXNwYXRjaChyZW9yZGVyTWFjcm9CaW5kaW5nKHtcbiAgICAgIG1hY3JvSW5kZXgsXG4gICAgICBiaW5kSW5kZXg6IGRyYWdnaW5nLmluZGV4LFxuICAgICAgdGFyZ2V0SW5kZXhcbiAgICB9KSlcbiAgICBzZXREcmFnZ2luZyhudWxsKVxuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5tYWNyb0JpbmRpbmdzfT5cbiAgICAgICAge2JpbmRpbmdzLm1hcCgoYmluZCwgaSkgPT4gKFxuICAgICAgICAgIDxSZWFjdC5GcmFnbWVudCBrZXk9e2l9PlxuICAgICAgICAgICAgPEtleVdyYXBwZXJcbiAgICAgICAgICAgICAga2V5PXtpfVxuICAgICAgICAgICAgICBkYXRhLWluZGV4PXtpfVxuICAgICAgICAgICAgICB0aGVtZUNsYXNzPXtpc0NvbnRyb2xCaW5kaW5nKGJpbmQpID8gc3R5bGVzLmNvbnRyb2xCaW5kaW5nIDogJyd9XG4gICAgICAgICAgICAgIGRyYWdnYWJsZVxuICAgICAgICAgICAgICBvbkRyYWdTdGFydD17ZSA9PiBoYW5kbGVEcmFnU3RhcnQoZSwgaSl9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxLZXlcbiAgICAgICAgICAgICAgICBjb250ZXh0PXtpc0NvbnRyb2xCaW5kaW5nKGJpbmQpID8gJ21hY3JvcycgOiB1bmRlZmluZWR9XG4gICAgICAgICAgICAgICAgdmFsdWU9e2JpbmQudmFsdWV9XG4gICAgICAgICAgICAgICAgcGFyYW1zPXtiaW5kLnBhcmFtc31cbiAgICAgICAgICAgICAgICBvblVwZGF0ZT17dXBkYXRlZCA9PiB7XG4gICAgICAgICAgICAgICAgICBkaXNwYXRjaCh1cGRhdGVNYWNyb0JpbmRpbmcoe1xuICAgICAgICAgICAgICAgICAgICBtYWNyb0luZGV4LFxuICAgICAgICAgICAgICAgICAgICBiaW5kSW5kZXg6IGksXG4gICAgICAgICAgICAgICAgICAgIGJpbmRpbmc6IHVwZGF0ZWRcbiAgICAgICAgICAgICAgICAgIH0pKVxuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMuYWN0aW9uc30+XG4gICAgICAgICAgICAgICAgPEljb25cbiAgICAgICAgICAgICAgICAgIG5hbWU9XCJ0cmFzaFwiXG4gICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e3N0eWxlcy5kZWxldGVCaW5kfVxuICAgICAgICAgICAgICAgICAgb25DbGljaz17c3RvcCgoKSA9PiBkaXNwYXRjaChkZWxldGVNYWNyb0JpbmRpbmcoe1xuICAgICAgICAgICAgICAgICAgICBtYWNyb0luZGV4LFxuICAgICAgICAgICAgICAgICAgICBiaW5kSW5kZXg6IGlcbiAgICAgICAgICAgICAgICAgIH0pKSl9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L0tleVdyYXBwZXI+XG4gICAgICAgICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgICAgICAgKSl9XG4gICAgICAgIDxEcm9wWm9uZUNvbnRhaW5lclxuICAgICAgICAgIGRyYWdnaW5nPXtkcmFnZ2luZ31cbiAgICAgICAgICBiaW5kaW5ncz17YmluZGluZ3N9XG4gICAgICAgICAgb25Ecm9wPXtoYW5kbGVEcm9wfVxuICAgICAgICAvPlxuICAgICAgPC9kaXY+XG5cbiAgICAgIHtzZXF1ZW5jZU1vZGFsT3BlbiAmJiAoXG4gICAgICAgIDxTZXF1ZW5jZU1vZGFsIG9uQ2xvc2U9e2JpbmRpbmdzID0+IHtcbiAgICAgICAgICBzZXRTZXF1ZW5jZU1vZGFsT3BlbihmYWxzZSlcbiAgICAgICAgICBmb3IgKGNvbnN0IGJpbmRpbmcgb2YgYmluZGluZ3MpIHtcbiAgICAgICAgICAgIGRpc3BhdGNoKGFkZE1hY3JvS2V5QmluZGluZyh7XG4gICAgICAgICAgICAgIG1hY3JvSW5kZXgsXG4gICAgICAgICAgICAgIGJpbmRpbmdcbiAgICAgICAgICAgIH0pKVxuICAgICAgICAgIH1cbiAgICAgICAgfX0gLz5cbiAgICAgICl9XG5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMubWFjcm9BY3Rpb25zfT5cbiAgICAgICAgPEFjdGlvbkJ1dHRvbiBvbkNsaWNrPXsoKSA9PiBkaXNwYXRjaChhZGRNYWNyb0NvbnRyb2xCaW5kaW5nKHsgbWFjcm9JbmRleCB9KSl9PlxuICAgICAgICAgIEFkZCBDb250cm9sIEJpbmRpbmdcbiAgICAgICAgPC9BY3Rpb25CdXR0b24+XG4gICAgICAgIDxBY3Rpb25CdXR0b24gb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgIGRpc3BhdGNoKGFkZE1hY3JvS2V5QmluZGluZyh7XG4gICAgICAgICAgICBiaW5kaW5nOiB7IHZhbHVlOiAnJmtwJywgcGFyYW1zOiBbXSB9LFxuICAgICAgICAgICAgbWFjcm9JbmRleFxuICAgICAgICAgIH0pKVxuICAgICAgICB9fT5cbiAgICAgICAgICBBZGQgS2V5IEJpbmRpbmdcbiAgICAgICAgPC9BY3Rpb25CdXR0b24+XG4gICAgICAgIDxBY3Rpb25CdXR0b24gb25DbGljaz17KCkgPT4gc2V0U2VxdWVuY2VNb2RhbE9wZW4odHJ1ZSl9PlxuICAgICAgICAgIEFkZCBTdHJpbmcgU2VxdWVuY2VcbiAgICAgICAgPC9BY3Rpb25CdXR0b24+XG4gICAgICA8L2Rpdj5cbiAgICA8Lz5cbiAgKVxufVxuXG5NYWNyb0JpbmRzLnByb3BUeXBlcyA9IHtcbiAgYmluZGluZ3M6IFByb3BUeXBlcy5hcnJheS5pc1JlcXVpcmVkLFxuICBtYWNyb0luZGV4OiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWQsXG4gIGRpc3BhdGNoOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG59XG5cbmV4cG9ydCBkZWZhdWx0IE1hY3JvQmluZHNcbiIsImltcG9ydCB7IHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnXG5cbmltcG9ydCBNb2RhbCBmcm9tICcuLi8uLi9Db21tb24vTW9kYWwnXG5pbXBvcnQgRGlhbG9nQm94IGZyb20gJy4uLy4uL0NvbW1vbi9EaWFsb2dCb3gnXG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vc3R5bGVzLm1vZHVsZS5jc3MnXG5pbXBvcnQgTm9kZUlkZW50aWZpZXJzIGZyb20gJy4uL0NvbW1vbi9EZXZpY2V0cmVlL05vZGVJZGVudGlmaWVycydcblxuZnVuY3Rpb24gQ29uZmlnTW9kYWwgKHsgbWFjcm8sIG9uVXBkYXRlIH0pIHtcbiAgY29uc3QgW3BlbmRpbmcsIHNldFBlbmRpbmddID0gdXNlU3RhdGUobWFjcm8pXG5cbiAgZnVuY3Rpb24gaGFuZGxlQ29uZmlybSAoKSB7XG4gICAgb25VcGRhdGUocGVuZGluZylcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZUNhbmNlbCAoKSB7XG4gICAgb25VcGRhdGUobWFjcm8pXG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxNb2RhbCBvbkRpc21pc3M9e2hhbmRsZUNhbmNlbH0+XG4gICAgICA8RGlhbG9nQm94IG9uRGlzbWlzcz17aGFuZGxlQ29uZmlybX0+XG4gICAgICAgIDxoMj5DdXN0b21pemUgPGNvZGU+e21hY3JvLm5hbWV9PC9jb2RlPjwvaDI+XG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgPE5vZGVJZGVudGlmaWVyc1xuICAgICAgICAgICAgbm9kZT17cGVuZGluZ31cbiAgICAgICAgICAgIG9uVXBkYXRlPXtzZXRQZW5kaW5nfVxuICAgICAgICAgIC8+XG5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLmZpZWxkfT5cbiAgICAgICAgICAgIDxsYWJlbCBodG1sRm9yPVwiY3VzdG9taXplLW1hY3JvLXdhaXRcIj5cbiAgICAgICAgICAgICAgV2FpdCAobXMpXG4gICAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgIGlkPVwiY3VzdG9taXplLW1hY3JvLXdhaXRcIlxuICAgICAgICAgICAgICB0eXBlPVwibnVtYmVyXCJcbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJEZWZhdWx0XCJcbiAgICAgICAgICAgICAgdmFsdWU9e3BlbmRpbmcucHJvcGVydGllc1snd2FpdC1tcyddPy5wYXJzZWQgfHwgJyd9XG4gICAgICAgICAgICAgIG9uQ2hhbmdlPXtldmVudCA9PiAoXG4gICAgICAgICAgICAgICAgc2V0UGVuZGluZyhzdGF0ZSA9PiAoe1xuICAgICAgICAgICAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICAgICAgICAgIC4uLnN0YXRlLnByb3BlcnRpZXMsXG4gICAgICAgICAgICAgICAgICAgICd3YWl0LW1zJzogZXZlbnQudGFyZ2V0LnZhbHVlID09PSAnJ1xuICAgICAgICAgICAgICAgICAgICAgID8gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgICAgICAgOiB7IHBhcnNlZDogTnVtYmVyKGV2ZW50LnRhcmdldC52YWx1ZSkgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pKVxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMuZmllbGR9PlxuICAgICAgICAgICAgPGxhYmVsIGh0bWxGb3I9XCJjdXN0b21pemUtbWFjcm8tdGFwXCI+XG4gICAgICAgICAgICAgIFRhcCAobXMpXG4gICAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgIGlkPVwiY3VzdG9taXplLW1hY3JvLXRhcFwiXG4gICAgICAgICAgICAgIHR5cGU9XCJudW1iZXJcIlxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIkRlZmF1bHRcIlxuICAgICAgICAgICAgICB2YWx1ZT17cGVuZGluZy5wcm9wZXJ0aWVzWyd0YXAtbXMnXT8ucGFyc2VkIHx8ICcnfVxuICAgICAgICAgICAgICBvbkNoYW5nZT17ZXZlbnQgPT4gKFxuICAgICAgICAgICAgICAgIHNldFBlbmRpbmcoc3RhdGUgPT4gKHtcbiAgICAgICAgICAgICAgICAgIC4uLnN0YXRlLFxuICAgICAgICAgICAgICAgICAgcHJvcGVydGllczoge1xuICAgICAgICAgICAgICAgICAgICAuLi5zdGF0ZS5wcm9wZXJ0aWVzLFxuICAgICAgICAgICAgICAgICAgICAndGFwLW1zJzogZXZlbnQudGFyZ2V0LnZhbHVlID09PSAnJ1xuICAgICAgICAgICAgICAgICAgICAgID8gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgICAgICAgOiB7IHBhcnNlZDogTnVtYmVyKGV2ZW50LnRhcmdldC52YWx1ZSkgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pKVxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvRGlhbG9nQm94PlxuICAgIDwvTW9kYWw+XG4gIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgQ29uZmlnTW9kYWxcbiIsImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcydcbmltcG9ydCB7IHVzZUNhbGxiYWNrLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0J1xuXG5pbXBvcnQgTWFjcm9CaW5kcyBmcm9tICcuL01hY3JvQmluZHMnXG5pbXBvcnQgQ29uZmlnTW9kYWwgZnJvbSAnLi9Db25maWdNb2RhbCdcbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9zdHlsZXMubW9kdWxlLmNzcydcbmltcG9ydCBJY29uIGZyb20gJy4uLy4uL0NvbW1vbi9JY29uJ1xuaW1wb3J0IHsgY3VzdG9taXplTWFjcm9PcHRpb25zLCBkZWxldGVNYWNybyB9IGZyb20gJy4vbWFjcm9zU2xpY2UnXG5cbmZ1bmN0aW9uIE1hY3JvIChwcm9wcykge1xuICBjb25zdCB7IGluZGV4LCBtYWNybywgZGlzcGF0Y2ggfSA9IHByb3BzXG4gIGNvbnN0IFtzaG93Q29uZmlnLCBzZXRTaG93Q29uZmlnXSA9IHVzZVN0YXRlKGZhbHNlKVxuXG4gIGNvbnN0IG9wZW5Db25maWdNb2RhbCA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uIChldmVudCkge1xuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbiAmJiBldmVudC5zdG9wUHJvcGFnYXRpb24oKVxuICAgIHNldFNob3dDb25maWcodHJ1ZSlcbiAgfSwgW3NldFNob3dDb25maWddKVxuXG4gIGZ1bmN0aW9uIGhhbmRsZVVwZGF0ZUNvbmZpZyAob3B0aW9ucykge1xuICAgIHNldFNob3dDb25maWcoZmFsc2UpXG4gICAgZGlzcGF0Y2goY3VzdG9taXplTWFjcm9PcHRpb25zKHsgbWFjcm9JbmRleDogaW5kZXgsIG9wdGlvbnMgfSkpXG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMubWFjcm99PlxuICAgICAge3Nob3dDb25maWcgJiYgKFxuICAgICAgICA8Q29uZmlnTW9kYWwgbWFjcm89e21hY3JvfSBvblVwZGF0ZT17aGFuZGxlVXBkYXRlQ29uZmlnfSAvPlxuICAgICAgKX1cbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMuaGVhZGluZ30+XG4gICAgICAgIDxoNSBvbkNsaWNrPXtvcGVuQ29uZmlnTW9kYWx9PlxuICAgICAgICAgIHttYWNyby5sYWJlbHNbMF19XG4gICAgICAgIDwvaDU+XG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgPEljb25cbiAgICAgICAgICAgIG5hbWU9XCJ3cmVuY2hcIlxuICAgICAgICAgICAgY2xhc3NOYW1lPXtgJHtzdHlsZXMuYWN0aW9ufWB9XG4gICAgICAgICAgICBvbkNsaWNrPXtvcGVuQ29uZmlnTW9kYWx9XG4gICAgICAgICAgLz5cbiAgICAgICAgICA8SWNvblxuICAgICAgICAgICAgbmFtZT1cInRyYXNoLWNhblwiXG4gICAgICAgICAgICBjbGFzc05hbWU9e2Ake3N0eWxlcy5hY3Rpb259ICR7c3R5bGVzLnJlbW92ZX1gfVxuICAgICAgICAgICAgb25DbGljaz17KCkgPT4gZGlzcGF0Y2goZGVsZXRlTWFjcm8oeyBpbmRleCB9KSl9XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxNYWNyb0JpbmRzXG4gICAgICAgIG1hY3JvSW5kZXg9e2luZGV4fVxuICAgICAgICBiaW5kaW5ncz17bWFjcm8ucHJvcGVydGllcy5iaW5kaW5ncy5wYXJzZWR9XG4gICAgICAgIGRpc3BhdGNoPXtkaXNwYXRjaH1cbiAgICAgIC8+XG4gICAgPC9kaXY+XG4gIClcbn1cblxuTWFjcm8ucHJvcFR5cGVzID0ge1xuICBpbmRleDogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxuICBtYWNybzogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgbGFiZWxzOiBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMuc3RyaW5nKS5pc1JlcXVpcmVkLFxuICAgIHByb3BlcnRpZXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZFxuICB9KS5pc1JlcXVpcmVkLFxuICBkaXNwYXRjaDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxufVxuXG5leHBvcnQgZGVmYXVsdCBNYWNyb1xuIiwiaW1wb3J0IHsgdXNlU2VsZWN0b3IsIHVzZURpc3BhdGNoIH0gZnJvbSAncmVhY3QtcmVkdXgnXG5cbmltcG9ydCBNYWNybyBmcm9tICcuL01hY3JvJ1xuaW1wb3J0IHN0eWxlcyBmcm9tICcuL3N0eWxlcy5tb2R1bGUuY3NzJ1xuXG5pbXBvcnQgQWN0aW9uQnV0dG9uIGZyb20gJy4uLy4uL0NvbW1vbi9BY3Rpb25CdXR0b24nXG5pbXBvcnQgTGluayBmcm9tICcuLi8uLi9Db21tb24vTGluaydcbmltcG9ydCBJY29uIGZyb20gJy4uLy4uL0NvbW1vbi9JY29uJ1xuaW1wb3J0IHsgc2VsZWN0TWFjcm9zLCBhZGRNYWNybyB9IGZyb20gJy4vbWFjcm9zU2xpY2UnXG5cbmZ1bmN0aW9uIE1hY3JvRWRpdG9yICgpIHtcbiAgY29uc3QgbWFjcm9zID0gdXNlU2VsZWN0b3Ioc2VsZWN0TWFjcm9zKVxuICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKClcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMubWFpbn0+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLnNpZGViYXJ9PlxuICAgICAgICA8TGluayBleHRlcm5hbCBocmVmPVwiaHR0cHM6Ly96bWsuZGV2L2RvY3MvYmVoYXZpb3JzL21hY3Jvc1wiPlxuICAgICAgICAgIDxJY29uIG5hbWU9XCJib29rXCIgLz4gWk1LIERvY3M6IE1hY3Jvc1xuICAgICAgICA8L0xpbms+XG5cbiAgICAgICAgPEFjdGlvbkJ1dHRvbiBvbkNsaWNrPXsoKSA9PiBkaXNwYXRjaChhZGRNYWNybygpKX0+XG4gICAgICAgICAgQWRkIE5ldyBNYWNyb1xuICAgICAgICA8L0FjdGlvbkJ1dHRvbj5cbiAgICAgIDwvZGl2PlxuXG4gICAgICB7bWFjcm9zLm1hcCgobWFjcm8sIGkpID0+IChcbiAgICAgICAgPE1hY3JvXG4gICAgICAgICAga2V5PXtpfVxuICAgICAgICAgIG1hY3JvPXttYWNyb31cbiAgICAgICAgICBpbmRleD17aX1cbiAgICAgICAgICBkaXNwYXRjaD17ZGlzcGF0Y2h9XG4gICAgICAgIC8+XG4gICAgICApKX1cbiAgICA8L2Rpdj5cbiAgKVxufVxuXG5leHBvcnQgZGVmYXVsdCBNYWNyb0VkaXRvclxuIiwiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJ1xuXG5jb25zdCBiaW5kU2hhcGUgPSB7fVxuXG5leHBvcnQgY29uc3QgdmFsdWUgPSBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWRcbmV4cG9ydCBjb25zdCBwYXJhbXMgPSBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMuc2hhcGUoYmluZFNoYXBlKSlcblxuYmluZFNoYXBlLnZhbHVlID0gdmFsdWVcbmJpbmRTaGFwZS5wYXJhbXMgPSBwYXJhbXNcblxuZXhwb3J0IGNvbnN0IGJpbmRpbmcgPSBQcm9wVHlwZXMuc2hhcGUoYmluZFNoYXBlKVxuIiwiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJ1xuaW1wb3J0IHsgYmluZGluZyB9IGZyb20gJy4uL2JpbmRpbmdQcm9wVHlwZXMnXG5cbmV4cG9ydCBjb25zdCBjb21ibyA9IFByb3BUeXBlcy5zaGFwZSh7XG4gIGlkZW50aWZpZXI6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGluZGV4OiBQcm9wVHlwZXMubnVtYmVyLFxuICBiaW5kaW5nczogUHJvcFR5cGVzLmFycmF5T2YoYmluZGluZyksXG4gIGtleVBvc2l0aW9uczogUHJvcFR5cGVzLmFycmF5T2YoXG4gICAgUHJvcFR5cGVzLm51bWJlclxuICApLmlzUmVxdWlyZWRcbn0pXG4iLCJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnXG5pbXBvcnQgeyBiaW5kaW5nIH0gZnJvbSAnLi9iaW5kaW5nUHJvcFR5cGVzJ1xuaW1wb3J0IHsgY29tYm8gfSBmcm9tICcuL0NvbWJvcy9jb21ib1Byb3BUeXBlcydcblxuZXhwb3J0IGNvbnN0IGxheWVyID0gUHJvcFR5cGVzLnNoYXBlKHtcbiAgaW5kZXg6IFByb3BUeXBlcy5udW1iZXIsXG4gIG5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGlkZW50aWZpZXI6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGJpbmRpbmdzOiBQcm9wVHlwZXMuYXJyYXlPZihiaW5kaW5nKS5pc1JlcXVpcmVkLFxuICBzZW5zb3JCaW5kaW5nczogUHJvcFR5cGVzLmFycmF5T2YoYmluZGluZylcbn0pXG5cbmV4cG9ydCBjb25zdCBrZXltYXAgPSBQcm9wVHlwZXMuc2hhcGUoe1xuICBsYXllcnM6IFByb3BUeXBlcy5hcnJheU9mKGxheWVyKS5pc1JlcXVpcmVkLFxuICBjb21ib3M6IFByb3BUeXBlcy5hcnJheU9mKGNvbWJvKVxufSlcbiIsIlxuZXhwb3J0IGZ1bmN0aW9uIHNhbml0eUNoZWNrTGF5b3V0IChsYXlvdXQpIHtcbiAgcmV0dXJuIHtcbiAgICBsYXlvdXRNaXNzaW5nUG9zaXRpb25zOiBzYW5pdHlDaGVja1Bvc2lpdGlvbnMobGF5b3V0KVxuICAgIC8vIG92ZXJsYXBwZWRQb3NpdGlvbnM6IHNhbml0eUNoZWNrT3ZlcmxhcHBpbmdQb3NpdGlvbnMobGF5b3V0KSxcbiAgICAvLyB1bm9yZGVyZWRSb3dzOiBzYW5pdHlDaGVja1Jvd09yZGVyaW5nKGxheW91dCksXG4gICAgLy8gdW5kZXJlcmVkQ29sdW1uczogc2FuaXR5Q2hlY2tDb2x1bW5PcmRlcmluZyhsYXlvdXQpXG4gIH1cbn1cblxuZnVuY3Rpb24gc2FuaXR5Q2hlY2tQb3NpaXRpb25zIChsYXlvdXQpIHtcbiAgY29uc3Qgbm9LZXlIYXNQb3NpdGlvbiA9IGxheW91dC5ldmVyeShrZXkgPT4gKFxuICAgIGtleS5yb3cgPT09IHVuZGVmaW5lZCAmJlxuICAgIGtleS5jb2wgPT09IHVuZGVmaW5lZFxuICApKVxuXG4gIHJldHVybiBub0tleUhhc1Bvc2l0aW9uXG4gICAgPyBbJ0xheW91dCBpbiBpbmZvLmpzb24gaGFzIG5vIHJvdy9jb2wgZGVmaW5pdGlvbnMuIEdlbmVyYXRlZCBrZXltYXAgZmlsZXMgd2lsbCBub3QgYmUgbmljZWx5IGZvcm1hdHRlZC4nXVxuICAgIDogW11cbn1cblxuZnVuY3Rpb24gc2FuaXR5Q2hlY2tPdmVybGFwcGluZ1Bvc2l0aW9ucyAobGF5b3V0KSB7XG4gIGNvbnN0IGVycm9ycyA9IFtdXG4gIGNvbnN0IGtleXNCeVBvc2l0aW9uID0gbGF5b3V0LnJlZHVjZSgoYWNjLCBrZXksIGkpID0+IHtcbiAgICBjb25zdCB7IHJvdywgY29sIH0gPSBrZXlcbiAgICBjb25zdCBwb3NpdGlvbiA9IGAoJHtyb3d9LCR7Y29sfSlgXG5cbiAgICBpZiAocm93ICE9PSB1bmRlZmluZWQgJiYgY29sICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGFjY1twb3NpdGlvbl0gPSBbLi4uKGFjY1twb3NpdGlvbl0gfHwgW10pLCBpXVxuICAgIH1cblxuICAgIHJldHVybiBhY2NcbiAgfSwge30pXG5cbiAgZm9yIChjb25zdCBncm91cCBvZiBPYmplY3QudmFsdWVzKGtleXNCeVBvc2l0aW9uKSkge1xuICAgIGlmIChncm91cC5sZW5ndGggPD0gMSkge1xuICAgICAgY29udGludWVcbiAgICB9XG5cbiAgICBjb25zdCB7IHJvdywgY29sIH0gPSBsYXlvdXRbZ3JvdXBbMF1dXG4gICAgZm9yIChjb25zdCBpbmRleCBvZiBncm91cCkge1xuICAgICAgZXJyb3JzLnB1c2goe1xuICAgICAgICBsb2NhdGlvbjogYExheW91dCBKU09OIFske2luZGV4fV1gLFxuICAgICAgICBwb3NpdGlvbjogeyByb3csIGNvbCB9XG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBlcnJvcnNcbn1cblxuZnVuY3Rpb24gc2FuaXR5Q2hlY2tSb3dPcmRlcmluZyAobGF5b3V0KSB7XG4gIGxldCBjdXJyZW50Um93ID0gLUluZmluaXR5XG4gIGNvbnN0IGVycm9ycyA9IFtdXG5cbiAgZm9yIChjb25zdCBpbmRleCBvZiBsYXlvdXQua2V5cygpKSB7XG4gICAgY29uc3QgeyByb3cgfSA9IGxheW91dFtpbmRleF1cbiAgICBpZiAocm93ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuXG4gICAgaWYgKHJvdyA8IGN1cnJlbnRSb3cpIHtcbiAgICAgIGVycm9ycy5wdXNoKHsgbG9jYXRpb246IGBMYXlvdXQgSlNPTiBbJHtpbmRleH1dYCB9KVxuICAgIH0gZWxzZSB7XG4gICAgICBjdXJyZW50Um93ID0gcm93XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGVycm9yc1xufVxuXG5mdW5jdGlvbiBzYW5pdHlDaGVja0NvbHVtbk9yZGVyaW5nIChsYXlvdXQpIHtcbiAgbGV0IGN1cnJlbnRSb3cgPSAwXG4gIGxldCBjdXJyZW50Q29sID0gLUluZmluaXR5XG4gIGNvbnN0IGVycm9ycyA9IFtdXG5cbiAgZm9yIChjb25zdCBpbmRleCBvZiBsYXlvdXQua2V5cygpKSB7XG4gICAgY29uc3QgeyByb3csIGNvbCB9ID0gbGF5b3V0W2luZGV4XVxuICAgIGlmIChyb3cgPT09IHVuZGVmaW5lZCB8fCBjb2wgPT09IHVuZGVmaW5lZCkge1xuICAgICAgY29udGludWVcbiAgICB9XG5cbiAgICBpZiAoY3VycmVudFJvdyAhPT0gcm93KSB7XG4gICAgICBjdXJyZW50Um93ID0gcm93XG4gICAgICBjdXJyZW50Q29sID0gLUluZmluaXR5XG4gICAgfVxuXG4gICAgaWYgKGNvbCA8IGN1cnJlbnRDb2wpIHtcbiAgICAgIGVycm9ycy5wdXNoKHsgbG9jYXRpb246IGBMYXlvdXQgSlNPTiBbJHtpbmRleH1dYCB9KVxuICAgIH0gZWxzZSB7XG4gICAgICBjdXJyZW50Q29sID0gY29sXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGVycm9yc1xufVxuIiwiaW1wb3J0IGdyb3VwQnkgZnJvbSAnbG9kYXNoL2dyb3VwQnknXG5cbmltcG9ydCB7IHNhbml0eUNoZWNrTGF5b3V0IH0gZnJvbSAnLi9zYW5pdHktY2hlY2tzLWxheW91dCdcbmltcG9ydCByZXNlcnZlZElkZW50aWZpZXJzIGZyb20gJ3ptay1kYXRhL2RhdGEvZXh0cmFjdGVkLWRhdGEvem1rLXJlc2VydmVkLWlkZW50aWZpZXJzLmpzb24nXG5cbmNvbnN0IHNlbGVjdE5hbWUgPSBpdGVtID0+IGl0ZW0ubmFtZVxuY29uc3Qgc2VsZWN0QmluZCA9IGl0ZW0gPT4gaXRlbS5sYWJlbHNbMF1cbmNvbnN0IHNlbGVjdExhYmVsID0gaXRlbSA9PiBpdGVtLnByb3BlcnRpZXMubGFiZWwucGFyc2VkXG5cbmV4cG9ydCBmdW5jdGlvbiBzYW5pdHlDaGVjayAoa2V5bWFwLCBsYXlvdXQpIHtcbiAgcmV0dXJuIHtcbiAgICBub2RlTmFtZXM6IHNhbml0eUNoZWNrTm9kZU5hbWVzKGtleW1hcCksXG4gICAgbm9kZUxhYmVsczogc2FuaXR5Q2hlY2tOb2RlTGFiZWxzKGtleW1hcCksXG4gICAgbm9kZVJlZmVyZW5jZXM6IHNhbml0eUNoZWNrTm9kZVJlZmVyZW5jZXMoa2V5bWFwKSxcbiAgICAuLi5zYW5pdHlDaGVja0xheW91dChsYXlvdXQpXG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0RHVwbGljYXRlc0J5IChjb2xsZWN0aW9uLCBrZXkpIHtcbiAgY29uc3QgaXRlbXNCeUtleSA9IGdyb3VwQnkoY29sbGVjdGlvbiwga2V5KVxuICByZXR1cm4gT2JqZWN0LnZhbHVlcyhpdGVtc0J5S2V5KVxuICAgIC5maWx0ZXIoZ3JvdXAgPT4gZ3JvdXAubGVuZ3RoID4gMSlcbn1cblxuZnVuY3Rpb24gZG9lc05hbWVTdWdnZXN0UGFzc3dvcmQgKG5hbWUpIHtcbiAgY29uc3QgcGF0dGVybnMgPSBbXG4gICAgLyhefFtcXGJfXSlwYXNzKHdvcmQpPyhbXFxiX118JCkvXG4gIF1cbiAgcmV0dXJuIHBhdHRlcm5zLnNvbWUocGF0dGVybiA9PiBuYW1lLm1hdGNoKHBhdHRlcm4pKVxufVxuXG5mdW5jdGlvbiBzYW5pdHlDaGVja05vZGVOYW1lcyAoa2V5bWFwKSB7XG4gIGNvbnN0IGxheWVyTmFtZXMgPSBnZXRMYXllck5vZGVOYW1lcyhrZXltYXAubGF5ZXJzKVxuICBjb25zdCBjb21ib05hbWVzID0gZ2V0Q29tYm9Ob2RlTmFtZXMoa2V5bWFwLmNvbWJvcylcbiAgY29uc3QgbWFjcm9OYW1lcyA9IGdldE1hY3JvTm9kZU5hbWVzKGtleW1hcC5tYWNyb3MpXG4gIGNvbnN0IGJlaGF2aW9yTmFtZXMgPSBnZXRCZWhhdmlvck5vZGVOYW1lcyhrZXltYXAuYmVoYXZpb3JzKVxuXG4gIGNvbnN0IGR1cGxpY2F0ZXMgPSBbXG4gICAgLi4uZ2V0RHVwbGljYXRlc0J5KGxheWVyTmFtZXMsICduYW1lJyksXG4gICAgLi4uZ2V0RHVwbGljYXRlc0J5KGNvbWJvTmFtZXMsICduYW1lJyksXG4gICAgLi4uZ2V0RHVwbGljYXRlc0J5KG1hY3JvTmFtZXMsICduYW1lJyksXG4gICAgLi4uZ2V0RHVwbGljYXRlc0J5KGJlaGF2aW9yTmFtZXMsICduYW1lJylcbiAgXVxuXG4gIGNvbnN0IHJlZGVmaW5lZCA9IFtcbiAgICAuLi5sYXllck5hbWVzLmZpbHRlcihsYXllciA9PiByZXNlcnZlZElkZW50aWZpZXJzLmluY2x1ZGVzKGxheWVyLm5hbWUpKSxcbiAgICAuLi5jb21ib05hbWVzLmZpbHRlcihjb21ibyA9PiByZXNlcnZlZElkZW50aWZpZXJzLmluY2x1ZGVzKGNvbWJvLm5hbWUpKSxcbiAgICAuLi5tYWNyb05hbWVzLmZpbHRlcihtYWNybyA9PiByZXNlcnZlZElkZW50aWZpZXJzLmluY2x1ZGVzKG1hY3JvLm5hbWUpKSxcbiAgICAuLi5iZWhhdmlvck5hbWVzLmZpbHRlcihiZWhhdmlvciA9PiByZXNlcnZlZElkZW50aWZpZXJzLmluY2x1ZGVzKGJlaGF2aW9yLm5hbWUpKVxuICBdXG5cbiAgY29uc3QgcGFzc3dvcmRNYWNyb3MgPSBbXG4gICAgLi4ubWFjcm9OYW1lcy5maWx0ZXIobWFjcm8gPT4gZG9lc05hbWVTdWdnZXN0UGFzc3dvcmQobWFjcm8ubmFtZSkpXG4gIF1cblxuICByZXR1cm4geyBkdXBsaWNhdGVzLCByZWRlZmluZWQsIHBhc3N3b3JkTWFjcm9zIH1cbn1cblxuZnVuY3Rpb24gc2FuaXR5Q2hlY2tOb2RlTGFiZWxzIChrZXltYXApIHtcbiAgY29uc3QgZHVwbGljYXRlcyA9IGdldER1cGxpY2F0ZXNCeShbXS5jb25jYXQoXG4gICAgZ2V0TGF5ZXJMYWJlbHMoa2V5bWFwLmxheWVycyksXG4gICAgZ2V0TWFjcm9MYWJlbHMoa2V5bWFwLm1hY3JvcyksXG4gICAgZ2V0QmVoYXZpb3JMYWJlbHMoa2V5bWFwLmJlaGF2aW9ycylcbiAgKSwgJ2xhYmVsJylcblxuICByZXR1cm4geyBkdXBsaWNhdGVzIH1cbn1cblxuZnVuY3Rpb24gc2FuaXR5Q2hlY2tOb2RlUmVmZXJlbmNlcyAoa2V5bWFwKSB7XG4gIGNvbnN0IG5vZGVzQnlSZWYgPSBncm91cEJ5KFtdLmNvbmNhdChcbiAgICBnZXRNYWNyb1JlZmVyZW5jZXMoa2V5bWFwLm1hY3JvcyksXG4gICAgZ2V0QmVoYXZpb3JSZWZlcmVuY2VzKGtleW1hcC5iZWhhdmlvcnMpXG4gICksICdyZWYnKVxuXG4gIGNvbnN0IGR1cGxpY2F0ZXMgPSBPYmplY3QudmFsdWVzKG5vZGVzQnlSZWYpLnJlZHVjZSgoZHVwbGljYXRlcywgbm9kZXMpID0+IHtcbiAgICBpZiAobm9kZXMubGVuZ3RoID4gMSkge1xuICAgICAgZHVwbGljYXRlcy5wdXNoKG5vZGVzKVxuICAgIH1cblxuICAgIHJldHVybiBkdXBsaWNhdGVzXG4gIH0sIFtdKVxuXG4gIHJldHVybiB7IGR1cGxpY2F0ZXMgfVxufVxuXG5mdW5jdGlvbiBnZXRMYXllck5vZGVOYW1lcyAobGF5ZXJzKSB7XG4gIHJldHVybiBsYXllcnMubWFwKChsYXllciwgaSkgPT4gKHtcbiAgICBsb2NhdGlvbjogYEtleW1hcCAtIExheWVyICMke2l9ICgke2xheWVyLm5hbWV9KWAsXG4gICAgcGF0aDogYGtleW1hcC5sYXllcnNbJHtpfV1gLFxuICAgIG5hbWU6IGxheWVyLm5hbWVcbiAgfSkpXG59XG5cbmZ1bmN0aW9uIGdldExheWVyTGFiZWxzIChsYXllcnMpIHtcbiAgcmV0dXJuIGxheWVycy5yZWR1Y2UoKGxhYmVscywgbGF5ZXIsIGkpID0+IHtcbiAgICBpZiAobGF5ZXIubGFiZWwpIHtcbiAgICAgIGxhYmVscy5wdXNoKHtcbiAgICAgICAgbG9jYXRpb246IGBLZXltYXAgLSBMYXllciAjJHtpfSAoJHtsYXllci5uYW1lfSlgLFxuICAgICAgICBwYXRoOiBga2V5bWFwLmxheWVyc1ske2l9XS5sYWJlbGAsXG4gICAgICAgIGxhYmVsOiBsYXllci5sYWJlbFxuICAgICAgfSlcbiAgICB9XG5cbiAgICByZXR1cm4gbGFiZWxzXG4gIH0sIFtdKVxufVxuXG5mdW5jdGlvbiBnZXRDb21ib05vZGVOYW1lcyAoY29tYm9zKSB7XG4gIHJldHVybiBjb21ib3MubWFwKChjb21ibywgaSkgPT4gKHtcbiAgICBsb2NhdGlvbjogYENvbWJvcyAtIENvbWJvICMke2l9ICgke2NvbWJvLmlkZW50aWZpZXJ9KWAsXG4gICAgcGF0aDogYGNvbWJvc1ske2l9XS5uYW1lYCxcbiAgICBuYW1lOiBjb21iby5pZGVudGlmaWVyXG4gIH0pKVxufVxuXG5mdW5jdGlvbiBnZXRNYWNyb05vZGVOYW1lcyAobWFjcm9zKSB7XG4gIHJldHVybiBtYWNyb3MubWFwKChtYWNybywgaSkgPT4gKHtcbiAgICBsb2NhdGlvbjogYE1hY3JvcyAtIE1hY3JvICMke2l9ICgke3NlbGVjdE5hbWUobWFjcm8pfSlgLFxuICAgIHBhdGg6IGBtYWNyb3NbJHtpfV0ubmFtZWAsXG4gICAgbmFtZTogc2VsZWN0TmFtZShtYWNybylcbiAgfSkpXG59XG5cbmZ1bmN0aW9uIGdldE1hY3JvTGFiZWxzIChtYWNyb3MpIHtcbiAgcmV0dXJuIG1hY3Jvcy5yZWR1Y2UoKGxhYmVscywgbWFjcm8sIGkpID0+IHtcbiAgICBpZiAobWFjcm8ubGFiZWwpIHtcbiAgICAgIGxhYmVscy5wdXNoKHtcbiAgICAgICAgbG9jYXRpb246IGBNYWNyb3MgLSBNYWNybyAjJHtpfSAoJHtzZWxlY3RMYWJlbChtYWNybyl9KSAtIExhYmVsYCxcbiAgICAgICAgcGF0aDogYG1hY3Jvc1ske2l9XS5sYWJlbGAsXG4gICAgICAgIGxhYmVsOiBzZWxlY3RMYWJlbChtYWNybylcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgcmV0dXJuIGxhYmVsc1xuICB9LCBbXSlcbn1cblxuZnVuY3Rpb24gZ2V0TWFjcm9SZWZlcmVuY2VzIChtYWNyb3MpIHtcbiAgcmV0dXJuIG1hY3Jvcy5tYXAoKG1hY3JvLCBpKSA9PiAoe1xuICAgIGxvY2F0aW9uOiBgTWFjcm9zID4gTWFjcm8gIyR7aX0gKCR7c2VsZWN0QmluZChtYWNybyl9KWAsXG4gICAgcGF0aDogYG1hY3Jvc1ske2l9XS5uYW1lYCxcbiAgICByZWY6IHNlbGVjdEJpbmQobWFjcm8pXG4gIH0pKVxufVxuXG5mdW5jdGlvbiBnZXRCZWhhdmlvck5vZGVOYW1lcyAoYmVoYXZpb3JzKSB7XG4gIHJldHVybiBiZWhhdmlvcnMubWFwKChiZWhhdmlvciwgaSkgPT4gKHtcbiAgICBsb2NhdGlvbjogYEJlaGF2aW9ycyAtIEJlaGF2aW9yICMke2l9ICgke3NlbGVjdEJpbmQoYmVoYXZpb3IpfSkgLSBOYW1lYCxcbiAgICBwYXRoOiBgYmVoYXZpb3JzWyR7aX1dLm5hbWVgLFxuICAgIG5hbWU6IHNlbGVjdE5hbWUoYmVoYXZpb3IpXG4gIH0pKVxufVxuXG5mdW5jdGlvbiBnZXRCZWhhdmlvckxhYmVscyAoYmVoYXZpb3JzKSB7XG4gIHJldHVybiBiZWhhdmlvcnMucmVkdWNlKChsYWJlbHMsIGJlaGF2aW9yLCBpKSA9PiB7XG4gICAgY29uc3QgbGFiZWwgPSBzZWxlY3RMYWJlbChiZWhhdmlvcilcbiAgICBjb25zdCByZWYgPSBzZWxlY3RCaW5kKGJlaGF2aW9yKVxuICAgIGlmIChsYWJlbCkge1xuICAgICAgbGFiZWxzLnB1c2goe1xuICAgICAgICBsb2NhdGlvbjogYEJlaGF2aW9ycyAtIEJlaGF2aW9yICMke2l9ICgke3JlZn0pIC0gTGFiZWxgLFxuICAgICAgICBwYXRoOiBgYmVoYXZpb3JzWyR7aX1dLmxhYmVsYCxcbiAgICAgICAgbGFiZWxcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgcmV0dXJuIGxhYmVsc1xuICB9LCBbXSlcbn1cblxuZnVuY3Rpb24gZ2V0QmVoYXZpb3JSZWZlcmVuY2VzIChiZWhhdmlvcnMpIHtcbiAgcmV0dXJuIGJlaGF2aW9ycy5tYXAoKGJlaGF2aW9yLCBpKSA9PiAoe1xuICAgIGxvY2F0aW9uOiBgQmVoYXZpb3JzIC0gQmVoYXZpb3IgIyR7aX0gKCR7c2VsZWN0QmluZChiZWhhdmlvcil9KSAtIEJpbmRgLFxuICAgIHBhdGg6IGBiZWhhdmlvcnNbJHtpfV0uYmluZGAsXG4gICAgcmVmOiBzZWxlY3RCaW5kKGJlaGF2aW9yKVxuICB9KSlcbn1cbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMl0udXNlWzFdIS4vc3R5bGVzLm1vZHVsZS5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1syXS51c2VbMV0hLi9zdHlsZXMubW9kdWxlLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCBjb21wYWN0IGZyb20gJ2xvZGFzaC9jb21wYWN0J1xuaW1wb3J0IHsgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCdcbmltcG9ydCBJY29uIGZyb20gJy4uLy4uL0NvbW1vbi9JY29uJ1xuXG5pbXBvcnQgTGluayBmcm9tICcuLi8uLi9Db21tb24vTGluaydcbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9zdHlsZXMubW9kdWxlLmNzcydcblxuZnVuY3Rpb24gRGVmYXVsdFdhcm5pbmdJdGVtIChpdGVtKSB7XG4gIHJldHVybiBpdGVtLmxvY2F0aW9uXG59XG5cbmNvbnN0IGxheW91dFdpa2lVcmwgPSAnaHR0cHM6Ly9naXRodWIuY29tL25pY2tjb3V0c29zL2tleW1hcC1lZGl0b3Ivd2lraS9EZWZpbmluZy1rZXlib2FyZC1sYXlvdXRzJ1xuXG5mdW5jdGlvbiBXYXJuaW5nQ2F0ZWdvcnkgKHByb3BzKSB7XG4gIGNvbnN0IHsgbmFtZSwgZXhwbGFuYXRpb24sIHdhcm5pbmdzLCByZW5kZXJXYXJuaW5nID0gRGVmYXVsdFdhcm5pbmdJdGVtIH0gPSBwcm9wc1xuICBjb25zdCBbY29sbGFwc2VkLCBzZXRDb2xsYXBzZWRdID0gdXNlU3RhdGUod2FybmluZ3MubGVuZ3RoID09PSAwKVxuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9e2NvbXBhY3QoW1xuICAgICAgc3R5bGVzLndhcm5pbmdDYXRlZ29yeSxcbiAgICAgIHdhcm5pbmdzLmxlbmd0aCA9PT0gMCAmJiBzdHlsZXMuZW1wdHlDYXRlZ29yeSxcbiAgICAgIGNvbGxhcHNlZCAmJiBzdHlsZXMuY29sbGFwc2VkQ2F0ZWdvcnlcbiAgICBdKS5qb2luKCcgJyl9PlxuICAgICAgPGgzIG9uQ2xpY2s9eygpID0+IHNldENvbGxhcHNlZCghY29sbGFwc2VkKX0+XG4gICAgICAgIDxJY29uIGNsYXNzTmFtZT17c3R5bGVzLmNhcmV0fSBuYW1lPVwiY2FyZXQtZG93blwiIC8+XG4gICAgICAgIHsnICd9IHtuYW1lfSA8ZW0+KHt3YXJuaW5ncy5sZW5ndGh9IGlzc3Vlcyk8L2VtPlxuICAgICAgPC9oMz5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMud2FybmluZ0RldGFpbHN9PlxuICAgICAgICA8YmxvY2txdW90ZT5cbiAgICAgICAgICB7ZXhwbGFuYXRpb259XG4gICAgICAgIDwvYmxvY2txdW90ZT5cbiAgICAgICAge3dhcm5pbmdzLmxlbmd0aCA+IDBcbiAgICAgICAgICA/IChcbiAgICAgICAgICA8dWw+XG4gICAgICAgICAgICB7d2FybmluZ3MubWFwKChpdGVtLCBpKSA9PiAoXG4gICAgICAgICAgICAgIDxsaSBrZXk9e2l9PlxuICAgICAgICAgICAgICAgIHtyZW5kZXJXYXJuaW5nKGl0ZW0pfVxuICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgKSl9XG4gICAgICAgICAgPC91bD5cbiAgICAgICAgICAgIClcbiAgICAgICAgICA6IDxwPk5vIHByb2JsZW1zPC9wPn1cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICApXG59XG5cbmNvbnN0IGlzc3VlID0gKFxuICA8TGluayBleHRlcm5hbCBocmVmPVwiaHR0cHM6Ly9naXRodWIuY29tL25pY2tjb3V0c29zL2tleW1hcC1lZGl0b3IvaXNzdWVzXCI+XG4gICAgaXNzdWVcbiAgPC9MaW5rPlxuKVxuXG5mdW5jdGlvbiBXYXJuaW5ncyAoeyBzYW5pdHlDaGVja3MgfSkge1xuICBjb25zdCB7IG5vZGVOYW1lcywgbm9kZUxhYmVscywgbm9kZVJlZmVyZW5jZXMsIGxheW91dE1pc3NpbmdQb3NpdGlvbnMgfSA9IHNhbml0eUNoZWNrc1xuXG4gIHJldHVybiAoXG4gICAgPGRpdiBzdHlsZT17eyBtYXhXaWR0aDogJzcwMHB4JywgbWFyZ2luOiAnMCBhdXRvJywgcGFkZGluZ0JvdHRvbTogJzYwcHgnIH19PlxuICAgICAgPGgyPldhcm5pbmdzPC9oMj5cblxuICAgICAgPFdhcm5pbmdDYXRlZ29yeVxuICAgICAgICBuYW1lPVwiTGF5b3V0IHJvdy9jb2wgcG9zaXRpb25zXCJcbiAgICAgICAgd2FybmluZ3M9e2xheW91dE1pc3NpbmdQb3NpdGlvbnN9XG4gICAgICAgIGV4cGxhbmF0aW9uPXsoXG4gICAgICAgICAgPD5cbiAgICAgICAgICAgIDxwPlxuICAgICAgICAgICAgICA8ZW0+XG4gICAgICAgICAgICAgICAgWW91ciBrZXlib2FyZCdzIGxheW91dCBtZXRhZGF0YSBzaG91bGQgaW5jbHVkZSBhIDxjb2RlPnJvdzwvY29kZT5cbiAgICAgICAgICAgICAgICBhbmQgPGNvZGU+Y29sPC9jb2RlPiBwcm9wZXJ0eSBmb3IgZWFjaCBrZXkgaW4gb3JkZXIgdG8gZ2VuZXJhdGUgYVxuICAgICAgICAgICAgICAgIHJlYWRhYmxlIGtleW1hcCA8Y29kZT5iaW5kaW5nczwvY29kZT4gYXJyYXkuXG4gICAgICAgICAgICAgIDwvZW0+XG4gICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICA8cD5cbiAgICAgICAgICAgICAgRm9yIG1vcmUgaW5mb3JtYXRpb24gc2VlIDxMaW5rIGV4dGVybmFsIGhyZWY9e2xheW91dFdpa2lVcmx9PlxuICAgICAgICAgICAgICAgIEtleW1hcCBFZGl0b3IgV2lraVxuICAgICAgICAgICAgICA8L0xpbms+LlxuICAgICAgICAgICAgPC9wPlxuICAgICAgICAgIDwvPlxuICAgICAgICApfVxuICAgICAgICByZW5kZXJXYXJuaW5nPXsoKSA9PiB7fX1cbiAgICAgIC8+XG5cbiAgICAgIDxXYXJuaW5nQ2F0ZWdvcnlcbiAgICAgICAgbmFtZT1cIkR1cGxpY2F0ZSBub2RlIG5hbWVzXCJcbiAgICAgICAgd2FybmluZ3M9e25vZGVOYW1lcy5kdXBsaWNhdGVzfVxuICAgICAgICBleHBsYW5hdGlvbj17KFxuICAgICAgICAgIDxwPlxuICAgICAgICAgICAgPGVtPk5vZGUgbmFtZXMgbXVzdCB3aXRoaW4gdGhlIHNhbWUgc2VjdGlvbiBtdXN0IGJlIHVuaXF1ZS48L2VtPlxuICAgICAgICAgIDwvcD5cbiAgICAgICAgKX1cbiAgICAgICAgcmVuZGVyV2FybmluZz17aXRlbXMgPT4gKFxuICAgICAgICAgIDw+XG4gICAgICAgICAgICA8aDQ+TmFtZSA8Y29kZT57aXRlbXNbMF0ubmFtZX08L2NvZGU+IHJlLXVzZWQgaW46PC9oND5cbiAgICAgICAgICAgIDx1bD5cbiAgICAgICAgICAgICAge2l0ZW1zLm1hcCgoaXRlbSwgaikgPT4gKFxuICAgICAgICAgICAgICAgIDxsaSBrZXk9e2p9PntpdGVtLmxvY2F0aW9ufTwvbGk+XG4gICAgICAgICAgICAgICkpfVxuICAgICAgICAgICAgPC91bD5cbiAgICAgICAgICA8Lz5cbiAgICAgICAgKX1cbiAgICAgIC8+XG5cbiAgICAgIDxXYXJuaW5nQ2F0ZWdvcnlcbiAgICAgICAgbmFtZT1cIlJlLWRlZmluaXRpb25zXCJcbiAgICAgICAgd2FybmluZ3M9e25vZGVOYW1lcy5yZWRlZmluZWR9XG4gICAgICAgIGV4cGxhbmF0aW9uPXsoXG4gICAgICAgICAgPHA+XG4gICAgICAgICAgICA8ZW0+Tm9kZSBuYW1lcyBjYW5ub3QgdXNlIGV4aXN0aW5nIFpNSyBpZGVudGlmaWVycy48L2VtPlxuICAgICAgICAgIDwvcD5cbiAgICAgICAgKX1cbiAgICAgIC8+XG5cbiAgICAgIDxXYXJuaW5nQ2F0ZWdvcnlcbiAgICAgICAgbmFtZT1cIk1hY3JvIFBhc3N3b3Jkc1wiXG4gICAgICAgIHdhcm5pbmdzPXtub2RlTmFtZXMucGFzc3dvcmRNYWNyb3N9XG4gICAgICAgIGV4cGxhbmF0aW9uPXsoXG4gICAgICAgICAgPD5cbiAgICAgICAgICAgIDxwPlxuICAgICAgICAgICAgICA8ZW0+XG4gICAgICAgICAgICAgICAgVXNpbmcga2V5Ym9hcmQgbWFjcm9zIHRvIGVudGVyIHBhc3N3b3JkcyBpcyBhIHNlY3VyaXR5IHJpc2sgYW5kXG4gICAgICAgICAgICAgICAgaXMgc3Ryb25nbHkgZGlzY291cmFnZWQuXG4gICAgICAgICAgICAgIDwvZW0+XG4gICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICA8cD5cbiAgICAgICAgICAgICAgUmVjb3JkaW5nIHBhc3N3b3JkcyBpbiB5b3VyIGtleWJvYXJkIG1lYW5zIHRoYXQgYW55b25lIHdpdGhcbiAgICAgICAgICAgICAgcGh5c2ljYWwgYWNjZXNzIHRvIHlvdXIga2V5Ym9hcmQgd291bGQgaGF2ZSBhY2Nlc3MgdG8gY3JlZGVudGlhbHNcbiAgICAgICAgICAgICAgc3RvcmVkIHdpdGhpbiBpdCwgd2hldGhlciB0aGV5IGtub3cgdG8gbG9vayBmb3IgaXQgb3Igbm90LiBBbHNvXG4gICAgICAgICAgICAgIG5vdGUgdGhhdCB0aHJvdWdoIHRoaXMgYXBwbGljYXRpb24geW91IGFyZSByZWNvcmRpbmcga2V5Ym9hcmRcbiAgICAgICAgICAgICAgY29uZmlndXJhdGlvbiBpbiBhIEdpdCByZXBvc2l0b3J5IGFuZCBzdG9yaW5nIGNyZWRlbnRpYWxzIGluIGFcbiAgICAgICAgICAgICAgY29kZSByZXBvc2l0b3J5IGlzIG5vdCBjb25zaWRlcmVkIGEgc2FmZSBwcmFjdGljZSAoZXZlbiBpZiB0aGVcbiAgICAgICAgICAgICAgcmVwb3NpdG9yeSBpcyBwcml2YXRlKS5cbiAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICAgIDxwPlxuICAgICAgICAgICAgICBBbnkgbWFjcm9zIGxpc3RlZCBoZXJlIGhhdmUgbmFtZXMgd2hpY2ggc2VlbSB0byBzdWdnZXN0IHRoYXQgdGhleVxuICAgICAgICAgICAgICBhcmUgdXNlZCBmb3IgcGFzc3dvcmQgZW50cnkuIElmIHRoYXQgaXMgdGhlIGNhc2UgSSB3b3VsZCBlbmNvdXJhZ2VcbiAgICAgICAgICAgICAgeW91IHRvIHJlbW92ZSB0aGVtIGFuZCBjaGFuZ2UgdGhlIGFzc29jaWF0ZWQgcGFzc3dvcmQocykgaWZcbiAgICAgICAgICAgICAgbmVlZGVkLiBJZiB0aGlzIGlzIGEgbWlzdGFrZSBmZWVsIGZyZWUgdG8gY3JlYXRlIGFuIHtpc3N1ZX0gdG9cbiAgICAgICAgICAgICAgaGVscCBtZSBhdm9pZCBmYWxzZSBhbGFybXMgaW4gdGhlIGZ1dHVyZSFcbiAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICA8Lz5cbiAgICAgICAgKX1cbiAgICAgIC8+XG5cbiAgICAgIDxXYXJuaW5nQ2F0ZWdvcnlcbiAgICAgICAgbmFtZT1cIkR1cGxpY2F0ZSBsYWJlbHNcIlxuICAgICAgICB3YXJuaW5ncz17bm9kZUxhYmVscy5kdXBsaWNhdGVzfVxuICAgICAgICBleHBsYW5hdGlvbj17KFxuICAgICAgICAgIDxwPlxuICAgICAgICAgICAgPGVtPkxhYmVsIHByb3BlcnR5IHZhbHVlcyBtdXN0IGJlIHVuaXF1ZSB0aHJvdWdob3V0IHRoZSBlbnRpcmUga2V5bWFwLjwvZW0+XG4gICAgICAgICAgPC9wPlxuICAgICAgICApfVxuICAgICAgICByZW5kZXJXYXJuaW5nPXtpdGVtcyA9PiAoXG4gICAgICAgICAgPD5cbiAgICAgICAgICAgIDxoND5OYW1lIDxjb2RlPntpdGVtc1swXS5sYWJlbH08L2NvZGU+IHJlLXVzZWQgaW46PC9oND5cbiAgICAgICAgICAgIDx1bD5cbiAgICAgICAgICAgICAge2l0ZW1zLm1hcCgoaXRlbSwgaikgPT4gKFxuICAgICAgICAgICAgICAgIDxsaSBrZXk9e2p9PntpdGVtLmxvY2F0aW9ufTwvbGk+XG4gICAgICAgICAgICAgICkpfVxuICAgICAgICAgICAgPC91bD5cbiAgICAgICAgICA8Lz5cbiAgICAgICAgKX1cbiAgICAgIC8+XG5cbiAgICAgIDxXYXJuaW5nQ2F0ZWdvcnlcbiAgICAgICAgbmFtZT1cIkR1cGxpY2F0ZSBub2RlIHJlZmVyZW5jZXNcIlxuICAgICAgICB3YXJuaW5ncz17bm9kZVJlZmVyZW5jZXMuZHVwbGljYXRlc31cbiAgICAgICAgZXhwbGFuYXRpb249eyhcbiAgICAgICAgICA8cD5cbiAgICAgICAgICAgIDxlbT5Ob2RlIHJlZmVyZW5jZXMgbXVzdCBiZSB1bmlxdWUgdGhyb3VnaG91dCB0aGUgZW50aXJlIGtleW1hcC48L2VtPlxuICAgICAgICAgIDwvcD5cbiAgICAgICAgKX1cbiAgICAgICAgcmVuZGVyV2FybmluZz17aXRlbXMgPT4gKFxuICAgICAgICAgIDw+XG4gICAgICAgICAgICA8aDQ+UmVmZXJlbmNlIDxjb2RlPiZhbXA7e2l0ZW1zWzBdLnJlZn08L2NvZGU+IHJlLXVzZWQgaW46PC9oND5cbiAgICAgICAgICAgIDx1bD5cbiAgICAgICAgICAgICAge2l0ZW1zLm1hcCgoaXRlbSwgaikgPT4gKFxuICAgICAgICAgICAgICAgIDxsaSBrZXk9e2p9PntpdGVtLmxvY2F0aW9ufTwvbGk+XG4gICAgICAgICAgICAgICkpfVxuICAgICAgICAgICAgPC91bD5cbiAgICAgICAgICA8Lz5cbiAgICAgICAgKX1cbiAgICAgIC8+XG4gICAgPC9kaXY+XG4gIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgV2FybmluZ3NcbiIsImltcG9ydCB7IGNvbXBhY3QgfSBmcm9tICdsb2Rhc2gnXG5pbXBvcnQgeyBGcmFnbWVudCwgdXNlQ29udGV4dCwgdXNlTWVtbywgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCdcbmltcG9ydCB7IHVzZVNlbGVjdG9yIH0gZnJvbSAncmVhY3QtcmVkdXgnXG5cbmltcG9ydCBDb250ZXh0IGZyb20gJy4vQ29udGV4dCdcbmltcG9ydCBCZWhhdmlvcnMgZnJvbSAnLi9CZWhhdmlvcnMvQmVoYXZpb3JzJ1xuaW1wb3J0IENvbWJvRWRpdG9yIGZyb20gJy4vQ29tYm9zL0NvbWJvRWRpdG9yJ1xuaW1wb3J0IExheWVyRWRpdG9yIGZyb20gJy4vTGF5ZXJzL0xheWVyRWRpdG9yJ1xuaW1wb3J0IE1hY3JvRWRpdG9yIGZyb20gJy4vTWFjcm9zL01hY3JvRWRpdG9yJ1xuaW1wb3J0ICogYXMga2V5bWFwUHJvcHR5cGVzIGZyb20gJy4va2V5bWFwUHJvcFR5cGVzJ1xuaW1wb3J0IHN0eWxlcyBmcm9tICcuL3N0eWxlcy5tb2R1bGUuY3NzJ1xuaW1wb3J0IHsgc2FuaXR5Q2hlY2sgfSBmcm9tICcuL1dhcm5pbmdzL3Nhbml0eS1jaGVja3MnXG5pbXBvcnQgV2FybmluZ3MgZnJvbSAnLi9XYXJuaW5ncy9XYXJuaW5ncydcbmltcG9ydCB7IExheW91dENvbnRleHQgfSBmcm9tICcuLi9Db250ZXh0cy9MYXlvdXQnXG5cbi8vIGltcG9ydCBnaXRodWIgZnJvbSAnLi4vU291cmNlcy9HaXRodWIvYXBpJ1xuXG4vLyBmdW5jdGlvbiB1c2VGZWF0dXJlcyAoKSB7XG4vLyAgIGNvbnN0IFtmZWF0dXJlcywgc2V0RmVhdHVyZXNdID0gdXNlU3RhdGUoeyBiZXRhRmVhdHVyZXM6IFtdIH0pXG4vLyAgIHVzZUVmZmVjdCgoKSA9PiB7XG4vLyAgICAgKGFzeW5jIGZ1bmN0aW9uICgpIHtcbi8vICAgICAgIHNldEZlYXR1cmVzKGF3YWl0IGdpdGh1Yi5mZXRjaEF2YWlsYWJsZUZlYXR1cmVzKCkpXG4vLyAgICAgfSkoKVxuLy8gICB9LCBbc2V0RmVhdHVyZXNdKVxuXG4vLyAgIHJldHVybiBmZWF0dXJlc1xuLy8gfVxuXG4vLyBpbXBvcnQgTGF5b3V0RWRpdG9yIGZyb20gJy4vTGF5b3V0L0xheW91dEVkaXRvcidcblxuZnVuY3Rpb24gVGFicyAoeyB0ZXh0LCB0YWJzLCBkZWZhdWx0VGFiLCBjaGlsZHJlbiB9KSB7XG4gIGNvbnN0IFthY3RpdmVUYWIsIHNldEFjdGl2ZVRhYl0gPSB1c2VTdGF0ZShkZWZhdWx0VGFiKVxuXG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIDxoMyBzdHlsZT17eyBkaXNwbGF5OiAnaW5saW5lJyB9fT57dGV4dH08L2gzPlxuICAgICAgPHVsIGNsYXNzTmFtZT17c3R5bGVzLmVkaXRvck1vZGVUYWJzfT5cbiAgICAgICAge3RhYnMubWFwKCh7IG5hbWU6IHRhYiwgdGFiQ2xhc3NlcyA9IFtdIH0sIGkpID0+IChcbiAgICAgICAgICA8bGlcbiAgICAgICAgICAgIGtleT17aX1cbiAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHNldEFjdGl2ZVRhYihpKX1cbiAgICAgICAgICAgIGNsYXNzTmFtZT17Y29tcGFjdChbXG4gICAgICAgICAgICAgIGFjdGl2ZVRhYiA9PT0gaSAmJiBzdHlsZXMuYWN0aXZlRWRpdFRhYixcbiAgICAgICAgICAgICAgLi4udGFiQ2xhc3Nlc1xuICAgICAgICAgICAgXSkuam9pbignICcpfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHt0YWJ9XG4gICAgICAgICAgPC9saT5cbiAgICAgICAgKSl9XG4gICAgICA8L3VsPlxuICAgICAge2NoaWxkcmVuW2FjdGl2ZVRhYl19XG4gICAgPC8+XG4gIClcbn1cblxuY29uc3Qgc2VsZWN0S2V5bWFwID0gc3RhdGUgPT4gc3RhdGUua2V5Ym9hcmQua2V5bWFwXG5cbmZ1bmN0aW9uIEtleWJvYXJkIChwcm9wcykge1xuICBjb25zdCBrZXltYXAgPSB1c2VTZWxlY3RvcihzZWxlY3RLZXltYXApXG4gIGNvbnN0IHsgbGF5b3V0IH0gPSB1c2VDb250ZXh0KExheW91dENvbnRleHQpXG4gIGNvbnN0IHsgc2Vuc29ycyB9ID0gcHJvcHNcbiAgY29uc3Qgc2FuaXR5Q2hlY2tzID0gdXNlTWVtbygoKSA9PiBzYW5pdHlDaGVjayhrZXltYXAsIGxheW91dCksIFtrZXltYXAsIGxheW91dF0pXG4gIGNvbnN0IHdhcm5pbmdDb3VudCA9IHVzZU1lbW8oKCkgPT4ge1xuICAgIGNvbnN0IHsgbm9kZU5hbWVzLCBub2RlTGFiZWxzLCBub2RlUmVmZXJlbmNlcywgbGF5b3V0TWlzc2luZ1Bvc2l0aW9ucyB9ID0gc2FuaXR5Q2hlY2tzXG4gICAgcmV0dXJuIChcbiAgICAgIG5vZGVOYW1lcy5kdXBsaWNhdGVzLmxlbmd0aCArXG4gICAgICBub2RlTmFtZXMucmVkZWZpbmVkLmxlbmd0aCArXG4gICAgICBub2RlTmFtZXMucGFzc3dvcmRNYWNyb3MubGVuZ3RoICtcbiAgICAgIG5vZGVMYWJlbHMuZHVwbGljYXRlcy5sZW5ndGggK1xuICAgICAgbm9kZVJlZmVyZW5jZXMuZHVwbGljYXRlcy5sZW5ndGggK1xuICAgICAgbGF5b3V0TWlzc2luZ1Bvc2l0aW9ucy5sZW5ndGhcbiAgICApXG4gIH0sIFtzYW5pdHlDaGVja3NdKVxuXG4gIGNvbnN0IHRhYnMgPSBjb21wYWN0KFtcbiAgICB7IG5hbWU6ICdsYXllcnMnLCBjb21wb25lbnQ6IDxMYXllckVkaXRvciBzZW5zb3JzPXtzZW5zb3JzfSAvPiB9LFxuICAgIHsgbmFtZTogJ2NvbWJvcycsIGNvbXBvbmVudDogPENvbWJvRWRpdG9yIC8+IH0sXG4gICAgeyBuYW1lOiAnbWFjcm9zJywgY29tcG9uZW50OiA8TWFjcm9FZGl0b3IgLz4gfSxcbiAgICB7IG5hbWU6IDxzcGFuIGNsYXNzTmFtZT17c3R5bGVzLmJldGF9PmJlaGF2aW9yczwvc3Bhbj4sIGNvbXBvbmVudDogPEJlaGF2aW9ycyAvPiB9LFxuICAgIHdhcm5pbmdDb3VudCA+IDAgJiYgKHtcbiAgICAgIG5hbWU6IGB3YXJuaW5ncyAoJHt3YXJuaW5nQ291bnR9KWAsXG4gICAgICB0YWJDbGFzc2VzOiBbc3R5bGVzLndhcm5pbmdUYWJdLFxuICAgICAgY29tcG9uZW50OiA8V2FybmluZ3Mgc2FuaXR5Q2hlY2tzPXtzYW5pdHlDaGVja3N9IC8+XG4gICAgfSlcbiAgXSlcblxuICBjb25zdCBkZWZhdWx0VGFiID0gMFxuXG4gIHJldHVybiAoXG4gICAgPENvbnRleHQga2V5bWFwPXtrZXltYXB9PlxuICAgICAgPFRhYnMgdGV4dD1cIkVkaXRvciBtb2RlOlwiIHRhYnM9e3RhYnN9IGRlZmF1bHRUYWI9e2RlZmF1bHRUYWJ9PlxuICAgICAgICB7dGFicy5tYXAoKHRhYiwgaSkgPT4gKFxuICAgICAgICAgIDxGcmFnbWVudCBrZXk9e2l9PlxuICAgICAgICAgICAge3RhYi5jb21wb25lbnR9XG4gICAgICAgICAgPC9GcmFnbWVudD5cbiAgICAgICAgKSl9XG4gICAgICA8L1RhYnM+XG4gICAgPC9Db250ZXh0PlxuICApXG59XG5cbktleWJvYXJkLnByb3BUeXBlcyA9IHtcbiAga2V5bWFwOiBrZXltYXBQcm9wdHlwZXMua2V5bWFwXG59XG5cbmV4cG9ydCBkZWZhdWx0IEtleWJvYXJkXG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzJdLnVzZVsxXSEuL3N0eWxlcy5tb2R1bGUuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMl0udXNlWzFdIS4vc3R5bGVzLm1vZHVsZS5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgSWNvbiBmcm9tICcuL0NvbW1vbi9JY29uJ1xuXG5pbXBvcnQgc3R5bGUgZnJvbSAnLi9zdHlsZXMubW9kdWxlLmNzcydcblxuY29uc3QgcmVwb3NpdG9yeVVybCA9ICdodHRwczovL2dpdGh1Yi5jb20vbmlja2NvdXRzb3Mva2V5bWFwLWVkaXRvcidcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gR2l0SHViTGluayAoKSB7XG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlLndyYXBwZXJ9PlxuICAgICAgPGxhYmVsPk5lZWQgaGVscD8gT3BlbiBhbiBpc3N1ZTo8L2xhYmVsPlxuICAgICAgPGEgY2xhc3NOYW1lPXtzdHlsZS5naXRodWJMaW5rfSB0YXJnZXQ9XCJfYmxhbmtcIiByZWw9XCJub3JlZmVycmVyXCIgaHJlZj17cmVwb3NpdG9yeVVybH0+XG4gICAgICAgIDxJY29uIGNvbGxlY3Rpb249XCJicmFuZHNcIiBuYW1lPVwiZ2l0aHViXCIgLz4vbmlja2NvdXRzb3Mva2V5bWFwLWVkaXRvclxuICAgICAgPC9hPlxuICAgIDwvZGl2PlxuICApXG59XG4iLCJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnXG5cbmltcG9ydCBEaWFsb2dCb3ggZnJvbSAnLi4vQ29tbW9uL0RpYWxvZ0JveCdcbmltcG9ydCBJY29uIGZyb20gJy4uL0NvbW1vbi9JY29uJ1xuaW1wb3J0IE1vZGFsIGZyb20gJy4uL0NvbW1vbi9Nb2RhbCdcblxuY29uc3Qgc3R5bGVzID0ge1xuICBkZXNjcmlwdGlvbjoge1xuICAgIGZvbnRTdHlsZTogJ2l0YWxpYycsXG4gICAgZm9udFNpemU6ICc5MCUnXG4gIH1cbn1cblxuZnVuY3Rpb24gU2V0dGluZ3MgKHByb3BzKSB7XG4gIGNvbnN0IHsgc2V0dGluZ3MsIG9uVXBkYXRlLCBvbkNsb3NlIH0gPSBwcm9wc1xuXG4gIGZ1bmN0aW9uIGhhbmRsZVVwZGF0ZVNldHRpbmcgKGtleSwgdmFsdWUpIHtcbiAgICBvblVwZGF0ZSh7IC4uLnNldHRpbmdzLCBba2V5XTogdmFsdWUgfSlcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPE1vZGFsIG9uRGlzbWlzcz17b25DbG9zZX0+XG4gICAgICA8RGlhbG9nQm94IG9uRGlzbWlzcz17b25DbG9zZX0+XG4gICAgICAgIDxoMT5TZXR0aW5nczwvaDE+XG5cbiAgICAgICAgPGgyPktleWNvZGUgZ2x5cGhzPC9oMj5cblxuICAgICAgICA8aDM+XG4gICAgICAgICAgPGxhYmVsIGh0bWxGb3I9XCJlbmFibGUtdW5pY29kZS1nbHlwaHNcIj5cbiAgICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgICBpZD1cImVuYWJsZS11bmljb2RlLWdseXBoc1wiXG4gICAgICAgICAgICAgIHR5cGU9XCJjaGVja2JveFwiXG4gICAgICAgICAgICAgIGNoZWNrZWQ9e3NldHRpbmdzLnVuaWNvZGVHbHlwaHN9XG4gICAgICAgICAgICAgIG9uQ2hhbmdlPXtlID0+IChcbiAgICAgICAgICAgICAgICBoYW5kbGVVcGRhdGVTZXR0aW5nKCd1bmljb2RlR2x5cGhzJywgZS50YXJnZXQuY2hlY2tlZClcbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICBVc2UgVW5pY29kZSBHbHlwaHNcbiAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICA8L2gzPlxuICAgICAgICA8cCBzdHlsZT17c3R5bGVzLmRlc2NyaXB0aW9ufT5cbiAgICAgICAgICBVc2UgdW5pY29kZSBnbHlwaHMgZm9yIHZpc3VhbCByZXByZXNlbnRhdGlvbnMgb2Yga2V5Y29kZXNcbiAgICAgICAgICBsaWtlIDxjb2RlPkVudGVyPC9jb2RlPiAo4q6QKSwgPGNvZGU+UmlnaHQgQXJyb3c8L2NvZGU+ICjij7UpLCBldGMuIFlvdVxuICAgICAgICAgIGNhbiBkaXNhYmxlIHRoaXMgaWYgdGhlIHN5bWJvbHMgZG9uJ3QgcmVuZGVyIGNvcnJlY3RseS5cbiAgICAgICAgPC9wPlxuXG4gICAgICAgIDxoMz5cbiAgICAgICAgICA8bGFiZWwgaHRtbEZvcj1cInBsYXRmb3JtLXNwZWNpZmljLWdseXBoc1wiPlxuICAgICAgICAgICAgUGxhdGZvcm0gc3BlY2lmaWMgZ2x5cGhzXG4gICAgICAgICAgICA8c2VsZWN0XG4gICAgICAgICAgICAgIGlkPVwicGxhdGZvcm0tc3BlY2lmaWMtZ2x5cGhzXCJcbiAgICAgICAgICAgICAgdmFsdWU9e3NldHRpbmdzLnBsYXRmb3JtR2x5cGhzIHx8ICdhdXRvJ31cbiAgICAgICAgICAgICAgb25DaGFuZ2U9e2UgPT4gKFxuICAgICAgICAgICAgICAgIGhhbmRsZVVwZGF0ZVNldHRpbmcoJ3BsYXRmb3JtR2x5cGhzJywgZS50YXJnZXQudmFsdWUpXG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJhdXRvXCI+QXV0b21hdGljPC9vcHRpb24+XG4gICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJ3aW5cIj5XaW5kb3dzPC9vcHRpb24+XG4gICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJtYWNcIj5tYWNPUzwvb3B0aW9uPlxuICAgICAgICAgICAgPC9zZWxlY3Q+XG4gICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgPC9oMz5cbiAgICAgICAgPHAgc3R5bGU9e3N0eWxlcy5kZXNjcmlwdGlvbn0+XG4gICAgICAgICAgUmVuZGVyIHN5bWJvbHMgc3BlY2lmaWMgdG8geW91ciBwbGF0Zm9ybS4gRS5nLiwgcmVuZGVyIGxlZnQvcmlnaHQgbWV0YVxuICAgICAgICAgIGtleSBhcyA8SWNvbiBuYW1lPVwid2luZG93cyBmYS1icmFuZHNcIiAvPiBmb3IgV2luZG93cywgb3JcbiAgICAgICAgICDijJggZm9yIG1hY09TLlxuICAgICAgICA8L3A+XG4gICAgICA8L0RpYWxvZ0JveD5cbiAgICA8L01vZGFsPlxuICApXG59XG5cblNldHRpbmdzLnByb3BUeXBlcyA9IHtcbiAgc2V0dGluZ3M6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgb25VcGRhdGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIG9uQ2xvc2U6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbn1cblxuU2V0dGluZ3MuZGVmYXVsdFByb3BzID0ge1xuICBzZXR0aW5nczoge31cbn1cblxuZXhwb3J0IGRlZmF1bHQgU2V0dGluZ3NcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMl0udXNlWzFdIS4vc3Bpbm5lci5tb2R1bGUuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMl0udXNlWzFdIS4vc3Bpbm5lci5tb2R1bGUuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IHN0eWxlcyBmcm9tICcuL3NwaW5uZXIubW9kdWxlLmNzcydcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gU3Bpbm5lciAoeyBjaGlsZHJlbiwgLi4ucmVzdCB9KSB7XG4gIHJldHVybiAoXG4gICAgPGRpdiB7Li4ucmVzdH0gY2xhc3NOYW1lPXtzdHlsZXMuc3Bpbm5lcn0+XG4gICAgICA8aSBjbGFzc05hbWU9e2Ake3N0eWxlcy5pY29ufSBmYSBmYS1zcGlubmVyYH0gLz5cbiAgICAgIHtjaGlsZHJlbn1cbiAgICA8L2Rpdj5cbiAgKVxufVxuIiwiaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJ1xuaW1wb3J0IEV2ZW50RW1pdHRlciBmcm9tICdldmVudGVtaXR0ZXIzJ1xuXG5pbXBvcnQgKiBhcyBjb25maWcgZnJvbSAnLi4vLi4vY29uZmlnJ1xuXG5jb25zdCB3ZWJzb2NrZXRVcmwgPSBgJHtjb25maWcuYXBpQmFzZVVybC5yZXBsYWNlKCdodHRwJywgJ3dzJyl9L2dpdGh1Yi9ldmVudHNgXG5cbmV4cG9ydCBjbGFzcyBBUEkgZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xuICB0b2tlbiA9IG51bGxcbiAgaW5pdGlhbGl6aW5nID0gZmFsc2VcbiAgaW5zdGFsbGF0aW9ucyA9IG51bGxcbiAgcmVwb3NpdG9yaWVzID0gbnVsbFxuICByZXBvSW5zdGFsbGF0aW9uTWFwID0gbnVsbFxuICBmZWF0dXJlcyA9IG51bGxcbiAgc29ja2V0ID0gbnVsbFxuXG4gIGFzeW5jIF9yZXF1ZXN0IChvcHRpb25zKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnc3RyaW5nJykge1xuICAgICAgb3B0aW9ucyA9IHtcbiAgICAgICAgdXJsOiBvcHRpb25zXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMudXJsLnN0YXJ0c1dpdGgoJy8nKSkge1xuICAgICAgb3B0aW9ucy51cmwgPSBgJHtjb25maWcuYXBpQmFzZVVybH0ke29wdGlvbnMudXJsfWBcbiAgICB9XG5cbiAgICBvcHRpb25zLmhlYWRlcnMgPSBPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zLmhlYWRlcnMpXG4gICAgaWYgKHRoaXMudG9rZW4gJiYgIW9wdGlvbnMuaGVhZGVycy5BdXRob3JpemF0aW9uKSB7XG4gICAgICBvcHRpb25zLmhlYWRlcnMuQXV0aG9yaXphdGlvbiA9IGBCZWFyZXIgJHt0aGlzLnRva2VufWBcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGF3YWl0IGF4aW9zKG9wdGlvbnMpXG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBpZiAoZXJyLnJlc3BvbnNlPy5zdGF0dXMgPT09IDQwMSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdBdXRoZW50aWNhdGlvbiBmYWlsZWQuJylcbiAgICAgICAgdGhpcy5lbWl0KCdhdXRoZW50aWNhdGlvbi1mYWlsZWQnLCBlcnIucmVzcG9uc2UpXG4gICAgICB9XG5cbiAgICAgIHRocm93IGVyclxuICAgIH1cbiAgfVxuXG4gIGluaXQgKCkge1xuICAgIGlmICh0aGlzLmluaXRpYWxpemluZykge1xuICAgICAgcmV0dXJuIHRoaXMuaW5pdGlhbGl6aW5nXG4gICAgfVxuXG4gICAgdGhpcy5pbml0aWFsaXppbmcgPSAoYXN5bmMgKCkgPT4ge1xuICAgICAgdGhpcy5pbml0RXZlbnRzKClcblxuICAgICAgY29uc3QgaW5zdGFsbGF0aW9uVXJsID0gYCR7Y29uZmlnLmFwaUJhc2VVcmx9L2dpdGh1Yi9pbnN0YWxsYXRpb25gXG4gICAgICBjb25zdCBwYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gpXG5cbiAgICAgIC8vIEkgZG9uJ3QgcmVhbGx5IHVuZGVyc3RhbmQgdGhlIGNhbGxiYWNrIHBhcmFtZXRlcnMgYnV0IGFzIGxvbmcgYXNcbiAgICAgIC8vICpzb21ldGhpbmcqIGluc3RhbGxhdGlvbiByZWxhdGVkIGhhcyBjaGFuZ2VkIHRoZW4gaXRzIHdvcnRoIHJlZnJlc2hpbmdcbiAgICAgIC8vIHRoZSBhdXRoZW50aWNhdGlvbi5cbiAgICAgIGlmIChwYXJhbXMuZ2V0KCdzZXR1cF9hY3Rpb24nKSAmJiBwYXJhbXMuZ2V0KCdpbnN0YWxsYXRpb25faWQnKSkge1xuICAgICAgICB0aGlzLmJlZ2luTG9naW5GbG93KClcbiAgICAgIH1cblxuICAgICAgaWYgKHBhcmFtcy5nZXQoJ2Jsb2NrZWQnKSkge1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMuZW1pdCgnYmxvY2tlZCcpKVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgY29uc3QgcGFyYW0gPSBwYXJhbXMuZ2V0KCd0b2tlbicpXG4gICAgICBpZiAoIXdpbmRvdy5sb2NhbFN0b3JhZ2UuYXV0aF90b2tlbiAmJiBwYXJhbSkge1xuICAgICAgICB3aW5kb3cuaGlzdG9yeS5yZXBsYWNlU3RhdGUoe30sIG51bGwsIHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSlcbiAgICAgICAgd2luZG93LmxvY2FsU3RvcmFnZS5hdXRoX3Rva2VuID0gcGFyYW1cbiAgICAgIH1cblxuICAgICAgaWYgKHdpbmRvdy5sb2NhbFN0b3JhZ2UuYXV0aF90b2tlbikge1xuICAgICAgICB0aGlzLnRva2VuID0gd2luZG93LmxvY2FsU3RvcmFnZS5hdXRoX3Rva2VuXG4gICAgICAgIGNvbnN0IHsgZGF0YSB9ID0gYXdhaXQgdGhpcy5fcmVxdWVzdChpbnN0YWxsYXRpb25VcmwpXG4gICAgICAgIGNvbnN0IHN1c3BlbmRlZCA9IGRhdGEuaW5zdGFsbGF0aW9ucy5maWx0ZXIoaW5zdGFsbGF0aW9uID0+IGluc3RhbGxhdGlvbi5zdXNwZW5kZWRfYXQpXG5cbiAgICAgICAgaWYgKGRhdGEuaW5zdGFsbGF0aW9ucy5sZW5ndGggPT09IHN1c3BlbmRlZC5sZW5ndGgpIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oJ05vIEdpdEh1YiBhcHAgaW5zdGFsbGF0aW9uIGZvdW5kIGZvciBhdXRoZW50aWNhdGVkIHVzZXIuJylcbiAgICAgICAgICB0aGlzLmVtaXQoJ2FwcC1ub3QtaW5zdGFsbGVkJylcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudXNlcm5hbWUgPSBkYXRhLnVzZXJuYW1lXG4gICAgICAgIHRoaXMuaW5zdGFsbGF0aW9ucyA9IGRhdGEuaW5zdGFsbGF0aW9uc1xuICAgICAgICB0aGlzLnJlcG9zaXRvcmllcyA9IGRhdGEucmVwb3NpdG9yaWVzXG4gICAgICAgIHRoaXMucmVwb0luc3RhbGxhdGlvbk1hcCA9IGRhdGEucmVwb0luc3RhbGxhdGlvbk1hcFxuICAgICAgICB0aGlzLmVtaXQoJ2F1dGhlbnRpY2F0ZWQnKVxuICAgICAgfVxuICAgIH0pKClcblxuICAgIHJldHVybiB0aGlzLmluaXRpYWxpemluZ1xuICB9XG5cbiAgaW5pdEV2ZW50cyAoKSB7XG4gICAgY29uc3QgYnVmZmVyZWRNZXNzYWdlcyA9IFtdXG4gICAgY29uc3QgaXNPcGVuID0gKCkgPT4ge1xuICAgICAgcmV0dXJuIHRoaXMuc29ja2V0LnJlYWR5U3RhdGUgPT09IHdpbmRvdy5XZWJTb2NrZXQuT1BFTlxuICAgIH1cblxuICAgIGNvbnN0IHNlbmQgPSAobWVzc2FnZSkgPT4ge1xuICAgICAgaWYgKGlzT3BlbigpKSB7XG4gICAgICAgIHRoaXMuc29ja2V0LnNlbmQobWVzc2FnZSlcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIGJ1ZmZlcmVkTWVzc2FnZXMucHVzaChtZXNzYWdlKVxuICAgICAgY29uc29sZS5sb2coXG4gICAgICAgICdidWZmZXJpbmcgd2Vic29ja2V0IG1lc3NhZ2UnLFxuICAgICAgICB7IHJlYWR5U3RhdGU6IHRoaXMuc29ja2V0LnJlYWR5U3RhdGUgfSxcbiAgICAgICAgbWVzc2FnZVxuICAgICAgKVxuICAgIH1cblxuICAgIGNvbnN0IGZsdXNoID0gKCkgPT4ge1xuICAgICAgbGV0IG1lc3NhZ2VcbiAgICAgIHdoaWxlICgobWVzc2FnZSA9IGJ1ZmZlcmVkTWVzc2FnZXMuc2hpZnQoKSkpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ3NlbmRpbmcgYnVmZmVyZWQgd2Vic29ja2V0IG1lc3NhZ2UnLCBtZXNzYWdlKVxuICAgICAgICB0aGlzLnNvY2tldC5zZW5kKG1lc3NhZ2UpXG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5zb2NrZXQgPSBuZXcgd2luZG93LldlYlNvY2tldCh3ZWJzb2NrZXRVcmwpXG4gICAgdGhpcy5zb2NrZXQub25vcGVuID0gKCkgPT4ge1xuICAgICAgY29uc29sZS5sb2cobmV3IERhdGUoKSwgJ2Nvbm5lY3RlZCB0byBjb25zb2xlJylcbiAgICAgIGZsdXNoKClcbiAgICAgIHNldEludGVydmFsKCgpID0+IHtcbiAgICAgICAgc2VuZChKU09OLnN0cmluZ2lmeSh7IG1lc3NhZ2U6ICdwaW5nJyB9KSlcbiAgICAgIH0sIDIwMDAwKVxuICAgIH1cblxuICAgIHRoaXMuc29ja2V0Lm9uY2xvc2UgPSAoKSA9PiBjb25zb2xlLmxvZyhuZXcgRGF0ZSgpLCAnZGlzY29ubmVjdGVkIGZyb20gc2VydmVyJylcbiAgICB0aGlzLnNvY2tldC5vbmVycm9yID0gZXJyID0+IGNvbnNvbGUuZXJyb3IobmV3IERhdGUoKSwgZXJyKVxuICAgIHRoaXMuc29ja2V0Lm9ubWVzc2FnZSA9IGV2ZW50ID0+IHtcbiAgICAgIGNvbnN0IG1lc3NhZ2UgPSBKU09OLnBhcnNlKGV2ZW50LmRhdGEpXG4gICAgICBpZiAobWVzc2FnZS5ldmVudCA9PT0gJ3dvcmtmbG93X3J1bicpIHtcbiAgICAgICAgdGhpcy5lbWl0KCdidWlsZC11cGRhdGUnLCBtZXNzYWdlLndvcmtmbG93X3J1bilcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLm9uKCdhdXRoZW50aWNhdGVkJywgKCkgPT4ge1xuICAgICAgaWYgKCF0aGlzLmluc3RhbGxhdGlvbnM/Lmxlbmd0aCkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgdGhpcy5mZXRjaEF2YWlsYWJsZUZlYXR1cmVzKClcblxuICAgICAgc2VuZChKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIG1lc3NhZ2U6ICdhdXRob3JpemUnLFxuICAgICAgICBkYXRhOiB0aGlzLnRva2VuXG4gICAgICB9KSlcbiAgICB9KVxuICB9XG5cbiAgYmVnaW5Mb2dpbkZsb3cgKCkge1xuICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgnYXV0aF90b2tlbicpXG4gICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBgJHtjb25maWcuYXBpQmFzZVVybH0vZ2l0aHViL2F1dGhvcml6ZWBcbiAgfVxuXG4gIGJlZ2luSW5zdGFsbEFwcEZsb3cgKCkge1xuICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gYGh0dHBzOi8vZ2l0aHViLmNvbS9hcHBzLyR7Y29uZmlnLmdpdGh1YkFwcE5hbWV9L2luc3RhbGxhdGlvbnMvbmV3YFxuICB9XG5cbiAgbWFuYWdlSW5zdGFsbGF0aW9uUmVwb3MgKGluc3RhbGxhdGlvbklkKSB7XG4gICAgY29uc3QgaW5zdGFsbGF0aW9uID0gdGhpcy5pbnN0YWxsYXRpb25zLmZpbmQoaW5zdGFsbGF0aW9uID0+IGluc3RhbGxhdGlvbi5pZCA9PT0gaW5zdGFsbGF0aW9uSWQpXG4gICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBpbnN0YWxsYXRpb24uaHRtbF91cmxcbiAgfVxuXG4gIGlzR2l0SHViQXV0aG9yaXplZCAoKSB7XG4gICAgcmV0dXJuICEhdGhpcy50b2tlblxuICB9XG5cbiAgaXNBcHBTdXNwZW5kZWRGb3JSZXBvU2VsZWN0aW9uICgpIHtcbiAgICByZXR1cm4gKFxuICAgICAgdGhpcy5pbnN0YWxsYXRpb25zPy5sZW5ndGggPiAwICYmXG4gICAgICB0aGlzLmluc3RhbGxhdGlvbnM/LmV2ZXJ5KGluc3RhbGxhdGlvbiA9PiBpbnN0YWxsYXRpb24uc3VzcGVuZGVkX2F0KSAmJlxuICAgICAgdGhpcy5pbnN0YWxsYXRpb25zPy5zb21lKGluc3RhbGxhdGlvbiA9PiBpbnN0YWxsYXRpb24ucmVwb3NpdG9yeV9zZWxlY3Rpb24gPT09ICdhbGwnKVxuICAgIClcbiAgfVxuXG4gIGlzQXBwSW5zdGFsbGVkICgpIHtcbiAgICByZXR1cm4gdGhpcy5pbnN0YWxsYXRpb25zPy5sZW5ndGggJiYgdGhpcy5yZXBvc2l0b3JpZXM/Lmxlbmd0aFxuICB9XG5cbiAgYXN5bmMgZmV0Y2hSZXBvQnJhbmNoZXMgKHJlcG8pIHtcbiAgICBjb25zdCBpbnN0YWxsYXRpb24gPSBlbmNvZGVVUklDb21wb25lbnQodGhpcy5yZXBvSW5zdGFsbGF0aW9uTWFwW3JlcG8uZnVsbF9uYW1lXSlcbiAgICBjb25zdCByZXBvc2l0b3J5ID0gZW5jb2RlVVJJQ29tcG9uZW50KHJlcG8uZnVsbF9uYW1lKVxuICAgIGNvbnN0IHsgZGF0YSB9ID0gYXdhaXQgdGhpcy5fcmVxdWVzdChcbiAgICAgIGAvZ2l0aHViL2luc3RhbGxhdGlvbi8ke2luc3RhbGxhdGlvbn0vJHtyZXBvc2l0b3J5fS9icmFuY2hlc2BcbiAgICApXG5cbiAgICByZXR1cm4gZGF0YVxuICB9XG5cbiAgYXN5bmMgZmV0Y2hCcmFuY2hLZXlib2FyZHMgKHJlcG8sIGJyYW5jaCkge1xuICAgIGNvbnN0IGluc3RhbGxhdGlvbiA9IGVuY29kZVVSSUNvbXBvbmVudCh0aGlzLnJlcG9JbnN0YWxsYXRpb25NYXBbcmVwby5mdWxsX25hbWVdKVxuICAgIGNvbnN0IHJlcG9zaXRvcnkgPSBlbmNvZGVVUklDb21wb25lbnQocmVwby5mdWxsX25hbWUpXG4gICAgY29uc3QgeyBkYXRhIH0gPSBhd2FpdCB0aGlzLl9yZXF1ZXN0KFxuICAgICAgYC9naXRodWIvaW5zdGFsbGF0aW9uLyR7aW5zdGFsbGF0aW9ufS8ke3JlcG9zaXRvcnl9L2tleWJvYXJkcy8ke2JyYW5jaH1gXG4gICAgKVxuXG4gICAgcmV0dXJuIGRhdGFcbiAgfVxuXG4gIGFzeW5jIGZldGNoTGF5b3V0QW5kS2V5bWFwIChyZXBvLCBicmFuY2gsIHsga2V5Ym9hcmQgfSA9IHt9KSB7XG4gICAgY29uc3QgaW5zdGFsbGF0aW9uID0gZW5jb2RlVVJJQ29tcG9uZW50KHRoaXMucmVwb0luc3RhbGxhdGlvbk1hcFtyZXBvXSlcbiAgICBjb25zdCByZXBvc2l0b3J5ID0gZW5jb2RlVVJJQ29tcG9uZW50KHJlcG8pXG4gICAgY29uc3QgdXJsID0gbmV3IFVSTChgJHtjb25maWcuYXBpQmFzZVVybH0vZ2l0aHViL2tleWJvYXJkLWZpbGVzLyR7aW5zdGFsbGF0aW9ufS8ke3JlcG9zaXRvcnl9YClcbiAgICBjb25zdCBxdWVyeSA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoKVxuXG4gICAgaWYgKGJyYW5jaCkge1xuICAgICAgcXVlcnkuc2V0KCdicmFuY2gnLCBicmFuY2gpXG4gICAgfVxuICAgIGlmIChrZXlib2FyZCkge1xuICAgICAgcXVlcnkuc2V0KCdrZXlib2FyZCcsIGtleWJvYXJkKVxuICAgIH1cblxuICAgIHVybC5zZWFyY2ggPSBxdWVyeS50b1N0cmluZygpXG5cbiAgICB0cnkge1xuICAgICAgY29uc3QgeyBkYXRhIH0gPSBhd2FpdCB0aGlzLl9yZXF1ZXN0KHVybC50b1N0cmluZygpKVxuICAgICAgY29uc3QgeyBpbmZvOiB7IGxheW91dHMgfSwga2V5bWFwIH0gPSBkYXRhXG4gICAgICBjb25zdCBkZWZhdWx0TGF5b3V0ID0gT2JqZWN0LmtleXMoZGF0YS5pbmZvLmxheW91dHMpWzBdXG4gICAgICBjb25zdCBwcmVmZXJyZWRMYXlvdXQgPSBrZXltYXAuY2hvc2VuWyd6bWssbWF0cml4X3RyYW5zZm9ybSddXG4gICAgICAgID8ga2V5bWFwLmNob3Nlblsnem1rLG1hdHJpeF90cmFuc2Zvcm0nXS5yZXBsYWNlKC9eJi8sICcnKVxuICAgICAgICA6IG51bGxcblxuICAgICAgY29uc3QgbGF5b3V0TWV0YWRhdGEgPSAoXG4gICAgICAgIGxheW91dHNbcHJlZmVycmVkTGF5b3V0XSB8fFxuICAgICAgICBsYXlvdXRzW2RlZmF1bHRMYXlvdXRdXG4gICAgICApXG4gICAgICBjb25zdCBsYXlvdXQgPSBsYXlvdXRNZXRhZGF0YS5sYXlvdXRcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbGF5b3V0TWV0YWRhdGEsXG4gICAgICAgIGxheW91dCxcbiAgICAgICAga2V5bWFwLFxuICAgICAgICBrZXlib2FyZHM6IGRhdGEua2V5Ym9hcmRzLFxuICAgICAgICBkZWZhdWx0OiBkYXRhLmRlZmF1bHRLZXltYXAsXG4gICAgICAgIHNlbnNvcnM6IGRhdGEuc2Vuc29yc1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgaWYgKGVyci5yZXNwb25zZT8uc3RhdHVzID09PSA0MDApIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIGxvYWQga2V5bWFwIGFuZCBsYXlvdXQgZnJvbSBnaXRodWInLCBlcnIucmVzcG9uc2UuZGF0YSlcbiAgICAgICAgdGhpcy5lbWl0KCdyZXBvLXZhbGlkYXRpb24tZXJyb3InLCBlcnIucmVzcG9uc2UuZGF0YSlcbiAgICAgIH0gZWxzZSBpZiAoZXJyLnJlc3BvbnNlPy5zdGF0dXMgPT09IDUwMCAmJiBlcnIucmVzcG9uc2UuZGF0YS5uYW1lID09PSAnTGF5b3V0R2VuZXJhdGlvbkVycm9yJykge1xuICAgICAgICB0aGlzLmVtaXQoJ2xheW91dC1nZW5lcmF0aW9uLWZhaWxlZCcsIGVyci5yZXNwb25zZS5kYXRhKVxuICAgICAgfVxuXG4gICAgICB0aHJvdyBlcnJcbiAgICB9XG4gIH1cblxuICBhc3luYyBmZXRjaEF2YWlsYWJsZUZlYXR1cmVzICgpIHtcbiAgICBpZiAoIXRoaXMuaXNHaXRIdWJBdXRob3JpemVkKCkpIHtcbiAgICAgIHJldHVybiB7IGJldGFGZWF0dXJlczogW10gfVxuICAgIH1cblxuICAgIGlmICghdGhpcy5mZWF0dXJlcykge1xuICAgICAgdGhpcy5mZWF0dXJlcyA9IHRoaXMuX3JlcXVlc3QoYCR7Y29uZmlnLmFwaUJhc2VVcmx9L2dpdGh1Yi9mZWF0dXJlc2ApXG4gICAgfVxuXG4gICAgY29uc3QgeyBkYXRhIH0gPSBhd2FpdCB0aGlzLmZlYXR1cmVzXG4gICAgcmV0dXJuIGRhdGFcbiAgfVxuXG4gIGFzeW5jIGZldGNoQnVpbGRTdGF0dXMgKHJlcG8sIGJyYW5jaCkge1xuICAgIGNvbnN0IGluc3RhbGxhdGlvbiA9IGVuY29kZVVSSUNvbXBvbmVudCh0aGlzLnJlcG9JbnN0YWxsYXRpb25NYXBbcmVwb10pXG4gICAgY29uc3QgcmVwb3NpdG9yeSA9IGVuY29kZVVSSUNvbXBvbmVudChyZXBvKVxuICAgIGNvbnN0IHVybCA9IG5ldyBVUkwoYCR7Y29uZmlnLmFwaUJhc2VVcmx9L2dpdGh1Yi9sYXRlc3QtcnVuLyR7aW5zdGFsbGF0aW9ufS8ke3JlcG9zaXRvcnl9LyR7ZW5jb2RlVVJJQ29tcG9uZW50KGJyYW5jaCl9YClcblxuICAgIGNvbnN0IHsgZGF0YSB9ID0gYXdhaXQgdGhpcy5fcmVxdWVzdCh1cmwudG9TdHJpbmcoKSlcbiAgICByZXR1cm4gZGF0YVxuICB9XG5cbiAgY29tbWl0Q2hhbmdlcyAocmVwbywgYnJhbmNoLCBsYXlvdXQsIGtleW1hcCwgb3B0aW9ucyA9IHt9KSB7XG4gICAgY29uc3Qge1xuICAgICAgbWVzc2FnZSA9IG51bGwsXG4gICAgICBleHBlcmltZW50YWxTZXR0aW5ncyA9IHt9LFxuICAgICAga2V5Ym9hcmRcbiAgICB9ID0gb3B0aW9uc1xuICAgIGNvbnN0IGluc3RhbGxhdGlvbiA9IGVuY29kZVVSSUNvbXBvbmVudCh0aGlzLnJlcG9JbnN0YWxsYXRpb25NYXBbcmVwb10pXG4gICAgY29uc3QgcmVwb3NpdG9yeSA9IGVuY29kZVVSSUNvbXBvbmVudChyZXBvKVxuICAgIGNvbnN0IHVybCA9IG5ldyBVUkwoYCR7Y29uZmlnLmFwaUJhc2VVcmx9L2dpdGh1Yi9rZXlib2FyZC1maWxlcy8ke2luc3RhbGxhdGlvbn0vJHtyZXBvc2l0b3J5fS8ke2VuY29kZVVSSUNvbXBvbmVudChicmFuY2gpfWApXG4gICAgY29uc3QgeyBlbmFibGVCZWhhdmlvckVkaXRpbmcgPSBmYWxzZSB9ID0gZXhwZXJpbWVudGFsU2V0dGluZ3NcbiAgICBjb25zdCBxdWVyeSA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoe1xuICAgICAgZW5hYmxlQmVoYXZpb3JFZGl0aW5nXG4gICAgfSlcblxuICAgIGlmIChrZXlib2FyZCkge1xuICAgICAgcXVlcnkuc2V0KCdrZXlib2FyZCcsIGtleWJvYXJkKVxuICAgIH1cblxuICAgIHVybC5zZWFyY2ggPSBxdWVyeS50b1N0cmluZygpXG5cbiAgICByZXR1cm4gdGhpcy5fcmVxdWVzdCh7XG4gICAgICB1cmw6IHVybC50b1N0cmluZygpLFxuICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICBoZWFkZXJzOiB7ICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicgfSxcbiAgICAgIGRhdGE6IHsga2V5Ym9hcmQsIGxheW91dCwga2V5bWFwLCBtZXNzYWdlLCBlbmFibGVCZWhhdmlvckVkaXRpbmcgfVxuICAgIH0pXG4gIH1cbn1cblxuY29uc3QgYXBpID0gbmV3IEFQSSgpXG5leHBvcnQgZGVmYXVsdCBhcGlcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMl0udXNlWzFdIS4vc3R5bGVzLm1vZHVsZS5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1syXS51c2VbMV0hLi9zdHlsZXMubW9kdWxlLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50J1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJ1xuaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0J1xuXG5pbXBvcnQgSWNvbiBmcm9tICcuLi8uLi9Db21tb24vSWNvbidcbmltcG9ydCBMaW5rIGZyb20gJy4uLy4uL0NvbW1vbi9MaW5rJ1xuaW1wb3J0IFNwaW5uZXIgZnJvbSAnLi4vLi4vQ29tbW9uL1NwaW5uZXInXG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vc3R5bGVzLm1vZHVsZS5jc3MnXG5cbmNvbnN0IGdvb2RDb25jbHVzaW9ucyA9IFtcbiAgJ3N1Y2Nlc3MnXG5dXG5cbmNvbnN0IGJhZENvbmNsdXNpb25zID0gW1xuICAnYWN0aW9uX3JlcXVpcmVkJyxcbiAgJ2NhbmNlbGxlZCcsXG4gICdmYWlsdXJlJyxcbiAgJ3NraXBwZWQnLFxuICAnc3RhbGUnLFxuICAndGltZWRfb3V0J1xuXVxuXG5mdW5jdGlvbiBGdXp6eVRpbWVzdGFtcCAocHJvcHMpIHtcbiAgY29uc3QgeyB0aW1lc3RhbXAgfSA9IHByb3BzXG4gIGNvbnN0IFtmdXp6eSwgc2V0RnV6enldID0gdXNlU3RhdGUoXG4gICAgbW9tZW50KHRpbWVzdGFtcCkuZnJvbU5vdygpXG4gIClcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIHNldEZ1enp5KG1vbWVudCh0aW1lc3RhbXApLmZyb21Ob3coKSlcbiAgICBjb25zdCBpbnRlcnZhbCA9IHNldEludGVydmFsKCgpID0+IHtcbiAgICAgIHNldEZ1enp5KG1vbWVudCh0aW1lc3RhbXApLmZyb21Ob3coKSlcbiAgICB9LCA2MCAqIDEwMDApXG5cbiAgICByZXR1cm4gKCkgPT4gY2xlYXJJbnRlcnZhbChpbnRlcnZhbClcbiAgfSwgW3RpbWVzdGFtcCwgc2V0RnV6enldKVxuXG4gIHJldHVybiAoXG4gICAgPHNwYW4gdGl0bGU9e3RpbWVzdGFtcC50b0lTT1N0cmluZygpfT5cbiAgICAgIHtmdXp6eX1cbiAgICA8L3NwYW4+XG4gIClcbn1cblxuZnVuY3Rpb24gQnVpbGRMaW5rIChwcm9wcykge1xuICBjb25zdCB7IGxhdGVzdFJ1biB9ID0gcHJvcHNcbiAgY29uc3QgbWFwcGVkSWNvbiA9IGdvb2RDb25jbHVzaW9ucy5pbmNsdWRlcyhsYXRlc3RSdW4uY29uY2x1c2lvbilcbiAgICA/IDxJY29uIG5hbWU9XCJjaGVja1wiIC8+XG4gICAgOiBiYWRDb25jbHVzaW9ucy5pbmNsdWRlcyhsYXRlc3RSdW4uY29uY2x1c2lvbilcbiAgICAgID8gPEljb24gbmFtZT1cInhtYXJrXCIgLz5cbiAgICAgIDogPFNwaW5uZXIgLz5cblxuICByZXR1cm4gKFxuICAgIDxMaW5rXG4gICAgICBocmVmPXtsYXRlc3RSdW4uaHRtbF91cmx9XG4gICAgICBjbGFzc05hbWU9e3N0eWxlcy5idWlsZERldGFpbHN9XG4gICAgICBleHRlcm5hbD17dHJ1ZX1cbiAgICAgIHNob3dFeHRlcm5hbD17ZmFsc2V9XG4gICAgPlxuICAgICAgPHNwYW4gY2xhc3NOYW1lPXtzdHlsZXMuYnVpbGRTdW1tYXJ5fT5cbiAgICAgICAgRmlybXdhcmUgYnVpbGQgKDxjb2RlPntsYXRlc3RSdW4uaGVhZF9zaGEuc2xpY2UoMCwgNSl9PC9jb2RlPikge21hcHBlZEljb259XG4gICAgICAgIDxiciAvPlxuICAgICAgICA8RnV6enlUaW1lc3RhbXAgdGltZXN0YW1wPXtuZXcgRGF0ZShsYXRlc3RSdW4udXBkYXRlZF9hdCl9IC8+XG4gICAgICA8L3NwYW4+XG4gICAgICA8SWNvblxuICAgICAgICBuYW1lPVwiZmlsZS1hcnJvdy1kb3duXCJcbiAgICAgICAgY2xhc3NOYW1lPXtbXG4gICAgICAgICAgc3R5bGVzLmJ1aWxkU3RhdHVzLFxuICAgICAgICAgIHN0eWxlcy5idWlsZFN1Y2Nlc3NcbiAgICAgICAgXS5qb2luKCcgJyl9XG4gICAgICAvPlxuICAgIDwvTGluaz5cbiAgKVxufVxuXG5CdWlsZExpbmsucHJvcFR5cGVzID0ge1xuICBsYXRlc3RSdW46IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgaWQ6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcbiAgICBuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgaGVhZF9zaGE6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICBzdGF0dXM6IFByb3BUeXBlcy5vbmVPZihbXG4gICAgICAnY29tcGxldGVkJyxcbiAgICAgICdhY3Rpb25fcmVxdWlyZWQnLFxuICAgICAgJ2NhbmNlbGxlZCcsXG4gICAgICAnZmFpbHVyZScsXG4gICAgICAnbmV1dHJhbCcsXG4gICAgICAnc2tpcHBlZCcsXG4gICAgICAnc3RhbGUnLFxuICAgICAgJ3N1Y2Nlc3MnLFxuICAgICAgJ3RpbWVkX291dCcsXG4gICAgICAnaW5fcHJvZ3Jlc3MnLFxuICAgICAgJ3F1ZXVlZCcsXG4gICAgICAncmVxdWVzdGVkJyxcbiAgICAgICd3YWl0aW5nJ1xuICAgIF0pLmlzUmVxdWlyZWQsXG4gICAgY29uY2x1c2lvbjogUHJvcFR5cGVzLm9uZU9mKFtcbiAgICAgIG51bGwsXG4gICAgICAnYWN0aW9uX3JlcXVpcmVkJyxcbiAgICAgICdjYW5jZWxsZWQnLFxuICAgICAgJ2ZhaWx1cmUnLFxuICAgICAgJ25ldXRyYWwnLFxuICAgICAgJ3N1Y2Nlc3MnLFxuICAgICAgJ3NraXBwZWQnLFxuICAgICAgJ3N0YWxlJyxcbiAgICAgICd0aW1lZF9vdXQnXG4gICAgXSksXG4gICAgY3JlYXRlZF9hdDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgIHVwZGF0ZWRfYXQ6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZFxuICB9KVxufVxuXG5leHBvcnQgZGVmYXVsdCBCdWlsZExpbmtcbiIsImltcG9ydCB7IHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnXG5cbmltcG9ydCBBY3Rpb25CdXR0b24gZnJvbSAnLi4vLi4vLi4vQ29tbW9uL0FjdGlvbkJ1dHRvbidcbmltcG9ydCBEaWFsb2dCb3ggZnJvbSAnLi4vLi4vLi4vQ29tbW9uL0RpYWxvZ0JveCdcbmltcG9ydCBNb2RhbCBmcm9tICcuLi8uLi8uLi9Db21tb24vTW9kYWwnXG5cbmZ1bmN0aW9uIENvbW1pdCAoeyBvbkNvbmZpcm0sIG9uQ2FuY2VsIH0pIHtcbiAgY29uc3QgW21lc3NhZ2UsIHNldE1lc3NhZ2VdID0gdXNlU3RhdGUoJycpXG5cbiAgcmV0dXJuIChcbiAgICA8TW9kYWw+XG4gICAgICA8RGlhbG9nQm94IGRpc21pc3NUZXh0PXtudWxsfT5cbiAgICAgICAgPGgyPkNvbW1pdCBrZXltYXAgY2hhbmdlczwvaDI+XG4gICAgICAgIDx0ZXh0YXJlYVxuICAgICAgICAgIHN0eWxlPXt7IHdpZHRoOiAnMTAwJScgfX1cbiAgICAgICAgICBwbGFjZWhvbGRlcj0nTWVzc2FnZSAob3B0aW9uYWwpJ1xuICAgICAgICAgIHZhbHVlPXttZXNzYWdlfVxuICAgICAgICAgIG9uQ2hhbmdlPXtldmVudCA9PiB7XG4gICAgICAgICAgICBzZXRNZXNzYWdlKGV2ZW50LnRhcmdldC52YWx1ZSlcbiAgICAgICAgICB9fVxuICAgICAgICAvPlxuICAgICAgICA8cCBzdHlsZT17eyB0ZXh0QWxpZ246ICdjZW50ZXInLCBnYXA6ICcxMHB4JyB9fT5cbiAgICAgICAgICA8QWN0aW9uQnV0dG9uIG9uQ2xpY2s9eygpID0+IG9uQ29uZmlybShtZXNzYWdlKX0+Q29tbWl0PC9BY3Rpb25CdXR0b24+XG4gICAgICAgICAgPEFjdGlvbkJ1dHRvbiBvbkNsaWNrPXtvbkNhbmNlbH0gc2Vjb25kYXJ5PkNhbmNlbDwvQWN0aW9uQnV0dG9uPlxuICAgICAgICA8L3A+XG4gICAgICA8L0RpYWxvZ0JveD5cbiAgICA8L01vZGFsPlxuICApXG59XG5cbkNvbW1pdC5wcm9wVHlwZXMgPSB7XG4gIG9uQ29uZmlybTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgb25DYW5jZWw6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbn1cblxuZXhwb3J0IGRlZmF1bHQgQ29tbWl0XG4iLCJpbXBvcnQgeyB1c2VDYWxsYmFjayB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgdXNlRGlzcGF0Y2gsIHVzZVNlbGVjdG9yIH0gZnJvbSAncmVhY3QtcmVkdXgnXG5cbmltcG9ydCBTcGlubmVyIGZyb20gJy4uL0NvbW1vbi9TcGlubmVyJ1xuaW1wb3J0ICogYXMgYXBpIGZyb20gJy4uL2FwaSdcblxuaW1wb3J0IGdpdGh1YiBmcm9tICcuL0dpdGh1Yi9hcGknXG5pbXBvcnQgQnVpbGRMaW5rIGZyb20gJy4vR2l0aHViL0J1aWxkTGluaydcbmltcG9ydCBDb21taXQgZnJvbSAnLi9HaXRodWIvRGlhbG9ncy9Db21taXQnXG5cbmNvbnN0IHN0YXRlU2VsZWN0b3IgPSBzdGF0ZSA9PiBzdGF0ZVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBTb3VyY2VBY3Rpb25zICgpIHtcbiAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpXG4gIGNvbnN0IHN0YXRlID0gdXNlU2VsZWN0b3Ioc3RhdGVTZWxlY3RvcilcbiAgY29uc3Qge1xuICAgIHNvdXJjZSxcbiAgICBzb3VyY2VPdGhlcixcbiAgICBrZXlib2FyZCxcbiAgICBfdW5tb2RpZmllZEtleW1hcCxcbiAgICBzYXZpbmcsXG4gICAgZXhwZXJpbWVudGFsU2V0dGluZ3MsXG4gICAgbGF0ZXN0QnVpbGRcbiAgfSA9IHN0YXRlXG5cbiAgY29uc3QgaGFzQ2hhbmdlZCA9IGtleWJvYXJkICYmICFPYmplY3QuaXMoa2V5Ym9hcmQua2V5bWFwLCBfdW5tb2RpZmllZEtleW1hcClcblxuICBmdW5jdGlvbiBvcGVuQ29tbWl0RGlhbG9nICgpIHtcbiAgICBkaXNwYXRjaCh7IHR5cGU6ICdDT01NSVRfRElBTE9HX09QRU4nIH0pXG4gIH1cblxuICBhc3luYyBmdW5jdGlvbiBoYW5kbGVDb21waWxlICgpIHtcbiAgICBjb25zdCBrZXlib2FyZCA9IHNvdXJjZU90aGVyLmtleWJvYXJkXG4gICAgY29uc3QgeyBrZXltYXAgfSA9IHN0YXRlLmtleWJvYXJkXG5cbiAgICB0cnkge1xuICAgICAgY29uc3QgdXBkYXRlZCA9IGF3YWl0IGFwaS51cGRhdGVLZXltYXAoa2V5Ym9hcmQsIGtleW1hcClcbiAgICAgIGRpc3BhdGNoKHtcbiAgICAgICAgdHlwZTogJ0tFWU1BUF9TQVZFX1NVQ0NFU1MnLFxuICAgICAgICBrZXltYXA6IHVwZGF0ZWRcbiAgICAgIH0pXG4gICAgfSBjYXRjaCB7XG4gICAgICBkaXNwYXRjaCh7IHR5cGU6ICdLRVlNQVBfU0FWRV9GQUlMVVJFJyB9KVxuICAgIH1cbiAgfVxuXG4gIGNvbnN0IGhhbmRsZUNvbW1pdENoYW5nZXMgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAobWVzc2FnZSkge1xuICAgIGNvbnN0IHsgcmVwb3NpdG9yeSwgYnJhbmNoIH0gPSBzb3VyY2VPdGhlci5naXRodWJcblxuICAgIDsoYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgZGlzcGF0Y2goeyB0eXBlOiAnQ09NTUlUX0RJQUxPR19DTE9TRScgfSlcbiAgICAgIGRpc3BhdGNoKHsgdHlwZTogJ0tFWU1BUF9TQVZFX1NUQVJUJyB9KVxuXG4gICAgICBjb25zdCB7IGxheW91dCwga2V5bWFwIH0gPSBrZXlib2FyZFxuXG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCB7IGRhdGE6IHVwZGF0ZWQgfSA9IGF3YWl0IGdpdGh1Yi5jb21taXRDaGFuZ2VzKHJlcG9zaXRvcnksIGJyYW5jaCwgbGF5b3V0LCBrZXltYXAsIHtcbiAgICAgICAgICBtZXNzYWdlLCBleHBlcmltZW50YWxTZXR0aW5ncywga2V5Ym9hcmQ6IHNvdXJjZU90aGVyLmdpdGh1Yi5rZXlib2FyZFxuICAgICAgICB9KVxuICAgICAgICBkaXNwYXRjaCh7IHR5cGU6ICdLRVlNQVBfU0FWRV9TVUNDRVNTJywga2V5bWFwOiB1cGRhdGVkIH0pXG4gICAgICB9IGNhdGNoIHtcbiAgICAgICAgZGlzcGF0Y2goeyB0eXBlOiAnS0VZTUFQX1NBVkVfRkFJTFVSRScgfSlcbiAgICAgIH1cbiAgICB9KSgpXG4gIH0sIFtzb3VyY2VPdGhlciwga2V5Ym9hcmQsIGRpc3BhdGNoLCBleHBlcmltZW50YWxTZXR0aW5nc10pXG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGlkPVwiYWN0aW9uc1wiPlxuICAgICAge3NvdXJjZSA9PT0gJ2xvY2FsJyAmJiAoXG4gICAgICAgIDxidXR0b24gZGlzYWJsZWQ9eyFoYXNDaGFuZ2VkfSBvbkNsaWNrPXtoYW5kbGVDb21waWxlfT5cbiAgICAgICAgICBTYXZlIExvY2FsXG4gICAgICAgIDwvYnV0dG9uPlxuICAgICAgKX1cbiAgICAgIHtzb3VyY2UgPT09ICdnaXRodWInICYmIChcbiAgICAgICAgPGJ1dHRvblxuICAgICAgICAgIHRpdGxlPVwiQ29tbWl0IGtleW1hcCBjaGFuZ2VzIHRvIEdpdEh1YiByZXBvc2l0b3J5XCJcbiAgICAgICAgICBkaXNhYmxlZD17IWhhc0NoYW5nZWR9XG4gICAgICAgICAgb25DbGljaz17b3BlbkNvbW1pdERpYWxvZ31cbiAgICAgICAgPlxuICAgICAgICAgIHtzYXZpbmcgPyAnU2F2aW5nJyA6ICdDb21taXQgQ2hhbmdlcyd9XG4gICAgICAgICAge3NhdmluZyAmJiA8U3Bpbm5lciAvPn1cbiAgICAgICAgPC9idXR0b24+XG4gICAgICApfVxuICAgICAge3N0YXRlLmNvbW1pdERpYWxvZ09wZW4gJiYgKFxuICAgICAgICA8Q29tbWl0XG4gICAgICAgICAgb25Db25maXJtPXtoYW5kbGVDb21taXRDaGFuZ2VzfVxuICAgICAgICAgIG9uQ2FuY2VsPXsoKSA9PiBkaXNwYXRjaCh7IHR5cGU6ICdDT01NSVRfRElBTE9HX0NMT1NFJyB9KX1cbiAgICAgICAgLz5cbiAgICAgICl9XG5cbiAgICAgIHtsYXRlc3RCdWlsZCAmJiA8QnVpbGRMaW5rIGxhdGVzdFJ1bj17bGF0ZXN0QnVpbGR9IC8+fVxuICAgIDwvZGl2PlxuICApXG59XG4iLCJpbXBvcnQgTGluayBmcm9tICcuLi9Db21tb24vTGluaydcblxuZXhwb3J0IGNvbnN0IGdpdGh1Yklzc3Vlc1VybCA9ICdodHRwczovL2dpdGh1Yi5jb20vbmlja2NvdXRzb3Mva2V5bWFwLWVkaXRvci9pc3N1ZSdcbmV4cG9ydCBjb25zdCBnaXRodWJXaWtpTGF5b3V0c1VybCA9ICdodHRwczovL2dpdGh1Yi5jb20vbmlja2NvdXRzb3Mva2V5bWFwLWVkaXRvci93aWtpL0RlZmluaW5nLWtleWJvYXJkLWxheW91dHMnXG5leHBvcnQgY29uc3Qga2V5bWFwTGF5b3V0VG9vbHNVcmwgPSAnaHR0cHM6Ly9uaWNrY291dHNvcy5naXRodWIuaW8va2V5bWFwLWxheW91dC10b29scy8nXG5leHBvcnQgY29uc3QgZGlzY29yZFByb2ZpbGVVcmwgPSAnaHR0cHM6Ly9kaXNjb3JkLmNvbS91c2Vycy8xMTU1MDc5NjY1NTUxOTMzNDUnXG5cbmV4cG9ydCBjb25zdCBHaXRIdWJJc3N1ZXNMaW5rID0gKFxuICA8TGluayBleHRlcm5hbCBocmVmPXtnaXRodWJJc3N1ZXNVcmx9PlxuICAgIEtleW1hcCBFZGl0b3IgSXNzdWVzXG4gIDwvTGluaz5cbilcblxuZXhwb3J0IGNvbnN0IEdpdEh1Yldpa2lMYXlvdXRzTGluayA9IChcbiAgPExpbmsgZXh0ZXJuYWwgaHJlZj17Z2l0aHViV2lraUxheW91dHNVcmx9PlxuICAgIEtleW1hcCBFZGl0b3IgV2lraTogRGVmaW5pbmcga2V5Ym9hcmQgbGF5b3V0c1xuICA8L0xpbms+XG4pXG5cbmV4cG9ydCBjb25zdCBsYXlvdXRUb29sc0xpbmsgPSAoXG4gIDxMaW5rIGV4dGVybmFsIGhyZWY9e2tleW1hcExheW91dFRvb2xzVXJsfT5cbiAgICBLZXltYXAgTGF5b3V0IFRvb2xzIC0gSGVscGVyXG4gIDwvTGluaz5cbilcblxuZXhwb3J0IGNvbnN0IERpc2NvcmRQcm9maWxlTGluayA9IChcbiAgPExpbmsgZXh0ZXJuYWwgaHJlZj17ZGlzY29yZFByb2ZpbGVVcmx9PlxuICAgIERpc2NvcmQgLSBuaWNrY291dHNvcyM0MzUxXG4gIDwvTGluaz5cbilcblxuZXhwb3J0IGNvbnN0IEdlbmVyYWxIZWxwT2ZmZXJDb3B5ID0gKFxuICA8PlxuICAgIDxwPlxuICAgICAgSWYgeW91IGFyZSBsb29raW5nIGZvciBoZWxwIGluIGdldHRpbmcgdXAgYW5kIHJ1bm5pbmcgb3Igd2FudCBhIGJldHRlclxuICAgICAgdW5kZXJzdGFuZGluZyBvZiB0aGUgaXNzdWUsIHBsZWFzZSBmZWVsIGZyZWUgdG8gcmVhY2ggb3V0IHRvIG1lOlxuICAgIDwvcD5cbiAgICA8dWw+XG4gICAgICA8bGk+e0dpdEh1Yklzc3Vlc0xpbmt9PC9saT5cbiAgICAgIDxsaT57RGlzY29yZFByb2ZpbGVMaW5rfTwvbGk+XG4gICAgPC91bD5cbiAgPC8+XG4pXG5cbmV4cG9ydCBjb25zdCBLZXltYXBMYXlvdXRSZXNvdXJjZXMgPSAoXG4gIDxwPlxuICAgIEZvciBtb3JlIGluZm9ybWF0aW9uIGFib3V0IGhvdyBLZXltYXAgRWRpdG9yIGxheW91dHMgYXJlIGRlZmluZWQsIHlvdSBjYW5cbiAgICByZWFkIHtHaXRIdWJXaWtpTGF5b3V0c0xpbmt9LCBhbmQgaWYgeW91IG5lZWQgYW4gZW52aXJvbm1lbnQgdG8gcXVpY2tseSB0ZXN0XG4gICAgY2hhbmdlcyB0byBhIGxheW91dCB0cnkge2xheW91dFRvb2xzTGlua30uXG4gIDwvcD5cbilcbiIsImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcydcblxuaW1wb3J0IERpYWxvZ0JveCBmcm9tICcuLi9Db21tb24vRGlhbG9nQm94J1xuaW1wb3J0IE1vZGFsIGZyb20gJy4uL0NvbW1vbi9Nb2RhbCdcbmltcG9ydCB7IEdpdEh1Yklzc3Vlc0xpbmsgfSBmcm9tICcuL3N1cHBvcnQnXG5cbmZ1bmN0aW9uIExheW91dEdlbmVyYXRpb25FcnJvciAocHJvcHMpIHtcbiAgY29uc3QgeyBvbkRpc21pc3MgfSA9IHByb3BzXG5cbiAgcmV0dXJuIChcbiAgICA8TW9kYWw+XG4gICAgICA8RGlhbG9nQm94IG9uRGlzbWlzcz17b25EaXNtaXNzfT5cbiAgICAgICAgPGgyPkF1dG9tYXRpYyBMYXlvdXQgR2VuZXJhdGlvbiBGYWlsZWQ8L2gyPlxuICAgICAgICA8cD5cbiAgICAgICAgICBObyBhY2NvbXBhbnlpbmcgbGF5b3V0IHdhcyBmb3VuZCB3aXRoIHlvdXIga2V5bWFwIGZpbGUgYW5kIHRoZSBLZXltYXBcbiAgICAgICAgICBFZGl0b3Igd2FzIHVuYWJsZSB0byBnZW5lcmF0ZSBvbmUgYXV0b21hdGljYWxseSBmb3IgeW91LlxuICAgICAgICA8L3A+XG4gICAgICAgIDxwPlxuICAgICAgICAgIFNvbWV0aGluZyB3ZW50IHdyb25nIHdpdGggdGhlIGF0dGVtcHRlZCBhdXRvbWF0aWMgbGF5b3V0IGdlbmVyYXRpb25cbiAgICAgICAgICBmb3IgeW91ciBrZXlib2FyZCBhbmQgdGhlcmUncyBubyBhdXRvbWF0aWMgd2F5IHRvIHJlY292ZXIsIGJ1dCBpZiB5b3VcbiAgICAgICAgICB3YW50IHRvIHJlYWNoIG91dCBmb3IgYXNzaXN0YW5jZSBtYXliZSB3ZSBjYW4gd29yayB0b2dldGhlciB0byByZXNvbHZlXG4gICAgICAgICAgYW55IHRlY2huaWNhbCBpc3N1ZXMgb3IgZWxzZSBjcmFmdCBhIG1hbnVhbCBsYXlvdXQgZm9yIHlvdXIga2V5Ym9hcmQuXG4gICAgICAgIDwvcD5cbiAgICAgICAgPHA+XG4gICAgICAgICAgU2hhcmUgeW91ciBleHBlcmllbmNlIGF0IHtHaXRIdWJJc3N1ZXNMaW5rfS5cbiAgICAgICAgPC9wPlxuICAgICAgPC9EaWFsb2dCb3g+XG4gICAgPC9Nb2RhbD5cbiAgKVxufVxuXG5MYXlvdXRHZW5lcmF0aW9uRXJyb3IucHJvcFR5cGVzID0ge1xuICBvbkRpc21pc3M6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbn1cblxuZXhwb3J0IGRlZmF1bHQgTGF5b3V0R2VuZXJhdGlvbkVycm9yXG4iLCJpbXBvcnQgUmVhY3RTZWxlY3QgZnJvbSAncmVhY3Qtc2VsZWN0J1xuaW1wb3J0IHsgdXNlU2VsZWN0b3IgfSBmcm9tICdyZWFjdC1yZWR1eCdcblxuZXhwb3J0IGZ1bmN0aW9uIENvbnRyb2wgKHsgc3R5bGUgPSB7fSwgY2hpbGRyZW4gfSkge1xuICAvLyBiYXNlZCBvbiByZWFjdC1zZWxlY3QncyBjb250cm9sIGhlaWdodCwgd2hpY2ggc2hvdWxkIGNvbWUgZnJvbSBhIHRoZW1lIGluc3RlYWRcbiAgY29uc3QgYmFzZVN0eWxlID0ge1xuICAgIGhlaWdodDogJzM4cHgnLFxuICAgIGxpbmVIZWlnaHQ6ICczOHB4J1xuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IHN0eWxlPXt7IC4uLmJhc2VTdHlsZSwgLi4uc3R5bGUgfX0+XG4gICAgICB7Y2hpbGRyZW59XG4gICAgPC9kaXY+XG4gIClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEJ1dHRvbiAoeyBjaGlsZHJlbiwgc3R5bGUgPSB7fSwgLi4ucmVzdCB9KSB7XG4gIHJldHVybiAoXG4gICAgPENvbnRyb2wgc3R5bGU9e3N0eWxlfT5cbiAgICAgIDxidXR0b24gc3R5bGU9e3sgaGVpZ2h0OiAnMTAwJScgfX0gey4uLnJlc3R9PlxuICAgICAgICB7Y2hpbGRyZW59XG4gICAgICA8L2J1dHRvbj5cbiAgICA8L0NvbnRyb2w+XG4gIClcbn1cblxuY29uc3QgZGFya01vZGVQcmVmZXJlbmNlID0gd2luZG93Lm1hdGNoTWVkaWEoJyhwcmVmZXJzLWNvbG9yLXNjaGVtZTogZGFyayknKVxuY29uc3QgaW52ZXJ0ZWROZXV0cmFsQ29sb3JzID0gWzAsIDUsIDEwLCAyMCwgMzAsIDQwLCA1MCwgNjAsIDcwLCA4MCwgOTBdLnJlZHVjZSgoY29sb3JzLCBpKSA9PiB7XG4gIGNvbG9yc1tgbmV1dHJhbCR7aX1gXSA9IGBoc2woMCwgMCUsICR7aX0lKWBcbiAgcmV0dXJuIGNvbG9yc1xufSwge30pXG5cbmV4cG9ydCBmdW5jdGlvbiBTZWxlY3QgKHsgbGFiZWwsIC4uLnJlc3QgfSkge1xuICBjb25zdCB7IHRoZW1lIH0gPSB1c2VTZWxlY3RvcihzdGF0ZSA9PiBzdGF0ZSlcbiAgY29uc3QgaXNEYXJrID0gdGhlbWUgPT09ICdkYXJrJyB8fCAodGhlbWUgPT09ICdzeXN0ZW0nICYmIGRhcmtNb2RlUHJlZmVyZW5jZS5tYXRjaGVzKVxuXG4gIHJldHVybiAoXG4gICAgPGRpdiBzdHlsZT17e1xuICAgICAgZGlzcGxheTogJ2lubGluZS1ibG9jaycsXG4gICAgICB3aWR0aDogJ2F1dG8nXG4gICAgfX0+XG4gICAgICA8bGFiZWwgc3R5bGU9e3tcbiAgICAgICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgZm9udFNpemU6ICcxMjAlJyxcbiAgICAgICAgY29sb3I6ICd2YXIoLS1mZyknXG4gICAgICB9fT5cbiAgICAgICAge2xhYmVsfVxuICAgICAgPC9sYWJlbD5cbiAgICAgIDxSZWFjdFNlbGVjdFxuICAgICAgICBzdHlsZXM9e3tcbiAgICAgICAgICBjb250YWluZXI6IChiYXNlU3R5bGVzLCBzdGF0ZSkgPT4gKHtcbiAgICAgICAgICAgIC4uLmJhc2VTdHlsZXMsXG4gICAgICAgICAgICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJ1xuICAgICAgICAgIH0pLFxuICAgICAgICAgIG1lbnU6IChiYXNlU3R5bGVzKSA9PiAoe1xuICAgICAgICAgICAgLi4uYmFzZVN0eWxlcyxcbiAgICAgICAgICAgIHdpZHRoOiAnbWF4LWNvbnRlbnQnLFxuICAgICAgICAgICAgekluZGV4OiAxMFxuICAgICAgICAgIH0pXG4gICAgICAgIH19XG4gICAgICAgIHRoZW1lPXt0aGVtZSA9PiAoe1xuICAgICAgICAgIC4uLnRoZW1lLFxuICAgICAgICAgIGNvbG9yczoge1xuICAgICAgICAgICAgLi4udGhlbWUuY29sb3JzLFxuICAgICAgICAgICAgLi4uKGlzRGFyayA/IGludmVydGVkTmV1dHJhbENvbG9ycyA6IHt9KVxuICAgICAgICAgIH1cbiAgICAgICAgfSl9XG4gICAgICAgIGlzU2VhcmNoYWJsZT17ZmFsc2V9XG4gICAgICAgIHsuLi5yZXN0fVxuICAgICAgLz5cbiAgICA8L2Rpdj5cbiAgKVxufVxuIiwiaW1wb3J0IHsgZmluZCB9IGZyb20gJ2xvZGFzaCdcbmltcG9ydCB7IHVzZUNhbGxiYWNrLCB1c2VFZmZlY3QsIHVzZU1lbW8sIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnXG5cbmltcG9ydCAqIGFzIGFwaSBmcm9tICcuLi8uLi9hcGknXG5pbXBvcnQgTGF5b3V0R2VuZXJhdGlvbkVycm9yIGZyb20gJy4uLy4uL0RpYWxvZ3MvTGF5b3V0R2VuZXJhdGlvbkVycm9yJ1xuaW1wb3J0IHsgU2VsZWN0IH0gZnJvbSAnLi4vQ29udHJvbHMnXG5cbmZ1bmN0aW9uIExvY2FsUGlja2VyICh7IG9uU2VsZWN0LCBvbkVycm9yIH0pIHtcbiAgY29uc3QgW2tleWJvYXJkcywgc2V0S2V5Ym9hcmRzXSA9IHVzZVN0YXRlKFtdKVxuICBjb25zdCBba2V5Ym9hcmQsIHNldEtleWJvYXJkXSA9IHVzZVN0YXRlKG51bGwpXG5cbiAgY29uc3QgY2hvaWNlcyA9IHVzZU1lbW8oKCkgPT4gKFxuICAgIGtleWJvYXJkcy5tYXAobmFtZSA9PiAoeyBpZDogbmFtZSwgbmFtZSB9KSlcbiAgKSwgW2tleWJvYXJkc10pXG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAoYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgY29uc3Qga2V5Ym9hcmRzID0gYXdhaXQgYXBpLmxvYWRBdmFpbGFibGVLZXlib2FyZHMoKVxuICAgICAgY29uc3QgcGVyc2lzdGVkS2V5Ym9hcmQgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdsb2NhbFNvdXJjZVNlbGVjdGVkS2V5Ym9hcmQnKSB8fCAnbnVsbCcpXG4gICAgICBjb25zdCBpbml0aWFsU2VsZWN0aW9uID0ga2V5Ym9hcmRzLmluY2x1ZGVzKHBlcnNpc3RlZEtleWJvYXJkKVxuICAgICAgICA/IHBlcnNpc3RlZEtleWJvYXJkXG4gICAgICAgIDoga2V5Ym9hcmRzWzBdXG5cbiAgICAgIHNldEtleWJvYXJkcyhrZXlib2FyZHMpXG4gICAgICBzZXRLZXlib2FyZChpbml0aWFsU2VsZWN0aW9uKVxuICAgIH0pKClcbiAgfSwgW3NldEtleWJvYXJkcywgc2V0S2V5Ym9hcmRdKVxuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgKGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChrZXlib2FyZCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNvbnN0IHsgaW5mbywga2V5bWFwLCBzZW5zb3JzIH0gPSBhd2FpdCBhcGkubG9hZEtleWJvYXJkRmlsZXMoa2V5Ym9hcmQpXG4gICAgICAgICAgY29uc3QgeyBsYXlvdXRzIH0gPSBpbmZvXG4gICAgICAgICAgY29uc3QgcHJlZmVycmVkTGF5b3V0ID0ga2V5bWFwLmNob3Nlblsnem1rLG1hdHJpeF90cmFuc2Zvcm0nXVxuICAgICAgICAgICAgPyBrZXltYXAuY2hvc2VuWyd6bWssbWF0cml4X3RyYW5zZm9ybSddLnJlcGxhY2UoL14mLywgJycpXG4gICAgICAgICAgICA6IG51bGxcblxuICAgICAgICAgIGNvbnN0IGRlZmF1bHRMYXlvdXQgPSBPYmplY3Qua2V5cyhsYXlvdXRzKVswXVxuICAgICAgICAgIGNvbnN0IGxheW91dE1ldGFkYXRhID0gKFxuICAgICAgICAgICAgbGF5b3V0c1twcmVmZXJyZWRMYXlvdXRdIHx8XG4gICAgICAgICAgICBsYXlvdXRzW2RlZmF1bHRMYXlvdXRdXG4gICAgICAgICAgKVxuXG4gICAgICAgICAgb25TZWxlY3Qoe1xuICAgICAgICAgICAgc291cmNlOiAnbG9jYWwnLFxuICAgICAgICAgICAga2V5Ym9hcmQsXG4gICAgICAgICAgICBsYXlvdXRNZXRhZGF0YSxcbiAgICAgICAgICAgIGxheW91dDogbGF5b3V0TWV0YWRhdGEubGF5b3V0LFxuICAgICAgICAgICAga2V5bWFwLFxuICAgICAgICAgICAgc2Vuc29yc1xuICAgICAgICAgIH0pXG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIGlmIChlcnIucmVzcG9uc2UpIHtcbiAgICAgICAgICAgIGNvbnN0IGVycm9yID0gYXdhaXQgZXJyLnJlc3BvbnNlLmpzb24oKVxuICAgICAgICAgICAgaWYgKGVycm9yLm5hbWUgPT09ICdMYXlvdXRHZW5lcmF0aW9uRXJyb3InKSB7XG4gICAgICAgICAgICAgIG9uRXJyb3IoeyBkaWFsb2c6IExheW91dEdlbmVyYXRpb25FcnJvciB9KVxuICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aHJvdyBlcnJcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pKClcbiAgfSwgW29uU2VsZWN0LCBvbkVycm9yLCBrZXlib2FyZF0pXG5cbiAgY29uc3QgaGFuZGxlU2VsZWN0S2V5Ym9hcmQgPSB1c2VDYWxsYmFjaygoeyBpZDoga2V5Ym9hcmQgfSkgPT4ge1xuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdsb2NhbFNvdXJjZVNlbGVjdGVkS2V5Ym9hcmQnLCBKU09OLnN0cmluZ2lmeShrZXlib2FyZCkpXG4gICAgc2V0S2V5Ym9hcmQoa2V5Ym9hcmQpXG4gIH0sIFtzZXRLZXlib2FyZF0pXG5cbiAgY29uc3Qgc2VsZWN0aW9uID0gZmluZChjaG9pY2VzLCB7IGlkOiBrZXlib2FyZCB9KVxuXG4gIHJldHVybiAoXG4gICAgPFNlbGVjdFxuICAgICAgbGFiZWw9XCJLZXlib2FyZFwiXG4gICAgICB2YWx1ZT17c2VsZWN0aW9ufVxuICAgICAgb3B0aW9ucz17Y2hvaWNlc31cbiAgICAgIG9uQ2hhbmdlPXtoYW5kbGVTZWxlY3RLZXlib2FyZH1cbiAgICAgIGdldE9wdGlvblZhbHVlPXtvcHRpb24gPT4gb3B0aW9uLmlkfVxuICAgICAgZ2V0T3B0aW9uTGFiZWw9e29wdGlvbiA9PiBvcHRpb24ubmFtZX1cbiAgICAvPlxuICApXG59XG5cbmV4cG9ydCBkZWZhdWx0IExvY2FsUGlja2VyXG4iLCJpbXBvcnQgTGluayBmcm9tICcuLi8uLi8uLi9Db21tb24vTGluaydcbmltcG9ydCBEaWFsb2dCb3ggZnJvbSAnLi4vLi4vLi4vQ29tbW9uL0RpYWxvZ0JveCdcbmltcG9ydCBNb2RhbCBmcm9tICcuLi8uLi8uLi9Db21tb24vTW9kYWwnXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIERlbW9IZWxwRGlhbG9nIChwcm9wcykge1xuICBjb25zdCBkZW1vUmVwb1VybCA9ICdodHRwczovL2dpdGh1Yi5jb20vbmlja2NvdXRzb3Mvem1rLWNvbmZpZy1jb3JuZS1kZW1vJ1xuICBjb25zdCB0ZW1wbGF0ZVVybCA9ICdodHRwczovL2dpdGh1Yi5jb20vbmlja2NvdXRzb3Mvem1rLWNvbmZpZy1jb3JuZS1kZW1vL2dlbmVyYXRlJ1xuICBjb25zdCBkZW1vTGluayA9IDxMaW5rIGhyZWY9e2RlbW9SZXBvVXJsfSBleHRlcm5hbD5HaXRIdWIgUmVwbzwvTGluaz5cblxuICByZXR1cm4gKFxuICAgIDxNb2RhbD5cbiAgICAgIDxEaWFsb2dCb3ggey4uLnByb3BzfT5cbiAgICAgICAgPGgyPktleW1hcCBFZGl0b3IgRGVtbzwvaDI+XG4gICAgICAgIDxwPlxuICAgICAgICAgIFdlbGNvbWUhIFRoaXMgZGVtbyBrZXlib2FyZCBpcyBwcm92aWRlZCB0byBsZXQgeW91IGV4cGVyaW1lbnQgd2l0aCB0aGVcbiAgICAgICAgICBrZXltYXAgZWRpdG9yIGJlZm9yZSBzZXR0aW5nIHVwIHlvdXIgb3duIHJlcG9zaXRvcnkuXG4gICAgICAgIDwvcD5cbiAgICAgICAgPGgzPkZlYXR1cmVzPC9oMz5cbiAgICAgICAgPHVsPlxuICAgICAgICAgIDxsaT5cbiAgICAgICAgICAgIDxzdHJvbmc+V1lTSVdZRyBFZGl0aW5nPC9zdHJvbmc+LiBKdXN0IGNsaWNrIG9uIGtleSBhbmQgYmVoYXZpb3VyXG4gICAgICAgICAgICBiaW5kaW5ncyB0byBtYWtlIGNoYW5nZXMsIGFkZCBvciByZW1vdmUgbGF5ZXJzIGluIHRoZSBzaWRlYmFyLlxuICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgPGxpPlxuICAgICAgICAgICAgPHN0cm9uZz5LZXltYXAgZ2VuZXJhdGlvbjwvc3Ryb25nPi4gVGhlIGVkaXRvciBjYW4gZXhwb3J0IGtleW1hcCB0b1xuICAgICAgICAgICAgWk1LJ3Mgc3ludGF4ICh3aGVuIHJ1bm5pbmcgbG9jYWxseSBvciBpbnRlZ3JhdGVkIHdpdGggR2l0SHViKSwgYW5kXG4gICAgICAgICAgICB3aWxsIGV2ZW4gYXR0ZW1wdCB0byBmb3JtYXQgdGhlIDxjb2RlPi5rZXltYXA8L2NvZGU+IGZpbGUgZm9yIGJldHRlclxuICAgICAgICAgICAgcmVhZGFiaWxpdHkuXG4gICAgICAgICAgPC9saT5cbiAgICAgICAgICA8bGk+XG4gICAgICAgICAgICA8c3Ryb25nPkRldmljZXRyZWUgcGFyc2luZzwvc3Ryb25nPi4gPGVtPihFeHBlcmltZW50YWwhKTwvZW0+IFJlYWRcbiAgICAgICAgICAgIGFuZCB3cml0ZSB0byB5b3VyIGV4aXN0aW5nIFpNSyA8Y29kZT4ua2V5bWFwPC9jb2RlPiBmaWxlIHNvIHRoYXQgeW91XG4gICAgICAgICAgICBjYW4gc3RpbGwgdXNlIFpNSyBmZWF0dXJlcyB0aGF0IHRoZSBhcHAgZG9lc24ndCBzdXBwb3J0IHlldC5cbiAgICAgICAgICA8L2xpPlxuICAgICAgICA8L3VsPlxuICAgICAgICA8aDM+V2hhdCdzIG5leHQ/PC9oMz5cbiAgICAgICAgPHA+XG4gICAgICAgICAgSWYgeW91IGxpa2UgdGhlIGVkaXRvciwgdHJ5IGludGVncmF0aW5nIHdpdGggeW91ciBvd24gR2l0SHViIGhvc3RlZFxuICAgICAgICAgIGtleWJvYXJkIGNvbmZpZy4gPExpbmsgaHJlZj17dGVtcGxhdGVVcmx9IGV4dGVybmFsPlVzZSBpdCBhcyBhXG4gICAgICAgICAgdGVtcGxhdGU8L0xpbms+IGZvciB5b3VyIG93biwgb3IganVzdCByZWFkIHRocm91Z2ggdGhlIHtkZW1vTGlua30gZm9yXG4gICAgICAgICAgdGhpcyBrZXlib2FyZCB0byBsZWFybiB3aGF0IHRvIGFwcGx5IHRvIHlvdXIgZXhpc3Rpbmcga2V5Ym9hcmQuXG4gICAgICAgIDwvcD5cbiAgICAgIDwvRGlhbG9nQm94PlxuICAgIDwvTW9kYWw+XG4gIClcbn1cbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMl0udXNlWzFdIS4vc3R5bGUubW9kdWxlLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzJdLnVzZVsxXSEuL3N0eWxlLm1vZHVsZS5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgeyB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgSWNvbiBmcm9tICcuLi8uLi9Db21tb24vSWNvbidcblxuaW1wb3J0IHsgQnV0dG9uIH0gZnJvbSAnLi4vQ29udHJvbHMnXG5pbXBvcnQgRGVtb0hlbHBEaWFsb2cgZnJvbSAnLi9EaWFsb2dzL0RlbW9IZWxwRGlhbG9nJ1xuaW1wb3J0IHN0eWxlcyBmcm9tICcuL3N0eWxlLm1vZHVsZS5jc3MnXG5cbmZ1bmN0aW9uIERlbW9QaWNrZXIgKHsgb25TZWxlY3QgfSkge1xuICBjb25zdCBbc2hvd0RlbW9IZWxwRGlhbG9nLCBzZXRTaG93RGVtb0hlbHBEaWFsb2ddID0gdXNlU3RhdGUoZmFsc2UpXG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAoYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgY29uc3QgeyBsYXlvdXQsIGtleW1hcCB9ID0gYXdhaXQgaW1wb3J0KCcuL2RhdGEvZGVtby5qc29uJylcbiAgICAgIG9uU2VsZWN0KHsgc291cmNlOiAnZGVtbycsIGxheW91dCwga2V5bWFwIH0pXG4gICAgfSkoKVxuICB9LCBbb25TZWxlY3RdKVxuXG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIDxCdXR0b25cbiAgICAgICAgc3R5bGU9e3sgYmFja2dyb3VuZDogJ25vbmUnLCBib3JkZXI6ICdub25lJyB9fVxuICAgICAgICBvbkNsaWNrPXsoKSA9PiBzZXRTaG93RGVtb0hlbHBEaWFsb2codHJ1ZSl9XG4gICAgICA+XG4gICAgICAgIDxJY29uXG4gICAgICAgICAgbmFtZT1cImluZm9cIlxuICAgICAgICAgIGNsYXNzTmFtZT17c3R5bGVzLmhlbHB9XG4gICAgICAgIC8+IFdoYXQgaXMgdGhpcz9cbiAgICAgIDwvQnV0dG9uPlxuICAgICAge3Nob3dEZW1vSGVscERpYWxvZyAmJiAoXG4gICAgICAgIDxEZW1vSGVscERpYWxvZyBvbkRpc21pc3M9eygpID0+IHNldFNob3dEZW1vSGVscERpYWxvZyhmYWxzZSl9IC8+XG4gICAgICApfVxuICAgIDwvPlxuICApXG59XG5cbmV4cG9ydCBkZWZhdWx0IERlbW9QaWNrZXJcbiIsImltcG9ydCBEaWFsb2dCb3ggZnJvbSAnLi4vLi4vQ29tbW9uL0RpYWxvZ0JveCdcbmltcG9ydCBNb2RhbCBmcm9tICcuLi8uLi9Db21tb24vTW9kYWwnXG5cbmZ1bmN0aW9uIGZpbGVGcm9tVGl0bGUgKHRpdGxlKSB7XG4gIGlmICh0aXRsZSA9PT0gJ0luZm9WYWxpZGF0aW9uRXJyb3InKSB7XG4gICAgcmV0dXJuICdjb25maWcvaW5mby5qc29uJ1xuICB9IGVsc2UgaWYgKHRpdGxlID09PSAnS2V5bWFwVmFsaWRhdGlvbkVycm9yJykge1xuICAgIHJldHVybiAnY29uZmlnL2tleW1hcC5qc29uJ1xuICB9XG59XG5cbmNvbnN0IGxpc3RTdHlsZSA9IHtcbiAgbWF4SGVpZ2h0OiAnMzAwcHgnLFxuICBvdmVyZmxvdzogJ2F1dG8nLFxuICBwYWRkaW5nOiAnMTBweCcsXG4gIGZvbnRGYW1pbHk6ICdtb25vc3BhY2UnLFxuICBmb250U2l6ZTogJzgwJScsXG4gIGJhY2tncm91bmRDb2xvcjogJ3JnYigyMzksIDIzOSwgMjM5LCAwLjUpJ1xufVxuXG5jb25zdCBsaXN0SXRlbVN0eWxlID0geyBtYXJnaW46ICcxMHB4JyB9XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFZhbGlkYXRpb25FcnJvcnMgKHByb3BzKSB7XG4gIGNvbnN0IHsgb25EaXNtaXNzLCB0aXRsZSwgZXJyb3JzIH0gPSBwcm9wc1xuICBjb25zdCBmaWxlID0gZmlsZUZyb21UaXRsZSh0aXRsZSlcblxuICByZXR1cm4gKFxuICAgIDxNb2RhbD5cbiAgICAgIDxEaWFsb2dCb3ggb25EaXNtaXNzPXtvbkRpc21pc3N9PlxuICAgICAgICA8aDI+e3RpdGxlfTwvaDI+XG4gICAgICAgIHtmaWxlICYmIChcbiAgICAgICAgICA8cD5FcnJvcnMgaW4gdGhlIGZpbGUgPGNvZGU+e2ZpbGV9PC9jb2RlPi48L3A+XG4gICAgICAgICl9XG4gICAgICAgIDx1bCBzdHlsZT17bGlzdFN0eWxlfT5cbiAgICAgICAgICB7ZXJyb3JzLm1hcCgoZXJyb3IsIGkpID0+IChcbiAgICAgICAgICAgIDxsaSBrZXk9e2l9IHN0eWxlPXtsaXN0SXRlbVN0eWxlfT5cbiAgICAgICAgICAgICAge2Vycm9yfVxuICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICApKX1cbiAgICAgICAgPC91bD5cbiAgICAgIDwvRGlhbG9nQm94PlxuICAgIDwvTW9kYWw+XG4gIClcbn1cbiIsImNvbnN0IFJFUE9TSVRPUlkgPSAnc2VsZWN0ZWRHaXRodWJSZXBvc2l0b3J5J1xuY29uc3QgQlJBTkNIID0gJ3NlbGVjdGVkR2l0aHViQnJhbmNoJ1xuY29uc3QgS0VZQk9BUkQgPSAnc2VsZWN0ZWRHaXRodWJLZXlib2FyZCdcblxuZXhwb3J0IGZ1bmN0aW9uIGdldFBlcnNpc3RlZFJlcG9zaXRvcnkgKCkge1xuICB0cnkge1xuICAgIHJldHVybiBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKFJFUE9TSVRPUlkpKVxuICB9IGNhdGNoIHtcbiAgICByZXR1cm4gbnVsbFxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRQZXJzaXN0ZWRSZXBvc2l0b3J5IChyZXBvc2l0b3J5KSB7XG4gIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFJFUE9TSVRPUlksIEpTT04uc3RyaW5naWZ5KHJlcG9zaXRvcnkpKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0UGVyc2lzdGVkQnJhbmNoIChyZXBvSWQpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbShgJHtCUkFOQ0h9OiR7cmVwb0lkfWApKVxuICB9IGNhdGNoIHtcbiAgICByZXR1cm4gbnVsbFxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRQZXJzaXN0ZWRLZXlib2FyZCAocmVwb0lkLCBicmFuY2gpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbShgJHtLRVlCT0FSRH06JHtyZXBvSWR9OiR7YnJhbmNofWApKVxuICB9IGNhdGNoIHtcbiAgICByZXR1cm4gbnVsbFxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRQZXJzaXN0ZWRCcmFuY2ggKHJlcG9JZCwgYnJhbmNoKSB7XG4gIGxvY2FsU3RvcmFnZS5zZXRJdGVtKGAke0JSQU5DSH06JHtyZXBvSWR9YCwgSlNPTi5zdHJpbmdpZnkoYnJhbmNoKSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNldFBlcnNpc3RlZEtleWJvYXJkIChyZXBvSWQsIGJyYW5jaCwga2V5Ym9hcmQpIHtcbiAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oYCR7S0VZQk9BUkR9OiR7cmVwb0lkfToke2JyYW5jaH1gLCBKU09OLnN0cmluZ2lmeShrZXlib2FyZCkpXG59XG4iLCJpbXBvcnQgeyBjcmVhdGVTbGljZSB9IGZyb20gJ0ByZWR1eGpzL3Rvb2xraXQnXG5pbXBvcnQgZmluZCBmcm9tICdsb2Rhc2gvZmluZCdcbmltcG9ydCBtYXAgZnJvbSAnbG9kYXNoL21hcCdcbmltcG9ydCB7IHVzZU1lbW8sIHVzZVJlZHVjZXIgfSBmcm9tICdyZWFjdCdcblxuaW1wb3J0IGdpdGh1YiBmcm9tICcuL2FwaSdcbmltcG9ydCAqIGFzIHN0b3JhZ2UgZnJvbSAnLi9zdG9yYWdlJ1xuXG5jb25zdCBJTklUSUFMX1NUQVRFID0ge1xuICBibG9ja2VkOiBmYWxzZSxcbiAgaW5pdGlhbGl6ZWQ6IGZhbHNlLFxuICBzZWxlY3RlZFJlcG9JZDogbnVsbCxcbiAgc2VsZWN0ZWRCcmFuY2hOYW1lOiBudWxsLFxuICBzZWxlY3RlZEtleWJvYXJkOiBudWxsLFxuICBicmFuY2hlczogW10sXG4gIGtleWJvYXJkczogW10sXG4gIGxvYWRpbmc6IGZhbHNlLFxuICB3YXJuaW5nRmxhZ3M6IFtdXG59XG5cbmV4cG9ydCBjb25zdCBwaWNrZXJTbGljZSA9IGNyZWF0ZVNsaWNlKHtcbiAgbmFtZTogJ2dpdGh1Yi1waWNrZXInLFxuICBpbml0aWFsU3RhdGU6IElOSVRJQUxfU1RBVEUsXG4gIHJlZHVjZXJzOiB7XG4gICAgY2xlYXJTZWxlY3Rpb24gKHN0YXRlKSB7XG4gICAgICBzdGF0ZS53YXJuaW5nRmxhZ3MgPSBbXVxuICAgICAgc3RhdGUubG9hZGluZyA9IGZhbHNlXG4gICAgfSxcbiAgICBpbnRlZ3JhdGlvbkluaXRpYWxpemVkIChzdGF0ZSkge1xuICAgICAgY29uc3QgcGVyc2lzdGVkUmVwb0lkID0gc3RvcmFnZS5nZXRQZXJzaXN0ZWRSZXBvc2l0b3J5KClcbiAgICAgIGNvbnN0IHJlcG9zaXRvcmllcyA9IGdpdGh1Yi5yZXBvc2l0b3JpZXMgfHwgW11cbiAgICAgIGxldCBzZWxlY3RlZFJlcG9JZFxuXG4gICAgICBpZiAoZmluZChyZXBvc2l0b3JpZXMsIHsgaWQ6IHBlcnNpc3RlZFJlcG9JZCB9KSkge1xuICAgICAgICBzZWxlY3RlZFJlcG9JZCA9IHBlcnNpc3RlZFJlcG9JZFxuICAgICAgfSBlbHNlIGlmIChyZXBvc2l0b3JpZXMubGVuZ3RoID4gMCkge1xuICAgICAgICBzZWxlY3RlZFJlcG9JZCA9IHJlcG9zaXRvcmllc1swXS5pZFxuICAgICAgfVxuXG4gICAgICBzdGF0ZS5pbml0aWFsaXplZCA9IHRydWVcbiAgICAgIHN0YXRlLnNlbGVjdGVkUmVwb0lkID0gc2VsZWN0ZWRSZXBvSWRcbiAgICB9LFxuICAgIGxvYWRpbmdCcmFuY2hlc0xpc3QgKHN0YXRlKSB7IHN0YXRlLmxvYWRpbmcgPSB0cnVlIH0sXG4gICAgbG9hZGVkQnJhbmNoZXNMaXN0IChzdGF0ZSwgYWN0aW9uKSB7XG4gICAgICBjb25zdCB7IHNlbGVjdGVkUmVwb0lkIH0gPSBzdGF0ZVxuICAgICAgY29uc3QgeyBicmFuY2hlcyB9ID0gYWN0aW9uLnBheWxvYWRcbiAgICAgIGNvbnN0IHJlcG9zaXRvcnkgPSBmaW5kKGdpdGh1Yi5yZXBvc2l0b3JpZXMsIHsgaWQ6IHNlbGVjdGVkUmVwb0lkIH0pXG5cbiAgICAgIHN0YXRlLmJyYW5jaGVzID0gYnJhbmNoZXNcbiAgICAgIHN0YXRlLmtleWJvYXJkID0gbnVsbFxuICAgICAgc3RhdGUua2V5Ym9hcmRzID0gW11cbiAgICAgIHN0YXRlLmxvYWRpbmcgPSBmYWxzZVxuXG4gICAgICBjb25zdCBhdmFpbGFibGUgPSBtYXAoYnJhbmNoZXMsICduYW1lJylcbiAgICAgIGNvbnN0IGRlZmF1bHRCcmFuY2ggPSByZXBvc2l0b3J5LmRlZmF1bHRfYnJhbmNoXG4gICAgICBjb25zdCBwcmV2aW91c0JyYW5jaCA9IHN0b3JhZ2UuZ2V0UGVyc2lzdGVkQnJhbmNoKHNlbGVjdGVkUmVwb0lkKVxuICAgICAgY29uc3Qgb25seUJyYW5jaCA9IGJyYW5jaGVzLmxlbmd0aCA9PT0gMSA/IGJyYW5jaGVzWzBdLm5hbWUgOiBudWxsXG5cbiAgICAgIGZvciAoY29uc3QgYnJhbmNoIG9mIFtvbmx5QnJhbmNoLCBwcmV2aW91c0JyYW5jaCwgZGVmYXVsdEJyYW5jaF0pIHtcbiAgICAgICAgaWYgKGF2YWlsYWJsZS5pbmNsdWRlcyhicmFuY2gpKSB7XG4gICAgICAgICAgc3RhdGUuc2VsZWN0ZWRCcmFuY2hOYW1lID0gYnJhbmNoXG4gICAgICAgICAgc3RhdGUuc2VsZWN0ZWRLZXlib2FyZCA9IHN0b3JhZ2UuZ2V0UGVyc2lzdGVkS2V5Ym9hcmQoc2VsZWN0ZWRSZXBvSWQsIGJyYW5jaClcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBsb2FkaW5nS2V5Ym9hcmRzTGlzdCAoc3RhdGUpIHsgc3RhdGUubG9hZGluZyA9IHRydWUgfSxcbiAgICBsb2FkZWRLZXlib2FyZHNMaXN0IChzdGF0ZSwgYWN0aW9uKSB7XG4gICAgICBjb25zdCB7IHNlbGVjdGVkUmVwb0lkLCBzZWxlY3RlZEJyYW5jaE5hbWUgfSA9IHN0YXRlXG4gICAgICBjb25zdCB7IGtleWJvYXJkcywgZGVmYXVsdDogZGVmYXVsdEtleWJvYXJkIH0gPSBhY3Rpb24ucGF5bG9hZFxuXG4gICAgICBzdGF0ZS5rZXlib2FyZHMgPSBrZXlib2FyZHNcbiAgICAgIHN0YXRlLmxvYWRpbmcgPSBmYWxzZVxuXG4gICAgICBjb25zdCBwcmV2aW91c0tleWJvYXJkID0gc3RvcmFnZS5nZXRQZXJzaXN0ZWRLZXlib2FyZChzZWxlY3RlZFJlcG9JZCwgc2VsZWN0ZWRCcmFuY2hOYW1lKVxuICAgICAgY29uc3Qgb25seUtleWJvYXJkID0ga2V5Ym9hcmRzLmxlbmd0aCA9PT0gMSA/IGtleWJvYXJkc1swXSA6IG51bGxcblxuICAgICAgZm9yIChjb25zdCBrZXlib2FyZCBvZiBbb25seUtleWJvYXJkLCBwcmV2aW91c0tleWJvYXJkLCBkZWZhdWx0S2V5Ym9hcmRdKSB7XG4gICAgICAgIGlmIChrZXlib2FyZHMuaW5jbHVkZXMoa2V5Ym9hcmQpKSB7XG4gICAgICAgICAgc3RhdGUuc2VsZWN0ZWRLZXlib2FyZCA9IGtleWJvYXJkXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgc2VsZWN0ZWRSZXBvc2l0b3J5IChzdGF0ZSwgYWN0aW9uKSB7XG4gICAgICBzdGF0ZS5zZWxlY3RlZFJlcG9JZCA9IGFjdGlvbi5wYXlsb2FkLnJlcG9zaXRvcnkuaWRcbiAgICAgIHN0YXRlLnNlbGVjdGVkQnJhbmNoTmFtZSA9IG51bGxcbiAgICAgIHN0YXRlLnNlbGVjdGVkS2V5Ym9hcmQgPSBudWxsXG5cbiAgICAgIHN0b3JhZ2Uuc2V0UGVyc2lzdGVkUmVwb3NpdG9yeShzdGF0ZS5zZWxlY3RlZFJlcG9JZClcbiAgICB9LFxuICAgIHNlbGVjdGVkQnJhbmNoIChzdGF0ZSwgYWN0aW9uKSB7XG4gICAgICBzdGF0ZS5zZWxlY3RlZEJyYW5jaE5hbWUgPSBhY3Rpb24ucGF5bG9hZC5uYW1lXG4gICAgICBzdGF0ZS5zZWxlY3RlZEtleWJvYXJkID0gc3RvcmFnZS5nZXRQZXJzaXN0ZWRLZXlib2FyZChcbiAgICAgICAgc3RhdGUuc2VsZWN0ZWRSZXBvSWQsXG4gICAgICAgIHN0YXRlLnNlbGVjdGVkQnJhbmNoTmFtZVxuICAgICAgKVxuICAgICAgc3RvcmFnZS5zZXRQZXJzaXN0ZWRCcmFuY2goXG4gICAgICAgIHN0YXRlLnNlbGVjdGVkUmVwb0lkLFxuICAgICAgICBzdGF0ZS5zZWxlY3RlZEJyYW5jaE5hbWVcbiAgICAgIClcbiAgICB9LFxuICAgIHNlbGVjdGVkS2V5Ym9hcmQgKHN0YXRlLCBhY3Rpb24pIHtcbiAgICAgIHN0YXRlLnNlbGVjdGVkS2V5Ym9hcmQgPSBhY3Rpb24ucGF5bG9hZC5uYW1lXG4gICAgICBzdG9yYWdlLnNldFBlcnNpc3RlZEtleWJvYXJkKFxuICAgICAgICBzdGF0ZS5zZWxlY3RlZFJlcG9JZCxcbiAgICAgICAgc3RhdGUuc2VsZWN0ZWRCcmFuY2hOYW1lLFxuICAgICAgICBzdGF0ZS5zZWxlY3RlZEtleWJvYXJkXG4gICAgICApXG4gICAgfSxcbiAgICBrZXlib2FyZExvYWRpbmcgKHN0YXRlLCBhY3Rpb24pIHtcbiAgICAgIHN0YXRlLmxvYWRpbmcgPSB0cnVlXG4gICAgfSxcbiAgICBrZXlib2FyZExvYWRlZFN1Y2Nlc3MgKHN0YXRlLCBhY3Rpb24pIHtcbiAgICAgIGNvbnN0IHsgcmVzcG9uc2U6IHsga2V5bWFwIH0gfSA9IGFjdGlvbi5wYXlsb2FkXG4gICAgICBzdGF0ZS53YXJuaW5nRmxhZ3MgPSBrZXltYXAud2FybmluZ0ZsYWdzIHx8IFtdXG4gICAgICBzdGF0ZS5sb2FkaW5nID0gZmFsc2VcbiAgICB9XG4gIH1cbn0pXG5cbmZ1bmN0aW9uIHVzZUFjdGlvbkRpc3BhdGNoZXJzIChkaXNwYXRjaCkge1xuICByZXR1cm4gdXNlTWVtbygoKSA9PiAoXG4gICAgT2JqZWN0LmtleXMocGlja2VyU2xpY2UuYWN0aW9ucykucmVkdWNlKChhY3Rpb25zLCBhY3Rpb24pID0+IHtcbiAgICAgIGFjdGlvbnNbYWN0aW9uXSA9ICguLi5hcmdzKSA9PiBkaXNwYXRjaChwaWNrZXJTbGljZS5hY3Rpb25zW2FjdGlvbl0oLi4uYXJncykpXG4gICAgICByZXR1cm4gYWN0aW9uc1xuICAgIH0sIHt9KVxuICApLCBbZGlzcGF0Y2hdKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdXNlUGlja2VyU3RvcmUgKCkge1xuICBjb25zdCBbc3RhdGUsIGRpc3BhdGNoXSA9IHVzZVJlZHVjZXIocGlja2VyU2xpY2UucmVkdWNlciwgSU5JVElBTF9TVEFURSlcbiAgY29uc3QgZGlzcGF0Y2hlcnMgPSB1c2VBY3Rpb25EaXNwYXRjaGVycyhkaXNwYXRjaClcblxuICByZXR1cm4gW3N0YXRlLCBkaXNwYXRjaGVyc11cbn1cbiIsImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcydcblxuaW1wb3J0IERpYWxvZ0JveCBmcm9tICcuLi9Db21tb24vRGlhbG9nQm94J1xuaW1wb3J0IE1vZGFsIGZyb20gJy4uL0NvbW1vbi9Nb2RhbCdcblxuZnVuY3Rpb24gU3VnZ2VzdFJlbW90ZVJlcG8gKHByb3BzKSB7XG4gIGNvbnN0IHsgb25EaXNtaXNzLCBtaXNzaW5nUGF0aCB9ID0gcHJvcHNcbiAgcmV0dXJuIChcbiAgICA8TW9kYWw+XG4gICAgICA8RGlhbG9nQm94IG9uRGlzbWlzcz17b25EaXNtaXNzfT5cbiAgICAgICAgPGgyPk1pc3Npbmcga2V5Ym9hcmQgZGVmaW5pdGlvbj88L2gyPlxuICAgICAgICA8cD5cbiAgICAgICAgICBIaSB0aGVyZSEgVGhlIHJlcG9zaXRvcnkgeW91J3JlIHRyeWluZyB0byBsb2FkIGZyb20gZG9lc24ndCBoYXZlIGFcbiAgICAgICAgICBkZWZpbmVkIDxjb2RlPnttaXNzaW5nUGF0aH08L2NvZGU+LiBSaWdodCBub3cgdGhpcyBhcHBsaWNhdGlvbiBpc1xuICAgICAgICAgIGV4cGVjdGluZyB0byBsb29rIGF0IHRoYXQgZGlyZWN0b3J5IHRvIGRpc2NvdmVyIGtleWJvYXJkIGRlZmluaXRpb25zXG4gICAgICAgICAgZm9yIGV4cGVyaW1lbnRhbCBmZWF0dXJlcyBsaWtlIGF1dG9tYXRpYyBsYXlvdXQgZ2VuZXJhdGlvbi5cbiAgICAgICAgPC9wPlxuICAgICAgICA8cD5cbiAgICAgICAgICBJcyBpdCBwb3NzaWJsZSB0aGF0IHRoZSBrZXlib2FyZCB5b3UncmUgdHJ5aW5nIHRvIGVkaXQgcmVsaWVzIG9uIGRhdGFcbiAgICAgICAgICBmcm9tIHRoZSBaTUsgb3Igb3RoZXIgcmVwb3NpdG9yaWVzPyBGZXRjaGluZyBmcm9tIG90aGVyIHJlcG9zaXRvcmllcyBpc1xuICAgICAgICAgIG5vdCBjdXJyZW50bHkgc3VwcG9ydGVkLlxuICAgICAgICA8L3A+XG4gICAgICAgIDxwPlxuICAgICAgICAgIEknbSBhIGh1bWJsZSBkZXZlbG9wZXIgYW5kIGhhdmUgb25seSB3b3JrZWQgd2l0aCBjb25maWd1cmF0aW9ucyBmb3IgbXlcbiAgICAgICAgICBvd24gaGFuZHdpcmVkIGJ1aWxkcywgc28gaWYgeW91IGZlZWwgeW91J3JlIHJlY2VpdmluZyB0aGlzIG1lc3NhZ2UgaW5cbiAgICAgICAgICBlcnJvciB0aGVuIHBsZWFzZSBjb25zaWRlciBvcGVuaW5nIGFuIGlzc3VlIG9uIHRoaXMgcHJvamVjdCdzIEdpdEh1YlxuICAgICAgICAgIHJlcG9zaXRvcnkgdG8gbGV0IG1lIGtub3cgd2hhdCBJIGNhbiBkbyBkaWZmZXJlbnRseS5cbiAgICAgICAgPC9wPlxuICAgICAgPC9EaWFsb2dCb3g+XG4gICAgPC9Nb2RhbD5cbiAgKVxufVxuXG5TdWdnZXN0UmVtb3RlUmVwby5wcm9wVHlwZXMgPSB7XG4gIG9uRGlzbWlzczogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgbWlzc2luZ1BhdGg6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZFxufVxuXG5leHBvcnQgZGVmYXVsdCBTdWdnZXN0UmVtb3RlUmVwb1xuIiwiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJ1xuXG5pbXBvcnQgTGluayBmcm9tICcuLi9Db21tb24vTGluaydcbmltcG9ydCBEaWFsb2dCb3ggZnJvbSAnLi4vQ29tbW9uL0RpYWxvZ0JveCdcbmltcG9ydCBNb2RhbCBmcm9tICcuLi9Db21tb24vTW9kYWwnXG5cbmZ1bmN0aW9uIFN1Z2dlc3RSZXBvU2VsZWN0aW9uICh7IGluc3RhbGxhdGlvbiB9KSB7XG4gIGNvbnN0IHVybCA9IGBodHRwczovL2dpdGh1Yi5jb20vc2V0dGluZ3MvaW5zdGFsbGF0aW9ucy8ke2luc3RhbGxhdGlvbi5pZH1gXG5cbiAgcmV0dXJuIChcbiAgICA8TW9kYWw+XG4gICAgICA8RGlhbG9nQm94IGRpc21pc3NUZXh0PXtudWxsfT5cbiAgICAgICAgPGgyPkFwcCBEaXNhYmxlZDwvaDI+XG4gICAgICAgIDxwPlxuICAgICAgICAgIEhlbGxvIHRoZXJlLCB5b3VyIGluc3RhbGxhdGlvbiBvZiB0aGUga2V5bWFwIGVkaXRvcidzIEdpdEh1YiBhcHAgaXNcbiAgICAgICAgICBjdXJyZW50bHkgZGlzYWJsZWQuIDxlbT5UaGlzIGlzIG5vdCBhIGJhbiE8L2VtPlxuICAgICAgICA8L3A+XG4gICAgICAgIDxwPlxuICAgICAgICAgIFdoZW4geW91IGluc3RhbGxlZCB0aGlzIGFwcCBmb3IgeW91ciBHaXRIdWIgYWNjb3VudCB5b3UgaW5zdGFsbGVkIGl0XG4gICAgICAgICAgZm9yIDxlbT5hbGw8L2VtPiBvZiB5b3VyIHJlcG9zaXRvcmllcywgYW5kIHdlIG5lZWQgdG8gZG8gYSBsaXR0bGVcbiAgICAgICAgICBjbGVhbnVwIGFzIHdlIHJvbGwgb3V0IHNvbWUgbmV3IGZlYXR1cmVzIGFzIGl0J3MgdmVyeSBsaWtlbHkgeW91IHdpbGxcbiAgICAgICAgICBoYXZlIG90aGVyIHJlcG9zaXRvcmllcyB1bnJlbGF0ZWQgdG8gWk1LIGtleWJvYXJkIGNvbmZpZ3VyYXRpb25zLlxuICAgICAgICA8L3A+XG4gICAgICAgIDxoMz5Ib3cgdG8gZml4IHRoaXM8L2gzPlxuICAgICAgICA8cD5cbiAgICAgICAgICBJZiB5b3UncmUgc3RpbGwgaW50ZXJlc3RlZCBpbiB1c2luZyB0aGUga2V5bWFwIGVkaXRvciAoYW5kIEknZCBsb3ZlXG4gICAgICAgICAgZm9yIHlvdSB0byBiZSBhYmxlIHRvKSBwbGVhc2UgZ28gdG8geW91ciA8TGluayBocmVmPXt1cmx9Pmluc3RhbGxhdGlvblxuICAgICAgICAgIHNldHRpbmdzPC9MaW5rPiBvbiBHaXRIdWIgYW5kIHNlbGVjdCBvbmx5IHRoZSByZXBvc2l0b3JpZXMgeW91IHdhbnQgdG9cbiAgICAgICAgICB1c2Ugd2l0aCB0aGlzIHRvb2wuIEFzIHNvb24gYXMgdGhhdCdzIGRvbmUgeW91J2xsIGJlIHNlbnQgYmFjayBoZXJlXG4gICAgICAgICAgYW5kIHJlYWR5IHRvIGdvLlxuICAgICAgICA8L3A+XG4gICAgICAgIDxwPlxuICAgICAgICAgIEFzIGFsd2F5cywgaWYgeW91J3JlIGxvb2tpbmcgZm9yIGNsYXJpZmljYXRpb24gb3IgZnVydGhlciBhc3Npc3RhbmNlXG4gICAgICAgICAgcGxlYXNlIHZpc2l0IG91ciBHaXRIdWIgcmVwbyBhbmQgb3BlbiBhbiBpc3N1ZSBvciBzdGFydCBhIGRpc2N1c3Npb24uXG4gICAgICAgIDwvcD5cbiAgICAgIDwvRGlhbG9nQm94PlxuICAgIDwvTW9kYWw+XG4gIClcbn1cblxuU3VnZ2VzdFJlcG9TZWxlY3Rpb24ucHJvcFR5cGVzID0ge1xuICBpbnN0YWxsYXRpb246IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgaWQ6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZFxuICB9KS5pc1JlcXVpcmVkXG59XG5cbmV4cG9ydCBkZWZhdWx0IFN1Z2dlc3RSZXBvU2VsZWN0aW9uXG4iLCJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnXG5cbmltcG9ydCBEaWFsb2dCb3ggZnJvbSAnLi4vQ29tbW9uL0RpYWxvZ0JveCdcbmltcG9ydCBNb2RhbCBmcm9tICcuLi9Db21tb24vTW9kYWwnXG5pbXBvcnQgeyBHZW5lcmFsSGVscE9mZmVyQ29weSB9IGZyb20gJy4vc3VwcG9ydCdcblxuZnVuY3Rpb24gU3VnZ2VzdFdyb25nUmVwbyAocHJvcHMpIHtcbiAgY29uc3QgeyBvbkRpc21pc3MgfSA9IHByb3BzXG5cbiAgcmV0dXJuIChcbiAgICA8TW9kYWw+XG4gICAgICA8RGlhbG9nQm94IG9uRGlzbWlzcz17b25EaXNtaXNzfT5cbiAgICAgICAgPGgyPklzIHRoaXMgYSB6bWstY29uZmlnIHJlcG8/PC9oMj5cbiAgICAgICAgPHA+XG4gICAgICAgICAgSGkgdGhlcmUhIFRoZSByZXBvc2l0b3J5IHlvdSdyZSB0cnlpbmcgdG8gbG9hZCBmcm9tIGRvZXNuJ3QgaGF2ZSBhXG4gICAgICAgICAgZGVmaW5lZCA8Y29kZT5jb25maWc8L2NvZGU+IGRpcmVjdG9yeS4gUmlnaHQgbm93IHRoaXMgYXBwbGljYXRpb24gaXNcbiAgICAgICAgICBleHBlY3RpbmcgdG8gbG9vayBhdCB0aGF0IGRpcmVjdG9yeSB0byBkaXNjb3ZlciBrZXltYXBzIGFuZCBvdGhlclxuICAgICAgICAgIG1ldGFkYXRhLlxuICAgICAgICA8L3A+XG4gICAgICAgIHtHZW5lcmFsSGVscE9mZmVyQ29weX1cbiAgICAgIDwvRGlhbG9nQm94PlxuICAgIDwvTW9kYWw+XG4gIClcbn1cblxuU3VnZ2VzdFdyb25nUmVwby5wcm9wVHlwZXMgPSB7XG4gIG9uRGlzbWlzczogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgb3RoZXJSZXBvT3JCcmFuY2hBdmFpbGFibGU6IFByb3BUeXBlcy5ib29sXG59XG5cbmV4cG9ydCBkZWZhdWx0IFN1Z2dlc3RXcm9uZ1JlcG9cbiIsImltcG9ydCBEaWFsb2dCb3ggZnJvbSAnLi4vQ29tbW9uL0RpYWxvZ0JveCdcbmltcG9ydCBNb2RhbCBmcm9tICcuLi9Db21tb24vTW9kYWwnXG5cbmZ1bmN0aW9uIEJsb2NrZWQgKCkge1xuICByZXR1cm4gKFxuICAgIDxNb2RhbD5cbiAgICAgIDxEaWFsb2dCb3ggZGlzbWlzc1RleHQ9e251bGx9PlxuICAgICAgICA8aDI+R2l0SHViIEFjY291bnQgQmxvY2tlZDwvaDI+XG4gICAgICAgIDxwPlxuICAgICAgICAgIEhpLCB5b3VyIGFjY2VzcyB0byB0aGlzIGFwcGxpY2F0aW9uIGhhcyBiZWVuIGRpc2FibGVkLlxuICAgICAgICA8L3A+XG4gICAgICAgIDxwPlxuICAgICAgICAgIFRoaXMgY291bGQgYmUgYW4gaW5ub2NlbnQgbWlzdGFrZS4gUG9zc2libHkgeW91J3ZlIG1pc3VuZGVyc3Rvb2QgdGhlXG4gICAgICAgICAgaW50ZW5kZWQgcHVycG9zZSBvZiB0aGlzIGFwcCwgcG9zc2libHkgSSBnb3QgY2FycmllZCBhd2F5IHdpdGggc29tZVxuICAgICAgICAgIGhvdXNla2VlcGluZy4gSWYgeW91IHdhbnQgbW9yZSBpbmZvcm1hdGlvbiBvciBmZWVsIHRoaXMgd2FzIGRvbmUgaW5cbiAgICAgICAgICBlcnJvciwgcGxlYXNlIHJlYWNoIG91dCB0byA8ZW0+bmlja2NvdXRzb3M8L2VtPiBvbiBHaXRIdWIgb3IgRGlzY29yZFxuICAgICAgICAgICh5b3UgY2FuIGZpbmQgbWUgb24gdGhlIFpNSyBzZXJ2ZXIpLlxuICAgICAgICA8L3A+XG4gICAgICA8L0RpYWxvZ0JveD5cbiAgICA8L01vZGFsPlxuICApXG59XG5cbmV4cG9ydCBkZWZhdWx0IEJsb2NrZWRcbiIsImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcydcblxuaW1wb3J0IERpYWxvZ0JveCBmcm9tICcuLi9Db21tb24vRGlhbG9nQm94J1xuaW1wb3J0IE1vZGFsIGZyb20gJy4uL0NvbW1vbi9Nb2RhbCdcbmltcG9ydCB7IEdlbmVyYWxIZWxwT2ZmZXJDb3B5LCBLZXltYXBMYXlvdXRSZXNvdXJjZXMgfSBmcm9tICcuL3N1cHBvcnQnXG5cbmZ1bmN0aW9uIE1pc3NpbmdMYXlvdXQgKHByb3BzKSB7XG4gIGNvbnN0IHsgb25EaXNtaXNzIH0gPSBwcm9wc1xuXG4gIHJldHVybiAoXG4gICAgPE1vZGFsPlxuICAgICAgPERpYWxvZ0JveCBvbkRpc21pc3M9e29uRGlzbWlzc30+XG4gICAgICAgIDxoMj5ObyBMYXlvdXQgQXZhaWxhYmxlPC9oMj5cbiAgICAgICAgPHA+XG4gICAgICAgICAgWW91ciBrZXltYXAgZG9lc24ndCBoYXZlIGFuIGFjY29tcGFueWluZyBsYXlvdXQgYW5kIHdlIGRvbid0IGtub3dcbiAgICAgICAgICBlbm91Z2ggYWJvdXQgeW91ciBrZXlib2FyZCB0byBnZW5lcmF0ZSBvbmUgZm9yIHlvdSBhdXRvbWF0aWNhbGx5LlxuICAgICAgICA8L3A+XG4gICAgICAgIDxwPlxuICAgICAgICAgIElmIHlvdSBtZWFudCB0byBpbmNsdWRlIGxheW91dCBkYXRhLCBwbGVhc2UgbWFrZSBzdXJlIHRoYXQgaXRzIGluIHRoZVxuICAgICAgICAgIHNhbWUgZGlyZWN0b3J5IGFzIHlvdXIga2V5bWFwLFxuICAgICAgICAgIGxpa2UgPGNvZGU+Y29uZmlnL2luZm8uanNvbjwvY29kZT4gb3IgPGNvZGU+Y29uZmlnLyZsdDtrZXlib2FyZCZndDsuanNvbjwvY29kZT4uXG4gICAgICAgIDwvcD5cbiAgICAgICAge0tleW1hcExheW91dFJlc291cmNlc31cbiAgICAgICAge0dlbmVyYWxIZWxwT2ZmZXJDb3B5fVxuICAgICAgPC9EaWFsb2dCb3g+XG4gICAgPC9Nb2RhbD5cbiAgKVxufVxuXG5NaXNzaW5nTGF5b3V0LnByb3BUeXBlcyA9IHtcbiAgb25EaXNtaXNzOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG59XG5cbmV4cG9ydCBkZWZhdWx0IE1pc3NpbmdMYXlvdXRcbiIsImltcG9ydCBEaWFsb2dCb3ggZnJvbSAnLi4vLi4vLi4vQ29tbW9uL0RpYWxvZ0JveCdcbmltcG9ydCBNb2RhbCBmcm9tICcuLi8uLi8uLi9Db21tb24vTW9kYWwnXG5pbXBvcnQgSWNvbkJ1dHRvbiBmcm9tICcuLi8uLi8uLi9Db21tb24vSWNvbkJ1dHRvbidcbmltcG9ydCBnaXRodWIgZnJvbSAnLi4vYXBpJ1xuXG5mdW5jdGlvbiBMb2dpbiAoKSB7XG4gIHJldHVybiAoXG4gICAgPE1vZGFsIGNlbnRlck9ubHk+XG4gICAgICA8RGlhbG9nQm94IGRpc21pc3NUZXh0PXtudWxsfSBzdHlsZT17eyB3aWR0aDogJzQwMHB4JyB9fT5cbiAgICAgICAgPGgyPkF1dGhlbnRpY2F0ZSB3aXRoIEdpdEh1YjwvaDI+XG4gICAgICAgIDxwPlxuICAgICAgICAgIFBsZWFzZSBsb2ctaW4gdG8gR2l0SHViIHRvIGNvbnRpbnVlLlxuICAgICAgICA8L3A+XG4gICAgICAgIDxJY29uQnV0dG9uXG4gICAgICAgICAgY29sbGVjdGlvbj1cImJyYW5kc1wiXG4gICAgICAgICAgaWNvbj1cImdpdGh1YlwiXG4gICAgICAgICAgdGV4dD1cIkxvZ2luIHdpdGggR2l0SHViXCJcbiAgICAgICAgICBzdHlsZT17eyBkaXNwbGF5OiAnYmxvY2snLCBtYXJnaW46ICcwIGF1dG8nIH19XG4gICAgICAgICAgb25DbGljaz17KCkgPT4gZ2l0aHViLmJlZ2luTG9naW5GbG93KCl9XG4gICAgICAgIC8+XG4gICAgICA8L0RpYWxvZ0JveD5cbiAgICA8L01vZGFsPlxuICApXG59XG5cbkxvZ2luLnByb3BUeXBlcyA9IHt9XG5cbmV4cG9ydCBkZWZhdWx0IExvZ2luXG4iLCJpbXBvcnQgRGlhbG9nQm94IGZyb20gJy4uLy4uLy4uL0NvbW1vbi9EaWFsb2dCb3gnXG5pbXBvcnQgTW9kYWwgZnJvbSAnLi4vLi4vLi4vQ29tbW9uL01vZGFsJ1xuaW1wb3J0IEljb25CdXR0b24gZnJvbSAnLi4vLi4vLi4vQ29tbW9uL0ljb25CdXR0b24nXG5pbXBvcnQgZ2l0aHViIGZyb20gJy4uL2FwaSdcblxuZnVuY3Rpb24gSW5zdGFsbCAoKSB7XG4gIGNvbnN0IGdyZWV0aW5nID0gZ2l0aHViLnVzZXJuYW1lXG4gICAgPyBgV2VsY29tZSwgJHtnaXRodWIudXNlcm5hbWV9IWBcbiAgICA6ICdXZWxjb21lISdcblxuICByZXR1cm4gKFxuICAgIDxNb2RhbCBjZW50ZXJPbmx5PlxuICAgICAgPERpYWxvZ0JveCBkaXNtaXNzVGV4dD17bnVsbH0+XG4gICAgICAgIDxoMj57Z3JlZXRpbmd9PC9oMj5cbiAgICAgICAgPHA+XG4gICAgICAgICAgVG8gYmVnaW4gaW1wb3J0IHlvdXIgb3duIGtleW1hcHMsIHlvdSdsbCBuZWVkIHRvIGdyYW50IHRoZSBLZXltYXBcbiAgICAgICAgICBFZGl0b3IgYXBwIGFjY2VzcyB0byB0aGUgcmVsZXZhbnQgR2l0SHViIHJlcG9zaXRvcmllcy4gUGxlYXNlIG1ha2VcbiAgICAgICAgICBzdXJlIHRvIG9ubHkgc2VsZWN0IHJlcG9zaXRvcmllcyB0aGF0IGFyZSBzZXQgdXAgZm9yIFpNSyBrZXlib2FyZFxuICAgICAgICAgIGNvbmZpZ3VyYXRpb25zLlxuICAgICAgICA8L3A+XG4gICAgICAgIDxwPlxuICAgICAgICAgIFRoaXMgYXBwIHJlcXVpcmVzIHJlYWQgYW5kIHdyaXRlIGFjY2VzcyB0byB0aGUgcmVwb3NpdG9yaWVzIHlvdSBzZWxlY3RcbiAgICAgICAgICBpbiBvcmRlciB0byB3cml0ZSB0byBhcmJpdHJhcnkgPGNvZGU+LmtleW1hcDwvY29kZT4gZmlsZXMuIEl0IGFsc29cbiAgICAgICAgICByZWNlaXZlcyBhbGwgYnVpbGQgYWN0aW9uIGV2ZW50cyBmb3IgdGhlIHJlcG9zaXRvcnksIHdoaWNoIGdlbmVyYXRlc1xuICAgICAgICAgIHF1aXRlIGEgYml0IG9mIHRyYWZmaWMuIFNlbGVjdGluZyA8Y29kZT5BbGwgcmVwb3NpdG9yaWVzPC9jb2RlPiBmb3JcbiAgICAgICAgICB0aGUgYXBwIGluc3RhbGxhdGlvbiB3aWxsIGxlYWQgdG8gYSBzdXNwZW5zaW9uLlxuICAgICAgICA8L3A+XG4gICAgICAgIDxJY29uQnV0dG9uXG4gICAgICAgICAgY29sbGVjdGlvbj1cImJyYW5kc1wiXG4gICAgICAgICAgaWNvbj1cImdpdGh1YlwiXG4gICAgICAgICAgdGV4dD1cIkFkZCBSZXBvc2l0b3J5XCJcbiAgICAgICAgICBzdHlsZT17eyBkaXNwbGF5OiAnYmxvY2snLCBtYXJnaW46ICcwIGF1dG8nIH19XG4gICAgICAgICAgb25DbGljaz17KCkgPT4gZ2l0aHViLmJlZ2luSW5zdGFsbEFwcEZsb3coKX1cbiAgICAgICAgLz5cbiAgICAgIDwvRGlhbG9nQm94PlxuICAgIDwvTW9kYWw+XG4gIClcbn1cblxuSW5zdGFsbC5wcm9wVHlwZXMgPSB7fVxuXG5leHBvcnQgZGVmYXVsdCBJbnN0YWxsXG4iLCJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnXG5cbmltcG9ydCBEaWFsb2dCb3ggZnJvbSAnLi4vQ29tbW9uL0RpYWxvZ0JveCdcbmltcG9ydCBNb2RhbCBmcm9tICcuLi9Db21tb24vTW9kYWwnXG5pbXBvcnQgeyBHaXRIdWJJc3N1ZXNMaW5rIH0gZnJvbSAnLi9zdXBwb3J0J1xuXG5mdW5jdGlvbiBNaXNzaW5nS2V5bWFwcyAocHJvcHMpIHtcbiAgY29uc3QgeyBvbkRpc21pc3MgfSA9IHByb3BzXG5cbiAgcmV0dXJuIChcbiAgICA8TW9kYWw+XG4gICAgICA8RGlhbG9nQm94IG9uRGlzbWlzcz17b25EaXNtaXNzfT5cbiAgICAgICAgPGgyPk5vIEtleW1hcCBBdmFpbGFibGU8L2gyPlxuICAgICAgICA8cD5cbiAgICAgICAgICBXZSBjb3VsZG4ndCBmaW5kIGEgPGNvZGU+LmtleW1hcDwvY29kZT4gZmlsZSBpbiB5b3VyIDxjb2RlPmNvbmZpZy88L2NvZGU+IGZvbGRlci5cbiAgICAgICAgPC9wPlxuICAgICAgICA8cD5cbiAgICAgICAgICBQbGVhc2UgZW5zdXJlIHRoYXQgYW55IGtleW1hcChzKSB5b3Ugd2lzaCB0byBlZGl0IGFyZSBwbGFjZWQgaW4gdGhhdFxuICAgICAgICAgIGRpcmVjdG9yeSBldmVuIGlmIGFuIGFjY29tcGFueWluZyBrZXlib2FyZCBkZWZpbml0aW9uIGV4aXN0cyBpbiB5b3VyXG4gICAgICAgICAgdW5kZXIgdGhlIDxjb2RlPmNvbmZpZy9ib2FyZHMvLi4uPC9jb2RlPiBkaXJlY3RvcnkuXG4gICAgICAgIDwvcD5cbiAgICAgICAgPHA+XG4gICAgICAgICAgSWYgeW91IGhhdmUgYW55IHF1ZXN0aW9ucyBwbGVhc2UgZmVlbCBmcmVlIHRvIHJlYWNoIG91dCBieSBjcmVhdGluZyBhblxuICAgICAgICAgIGlzc3VlIGF0IHtHaXRIdWJJc3N1ZXNMaW5rfS5cbiAgICAgICAgPC9wPlxuICAgICAgPC9EaWFsb2dCb3g+XG4gICAgPC9Nb2RhbD5cbiAgKVxufVxuXG5NaXNzaW5nS2V5bWFwcy5wcm9wVHlwZXMgPSB7XG4gIG9uRGlzbWlzczogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxufVxuXG5leHBvcnQgZGVmYXVsdCBNaXNzaW5nS2V5bWFwc1xuIiwiaW1wb3J0IGZpbmQgZnJvbSAnbG9kYXNoL2ZpbmQnXG5cbmltcG9ydCB7IENvbnRyb2wsIFNlbGVjdCB9IGZyb20gJy4uL0NvbnRyb2xzJ1xuaW1wb3J0IFNwaW5uZXIgZnJvbSAnLi4vLi4vQ29tbW9uL1NwaW5uZXInXG5cbmltcG9ydCBnaXRodWIgZnJvbSAnLi9hcGknXG5cbmV4cG9ydCBmdW5jdGlvbiBHaXRoSHViRXhwYW5kZWRQaWNrZXIgKHsgc3RhdGUsIGFjdGlvbnMsIGNob2ljZXMsIHNlbGVjdGlvbnMgfSkge1xuICBjb25zdCB7IHJlcG9zaXRvcmllcywgcmVwb3NpdG9yeUNob2ljZXMsIGJyYW5jaENob2ljZXMsIGtleWJvYXJkQ2hvaWNlcyB9ID0gY2hvaWNlc1xuICBjb25zdCB7IHNlbGVjdGVkUmVwb0Nob2ljZSwgc2VsZWN0ZWRCcmFuY2hDaG9pY2UsIHNlbGVjdGVkS2V5Ym9hcmRDaG9pY2UgfSA9IHNlbGVjdGlvbnNcbiAgY29uc3QgeyBicmFuY2hlcywga2V5Ym9hcmRzLCBsb2FkaW5nIH0gPSBzdGF0ZVxuXG4gIGZ1bmN0aW9uIGhhbmRsZVNlbGVjdFJlcG8gKHsgaWQsIHR5cGUgfSkge1xuICAgIGlmICh0eXBlID09PSAnaW5zdGFsbGF0aW9uJykge1xuICAgICAgZ2l0aHViLm1hbmFnZUluc3RhbGxhdGlvblJlcG9zKGlkKVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29uc3QgcmVwb3NpdG9yeSA9IGZpbmQocmVwb3NpdG9yaWVzLCB7IGlkIH0pXG4gICAgYWN0aW9ucy5zZWxlY3RlZFJlcG9zaXRvcnkoeyByZXBvc2l0b3J5IH0pXG4gIH1cblxuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8U2VsZWN0XG4gICAgICAgIGxhYmVsPVwiUmVwb3NpdG9yeVwiXG4gICAgICAgIHZhbHVlPXtzZWxlY3RlZFJlcG9DaG9pY2V9XG4gICAgICAgIG9wdGlvbnM9e3JlcG9zaXRvcnlDaG9pY2VzfVxuICAgICAgICBvbkNoYW5nZT17aGFuZGxlU2VsZWN0UmVwb31cbiAgICAgICAgZ2V0VmFsdWU9e29wdGlvbiA9PiBvcHRpb24uaWR9XG4gICAgICAgIGdldE9wdGlvblZhbHVlPXtvcHRpb24gPT4gb3B0aW9uLmlkfVxuICAgICAgICBnZXRPcHRpb25MYWJlbD17b3B0aW9uID0+IG9wdGlvbi5mdWxsIHx8IG9wdGlvbi5uYW1lfVxuICAgICAgICBmb3JtYXRPcHRpb25MYWJlbD17KG9wdGlvbiwgeyBjb250ZXh0IH0pID0+IChcbiAgICAgICAgICA8Pntjb250ZXh0ID09PSAndmFsdWUnID8gb3B0aW9uLm5hbWUgOiBvcHRpb24uZnVsbCB8fCBvcHRpb24ubmFtZX08Lz5cbiAgICAgICAgKX1cbiAgICAgIC8+XG5cbiAgICAgIHticmFuY2hlcy5sZW5ndGggPiAxICYmIChcbiAgICAgICAgPFNlbGVjdFxuICAgICAgICAgIGxhYmVsPVwiQnJhbmNoXCJcbiAgICAgICAgICB2YWx1ZT17c2VsZWN0ZWRCcmFuY2hDaG9pY2V9XG4gICAgICAgICAgb3B0aW9ucz17YnJhbmNoQ2hvaWNlc31cbiAgICAgICAgICBvbkNoYW5nZT17KHsgaWQgfSkgPT4gYWN0aW9ucy5zZWxlY3RlZEJyYW5jaCh7IG5hbWU6IGlkIH0pfVxuICAgICAgICAgIGdldE9wdGlvblZhbHVlPXtvcHRpb24gPT4gb3B0aW9uLmlkfVxuICAgICAgICAgIGdldE9wdGlvbkxhYmVsPXtvcHRpb24gPT4gb3B0aW9uLm5hbWV9XG4gICAgICAgIC8+XG4gICAgICApfVxuXG4gICAgICB7a2V5Ym9hcmRzLmxlbmd0aCA+IDEgJiYgKFxuICAgICAgICA8U2VsZWN0XG4gICAgICAgICAgbGFiZWw9XCJLZXlib2FyZFwiXG4gICAgICAgICAgdmFsdWU9e3NlbGVjdGVkS2V5Ym9hcmRDaG9pY2V9XG4gICAgICAgICAgb3B0aW9ucz17a2V5Ym9hcmRDaG9pY2VzfVxuICAgICAgICAgIGdldE9wdGlvblZhbHVlPXtvcHRpb24gPT4gb3B0aW9uLmlkfVxuICAgICAgICAgIGdldE9wdGlvbkxhYmVsPXtvcHRpb24gPT4gb3B0aW9uLm5hbWV9XG4gICAgICAgICAgb25DaGFuZ2U9eyh7IGlkIH0pID0+IGFjdGlvbnMuc2VsZWN0ZWRLZXlib2FyZCh7IG5hbWU6IGlkIH0pfVxuICAgICAgICAvPlxuICAgICAgKX1cblxuICAgICAge2xvYWRpbmcgJiYgKFxuICAgICAgICA8Q29udHJvbD5cbiAgICAgICAgICA8U3Bpbm5lciAvPlxuICAgICAgICA8L0NvbnRyb2w+XG4gICAgICApfVxuICAgIDwvPlxuICApXG59XG4iLCJpbXBvcnQgZmluZCBmcm9tICdsb2Rhc2gvZmluZCdcbmltcG9ydCB7IHVzZUVmZmVjdCwgdXNlTWVtbyB9IGZyb20gJ3JlYWN0J1xuXG5pbXBvcnQgZ2l0aHViIGZyb20gJy4vYXBpJ1xuXG4vLyBUT0RPOiBtb3N0IG9mIHRoaXMgc2hvdWxkIHByb2JhYmx5IGp1c3QgYmUgdHVybmVkIGludG8gdGh1bmtzIGluIHRoZSByZWR1Y2VyXG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VSZXBvc2l0b3J5T3B0aW9ucyAoc3RhdGUsIGFjdGlvbnMpIHtcbiAgY29uc3Qge1xuICAgIGJyYW5jaGVzLFxuICAgIGtleWJvYXJkcyxcbiAgICBzZWxlY3RlZFJlcG9JZCxcbiAgICBzZWxlY3RlZEJyYW5jaE5hbWUsXG4gICAgc2VsZWN0ZWRLZXlib2FyZFxuICB9ID0gc3RhdGVcblxuICBjb25zdCByZXBvc2l0b3JpZXMgPSAoZ2l0aHViLnJlcG9zaXRvcmllcyB8fCBbXSkubWFwKHJlcG8gPT4gKHtcbiAgICBpZDogcmVwby5pZCxcbiAgICBuYW1lOiByZXBvLm5hbWUsXG4gICAgZnVsbDogcmVwby5mdWxsX25hbWVcbiAgfSkpXG5cbiAgY29uc3QgZXh0cmFzID0gKGdpdGh1Yi5pbnN0YWxsYXRpb25zIHx8IFtdKS5tYXAoaW5zdGFsbGF0aW9uID0+ICh7XG4gICAgaWQ6IGluc3RhbGxhdGlvbi5pZCxcbiAgICB0eXBlOiAnaW5zdGFsbGF0aW9uJyxcbiAgICBuYW1lOiBgW01hbmFnZSBhdmFpbGFibGUgcmVwb3MgZm9yICR7aW5zdGFsbGF0aW9uLmFjY291bnQubG9naW59Li4uXWBcbiAgfSkpXG5cbiAgY29uc3QgcmVwb3NpdG9yeUNob2ljZXMgPSB1c2VNZW1vKCgpID0+IFsuLi5yZXBvc2l0b3JpZXMsIC4uLmV4dHJhc10sIFtyZXBvc2l0b3JpZXMsIGV4dHJhc10pXG4gIGNvbnN0IGJyYW5jaENob2ljZXMgPSB1c2VNZW1vKCgpID0+IGJyYW5jaGVzLm1hcChicmFuY2ggPT4gKHsgaWQ6IGJyYW5jaC5uYW1lLCBuYW1lOiBicmFuY2gubmFtZSB9KSksIFticmFuY2hlc10pXG4gIGNvbnN0IGtleWJvYXJkQ2hvaWNlcyA9IHVzZU1lbW8oKCkgPT4ga2V5Ym9hcmRzLm1hcChrZXlib2FyZCA9PiAoeyBpZDoga2V5Ym9hcmQsIG5hbWU6IGtleWJvYXJkIH0pKSwgW2tleWJvYXJkc10pXG5cbiAgY29uc3Qgc2VsZWN0ZWRSZXBvQ2hvaWNlID0gdXNlTWVtbygoKSA9PiBmaW5kKHJlcG9zaXRvcmllcywgeyBpZDogc2VsZWN0ZWRSZXBvSWQgfSksIFtyZXBvc2l0b3JpZXMsIHNlbGVjdGVkUmVwb0lkXSlcbiAgY29uc3Qgc2VsZWN0ZWRCcmFuY2hDaG9pY2UgPSB1c2VNZW1vKCgpID0+IGZpbmQoYnJhbmNoQ2hvaWNlcywgeyBpZDogc2VsZWN0ZWRCcmFuY2hOYW1lIH0pLCBbYnJhbmNoQ2hvaWNlcywgc2VsZWN0ZWRCcmFuY2hOYW1lXSlcbiAgY29uc3Qgc2VsZWN0ZWRLZXlib2FyZENob2ljZSA9IHVzZU1lbW8oKCkgPT4gZmluZChrZXlib2FyZENob2ljZXMsIHsgaWQ6IHNlbGVjdGVkS2V5Ym9hcmQgfSksIFtrZXlib2FyZENob2ljZXMsIHNlbGVjdGVkS2V5Ym9hcmRdKVxuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKCFzZWxlY3RlZFJlcG9JZCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgKGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGFjdGlvbnMubG9hZGluZ0JyYW5jaGVzTGlzdCgpXG5cbiAgICAgIGNvbnN0IHJlcG9zaXRvcnkgPSBmaW5kKGdpdGh1Yi5yZXBvc2l0b3JpZXMsIHsgaWQ6IHNlbGVjdGVkUmVwb0lkIH0pXG4gICAgICBjb25zdCBicmFuY2hlcyA9IGF3YWl0IGdpdGh1Yi5mZXRjaFJlcG9CcmFuY2hlcyhyZXBvc2l0b3J5KVxuXG4gICAgICBhY3Rpb25zLmxvYWRlZEJyYW5jaGVzTGlzdCh7IGJyYW5jaGVzIH0pXG4gICAgfSkoKVxuICB9LCBbc2VsZWN0ZWRSZXBvSWQsIGFjdGlvbnNdKVxuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKCFzZWxlY3RlZFJlcG9JZCB8fCAhc2VsZWN0ZWRCcmFuY2hOYW1lKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAoYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgYWN0aW9ucy5sb2FkaW5nS2V5Ym9hcmRzTGlzdCgpXG5cbiAgICAgIGNvbnN0IHJlcG9zaXRvcnkgPSBmaW5kKGdpdGh1Yi5yZXBvc2l0b3JpZXMsIHsgaWQ6IHNlbGVjdGVkUmVwb0lkIH0pXG4gICAgICBjb25zdCBrZXlib2FyZHNMaXN0ID0gYXdhaXQgZ2l0aHViLmZldGNoQnJhbmNoS2V5Ym9hcmRzKHJlcG9zaXRvcnksIHNlbGVjdGVkQnJhbmNoTmFtZSlcblxuICAgICAgYWN0aW9ucy5sb2FkZWRLZXlib2FyZHNMaXN0KGtleWJvYXJkc0xpc3QpXG4gICAgfSkoKVxuICB9LCBbc2VsZWN0ZWRSZXBvSWQsIHNlbGVjdGVkQnJhbmNoTmFtZSwgYWN0aW9uc10pXG5cbiAgcmV0dXJuIFtcbiAgICB7IHJlcG9zaXRvcmllcywgcmVwb3NpdG9yeUNob2ljZXMsIGJyYW5jaENob2ljZXMsIGtleWJvYXJkQ2hvaWNlcyB9LFxuICAgIHsgc2VsZWN0ZWRSZXBvQ2hvaWNlLCBzZWxlY3RlZEJyYW5jaENob2ljZSwgc2VsZWN0ZWRLZXlib2FyZENob2ljZSB9XG4gIF1cbn1cbiIsImltcG9ydCBmaW5kIGZyb20gJ2xvZGFzaC9maW5kJ1xuaW1wb3J0IGlzTWF0Y2ggZnJvbSAnbG9kYXNoL2lzTWF0Y2gnXG5pbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnXG5cbmltcG9ydCBnaXRodWIgZnJvbSAnLi9hcGknXG5pbXBvcnQgVmFsaWRhdGlvbkVycm9ycyBmcm9tICcuL1ZhbGlkYXRpb25FcnJvcnMnXG5pbXBvcnQgeyB1c2VQaWNrZXJTdG9yZSB9IGZyb20gJy4vc3RvcmUnXG5cbmltcG9ydCB7IEJ1dHRvbiB9IGZyb20gJy4uL0NvbnRyb2xzJ1xuaW1wb3J0IFN1Z2dlc3RSZW1vdGVSZXBvIGZyb20gJy4uLy4uL0RpYWxvZ3MvU3VnZ2VzdFJlbW90ZVJlcG8nXG5pbXBvcnQgU3VnZ2VzdFJlcG9TZWxlY3Rpb24gZnJvbSAnLi4vLi4vRGlhbG9ncy9TdWdnZXN0UmVwb1NlbGVjdGlvbidcbmltcG9ydCBTdWdnZXN0V3JvbmdSZXBvIGZyb20gJy4uLy4uL0RpYWxvZ3MvU3VnZ2VzdFdyb25nUmVwbydcbmltcG9ydCBMYXlvdXRHZW5lcmF0aW9uRXJyb3IgZnJvbSAnLi4vLi4vRGlhbG9ncy9MYXlvdXRHZW5lcmF0aW9uRXJyb3InXG5pbXBvcnQgQmxvY2tlZCBmcm9tICcuLi8uLi9EaWFsb2dzL0Jsb2NrZWQnXG5pbXBvcnQgTWlzc2luZ0xheW91dCBmcm9tICcuLi8uLi9EaWFsb2dzL01pc3NpbmdMYXlvdXQnXG5cbmltcG9ydCBMb2dpbiBmcm9tICcuL0RpYWxvZ3MvTG9naW4nXG5pbXBvcnQgSW5zdGFsbCBmcm9tICcuL0RpYWxvZ3MvSW5zdGFsbCdcbmltcG9ydCBJY29uIGZyb20gJy4uLy4uL0NvbW1vbi9JY29uJ1xuaW1wb3J0IE1pc3NpbmdLZXltYXBzIGZyb20gJy4uLy4uL0RpYWxvZ3MvTWlzc2luZ0tleW1hcHMnXG5pbXBvcnQgeyBHaXRoSHViRXhwYW5kZWRQaWNrZXIgfSBmcm9tICcuL0dpdEh1YkV4cGFuZGVkUGlja2VyJ1xuLy8gaW1wb3J0IHsgR2l0SHV0Q29tcGFjdFBpY2tlciB9IGZyb20gJy4vQ29tcGFjdCdcblxuaW1wb3J0IHsgdXNlUmVwb3NpdG9yeU9wdGlvbnMgfSBmcm9tICcuL3JlcG9zaXRvcnktb3B0aW9ucydcblxuY29uc3QgaXNNaXNzaW5nQ29uZmlnID0gZXJyID0+IGlzTWF0Y2goZXJyLCB7IG5hbWU6ICdNaXNzaW5nUmVwb0ZpbGUnLCBwYXRoOiAnY29uZmlnJyB9KVxuY29uc3QgaXNNaXNzaW5nS2V5bWFwcyA9IGVyciA9PiBpc01hdGNoKGVyciwgeyBuYW1lOiAnTWlzc2luZ1JlcG9GaWxlJywgaW50ZW50OiAnZGlyZWN0b3J5LXN0cnVjdHVyZScgfSlcbmNvbnN0IGlzTWlzc2luZ0xheW91dCA9IGVyciA9PiAoXG4gIGlzTWF0Y2goZXJyLCB7IG5hbWU6ICdNaXNzaW5nUmVwb0ZpbGUnLCBwYXRoOiAnY29uZmlnL2luZm8uanNvbicgfSkgfHxcbiAgaXNNYXRjaChlcnIsIHsgbmFtZTogJ01pc3NpbmdSZXBvRmlsZScsIGludGVudDogJ21ldGFkYXRhJyB9KVxuKVxuY29uc3QgaXNNaXNzaW5nQm9hcmQgPSBlcnIgPT4gKFxuICBlcnI/Lm5hbWUgPT09ICdNaXNzaW5nUmVwb0ZpbGUnICYmXG4gIGVycj8ucGF0aC5tYXRjaCgvY29uZmlnXFwvYm9hcmRzXFwvW14vXStcXC9bXi9dK1xcL1teL10rP1xcLi4qJC8pXG4pXG5cbmZ1bmN0aW9uIEdpdGh1YlBpY2tlciAocHJvcHMpIHtcbiAgY29uc3QgW3N0YXRlLCBhY3Rpb25zXSA9IHVzZVBpY2tlclN0b3JlKClcbiAgY29uc3QgW2Nob2ljZXMsIHNlbGVjdGlvbnNdID0gdXNlUmVwb3NpdG9yeU9wdGlvbnMoc3RhdGUsIGFjdGlvbnMpXG5cbiAgY29uc3QgeyBpbml0aWFsaXplZCwgc2VsZWN0ZWRSZXBvSWQsIHNlbGVjdGVkQnJhbmNoTmFtZSB9ID0gc3RhdGVcbiAgY29uc3QgeyBzZWxlY3RlZEtleWJvYXJkIH0gPSBzdGF0ZVxuICBjb25zdCB7IGxvYWRpbmcgfSA9IHN0YXRlXG5cbiAgY29uc3QgeyBvblNlbGVjdCwgb25FcnJvciB9ID0gcHJvcHNcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IGxvZ2luID0gKCkgPT4gZ2l0aHViLmJlZ2luTG9naW5GbG93KClcbiAgICBjb25zdCBibG9ja2VkID0gKCkgPT4geyBhY3Rpb25zLmNsZWFyU2VsZWN0aW9uKCk7IG9uRXJyb3IoeyBkaWFsb2c6IEJsb2NrZWQgfSkgfVxuICAgIGNvbnN0IGxheW91dEdlbmVyYXRpb25FcnJvciA9ICgpID0+IHsgYWN0aW9ucy5jbGVhclNlbGVjdGlvbigpOyBvbkVycm9yKHsgZGlhbG9nOiBMYXlvdXRHZW5lcmF0aW9uRXJyb3IgfSkgfVxuICAgIGNvbnN0IHJlcG9WYWxpZGF0aW9uID0gZXJyb3IgPT4ge1xuICAgICAgbGV0IGRpYWxvZyA9IFZhbGlkYXRpb25FcnJvcnNcbiAgICAgIGlmIChpc01pc3NpbmdDb25maWcoZXJyb3IpKSBkaWFsb2cgPSBTdWdnZXN0V3JvbmdSZXBvXG4gICAgICBpZiAoaXNNaXNzaW5nQm9hcmQoZXJyb3IpKSBkaWFsb2cgPSBTdWdnZXN0UmVtb3RlUmVwb1xuICAgICAgaWYgKGlzTWlzc2luZ0xheW91dChlcnJvcikpIGRpYWxvZyA9IE1pc3NpbmdMYXlvdXRcbiAgICAgIGlmIChpc01pc3NpbmdLZXltYXBzKGVycm9yKSkgZGlhbG9nID0gTWlzc2luZ0tleW1hcHNcblxuICAgICAgYWN0aW9ucy5jbGVhclNlbGVjdGlvbigpXG4gICAgICBvbkVycm9yKHtcbiAgICAgICAgZGlhbG9nLFxuICAgICAgICBkaWFsb2dQcm9wczoge1xuICAgICAgICAgIHRpdGxlOiBlcnJvci5uYW1lLFxuICAgICAgICAgIGVycm9yczogZXJyb3IuZXJyb3JzXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfVxuXG4gICAgZ2l0aHViLmluaXQoKS50aGVuKGFjdGlvbnMuaW50ZWdyYXRpb25Jbml0aWFsaXplZClcbiAgICBnaXRodWIub24oJ2F1dGhlbnRpY2F0aW9uLWZhaWxlZCcsIGxvZ2luKVxuICAgIGdpdGh1Yi5vbignYmxvY2tlZCcsIGJsb2NrZWQpXG4gICAgZ2l0aHViLm9uKCdyZXBvLXZhbGlkYXRpb24tZXJyb3InLCByZXBvVmFsaWRhdGlvbilcbiAgICBnaXRodWIub24oJ2xheW91dC1nZW5lcmF0aW9uLWZhaWxlZCcsIGxheW91dEdlbmVyYXRpb25FcnJvcilcblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBnaXRodWIub2ZmKCdhdXRoZW50aWNhdGlvbi1mYWlsZWQnLCBsb2dpbilcbiAgICAgIGdpdGh1Yi5vZmYoJ2Jsb2NrZWQnLCBibG9ja2VkKVxuICAgICAgZ2l0aHViLm9mZigncmVwby12YWxpZGF0aW9uLWVycm9yJywgcmVwb1ZhbGlkYXRpb24pXG4gICAgICBnaXRodWIub2ZmKCdsYXlvdXQtZ2VuZXJhdGlvbi1mYWlsZWQnLCBsYXlvdXRHZW5lcmF0aW9uRXJyb3IpXG4gICAgfVxuICB9LCBbYWN0aW9ucywgb25FcnJvcl0pXG5cbiAgY29uc3QgbG9hZEtleWJvYXJkID0gdXNlQ2FsbGJhY2soYXN5bmMgZnVuY3Rpb24gKHJlcG9JZCwgYnJhbmNoLCBrZXlib2FyZCkge1xuICAgIGNvbnN0IGF2YWlsYWJsZSA9IGdpdGh1Yi5yZXBvc2l0b3JpZXNcbiAgICBjb25zdCByZXBvc2l0b3J5ID0gZmluZChhdmFpbGFibGUsIHsgaWQ6IHJlcG9JZCB9KT8uZnVsbF9uYW1lXG5cbiAgICBhY3Rpb25zLmtleWJvYXJkTG9hZGluZygpXG5cbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGdpdGh1Yi5mZXRjaExheW91dEFuZEtleW1hcChyZXBvc2l0b3J5LCBicmFuY2gsIHtcbiAgICAgIGtleWJvYXJkXG4gICAgfSlcblxuICAgIGFjdGlvbnMua2V5Ym9hcmRMb2FkZWRTdWNjZXNzKHsgcmVzcG9uc2UgfSlcblxuICAgIG9uU2VsZWN0KHsgZ2l0aHViOiB7IHJlcG9zaXRvcnksIGJyYW5jaCwga2V5Ym9hcmQgfSwgLi4ucmVzcG9uc2UgfSlcbiAgfSwgW2FjdGlvbnMsIG9uU2VsZWN0XSlcblxuICBjb25zdCByZWxvYWRLZXlib2FyZCA9IHVzZUNhbGxiYWNrKCgpID0+IChcbiAgICBsb2FkS2V5Ym9hcmQoc2VsZWN0ZWRSZXBvSWQsIHNlbGVjdGVkQnJhbmNoTmFtZSwgc2VsZWN0ZWRLZXlib2FyZClcbiAgKSwgW2xvYWRLZXlib2FyZCwgc2VsZWN0ZWRSZXBvSWQsIHNlbGVjdGVkQnJhbmNoTmFtZSwgc2VsZWN0ZWRLZXlib2FyZF0pXG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoIXNlbGVjdGVkUmVwb0lkIHx8ICFzZWxlY3RlZEJyYW5jaE5hbWUpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGxvYWRLZXlib2FyZChzZWxlY3RlZFJlcG9JZCwgc2VsZWN0ZWRCcmFuY2hOYW1lLCBzZWxlY3RlZEtleWJvYXJkKVxuICB9LCBbc2VsZWN0ZWRSZXBvSWQsIHNlbGVjdGVkQnJhbmNoTmFtZSwgc2VsZWN0ZWRLZXlib2FyZCwgbG9hZEtleWJvYXJkXSlcblxuICBpZiAoIWluaXRpYWxpemVkKSByZXR1cm4gbnVsbFxuICBpZiAoc3RhdGUuYmxvY2tlZCkgcmV0dXJuIDxCbG9ja2VkIC8+XG4gIGlmICghZ2l0aHViLmlzR2l0SHViQXV0aG9yaXplZCgpKSByZXR1cm4gPExvZ2luIC8+XG4gIGlmICghZ2l0aHViLmlzQXBwSW5zdGFsbGVkKCkpIHJldHVybiA8SW5zdGFsbCAvPlxuICBpZiAoZ2l0aHViLmlzQXBwU3VzcGVuZGVkRm9yUmVwb1NlbGVjdGlvbigpKSB7XG4gICAgcmV0dXJuIDxTdWdnZXN0UmVwb1NlbGVjdGlvbiBpbnN0YWxsYXRpb249e2dpdGh1Yi5pbnN0YWxsYXRpb25zWzBdfSAvPlxuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPEdpdGhIdWJFeHBhbmRlZFBpY2tlciBzdGF0ZT17c3RhdGV9IGFjdGlvbnM9e2FjdGlvbnN9IGNob2ljZXM9e2Nob2ljZXN9IHNlbGVjdGlvbnM9e3NlbGVjdGlvbnN9IC8+XG4gICAgICB7c2VsZWN0ZWRCcmFuY2hOYW1lICYmICFsb2FkaW5nICYmIChcbiAgICAgICAgPEJ1dHRvbiBvbkNsaWNrPXtyZWxvYWRLZXlib2FyZH0+XG4gICAgICAgICAgPEljb24gbmFtZT1cInN5bmNcIiAvPlxuICAgICAgICA8L0J1dHRvbj5cbiAgICAgICl9XG4gICAgPC8+XG4gIClcbn1cblxuR2l0aHViUGlja2VyLnByb3BUeXBlcyA9IHtcbiAgZXhwYW5kZWQ6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG4gIG9uRXhwYW5kOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBvbkVycm9yOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBvblNlbGVjdDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxufVxuXG5leHBvcnQgZGVmYXVsdCBHaXRodWJQaWNrZXJcbiIsImltcG9ydCBjb21wYWN0IGZyb20gJ2xvZGFzaC9jb21wYWN0J1xuaW1wb3J0ICogYXMgY29uZmlnIGZyb20gJy4uL2NvbmZpZydcblxuZXhwb3J0IGNvbnN0IHNvdXJjZUNob2ljZXMgPSBjb21wYWN0KFtcbiAgY29uZmlnLmVuYWJsZURlbW8gJiYge1xuICAgIGlkOiAnZGVtbycsXG4gICAgbmFtZTogJ0RlbW8gS2V5Ym9hcmQnXG4gIH0sXG4gIGNvbmZpZy5lbmFibGVMb2NhbCAmJiB7XG4gICAgaWQ6ICdsb2NhbCcsXG4gICAgbmFtZTogJ0xvY2FsJ1xuICB9LFxuICBjb25maWcuZW5hYmxlR2l0SHViICYmIHtcbiAgICBpZDogJ2dpdGh1YicsXG4gICAgbmFtZTogJ0dpdEh1YidcbiAgfVxuXSlcblxuY29uc3Qgc2VsZWN0ZWRTb3VyY2UgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnc2VsZWN0ZWRTb3VyY2UnKVxuY29uc3Qgb25seVNvdXJjZSA9IHNvdXJjZUNob2ljZXMubGVuZ3RoID09PSAxID8gc291cmNlQ2hvaWNlc1swXS5pZCA6IG51bGxcblxuZXhwb3J0IGNvbnN0IGRlZmF1bHRTb3VyY2UgPSBvbmx5U291cmNlIHx8IChcbiAgc291cmNlQ2hvaWNlcy5maW5kKHNvdXJjZSA9PiBzb3VyY2UuaWQgPT09IHNlbGVjdGVkU291cmNlKVxuICAgID8gc2VsZWN0ZWRTb3VyY2VcbiAgICA6IHNvdXJjZUNob2ljZXNbMF0uaWRcbilcbiIsImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcydcblxuaW1wb3J0IERpYWxvZ0JveCBmcm9tICcuLi9Db21tb24vRGlhbG9nQm94J1xuaW1wb3J0IE1vZGFsIGZyb20gJy4uL0NvbW1vbi9Nb2RhbCdcbmltcG9ydCB7IEdlbmVyYWxIZWxwT2ZmZXJDb3B5IH0gZnJvbSAnLi9zdXBwb3J0J1xuXG5mdW5jdGlvbiBLZXltYXBCaW5kaW5nc1VzZVByZXByb2Nlc3Nvck1hY3JvcyAocHJvcHMpIHtcbiAgY29uc3QgeyBvbkRpc21pc3MgfSA9IHByb3BzXG5cbiAgcmV0dXJuIChcbiAgICA8TW9kYWw+XG4gICAgICA8RGlhbG9nQm94IG9uRGlzbWlzcz17b25EaXNtaXNzfT5cbiAgICAgICAgPGgyPkNvdWxkIG5vdCBwYXJzZSBrZXltYXA8L2gyPlxuICAgICAgICA8cD5cbiAgICAgICAgICBJdCBsb29rcyBsaWtlIHNvbWUgYmluZGluZ3MgaW4geW91ciBrZXltYXAgYXJlIHVzaW5nIGN1c3RvbSBwcmUtcHJvY2Vzc29yXG4gICAgICAgICAgbWFjcm9zIHdoaWNoIGlzbid0IHN1cHBvcnRlZCBieSB0aGUgS2V5bWFwIEVkaXRvci4gVGhlc2UgbWFjcm9zIG1ha2VcbiAgICAgICAgICBpdCBkaWZmaWN1bHQgYm90aCB0byByZXNvbHZlIGJpbmRpbmdzIHRvIGJlaGF2aW9ycyBhbmQgcGFyYW1ldGVycywgYXNcbiAgICAgICAgICB3ZWxsIGFzIHRvIGdlbmVyYXRlIG1vZGlmaWVkIGtleW1hcCBjb2RlIHRoYXQgaXMgY29uc2lzdGVudCB3aXRoIHlvdXJcbiAgICAgICAgICBvcmlnaW5hbCBpbnRlbnRpb25zLlxuICAgICAgICA8L3A+XG4gICAgICAgIDxwPlxuICAgICAgICAgIFBsZWFzZSBlaXRoZXIgY29udGludWUgZWRpdGluZyB5b3VyIGtleW1hcCBieSBoYW5kIHdpdGggdGhlc2UgaGVscGVyc1xuICAgICAgICAgIG9yIGlmIHlvdSB3b3VsZCBsaWtlIHRvIHVzZSB0aGlzIGVkaXRvciwgcmV3cml0ZSB0aGUga2V5bWFwIHRvIHVzZVxuICAgICAgICAgIFpNSydzIHN5bnRheCBkaXJlY3RseS5cbiAgICAgICAgPC9wPlxuICAgICAgICB7R2VuZXJhbEhlbHBPZmZlckNvcHl9XG4gICAgICA8L0RpYWxvZ0JveD5cbiAgICA8L01vZGFsPlxuICApXG59XG5cbktleW1hcEJpbmRpbmdzVXNlUHJlcHJvY2Vzc29yTWFjcm9zLnByb3BUeXBlcyA9IHtcbiAgb25EaXNtaXNzOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG59XG5cbmV4cG9ydCBkZWZhdWx0IEtleW1hcEJpbmRpbmdzVXNlUHJlcHJvY2Vzc29yTWFjcm9zXG4iLCJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnXG5cbmltcG9ydCBEaWFsb2dCb3ggZnJvbSAnLi4vQ29tbW9uL0RpYWxvZ0JveCdcbmltcG9ydCBNb2RhbCBmcm9tICcuLi9Db21tb24vTW9kYWwnXG5pbXBvcnQgeyBHZW5lcmFsSGVscE9mZmVyQ29weSB9IGZyb20gJy4vc3VwcG9ydCdcblxuZnVuY3Rpb24gS2V5bWFwUGFyc2luZ0ZhaWxlZCAocHJvcHMpIHtcbiAgY29uc3QgeyBvbkRpc21pc3MgfSA9IHByb3BzXG5cbiAgcmV0dXJuIChcbiAgICA8TW9kYWw+XG4gICAgICA8RGlhbG9nQm94IG9uRGlzbWlzcz17b25EaXNtaXNzfT5cbiAgICAgICAgPGgyPkNvdWxkIG5vdCBwYXJzZSBrZXltYXA8L2gyPlxuICAgICAgICA8cD5cbiAgICAgICAgICBTb21ldGhpbmcgd2VudCB3cm9uZyB3aGlsZSB0cnlpbmcgdG8gcGFyc2UgeW91ciBrZXltYXAuIEl0J3MgaGFyZCB0b1xuICAgICAgICAgIHNheSB3aGF0IGV4YWN0bHksIGJlY2F1c2UgSSB3YXNuJ3QgZXhwZWN0aW5nIHRoaXMuXG4gICAgICAgIDwvcD5cbiAgICAgICAgPHA+XG4gICAgICAgICAgQSBjb21tb24gb2NjdXJyZW5jZSBoZXJlIGlzIGtleW1hcHMgdXNpbmcgYSB2YXJpZXR5IG9mIHByZS1wcm9jZXNzb3JcbiAgICAgICAgICBtYWNyb3MgdG8gZGVmaW5lIGxheWVycy9jb21ib3MvZXRjLlxuICAgICAgICA8L3A+XG4gICAgICAgIHtHZW5lcmFsSGVscE9mZmVyQ29weX1cbiAgICAgIDwvRGlhbG9nQm94PlxuICAgIDwvTW9kYWw+XG4gIClcbn1cblxuS2V5bWFwUGFyc2luZ0ZhaWxlZC5wcm9wVHlwZXMgPSB7XG4gIG9uRGlzbWlzczogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxufVxuXG5leHBvcnQgZGVmYXVsdCBLZXltYXBQYXJzaW5nRmFpbGVkXG4iLCJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnXG5cbmltcG9ydCBEaWFsb2dCb3ggZnJvbSAnLi4vQ29tbW9uL0RpYWxvZ0JveCdcbmltcG9ydCBNb2RhbCBmcm9tICcuLi9Db21tb24vTW9kYWwnXG5cbmZ1bmN0aW9uIEtleW1hcFVzaW5nTWlyeW9rdSAocHJvcHMpIHtcbiAgY29uc3QgeyBvbkRpc21pc3MgfSA9IHByb3BzXG5cbiAgcmV0dXJuIChcbiAgICA8TW9kYWw+XG4gICAgICA8RGlhbG9nQm94IG9uRGlzbWlzcz17b25EaXNtaXNzfT5cbiAgICAgICAgPGgyPkNvdWxkIG5vdCBwYXJzZSBNaXJ5b2t1IGtleW1hcDwvaDI+XG4gICAgICAgIDxwPlxuICAgICAgICAgIEl0IGxvb2tzIGxpa2UgeW91ciBrZXlib2FyZCBpcyBidWlsdCB1c2luZyBNaXJ5b2t1IHRvIG1hbmFnZSB0aGVcbiAgICAgICAgICBjb25maWd1cmF0aW9uIGFuZCBrZXltYXAuIFBhcnNpbmcgYW5kIGVkaXRpbmcga2V5bWFwcyB0aGF0IHVzZSB0aGlzXG4gICAgICAgICAgc3ludGF4IGlzIHVuc3VwcG9ydGVkIGJ5IHRoZSBLZXltYXAgRWRpdG9yLlxuICAgICAgICA8L3A+XG4gICAgICAgIDxwPlxuICAgICAgICAgIFBsZWFzZSBlaXRoZXIgY29udGludWUgZWRpdGluZyB5b3VyIGtleW1hcCBieSBoYW5kIHdpdGggdGhlc2UgaGVscGVyc1xuICAgICAgICAgIG9yIGlmIHlvdSB3b3VsZCBsaWtlIHRvIHVzZSB0aGlzIGVkaXRvciwgcmV3cml0ZSB0aGUga2V5bWFwIHRvIHVzZVxuICAgICAgICAgIFpNSydzIHN5bnRheCBkaXJlY3RseS5cbiAgICAgICAgPC9wPlxuICAgICAgPC9EaWFsb2dCb3g+XG4gICAgPC9Nb2RhbD5cbiAgKVxufVxuXG5LZXltYXBVc2luZ01pcnlva3UucHJvcFR5cGVzID0ge1xuICBvbkRpc21pc3M6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbn1cblxuZXhwb3J0IGRlZmF1bHQgS2V5bWFwVXNpbmdNaXJ5b2t1XG4iLCJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnXG5cbmltcG9ydCBEaWFsb2dCb3ggZnJvbSAnLi4vQ29tbW9uL0RpYWxvZ0JveCdcbmltcG9ydCBNb2RhbCBmcm9tICcuLi9Db21tb24vTW9kYWwnXG5pbXBvcnQgeyBHaXRIdWJJc3N1ZXNMaW5rIH0gZnJvbSAnLi9zdXBwb3J0J1xuXG5mdW5jdGlvbiBNaXNzaW5nUm9vdE5vZGUgKHByb3BzKSB7XG4gIGNvbnN0IHsgb25EaXNtaXNzIH0gPSBwcm9wc1xuXG4gIHJldHVybiAoXG4gICAgPE1vZGFsPlxuICAgICAgPERpYWxvZ0JveCBvbkRpc21pc3M9e29uRGlzbWlzc30+XG4gICAgICAgIDxoMj5Db3VsZCBub3QgcGFyc2Uga2V5bWFwPC9oMj5cbiAgICAgICAgPHA+XG4gICAgICAgICAgTWlzc2luZyBkZXZpY2V0cmVlIHJvb3Qgbm9kZS5cbiAgICAgICAgPC9wPlxuICAgICAgICA8cD5cbiAgICAgICAgICBUaGUga2V5bWFwIGVkaXRvciB3YXMgdW5hYmxlIHRvIGZpbmQgYSBkZXZpY2V0cmVlIHJvb3Qgbm9kZSBpbiB5b3VyXG4gICAgICAgICAga2V5bWFwLiBUaGlzIG1lYW5zIHRoYXQgZWl0aGVyIHNvbWV0aGluZyBpcyB3cm9uZyB3aXRoIHRoZSBwYXJzZXIgb3JcbiAgICAgICAgICBzb21ldGhpbmcgaXMgd3Jvbmcgd2l0aCB5b3VyIGtleW1hcCdzIHN5bnRheC5cbiAgICAgICAgPC9wPlxuICAgICAgICA8cD5cbiAgICAgICAgICBJZiB5b3UndmUgYmVlbiB1c2luZyB0aGUga2V5bWFwIGVkaXRvciBzdWNjZXNmdWxseSB1cCB0byBub3cgaXQnc1xuICAgICAgICAgIHBvc3NpYmxlIHRoYXQgaXQgaGFzIGludHJvZHVjZWQgYW4gZXJyb3IgaW4gdGhlIGtleW1hcCBmaWxlLiBQbGVhc2VcbiAgICAgICAgICByZWFjaCBvdXQgZm9yIHN1cHBvcnQgYXQge0dpdEh1Yklzc3Vlc0xpbmt9LlxuICAgICAgICA8L3A+XG4gICAgICA8L0RpYWxvZ0JveD5cbiAgICA8L01vZGFsPlxuICApXG59XG5cbk1pc3NpbmdSb290Tm9kZS5wcm9wVHlwZXMgPSB7XG4gIG9uRGlzbWlzczogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxufVxuXG5leHBvcnQgZGVmYXVsdCBNaXNzaW5nUm9vdE5vZGVcbiIsImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcydcblxuaW1wb3J0IERpYWxvZ0JveCBmcm9tICcuLi9Db21tb24vRGlhbG9nQm94J1xuaW1wb3J0IE1vZGFsIGZyb20gJy4uL0NvbW1vbi9Nb2RhbCdcblxuZnVuY3Rpb24gWm1rTm9kZWZyZWVDb25maWcgKHByb3BzKSB7XG4gIGNvbnN0IHsgb25EaXNtaXNzIH0gPSBwcm9wc1xuXG4gIHJldHVybiAoXG4gICAgPE1vZGFsPlxuICAgICAgPERpYWxvZ0JveCBvbkRpc21pc3M9e29uRGlzbWlzc30+XG4gICAgICAgIDxoMj5Db3VsZCBub3QgcGFyc2Uga2V5bWFwPC9oMj5cbiAgICAgICAgPHA+XG4gICAgICAgICAgRGV0ZWN0ZWQgdXNlIG9mIDxjb2RlPnptay1ub2RlZnJlZS1jb25maWc8L2NvZGU+XG4gICAgICAgIDwvcD5cbiAgICAgICAgPHA+XG4gICAgICAgICAgSXQgbG9va3MgbGlrZSB5b3VyIGtleW1hcCBpcyBidWlsdCB1c2luZyBoZWxwZXIgZnVuY3Rpb25zIGZyb20gdGhlXG4gICAgICAgICAgem1rLW5vZGVmcmVlLWNvbmZpZyBsaWJyYXJ5IHRvIHJlcGxhY2UgZGV2aWNldHJlZSBzeW50YXguIFBhcnNpbmcgYW5kXG4gICAgICAgICAgZWRpdGluZyBrZXltYXBzIHRoYXQgdXNlIHRoaXMgc3ludGF4IGlzIHVuc3VwcG9ydGVkIGJ5IHRoZSBLZXltYXBcbiAgICAgICAgICBFZGl0b3IuXG4gICAgICAgIDwvcD5cbiAgICAgICAgPHA+XG4gICAgICAgICAgUGxlYXNlIGVpdGhlciBjb250aW51ZSBlZGl0aW5nIHlvdXIga2V5bWFwIGJ5IGhhbmQgd2l0aCB0aGVzZSBoZWxwZXJzXG4gICAgICAgICAgb3IgaWYgeW91IHdvdWxkIGxpa2UgdG8gdXNlIHRoaXMgZWRpdG9yLCByZXdyaXRlIHRoZSBrZXltYXAgdG8gdXNlXG4gICAgICAgICAgWk1LJ3Mgc3ludGF4IGRpcmVjdGx5LlxuICAgICAgICA8L3A+XG4gICAgICA8L0RpYWxvZ0JveD5cbiAgICA8L01vZGFsPlxuICApXG59XG5cblpta05vZGVmcmVlQ29uZmlnLnByb3BUeXBlcyA9IHtcbiAgb25EaXNtaXNzOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG59XG5cbmV4cG9ydCBkZWZhdWx0IFpta05vZGVmcmVlQ29uZmlnXG4iLCJpbXBvcnQgRGlhbG9nQm94IGZyb20gJy4uL0NvbW1vbi9EaWFsb2dCb3gnXG5pbXBvcnQgTW9kYWwgZnJvbSAnLi4vQ29tbW9uL01vZGFsJ1xuaW1wb3J0IHsgS2V5bWFwTGF5b3V0UmVzb3VyY2VzIH0gZnJvbSAnLi9zdXBwb3J0J1xuXG5mdW5jdGlvbiBTdWdnZXN0QXV0b0xheW91dFR3ZWFrIChwcm9wcykge1xuICByZXR1cm4gKFxuICAgIDxNb2RhbD5cbiAgICAgIDxEaWFsb2dCb3ggey4uLnByb3BzfT5cbiAgICAgICAgPGgyPlRoaXMgbGF5b3V0IHdhcyBBdXRvLUdlbmVyYXRlZDwvaDI+XG4gICAgICAgIDxwPlxuICAgICAgICAgIEhpIHRoZXJlISBUaGVyZSB3YXNuJ3QgYSBsYXlvdXQgZGVmaW5pdGlvbiB0byBhY2NvbXBhbnkgeW91ciBrZXltYXBcbiAgICAgICAgICBmaWxlLCBzbyB0aGUga2V5bWFwIGVkaXRvciB0cmllZCB0byBnZW5lcmF0ZSBvbmUgYXV0b21hdGljYWxseSBpbiBhXG4gICAgICAgICAgbGFzdC1kaXRjaCBlZmZvcnQgdG8gaGVscCB5b3UgZ2V0IGludG8gdGhlIGFwcC5cbiAgICAgICAgPC9wPlxuICAgICAgICA8cD5cbiAgICAgICAgICBUaGlzIGxheW91dCBkZWZpbml0aW9uIHdhcyAob3Igd2lsbCBiZSkgc2F2ZWQgd2hlbiB5b3UgZmlyc3Qgc2F2ZVxuICAgICAgICAgIGtleW1hcCBjaGFuZ2VzIHdpdGggdGhlIGtleW1hcCBlZGl0b3IsIHNvIHJlbWVtYmVyIHRoYXQgaWYgdGhlcmUgYXJlXG4gICAgICAgICAgYW55IHR3ZWFrcyB5b3UnZCBsaWtlIHRvIG1ha2UgdG8gaW1wcm92ZSBpdCB5b3UgY2FuIGRvIHNvIGJ5IGVkaXRpbmdcbiAgICAgICAgICB0aGUgPGNvZGU+aW5mby5qc29uPC9jb2RlPiBmaWxlLlxuICAgICAgICA8L3A+XG4gICAgICAgIHtLZXltYXBMYXlvdXRSZXNvdXJjZXN9XG4gICAgICA8L0RpYWxvZ0JveD5cbiAgICA8L01vZGFsPlxuICApXG59XG5cblN1Z2dlc3RBdXRvTGF5b3V0VHdlYWsucHJvcFR5cGVzID0ge31cblxuZXhwb3J0IGRlZmF1bHQgU3VnZ2VzdEF1dG9MYXlvdXRUd2Vha1xuIiwiaW1wb3J0IGZpbmQgZnJvbSAnbG9kYXNoL2ZpbmQnXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnXG5pbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlRWZmZWN0LCB1c2VSZWYsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnXG5cbmltcG9ydCBMb2NhbFBpY2tlciBmcm9tICcuL0xvY2FsL1BpY2tlcidcbmltcG9ydCBEZW1vUGlja2VyIGZyb20gJy4vRGVtby9QaWNrZXInXG5pbXBvcnQgR2l0aHViUGlja2VyIGZyb20gJy4vR2l0aHViL1BpY2tlcidcbmltcG9ydCB7IHNvdXJjZUNob2ljZXMsIGRlZmF1bHRTb3VyY2UgfSBmcm9tICcuL3NvdXJjZXMnXG5pbXBvcnQgeyBCdXR0b24sIFNlbGVjdCB9IGZyb20gJy4vQ29udHJvbHMnXG5pbXBvcnQgeyBnZXRFcnJvckRpYWxvZyB9IGZyb20gJy4vZXJyb3JzJ1xuaW1wb3J0IFN1Z2dlc3RBdXRvTGF5b3V0VHdlYWsgZnJvbSAnLi4vRGlhbG9ncy9TdWdnZXN0QXV0b0xheW91dFR3ZWFrJ1xuaW1wb3J0IEljb24gZnJvbSAnLi4vQ29tbW9uL0ljb24nXG5cbmZ1bmN0aW9uIHVzZVRvZ2dsZSAoaW5pdGlhbCkge1xuICBjb25zdCBbdG9nZ2xlU3RhdGUsIHNldFRvZ2dsZVN0YXRlXSA9IHVzZVN0YXRlKGluaXRpYWwpXG4gIGNvbnN0IHNldFRydWUgPSB1c2VDYWxsYmFjaygoKSA9PiBzZXRUb2dnbGVTdGF0ZSh0cnVlKSwgW3NldFRvZ2dsZVN0YXRlXSlcbiAgY29uc3Qgc2V0RmFsc2UgPSB1c2VDYWxsYmFjaygoKSA9PiBzZXRUb2dnbGVTdGF0ZShmYWxzZSksIFtzZXRUb2dnbGVTdGF0ZV0pXG4gIGNvbnN0IHNldEludmVydCA9IHVzZUNhbGxiYWNrKCgpID0+IHNldFRvZ2dsZVN0YXRlKHN0YXRlID0+ICFzdGF0ZSksIFtzZXRUb2dnbGVTdGF0ZV0pXG5cbiAgcmV0dXJuIFt0b2dnbGVTdGF0ZSwgc2V0VHJ1ZSwgc2V0RmFsc2UsIHNldEludmVydF1cbn1cblxuZnVuY3Rpb24gdXNlQ2xpY2tPdXRzaWRlSGFuZGxlciAocmVmLCBjYWxsYmFjaywgZW5hYmxlZCA9IHRydWUpIHtcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoZW5hYmxlZCkge1xuICAgICAgY29uc3QgaGFuZGxlQ2xpY2sgPSBldmVudCA9PiB7XG4gICAgICAgIGNvbnN0IGlzSW5Eb2N1bWVudCA9IGRvY3VtZW50LmJvZHkuY29udGFpbnMoZXZlbnQudGFyZ2V0KVxuICAgICAgICBjb25zdCBpc0luV3JhcHBlciA9IHJlZi5jdXJyZW50LmNvbnRhaW5zKGV2ZW50LnRhcmdldClcbiAgICAgICAgaWYgKGlzSW5Eb2N1bWVudCAmJiAhaXNJbldyYXBwZXIpIHtcbiAgICAgICAgICBjYWxsYmFjaygpXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGhhbmRsZUNsaWNrKVxuICAgICAgcmV0dXJuICgpID0+IGRvY3VtZW50LmJvZHkucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBoYW5kbGVDbGljaylcbiAgICB9XG4gIH0sIFtyZWYsIGVuYWJsZWQsIGNhbGxiYWNrXSlcbn1cblxuZnVuY3Rpb24gS2V5Ym9hcmRQaWNrZXIgKHByb3BzKSB7XG4gIGNvbnN0IHsgb25TZWxlY3QgfSA9IHByb3BzXG4gIGNvbnN0IHdyYXBwZXJSZWYgPSB1c2VSZWYoKVxuICBjb25zdCBbc291cmNlLCBzZXRTb3VyY2VdID0gdXNlU3RhdGUoZGVmYXVsdFNvdXJjZSlcbiAgY29uc3QgW3sgYXV0b0dlbmVyYXRlZCB9LCBzZXRMYXlvdXRJbmZvXSA9IHVzZVN0YXRlKHsgYXV0b0dlbmVyYXRlZDogZmFsc2UgfSlcbiAgY29uc3QgW3Nob3dEaWFsb2csIHNldFNob3dEaWFsb2ddID0gdXNlU3RhdGUobnVsbClcbiAgY29uc3QgY2xvc2VEaWFsb2cgPSB1c2VDYWxsYmFjaygoKSA9PiBzZXRTaG93RGlhbG9nKG51bGwpLCBbc2V0U2hvd0RpYWxvZ10pXG4gIGNvbnN0IFtpc0V4cGFuZGVkLCBzZXRFeHBhbmRlZCwgc2V0Q29tcGFjdF0gPSB1c2VUb2dnbGUodHJ1ZSlcbiAgY29uc3Qgc2hvd0xheW91dEhlbHAgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgc2V0U2hvd0RpYWxvZyh7XG4gICAgICBjb21wb25lbnQ6IFN1Z2dlc3RBdXRvTGF5b3V0VHdlYWssXG4gICAgICBvbkNsb3NlOiBjbG9zZURpYWxvZ1xuICAgIH0pXG4gIH0sIFtzZXRTaG93RGlhbG9nLCBjbG9zZURpYWxvZ10pXG5cbiAgdXNlQ2xpY2tPdXRzaWRlSGFuZGxlcih3cmFwcGVyUmVmLCBzZXRDb21wYWN0LCBpc0V4cGFuZGVkICYmIHNvdXJjZSA9PT0gJ2dpdGh1YicpXG5cbiAgY29uc3QgaGFuZGxlS2V5Ym9hcmRTZWxlY3RlZCA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uIChldmVudCkge1xuICAgIGNvbnN0IHsgd2FybmluZ0ZsYWdzID0gW10gfSA9IGV2ZW50LmtleW1hcFxuICAgIGNvbnN0IHsgYXV0b0dlbmVyYXRlZCA9IGZhbHNlIH0gPSBldmVudC5sYXlvdXRNZXRhZGF0YSB8fCB7fVxuICAgIGNvbnN0IGVycm9yID0gZ2V0RXJyb3JEaWFsb2cod2FybmluZ0ZsYWdzKVxuXG4gICAgaWYgKGVycm9yKSB7XG4gICAgICBzZXRTaG93RGlhbG9nKHsgY29tcG9uZW50OiBlcnJvciwgb25DbG9zZTogY2xvc2VEaWFsb2cgfSlcbiAgICAgIG9uU2VsZWN0KHsgc291cmNlLCBrZXlib2FyZDogbnVsbCB9KVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgc2V0TGF5b3V0SW5mbyh7IGF1dG9HZW5lcmF0ZWQgfSlcbiAgICBvblNlbGVjdCh7IHNvdXJjZSwgLi4uZXZlbnQgfSlcbiAgfSwgW29uU2VsZWN0LCBzb3VyY2UsIHNldFNob3dEaWFsb2csIGNsb3NlRGlhbG9nXSlcblxuICBjb25zdCBoYW5kbGVFcnJvciA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uICh7IGRpYWxvZywgZGlhbG9nUHJvcHMgfSkge1xuICAgIHNldFNob3dEaWFsb2coeyBjb21wb25lbnQ6IGRpYWxvZywgZGlhbG9nUHJvcHMsIG9uQ2xvc2U6IGNsb3NlRGlhbG9nIH0pXG4gICAgb25TZWxlY3QoeyBzb3VyY2UsIGtleWJvYXJkOiBudWxsIH0pXG4gIH0sIFtzZXRTaG93RGlhbG9nLCBjbG9zZURpYWxvZywgb25TZWxlY3QsIHNvdXJjZV0pXG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnc2VsZWN0ZWRTb3VyY2UnLCBzb3VyY2UpXG4gIH0sIFtzb3VyY2VdKVxuXG4gIC8vIFRPRE86IFVzZSBzb3VyY2UgdG8gbWVtb2l6ZSBhIFBpY2tlciBhcyBkZWZpbmVkIGluICcuL3NvdXJjZXMnXG4gIC8vIFRPRE86IFR1cm4gdGhpcyBpbnRvIGEgY29udGV4dD8gQ2FuIHByb3ZpZGU6XG4gIC8vIC0gcmVuZGVyYWJsZSBwaWNrZXIsXG4gIC8vIC0gcmVuZGVyYWJsZSBhY3Rpb25zLFxuICAvLyAtIGNhbGxiYWNrcyB0byBsb2FkL3JlbG9hZFxuXG4gIGNvbnN0IHNlbGVjdGVkU291cmNlID0gZmluZChzb3VyY2VDaG9pY2VzLCB7IGlkOiBzb3VyY2UgfSlcblxuICByZXR1cm4gKFxuICAgIDxkaXYgcmVmPXt3cmFwcGVyUmVmfSBzdHlsZT17e1xuICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgZmxleERpcmVjdGlvbjogJ3JvdycsXG4gICAgICBhbGlnbkl0ZW1zOiAnZW5kJyxcbiAgICAgIGdhcDogJzVweCcsXG4gICAgICBtYXJnaW46ICc1cHgnXG4gICAgfX0+XG4gICAgICA8U2VsZWN0XG4gICAgICAgIGxhYmVsPVwiU291cmNlXCJcbiAgICAgICAgdmFsdWU9e3NlbGVjdGVkU291cmNlfVxuICAgICAgICBvcHRpb25zPXtzb3VyY2VDaG9pY2VzfVxuICAgICAgICBnZXRPcHRpb25MYWJlbD17b3B0aW9uID0+IG9wdGlvbi5uYW1lfVxuICAgICAgICBnZXRPcHRpb25WYWx1ZT17b3B0aW9uID0+IG9wdGlvbi5pZH1cbiAgICAgICAgb25DaGFuZ2U9eyh7IGlkIH0pID0+IHNldFNvdXJjZShpZCl9XG4gICAgICAvPlxuXG4gICAgICB7c2hvd0RpYWxvZz8uY29tcG9uZW50ICYmIDxzaG93RGlhbG9nLmNvbXBvbmVudCB7Li4uc2hvd0RpYWxvZy5kaWFsb2dQcm9wcyB8fCB7fX0gb25EaXNtaXNzPXtzaG93RGlhbG9nLm9uQ2xvc2V9IC8+fVxuXG4gICAgICB7c291cmNlID09PSAnbG9jYWwnICYmIDxMb2NhbFBpY2tlciBvbkVycm9yPXtoYW5kbGVFcnJvcn0gb25TZWxlY3Q9e2hhbmRsZUtleWJvYXJkU2VsZWN0ZWR9IC8+fVxuICAgICAge3NvdXJjZSA9PT0gJ2RlbW8nICYmIDxEZW1vUGlja2VyIG9uU2VsZWN0PXtoYW5kbGVLZXlib2FyZFNlbGVjdGVkfSAvPn1cbiAgICAgIHtzb3VyY2UgPT09ICdnaXRodWInICYmIChcbiAgICAgICAgPEdpdGh1YlBpY2tlclxuICAgICAgICAgIGV4cGFuZGVkPXtpc0V4cGFuZGVkfVxuICAgICAgICAgIG9uU2VsZWN0PXtoYW5kbGVLZXlib2FyZFNlbGVjdGVkfVxuICAgICAgICAgIG9uRXJyb3I9e2hhbmRsZUVycm9yfVxuICAgICAgICAgIG9uRXhwYW5kPXtzZXRFeHBhbmRlZH1cbiAgICAgICAgLz5cbiAgICAgICl9XG5cbiAgICAgIHthdXRvR2VuZXJhdGVkICYmIChcbiAgICAgICAgPEJ1dHRvbiBvbkNsaWNrPXtzaG93TGF5b3V0SGVscH0+XG4gICAgICAgICAgPEljb24gbmFtZT1cIndhcm5pbmdcIiAvPiBMYXlvdXQgd3Jvbmc/XG4gICAgICAgIDwvQnV0dG9uPlxuICAgICAgKX1cbiAgICA8L2Rpdj5cbiAgKVxufVxuXG5LZXlib2FyZFBpY2tlci5wcm9wVHlwZXMgPSB7XG4gIG9uU2VsZWN0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG59XG5cbmV4cG9ydCBkZWZhdWx0IEtleWJvYXJkUGlja2VyXG4iLCJpbXBvcnQgS2V5bWFwQmluZGluZ3NVc2VQcmVwcm9jZXNzb3JNYWNyb3MgZnJvbSAnLi4vRGlhbG9ncy9LZXltYXBCaW5kaW5nc1VzZVByZXByb2Nlc3Nvck1hY3JvcydcbmltcG9ydCBLZXltYXBQYXJzaW5nRmFpbGVkIGZyb20gJy4uL0RpYWxvZ3MvS2V5bWFwUGFyc2luZ0ZhaWxlZCdcbmltcG9ydCBLZXltYXBVc2luZ01pcnlva3UgZnJvbSAnLi4vRGlhbG9ncy9LZXltYXBVc2luZ01pcnlva3UnXG5pbXBvcnQgTWlzc2luZ1Jvb3ROb2RlIGZyb20gJy4uL0RpYWxvZ3MvTWlzc2luZ1Jvb3ROb2RlJ1xuaW1wb3J0IFpta05vZGVmcmVlQ29uZmlnIGZyb20gJy4uL0RpYWxvZ3MvWm1rTm9kZWZyZWVDb25maWcnXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRFcnJvckRpYWxvZyAod2FybmluZ0ZsYWdzKSB7XG4gIHN3aXRjaCAod2FybmluZ0ZsYWdzWzBdKSB7XG4gICAgY2FzZSAnVVNJTkdfWk1LX05PREVGUkVFX01BQ1JPUyc6XG4gICAgICByZXR1cm4gWm1rTm9kZWZyZWVDb25maWdcbiAgICBjYXNlICdVU0lOR19NSVJZT0tVX0RUU0knOlxuICAgICAgcmV0dXJuIEtleW1hcFVzaW5nTWlyeW9rdVxuICAgIGNhc2UgJ1VTSU5HX05PTl9aTUtfTUFDUk8nOlxuICAgICAgcmV0dXJuIEtleW1hcEJpbmRpbmdzVXNlUHJlcHJvY2Vzc29yTWFjcm9zXG4gICAgY2FzZSAnS0VZTUFQX1BBUlNJTkdfRkFJTEVEJzpcbiAgICAgIHJldHVybiBLZXltYXBQYXJzaW5nRmFpbGVkXG4gICAgY2FzZSAnTUlTU0lOR19ST09UX05PREUnOlxuICAgICAgcmV0dXJuIE1pc3NpbmdSb290Tm9kZVxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gbnVsbFxuICB9XG59XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzJdLnVzZVsxXSEuL3VuZXhwZWN0ZWQtZXJyb3IubW9kdWxlLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzJdLnVzZVsxXSEuL3VuZXhwZWN0ZWQtZXJyb3IubW9kdWxlLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcydcbmltcG9ydCBTdGFja1RyYWNlIGZyb20gJ3N0YWNrdHJhY2UtanMnXG5cbmltcG9ydCBMaW5rIGZyb20gJy4uL0NvbW1vbi9MaW5rJ1xuaW1wb3J0IE1vZGFsIGZyb20gJy4uL0NvbW1vbi9Nb2RhbCdcbmltcG9ydCBEaWFsb2dCb3ggZnJvbSAnLi4vQ29tbW9uL0RpYWxvZ0JveCdcbmltcG9ydCBJY29uQnV0dG9uIGZyb20gJy4uL0NvbW1vbi9JY29uQnV0dG9uJ1xuXG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vdW5leHBlY3RlZC1lcnJvci5tb2R1bGUuY3NzJ1xuaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0J1xuXG5mdW5jdGlvbiBmb3JtYXRTdGFja0ZyYW1lIChmcmFtZSkge1xuICByZXR1cm4gYCAgJHtmcmFtZS5maWxlTmFtZX06JHtmcmFtZS5saW5lTnVtYmVyfToke2ZyYW1lLmNvbHVtbk51bWJlcn1gXG59XG5cbmZ1bmN0aW9uIGZvcm1hdEVycm9yVGV4dCAoZXJyb3IsIHN0YWNrID0gW10pIHtcbiAgcmV0dXJuIGBcbiR7ZXJyb3IubmFtZX1cblxuJHtlcnJvci5tZXNzYWdlfVxuXG4ke3N0YWNrLm1hcChmb3JtYXRTdGFja0ZyYW1lKS5qb2luKCdcXG4nKX1cbmAudHJpbSgpXG59XG5cbmNvbnN0IG5ld0dpdGh1Yklzc3VlID0gKFxuICA8TGluayBleHRlcm5hbCBocmVmPVwiaHR0cHM6Ly9naXRodWIuY29tL25pY2tjb3V0c29zL2tleW1hcC1lZGl0b3IvaXNzdWVzL25ld1wiPlxuICAgIG5ldyBpc3N1ZVxuICA8L0xpbms+XG4pXG5cbmZ1bmN0aW9uIFVuZXhwZWN0ZWRFcnJvciAoeyBlcnJvciB9KSB7XG4gIGNvbnN0IFtzdGFjaywgc2V0U3RhY2tdID0gdXNlU3RhdGUoW10pXG4gIGNvbnN0IFtmb3JtYXR0ZWRFcnJvciwgc2V0Rm9ybWF0dGVkRXJyb3JdID0gdXNlU3RhdGUoJycpXG4gIGNvbnN0IFtjb3BpZWQsIHNldENvcGllZF0gPSB1c2VTdGF0ZShmYWxzZSlcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGFzeW5jIGZ1bmN0aW9uIHBhcnNlU3RhY2sgKCkge1xuICAgICAgc2V0U3RhY2soYXdhaXQgU3RhY2tUcmFjZS5mcm9tRXJyb3IoZXJyb3IpKVxuICAgIH1cblxuICAgIHBhcnNlU3RhY2soKVxuICB9LCBbc2V0U3RhY2ssIGVycm9yXSlcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIHNldEZvcm1hdHRlZEVycm9yKGZvcm1hdEVycm9yVGV4dChlcnJvciwgc3RhY2spKVxuICB9LCBbZXJyb3IsIHN0YWNrXSlcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChjb3BpZWQpIHtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBzZXRDb3BpZWQoZmFsc2UpXG4gICAgICB9LCAzMDAwKVxuICAgIH1cbiAgfSwgW2NvcGllZCwgc2V0Q29waWVkXSlcblxuICBmdW5jdGlvbiBjb3B5RXJyb3JUZXh0ICgpIHtcbiAgICBjb25zdCBiYWNrVGlja3MgPSAnYGBgJ1xuICAgIGNvbnN0IHRleHQgPSBgJHtiYWNrVGlja3N9XFxuJHtmb3JtYXR0ZWRFcnJvcn1cXG4ke2JhY2tUaWNrc31gXG4gICAgbmF2aWdhdG9yLmNsaXBib2FyZC53cml0ZVRleHQodGV4dClcbiAgICAgIC50aGVuKCgpID0+IHNldENvcGllZCh0cnVlKSlcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPE1vZGFsPlxuICAgICAgPERpYWxvZ0JveCBkaXNtaXNzVGV4dD17ZmFsc2V9IHN0eWxlPXt7IG1heFdpZHRoOiAnNzAwcHgnIH19PlxuICAgICAgICA8aDI+VW5leHBlY3RlZCBlcnJvcjwvaDI+XG4gICAgICAgIDxwPlxuICAgICAgICAgIFNvbWV0aGluZyB1bmV4cGVjdGVkIGhhcHBlbmVkIGFuZCB0aGUga2V5bWFwIGVkaXRvciBhcHAgY2Fubm90XG4gICAgICAgICAgcmVjb3Zlci4gUGxlYXNlIGNvbnNpZGVyIHRha2luZyBhIG1vbWVudCB0byBvcGVuIGEge25ld0dpdGh1Yklzc3VlfVxuICAgICAgICAgIHdpdGggdGhlIGRldGFpbHMgYmVsb3cgdG8gaGVscCBtZSBpbnZlc3RpZ2F0ZSBhbmQgaW1wcm92ZSB0aGUgYXBwLlxuICAgICAgICA8L3A+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMuc3RhY2tUcmFjZX0+XG4gICAgICAgICAgPHByZT57Zm9ybWF0dGVkRXJyb3J9PC9wcmU+XG4gICAgICAgICAgPEljb25CdXR0b25cbiAgICAgICAgICAgIGljb249XCJjb3B5XCJcbiAgICAgICAgICAgIHRpdGxlPVwiQ29weSBlcnJvciB0ZXh0XCJcbiAgICAgICAgICAgIGNsYXNzTmFtZT17c3R5bGVzLmJ1dHRvbn1cbiAgICAgICAgICAgIG9uQ2xpY2s9e2NvcHlFcnJvclRleHR9XG4gICAgICAgICAgLz5cbiAgICAgICAgICB7Y29waWVkICYmIChcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMuY29weU1lc3NhZ2V9PkNvcGllZCE8L2Rpdj5cbiAgICAgICAgICApfVxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvRGlhbG9nQm94PlxuICAgIDwvTW9kYWw+XG4gIClcbn1cblxuVW5leHBlY3RlZEVycm9yLnByb3BUeXBlcyA9IHtcbiAgZXJyb3I6IFByb3BUeXBlcy5pbnN0YW5jZU9mKEVycm9yKS5pc1JlcXVpcmVkXG59XG5cbmV4cG9ydCBkZWZhdWx0IFVuZXhwZWN0ZWRFcnJvclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IFVuZXhwZWN0ZWRFcnJvciBmcm9tICcuL0RpYWxvZ3MvVW5leHBlY3RlZEVycm9yJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFcnJvckJvdW5kYXJ5IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IgKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpXG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGVycm9yOiBudWxsXG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGdldERlcml2ZWRTdGF0ZUZyb21FcnJvciAoZXJyb3IpIHtcbiAgICByZXR1cm4geyBlcnJvciB9XG4gIH1cblxuICByZW5kZXIgKCkge1xuICAgIGNvbnN0IHsgY2hpbGRyZW4gfSA9IHRoaXMucHJvcHNcbiAgICBjb25zdCB7IGVycm9yIH0gPSB0aGlzLnN0YXRlXG5cbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgIHJldHVybiA8VW5leHBlY3RlZEVycm9yIGVycm9yPXtlcnJvcn0gLz5cbiAgICB9XG5cbiAgICByZXR1cm4gY2hpbGRyZW5cbiAgfVxufVxuIiwiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJ1xuXG5pbXBvcnQgRGlhbG9nQm94IGZyb20gJy4uL0NvbW1vbi9EaWFsb2dCb3gnXG5pbXBvcnQgTW9kYWwgZnJvbSAnLi4vQ29tbW9uL01vZGFsJ1xuaW1wb3J0IHsgR2l0SHViSXNzdWVzTGluayB9IGZyb20gJy4vc3VwcG9ydCdcblxuZnVuY3Rpb24gS2V5bWFwU2F2ZUZhaWxlZCAocHJvcHMpIHtcbiAgY29uc3QgeyBvbkRpc21pc3MgfSA9IHByb3BzXG4gIHJldHVybiAoXG4gICAgPE1vZGFsPlxuICAgICAgPERpYWxvZ0JveCBvbkRpc21pc3M9e29uRGlzbWlzc30+XG4gICAgICAgIDxoMj5GYWlsZWQgdG8gc2F2ZSBrZXltYXAgY2hhbmdlczwvaDI+XG4gICAgICAgIDxwPlxuICAgICAgICAgIFNvcnJ5LCBhbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIHdoaWxlIHRyeWluZyB0byBzYXZlIHlvdXIga2V5bWFwLlxuICAgICAgICA8L3A+XG4gICAgICAgIDxwPlxuICAgICAgICAgIFBsZWFzZSB0cnkgYWdhaW4gb3IgcmFpc2UgYW4gaXNzdWUgaWYgdGhlIHByb2JsZW0gcGVyc2lzdHMgYW5kIEknbGxcbiAgICAgICAgICB0cnkgdG8gd29yayBpdCBvdXQgd2l0aCB5b3UuIFNlcmlvdXNseSBJIGNhbiBvbmx5IGdldCB0aGlzIHJpZ2h0IGlmIElcbiAgICAgICAgICBrbm93IHdoYXQncyB3cm9uZywgYW5kIGluIHNvbWUgY2FzZXMgdGhhdCBjb21lcyBkb3duIHRvIHBlb3BsZSB1c2luZ1xuICAgICAgICAgIHRoaXMgZWRpdG9yIGluIG1vcmUgYWR2YW5jZWQgd2F5cyB0aGFuIEkgbXlzZWxmIGhhdmUuXG4gICAgICAgIDwvcD5cbiAgICAgICAgPHA+XG4gICAgICAgICAge0dpdEh1Yklzc3Vlc0xpbmt9XG4gICAgICAgIDwvcD5cbiAgICAgIDwvRGlhbG9nQm94PlxuICAgIDwvTW9kYWw+XG4gIClcbn1cblxuS2V5bWFwU2F2ZUZhaWxlZC5wcm9wVHlwZXMgPSB7XG4gIG9uRGlzbWlzczogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxufVxuXG5leHBvcnQgZGVmYXVsdCBLZXltYXBTYXZlRmFpbGVkXG4iLCJpbXBvcnQgJ0Bmb3J0YXdlc29tZS9mb250YXdlc29tZS1mcmVlL2Nzcy9hbGwuY3NzJ1xuXG5pbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgeyB1c2VEaXNwYXRjaCwgdXNlU2VsZWN0b3IgfSBmcm9tICdyZWFjdC1yZWR1eCdcblxuaW1wb3J0ICcuL0FwcC5jc3MnXG5pbXBvcnQgeyBTZXR0aW5nc0NvbnRleHQgfSBmcm9tICcuL3Byb3ZpZGVycydcblxuaW1wb3J0IEljb25CdXR0b24gZnJvbSAnLi9Db21tb24vSWNvbkJ1dHRvbidcbmltcG9ydCBLZXlib2FyZCBmcm9tICcuL0tleWJvYXJkL0tleWJvYXJkJ1xuaW1wb3J0IEdpdEh1YkxpbmsgZnJvbSAnLi9HaXRIdWJMaW5rJ1xuaW1wb3J0IFNldHRpbmdzIGZyb20gJy4vRGlhbG9ncy9TZXR0aW5ncydcbmltcG9ydCBTb3VyY2VBY3Rpb25zIGZyb20gJy4vU291cmNlcy9Tb3VyY2VBY3Rpb25zJ1xuaW1wb3J0IFNvdXJjZVBpY2tlciBmcm9tICcuL1NvdXJjZXMvU291cmNlUGlja2VyJ1xuaW1wb3J0IGdpdGh1YiBmcm9tICcuL1NvdXJjZXMvR2l0aHViL2FwaSdcblxuaW1wb3J0IEVycm9yQm91bmRhcnkgZnJvbSAnLi9FcnJvckJvdW5kYXJ5J1xuaW1wb3J0IEtleW1hcFNhdmVGYWlsZWQgZnJvbSAnLi9EaWFsb2dzL0tleW1hcFNhdmVGYWlsZWQnXG5pbXBvcnQgeyBEZWZpbml0aW9uc0NvbnRleHRQcm92aWRlciB9IGZyb20gJy4vQ29udGV4dHMvRGVmaW5pdGlvbnMnXG5pbXBvcnQgeyBMYXlvdXRDb250ZXh0UHJvdmlkZXIgfSBmcm9tICcuL0NvbnRleHRzL0xheW91dCdcblxuZnVuY3Rpb24gQXBwICgpIHtcbiAgY29uc3Qgc3RhdGUgPSB1c2VTZWxlY3RvcihzdGF0ZSA9PiBzdGF0ZSlcbiAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpXG4gIGNvbnN0IHtcbiAgICBzb3VyY2VPdGhlcixcbiAgICBrZXlib2FyZCxcbiAgICBzYXZlRXJyb3IsXG4gICAgdGhlbWUsXG4gICAgc2V0dGluZ3NWaXNpYmxlLFxuICAgIGV4cGVyaW1lbnRhbFNldHRpbmdzXG4gIH0gPSBzdGF0ZVxuXG4gIC8vIHVzZUVmZmVjdCgoKSA9PiB7XG4gIC8vICAgKGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgLy8gICAgIGNvbnNvbGUubG9nKCdsb2FkaW5nIGRldmljZXRyZWUgcGFyc2VyJylcbiAgLy8gICAgIGNvbnN0IHsgZ2V0UGFyc2VyIH0gPSBhd2FpdCBpbXBvcnQoJ2RldmljZXRyZWUnKVxuICAvLyAgICAgY29uc3QgcGFyc2VyID0gYXdhaXQgZ2V0UGFyc2VyKClcbiAgLy8gICAgIGNvbnN0IHRyZWUgPSBwYXJzZXIucGFyc2UoJy8ge307JylcbiAgLy8gICAgIGNvbnNvbGUubG9nKHRyZWUsIHRyZWUucm9vdE5vZGUudG9TdHJpbmcoKSlcbiAgLy8gICB9KSgpXG4gIC8vIH0sIFtdKVxuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKCFzb3VyY2VPdGhlcj8uZ2l0aHViKSB7XG4gICAgICBkaXNwYXRjaCh7IHR5cGU6ICdHSVRIVUJfQlVJTERfVVBEQVRFJywgYnVpbGQ6IG51bGwgfSlcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhhbmRsZXIgKHJ1bikge1xuICAgICAgaWYgKHJ1bi5oZWFkX2JyYW5jaCA9PT0gc291cmNlT3RoZXIuZ2l0aHViLmJyYW5jaCkge1xuICAgICAgICBkaXNwYXRjaCh7IHR5cGU6ICdHSVRIVUJfQlVJTERfVVBEQVRFJywgYnVpbGQ6IHJ1biB9KVxuICAgICAgfVxuICAgIH1cblxuICAgIDsoYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgY29uc3QgeyByZXBvc2l0b3J5LCBicmFuY2ggfSA9IHNvdXJjZU90aGVyLmdpdGh1YlxuICAgICAgaGFuZGxlcihhd2FpdCBnaXRodWIuZmV0Y2hCdWlsZFN0YXR1cyhyZXBvc2l0b3J5LCBicmFuY2gpKVxuICAgIH0pKClcblxuICAgIGdpdGh1Yi5vbignYnVpbGQtdXBkYXRlJywgaGFuZGxlcilcbiAgICByZXR1cm4gKCkgPT4gZ2l0aHViLm9mZignYnVpbGQtdXBkYXRlJywgaGFuZGxlcilcbiAgfSwgW3NvdXJjZU90aGVyLCBkaXNwYXRjaF0pXG5cbiAgY29uc3QgaGFuZGxlS2V5Ym9hcmRTZWxlY3RlZCA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uIChldmVudCkge1xuICAgIGNvbnN0IHsgc291cmNlLCBsYXlvdXQsIGtleW1hcCwgc2Vuc29ycyA9IFtdLCAuLi5vdGhlciB9ID0gZXZlbnRcblxuICAgIGlmICgha2V5bWFwKSB7XG4gICAgICBkaXNwYXRjaCh7IHR5cGU6ICdDTEVBUl9LRVlCT0FSRF9TRUxFQ1RJT04nIH0pXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBkaXNwYXRjaCh7XG4gICAgICB0eXBlOiAnU0VMRUNUX0tFWUJPQVJEJyxcbiAgICAgIHNvdXJjZSxcbiAgICAgIHNvdXJjZU90aGVyOiBvdGhlcixcbiAgICAgIGxheW91dCxcbiAgICAgIGtleW1hcCxcbiAgICAgIHNlbnNvcnNcbiAgICB9KVxuICB9LCBbZGlzcGF0Y2hdKVxuXG4gIGNvbnN0IGhhbmRsZVVwZGF0ZVNldHRpbmdzID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gKHNldHRpbmdzKSB7XG4gICAgZGlzcGF0Y2goeyB0eXBlOiAnU0VUVElOR1NfVVBEQVRFJywgc2V0dGluZ3MgfSlcbiAgfSwgW2Rpc3BhdGNoXSlcblxuICBjb25zdCBvcGVuU2V0dGluZ3NEaWFsb2cgPSB1c2VDYWxsYmFjayhcbiAgICAoKSA9PiBkaXNwYXRjaCh7IHR5cGU6ICdTRVRUSU5HU19PUEVOJyB9KSxcbiAgICBbZGlzcGF0Y2hdXG4gIClcblxuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8RXJyb3JCb3VuZGFyeT5cbiAgICAgICAgPFNldHRpbmdzQ29udGV4dC5Qcm92aWRlciB2YWx1ZT17e1xuICAgICAgICAgIHNldHRpbmdzOiBleHBlcmltZW50YWxTZXR0aW5ncyxcbiAgICAgICAgICBvcGVuU2V0dGluZ3NEaWFsb2dcbiAgICAgICAgfX0+XG4gICAgICAgICAgPFNvdXJjZVBpY2tlciBvblNlbGVjdD17aGFuZGxlS2V5Ym9hcmRTZWxlY3RlZH0gLz5cblxuICAgICAgICAgIDxkaXYgaWQ9XCJzZXR0aW5ncy1iYXJcIj5cbiAgICAgICAgICAgIDxJY29uQnV0dG9uXG4gICAgICAgICAgICAgIGlkPVwibGlnaHQtbW9kZVwiXG4gICAgICAgICAgICAgIHRpdGxlPVwiVG9nZ2xlIHRoZW1lXCJcbiAgICAgICAgICAgICAgaWNvbj17e1xuICAgICAgICAgICAgICAgIGxpZ2h0OiAnc3VuJyxcbiAgICAgICAgICAgICAgICBkYXJrOiAnbW9vbicsXG4gICAgICAgICAgICAgICAgc3lzdGVtOiAnY2lyY2xlLWhhbGYtc3Ryb2tlJ1xuICAgICAgICAgICAgICB9W3RoZW1lXSB8fCAnY2lyY2xlLWhhbGYtc3Ryb2tlJ31cbiAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gZGlzcGF0Y2goeyB0eXBlOiAnQ1lDTEVfVEhFTUUnIH0pfVxuICAgICAgICAgICAgLz5cblxuICAgICAgICAgICAgPEljb25CdXR0b25cbiAgICAgICAgICAgICAgaWQ9XCJzZXR0aW5ncy1idXR0b25cIlxuICAgICAgICAgICAgICBpY29uPVwiY29nXCJcbiAgICAgICAgICAgICAgb25DbGljaz17b3BlblNldHRpbmdzRGlhbG9nfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIHtzZXR0aW5nc1Zpc2libGUgJiYgKFxuICAgICAgICAgICAgICA8U2V0dGluZ3NcbiAgICAgICAgICAgICAgICBzZXR0aW5ncz17ZXhwZXJpbWVudGFsU2V0dGluZ3N9XG4gICAgICAgICAgICAgICAgb25VcGRhdGU9e2hhbmRsZVVwZGF0ZVNldHRpbmdzfVxuICAgICAgICAgICAgICAgIG9uQ2xvc2U9eygpID0+IGRpc3BhdGNoKHsgdHlwZTogJ1NFVFRJTkdTX0NMT1NFJyB9KX1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICA8U291cmNlQWN0aW9ucyAvPlxuXG4gICAgICAgICAgPERlZmluaXRpb25zQ29udGV4dFByb3ZpZGVyPlxuICAgICAgICAgICAge2tleWJvYXJkICYmIChcbiAgICAgICAgICAgICAgPExheW91dENvbnRleHRQcm92aWRlciBsYXlvdXQ9e2tleWJvYXJkLmxheW91dH0+XG4gICAgICAgICAgICAgICAgPEtleWJvYXJkXG4gICAgICAgICAgICAgICAgICBrZXltYXA9e2tleWJvYXJkLmtleW1hcH1cbiAgICAgICAgICAgICAgICAgIHNlbnNvcnM9e2tleWJvYXJkLnNlbnNvcnN9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPC9MYXlvdXRDb250ZXh0UHJvdmlkZXI+XG4gICAgICAgICAgICApfVxuICAgICAgICAgICAge3NhdmVFcnJvciAmJiAoXG4gICAgICAgICAgICAgIDxLZXltYXBTYXZlRmFpbGVkIG9uRGlzbWlzcz17KCkgPT4gZGlzcGF0Y2goeyB0eXBlOiAnQ0xFQVJfU0FWRV9FUlJPUicgfSl9IC8+XG4gICAgICAgICAgICApfVxuICAgICAgICAgIDwvRGVmaW5pdGlvbnNDb250ZXh0UHJvdmlkZXI+XG4gICAgICAgIDwvU2V0dGluZ3NDb250ZXh0LlByb3ZpZGVyPlxuICAgICAgPC9FcnJvckJvdW5kYXJ5PlxuICAgICAgPEdpdEh1YkxpbmsgLz5cbiAgICA8Lz5cbiAgKVxufVxuXG5leHBvcnQgZGVmYXVsdCBBcHBcbiIsImltcG9ydCBnZXQgZnJvbSAnbG9kYXNoL2dldCdcbmltcG9ydCBwaWNrIGZyb20gJ2xvZGFzaC9waWNrJ1xuXG5mdW5jdGlvbiBpbml0ICgpIHtcbiAgY29uc3Qgc2V0dGluZ3MgPSBKU09OLnBhcnNlKFxuICAgIGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdleHBlcmltZW50YWwtc2V0dGluZ3MnKSB8fCAne30nXG4gIClcblxuICByZXR1cm4ge1xuICAgIGRlZmluaXRpb25zOiBudWxsLFxuICAgIHNvdXJjZTogbnVsbCxcbiAgICBzb3VyY2VPdGhlcjogbnVsbCxcbiAgICBrZXlib2FyZDogbnVsbCxcbiAgICBfdW5tb2RpZmllZEtleW1hcDogbnVsbCxcbiAgICBzYXZpbmc6IG51bGwsXG4gICAgc2F2ZUVycm9yOiBudWxsLFxuICAgIHNldHRpbmdzVmlzaWJsZTogbnVsbCxcbiAgICBjb21taXREaWFsb2dPcGVuOiBmYWxzZSxcbiAgICB0aGVtZTogSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndGhlbWUnIHx8ICdcInN5c3RlbVwiJykpLFxuICAgIGV4cGVyaW1lbnRhbFNldHRpbmdzOiB7XG4gICAgICB1bmljb2RlR2x5cGhzOiBnZXQoc2V0dGluZ3MsICd1bmljb2RlR2x5cGhzJywgdHJ1ZSksXG4gICAgICBwbGF0Zm9ybUdseXBoczogZ2V0KHNldHRpbmdzLCAncGxhdGZvcm1HbHlwaHMnLCAnYXV0bycpLFxuICAgICAgZW5hYmxlQmVoYXZpb3JFZGl0aW5nOiBnZXQoc2V0dGluZ3MsICdlbmFibGVCZWhhdmlvckVkaXRpbmcnLCBmYWxzZSlcbiAgICB9LFxuICAgIGxhdGVzdEJ1aWxkOiBudWxsXG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IElOSVRJQUxfU1RBVEUgPSBpbml0KClcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVkdWNlciAoc3RhdGUsIGFjdGlvbikge1xuICBjb25zdCB7IHR5cGUgfSA9IGFjdGlvblxuXG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgJ0lOSVRJQUxJWkUnOlxuICAgICAgcmV0dXJuIGluaXQoKVxuXG4gICAgY2FzZSAnREVGSU5JVElPTlNfU0VUJzpcbiAgICAgIHJldHVybiB7IC4uLnN0YXRlLCBkZWZpbml0aW9uczogYWN0aW9uLmRlZmluaXRpb25zIH1cblxuICAgIGNhc2UgJ0NMRUFSX0tFWUJPQVJEX1NFTEVDVElPTic6XG4gICAgICByZXR1cm4geyAuLi5zdGF0ZSwga2V5Ym9hcmQ6IG51bGwgfVxuXG4gICAgY2FzZSAnU0VMRUNUX0tFWUJPQVJEJzpcbiAgICAgIHJldHVybiBzZWxlY3RLZXlib2FyZChzdGF0ZSwgYWN0aW9uKVxuXG4gICAgY2FzZSAnQ09NTUlUX0RJQUxPR19PUEVOJzpcbiAgICAgIHJldHVybiB7IC4uLnN0YXRlLCBjb21taXREaWFsb2dPcGVuOiB0cnVlIH1cblxuICAgIGNhc2UgJ0NPTU1JVF9ESUFMT0dfQ0xPU0UnOlxuICAgICAgcmV0dXJuIHsgLi4uc3RhdGUsIGNvbW1pdERpYWxvZ09wZW46IGZhbHNlIH1cblxuICAgIGNhc2UgJ0dJVEhVQl9CVUlMRF9VUERBVEUnOlxuICAgICAgcmV0dXJuIHsgLi4uc3RhdGUsIGxhdGVzdEJ1aWxkOiBhY3Rpb24uYnVpbGQgfVxuXG4gICAgY2FzZSAnS0VZTUFQX1NBVkVfU1RBUlQnOlxuICAgICAgcmV0dXJuIHsgLi4uc3RhdGUsIHNhdmluZzogdHJ1ZSwgc2F2ZUVycm9yOiBmYWxzZSB9XG5cbiAgICBjYXNlICdLRVlNQVBfU0FWRV9TVUNDRVNTJzpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICBzYXZpbmc6IGZhbHNlLFxuICAgICAgICB1bnNhdmVkOiBmYWxzZSxcbiAgICAgICAga2V5Ym9hcmQ6IHtcbiAgICAgICAgICAuLi5zdGF0ZS5rZXlib2FyZCxcbiAgICAgICAgICBrZXltYXA6IGFjdGlvbi5rZXltYXAgfHwgc3RhdGUua2V5Ym9hcmQua2V5bWFwXG4gICAgICAgIH0sXG4gICAgICAgIF91bm1vZGlmaWVkS2V5bWFwOiBhY3Rpb24ua2V5bWFwIHx8IHN0YXRlLmtleWJvYXJkLmtleW1hcFxuICAgICAgfVxuXG4gICAgY2FzZSAnS0VZTUFQX1NBVkVfRkFJTFVSRSc6XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgc2F2aW5nOiBmYWxzZSxcbiAgICAgICAgc2F2ZUVycm9yOiB0cnVlXG4gICAgICB9XG5cbiAgICBjYXNlICdDTEVBUl9TQVZFX0VSUk9SJzpcbiAgICAgIHJldHVybiB7IC4uLnN0YXRlLCBzYXZlRXJyb3I6IG51bGwgfVxuXG4gICAgY2FzZSAnU0VUVElOR1NfT1BFTic6XG4gICAgICByZXR1cm4geyAuLi5zdGF0ZSwgc2V0dGluZ3NWaXNpYmxlOiB0cnVlIH1cblxuICAgIGNhc2UgJ1NFVFRJTkdTX0NMT1NFJzpcbiAgICAgIHJldHVybiB7IC4uLnN0YXRlLCBzZXR0aW5nc1Zpc2libGU6IGZhbHNlIH1cblxuICAgIGNhc2UgJ1NFVFRJTkdTX1VQREFURSc6XG4gICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnZXhwZXJpbWVudGFsLXNldHRpbmdzJywgSlNPTi5zdHJpbmdpZnkoYWN0aW9uLnNldHRpbmdzKSlcbiAgICAgIHJldHVybiB7IC4uLnN0YXRlLCBleHBlcmltZW50YWxTZXR0aW5nczogYWN0aW9uLnNldHRpbmdzIH1cblxuICAgIGNhc2UgJ0NZQ0xFX1RIRU1FJzpcbiAgICAgIHJldHVybiBjeWNsZVRoZW1lKHN0YXRlLCBhY3Rpb24pXG5cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHN0YXRlXG4gIH1cbn1cblxuLy8gSGVyZSB3ZSBjYW4gYWRhcHQgdGhlIHBheWxvYWQgdG8gYWNjb3VudCBmb3IgQVBJIGNoYW5nZXNcbmZ1bmN0aW9uIHNlbGVjdEtleWJvYXJkIChzdGF0ZSwgYWN0aW9uKSB7XG4gIGNvbnN0IHsga2V5Ym9hcmQgfSA9IHN0YXRlXG4gIGNvbnN0IG5ld0tleWJvYXJkU3RhdGUgPSBwaWNrKGFjdGlvbiwgWydsYXlvdXQnLCAna2V5bWFwJywgJ3NlbnNvcnMnXSlcblxuICBuZXdLZXlib2FyZFN0YXRlLmtleW1hcC5tYWNyb3MgPSBuZXdLZXlib2FyZFN0YXRlLmtleW1hcC5tYWNyb3MubWFwKG1hY3JvID0+IChcbiAgICBwaWNrKG1hY3JvLCBbJ2luZGV4JywgJ25hbWUnLCAnbGFiZWxzJywgJ3Byb3BlcnRpZXMnXSlcbiAgKSlcblxuICByZXR1cm4ge1xuICAgIC4uLnN0YXRlLFxuICAgIHNvdXJjZTogYWN0aW9uLnNvdXJjZSxcbiAgICBzb3VyY2VPdGhlcjogYWN0aW9uLnNvdXJjZU90aGVyLFxuICAgIGtleWJvYXJkOiB7IC4uLmtleWJvYXJkLCAuLi5uZXdLZXlib2FyZFN0YXRlIH0sXG4gICAgX3VubW9kaWZpZWRLZXltYXA6IGFjdGlvbi5rZXltYXBcbiAgfVxufVxuXG5mdW5jdGlvbiBjeWNsZVRoZW1lIChzdGF0ZSwgYWN0aW9uKSB7XG4gIGNvbnN0IHRoZW1lcyA9IFsnbGlnaHQnLCAnZGFyaycsICdzeXN0ZW0nXVxuICBjb25zdCBpbmRleCA9IHRoZW1lcy5pbmRleE9mKHN0YXRlLnRoZW1lKVxuICBjb25zdCB0aGVtZSA9IHRoZW1lcy5hdCgoaW5kZXggKyAxKSAlIHRoZW1lcy5sZW5ndGgpXG4gIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCd0aGVtZScsIGBcIiR7dGhlbWV9XCJgKVxuICBkb2N1bWVudC5ib2R5LmRhdGFzZXQudGhlbWUgPSB0aGVtZVxuICByZXR1cm4geyAuLi5zdGF0ZSwgdGhlbWUgfVxufVxuIiwiaW1wb3J0IHsgY29tYmluZVJlZHVjZXJzLCBjb25maWd1cmVTdG9yZSB9IGZyb20gJ0ByZWR1eGpzL3Rvb2xraXQnXG5cbmltcG9ydCBhcHBSZWR1Y2VyLCB7IElOSVRJQUxfU1RBVEUgfSBmcm9tICcuL2FwcFJlZHVjZXInXG5pbXBvcnQgbGF5ZXJzUmVkdWNlciBmcm9tICcuL0tleWJvYXJkL0xheWVycy9sYXllcnNTbGljZSdcbmltcG9ydCBjb21ib3NSZWR1Y2VyIGZyb20gJy4vS2V5Ym9hcmQvQ29tYm9zL2NvbWJvc1NsaWNlJ1xuaW1wb3J0IG1hY3Jvc1JlZHVjZXIgZnJvbSAnLi9LZXlib2FyZC9NYWNyb3MvbWFjcm9zU2xpY2UnXG5pbXBvcnQgYmVoYXZpb3JzUmVkdWNlciBmcm9tICcuL0tleWJvYXJkL0JlaGF2aW9ycy9iZWhhdmlvcnNTbGljZSdcblxuY29uc3Qga2V5Ym9hcmRSZWR1Y2VyID0gY29tYmluZVJlZHVjZXJzKHtcbiAgbGF5b3V0OiAoc3RhdGUgPSBbXSkgPT4gc3RhdGUsXG4gIHNlbnNvcnM6IChzdGF0ZSA9IFtdKSA9PiBzdGF0ZSxcbiAga2V5bWFwOiBjb21iaW5lUmVkdWNlcnMoe1xuICAgIHdhcm5pbmdGbGFnczogKHN0YXRlID0gW10pID0+IHN0YXRlLFxuICAgIGRlZmluZXM6IChzdGF0ZSA9IFtdKSA9PiBzdGF0ZSxcbiAgICBjaG9zZW46IChzdGF0ZSA9IHt9KSA9PiBzdGF0ZSxcbiAgICBiZWhhdmlvcnM6IGJlaGF2aW9yc1JlZHVjZXIsXG4gICAgY29tYm9zOiBjb21ib3NSZWR1Y2VyLFxuICAgIGxheWVyczogbGF5ZXJzUmVkdWNlcixcbiAgICBtYWNyb3M6IG1hY3Jvc1JlZHVjZXJcbiAgfSlcbn0pXG5cbmZ1bmN0aW9uIHJvb3RSZWR1Y2VyIChzdGF0ZSwgYWN0aW9uKSB7XG4gIGNvbnN0IG5ld1N0YXRlID0gYXBwUmVkdWNlcihzdGF0ZSwgYWN0aW9uKVxuICByZXR1cm4ge1xuICAgIC4uLm5ld1N0YXRlLFxuICAgIGtleWJvYXJkOiBuZXdTdGF0ZS5rZXlib2FyZCAmJiB7XG4gICAgICAuLi5uZXdTdGF0ZS5rZXlib2FyZCxcbiAgICAgIC4uLmtleWJvYXJkUmVkdWNlcihuZXdTdGF0ZS5rZXlib2FyZCwgYWN0aW9uKVxuICAgIH1cbiAgfVxufVxuXG5jb25zdCBzdG9yZSA9IGNvbmZpZ3VyZVN0b3JlKHtcbiAgcmVkdWNlcjogcm9vdFJlZHVjZXIsXG4gIHByZWxvYWRlZFN0YXRlOiBJTklUSUFMX1NUQVRFXG59KVxuXG5leHBvcnQgZGVmYXVsdCBzdG9yZVxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbS9jbGllbnQnXG5pbXBvcnQgeyBQcm92aWRlciB9IGZyb20gJ3JlYWN0LXJlZHV4J1xuXG5pbXBvcnQgJy4vaW5kZXguY3NzJ1xuaW1wb3J0IEFwcCBmcm9tICcuL0FwcCdcblxuaW1wb3J0IHsgSU5JVElBTF9TVEFURSB9IGZyb20gJy4vYXBwUmVkdWNlcidcbmltcG9ydCBzdG9yZSBmcm9tICcuL3N0b3JlJ1xuXG5kb2N1bWVudC5ib2R5LmRhdGFzZXQudGhlbWUgPSBJTklUSUFMX1NUQVRFLnRoZW1lXG5cbmNvbnN0IHJvb3QgPSBSZWFjdERPTS5jcmVhdGVSb290KGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhcHAtcm9vdCcpKVxuXG5yb290LnJlbmRlcihcbiAgPFJlYWN0LlN0cmljdE1vZGU+XG4gICAgPFByb3ZpZGVyIHN0b3JlPXtzdG9yZX0+XG4gICAgICA8QXBwIC8+XG4gICAgPC9Qcm92aWRlcj5cbiAgPC9SZWFjdC5TdHJpY3RNb2RlPlxuKVxuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCI6cm9vdCB7XFxuICAtLWJnOiB3aGl0ZTtcXG4gIC0tYmctcmdiOiAyNTUsMjU1LDI1NTtcXG4gIC0tZmc6IGJsYWNrO1xcblxcdC0tZGFyay1yZWQ6ICM5MTBlMGU7XFxuXFx0LS1kYXJrLWJsdWU6ICM2ZDk5YzY7XFxuICAtLWVycm9yLWhpZ2hsaWdodDogcmdiKDE3OSwgNjAsIDYwKTtcXG4gIC0tc2VsZWN0aW9uOiByZ2IoNjAsIDE3OSwgMTEzKTtcXG4gIC0taG92ZXItc2VsZWN0aW9uOiByZ2JhKDYwLCAxNzksIDExMywgMC44NSk7XFxuICAtLWRlbGV0ZTogcmdiKDE3OSwgNjAsIDcyKTtcXG4gIC0tZGVsZXRlLWZhaW50OiByZ2JhKDE3OSwgNjAsIDcyLCAwLjYpO1xcbiAgLS1saW5rOiByb3lhbGJsdWU7XFxuICAtLWxpbmstaG92ZXI6ICM2ZDk5YzY7XFxuICAtLWtleS1iZy1iYXNlOiAjZjJmMmYyO1xcbiAgLS1rZXktYmctaG92ZXI6IHdoaXRlO1xcbiAgLS1rZXktYmctaGlnaGxpZ2h0OiBzYW5keWJyb3duO1xcbiAgLS1rZXktY29sb3ItYmFzZTogIzZmNmY2ZjtcXG4gIC0ta2V5LWNvbG9yLWV4dHJlbWU6ICMzMTMxMzE7XFxuICAtLWtleS1jb2xvci1ob3Zlcjogd2hpdGU7XFxuICAtLWNvZGUtYmc6IHJnYmEoMCwgMCwgMCwgMC4xNSk7XFxufVxcbmh0bWwge1xcbiAgZm9udC1mYW1pbHk6IHNhbnMtc2VyaWY7XFxufVxcbmh0bWwsIGJvZHkge1xcblxcdHdpZHRoOiAxMDB2dztcXG5cXHRoZWlnaHQ6IDEwMHZoO1xcblxcdG92ZXJmbG93OiBhdXRvO1xcblxcdHBhZGRpbmc6IDA7XFxuXFx0bWFyZ2luOiAwO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tYmcpO1xcbiAgY29sb3I6IHZhcigtLWZnKTtcXG5cXG4gIHRyYW5zaXRpb246IDMwMG1zIGVhc2UtaW4tb3V0O1xcbiAgdHJhbnNpdGlvbi1wcm9wZXJ0eTogY29sb3IsIGJhY2tncm91bmQtY29sb3IsIGJvcmRlci1jb2xvcjtcXG59XFxuXFxuaDEsIGgyLCBoMywgaDQsIGg1LCBoNiB7XFxuICBmb250LWZhbWlseTogUXVpY2tzYW5kLCBhdmVuaXIsIHNhbnMtc2VyaWY7XFxufVxcblxcbmJvZHlbZGF0YS10aGVtZT1cXFwiZGFya1xcXCJdIHtcXG4gIGNvbG9yLXNjaGVtZTogZGFyaztcXG4gIC0tYmc6ICMxMjM7XFxuICAtLWJnLXJnYjogMTcsMzQsNTE7XFxuICAtLWZnOiB3aGl0ZTtcXG4gIC0ta2V5LWJnLWJhc2U6ICMxYzJjM2I7XFxuICAtLWtleS1jb2xvci1iYXNlOiAjYjdiN2I3O1xcbiAgLS1rZXktY29sb3ItZXh0cmVtZTogI2U3ZTdlNztcXG59XFxuQG1lZGlhIChwcmVmZXJzLWNvbG9yLXNjaGVtZTogZGFyaykge1xcbiAgYm9keVtkYXRhLXRoZW1lPVxcXCJzeXN0ZW1cXFwiXSB7XFxuICAgIGNvbG9yLXNjaGVtZTogZGFyaztcXG4gICAgLS1iZzogIzEyMztcXG4gICAgLS1iZy1yZ2I6IDE3LDM0LDUxO1xcbiAgICAtLWZnOiB3aGl0ZTtcXG4gICAgLS1rZXktYmctYmFzZTogIzFjMmMzYjtcXG4gICAgLS1rZXktY29sb3ItYmFzZTogI2I3YjdiNztcXG4gICAgLS1rZXktY29sb3ItZXh0cmVtZTogI2U3ZTdlNztcXG4gIH1cXG59XFxuXFxuaDMge1xcbiAgbWFyZ2luLWJvdHRvbTogMTBweDtcXG59XFxuXFxuYSB7IGNvbG9yOiB2YXIoLS1saW5rKSB9XFxuYTpob3ZlciB7IGNvbG9yOiB2YXIoLS1saW5rLWhvdmVyKSB9XFxuXFxuY29kZSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1jb2RlLWJnKTtcXG4gIGJvcmRlci1yYWRpdXM6IDJweDtcXG4gIHBhZGRpbmc6IC4xNWVtIC4zZW0gLjA1ZW07XFxufVxcblxcbiNhY3Rpb25zIHtcXG5cXHRwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBkaXNwbGF5OiBmbGV4O1xcblxcdGJvdHRvbTogNXB4O1xcblxcdHJpZ2h0OiA1cHg7XFxuICBnYXA6IDRweDtcXG59XFxuXFxuI2FjdGlvbnMgYnV0dG9uIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWhvdmVyLXNlbGVjdGlvbik7XFxuICBjb2xvcjogd2hpdGU7XFxuXFxuICBmb250LXNpemU6IDE2cHg7XFxuICBib3JkZXI6IG5vbmU7XFxuICBib3JkZXItcmFkaXVzOiA1cHg7XFxuICBwYWRkaW5nOiAwIDVweDtcXG5cXG4gIGhlaWdodDogMzBweDtcXG4gIGxpbmUtaGVpZ2h0OiAzMHB4O1xcbiAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcXG59XFxuXFxuI2FjdGlvbnMgYnV0dG9uW2Rpc2FibGVkXSB7XFxuICBmaWx0ZXI6IHNhdHVyYXRlKDIwJSk7XFxuICBvcGFjaXR5OiAuNTtcXG4gIGN1cnNvcjogbm90LWFsbG93ZWQ7XFxufVxcblxcbiNzZXR0aW5ncy1iYXIge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgdG9wOiAxMHB4O1xcbiAgcmlnaHQ6IDEwcHg7XFxufVxcblxcbiNzZXR0aW5ncy1iYXIgYnV0dG9uIHtcXG4gIGJhY2tncm91bmQ6IG5vbmU7XFxuICBjb2xvcjogdmFyKC0tZmcpO1xcbiAgYm9yZGVyOiBub25lO1xcbn1cXG4jc2V0dGluZ3MtYmFyIGJ1dHRvbjpob3ZlciB7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBjb2xvcjogcm95YWxibHVlO1xcbn1cXG5cXG4uZmEtZGVsZXRlLXJpZ2h0OjpiZWZvcmUge1xcbiAgY29udGVudDogJ1xcXFxmNTVhJztcXG4gIHRyYW5zZm9ybS1vcmlnaW46IGNlbnRlcjtcXG4gIHRyYW5zZm9ybTogcm90YXRlWigxODBkZWcpO1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbn1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvQXBwLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLFdBQVc7RUFDWCxxQkFBcUI7RUFDckIsV0FBVztDQUNaLG1CQUFtQjtDQUNuQixvQkFBb0I7RUFDbkIsbUNBQW1DO0VBQ25DLDhCQUE4QjtFQUM5QiwyQ0FBMkM7RUFDM0MsMEJBQTBCO0VBQzFCLHNDQUFzQztFQUN0QyxpQkFBaUI7RUFDakIscUJBQXFCO0VBQ3JCLHNCQUFzQjtFQUN0QixxQkFBcUI7RUFDckIsOEJBQThCO0VBQzlCLHlCQUF5QjtFQUN6Qiw0QkFBNEI7RUFDNUIsd0JBQXdCO0VBQ3hCLDhCQUE4QjtBQUNoQztBQUNBO0VBQ0UsdUJBQXVCO0FBQ3pCO0FBQ0E7Q0FDQyxZQUFZO0NBQ1osYUFBYTtDQUNiLGNBQWM7Q0FDZCxVQUFVO0NBQ1YsU0FBUztFQUNSLDJCQUEyQjtFQUMzQixnQkFBZ0I7O0VBRWhCLDZCQUE2QjtFQUM3QiwwREFBMEQ7QUFDNUQ7O0FBRUE7RUFDRSwwQ0FBMEM7QUFDNUM7O0FBRUE7RUFDRSxrQkFBa0I7RUFDbEIsVUFBVTtFQUNWLGtCQUFrQjtFQUNsQixXQUFXO0VBQ1gsc0JBQXNCO0VBQ3RCLHlCQUF5QjtFQUN6Qiw0QkFBNEI7QUFDOUI7QUFDQTtFQUNFO0lBQ0Usa0JBQWtCO0lBQ2xCLFVBQVU7SUFDVixrQkFBa0I7SUFDbEIsV0FBVztJQUNYLHNCQUFzQjtJQUN0Qix5QkFBeUI7SUFDekIsNEJBQTRCO0VBQzlCO0FBQ0Y7O0FBRUE7RUFDRSxtQkFBbUI7QUFDckI7O0FBRUEsSUFBSSxtQkFBbUI7QUFDdkIsVUFBVSx5QkFBeUI7O0FBRW5DO0VBQ0UsZ0NBQWdDO0VBQ2hDLGtCQUFrQjtFQUNsQix5QkFBeUI7QUFDM0I7O0FBRUE7Q0FDQyxrQkFBa0I7RUFDakIsYUFBYTtDQUNkLFdBQVc7Q0FDWCxVQUFVO0VBQ1QsUUFBUTtBQUNWOztBQUVBO0VBQ0UscUJBQXFCO0VBQ3JCLGVBQWU7RUFDZix3Q0FBd0M7RUFDeEMsWUFBWTs7RUFFWixlQUFlO0VBQ2YsWUFBWTtFQUNaLGtCQUFrQjtFQUNsQixjQUFjOztFQUVkLFlBQVk7RUFDWixpQkFBaUI7RUFDakIsc0JBQXNCO0FBQ3hCOztBQUVBO0VBQ0UscUJBQXFCO0VBQ3JCLFdBQVc7RUFDWCxtQkFBbUI7QUFDckI7O0FBRUE7RUFDRSxrQkFBa0I7RUFDbEIsU0FBUztFQUNULFdBQVc7QUFDYjs7QUFFQTtFQUNFLGdCQUFnQjtFQUNoQixnQkFBZ0I7RUFDaEIsWUFBWTtBQUNkO0FBQ0E7RUFDRSxlQUFlO0VBQ2YsZ0JBQWdCO0FBQ2xCOztBQUVBO0VBQ0UsZ0JBQWdCO0VBQ2hCLHdCQUF3QjtFQUN4QiwwQkFBMEI7RUFDMUIscUJBQXFCO0FBQ3ZCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIjpyb290IHtcXG4gIC0tYmc6IHdoaXRlO1xcbiAgLS1iZy1yZ2I6IDI1NSwyNTUsMjU1O1xcbiAgLS1mZzogYmxhY2s7XFxuXFx0LS1kYXJrLXJlZDogIzkxMGUwZTtcXG5cXHQtLWRhcmstYmx1ZTogIzZkOTljNjtcXG4gIC0tZXJyb3ItaGlnaGxpZ2h0OiByZ2IoMTc5LCA2MCwgNjApO1xcbiAgLS1zZWxlY3Rpb246IHJnYig2MCwgMTc5LCAxMTMpO1xcbiAgLS1ob3Zlci1zZWxlY3Rpb246IHJnYmEoNjAsIDE3OSwgMTEzLCAwLjg1KTtcXG4gIC0tZGVsZXRlOiByZ2IoMTc5LCA2MCwgNzIpO1xcbiAgLS1kZWxldGUtZmFpbnQ6IHJnYmEoMTc5LCA2MCwgNzIsIDAuNik7XFxuICAtLWxpbms6IHJveWFsYmx1ZTtcXG4gIC0tbGluay1ob3ZlcjogIzZkOTljNjtcXG4gIC0ta2V5LWJnLWJhc2U6ICNmMmYyZjI7XFxuICAtLWtleS1iZy1ob3Zlcjogd2hpdGU7XFxuICAtLWtleS1iZy1oaWdobGlnaHQ6IHNhbmR5YnJvd247XFxuICAtLWtleS1jb2xvci1iYXNlOiAjNmY2ZjZmO1xcbiAgLS1rZXktY29sb3ItZXh0cmVtZTogIzMxMzEzMTtcXG4gIC0ta2V5LWNvbG9yLWhvdmVyOiB3aGl0ZTtcXG4gIC0tY29kZS1iZzogcmdiYSgwLCAwLCAwLCAwLjE1KTtcXG59XFxuaHRtbCB7XFxuICBmb250LWZhbWlseTogc2Fucy1zZXJpZjtcXG59XFxuaHRtbCwgYm9keSB7XFxuXFx0d2lkdGg6IDEwMHZ3O1xcblxcdGhlaWdodDogMTAwdmg7XFxuXFx0b3ZlcmZsb3c6IGF1dG87XFxuXFx0cGFkZGluZzogMDtcXG5cXHRtYXJnaW46IDA7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1iZyk7XFxuICBjb2xvcjogdmFyKC0tZmcpO1xcblxcbiAgdHJhbnNpdGlvbjogMzAwbXMgZWFzZS1pbi1vdXQ7XFxuICB0cmFuc2l0aW9uLXByb3BlcnR5OiBjb2xvciwgYmFja2dyb3VuZC1jb2xvciwgYm9yZGVyLWNvbG9yO1xcbn1cXG5cXG5oMSwgaDIsIGgzLCBoNCwgaDUsIGg2IHtcXG4gIGZvbnQtZmFtaWx5OiBRdWlja3NhbmQsIGF2ZW5pciwgc2Fucy1zZXJpZjtcXG59XFxuXFxuYm9keVtkYXRhLXRoZW1lPVxcXCJkYXJrXFxcIl0ge1xcbiAgY29sb3Itc2NoZW1lOiBkYXJrO1xcbiAgLS1iZzogIzEyMztcXG4gIC0tYmctcmdiOiAxNywzNCw1MTtcXG4gIC0tZmc6IHdoaXRlO1xcbiAgLS1rZXktYmctYmFzZTogIzFjMmMzYjtcXG4gIC0ta2V5LWNvbG9yLWJhc2U6ICNiN2I3Yjc7XFxuICAtLWtleS1jb2xvci1leHRyZW1lOiAjZTdlN2U3O1xcbn1cXG5AbWVkaWEgKHByZWZlcnMtY29sb3Itc2NoZW1lOiBkYXJrKSB7XFxuICBib2R5W2RhdGEtdGhlbWU9XFxcInN5c3RlbVxcXCJdIHtcXG4gICAgY29sb3Itc2NoZW1lOiBkYXJrO1xcbiAgICAtLWJnOiAjMTIzO1xcbiAgICAtLWJnLXJnYjogMTcsMzQsNTE7XFxuICAgIC0tZmc6IHdoaXRlO1xcbiAgICAtLWtleS1iZy1iYXNlOiAjMWMyYzNiO1xcbiAgICAtLWtleS1jb2xvci1iYXNlOiAjYjdiN2I3O1xcbiAgICAtLWtleS1jb2xvci1leHRyZW1lOiAjZTdlN2U3O1xcbiAgfVxcbn1cXG5cXG5oMyB7XFxuICBtYXJnaW4tYm90dG9tOiAxMHB4O1xcbn1cXG5cXG5hIHsgY29sb3I6IHZhcigtLWxpbmspIH1cXG5hOmhvdmVyIHsgY29sb3I6IHZhcigtLWxpbmstaG92ZXIpIH1cXG5cXG5jb2RlIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWNvZGUtYmcpO1xcbiAgYm9yZGVyLXJhZGl1czogMnB4O1xcbiAgcGFkZGluZzogLjE1ZW0gLjNlbSAuMDVlbTtcXG59XFxuXFxuI2FjdGlvbnMge1xcblxcdHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuXFx0Ym90dG9tOiA1cHg7XFxuXFx0cmlnaHQ6IDVweDtcXG4gIGdhcDogNHB4O1xcbn1cXG5cXG4jYWN0aW9ucyBidXR0b24ge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0taG92ZXItc2VsZWN0aW9uKTtcXG4gIGNvbG9yOiB3aGl0ZTtcXG5cXG4gIGZvbnQtc2l6ZTogMTZweDtcXG4gIGJvcmRlcjogbm9uZTtcXG4gIGJvcmRlci1yYWRpdXM6IDVweDtcXG4gIHBhZGRpbmc6IDAgNXB4O1xcblxcbiAgaGVpZ2h0OiAzMHB4O1xcbiAgbGluZS1oZWlnaHQ6IDMwcHg7XFxuICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xcbn1cXG5cXG4jYWN0aW9ucyBidXR0b25bZGlzYWJsZWRdIHtcXG4gIGZpbHRlcjogc2F0dXJhdGUoMjAlKTtcXG4gIG9wYWNpdHk6IC41O1xcbiAgY3Vyc29yOiBub3QtYWxsb3dlZDtcXG59XFxuXFxuI3NldHRpbmdzLWJhciB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDEwcHg7XFxuICByaWdodDogMTBweDtcXG59XFxuXFxuI3NldHRpbmdzLWJhciBidXR0b24ge1xcbiAgYmFja2dyb3VuZDogbm9uZTtcXG4gIGNvbG9yOiB2YXIoLS1mZyk7XFxuICBib3JkZXI6IG5vbmU7XFxufVxcbiNzZXR0aW5ncy1iYXIgYnV0dG9uOmhvdmVyIHtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIGNvbG9yOiByb3lhbGJsdWU7XFxufVxcblxcbi5mYS1kZWxldGUtcmlnaHQ6OmJlZm9yZSB7XFxuICBjb250ZW50OiAnXFxcXGY1NWEnO1xcbiAgdHJhbnNmb3JtLW9yaWdpbjogY2VudGVyO1xcbiAgdHJhbnNmb3JtOiByb3RhdGVaKDE4MGRlZyk7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcImJvZHkge1xcbiAgbWFyZ2luOiAwO1xcbiAgLXdlYmtpdC1mb250LXNtb290aGluZzogYW50aWFsaWFzZWQ7XFxuICAtbW96LW9zeC1mb250LXNtb290aGluZzogZ3JheXNjYWxlO1xcbn1cXG5cXG5jb2RlIHtcXG4gIGZvbnQtZmFtaWx5OiBzb3VyY2UtY29kZS1wcm8sIE1lbmxvLCBNb25hY28sIENvbnNvbGFzLCAnQ291cmllciBOZXcnLFxcbiAgICBtb25vc3BhY2U7XFxufVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9pbmRleC5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSxTQUFTO0VBQ1QsbUNBQW1DO0VBQ25DLGtDQUFrQztBQUNwQzs7QUFFQTtFQUNFO2FBQ1c7QUFDYlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJib2R5IHtcXG4gIG1hcmdpbjogMDtcXG4gIC13ZWJraXQtZm9udC1zbW9vdGhpbmc6IGFudGlhbGlhc2VkO1xcbiAgLW1vei1vc3gtZm9udC1zbW9vdGhpbmc6IGdyYXlzY2FsZTtcXG59XFxuXFxuY29kZSB7XFxuICBmb250LWZhbWlseTogc291cmNlLWNvZGUtcHJvLCBNZW5sbywgTW9uYWNvLCBDb25zb2xhcywgJ0NvdXJpZXIgTmV3JyxcXG4gICAgbW9ub3NwYWNlO1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCJidXR0b24ucGkySWc4YzNGZGg0SDJKcHhkbzcge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0taG92ZXItc2VsZWN0aW9uKTtcXG4gIGNvbG9yOiB3aGl0ZTtcXG5cXG4gIGZvbnQtc2l6ZTogMTZweDtcXG4gIGJvcmRlcjogbm9uZTtcXG4gIGJvcmRlci1yYWRpdXM6IDVweDtcXG4gIHBhZGRpbmc6IDAgNXB4O1xcblxcbiAgaGVpZ2h0OiAzMHB4O1xcbiAgbGluZS1oZWlnaHQ6IDMwcHg7XFxuICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xcbn1cXG5cXG5idXR0b24uQ3RwdTRFMmRaWUo2ZzhDVUdGT0Yge1xcbiAgY29sb3I6IHZhcigtLWZnKTtcXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbn1cXG5cXG5idXR0b24ucGkySWc4YzNGZGg0SDJKcHhkbzdbZGlzYWJsZWRdIHtcXG4gIGZpbHRlcjogc2F0dXJhdGUoMjAlKTtcXG4gIG9wYWNpdHk6IC41O1xcbiAgY3Vyc29yOiBub3QtYWxsb3dlZDtcXG59XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL0NvbW1vbi9hY3Rpb24tYnV0dG9uLm1vZHVsZS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSxxQkFBcUI7RUFDckIsZUFBZTtFQUNmLHdDQUF3QztFQUN4QyxZQUFZOztFQUVaLGVBQWU7RUFDZixZQUFZO0VBQ1osa0JBQWtCO0VBQ2xCLGNBQWM7O0VBRWQsWUFBWTtFQUNaLGlCQUFpQjtFQUNqQixzQkFBc0I7QUFDeEI7O0FBRUE7RUFDRSxnQkFBZ0I7RUFDaEIsNkJBQTZCO0FBQy9COztBQUVBO0VBQ0UscUJBQXFCO0VBQ3JCLFdBQVc7RUFDWCxtQkFBbUI7QUFDckJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiYnV0dG9uLmFjdGlvbiB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1ob3Zlci1zZWxlY3Rpb24pO1xcbiAgY29sb3I6IHdoaXRlO1xcblxcbiAgZm9udC1zaXplOiAxNnB4O1xcbiAgYm9yZGVyOiBub25lO1xcbiAgYm9yZGVyLXJhZGl1czogNXB4O1xcbiAgcGFkZGluZzogMCA1cHg7XFxuXFxuICBoZWlnaHQ6IDMwcHg7XFxuICBsaW5lLWhlaWdodDogMzBweDtcXG4gIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XFxufVxcblxcbmJ1dHRvbi5zZWNvbmRhcnkge1xcbiAgY29sb3I6IHZhcigtLWZnKTtcXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbn1cXG5cXG5idXR0b24uYWN0aW9uW2Rpc2FibGVkXSB7XFxuICBmaWx0ZXI6IHNhdHVyYXRlKDIwJSk7XFxuICBvcGFjaXR5OiAuNTtcXG4gIGN1cnNvcjogbm90LWFsbG93ZWQ7XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ubG9jYWxzID0ge1xuXHRcImFjdGlvblwiOiBcInBpMklnOGMzRmRoNEgySnB4ZG83XCIsXG5cdFwic2Vjb25kYXJ5XCI6IFwiQ3RwdTRFMmRaWUo2ZzhDVUdGT0ZcIlxufTtcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIualRoaUxjNV9CclV5bDcxdjNyS24ge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgei1pbmRleDogNTtcXG4gIGZvbnQtc2l6ZTogNzAlO1xcbiAgYmFja2dyb3VuZDogdmFyKC0tYmcpO1xcbiAgcGFkZGluZzogNXB4IDEwcHg7XFxuICBtYXJnaW4tbGVmdDogMTBweDtcXG5cXG4gIGJvcmRlci1yYWRpdXM6IDRweDtcXG59XFxuXFxuLmpUaGlMYzVfQnJVeWw3MXYzcktuIHAge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgbWFyZ2luOiAwO1xcbn1cXG5cXG4ualRoaUxjNV9CclV5bDcxdjNyS24gdWwge1xcbiAgZGlzcGxheTogbm9uZTtcXG59XFxuLmpUaGlMYzVfQnJVeWw3MXYzcktuLnhHMkdLbHNjMDdqTEViMmFNQzZIIHtcXG4gIGJveC1zaGFkb3c6IDJweCAycHggNXB4IDBweCByZ2JhKDAsIDAsIDAsIDAuNSk7XFxufVxcbi5qVGhpTGM1X0JyVXlsNzF2M3JLbi54RzJHS2xzYzA3akxFYjJhTUM2SCB1bCB7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIHBhZGRpbmc6IDA7XFxuICBtYXJnaW46IDA7XFxuICBsaXN0LXN0eWxlLXR5cGU6IG5vbmU7XFxufVxcblxcbi5qVGhpTGM1X0JyVXlsNzF2M3JLbiBsaSB7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBtYXJnaW46IDJweCAwO1xcbiAgbGluZS1oZWlnaHQ6IDIwcHg7XFxuICBwYWRkaW5nOiAwIDVweDtcXG4gIGJvcmRlci1yYWRpdXM6IDEwcHg7XFxufVxcblxcbi5qVGhpTGM1X0JyVXlsNzF2M3JLbiBsaTpob3ZlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1ob3Zlci1zZWxlY3Rpb24pO1xcbiAgY29sb3I6IHdoaXRlO1xcbn1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvQ29tbW9uL2FjdGlvbi1tZW51Lm1vZHVsZS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSxxQkFBcUI7RUFDckIsa0JBQWtCO0VBQ2xCLFVBQVU7RUFDVixjQUFjO0VBQ2QscUJBQXFCO0VBQ3JCLGlCQUFpQjtFQUNqQixpQkFBaUI7O0VBRWpCLGtCQUFrQjtBQUNwQjs7QUFFQTtFQUNFLHFCQUFxQjtFQUNyQixlQUFlO0VBQ2YsU0FBUztBQUNYOztBQUVBO0VBQ0UsYUFBYTtBQUNmO0FBQ0E7RUFDRSw4Q0FBOEM7QUFDaEQ7QUFDQTtFQUNFLGNBQWM7RUFDZCxVQUFVO0VBQ1YsU0FBUztFQUNULHFCQUFxQjtBQUN2Qjs7QUFFQTtFQUNFLGVBQWU7RUFDZixhQUFhO0VBQ2IsaUJBQWlCO0VBQ2pCLGNBQWM7RUFDZCxtQkFBbUI7QUFDckI7O0FBRUE7RUFDRSx3Q0FBd0M7RUFDeEMsWUFBWTtBQUNkXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5tZW51IHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHotaW5kZXg6IDU7XFxuICBmb250LXNpemU6IDcwJTtcXG4gIGJhY2tncm91bmQ6IHZhcigtLWJnKTtcXG4gIHBhZGRpbmc6IDVweCAxMHB4O1xcbiAgbWFyZ2luLWxlZnQ6IDEwcHg7XFxuXFxuICBib3JkZXItcmFkaXVzOiA0cHg7XFxufVxcblxcbi5tZW51IHAge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgbWFyZ2luOiAwO1xcbn1cXG5cXG4ubWVudSB1bCB7XFxuICBkaXNwbGF5OiBub25lO1xcbn1cXG4ubWVudS5vcGVuIHtcXG4gIGJveC1zaGFkb3c6IDJweCAycHggNXB4IDBweCByZ2JhKDAsIDAsIDAsIDAuNSk7XFxufVxcbi5tZW51Lm9wZW4gdWwge1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICBwYWRkaW5nOiAwO1xcbiAgbWFyZ2luOiAwO1xcbiAgbGlzdC1zdHlsZS10eXBlOiBub25lO1xcbn1cXG5cXG4ubWVudSBsaSB7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBtYXJnaW46IDJweCAwO1xcbiAgbGluZS1oZWlnaHQ6IDIwcHg7XFxuICBwYWRkaW5nOiAwIDVweDtcXG4gIGJvcmRlci1yYWRpdXM6IDEwcHg7XFxufVxcblxcbi5tZW51IGxpOmhvdmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWhvdmVyLXNlbGVjdGlvbik7XFxuICBjb2xvcjogd2hpdGU7XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ubG9jYWxzID0ge1xuXHRcIm1lbnVcIjogXCJqVGhpTGM1X0JyVXlsNzF2M3JLblwiLFxuXHRcIm9wZW5cIjogXCJ4RzJHS2xzYzA3akxFYjJhTUM2SFwiXG59O1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5acGRjcWxLNDJPbnRKb3MzZUd3MCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1iZyk7XFxuICBwYWRkaW5nOiAyMHB4IDQwcHg7XFxuICBtYXJnaW46IDQwcHg7XFxuICBtYXgtd2lkdGg6IDUwMHB4O1xcbiAgYm94LXNoYWRvdzogMHB4IDEwcHggMjVweCByZ2JhKDAsIDAsIDAsIDAuNCk7XFxuICBib3JkZXItcmFkaXVzOiAycHg7XFxufVxcblxcbi5acGRjcWxLNDJPbnRKb3MzZUd3MCBwLCAuWnBkY3FsSzQyT250Sm9zM2VHdzAgdWwge1xcbiAgZm9udC1mYW1pbHk6IHNhbnMtc2VyaWY7XFxuICBsaW5lLWhlaWdodDogMS4zcmVtO1xcbn1cXG5cXG4uTXl3ZzFHdzNiS01jOUtkOXFjRU8ge1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICBtYXJnaW46IDAgYXV0bztcXG59XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL0NvbW1vbi9kaWFsb2ctYm94Lm1vZHVsZS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSwyQkFBMkI7RUFDM0Isa0JBQWtCO0VBQ2xCLFlBQVk7RUFDWixnQkFBZ0I7RUFDaEIsNENBQTRDO0VBQzVDLGtCQUFrQjtBQUNwQjs7QUFFQTtFQUNFLHVCQUF1QjtFQUN2QixtQkFBbUI7QUFDckI7O0FBRUE7RUFDRSxjQUFjO0VBQ2QsY0FBYztBQUNoQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIuZGlhbG9nIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWJnKTtcXG4gIHBhZGRpbmc6IDIwcHggNDBweDtcXG4gIG1hcmdpbjogNDBweDtcXG4gIG1heC13aWR0aDogNTAwcHg7XFxuICBib3gtc2hhZG93OiAwcHggMTBweCAyNXB4IHJnYmEoMCwgMCwgMCwgMC40KTtcXG4gIGJvcmRlci1yYWRpdXM6IDJweDtcXG59XFxuXFxuLmRpYWxvZyBwLCAuZGlhbG9nIHVsIHtcXG4gIGZvbnQtZmFtaWx5OiBzYW5zLXNlcmlmO1xcbiAgbGluZS1oZWlnaHQ6IDEuM3JlbTtcXG59XFxuXFxuLmJ1dHRvbiB7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIG1hcmdpbjogMCBhdXRvO1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmxvY2FscyA9IHtcblx0XCJkaWFsb2dcIjogXCJacGRjcWxLNDJPbnRKb3MzZUd3MFwiLFxuXHRcImJ1dHRvblwiOiBcIk15d2cxR3czYktNYzlLZDlxY0VPXCJcbn07XG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLmhvM0N1RkZqWDFWRk5aSmlBeVZzIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG59XFxuXFxuLnU5SjN2NVpySWJ1VklDek5Ca1J3IHtcXG4gIHBhZGRpbmc6IDVweDtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIG9wYWNpdHk6IDAuNTtcXG4gIGNvbG9yOiB2YXIoLS1rZXktY29sb3ItYmFzZSk7XFxufVxcbi51OUozdjVacklidVZJQ3pOQmtSdzpob3ZlciB7XFxuICBvcGFjaXR5OiAxO1xcbn1cXG5cXG4ud21xV2FPeDdYeUtBRGg3S3Y0Uloge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgei1pbmRleDogMTA7XFxuICBib3R0b206IDA7XFxuICBsZWZ0OiA1MCU7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAxMDAlKTtcXG4gIG1heC13aWR0aDogMjUwcHg7XFxuICB3aWR0aDogMTAwJTtcXG5cXG4gIGJvcmRlci1yYWRpdXM6IDRweDtcXG4gIHBhZGRpbmc6IDNweCA1cHg7XFxuXFxuICBjb2xvcjogd2hpdGU7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1lcnJvci1oaWdobGlnaHQpO1xcbiAgZm9udC1zaXplOiA4NSU7XFxuICBmb250LWZhbWlseTogc2Fucy1zZXJpZjtcXG5cXG4gIG9wYWNpdHk6IDAuOTtcXG59XFxuLndtcVdhT3g3WHlLQURoN0t2NFJaOjpiZWZvcmUge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICBjb250ZW50OiAnICc7XFxuICB6LWluZGV4OiAtMTtcXG5cXG4gIGxlZnQ6IDUwJTtcXG4gIHdpZHRoOiAxMHB4O1xcbiAgaGVpZ2h0OiAxMHB4O1xcblxcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tZXJyb3ItaGlnaGxpZ2h0KTtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC03cHgpIHJvdGF0ZSg0NWRlZyk7XFxufVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9Db21tb24vZWRpdGFibGVmaWVsZC5tb2R1bGUuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0VBQ0Usa0JBQWtCO0FBQ3BCOztBQUVBO0VBQ0UsWUFBWTtFQUNaLGVBQWU7RUFDZixZQUFZO0VBQ1osNEJBQTRCO0FBQzlCO0FBQ0E7RUFDRSxVQUFVO0FBQ1o7O0FBRUE7RUFDRSxrQkFBa0I7RUFDbEIsV0FBVztFQUNYLFNBQVM7RUFDVCxTQUFTO0VBQ1QsZ0NBQWdDO0VBQ2hDLGdCQUFnQjtFQUNoQixXQUFXOztFQUVYLGtCQUFrQjtFQUNsQixnQkFBZ0I7O0VBRWhCLFlBQVk7RUFDWix3Q0FBd0M7RUFDeEMsY0FBYztFQUNkLHVCQUF1Qjs7RUFFdkIsWUFBWTtBQUNkO0FBQ0E7RUFDRSxrQkFBa0I7RUFDbEIsY0FBYztFQUNkLFlBQVk7RUFDWixXQUFXOztFQUVYLFNBQVM7RUFDVCxXQUFXO0VBQ1gsWUFBWTs7RUFFWix3Q0FBd0M7RUFDeEMsOENBQThDO0FBQ2hEXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5jb250YWluZXIge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbn1cXG5cXG4uZWRpdCB7XFxuICBwYWRkaW5nOiA1cHg7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBvcGFjaXR5OiAwLjU7XFxuICBjb2xvcjogdmFyKC0ta2V5LWNvbG9yLWJhc2UpO1xcbn1cXG4uZWRpdDpob3ZlciB7XFxuICBvcGFjaXR5OiAxO1xcbn1cXG5cXG4uZXJyb3Ige1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgei1pbmRleDogMTA7XFxuICBib3R0b206IDA7XFxuICBsZWZ0OiA1MCU7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAxMDAlKTtcXG4gIG1heC13aWR0aDogMjUwcHg7XFxuICB3aWR0aDogMTAwJTtcXG5cXG4gIGJvcmRlci1yYWRpdXM6IDRweDtcXG4gIHBhZGRpbmc6IDNweCA1cHg7XFxuXFxuICBjb2xvcjogd2hpdGU7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1lcnJvci1oaWdobGlnaHQpO1xcbiAgZm9udC1zaXplOiA4NSU7XFxuICBmb250LWZhbWlseTogc2Fucy1zZXJpZjtcXG5cXG4gIG9wYWNpdHk6IDAuOTtcXG59XFxuLmVycm9yOjpiZWZvcmUge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICBjb250ZW50OiAnICc7XFxuICB6LWluZGV4OiAtMTtcXG5cXG4gIGxlZnQ6IDUwJTtcXG4gIHdpZHRoOiAxMHB4O1xcbiAgaGVpZ2h0OiAxMHB4O1xcblxcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tZXJyb3ItaGlnaGxpZ2h0KTtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC03cHgpIHJvdGF0ZSg0NWRlZyk7XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ubG9jYWxzID0ge1xuXHRcImNvbnRhaW5lclwiOiBcImhvM0N1RkZqWDFWRk5aSmlBeVZzXCIsXG5cdFwiZWRpdFwiOiBcInU5SjN2NVpySWJ1VklDek5Ca1J3XCIsXG5cdFwiZXJyb3JcIjogXCJ3bXFXYU94N1h5S0FEaDdLdjRSWlwiXG59O1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5PYUpJU2JEMVdDbWIwM2F0NzdFRyB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxufVxcblxcbi5NVU45RGU4ZFV2YlBHSDljRURvUSB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB6LWluZGV4OiAxMDtcXG4gIGJvdHRvbTogMDtcXG4gIGxlZnQ6IDUwJTtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIDEwMCUpO1xcbiAgbWF4LXdpZHRoOiAyNTBweDtcXG4gIHdpZHRoOiAxMDAlO1xcblxcbiAgYm9yZGVyLXJhZGl1czogNHB4O1xcbiAgcGFkZGluZzogM3B4IDVweDtcXG5cXG4gIGNvbG9yOiB3aGl0ZTtcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWVycm9yLWhpZ2hsaWdodCk7XFxuICBmb250LXNpemU6IDg1JTtcXG4gIGZvbnQtZmFtaWx5OiBzYW5zLXNlcmlmO1xcblxcbiAgb3BhY2l0eTogMC45O1xcbn1cXG4uTVVOOURlOGRVdmJQR0g5Y0VEb1E6OmJlZm9yZSB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIGNvbnRlbnQ6ICcgJztcXG4gIHotaW5kZXg6IC0xO1xcblxcbiAgbGVmdDogNTAlO1xcbiAgd2lkdGg6IDEwcHg7XFxuICBoZWlnaHQ6IDEwcHg7XFxuXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1lcnJvci1oaWdobGlnaHQpO1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTdweCkgcm90YXRlKDQ1ZGVnKTtcXG59XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL0NvbW1vbi9pbnB1dC5tb2R1bGUuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0VBQ0Usa0JBQWtCO0FBQ3BCOztBQUVBO0VBQ0Usa0JBQWtCO0VBQ2xCLFdBQVc7RUFDWCxTQUFTO0VBQ1QsU0FBUztFQUNULGdDQUFnQztFQUNoQyxnQkFBZ0I7RUFDaEIsV0FBVzs7RUFFWCxrQkFBa0I7RUFDbEIsZ0JBQWdCOztFQUVoQixZQUFZO0VBQ1osd0NBQXdDO0VBQ3hDLGNBQWM7RUFDZCx1QkFBdUI7O0VBRXZCLFlBQVk7QUFDZDtBQUNBO0VBQ0Usa0JBQWtCO0VBQ2xCLGNBQWM7RUFDZCxZQUFZO0VBQ1osV0FBVzs7RUFFWCxTQUFTO0VBQ1QsV0FBVztFQUNYLFlBQVk7O0VBRVosd0NBQXdDO0VBQ3hDLDhDQUE4QztBQUNoRFwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIud3JhcHBlciB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxufVxcblxcbi5lcnJvciB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB6LWluZGV4OiAxMDtcXG4gIGJvdHRvbTogMDtcXG4gIGxlZnQ6IDUwJTtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIDEwMCUpO1xcbiAgbWF4LXdpZHRoOiAyNTBweDtcXG4gIHdpZHRoOiAxMDAlO1xcblxcbiAgYm9yZGVyLXJhZGl1czogNHB4O1xcbiAgcGFkZGluZzogM3B4IDVweDtcXG5cXG4gIGNvbG9yOiB3aGl0ZTtcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWVycm9yLWhpZ2hsaWdodCk7XFxuICBmb250LXNpemU6IDg1JTtcXG4gIGZvbnQtZmFtaWx5OiBzYW5zLXNlcmlmO1xcblxcbiAgb3BhY2l0eTogMC45O1xcbn1cXG4uZXJyb3I6OmJlZm9yZSB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIGNvbnRlbnQ6ICcgJztcXG4gIHotaW5kZXg6IC0xO1xcblxcbiAgbGVmdDogNTAlO1xcbiAgd2lkdGg6IDEwcHg7XFxuICBoZWlnaHQ6IDEwcHg7XFxuXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1lcnJvci1oaWdobGlnaHQpO1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTdweCkgcm90YXRlKDQ1ZGVnKTtcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5sb2NhbHMgPSB7XG5cdFwid3JhcHBlclwiOiBcIk9hSklTYkQxV0NtYjAzYXQ3N0VHXCIsXG5cdFwiZXJyb3JcIjogXCJNVU45RGU4ZFV2YlBHSDljRURvUVwiXG59O1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5KMlI2N0FRZUNLX2FDMURLRkNNSiB7XFxuICBtYXJnaW46IDRweDtcXG59XCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL0NvbW1vbi9saW5rLm1vZHVsZS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSxXQUFXO0FBQ2JcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLmljb24ge1xcbiAgbWFyZ2luOiA0cHg7XFxufVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ubG9jYWxzID0ge1xuXHRcImljb25cIjogXCJKMlI2N0FRZUNLX2FDMURLRkNNSlwiXG59O1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5GTWtBU3p3dF9vTXNjWmRPYnBEUSB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxufVxcbi5UTkY2YVJNQlBBTnZaaWZCMjdaSyB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICBhbmltYXRpb246IEdHQ3M3aWlCaXdEQ25UODBjeVRoIDFzIGxpbmVhciBpbmZpbml0ZTtcXG59XFxuXFxuQGtleWZyYW1lcyBHR0NzN2lpQml3RENuVDgwY3lUaCB7XFxuICBmcm9tIHsgdHJhbnNmb3JtOiByb3RhdGUoMGRlZyk7IH1cXG4gIHRvIHsgdHJhbnNmb3JtOiByb3RhdGUoMzYwZGVnKTsgfVxcbn1cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvQ29tbW9uL3NwaW5uZXIubW9kdWxlLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLHFCQUFxQjtFQUNyQixrQkFBa0I7QUFDcEI7QUFDQTtFQUNFLHFCQUFxQjtFQUNyQixrREFBa0M7QUFDcEM7O0FBRUE7RUFDRSxPQUFPLHVCQUF1QixFQUFFO0VBQ2hDLEtBQUsseUJBQXlCLEVBQUU7QUFDbENcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLnNwaW5uZXIge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbn1cXG4uaWNvbiB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICBhbmltYXRpb246IHNwaW4gMXMgbGluZWFyIGluZmluaXRlO1xcbn1cXG5cXG5Aa2V5ZnJhbWVzIHNwaW4ge1xcbiAgZnJvbSB7IHRyYW5zZm9ybTogcm90YXRlKDBkZWcpOyB9XFxuICB0byB7IHRyYW5zZm9ybTogcm90YXRlKDM2MGRlZyk7IH1cXG59XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5sb2NhbHMgPSB7XG5cdFwic3Bpbm5lclwiOiBcIkZNa0FTend0X29Nc2NaZE9icERRXCIsXG5cdFwiaWNvblwiOiBcIlRORjZhUk1CUEFOdlppZkIyN1pLXCIsXG5cdFwic3BpblwiOiBcIkdHQ3M3aWlCaXdEQ25UODBjeVRoXCJcbn07XG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLnNxOWk3aFFlVGVlS3Vhcm1POG9BIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIGZvbnQtc2l6ZTogNzAlO1xcbiAgYmFja2dyb3VuZDogcmdiYSgwLCAwLCAwLCAwLjUpO1xcbiAgY29sb3I6IHdoaXRlO1xcbiAgcGFkZGluZzogNHB4O1xcbiAgYm9yZGVyLXJhZGl1czogNHB4O1xcbn1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvQ29tbW9uL3RpcC5tb2R1bGUuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0VBQ0UscUJBQXFCO0VBQ3JCLGNBQWM7RUFDZCw4QkFBOEI7RUFDOUIsWUFBWTtFQUNaLFlBQVk7RUFDWixrQkFBa0I7QUFDcEJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLnRpcCB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICBmb250LXNpemU6IDcwJTtcXG4gIGJhY2tncm91bmQ6IHJnYmEoMCwgMCwgMCwgMC41KTtcXG4gIGNvbG9yOiB3aGl0ZTtcXG4gIHBhZGRpbmc6IDRweDtcXG4gIGJvcmRlci1yYWRpdXM6IDRweDtcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5sb2NhbHMgPSB7XG5cdFwidGlwXCI6IFwic3E5aTdoUWVUZWVLdWFybU84b0FcIlxufTtcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIuUTV2ZWxuM2wzbGFWa3VOUHM1ZFEge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbn1cXG5cXG4uUTV2ZWxuM2wzbGFWa3VOUHM1ZFEgcHJlIHtcXG4gIHdoaXRlLXNwYWNlOiBwcmU7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1jb2RlLWJnKTtcXG4gIGNvbG9yOiB2YXIoLS1rZXktY29sb3ItYmFzZSk7XFxuICBwYWRkaW5nOiAxMHB4O1xcbiAgbWF4LWhlaWdodDogMzIwcHg7XFxuICBvdmVyZmxvdzogc2Nyb2xsO1xcbn1cXG5cXG4uZHF6Z0J3SjFScTBYZ01xZUFLZTcge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgdG9wOiAxNXB4O1xcbiAgcmlnaHQ6IDE1cHg7XFxuICBwYWRkaW5nOiA0cHggN3B4O1xcbiAgY29sb3I6IHZhcigtLWtleS1jb2xvci1iYXNlKTtcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWtleS1iZy1iYXNlKTtcXG4gIGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLWtleS1jb2xvci1iYXNlKTtcXG4gIGJvcmRlci1yYWRpdXM6IDNweDtcXG59XFxuLmRxemdCd0oxUnEwWGdNcWVBS2U3OmhvdmVyIHtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXNlbGVjdGlvbik7XFxuICBib3JkZXI6IHZhcigtLXNlbGVjdGlvbik7XFxuICBjb2xvcjogd2hpdGU7XFxufVxcblxcbi5ZVjJsS0E5aGJKcFA0VnM0dWR3OCB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDVweDtcXG4gIHJpZ2h0OiAwcHg7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1zZWxlY3Rpb24pO1xcbiAgY29sb3I6IHdoaXRlO1xcbiAgcGFkZGluZzogMTBweDtcXG4gIGJvcmRlci1yYWRpdXM6IDJweDtcXG4gIGN1cnNvcjogbm9uZTtcXG59XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL0RpYWxvZ3MvdW5leHBlY3RlZC1lcnJvci5tb2R1bGUuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0VBQ0Usa0JBQWtCO0FBQ3BCOztBQUVBO0VBQ0UsZ0JBQWdCO0VBQ2hCLGdDQUFnQztFQUNoQyw0QkFBNEI7RUFDNUIsYUFBYTtFQUNiLGlCQUFpQjtFQUNqQixnQkFBZ0I7QUFDbEI7O0FBRUE7RUFDRSxrQkFBa0I7RUFDbEIsU0FBUztFQUNULFdBQVc7RUFDWCxnQkFBZ0I7RUFDaEIsNEJBQTRCO0VBQzVCLG9DQUFvQztFQUNwQyx1Q0FBdUM7RUFDdkMsa0JBQWtCO0FBQ3BCO0FBQ0E7RUFDRSxlQUFlO0VBQ2Ysa0NBQWtDO0VBQ2xDLHdCQUF3QjtFQUN4QixZQUFZO0FBQ2Q7O0FBRUE7RUFDRSxrQkFBa0I7RUFDbEIsUUFBUTtFQUNSLFVBQVU7RUFDVixrQ0FBa0M7RUFDbEMsWUFBWTtFQUNaLGFBQWE7RUFDYixrQkFBa0I7RUFDbEIsWUFBWTtBQUNkXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5zdGFja1RyYWNlIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG59XFxuXFxuLnN0YWNrVHJhY2UgcHJlIHtcXG4gIHdoaXRlLXNwYWNlOiBwcmU7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1jb2RlLWJnKTtcXG4gIGNvbG9yOiB2YXIoLS1rZXktY29sb3ItYmFzZSk7XFxuICBwYWRkaW5nOiAxMHB4O1xcbiAgbWF4LWhlaWdodDogMzIwcHg7XFxuICBvdmVyZmxvdzogc2Nyb2xsO1xcbn1cXG5cXG4uYnV0dG9uIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogMTVweDtcXG4gIHJpZ2h0OiAxNXB4O1xcbiAgcGFkZGluZzogNHB4IDdweDtcXG4gIGNvbG9yOiB2YXIoLS1rZXktY29sb3ItYmFzZSk7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1rZXktYmctYmFzZSk7XFxuICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1rZXktY29sb3ItYmFzZSk7XFxuICBib3JkZXItcmFkaXVzOiAzcHg7XFxufVxcbi5idXR0b246aG92ZXIge1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tc2VsZWN0aW9uKTtcXG4gIGJvcmRlcjogdmFyKC0tc2VsZWN0aW9uKTtcXG4gIGNvbG9yOiB3aGl0ZTtcXG59XFxuXFxuLmNvcHlNZXNzYWdlIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogNXB4O1xcbiAgcmlnaHQ6IDBweDtcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXNlbGVjdGlvbik7XFxuICBjb2xvcjogd2hpdGU7XFxuICBwYWRkaW5nOiAxMHB4O1xcbiAgYm9yZGVyLXJhZGl1czogMnB4O1xcbiAgY3Vyc29yOiBub25lO1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmxvY2FscyA9IHtcblx0XCJzdGFja1RyYWNlXCI6IFwiUTV2ZWxuM2wzbGFWa3VOUHM1ZFFcIixcblx0XCJidXR0b25cIjogXCJkcXpnQndKMVJxMFhnTXFlQUtlN1wiLFxuXHRcImNvcHlNZXNzYWdlXCI6IFwiWVYybEtBOWhiSnBQNFZzNHVkdzhcIlxufTtcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIueENPT3N2eEw1cVEza1I4cmk5MUEge1xcbiAgYm94LXNoYWRvdzogMCA0cHggMTBweCAwcHggcmdiYSgwLCAwLCAwLCAwLjUpO1xcbn1cXG5cXG4udTR1VzlVMkUwRGZiVU05dlA5cGYge1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgcGFkZGluZzogMDtcXG4gIG1hcmdpbjogMDtcXG59XFxuXFxuLnU0dVc5VTJFMERmYlVNOXZQOXBmIGxpIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIGZvbnQtZmFtaWx5OiBtb25vc3BhY2U7XFxuICBmb250LXNpemU6IDEyMCU7XFxuICBtYXJnaW46IDRweCAycHg7XFxuICBwYWRkaW5nOiA0cHggNHB4O1xcbiAgYm9yZGVyLXJhZGl1czogMnB4O1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcblxcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAuNSk7XFxuICBvcGFjaXR5OiAwLjU7XFxuICBjb2xvcjogd2hpdGU7XFxufVxcblxcbi51NHVXOVUyRTBEZmJVTTl2UDlwZiBsaS5ZY0hTdW4zUExvOGRDYjlxSVp0YyB7XFxuICBvcGFjaXR5OiAxO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tc2VsZWN0aW9uKTtcXG4gIGNvbG9yOiB3aGl0ZTtcXG59XFxuXFxuLnU0dVc5VTJFMERmYlVNOXZQOXBmIGxpOmhvdmVyIHtcXG4gIG9wYWNpdHk6IDE7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1ob3Zlci1zZWxlY3Rpb24pO1xcbn1cXG5cXG4uZDNoTUVEcEVrSDhIN1lMR19Oakkge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbn1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvRW5oYW5jZWRQaWNrZXJzL0tleWNvZGUvc3R5bGVzLm1vZHVsZS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSw2Q0FBNkM7QUFDL0M7O0FBRUE7RUFDRSxrQkFBa0I7RUFDbEIsVUFBVTtFQUNWLFNBQVM7QUFDWDs7QUFFQTtFQUNFLHFCQUFxQjtFQUNyQixzQkFBc0I7RUFDdEIsZUFBZTtFQUNmLGVBQWU7RUFDZixnQkFBZ0I7RUFDaEIsa0JBQWtCO0VBQ2xCLGVBQWU7O0VBRWYsbUNBQW1DO0VBQ25DLFlBQVk7RUFDWixZQUFZO0FBQ2Q7O0FBRUE7RUFDRSxVQUFVO0VBQ1Ysa0NBQWtDO0VBQ2xDLFlBQVk7QUFDZDs7QUFFQTtFQUNFLFVBQVU7RUFDVix3Q0FBd0M7QUFDMUM7O0FBRUE7RUFDRSxXQUFXO0VBQ1gsc0JBQXNCO0VBQ3RCLGtCQUFrQjtBQUNwQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIucHJldmlld0tleWNvZGUge1xcbiAgYm94LXNoYWRvdzogMCA0cHggMTBweCAwcHggcmdiYSgwLCAwLCAwLCAwLjUpO1xcbn1cXG5cXG4ubW9kaWZpZXJzIHtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIHBhZGRpbmc6IDA7XFxuICBtYXJnaW46IDA7XFxufVxcblxcbi5tb2RpZmllcnMgbGkge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgZm9udC1mYW1pbHk6IG1vbm9zcGFjZTtcXG4gIGZvbnQtc2l6ZTogMTIwJTtcXG4gIG1hcmdpbjogNHB4IDJweDtcXG4gIHBhZGRpbmc6IDRweCA0cHg7XFxuICBib3JkZXItcmFkaXVzOiAycHg7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIC41KTtcXG4gIG9wYWNpdHk6IDAuNTtcXG4gIGNvbG9yOiB3aGl0ZTtcXG59XFxuXFxuLm1vZGlmaWVycyBsaS5zZWxlY3RlZCB7XFxuICBvcGFjaXR5OiAxO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tc2VsZWN0aW9uKTtcXG4gIGNvbG9yOiB3aGl0ZTtcXG59XFxuXFxuLm1vZGlmaWVycyBsaTpob3ZlciB7XFxuICBvcGFjaXR5OiAxO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0taG92ZXItc2VsZWN0aW9uKTtcXG59XFxuXFxuLnF1aWNrQ2xvc2VUaXAge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmxvY2FscyA9IHtcblx0XCJwcmV2aWV3S2V5Y29kZVwiOiBcInhDT09zdnhMNXFRM2tSOHJpOTFBXCIsXG5cdFwibW9kaWZpZXJzXCI6IFwidTR1VzlVMkUwRGZiVU05dlA5cGZcIixcblx0XCJzZWxlY3RlZFwiOiBcIlljSFN1bjNQTG84ZENiOXFJWnRjXCIsXG5cdFwicXVpY2tDbG9zZVRpcFwiOiBcImQzaE1FRHBFa0g4SDdZTEdfTmpJXCJcbn07XG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLlMzdDYwQ0sxSkNST0ZJclJsbTRqIFtyZWFkb25seV0ge1xcbiAgY3Vyc29yOiBub3QtYWxsb3dlZDtcXG4gIGNvbG9yOiBncmF5O1xcbiAgb3V0bGluZTogZ3JheTtcXG59XFxuXFxuaW5wdXQuUzN0NjBDSzFKQ1JPRklyUmxtNGpbdHlwZT1cXFwidGV4dFxcXCJdLFxcbmlucHV0LlMzdDYwQ0sxSkNST0ZJclJsbTRqW3R5cGU9XFxcIm51bWJlclxcXCJdLFxcbnNlbGVjdC5TM3Q2MENLMUpDUk9GSXJSbG00aiB7XFxuICB3aWR0aDogMTAwJTtcXG59XFxuXFxub2wuTWVkRzdTUEcyZ2UyaDdqMnlxckoge1xcbiAgbGlzdC1zdHlsZS10eXBlOiBub25lO1xcbiAgbWFyZ2luLXRvcDogMDtcXG4gIHBhZGRpbmc6IDA7XFxufVxcbi5WNTBCZWt0NnRkOXlRT1NpREdkeCB7XFxuICBsaXN0LXN0eWxlLXR5cGU6IG5vbmU7XFxuICBtYXJnaW46IDA7XFxuICBwYWRkaW5nOiAwO1xcbn1cXG4uVjUwQmVrdDZ0ZDl5UU9TaURHZHggbGkge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgbGluZS1oZWlnaHQ6IDJyZW07XFxufVxcbm9sLlFOZzN2Nl9lSm9LN19xVjBfeTluIHtcXG4gIG1hcmdpbjogMDtcXG59XFxub2wuUU5nM3Y2X2VKb0s3X3FWMF95OW4gbGkge1xcbiAgbGluZS1oZWlnaHQ6IDJyZW07XFxufVxcbm9sLnU2NUMzVWppN2Nvdk1Vbjk5NmRSIHtcXG4gIGxpc3Qtc3R5bGUtdHlwZTogbm9uZTtcXG4gIHBhZGRpbmc6IDA7XFxufVxcbi54cDV1NFVvNFgyZnh4WDlLd3dYdSB7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBtYXJnaW46IDJweDtcXG4gIHBhZGRpbmc6IDVweDtcXG4gIGZvbnQtZmFtaWx5OiBtb25vc3BhY2U7XFxuICBib3JkZXItcmFkaXVzOiAxcmVtO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0ta2V5LWJnLWJhc2UpO1xcbn1cXG4ueHA1dTRVbzRYMmZ4eFg5S3d3WHU6aG92ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0taG92ZXItc2VsZWN0aW9uKTtcXG4gIGNvbG9yOiB3aGl0ZTtcXG59XFxuXFxuLmdwRkdQMDBMQ3dsR2pLNnlyR1d3IHtcXG4gIHZlcnRpY2FsLWFsaWduOiB0ZXh0LWJvdHRvbTtcXG4gIG1hcmdpbjogMCAycHg7XFxufVxcbi5ncEZHUDAwTEN3bEdqSzZ5ckdXdzpob3ZlciB7XFxuICBjb2xvcjogYmxhY2s7XFxufVxcblxcbi5nc0F6a0t4bmZ6VGNwNUFwd21XUyB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC13cmFwOiB3cmFwO1xcbiAgZ2FwOiAxMHB4O1xcbiAgbGlzdC1zdHlsZS10eXBlOiBub25lO1xcbiAgcGFkZGluZzogMDtcXG4gIG1hcmdpbjogMDtcXG59XFxuXFxuLyogQ29waWVkIGZyb20gTWFjcm9FZGl0b3IgOiggKi9cXG4uS3JjV0RZZlJWUmZ2Umhwc0JGeHMge1xcbiAgdmlzaWJpbGl0eTogaGlkZGVuO1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgdG9wOiAwcHg7XFxuICByaWdodDogMHB4O1xcbiAgZm9udC1zaXplOiA4MCU7XFxuXFxuICBjb2xvcjogdmFyKC0ta2V5LWNvbG9yLWhvdmVyKTtcXG59XFxuLktyY1dEWWZSVlJmdlJocHNCRnhzID4gKiB7XFxuICBtYXJnaW46IDJweDtcXG4gIG9wYWNpdHk6IDAuNTtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuLmdzQXprS3huZnpUY3A1QXB3bVdTIGxpIDpob3ZlciAuS3JjV0RZZlJWUmZ2Umhwc0JGeHMge1xcbiAgdmlzaWJpbGl0eTogdmlzaWJsZTtcXG4gIHotaW5kZXg6IDEwO1xcbn1cXG5cXG4uS3JjV0RZZlJWUmZ2Umhwc0JGeHMgOmhvdmVyIHtcXG4gIG9wYWNpdHk6IDE7XFxufVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9LZXlib2FyZC9CZWhhdmlvcnMvUHJvcGVydHlWYWx1ZS9zdHlsZXMubW9kdWxlLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLG1CQUFtQjtFQUNuQixXQUFXO0VBQ1gsYUFBYTtBQUNmOztBQUVBOzs7RUFHRSxXQUFXO0FBQ2I7O0FBRUE7RUFDRSxxQkFBcUI7RUFDckIsYUFBYTtFQUNiLFVBQVU7QUFDWjtBQUNBO0VBQ0UscUJBQXFCO0VBQ3JCLFNBQVM7RUFDVCxVQUFVO0FBQ1o7QUFDQTtFQUNFLHFCQUFxQjtFQUNyQixpQkFBaUI7QUFDbkI7QUFDQTtFQUNFLFNBQVM7QUFDWDtBQUNBO0VBQ0UsaUJBQWlCO0FBQ25CO0FBQ0E7RUFDRSxxQkFBcUI7RUFDckIsVUFBVTtBQUNaO0FBQ0E7RUFDRSxlQUFlO0VBQ2YsV0FBVztFQUNYLFlBQVk7RUFDWixzQkFBc0I7RUFDdEIsbUJBQW1CO0VBQ25CLG9DQUFvQztBQUN0QztBQUNBO0VBQ0Usd0NBQXdDO0VBQ3hDLFlBQVk7QUFDZDs7QUFFQTtFQUNFLDJCQUEyQjtFQUMzQixhQUFhO0FBQ2Y7QUFDQTtFQUNFLFlBQVk7QUFDZDs7QUFFQTtFQUNFLGFBQWE7RUFDYixlQUFlO0VBQ2YsU0FBUztFQUNULHFCQUFxQjtFQUNyQixVQUFVO0VBQ1YsU0FBUztBQUNYOztBQUVBLCtCQUErQjtBQUMvQjtFQUNFLGtCQUFrQjtFQUNsQixrQkFBa0I7RUFDbEIsUUFBUTtFQUNSLFVBQVU7RUFDVixjQUFjOztFQUVkLDZCQUE2QjtBQUMvQjtBQUNBO0VBQ0UsV0FBVztFQUNYLFlBQVk7RUFDWixlQUFlO0FBQ2pCO0FBQ0E7RUFDRSxtQkFBbUI7RUFDbkIsV0FBVztBQUNiOztBQUVBO0VBQ0UsVUFBVTtBQUNaXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5wcm9wZXJ0eVZhbHVlIFtyZWFkb25seV0ge1xcbiAgY3Vyc29yOiBub3QtYWxsb3dlZDtcXG4gIGNvbG9yOiBncmF5O1xcbiAgb3V0bGluZTogZ3JheTtcXG59XFxuXFxuaW5wdXQucHJvcGVydHlWYWx1ZVt0eXBlPVxcXCJ0ZXh0XFxcIl0sXFxuaW5wdXQucHJvcGVydHlWYWx1ZVt0eXBlPVxcXCJudW1iZXJcXFwiXSxcXG5zZWxlY3QucHJvcGVydHlWYWx1ZSB7XFxuICB3aWR0aDogMTAwJTtcXG59XFxuXFxub2wucHJvcGVydHlNdWx0aVNlbGVjdCB7XFxuICBsaXN0LXN0eWxlLXR5cGU6IG5vbmU7XFxuICBtYXJnaW4tdG9wOiAwO1xcbiAgcGFkZGluZzogMDtcXG59XFxuLnByb3BlcnR5TXVsdGlTZWxlY3RDaGlwcyB7XFxuICBsaXN0LXN0eWxlLXR5cGU6IG5vbmU7XFxuICBtYXJnaW46IDA7XFxuICBwYWRkaW5nOiAwO1xcbn1cXG4ucHJvcGVydHlNdWx0aVNlbGVjdENoaXBzIGxpIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIGxpbmUtaGVpZ2h0OiAycmVtO1xcbn1cXG5vbC5wcm9wZXJ0eVBoYW5kbGVTZWxlY3Qge1xcbiAgbWFyZ2luOiAwO1xcbn1cXG5vbC5wcm9wZXJ0eVBoYW5kbGVTZWxlY3QgbGkge1xcbiAgbGluZS1oZWlnaHQ6IDJyZW07XFxufVxcbm9sLnByb3BlcnR5UGhhbmRsZVNpbmdsZXRvbiB7XFxuICBsaXN0LXN0eWxlLXR5cGU6IG5vbmU7XFxuICBwYWRkaW5nOiAwO1xcbn1cXG4uYmVoYXZpb3JCaW5kIHtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIG1hcmdpbjogMnB4O1xcbiAgcGFkZGluZzogNXB4O1xcbiAgZm9udC1mYW1pbHk6IG1vbm9zcGFjZTtcXG4gIGJvcmRlci1yYWRpdXM6IDFyZW07XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1rZXktYmctYmFzZSk7XFxufVxcbi5iZWhhdmlvckJpbmQ6aG92ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0taG92ZXItc2VsZWN0aW9uKTtcXG4gIGNvbG9yOiB3aGl0ZTtcXG59XFxuXFxuLnBoYW5kbGVSZW1vdmUge1xcbiAgdmVydGljYWwtYWxpZ246IHRleHQtYm90dG9tO1xcbiAgbWFyZ2luOiAwIDJweDtcXG59XFxuLnBoYW5kbGVSZW1vdmU6aG92ZXIge1xcbiAgY29sb3I6IGJsYWNrO1xcbn1cXG5cXG4ucHJvcGVydHlCaW5kaW5nc1ZhbHVlIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LXdyYXA6IHdyYXA7XFxuICBnYXA6IDEwcHg7XFxuICBsaXN0LXN0eWxlLXR5cGU6IG5vbmU7XFxuICBwYWRkaW5nOiAwO1xcbiAgbWFyZ2luOiAwO1xcbn1cXG5cXG4vKiBDb3BpZWQgZnJvbSBNYWNyb0VkaXRvciA6KCAqL1xcbi5hY3Rpb25zIHtcXG4gIHZpc2liaWxpdHk6IGhpZGRlbjtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogMHB4O1xcbiAgcmlnaHQ6IDBweDtcXG4gIGZvbnQtc2l6ZTogODAlO1xcblxcbiAgY29sb3I6IHZhcigtLWtleS1jb2xvci1ob3Zlcik7XFxufVxcbi5hY3Rpb25zID4gKiB7XFxuICBtYXJnaW46IDJweDtcXG4gIG9wYWNpdHk6IDAuNTtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuLnByb3BlcnR5QmluZGluZ3NWYWx1ZSBsaSA6aG92ZXIgLmFjdGlvbnMge1xcbiAgdmlzaWJpbGl0eTogdmlzaWJsZTtcXG4gIHotaW5kZXg6IDEwO1xcbn1cXG5cXG4uYWN0aW9ucyA6aG92ZXIge1xcbiAgb3BhY2l0eTogMTtcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5sb2NhbHMgPSB7XG5cdFwicHJvcGVydHlWYWx1ZVwiOiBcIlMzdDYwQ0sxSkNST0ZJclJsbTRqXCIsXG5cdFwicHJvcGVydHlNdWx0aVNlbGVjdFwiOiBcIk1lZEc3U1BHMmdlMmg3ajJ5cXJKXCIsXG5cdFwicHJvcGVydHlNdWx0aVNlbGVjdENoaXBzXCI6IFwiVjUwQmVrdDZ0ZDl5UU9TaURHZHhcIixcblx0XCJwcm9wZXJ0eVBoYW5kbGVTZWxlY3RcIjogXCJRTmczdjZfZUpvSzdfcVYwX3k5blwiLFxuXHRcInByb3BlcnR5UGhhbmRsZVNpbmdsZXRvblwiOiBcInU2NUMzVWppN2Nvdk1Vbjk5NmRSXCIsXG5cdFwiYmVoYXZpb3JCaW5kXCI6IFwieHA1dTRVbzRYMmZ4eFg5S3d3WHVcIixcblx0XCJwaGFuZGxlUmVtb3ZlXCI6IFwiZ3BGR1AwMExDd2xHaks2eXJHV3dcIixcblx0XCJwcm9wZXJ0eUJpbmRpbmdzVmFsdWVcIjogXCJnc0F6a0t4bmZ6VGNwNUFwd21XU1wiLFxuXHRcImFjdGlvbnNcIjogXCJLcmNXRFlmUlZSZnZSaHBzQkZ4c1wiXG59O1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5rY2o4ODFibkxEcGg2MkVjS2VsaiB7XFxuICBwYWRkaW5nLWJvdHRvbTogNjBweDtcXG59XFxuXFxuLkdldU14UXRCdlpZcjBuT1VSREhkIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICB3aWR0aDogMTkwcHg7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgcGFkZGluZzogMTBweDtcXG4gIGdhcDogMTBweDtcXG4gIHBvc2l0aW9uOiBmaXhlZDtcXG59XFxuXFxuLk5xbEhHMU1LQmlPVVVGQWVkM0NNIHtcXG4gIG1heC13aWR0aDogNzAwcHg7XFxuICBtYXJnaW46IDAgYXV0bztcXG4gIHBhZGRpbmctYm90dG9tOiA2MHB4O1xcbn1cXG5cXG4uTnFsSEcxTUtCaU9VVUZBZWQzQ00gdGFibGUge1xcbiAgYm9yZGVyLXNwYWNpbmc6IDA7XFxufVxcbi5OcWxIRzFNS0JpT1VVRkFlZDNDTSB0YWJsZSB0aGVhZCB7XFxuICB0ZXh0LWFsaWduOiBsZWZ0O1xcbn1cXG5cXG4uTnFsSEcxTUtCaU9VVUZBZWQzQ00gdGFibGUgdGJvZHkgdHIgdGQge1xcbiAgcGFkZGluZzogMTBweDtcXG4gIG1hcmdpbjogMDtcXG59XFxuLk5xbEhHMU1LQmlPVVVGQWVkM0NNIHRhYmxlIHRib2R5IHRyOm50aC1jaGlsZChldmVuKSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1rZXktYmctYmFzZSk7XFxufVxcblxcbi5RM19ybW8zWGlFVmc4cWZYZ0tYXyB7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBwYWRkaW5nOiA1cHg7XFxuICBvcGFjaXR5OiAwLjY7XFxufVxcbi5RM19ybW8zWGlFVmc4cWZYZ0tYXzpob3ZlciB7XFxuICBvcGFjaXR5OiAxO1xcbn1cXG5cXG50YWJsZS5jek9LeF90X0VERjQ0cGlsenl6QSB7IG1heC1oZWlnaHQ6IDgwdmg7IH1cXG50YWJsZS5jek9LeF90X0VERjQ0cGlsenl6QSB0aCB7IHRleHQtYWxpZ246IGxlZnQgfVxcbnRhYmxlLmN6T0t4X3RfRURGNDRwaWx6eXpBIGlucHV0IHsgZm9udC1mYW1pbHk6IG1vbm9zcGFjZSB9XFxudGFibGUuY3pPS3hfdF9FREY0NHBpbHp5ekEgdGQge1xcbiAgcGFkZGluZzogNHB4O1xcbiAgdmVydGljYWwtYWxpZ246IHRvcDtcXG59XFxudGFibGUuY3pPS3hfdF9FREY0NHBpbHp5ekEgLnM4cldOaTZlOEJaN3lRdWJmRHdzIHtcXG4gIGZvbnQtZmFtaWx5OiBtb25vc3BhY2U7XFxufVxcbi5CdXg2R3hqcmVHWlprY1hxeDZrdiB7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIGZvbnQtc3R5bGU6IGl0YWxpYztcXG59XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL0tleWJvYXJkL0JlaGF2aW9ycy9zdHlsZXMubW9kdWxlLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLG9CQUFvQjtBQUN0Qjs7QUFFQTtFQUNFLGFBQWE7RUFDYixZQUFZO0VBQ1osc0JBQXNCO0VBQ3RCLGFBQWE7RUFDYixTQUFTO0VBQ1QsZUFBZTtBQUNqQjs7QUFFQTtFQUNFLGdCQUFnQjtFQUNoQixjQUFjO0VBQ2Qsb0JBQW9CO0FBQ3RCOztBQUVBO0VBQ0UsaUJBQWlCO0FBQ25CO0FBQ0E7RUFDRSxnQkFBZ0I7QUFDbEI7O0FBRUE7RUFDRSxhQUFhO0VBQ2IsU0FBUztBQUNYO0FBQ0E7RUFDRSxvQ0FBb0M7QUFDdEM7O0FBRUE7RUFDRSxlQUFlO0VBQ2YsWUFBWTtFQUNaLFlBQVk7QUFDZDtBQUNBO0VBQ0UsVUFBVTtBQUNaOztBQUVBLDZCQUFtQixnQkFBZ0IsRUFBRTtBQUNyQyxnQ0FBc0IsaUJBQWlCO0FBQ3ZDLG1DQUF5Qix1QkFBdUI7QUFDaEQ7RUFDRSxZQUFZO0VBQ1osbUJBQW1CO0FBQ3JCO0FBQ0E7RUFDRSxzQkFBc0I7QUFDeEI7QUFDQTtFQUNFLGNBQWM7RUFDZCxrQkFBa0I7QUFDcEJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLm1haW4ge1xcbiAgcGFkZGluZy1ib3R0b206IDYwcHg7XFxufVxcblxcbi5zaWRlYmFyIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICB3aWR0aDogMTkwcHg7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgcGFkZGluZzogMTBweDtcXG4gIGdhcDogMTBweDtcXG4gIHBvc2l0aW9uOiBmaXhlZDtcXG59XFxuXFxuLnBhbmVsIHtcXG4gIG1heC13aWR0aDogNzAwcHg7XFxuICBtYXJnaW46IDAgYXV0bztcXG4gIHBhZGRpbmctYm90dG9tOiA2MHB4O1xcbn1cXG5cXG4ucGFuZWwgdGFibGUge1xcbiAgYm9yZGVyLXNwYWNpbmc6IDA7XFxufVxcbi5wYW5lbCB0YWJsZSB0aGVhZCB7XFxuICB0ZXh0LWFsaWduOiBsZWZ0O1xcbn1cXG5cXG4ucGFuZWwgdGFibGUgdGJvZHkgdHIgdGQge1xcbiAgcGFkZGluZzogMTBweDtcXG4gIG1hcmdpbjogMDtcXG59XFxuLnBhbmVsIHRhYmxlIHRib2R5IHRyOm50aC1jaGlsZChldmVuKSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1rZXktYmctYmFzZSk7XFxufVxcblxcbi5hY3Rpb24ge1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgcGFkZGluZzogNXB4O1xcbiAgb3BhY2l0eTogMC42O1xcbn1cXG4uYWN0aW9uOmhvdmVyIHtcXG4gIG9wYWNpdHk6IDE7XFxufVxcblxcbnRhYmxlLmVkaXRvckZvcm0geyBtYXgtaGVpZ2h0OiA4MHZoOyB9XFxudGFibGUuZWRpdG9yRm9ybSB0aCB7IHRleHQtYWxpZ246IGxlZnQgfVxcbnRhYmxlLmVkaXRvckZvcm0gaW5wdXQgeyBmb250LWZhbWlseTogbW9ub3NwYWNlIH1cXG50YWJsZS5lZGl0b3JGb3JtIHRkIHtcXG4gIHBhZGRpbmc6IDRweDtcXG4gIHZlcnRpY2FsLWFsaWduOiB0b3A7XFxufVxcbnRhYmxlLmVkaXRvckZvcm0gLnByb3BlcnR5TmFtZSB7XFxuICBmb250LWZhbWlseTogbW9ub3NwYWNlO1xcbn1cXG4ucHJvcGVydHlEZXByZWNhdGlvbiB7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIGZvbnQtc3R5bGU6IGl0YWxpYztcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5sb2NhbHMgPSB7XG5cdFwibWFpblwiOiBcImtjajg4MWJuTERwaDYyRWNLZWxqXCIsXG5cdFwic2lkZWJhclwiOiBcIkdldU14UXRCdlpZcjBuT1VSREhkXCIsXG5cdFwicGFuZWxcIjogXCJOcWxIRzFNS0JpT1VVRkFlZDNDTVwiLFxuXHRcImFjdGlvblwiOiBcIlEzX3JtbzNYaUVWZzhxZlhnS1hfXCIsXG5cdFwiZWRpdG9yRm9ybVwiOiBcImN6T0t4X3RfRURGNDRwaWx6eXpBXCIsXG5cdFwicHJvcGVydHlOYW1lXCI6IFwiczhyV05pNmU4Qlo3eVF1YmZEd3NcIixcblx0XCJwcm9wZXJ0eURlcHJlY2F0aW9uXCI6IFwiQnV4Nkd4anJlR1paa2NYcXg2a3ZcIlxufTtcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIucHdYYkdPUnNZS3F5T1BCbTlfZFcge1xcbiAgcGFkZGluZy1ib3R0b206IDYwcHg7XFxufVxcblxcbi5RZ0ZEWE55YktEX1hONjZNX1dwSiB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgd2lkdGg6IDE5MHB4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIHBhZGRpbmc6IDEwcHg7XFxuICBnYXA6IDEwcHg7XFxuICBwb3NpdGlvbjogZml4ZWQ7XFxufVxcblxcbi5HeTBLWkdDZ09lVm1pbkFmZ2dGUSB7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1rZXktYmctYmFzZSk7XFxufVxcbi5HeTBLWkdDZ09lVm1pbkFmZ2dGUTpob3ZlciB7XFxuICBib3JkZXI6IDRweCBzb2xpZCB2YXIoLS1zZWxlY3Rpb24pO1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG59XFxuXFxuLkxkOWNWZHRwU19EcGJFaWZ5WDlZIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXNlbGVjdGlvbik7XFxufVxcbi5MZDljVmR0cFNfRHBiRWlmeVg5WTpob3ZlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1ob3Zlci1zZWxlY3Rpb24pO1xcbn1cXG5cXG4ubXFwSjd1SEFNS3h2T1JvT0lQRksge1xcbiAgbWF4LXdpZHRoOiA0NTBweDtcXG4gIG1hcmdpbjogMCBhdXRvO1xcbiAgcGFkZGluZy1ib3R0b206IDYwcHg7XFxufVxcblxcbi5CVnVjd3k0QVpDeWw3R3lpdnpNbiB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcbiAgYm9yZGVyLWJvdHRvbTogMnB4IHNvbGlkIHZhcigtLWtleS1iZy1iYXNlKTtcXG4gIG1hcmdpbjogNXB4IDA7XFxufVxcblxcbi5VNmcwbmpXakJydGJfSTNYaEFlViB7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBwYWRkaW5nOiA1cHg7XFxuICBvcGFjaXR5OiAwLjY7XFxufVxcbi5VNmcwbmpXakJydGJfSTNYaEFlVjpob3ZlciB7XFxuICBvcGFjaXR5OiAxO1xcbn1cXG5cXG4uQ1JPaHNCTHR1blEyQmJmV2RrUXcge1xcbiAgbWFyZ2luOiAxMHB4IDAgNDBweDtcXG59XFxuXFxuLkNST2hzQkx0dW5RMkJiZldka1F3IC5NaEE0ZlhYdWFaMWlQdnYwNXc0bSB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1ldmVubHk7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbn1cXG5cXG4uQ1JPaHNCTHR1blEyQmJmV2RrUXcgaDUge1xcbiAgbWFyZ2luOiAwO1xcbn1cXG5cXG4udnVqWWNnUWppTjRCR3AzN0ZNVUgge1xcbiAgY29sb3I6IHZhcigtLWtleS1jb2xvci1iYXNlKTtcXG59XFxuXFxuLnVoMnlQV3lmRU9adGdYbzJfS3RVIHtcXG4gIGNvbG9yOiB2YXIoLS1kZWxldGUpO1xcbn1cXG5cXG4uTkFCMUVONl9wY1lJeTVEYjlYbkMge1xcbiAgZGlzcGxheTogbm9uZSAhaW1wb3J0YW50O1xcbn1cXG4uTkFCMUVONl9wY1lJeTVEYjlYbkM6aG92ZXIge1xcbiAgY29sb3I6IHdoaXRlO1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG4ua1luOGJyc0ZnRWFmNjFvUXl2NGQ6aG92ZXIgLk5BQjFFTjZfcGNZSXk1RGI5WG5DIHtcXG4gIGRpc3BsYXk6IGZsZXggIWltcG9ydGFudDtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHJpZ2h0OiAtNDhweDtcXG4gIHRyYW5zZm9ybTogc2NhbGUoMC41KTtcXG59XFxuXFxuLk5HeG5oZlNKYUo5Rk51M2hsQmZjLk5BQjFFTjZfcGNZSXk1RGI5WG5DLFxcbi5OR3huaGZTSmFKOUZOdTNobEJmYy5HWGdHX0lhUVRyaWNxVGhxenNLZSA+ICoge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogc2FuZHlicm93bjtcXG4gIGNvbG9yOiB3aGl0ZTtcXG59XFxuLk5HeG5oZlNKYUo5Rk51M2hsQmZjLk5BQjFFTjZfcGNZSXk1RGI5WG5DIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxufVxcblxcbi5mbGpkdmNlYk92MWdiS1pwZjB2VyB7XFxuICBtYXJnaW46IDEwcHggMDtcXG4gIGRpc3BsYXk6IGZsZXg7XFxufVxcblxcbi5mbGpkdmNlYk92MWdiS1pwZjB2VyBsYWJlbCB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICB3aWR0aDogMTIwcHg7XFxuICB0ZXh0LWFsaWduOiByaWdodDtcXG4gIG1hcmdpbi1yaWdodDogMTBweDtcXG59XFxuXFxuLmJuTjZKQ2l0MFJjamRRaXF6dzh3IHtcXG4gIGxpc3Qtc3R5bGUtdHlwZTogbm9uZTtcXG4gIG1hcmdpbjogMDtcXG4gIHBhZGRpbmc6IDA7XFxufVxcbi5ibk42SkNpdDBSY2pkUWlxenc4dyBsaSB7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICBwYWRkaW5nOiA1cHggMTBweDtcXG4gIG1hcmdpbjogNXB4O1xcbiAgYm9yZGVyLXJhZGl1czogMzBweDtcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWtleS1iZy1iYXNlKTtcXG59XFxuLmJuTjZKQ2l0MFJjamRRaXF6dzh3IGxpW2RhdGEtc2VsZWN0ZWQ9XFxcInRydWVcXFwiXSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1zZWxlY3Rpb24pO1xcbiAgY29sb3I6IHZhcigtLWtleS1jb2xvci1ob3Zlcik7XFxufVxcbi5ibk42SkNpdDBSY2pkUWlxenc4dyBsaTpob3ZlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1ob3Zlci1zZWxlY3Rpb24pO1xcbiAgY29sb3I6IHZhcigtLWtleS1jb2xvci1ob3Zlcik7XFxufVxcblxcbi5OcExFWXJDMzJLUTRyVXg5aFVGSiB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1rZXktYmctYmFzZSk7XFxuICBib3JkZXItcmFkaXVzOiAzMHB4O1xcbiAgY29sb3I6IHZhcigtLWtleS1jb2xvci1iYXNlKTtcXG4gIGZvbnQtc2l6ZTogODAlO1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgcGFkZGluZzogNXB4O1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgYm90dG9tOiAtNDBweDtcXG4gIGxlZnQ6IDUwJTtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIDApO1xcbiAgd2lkdGg6IDExMCU7XFxuXFxuICBwb2ludGVyLWV2ZW50czogbm9uZTtcXG4gIHRyYW5zaXRpb246IG9wYWNpdHkgZWFzZS1pbi1vdXQgLjVzO1xcbn1cXG5cXG4ubDJndEUxWEtTNjNSNVRNNXVuaXAgeyBwb3NpdGlvbjogcmVsYXRpdmUgfVxcbi5sMmd0RTFYS1M2M1I1VE01dW5pcDpob3ZlciAuTnBMRVlyQzMyS1E0clV4OWhVRkogeyBvcGFjaXR5OiAwLjI1IH1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvS2V5Ym9hcmQvQ29tYm9zL3N0eWxlcy5tb2R1bGUuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0VBQ0Usb0JBQW9CO0FBQ3RCOztBQUVBO0VBQ0UsYUFBYTtFQUNiLFlBQVk7RUFDWixzQkFBc0I7RUFDdEIsYUFBYTtFQUNiLFNBQVM7RUFDVCxlQUFlO0FBQ2pCOztBQUVBO0VBQ0UsZUFBZTtFQUNmLG9DQUFvQztBQUN0QztBQUNBO0VBQ0Usa0NBQWtDO0VBQ2xDLHNCQUFzQjtBQUN4Qjs7QUFFQTtFQUNFLGtDQUFrQztBQUNwQztBQUNBO0VBQ0Usd0NBQXdDO0FBQzFDOztBQUVBO0VBQ0UsZ0JBQWdCO0VBQ2hCLGNBQWM7RUFDZCxvQkFBb0I7QUFDdEI7O0FBRUE7RUFDRSxhQUFhO0VBQ2IsOEJBQThCO0VBQzlCLDJDQUEyQztFQUMzQyxhQUFhO0FBQ2Y7O0FBRUE7RUFDRSxlQUFlO0VBQ2YsWUFBWTtFQUNaLFlBQVk7QUFDZDtBQUNBO0VBQ0UsVUFBVTtBQUNaOztBQUVBO0VBQ0UsbUJBQW1CO0FBQ3JCOztBQUVBO0VBQ0UsYUFBYTtFQUNiLDZCQUE2QjtFQUM3QixtQkFBbUI7QUFDckI7O0FBRUE7RUFDRSxTQUFTO0FBQ1g7O0FBRUE7RUFDRSw0QkFBNEI7QUFDOUI7O0FBRUE7RUFDRSxvQkFBb0I7QUFDdEI7O0FBRUE7RUFDRSx3QkFBd0I7QUFDMUI7QUFDQTtFQUNFLFlBQVk7RUFDWixlQUFlO0FBQ2pCO0FBQ0E7RUFDRSx3QkFBd0I7RUFDeEIsa0JBQWtCO0VBQ2xCLFlBQVk7RUFDWixxQkFBcUI7QUFDdkI7O0FBRUE7O0VBRUUsNEJBQTRCO0VBQzVCLFlBQVk7QUFDZDtBQUNBO0VBQ0UsYUFBYTtBQUNmOztBQUVBO0VBQ0UsY0FBYztFQUNkLGFBQWE7QUFDZjs7QUFFQTtFQUNFLHFCQUFxQjtFQUNyQixZQUFZO0VBQ1osaUJBQWlCO0VBQ2pCLGtCQUFrQjtBQUNwQjs7QUFFQTtFQUNFLHFCQUFxQjtFQUNyQixTQUFTO0VBQ1QsVUFBVTtBQUNaO0FBQ0E7RUFDRSxlQUFlO0VBQ2YscUJBQXFCO0VBQ3JCLGlCQUFpQjtFQUNqQixXQUFXO0VBQ1gsbUJBQW1CO0VBQ25CLG9DQUFvQztBQUN0QztBQUNBO0VBQ0Usa0NBQWtDO0VBQ2xDLDZCQUE2QjtBQUMvQjtBQUNBO0VBQ0Usd0NBQXdDO0VBQ3hDLDZCQUE2QjtBQUMvQjs7QUFFQTtFQUNFLG9DQUFvQztFQUNwQyxtQkFBbUI7RUFDbkIsNEJBQTRCO0VBQzVCLGNBQWM7RUFDZCxrQkFBa0I7RUFDbEIsWUFBWTtFQUNaLGtCQUFrQjtFQUNsQixhQUFhO0VBQ2IsU0FBUztFQUNULDZCQUE2QjtFQUM3QixXQUFXOztFQUVYLG9CQUFvQjtFQUNwQixtQ0FBbUM7QUFDckM7O0FBRUEsd0JBQWlCLG1CQUFtQjtBQUNwQyxvREFBd0MsY0FBY1wiLFwic291cmNlc0NvbnRlbnRcIjpbXCIubWFpbiB7XFxuICBwYWRkaW5nLWJvdHRvbTogNjBweDtcXG59XFxuXFxuLnNpZGViYXIge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIHdpZHRoOiAxOTBweDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICBwYWRkaW5nOiAxMHB4O1xcbiAgZ2FwOiAxMHB4O1xcbiAgcG9zaXRpb246IGZpeGVkO1xcbn1cXG5cXG4uc2VsZWN0YWJsZSB7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1rZXktYmctYmFzZSk7XFxufVxcbi5zZWxlY3RhYmxlOmhvdmVyIHtcXG4gIGJvcmRlcjogNHB4IHNvbGlkIHZhcigtLXNlbGVjdGlvbik7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbn1cXG5cXG4uaGlnaGxpZ2h0IHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXNlbGVjdGlvbik7XFxufVxcbi5oaWdobGlnaHQ6aG92ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0taG92ZXItc2VsZWN0aW9uKTtcXG59XFxuXFxuLmNvbWJvUGFuZWwge1xcbiAgbWF4LXdpZHRoOiA0NTBweDtcXG4gIG1hcmdpbjogMCBhdXRvO1xcbiAgcGFkZGluZy1ib3R0b206IDYwcHg7XFxufVxcblxcbi5oZWFkaW5nIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxuICBib3JkZXItYm90dG9tOiAycHggc29saWQgdmFyKC0ta2V5LWJnLWJhc2UpO1xcbiAgbWFyZ2luOiA1cHggMDtcXG59XFxuXFxuLmFjdGlvbiB7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBwYWRkaW5nOiA1cHg7XFxuICBvcGFjaXR5OiAwLjY7XFxufVxcbi5hY3Rpb246aG92ZXIge1xcbiAgb3BhY2l0eTogMTtcXG59XFxuXFxuLmNvbWJvIHtcXG4gIG1hcmdpbjogMTBweCAwIDQwcHg7XFxufVxcblxcbi5jb21ibyAuZGV0YWlsIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWV2ZW5seTtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxufVxcblxcbi5jb21ibyBoNSB7XFxuICBtYXJnaW46IDA7XFxufVxcblxcbi5lZGl0IHtcXG4gIGNvbG9yOiB2YXIoLS1rZXktY29sb3ItYmFzZSk7XFxufVxcblxcbi5yZW1vdmUge1xcbiAgY29sb3I6IHZhcigtLWRlbGV0ZSk7XFxufVxcblxcbi5hZGRDb21ib0lucHV0IHtcXG4gIGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDtcXG59XFxuLmFkZENvbWJvSW5wdXQ6aG92ZXIge1xcbiAgY29sb3I6IHdoaXRlO1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG4uY29tYm9JbnB1dExpc3Q6aG92ZXIgLmFkZENvbWJvSW5wdXQge1xcbiAgZGlzcGxheTogZmxleCAhaW1wb3J0YW50O1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgcmlnaHQ6IC00OHB4O1xcbiAgdHJhbnNmb3JtOiBzY2FsZSgwLjUpO1xcbn1cXG5cXG4uYWN0aXZlLmFkZENvbWJvSW5wdXQsXFxuLmFjdGl2ZS5jb21ib0lucHV0ID4gKiB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBzYW5keWJyb3duO1xcbiAgY29sb3I6IHdoaXRlO1xcbn1cXG4uYWN0aXZlLmFkZENvbWJvSW5wdXQge1xcbiAgZGlzcGxheTogZmxleDtcXG59XFxuXFxuLmZpZWxkIHtcXG4gIG1hcmdpbjogMTBweCAwO1xcbiAgZGlzcGxheTogZmxleDtcXG59XFxuXFxuLmZpZWxkIGxhYmVsIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIHdpZHRoOiAxMjBweDtcXG4gIHRleHQtYWxpZ246IHJpZ2h0O1xcbiAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xcbn1cXG5cXG4ubGF5ZXJMaXN0IHtcXG4gIGxpc3Qtc3R5bGUtdHlwZTogbm9uZTtcXG4gIG1hcmdpbjogMDtcXG4gIHBhZGRpbmc6IDA7XFxufVxcbi5sYXllckxpc3QgbGkge1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgcGFkZGluZzogNXB4IDEwcHg7XFxuICBtYXJnaW46IDVweDtcXG4gIGJvcmRlci1yYWRpdXM6IDMwcHg7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1rZXktYmctYmFzZSk7XFxufVxcbi5sYXllckxpc3QgbGlbZGF0YS1zZWxlY3RlZD1cXFwidHJ1ZVxcXCJdIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXNlbGVjdGlvbik7XFxuICBjb2xvcjogdmFyKC0ta2V5LWNvbG9yLWhvdmVyKTtcXG59XFxuLmxheWVyTGlzdCBsaTpob3ZlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1ob3Zlci1zZWxlY3Rpb24pO1xcbiAgY29sb3I6IHZhcigtLWtleS1jb2xvci1ob3Zlcik7XFxufVxcblxcbi5mbG9hdGluZ01lc3NhZ2Uge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0ta2V5LWJnLWJhc2UpO1xcbiAgYm9yZGVyLXJhZGl1czogMzBweDtcXG4gIGNvbG9yOiB2YXIoLS1rZXktY29sb3ItYmFzZSk7XFxuICBmb250LXNpemU6IDgwJTtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIHBhZGRpbmc6IDVweDtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIGJvdHRvbTogLTQwcHg7XFxuICBsZWZ0OiA1MCU7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAwKTtcXG4gIHdpZHRoOiAxMTAlO1xcblxcbiAgcG9pbnRlci1ldmVudHM6IG5vbmU7XFxuICB0cmFuc2l0aW9uOiBvcGFjaXR5IGVhc2UtaW4tb3V0IC41cztcXG59XFxuXFxuLmNvbWJvSW5wdXRNYXAgeyBwb3NpdGlvbjogcmVsYXRpdmUgfVxcbi5jb21ib0lucHV0TWFwOmhvdmVyIC5mbG9hdGluZ01lc3NhZ2UgeyBvcGFjaXR5OiAwLjI1IH1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmxvY2FscyA9IHtcblx0XCJtYWluXCI6IFwicHdYYkdPUnNZS3F5T1BCbTlfZFdcIixcblx0XCJzaWRlYmFyXCI6IFwiUWdGRFhOeWJLRF9YTjY2TV9XcEpcIixcblx0XCJzZWxlY3RhYmxlXCI6IFwiR3kwS1pHQ2dPZVZtaW5BZmdnRlFcIixcblx0XCJoaWdobGlnaHRcIjogXCJMZDljVmR0cFNfRHBiRWlmeVg5WVwiLFxuXHRcImNvbWJvUGFuZWxcIjogXCJtcXBKN3VIQU1LeHZPUm9PSVBGS1wiLFxuXHRcImhlYWRpbmdcIjogXCJCVnVjd3k0QVpDeWw3R3lpdnpNblwiLFxuXHRcImFjdGlvblwiOiBcIlU2ZzBualdqQnJ0Yl9JM1hoQWVWXCIsXG5cdFwiY29tYm9cIjogXCJDUk9oc0JMdHVuUTJCYmZXZGtRd1wiLFxuXHRcImRldGFpbFwiOiBcIk1oQTRmWFh1YVoxaVB2djA1dzRtXCIsXG5cdFwiZWRpdFwiOiBcInZ1alljZ1FqaU40QkdwMzdGTVVIXCIsXG5cdFwicmVtb3ZlXCI6IFwidWgyeVBXeWZFT1p0Z1hvMl9LdFVcIixcblx0XCJhZGRDb21ib0lucHV0XCI6IFwiTkFCMUVONl9wY1lJeTVEYjlYbkNcIixcblx0XCJjb21ib0lucHV0TGlzdFwiOiBcImtZbjhicnNGZ0VhZjYxb1F5djRkXCIsXG5cdFwiYWN0aXZlXCI6IFwiTkd4bmhmU0phSjlGTnUzaGxCZmNcIixcblx0XCJjb21ib0lucHV0XCI6IFwiR1hnR19JYVFUcmljcVRocXpzS2VcIixcblx0XCJmaWVsZFwiOiBcImZsamR2Y2ViT3YxZ2JLWnBmMHZXXCIsXG5cdFwibGF5ZXJMaXN0XCI6IFwiYm5ONkpDaXQwUmNqZFFpcXp3OHdcIixcblx0XCJmbG9hdGluZ01lc3NhZ2VcIjogXCJOcExFWXJDMzJLUTRyVXg5aFVGSlwiLFxuXHRcImNvbWJvSW5wdXRNYXBcIjogXCJsMmd0RTFYS1M2M1I1VE01dW5pcFwiXG59O1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5lRVdoMWtNeHEwcXd0QWpXb2RMXyB7XFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogMTAwJTtcXG4gIG1hcmdpbjogMDtcXG4gIHBhZGRpbmc6IDA7XFxufVxcblxcbi5lRVdoMWtNeHEwcXd0QWpXb2RMXy5NZTJpZXdTaGtrVVdFbWhDS0FKViB7XFxuICBjdXJzb3I6IGNyb3NzaGFpcjtcXG59XFxuXFxuLndvdV9ycG0wbnZCOHd4QjE1M2NFIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMTUwLCAyNTUsIDE1MCwgMC4xKTtcXG4gIGJvcmRlcjogM3B4IGRvdHRlZCByZ2JhKDE1MCwgMjU1LCAxNTAsIDAuNyk7XFxuICBwb2ludGVyLWV2ZW50czogbm9uZTtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxufVxcblxcbi53b3VfcnBtMG52Qjh3eEIxNTNjRS5mTTh4UUN2NEt5a2tXNXNzeGdFZyB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDEyMCwgMTIwLCAxMjAsIDAuMSk7XFxuICBib3JkZXItY29sb3I6IHJnYmEoMTIwLCAxMjAsIDEyMCwgMC4yNSk7XFxufVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9LZXlib2FyZC9Db21tb24vZHJhZ1NlbGVjdG9yLm1vZHVsZS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSxXQUFXO0VBQ1gsWUFBWTtFQUNaLFNBQVM7RUFDVCxVQUFVO0FBQ1o7O0FBRUE7RUFDRSxpQkFBaUI7QUFDbkI7O0FBRUE7RUFDRSxrQkFBa0I7RUFDbEIsMENBQTBDO0VBQzFDLDJDQUEyQztFQUMzQyxvQkFBb0I7RUFDcEIsc0JBQXNCO0FBQ3hCOztBQUVBO0VBQ0UsMENBQTBDO0VBQzFDLHVDQUF1QztBQUN6Q1wiLFwic291cmNlc0NvbnRlbnRcIjpbXCIuY29udGFpbmVyIHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAgbWFyZ2luOiAwO1xcbiAgcGFkZGluZzogMDtcXG59XFxuXFxuLmNvbnRhaW5lci5zZWxlY3Rpbmcge1xcbiAgY3Vyc29yOiBjcm9zc2hhaXI7XFxufVxcblxcbi5vdmVybGF5IHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMTUwLCAyNTUsIDE1MCwgMC4xKTtcXG4gIGJvcmRlcjogM3B4IGRvdHRlZCByZ2JhKDE1MCwgMjU1LCAxNTAsIDAuNyk7XFxuICBwb2ludGVyLWV2ZW50czogbm9uZTtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxufVxcblxcbi5vdmVybGF5Lm5lZ2F0ZSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDEyMCwgMTIwLCAxMjAsIDAuMSk7XFxuICBib3JkZXItY29sb3I6IHJnYmEoMTIwLCAxMjAsIDEyMCwgMC4yNSk7XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ubG9jYWxzID0ge1xuXHRcImNvbnRhaW5lclwiOiBcImVFV2gxa014cTBxd3RBaldvZExfXCIsXG5cdFwic2VsZWN0aW5nXCI6IFwiTWUyaWV3U2hra1VXRW1oQ0tBSlZcIixcblx0XCJvdmVybGF5XCI6IFwid291X3JwbTBudkI4d3hCMTUzY0VcIixcblx0XCJuZWdhdGVcIjogXCJmTTh4UUN2NEt5a2tXNXNzeGdFZ1wiXG59O1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5sRDVUc3ZkSWJFQUhOZG1oZm5sYiB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1rZXktYmctYmFzZSk7XFxufVxcbi55azg5RTR6Szl6bE82OU9YaEtuNTpob3ZlciB7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBib3JkZXI6IDRweCBzb2xpZCB2YXIoLS1zZWxlY3Rpb24pO1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG59XFxuXFxuLnB6VHZzeEtqcHk2TXFjRmh4aDlqIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXNlbGVjdGlvbik7XFxufVxcbi5welR2c3hLanB5Nk1xY0ZoeGg5ajpob3ZlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1ob3Zlci1zZWxlY3Rpb24pO1xcbn1cXG5cXG4ucl9TZGtsbmo1N0NFMlpqbkJEdzYge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0taG92ZXItc2VsZWN0aW9uKTtcXG4gIGZpbHRlcjogYnJpZ2h0bmVzcygxMzUlKTtcXG59XFxuXFxuLkljaDlUMW5TekhzMWE4NGluc2ZwIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWhvdmVyLXNlbGVjdGlvbik7XFxuICBmaWx0ZXI6IGJyaWdodG5lc3MoNzUlKTtcXG59XFxuXFxuLl8zVTF6aTFKMXNYVDQxQXpwQUExaiB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBib3R0b206IDA7XFxuICByaWdodDogNTAlO1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoNTAlLCAxMDAlKTtcXG59XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL0tleWJvYXJkL0NvbW1vbi9rZXlQb3NpdGlvblNlbGVjdG9yU3R5bGVzLm1vZHVsZS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSxvQ0FBb0M7QUFDdEM7QUFDQTtFQUNFLGVBQWU7RUFDZixrQ0FBa0M7RUFDbEMsc0JBQXNCO0FBQ3hCOztBQUVBO0VBQ0Usa0NBQWtDO0FBQ3BDO0FBQ0E7RUFDRSx3Q0FBd0M7QUFDMUM7O0FBRUE7RUFDRSx3Q0FBd0M7RUFDeEMsd0JBQXdCO0FBQzFCOztBQUVBO0VBQ0Usd0NBQXdDO0VBQ3hDLHVCQUF1QjtBQUN6Qjs7QUFFQTtFQUNFLGtCQUFrQjtFQUNsQixTQUFTO0VBQ1QsVUFBVTtFQUNWLCtCQUErQjtBQUNqQ1wiLFwic291cmNlc0NvbnRlbnRcIjpbXCIua2V5IHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWtleS1iZy1iYXNlKTtcXG59XFxuLnNlbGVjdGFibGU6aG92ZXIge1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgYm9yZGVyOiA0cHggc29saWQgdmFyKC0tc2VsZWN0aW9uKTtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxufVxcblxcbi5oaWdobGlnaHQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tc2VsZWN0aW9uKTtcXG59XFxuLmhpZ2hsaWdodDpob3ZlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1ob3Zlci1zZWxlY3Rpb24pO1xcbn1cXG5cXG4ucHJldmlld0FkZCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1ob3Zlci1zZWxlY3Rpb24pO1xcbiAgZmlsdGVyOiBicmlnaHRuZXNzKDEzNSUpO1xcbn1cXG5cXG4ucHJldmlld1JlbW92ZSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1ob3Zlci1zZWxlY3Rpb24pO1xcbiAgZmlsdGVyOiBicmlnaHRuZXNzKDc1JSk7XFxufVxcblxcbi50aXAge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgYm90dG9tOiAwO1xcbiAgcmlnaHQ6IDUwJTtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlKDUwJSwgMTAwJSk7XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ubG9jYWxzID0ge1xuXHRcImtleVwiOiBcImxENVRzdmRJYkVBSE5kbWhmbmxiXCIsXG5cdFwic2VsZWN0YWJsZVwiOiBcInlrODlFNHpLOXpsTzY5T1hoS241XCIsXG5cdFwiaGlnaGxpZ2h0XCI6IFwicHpUdnN4S2pweTZNcWNGaHhoOWpcIixcblx0XCJwcmV2aWV3QWRkXCI6IFwicl9TZGtsbmo1N0NFMlpqbkJEdzZcIixcblx0XCJwcmV2aWV3UmVtb3ZlXCI6IFwiSWNoOVQxblN6SHMxYTg0aW5zZnBcIixcblx0XCJ0aXBcIjogXCJfM1UxemkxSjFzWFQ0MUF6cEFBMWpcIlxufTtcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIuQ29MWmxLUjFXY01yRmQ5WGhETUMge1xcblxcdHBvc2l0aW9uOiByZWxhdGl2ZTtcXG5cXHRkaXNwbGF5OiBmbGV4O1xcblxcdGp1c3RpZnktY29udGVudDogY2VudGVyO1xcblxcdGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuXFxuXFx0Zm9udC1mYW1pbHk6IFF1aWNrc2FuZCwgYXZlbmlyLCBzYW5zLXNlcmlmO1xcblxcblxcdC8qIFRPRE86IHJlbW92ZSB0aGlzIG9uY2UgSSBoYXZlIGEgd3JhcHBlciB3aXRoIHNpemUgZGVmYXVsdHMgKi9cXG5cXHR3aWR0aDogNjVweDtcXG5cXHRoZWlnaHQ6IDY1cHg7XFxuXFxuXFx0Zm9udC1zaXplOiAxMTAlO1xcblxcdGJvcmRlci1yYWRpdXM6IDVweDtcXG59XFxuXFxuLkNvTFpsS1IxV2NNckZkOVhoRE1DLkNUNHVHaHdsOHNZMEx3VDNwMzlnOm5vdCg6aG92ZXIpIC5VTnpRcXVXc29JYW5PcElOMFE5TCB7XFxuXFx0dGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmUgd2F2eSB2YXIoLS1lcnJvci1oaWdobGlnaHQpO1xcblxcdHRleHQtdW5kZXJsaW5lLW9mZnNldDogNHB4O1xcblxcdGNvbG9yOiB2YXIoLS1lcnJvci1oaWdobGlnaHQpO1xcblxcdGZvbnQtd2VpZ2h0OiBib2xkO1xcbn1cXG5cXG4uWTVFVnQ4YjBCYVhOZDl1THhoZmgge1xcblxcdHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG5cXHRsZWZ0OiAycHg7XFxuXFx0Ym90dG9tOiAycHg7XFxuXFx0Zm9udC1zaXplOiA4MCU7XFxuXFxuXFx0YW5pbWF0aW9uOiBzWXIzbDl5MDNKeE9fMkFQNzNqciBlYXNlLWluLW91dCAxcyBhbHRlcm5hdGUtcmV2ZXJzZTtcXG59XFxuLlk1RVZ0OGIwQmFYTmQ5dUx4aGZoLkNUNHVHaHdsOHNZMEx3VDNwMzlnOmhvdmVyIHtcXG5cXHRjb2xvcjogcmdiKDI1NSwgMjI1LCAwKTtcXG59XFxuXFxuQGtleWZyYW1lcyBzWXIzbDl5MDNKeE9fMkFQNzNqciB7XFxuXFx0MCUgeyBjb2xvcjogdmFyKC0ta2V5LWNvbG9yLWJhc2UpIH1cXG5cXHQxMDAlIHsgY29sb3I6IHZhcigtLWtleS1jb2xvci1leHRyZW1lKSB9XFxufVxcblxcblxcbi5Db0xabEtSMVdjTXJGZDlYaERNQy5DVDR1R2h3bDhzWTBMd1QzcDM5Zzpob3ZlciAuRGVqWlhDdnZoSklMUGJzOVE4aHQsXFxuLkNvTFpsS1IxV2NNckZkOVhoRE1DLkNUNHVHaHdsOHNZMEx3VDNwMzlnOmhvdmVyIC5HbGlFNFlid2xpOVg2VE5UakQxXyB7XFxuXFx0Ym9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czogMDtcXG5cXHRib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czogMDtcXG5cXHR0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZSBkb3R0ZWQgd2hpdGUgMnB4O1xcblxcdHRleHQtdW5kZXJsaW5lLW9mZnNldDogNHB4O1xcbn1cXG5cXG5cXG4uaHVRRFAzR2JUTFRoYlZJUDh3RnAge1xcblxcdGNvbG9yOiB2YXIoLS1rZXktY29sb3ItYmFzZSk7XFxuXFx0YmFja2dyb3VuZC1jb2xvcjogdmFyKC0ta2V5LWJnLWJhc2UpO1xcbn1cXG5cXG4uUHBNbUtwSmZFaTM3TGR3N0FlQlQge1xcblxcdGJvcmRlci1yYWRpdXM6IDEwMCU7XFxuXFx0YmFja2dyb3VuZC1jb2xvcjogdmFyKC0ta2V5LWJnLWJhc2UpO1xcblxcdGNvbG9yOiB2YXIoLS1rZXktY29sb3ItYmFzZSk7XFxufVxcblxcbi5rMkVJaDhZbEZ2cDlzQnVrbFN4eCB7XFxuXFx0cG9zaXRpb246IGFic29sdXRlO1xcblxcdHRvcDogMDtcXG5cXHRsZWZ0OiA1MCU7XFxuXFx0dHJhbnNmb3JtOiB0cmFuc2xhdGVYKC01MCUpO1xcblxcdGZvbnQtc2l6ZTogNTAlO1xcbn1cXG5cXG4uQ1Q0dUdod2w4c1kwTHdUM3AzOWc6aG92ZXIsIC5QcE1tS3BKZkVpMzdMZHc3QWVCVC5DVDR1R2h3bDhzWTBMd1QzcDM5Zzpob3ZlciB7XFxuXFx0YmFja2dyb3VuZC1jb2xvcjogdmFyKC0taG92ZXItc2VsZWN0aW9uKTtcXG5cXHR0cmFuc2l0aW9uOiAyMDBtcztcXG5cXHR6LWluZGV4OiAxO1xcbn1cXG4uQ29MWmxLUjFXY01yRmQ5WGhETUMuQ1Q0dUdod2w4c1kwTHdUM3AzOWc6aG92ZXIgLkRlalpYQ3Z2aEpJTFBiczlROGh0LCAuQ29MWmxLUjFXY01yRmQ5WGhETUMuQ1Q0dUdod2w4c1kwTHdUM3AzOWc6aG92ZXIgLkdsaUU0WWJ3bGk5WDZUTlRqRDFfIHtcXG5cXHRjb2xvcjogdmFyKC0ta2V5LWNvbG9yLWhvdmVyKTtcXG59XFxuLkNvTFpsS1IxV2NNckZkOVhoRE1DID4gLkRlalpYQ3Z2aEpJTFBiczlROGh0IHtcXG5cXHRwYWRkaW5nOiA1cHg7XFxufVxcblxcbltkYXRhLXNpbXBsZT1cXFwidHJ1ZVxcXCJdIHsgZm9udC1zaXplOiAxNDAlOyB9XFxuW2RhdGEtbG9uZz1cXFwidHJ1ZVxcXCJdIHsgZm9udC1zaXplOiA2MCU7IH1cXG5cXG4uQXBIREpGSkdZVWFHVGd6TWVJS1o6bm90KFtkYXRhLWlzLXJvb3Q9XFxcInRydWVcXFwiXSk6OmJlZm9yZSB7IGNvbnRlbnQ6ICcoJzsgb3BhY2l0eTogMC40OyBmb250LXdlaWdodDogYm9sZDsgbWFyZ2luOiAycHg7IH1cXG4uQXBIREpGSkdZVWFHVGd6TWVJS1o6bm90KFtkYXRhLWlzLXJvb3Q9XFxcInRydWVcXFwiXSk6OmFmdGVyIHsgY29udGVudDogJyknOyBvcGFjaXR5OiAwLjQ7IGZvbnQtd2VpZ2h0OiBib2xkOyBtYXJnaW46IDJweDsgfVxcbi5BcEhESkZKR1lVYUdUZ3pNZUlLWjpub3QoW2RhdGEtaXMtcm9vdD1cXFwidHJ1ZVxcXCJdKSAubUx6NjM3QXRuMGpaWGV5NlJ4NHY6bm90KDpsYXN0LWNoaWxkKTo6YWZ0ZXIgeyBjb250ZW50OiAnLCc7IH1cXG5cXG4uRGVqWlhDdnZoSklMUGJzOVE4aHQge1xcblxcdGN1cnNvcjogZGVmYXVsdDtcXG5cXHRwYWRkaW5nOiAwcHggNHB4O1xcblxcdG1hcmdpbi1sZWZ0OiAtMnB4O1xcblxcdG1hcmdpbi1yaWdodDogLTJweDtcXG59XFxuXFxuLkNUNHVHaHdsOHNZMEx3VDNwMzlnIC5EZWpaWEN2dmhKSUxQYnM5UThodCB7XFxuXFx0Y3Vyc29yOiBwb2ludGVyO1xcblxcdGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG5cXHRib3gtc2l6aW5nOiBjb250ZW50LWJveDtcXG5cXHRtaW4td2lkdGg6IDAuNWVtO1xcblxcdHRleHQtYWxpZ246IGNlbnRlcjtcXG5cXHRib3JkZXItcmFkaXVzOiA0cHg7XFxufVxcbi5DVDR1R2h3bDhzWTBMd1QzcDM5ZyAuRGVqWlhDdnZoSklMUGJzOVE4aHQ6aG92ZXIge1xcblxcdGJhY2tncm91bmQtY29sb3I6IHdoaXRlICFpbXBvcnRhbnQ7XFxuXFx0Y29sb3I6IHZhcigtLWhvdmVyLXNlbGVjdGlvbikgIWltcG9ydGFudDtcXG5cXHRib3JkZXItcmFkaXVzOiA0cHggIWltcG9ydGFudDtcXG59XFxuXFxuLkRlalpYQ3Z2aEpJTFBiczlROGh0ICoge1xcblxcdHBvaW50ZXItZXZlbnRzOiBub25lO1xcbn1cXG5cXG4uR2xpRTRZYndsaTlYNlROVGpEMV8ge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgdG9wOiAwO1xcbiAgbGVmdDogMDtcXG4gIGZvbnQtc2l6ZTogMTBweDtcXG4gIHBhZGRpbmc6IDJweDtcXG4gIG9wYWNpdHk6IDAuNjU7XFxufVxcblxcbi5HbGlFNFlid2xpOVg2VE5UakQxXzpob3ZlciB7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBjb2xvcjogdmFyKC0taG92ZXItc2VsZWN0aW9uKSAhaW1wb3J0YW50O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0ta2V5LWJnLWhvdmVyKTtcXG4gIGJvcmRlci1yYWRpdXM6IDVweCAwO1xcbiAgb3BhY2l0eTogMTtcXG59XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL0tleWJvYXJkL0tleXMvc3R5bGVzLm1vZHVsZS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7Q0FDQyxrQkFBa0I7Q0FDbEIsYUFBYTtDQUNiLHVCQUF1QjtDQUN2QixtQkFBbUI7O0NBRW5CLDBDQUEwQzs7Q0FFMUMsK0RBQStEO0NBQy9ELFdBQVc7Q0FDWCxZQUFZOztDQUVaLGVBQWU7Q0FDZixrQkFBa0I7QUFDbkI7O0FBRUE7Q0FDQyxzREFBc0Q7Q0FDdEQsMEJBQTBCO0NBQzFCLDZCQUE2QjtDQUM3QixpQkFBaUI7QUFDbEI7O0FBRUE7Q0FDQyxrQkFBa0I7Q0FDbEIsU0FBUztDQUNULFdBQVc7Q0FDWCxjQUFjOztDQUVkLGdFQUFpRDtBQUNsRDtBQUNBO0NBQ0MsdUJBQXVCO0FBQ3hCOztBQUVBO0NBQ0MsS0FBSyw2QkFBNkI7Q0FDbEMsT0FBTyxnQ0FBZ0M7QUFDeEM7OztBQUdBOztDQUVDLDRCQUE0QjtDQUM1Qiw2QkFBNkI7Q0FDN0IsMkNBQTJDO0NBQzNDLDBCQUEwQjtBQUMzQjs7O0FBR0E7Q0FDQyw0QkFBNEI7Q0FDNUIsb0NBQW9DO0FBQ3JDOztBQUVBO0NBQ0MsbUJBQW1CO0NBQ25CLG9DQUFvQztDQUNwQyw0QkFBNEI7QUFDN0I7O0FBRUE7Q0FDQyxrQkFBa0I7Q0FDbEIsTUFBTTtDQUNOLFNBQVM7Q0FDVCwyQkFBMkI7Q0FDM0IsY0FBYztBQUNmOztBQUVBO0NBQ0Msd0NBQXdDO0NBQ3hDLGlCQUFpQjtDQUNqQixVQUFVO0FBQ1g7QUFDQTtDQUNDLDZCQUE2QjtBQUM5QjtBQUNBO0NBQ0MsWUFBWTtBQUNiOztBQUVBLHVCQUF1QixlQUFlLEVBQUU7QUFDeEMscUJBQXFCLGNBQWMsRUFBRTs7QUFFckMsMkRBQTZDLFlBQVksRUFBRSxZQUFZLEVBQUUsaUJBQWlCLEVBQUUsV0FBVyxFQUFFO0FBQ3pHLDBEQUE0QyxZQUFZLEVBQUUsWUFBWSxFQUFFLGlCQUFpQixFQUFFLFdBQVcsRUFBRTtBQUN4RyxpR0FBb0UsWUFBWSxFQUFFOztBQUVsRjtDQUNDLGVBQWU7Q0FDZixnQkFBZ0I7Q0FDaEIsaUJBQWlCO0NBQ2pCLGtCQUFrQjtBQUNuQjs7QUFFQTtDQUNDLGVBQWU7Q0FDZixxQkFBcUI7Q0FDckIsdUJBQXVCO0NBQ3ZCLGdCQUFnQjtDQUNoQixrQkFBa0I7Q0FDbEIsa0JBQWtCO0FBQ25CO0FBQ0E7Q0FDQyxrQ0FBa0M7Q0FDbEMsd0NBQXdDO0NBQ3hDLDZCQUE2QjtBQUM5Qjs7QUFFQTtDQUNDLG9CQUFvQjtBQUNyQjs7QUFFQTtFQUNFLGtCQUFrQjtFQUNsQixNQUFNO0VBQ04sT0FBTztFQUNQLGVBQWU7RUFDZixZQUFZO0VBQ1osYUFBYTtBQUNmOztBQUVBO0VBQ0UsZUFBZTtFQUNmLHdDQUF3QztFQUN4QyxxQ0FBcUM7RUFDckMsb0JBQW9CO0VBQ3BCLFVBQVU7QUFDWlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIua2V5IHtcXG5cXHRwb3NpdGlvbjogcmVsYXRpdmU7XFxuXFx0ZGlzcGxheTogZmxleDtcXG5cXHRqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG5cXHRhbGlnbi1pdGVtczogY2VudGVyO1xcblxcblxcdGZvbnQtZmFtaWx5OiBRdWlja3NhbmQsIGF2ZW5pciwgc2Fucy1zZXJpZjtcXG5cXG5cXHQvKiBUT0RPOiByZW1vdmUgdGhpcyBvbmNlIEkgaGF2ZSBhIHdyYXBwZXIgd2l0aCBzaXplIGRlZmF1bHRzICovXFxuXFx0d2lkdGg6IDY1cHg7XFxuXFx0aGVpZ2h0OiA2NXB4O1xcblxcblxcdGZvbnQtc2l6ZTogMTEwJTtcXG5cXHRib3JkZXItcmFkaXVzOiA1cHg7XFxufVxcblxcbi5rZXkuc2VsZWN0YWJsZTpub3QoOmhvdmVyKSAubWlzc2luZ1ZhbHVlIHtcXG5cXHR0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZSB3YXZ5IHZhcigtLWVycm9yLWhpZ2hsaWdodCk7XFxuXFx0dGV4dC11bmRlcmxpbmUtb2Zmc2V0OiA0cHg7XFxuXFx0Y29sb3I6IHZhcigtLWVycm9yLWhpZ2hsaWdodCk7XFxuXFx0Zm9udC13ZWlnaHQ6IGJvbGQ7XFxufVxcblxcbi5taXNzaW5nIHtcXG5cXHRwb3NpdGlvbjogYWJzb2x1dGU7XFxuXFx0bGVmdDogMnB4O1xcblxcdGJvdHRvbTogMnB4O1xcblxcdGZvbnQtc2l6ZTogODAlO1xcblxcblxcdGFuaW1hdGlvbjogcHVsc2UgZWFzZS1pbi1vdXQgMXMgYWx0ZXJuYXRlLXJldmVyc2U7XFxufVxcbi5taXNzaW5nLnNlbGVjdGFibGU6aG92ZXIge1xcblxcdGNvbG9yOiByZ2IoMjU1LCAyMjUsIDApO1xcbn1cXG5cXG5Aa2V5ZnJhbWVzIHB1bHNlIHtcXG5cXHQwJSB7IGNvbG9yOiB2YXIoLS1rZXktY29sb3ItYmFzZSkgfVxcblxcdDEwMCUgeyBjb2xvcjogdmFyKC0ta2V5LWNvbG9yLWV4dHJlbWUpIH1cXG59XFxuXFxuXFxuLmtleS5zZWxlY3RhYmxlOmhvdmVyIC5jb2RlLFxcbi5rZXkuc2VsZWN0YWJsZTpob3ZlciAuYmVoYXZpb3VyLWJpbmRpbmcge1xcblxcdGJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6IDA7XFxuXFx0Ym9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6IDA7XFxuXFx0dGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmUgZG90dGVkIHdoaXRlIDJweDtcXG5cXHR0ZXh0LXVuZGVybGluZS1vZmZzZXQ6IDRweDtcXG59XFxuXFxuXFxuLmtleURlZmF1bHRUaGVtZSB7XFxuXFx0Y29sb3I6IHZhcigtLWtleS1jb2xvci1iYXNlKTtcXG5cXHRiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1rZXktYmctYmFzZSk7XFxufVxcblxcbi5lbmNvZGVyIHtcXG5cXHRib3JkZXItcmFkaXVzOiAxMDAlO1xcblxcdGJhY2tncm91bmQtY29sb3I6IHZhcigtLWtleS1iZy1iYXNlKTtcXG5cXHRjb2xvcjogdmFyKC0ta2V5LWNvbG9yLWJhc2UpO1xcbn1cXG5cXG4uZW5jb2RlckRpcmVjdGlvbiB7XFxuXFx0cG9zaXRpb246IGFic29sdXRlO1xcblxcdHRvcDogMDtcXG5cXHRsZWZ0OiA1MCU7XFxuXFx0dHJhbnNmb3JtOiB0cmFuc2xhdGVYKC01MCUpO1xcblxcdGZvbnQtc2l6ZTogNTAlO1xcbn1cXG5cXG4uc2VsZWN0YWJsZTpob3ZlciwgLmVuY29kZXIuc2VsZWN0YWJsZTpob3ZlciB7XFxuXFx0YmFja2dyb3VuZC1jb2xvcjogdmFyKC0taG92ZXItc2VsZWN0aW9uKTtcXG5cXHR0cmFuc2l0aW9uOiAyMDBtcztcXG5cXHR6LWluZGV4OiAxO1xcbn1cXG4ua2V5LnNlbGVjdGFibGU6aG92ZXIgLmNvZGUsIC5rZXkuc2VsZWN0YWJsZTpob3ZlciAuYmVoYXZpb3VyLWJpbmRpbmcge1xcblxcdGNvbG9yOiB2YXIoLS1rZXktY29sb3ItaG92ZXIpO1xcbn1cXG4ua2V5ID4gLmNvZGUge1xcblxcdHBhZGRpbmc6IDVweDtcXG59XFxuXFxuW2RhdGEtc2ltcGxlPVxcXCJ0cnVlXFxcIl0geyBmb250LXNpemU6IDE0MCU7IH1cXG5bZGF0YS1sb25nPVxcXCJ0cnVlXFxcIl0geyBmb250LXNpemU6IDYwJTsgfVxcblxcbi5wYXJhbXM6bm90KFtkYXRhLWlzLXJvb3Q9XFxcInRydWVcXFwiXSk6OmJlZm9yZSB7IGNvbnRlbnQ6ICcoJzsgb3BhY2l0eTogMC40OyBmb250LXdlaWdodDogYm9sZDsgbWFyZ2luOiAycHg7IH1cXG4ucGFyYW1zOm5vdChbZGF0YS1pcy1yb290PVxcXCJ0cnVlXFxcIl0pOjphZnRlciB7IGNvbnRlbnQ6ICcpJzsgb3BhY2l0eTogMC40OyBmb250LXdlaWdodDogYm9sZDsgbWFyZ2luOiAycHg7IH1cXG4ucGFyYW1zOm5vdChbZGF0YS1pcy1yb290PVxcXCJ0cnVlXFxcIl0pIC5wYXJhbTpub3QoOmxhc3QtY2hpbGQpOjphZnRlciB7IGNvbnRlbnQ6ICcsJzsgfVxcblxcbi5jb2RlIHtcXG5cXHRjdXJzb3I6IGRlZmF1bHQ7XFxuXFx0cGFkZGluZzogMHB4IDRweDtcXG5cXHRtYXJnaW4tbGVmdDogLTJweDtcXG5cXHRtYXJnaW4tcmlnaHQ6IC0ycHg7XFxufVxcblxcbi5zZWxlY3RhYmxlIC5jb2RlIHtcXG5cXHRjdXJzb3I6IHBvaW50ZXI7XFxuXFx0ZGlzcGxheTogaW5saW5lLWJsb2NrO1xcblxcdGJveC1zaXppbmc6IGNvbnRlbnQtYm94O1xcblxcdG1pbi13aWR0aDogMC41ZW07XFxuXFx0dGV4dC1hbGlnbjogY2VudGVyO1xcblxcdGJvcmRlci1yYWRpdXM6IDRweDtcXG59XFxuLnNlbGVjdGFibGUgLmNvZGU6aG92ZXIge1xcblxcdGJhY2tncm91bmQtY29sb3I6IHdoaXRlICFpbXBvcnRhbnQ7XFxuXFx0Y29sb3I6IHZhcigtLWhvdmVyLXNlbGVjdGlvbikgIWltcG9ydGFudDtcXG5cXHRib3JkZXItcmFkaXVzOiA0cHggIWltcG9ydGFudDtcXG59XFxuXFxuLmNvZGUgKiB7XFxuXFx0cG9pbnRlci1ldmVudHM6IG5vbmU7XFxufVxcblxcbi5iZWhhdmlvdXItYmluZGluZyB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDA7XFxuICBsZWZ0OiAwO1xcbiAgZm9udC1zaXplOiAxMHB4O1xcbiAgcGFkZGluZzogMnB4O1xcbiAgb3BhY2l0eTogMC42NTtcXG59XFxuXFxuLmJlaGF2aW91ci1iaW5kaW5nOmhvdmVyIHtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIGNvbG9yOiB2YXIoLS1ob3Zlci1zZWxlY3Rpb24pICFpbXBvcnRhbnQ7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1rZXktYmctaG92ZXIpO1xcbiAgYm9yZGVyLXJhZGl1czogNXB4IDA7XFxuICBvcGFjaXR5OiAxO1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmxvY2FscyA9IHtcblx0XCJrZXlcIjogXCJDb0xabEtSMVdjTXJGZDlYaERNQ1wiLFxuXHRcInNlbGVjdGFibGVcIjogXCJDVDR1R2h3bDhzWTBMd1QzcDM5Z1wiLFxuXHRcIm1pc3NpbmdWYWx1ZVwiOiBcIlVOelFxdVdzb0lhbk9wSU4wUTlMXCIsXG5cdFwibWlzc2luZ1wiOiBcIlk1RVZ0OGIwQmFYTmQ5dUx4aGZoXCIsXG5cdFwicHVsc2VcIjogXCJzWXIzbDl5MDNKeE9fMkFQNzNqclwiLFxuXHRcImNvZGVcIjogXCJEZWpaWEN2dmhKSUxQYnM5UThodFwiLFxuXHRcImJlaGF2aW91ci1iaW5kaW5nXCI6IFwiR2xpRTRZYndsaTlYNlROVGpEMV9cIixcblx0XCJrZXlEZWZhdWx0VGhlbWVcIjogXCJodVFEUDNHYlRMVGhiVklQOHdGcFwiLFxuXHRcImVuY29kZXJcIjogXCJQcE1tS3BKZkVpMzdMZHc3QWVCVFwiLFxuXHRcImVuY29kZXJEaXJlY3Rpb25cIjogXCJrMkVJaDhZbEZ2cDlzQnVrbFN4eFwiLFxuXHRcInBhcmFtc1wiOiBcIkFwSERKRkpHWVVhR1Rnek1lSUtaXCIsXG5cdFwicGFyYW1cIjogXCJtTHo2MzdBdG4walpYZXk2Ung0dlwiXG59O1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5tOHl0c2ZZX01XWTlBSWlpVDNLSSB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBwb2ludGVyLWV2ZW50czogbm9uZTtcXG4gIHotaW5kZXg6IDI7XFxufVxcbi5tOHl0c2ZZX01XWTlBSWlpVDNLSSA+ICoge1xcbiAgcG9pbnRlci1ldmVudHM6IGFsbDtcXG59XFxuXFxuLm04eXRzZllfTVdZOUFJaWlUM0tJIHVsIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgbGlzdC1zdHlsZS10eXBlOiBub25lO1xcbiAgZ2FwOiA0cHg7XFxuICBtYXJnaW46IDA7XFxuICBwYWRkaW5nOiAwO1xcbn1cXG4ubTh5dHNmWV9NV1k5QUlpaVQzS0kgbGkge1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyMDEsIDIwMSwgMjAxLCAwLjUpO1xcbiAgY29sb3I6IGRhcmtncmF5O1xcbiAgYm9yZGVyLXJhZGl1czogMTVweDtcXG4gIGhlaWdodDogMzBweDtcXG4gIHBhZGRpbmc6IDBweDtcXG4gIG1hcmdpbjogMCAycHg7XFxuICB3aWR0aDogbWF4LWNvbnRlbnQ7XFxufVxcbi5tOHl0c2ZZX01XWTlBSWlpVDNLSSBsaTpob3ZlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDYwLCAxNzksIDExMywgMC44NSk7XFxuICBjb2xvcjogd2hpdGU7XFxuICBwYWRkaW5nLXJpZ2h0OiAzNXB4O1xcbn1cXG4ubTh5dHNmWV9NV1k5QUlpaVQzS0kgbGkucnpYVmFoem1tRU9YbWpYaThvbGcge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDYwLCAxNzksIDExMyk7XFxuICBjb2xvcjogd2hpdGU7XFxufVxcblxcbi5tOHl0c2ZZX01XWTlBSWlpVDNLSSBsaSAqIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG59XFxuLm04eXRzZllfTVdZOUFJaWlUM0tJIGxpIC5MX0dKRXFuRmJheV9aek0wWWg3QiB7XFxuICBvdmVyZmxvdzogYXV0bztcXG4gIHdpZHRoOiAzMHB4O1xcbiAgaGVpZ2h0OiAzMHB4O1xcbiAgbGluZS1oZWlnaHQ6IDMwcHg7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxufVxcbi5tOHl0c2ZZX01XWTlBSWlpVDNLSSBsaSAuZmtaWndlZ1JFeXVfV2s5UHc2czcge1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gIHdpZHRoOiAwO1xcbiAgaGVpZ2h0OiAzMHB4O1xcbiAgbGluZS1oZWlnaHQ6IDMwcHg7XFxuICBwYWRkaW5nOiAwO1xcbiAgZm9udC12YXJpYW50OiBzbWFsbC1jYXBzO1xcbn1cXG5cXG4ubTh5dHNmWV9NV1k5QUlpaVQzS0kgdWwgbGk6aG92ZXIgLmZrWlp3ZWdSRXl1X1drOVB3NnM3LFxcbi5tOHl0c2ZZX01XWTlBSWlpVDNLSVtkYXRhLXJlbmFtaW5nPVxcXCJ0cnVlXFxcIl0gbGkucnpYVmFoem1tRU9YbWpYaThvbGcgLmZrWlp3ZWdSRXl1X1drOVB3NnM3IHtcXG4gIHRyYW5zaXRpb246IC4xNXMgZWFzZS1pbjtcXG4gIHdpZHRoOiBhdXRvO1xcbiAgcGFkZGluZzogMCAwIDAgMTBweDtcXG59XFxuXFxuLm04eXRzZllfTVdZOUFJaWlUM0tJIGJ1dHRvbiB7XFxuICB3aWR0aDogMzBweDtcXG4gIGhlaWdodDogMzBweDtcXG4gIGxpbmUtaGVpZ2h0OiAzMHB4O1xcbiAgcGFkZGluZzogMDtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIGJvcmRlci1yYWRpdXM6IDE1cHg7XFxufVxcblxcbi5tOHl0c2ZZX01XWTlBSWlpVDNLSSBpbnB1dC5ma1pad2VnUkV5dV9XazlQdzZzNyB7XFxuICB2ZXJ0aWNhbC1hbGlnbjogdG9wO1xcbiAgd2lkdGg6IDEwMHB4O1xcbiAgYm9yZGVyOiBub25lO1xcbiAgb3V0bGluZTogbm9uZTtcXG4gIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xcbiAgY29sb3I6IHdoaXRlO1xcbn1cXG5cXG4ubTh5dHNmWV9NV1k5QUlpaVQzS0kgLk5iRmdaeG55QUY5RUlqeDhuY1BNIHtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHJpZ2h0OiAxMHB4O1xcbiAgdmlzaWJpbGl0eTogaGlkZGVuO1xcblxcbiAgaGVpZ2h0OiAzMHB4O1xcbiAgbGluZS1oZWlnaHQ6IDMwcHg7XFxufVxcbi5tOHl0c2ZZX01XWTlBSWlpVDNLSSBsaTpob3ZlciAuTmJGZ1p4bnlBRjlFSWp4OG5jUE0ge1xcbiAgdmlzaWJpbGl0eTogdmlzaWJsZTtcXG59XFxuXFxuLm04eXRzZllfTVdZOUFJaWlUM0tJIGxpLnJ6WFZhaHptbUVPWG1qWGk4b2xnIC5ma1pad2VnUkV5dV9XazlQdzZzNyB7XFxuICBjdXJzb3I6IHRleHQ7XFxufVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9LZXlib2FyZC9MYXllcnMvbGF5ZXItc2VsZWN0b3IubW9kdWxlLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLGtCQUFrQjtFQUNsQixvQkFBb0I7RUFDcEIsVUFBVTtBQUNaO0FBQ0E7RUFDRSxtQkFBbUI7QUFDckI7O0FBRUE7RUFDRSxhQUFhO0VBQ2Isc0JBQXNCO0VBQ3RCLHFCQUFxQjtFQUNyQixRQUFRO0VBQ1IsU0FBUztFQUNULFVBQVU7QUFDWjtBQUNBO0VBQ0UsZUFBZTtFQUNmLGtCQUFrQjtFQUNsQiwwQ0FBMEM7RUFDMUMsZUFBZTtFQUNmLG1CQUFtQjtFQUNuQixZQUFZO0VBQ1osWUFBWTtFQUNaLGFBQWE7RUFDYixrQkFBa0I7QUFDcEI7QUFDQTtFQUNFLDBDQUEwQztFQUMxQyxZQUFZO0VBQ1osbUJBQW1CO0FBQ3JCO0FBQ0E7RUFDRSxtQ0FBbUM7RUFDbkMsWUFBWTtBQUNkOztBQUVBO0VBQ0UscUJBQXFCO0FBQ3ZCO0FBQ0E7RUFDRSxjQUFjO0VBQ2QsV0FBVztFQUNYLFlBQVk7RUFDWixpQkFBaUI7RUFDakIsa0JBQWtCO0FBQ3BCO0FBQ0E7RUFDRSxnQkFBZ0I7RUFDaEIsUUFBUTtFQUNSLFlBQVk7RUFDWixpQkFBaUI7RUFDakIsVUFBVTtFQUNWLHdCQUF3QjtBQUMxQjs7QUFFQTs7RUFFRSx3QkFBd0I7RUFDeEIsV0FBVztFQUNYLG1CQUFtQjtBQUNyQjs7QUFFQTtFQUNFLFdBQVc7RUFDWCxZQUFZO0VBQ1osaUJBQWlCO0VBQ2pCLFVBQVU7RUFDVixrQkFBa0I7RUFDbEIsbUJBQW1CO0FBQ3JCOztBQUVBO0VBQ0UsbUJBQW1CO0VBQ25CLFlBQVk7RUFDWixZQUFZO0VBQ1osYUFBYTtFQUNiLHVCQUF1QjtFQUN2QixZQUFZO0FBQ2Q7O0FBRUE7RUFDRSxlQUFlO0VBQ2Ysa0JBQWtCO0VBQ2xCLFdBQVc7RUFDWCxrQkFBa0I7O0VBRWxCLFlBQVk7RUFDWixpQkFBaUI7QUFDbkI7QUFDQTtFQUNFLG1CQUFtQjtBQUNyQjs7QUFFQTtFQUNFLFlBQVk7QUFDZFwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIubGF5ZXJTZWxlY3RvciB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBwb2ludGVyLWV2ZW50czogbm9uZTtcXG4gIHotaW5kZXg6IDI7XFxufVxcbi5sYXllclNlbGVjdG9yID4gKiB7XFxuICBwb2ludGVyLWV2ZW50czogYWxsO1xcbn1cXG5cXG4ubGF5ZXJTZWxlY3RvciB1bCB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIGxpc3Qtc3R5bGUtdHlwZTogbm9uZTtcXG4gIGdhcDogNHB4O1xcbiAgbWFyZ2luOiAwO1xcbiAgcGFkZGluZzogMDtcXG59XFxuLmxheWVyU2VsZWN0b3IgbGkge1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyMDEsIDIwMSwgMjAxLCAwLjUpO1xcbiAgY29sb3I6IGRhcmtncmF5O1xcbiAgYm9yZGVyLXJhZGl1czogMTVweDtcXG4gIGhlaWdodDogMzBweDtcXG4gIHBhZGRpbmc6IDBweDtcXG4gIG1hcmdpbjogMCAycHg7XFxuICB3aWR0aDogbWF4LWNvbnRlbnQ7XFxufVxcbi5sYXllclNlbGVjdG9yIGxpOmhvdmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoNjAsIDE3OSwgMTEzLCAwLjg1KTtcXG4gIGNvbG9yOiB3aGl0ZTtcXG4gIHBhZGRpbmctcmlnaHQ6IDM1cHg7XFxufVxcbi5sYXllclNlbGVjdG9yIGxpLmFjdGl2ZSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoNjAsIDE3OSwgMTEzKTtcXG4gIGNvbG9yOiB3aGl0ZTtcXG59XFxuXFxuLmxheWVyU2VsZWN0b3IgbGkgKiB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxufVxcbi5sYXllclNlbGVjdG9yIGxpIC5pbmRleCB7XFxuICBvdmVyZmxvdzogYXV0bztcXG4gIHdpZHRoOiAzMHB4O1xcbiAgaGVpZ2h0OiAzMHB4O1xcbiAgbGluZS1oZWlnaHQ6IDMwcHg7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxufVxcbi5sYXllclNlbGVjdG9yIGxpIC5uYW1lIHtcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxuICB3aWR0aDogMDtcXG4gIGhlaWdodDogMzBweDtcXG4gIGxpbmUtaGVpZ2h0OiAzMHB4O1xcbiAgcGFkZGluZzogMDtcXG4gIGZvbnQtdmFyaWFudDogc21hbGwtY2FwcztcXG59XFxuXFxuLmxheWVyU2VsZWN0b3IgdWwgbGk6aG92ZXIgLm5hbWUsXFxuLmxheWVyU2VsZWN0b3JbZGF0YS1yZW5hbWluZz1cXFwidHJ1ZVxcXCJdIGxpLmFjdGl2ZSAubmFtZSB7XFxuICB0cmFuc2l0aW9uOiAuMTVzIGVhc2UtaW47XFxuICB3aWR0aDogYXV0bztcXG4gIHBhZGRpbmc6IDAgMCAwIDEwcHg7XFxufVxcblxcbi5sYXllclNlbGVjdG9yIGJ1dHRvbiB7XFxuICB3aWR0aDogMzBweDtcXG4gIGhlaWdodDogMzBweDtcXG4gIGxpbmUtaGVpZ2h0OiAzMHB4O1xcbiAgcGFkZGluZzogMDtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIGJvcmRlci1yYWRpdXM6IDE1cHg7XFxufVxcblxcbi5sYXllclNlbGVjdG9yIGlucHV0Lm5hbWUge1xcbiAgdmVydGljYWwtYWxpZ246IHRvcDtcXG4gIHdpZHRoOiAxMDBweDtcXG4gIGJvcmRlcjogbm9uZTtcXG4gIG91dGxpbmU6IG5vbmU7XFxuICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcXG4gIGNvbG9yOiB3aGl0ZTtcXG59XFxuXFxuLmxheWVyU2VsZWN0b3IgLmRlbGV0ZSB7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICByaWdodDogMTBweDtcXG4gIHZpc2liaWxpdHk6IGhpZGRlbjtcXG5cXG4gIGhlaWdodDogMzBweDtcXG4gIGxpbmUtaGVpZ2h0OiAzMHB4O1xcbn1cXG4ubGF5ZXJTZWxlY3RvciBsaTpob3ZlciAuZGVsZXRlIHtcXG4gIHZpc2liaWxpdHk6IHZpc2libGU7XFxufVxcblxcbi5sYXllclNlbGVjdG9yIGxpLmFjdGl2ZSAubmFtZSB7XFxuICBjdXJzb3I6IHRleHQ7XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ubG9jYWxzID0ge1xuXHRcImxheWVyU2VsZWN0b3JcIjogXCJtOHl0c2ZZX01XWTlBSWlpVDNLSVwiLFxuXHRcImFjdGl2ZVwiOiBcInJ6WFZhaHptbUVPWG1qWGk4b2xnXCIsXG5cdFwiaW5kZXhcIjogXCJMX0dKRXFuRmJheV9aek0wWWg3QlwiLFxuXHRcIm5hbWVcIjogXCJma1pad2VnUkV5dV9XazlQdzZzN1wiLFxuXHRcImRlbGV0ZVwiOiBcIk5iRmdaeG55QUY5RUlqeDhuY1BNXCJcbn07XG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLkV3dlZOWTZ2bGY3SHdZbVhUYnppIHtcXG4gIG1hcmdpbjogMTBweCAwO1xcbiAgZGlzcGxheTogZmxleDtcXG59XFxuXFxuLkV3dlZOWTZ2bGY3SHdZbVhUYnppIGxhYmVsIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIHdpZHRoOiAxMjBweDtcXG4gIHRleHQtYWxpZ246IHJpZ2h0O1xcbiAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xcbn1cXG5cXG4udWhpQ183VHpON2VDTmJtNUM2YThbZGF0YS1zZW5zb3ItY291bnQ9XFxcIjBcXFwiXSB7XFxuICBkaXNwbGF5OiBub25lO1xcbn1cXG5cXG4ucmFOa2h4bUdUcXRLUUk5WDJnVkE6bm90KC55N3k2eXBNd21TYWZRS2d0N29Cdykge1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG4ucmFOa2h4bUdUcXRLUUk5WDJnVkEgPiAqIHtcXG4gIHBvaW50ZXItZXZlbnRzOiBub25lO1xcbn1cXG4ucmFOa2h4bUdUcXRLUUk5WDJnVkE6aG92ZXIsIC55N3k2eXBNd21TYWZRS2d0N29CdyB7XFxuICBjb2xvcjogdmFyKC0ta2V5LWNvbG9yLWhvdmVyKTtcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXNlbGVjdGlvbik7XFxufVxcbi5yYU5raHhtR1RxdEtRSTlYMmdWQTpob3ZlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1ob3Zlci1zZWxlY3Rpb24pO1xcbn1cXG5cXG4uc2FoTVNOSUdfOTRIbjl0RUVaOHEge1xcbiAgbWF4LXdpZHRoOiA4MHZ3O1xcbiAgb3ZlcmZsb3cteDogc2Nyb2xsO1xcbn1cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvS2V5Ym9hcmQvTGF5ZXJzL3N0eWxlLm1vZHVsZS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSxjQUFjO0VBQ2QsYUFBYTtBQUNmOztBQUVBO0VBQ0UscUJBQXFCO0VBQ3JCLFlBQVk7RUFDWixpQkFBaUI7RUFDakIsa0JBQWtCO0FBQ3BCOztBQUVBO0VBQ0UsYUFBYTtBQUNmOztBQUVBO0VBQ0UsZUFBZTtBQUNqQjtBQUNBO0VBQ0Usb0JBQW9CO0FBQ3RCO0FBQ0E7RUFDRSw2QkFBNkI7RUFDN0Isa0NBQWtDO0FBQ3BDO0FBQ0E7RUFDRSx3Q0FBd0M7QUFDMUM7O0FBRUE7RUFDRSxlQUFlO0VBQ2Ysa0JBQWtCO0FBQ3BCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5maWVsZCB7XFxuICBtYXJnaW46IDEwcHggMDtcXG4gIGRpc3BsYXk6IGZsZXg7XFxufVxcblxcbi5maWVsZCBsYWJlbCB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICB3aWR0aDogMTIwcHg7XFxuICB0ZXh0LWFsaWduOiByaWdodDtcXG4gIG1hcmdpbi1yaWdodDogMTBweDtcXG59XFxuXFxuLnNlbnNvcnNbZGF0YS1zZW5zb3ItY291bnQ9XFxcIjBcXFwiXSB7XFxuICBkaXNwbGF5OiBub25lO1xcbn1cXG5cXG4ucXVpY2tCaW5kS2V5Om5vdCgucXVpY2tCaW5kS2V5SGlnaGxpZ2h0KSB7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcbi5xdWlja0JpbmRLZXkgPiAqIHtcXG4gIHBvaW50ZXItZXZlbnRzOiBub25lO1xcbn1cXG4ucXVpY2tCaW5kS2V5OmhvdmVyLCAucXVpY2tCaW5kS2V5SGlnaGxpZ2h0IHtcXG4gIGNvbG9yOiB2YXIoLS1rZXktY29sb3ItaG92ZXIpO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tc2VsZWN0aW9uKTtcXG59XFxuLnF1aWNrQmluZEtleTpob3ZlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1ob3Zlci1zZWxlY3Rpb24pO1xcbn1cXG5cXG4ucXVpY2tBc3NpZ25EaWFsb2cge1xcbiAgbWF4LXdpZHRoOiA4MHZ3O1xcbiAgb3ZlcmZsb3cteDogc2Nyb2xsO1xcbn1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmxvY2FscyA9IHtcblx0XCJmaWVsZFwiOiBcIkV3dlZOWTZ2bGY3SHdZbVhUYnppXCIsXG5cdFwic2Vuc29yc1wiOiBcInVoaUNfN1R6TjdlQ05ibTVDNmE4XCIsXG5cdFwicXVpY2tCaW5kS2V5XCI6IFwicmFOa2h4bUdUcXRLUUk5WDJnVkFcIixcblx0XCJxdWlja0JpbmRLZXlIaWdobGlnaHRcIjogXCJ5N3k2eXBNd21TYWZRS2d0N29Cd1wiLFxuXHRcInF1aWNrQXNzaWduRGlhbG9nXCI6IFwic2FoTVNOSUdfOTRIbjl0RUVaOHFcIlxufTtcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCJcXG4uTzhTRWZxRTJFd2MzYjdjN21ZX04ge1xcbiAgcG9zaXRpb246YWJzb2x1dGU7XFxuICB0b3A6IC01cHg7XFxuICBsZWZ0OiAwcHg7XFxuICB3aWR0aDogMTAwJTtcXG4gIC8qIGJvcmRlcjogMXB4IHNvbGlkIHJlZDsgKi9cXG4gIC8qIHBhZGRpbmc6IDVweDsgKi9cXG4gIC8qIG9wYWNpdHk6IDAuNTsgKi9cXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LXdyYXA6IHdyYXA7XFxufVxcblxcbi5zOU81NkxXWkJLSGN0Vlo0YTZmYSB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICB3aWR0aDogMzcuNXB4O1xcbiAgaGVpZ2h0OiA2NXB4O1xcbiAgbWFyZ2luOiAwO1xcbn1cXG5cXG4uczlPNTZMV1pCS0hjdFZaNGE2ZmFbZGF0YS1pcy1jb250cm9sPVxcXCJ0cnVlXFxcIl0ge1xcbiAgd2lkdGg6IDQ1MHB4O1xcbiAgaGVpZ2h0OiAxNXB4O1xcbn1cXG5cXG4uTk53Wm11ckpXbElmdmIzQldsTlgge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgd2lkdGg6IDQ1MHB4O1xcbiAgaGVpZ2h0OiAxMHB4O1xcbn1cXG4uTk53Wm11ckpXbElmdmIzQldsTlgud1ZZVmZEVnNDS0ZOalFjR0tJVkk6OmFmdGVyIHtcXG4gIGNvbnRlbnQ6ICcnO1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDUwJTtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlKDAsIC01MCUpO1xcbiAgd2lkdGg6IDQ1MHB4O1xcbiAgaGVpZ2h0OiA0cHg7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1zZWxlY3Rpb24pO1xcbn1cXG4uTURmeTZSY0dCbG04V19DaFJoeVBbZGF0YS1leHRlbmQ9XFxcIjFcXFwiXSB7IHdpZHRoOiBjYWxjKDM3LjVweCArIDEgKiA3NXB4KTsgfVxcbi5NRGZ5NlJjR0JsbThXX0NoUmh5UFtkYXRhLWV4dGVuZD1cXFwiMlxcXCJdIHsgd2lkdGg6IGNhbGMoMzcuNXB4ICsgMiAqIDc1cHgpOyB9XFxuLk1EZnk2UmNHQmxtOFdfQ2hSaHlQW2RhdGEtZXh0ZW5kPVxcXCIzXFxcIl0geyB3aWR0aDogY2FsYygzNy41cHggKyAzICogNzVweCk7IH1cXG4uTURmeTZSY0dCbG04V19DaFJoeVBbZGF0YS1leHRlbmQ9XFxcIjRcXFwiXSB7IHdpZHRoOiBjYWxjKDM3LjVweCArIDQgKiA3NXB4KTsgfVxcbi5NRGZ5NlJjR0JsbThXX0NoUmh5UFtkYXRhLWV4dGVuZD1cXFwiNVxcXCJdIHsgd2lkdGg6IGNhbGMoMzcuNXB4ICsgNSAqIDc1cHgpOyB9XFxuXFxuLyogLmRyb3BUYXJnZXRIYWxmIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IGJsdWU7XFxuICBvcGFjaXR5OiAwLjI1O1xcbn1cXG4uZHJvcFRhcmdldEhhbGYuc2Vjb25kSGFsZiB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZWQ7XFxufVxcbi5kcm9wVGFyZ2V0Um93IHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHB1cnBsZTtcXG4gIG9wYWNpdHk6IDAuMjU7XFxufSAqL1xcblxcbi53VllWZkRWc0NLRk5qUWNHS0lWSS5zOU81NkxXWkJLSGN0Vlo0YTZmYTpub3QoLk1EZnk2UmNHQmxtOFdfQ2hSaHlQKTpub3QoW2RhdGEtaXMtY29udHJvbD1cXFwidHJ1ZVxcXCJdKTo6YmVmb3JlLFxcbi53VllWZkRWc0NLRk5qUWNHS0lWSS5NRGZ5NlJjR0JsbThXX0NoUmh5UDpub3QoW2RhdGEtaXMtY29udHJvbD1cXFwidHJ1ZVxcXCJdKTo6YWZ0ZXIge1xcbiAgY29udGVudDogJyc7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIGhlaWdodDogNjVweDtcXG4gIHdpZHRoOiA0cHg7XFxuICBib3JkZXItcmFkaXVzOiA0cHg7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1zZWxlY3Rpb24pO1xcbn1cXG5cXG4uQXVGQjlXaUN5blBfb09OWWhPdnEgLndWWVZmRFZzQ0tGTmpRY0dLSVZJOm5vdChbZGF0YS1kcm9wLW1vZGU9XFxcInJvd1xcXCJdKTo6YmVmb3JlLFxcbi5BdUZCOVdpQ3luUF9vT05ZaE92cSAud1ZZVmZEVnNDS0ZOalFjR0tJVkk6bm90KFtkYXRhLWRyb3AtbW9kZT1cXFwicm93XFxcIl0pOjphZnRlciB7XFxuICAgdmlzaWJpbGl0eTogaGlkZGVuO1xcbiB9XFxuXFxuLnM5TzU2TFdaQktIY3RWWjRhNmZhOm5vdCguTURmeTZSY0dCbG04V19DaFJoeVApOm5vdChbZGF0YS1pcy1jb250cm9sPVxcXCJ0cnVlXFxcIl0pOjpiZWZvcmUge1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgMCk7XFxufVxcbi5NRGZ5NlJjR0JsbThXX0NoUmh5UDpub3QoW2RhdGEtaXMtY29udHJvbD1cXFwidHJ1ZVxcXCJdKTo6YWZ0ZXIge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgbGVmdDogMzIuNXB4O1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoNTAlLCAwKTtcXG59XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL0tleWJvYXJkL01hY3Jvcy9kcmFnLWFuZC1kcm9wLm1vZHVsZS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIjtBQUNBO0VBQ0UsaUJBQWlCO0VBQ2pCLFNBQVM7RUFDVCxTQUFTO0VBQ1QsV0FBVztFQUNYLDJCQUEyQjtFQUMzQixrQkFBa0I7RUFDbEIsa0JBQWtCO0VBQ2xCLGFBQWE7RUFDYixlQUFlO0FBQ2pCOztBQUVBO0VBQ0Usa0JBQWtCO0VBQ2xCLGFBQWE7RUFDYixZQUFZO0VBQ1osU0FBUztBQUNYOztBQUVBO0VBQ0UsWUFBWTtFQUNaLFlBQVk7QUFDZDs7QUFFQTtFQUNFLGtCQUFrQjtFQUNsQixZQUFZO0VBQ1osWUFBWTtBQUNkO0FBQ0E7RUFDRSxXQUFXO0VBQ1gsY0FBYztFQUNkLGtCQUFrQjtFQUNsQixRQUFRO0VBQ1IsNkJBQTZCO0VBQzdCLFlBQVk7RUFDWixXQUFXO0VBQ1gsa0NBQWtDO0FBQ3BDO0FBQ0EseUNBQStCLDhCQUE4QixFQUFFO0FBQy9ELHlDQUErQiw4QkFBOEIsRUFBRTtBQUMvRCx5Q0FBK0IsOEJBQThCLEVBQUU7QUFDL0QseUNBQStCLDhCQUE4QixFQUFFO0FBQy9ELHlDQUErQiw4QkFBOEIsRUFBRTs7QUFFL0Q7Ozs7Ozs7Ozs7R0FVRzs7QUFFSDs7RUFFRSxXQUFXO0VBQ1gsY0FBYztFQUNkLFlBQVk7RUFDWixVQUFVO0VBQ1Ysa0JBQWtCO0VBQ2xCLGtDQUFrQztBQUNwQzs7QUFFQTs7R0FFRyxrQkFBa0I7Q0FDcEI7O0FBRUQ7RUFDRSw2QkFBNkI7QUFDL0I7QUFDQTtFQUNFLGtCQUFrQjtFQUNsQixZQUFZO0VBQ1osNEJBQTRCO0FBQzlCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIlxcbi5kcm9wVGFyZ2V0cyB7XFxuICBwb3NpdGlvbjphYnNvbHV0ZTtcXG4gIHRvcDogLTVweDtcXG4gIGxlZnQ6IDBweDtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgLyogYm9yZGVyOiAxcHggc29saWQgcmVkOyAqL1xcbiAgLyogcGFkZGluZzogNXB4OyAqL1xcbiAgLyogb3BhY2l0eTogMC41OyAqL1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtd3JhcDogd3JhcDtcXG59XFxuXFxuLmRyb3BUYXJnZXRIYWxmIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIHdpZHRoOiAzNy41cHg7XFxuICBoZWlnaHQ6IDY1cHg7XFxuICBtYXJnaW46IDA7XFxufVxcblxcbi5kcm9wVGFyZ2V0SGFsZltkYXRhLWlzLWNvbnRyb2w9XFxcInRydWVcXFwiXSB7XFxuICB3aWR0aDogNDUwcHg7XFxuICBoZWlnaHQ6IDE1cHg7XFxufVxcblxcbi5kcm9wVGFyZ2V0Um93IHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIHdpZHRoOiA0NTBweDtcXG4gIGhlaWdodDogMTBweDtcXG59XFxuLmRyb3BUYXJnZXRSb3cuZHJvcHBhYmxlOjphZnRlciB7XFxuICBjb250ZW50OiAnJztcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgdG9wOiA1MCU7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgwLCAtNTAlKTtcXG4gIHdpZHRoOiA0NTBweDtcXG4gIGhlaWdodDogNHB4O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tc2VsZWN0aW9uKTtcXG59XFxuLnNlY29uZEhhbGZbZGF0YS1leHRlbmQ9XFxcIjFcXFwiXSB7IHdpZHRoOiBjYWxjKDM3LjVweCArIDEgKiA3NXB4KTsgfVxcbi5zZWNvbmRIYWxmW2RhdGEtZXh0ZW5kPVxcXCIyXFxcIl0geyB3aWR0aDogY2FsYygzNy41cHggKyAyICogNzVweCk7IH1cXG4uc2Vjb25kSGFsZltkYXRhLWV4dGVuZD1cXFwiM1xcXCJdIHsgd2lkdGg6IGNhbGMoMzcuNXB4ICsgMyAqIDc1cHgpOyB9XFxuLnNlY29uZEhhbGZbZGF0YS1leHRlbmQ9XFxcIjRcXFwiXSB7IHdpZHRoOiBjYWxjKDM3LjVweCArIDQgKiA3NXB4KTsgfVxcbi5zZWNvbmRIYWxmW2RhdGEtZXh0ZW5kPVxcXCI1XFxcIl0geyB3aWR0aDogY2FsYygzNy41cHggKyA1ICogNzVweCk7IH1cXG5cXG4vKiAuZHJvcFRhcmdldEhhbGYge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogYmx1ZTtcXG4gIG9wYWNpdHk6IDAuMjU7XFxufVxcbi5kcm9wVGFyZ2V0SGFsZi5zZWNvbmRIYWxmIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJlZDtcXG59XFxuLmRyb3BUYXJnZXRSb3cge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcHVycGxlO1xcbiAgb3BhY2l0eTogMC4yNTtcXG59ICovXFxuXFxuLmRyb3BwYWJsZS5kcm9wVGFyZ2V0SGFsZjpub3QoLnNlY29uZEhhbGYpOm5vdChbZGF0YS1pcy1jb250cm9sPVxcXCJ0cnVlXFxcIl0pOjpiZWZvcmUsXFxuLmRyb3BwYWJsZS5zZWNvbmRIYWxmOm5vdChbZGF0YS1pcy1jb250cm9sPVxcXCJ0cnVlXFxcIl0pOjphZnRlciB7XFxuICBjb250ZW50OiAnJztcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgaGVpZ2h0OiA2NXB4O1xcbiAgd2lkdGg6IDRweDtcXG4gIGJvcmRlci1yYWRpdXM6IDRweDtcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXNlbGVjdGlvbik7XFxufVxcblxcbi5kcm9wUm93T25seSAuZHJvcHBhYmxlOm5vdChbZGF0YS1kcm9wLW1vZGU9XFxcInJvd1xcXCJdKTo6YmVmb3JlLFxcbi5kcm9wUm93T25seSAuZHJvcHBhYmxlOm5vdChbZGF0YS1kcm9wLW1vZGU9XFxcInJvd1xcXCJdKTo6YWZ0ZXIge1xcbiAgIHZpc2liaWxpdHk6IGhpZGRlbjtcXG4gfVxcblxcbi5kcm9wVGFyZ2V0SGFsZjpub3QoLnNlY29uZEhhbGYpOm5vdChbZGF0YS1pcy1jb250cm9sPVxcXCJ0cnVlXFxcIl0pOjpiZWZvcmUge1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgMCk7XFxufVxcbi5zZWNvbmRIYWxmOm5vdChbZGF0YS1pcy1jb250cm9sPVxcXCJ0cnVlXFxcIl0pOjphZnRlciB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBsZWZ0OiAzMi41cHg7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSg1MCUsIDApO1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmxvY2FscyA9IHtcblx0XCJkcm9wVGFyZ2V0c1wiOiBcIk84U0VmcUUyRXdjM2I3YzdtWV9OXCIsXG5cdFwiZHJvcFRhcmdldEhhbGZcIjogXCJzOU81NkxXWkJLSGN0Vlo0YTZmYVwiLFxuXHRcImRyb3BUYXJnZXRSb3dcIjogXCJOTndabXVySldsSWZ2YjNCV2xOWFwiLFxuXHRcImRyb3BwYWJsZVwiOiBcIndWWVZmRFZzQ0tGTmpRY0dLSVZJXCIsXG5cdFwic2Vjb25kSGFsZlwiOiBcIk1EZnk2UmNHQmxtOFdfQ2hSaHlQXCIsXG5cdFwiZHJvcFJvd09ubHlcIjogXCJBdUZCOVdpQ3luUF9vT05ZaE92cVwiXG59O1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5rYzhBdTMyN3BtSWpLTzdhdUxYVCB7XFxuICBwYWRkaW5nLWJvdHRvbTogNjBweDtcXG59XFxuXFxuLkI4RnBSdFZkeGJ2Smp3Wm9WTkI0IHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBwb3NpdGlvbjogZml4ZWQ7XFxuICB3aWR0aDogMTgwcHg7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgcGFkZGluZzogMTBweDtcXG4gIGdhcDogMTBweDtcXG59XFxuXFxuLlVzM0loZjBBb1ZiWnZEdWxQNzRRIHtcXG4gIHdpZHRoOiA1NTBweDtcXG4gIG1hcmdpbjogMTBweCBhdXRvIDQwcHg7XFxufVxcbi5PVkk0SWtWc1Z6eWswZUlBbjlOWCB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcbiAgYm9yZGVyLWJvdHRvbTogMnB4IHNvbGlkIHZhcigtLWtleS1iZy1iYXNlKTtcXG4gIG1hcmdpbjogNXB4IDA7XFxufVxcbi5PVkk0SWtWc1Z6eWswZUlBbjlOWCBoNSB7XFxuICBtYXJnaW46IDA7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcbi5RTmxTT19HU0doUmZVRlJFX3Y4RSB7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBwYWRkaW5nOiA1cHg7XFxuICBvcGFjaXR5OiAwLjY7XFxufVxcbi5RTmxTT19HU0doUmZVRlJFX3Y4RTpob3ZlciB7XFxuICBvcGFjaXR5OiAxO1xcbn1cXG4uRHZ6QndHREg3SHNubklicWFlSGkge1xcbiAgY29sb3I6IHZhcigtLWRlbGV0ZSk7XFxufVxcblxcbi5td2hSX1c3aXFIcTgwM3hOQlYxSCB7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxufVxcbi5td2hSX1c3aXFIcTgwM3hOQlYxSCA+ICoge1xcbiAgbWFyZ2luOiA1cHg7XFxufVxcblxcbi5UQmdUN25CN0pTU2puVHBNUWVYcCB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICB3aWR0aDogNDUwcHg7XFxuICAvKiBib3JkZXI6IDFweCBzb2xpZCBsaWdodGdyYXk7ICovXFxuICBtYXJnaW46IDAgYXV0bztcXG4gIHBhZGRpbmc6IDVweDtcXG5cXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LXdyYXA6IHdyYXA7XFxufVxcblxcbi5UQmdUN25CN0pTU2puVHBNUWVYcCA+ICoge1xcbiAgbWFyZ2luOiA1cHg7XFxuICB3aWR0aDogNjVweDtcXG4gIGhlaWdodDogNjVweDtcXG59XFxuXFxuLllNSmJzTHZuRUdPYlV5NFlfaTZ3IHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiAzMHB4O1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG59XFxuLllNSmJzTHZuRUdPYlV5NFlfaTZ3OmhvdmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWhvdmVyLXNlbGVjdGlvbik7XFxuICBjb2xvcjogdmFyKC0ta2V5LWNvbG9yLWhvdmVyKTtcXG59XFxuLllNSmJzTHZuRUdPYlV5NFlfaTZ3ID4gOmZpcnN0LWNoaWxkIHtcXG4gIHdpZHRoOiAxMDAlICFpbXBvcnRhbnQ7XFxuICBoZWlnaHQ6IDEwMCUgIWltcG9ydGFudDtcXG59XFxuXFxuLlRCZ1Q3bkI3SlNTam5UcE1RZVhwIFtkcmFnZ2FibGVdIHtcXG4gIGN1cnNvcjogZ3JhYjtcXG59XFxuXFxuLkk1ZHJjNGRBNUtwc2hwM1BQbGUxIHtcXG4gIHZpc2liaWxpdHk6IGhpZGRlbjtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogMHB4O1xcbiAgcmlnaHQ6IDBweDtcXG4gIGZvbnQtc2l6ZTogODAlO1xcblxcbiAgY29sb3I6IHZhcigtLWtleS1jb2xvci1ob3Zlcik7XFxufVxcbi5JNWRyYzRkQTVLcHNocDNQUGxlMSA+ICoge1xcbiAgbWFyZ2luOiAycHg7XFxuICBvcGFjaXR5OiAwLjU7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcbi5UQmdUN25CN0pTU2puVHBNUWVYcCA6aG92ZXIgLkk1ZHJjNGRBNUtwc2hwM1BQbGUxIHtcXG4gIHZpc2liaWxpdHk6IHZpc2libGU7XFxuICB6LWluZGV4OiAxMDtcXG59XFxuXFxuLkk1ZHJjNGRBNUtwc2hwM1BQbGUxIDpob3ZlciB7XFxuICBvcGFjaXR5OiAxO1xcbn1cXG5cXG5cXG4uaUQ5RHNLTVpaMWRReHIwNDQ4OHcge1xcbiAgbWFyZ2luOiAxMHB4IDA7XFxuICBkaXNwbGF5OiBmbGV4O1xcbn1cXG5cXG4uaUQ5RHNLTVpaMWRReHIwNDQ4OHcgbGFiZWwge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgd2lkdGg6IDEyMHB4O1xcbiAgdGV4dC1hbGlnbjogcmlnaHQ7XFxuICBtYXJnaW4tcmlnaHQ6IDEwcHg7XFxufVxcblxcbi5xdUdPN1hGUHJIb1lpcXUyMm13ZyB7XFxuICBmb250LXNpemU6IDgwJTtcXG59XCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL0tleWJvYXJkL01hY3Jvcy9zdHlsZXMubW9kdWxlLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLG9CQUFvQjtBQUN0Qjs7QUFFQTtFQUNFLGFBQWE7RUFDYixlQUFlO0VBQ2YsWUFBWTtFQUNaLHNCQUFzQjtFQUN0QixhQUFhO0VBQ2IsU0FBUztBQUNYOztBQUVBO0VBQ0UsWUFBWTtFQUNaLHNCQUFzQjtBQUN4QjtBQUNBO0VBQ0UsYUFBYTtFQUNiLGtCQUFrQjtFQUNsQiw4QkFBOEI7RUFDOUIsMkNBQTJDO0VBQzNDLGFBQWE7QUFDZjtBQUNBO0VBQ0UsU0FBUztFQUNULGVBQWU7QUFDakI7QUFDQTtFQUNFLGVBQWU7RUFDZixZQUFZO0VBQ1osWUFBWTtBQUNkO0FBQ0E7RUFDRSxVQUFVO0FBQ1o7QUFDQTtFQUNFLG9CQUFvQjtBQUN0Qjs7QUFFQTtFQUNFLGtCQUFrQjtBQUNwQjtBQUNBO0VBQ0UsV0FBVztBQUNiOztBQUVBO0VBQ0Usa0JBQWtCO0VBQ2xCLFlBQVk7RUFDWixpQ0FBaUM7RUFDakMsY0FBYztFQUNkLFlBQVk7O0VBRVosYUFBYTtFQUNiLGVBQWU7QUFDakI7O0FBRUE7RUFDRSxXQUFXO0VBQ1gsV0FBVztFQUNYLFlBQVk7QUFDZDs7QUFFQTtFQUNFLFdBQVc7RUFDWCxZQUFZO0VBQ1osc0JBQXNCO0FBQ3hCO0FBQ0E7RUFDRSx3Q0FBd0M7RUFDeEMsNkJBQTZCO0FBQy9CO0FBQ0E7RUFDRSxzQkFBc0I7RUFDdEIsdUJBQXVCO0FBQ3pCOztBQUVBO0VBQ0UsWUFBWTtBQUNkOztBQUVBO0VBQ0Usa0JBQWtCO0VBQ2xCLGtCQUFrQjtFQUNsQixRQUFRO0VBQ1IsVUFBVTtFQUNWLGNBQWM7O0VBRWQsNkJBQTZCO0FBQy9CO0FBQ0E7RUFDRSxXQUFXO0VBQ1gsWUFBWTtFQUNaLGVBQWU7QUFDakI7QUFDQTtFQUNFLG1CQUFtQjtFQUNuQixXQUFXO0FBQ2I7O0FBRUE7RUFDRSxVQUFVO0FBQ1o7OztBQUdBO0VBQ0UsY0FBYztFQUNkLGFBQWE7QUFDZjs7QUFFQTtFQUNFLHFCQUFxQjtFQUNyQixZQUFZO0VBQ1osaUJBQWlCO0VBQ2pCLGtCQUFrQjtBQUNwQjs7QUFFQTtFQUNFLGNBQWM7QUFDaEJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLm1haW4ge1xcbiAgcGFkZGluZy1ib3R0b206IDYwcHg7XFxufVxcblxcbi5zaWRlYmFyIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBwb3NpdGlvbjogZml4ZWQ7XFxuICB3aWR0aDogMTgwcHg7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgcGFkZGluZzogMTBweDtcXG4gIGdhcDogMTBweDtcXG59XFxuXFxuLm1hY3JvIHtcXG4gIHdpZHRoOiA1NTBweDtcXG4gIG1hcmdpbjogMTBweCBhdXRvIDQwcHg7XFxufVxcbi5oZWFkaW5nIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxuICBib3JkZXItYm90dG9tOiAycHggc29saWQgdmFyKC0ta2V5LWJnLWJhc2UpO1xcbiAgbWFyZ2luOiA1cHggMDtcXG59XFxuLmhlYWRpbmcgaDUge1xcbiAgbWFyZ2luOiAwO1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG4uYWN0aW9uIHtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIHBhZGRpbmc6IDVweDtcXG4gIG9wYWNpdHk6IDAuNjtcXG59XFxuLmFjdGlvbjpob3ZlciB7XFxuICBvcGFjaXR5OiAxO1xcbn1cXG4ucmVtb3ZlIHtcXG4gIGNvbG9yOiB2YXIoLS1kZWxldGUpO1xcbn1cXG5cXG4ubWFjcm9BY3Rpb25zIHtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG59XFxuLm1hY3JvQWN0aW9ucyA+ICoge1xcbiAgbWFyZ2luOiA1cHg7XFxufVxcblxcbi5tYWNyb0JpbmRpbmdzIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIHdpZHRoOiA0NTBweDtcXG4gIC8qIGJvcmRlcjogMXB4IHNvbGlkIGxpZ2h0Z3JheTsgKi9cXG4gIG1hcmdpbjogMCBhdXRvO1xcbiAgcGFkZGluZzogNXB4O1xcblxcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtd3JhcDogd3JhcDtcXG59XFxuXFxuLm1hY3JvQmluZGluZ3MgPiAqIHtcXG4gIG1hcmdpbjogNXB4O1xcbiAgd2lkdGg6IDY1cHg7XFxuICBoZWlnaHQ6IDY1cHg7XFxufVxcblxcbi5jb250cm9sQmluZGluZyB7XFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogMzBweDtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxufVxcbi5jb250cm9sQmluZGluZzpob3ZlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1ob3Zlci1zZWxlY3Rpb24pO1xcbiAgY29sb3I6IHZhcigtLWtleS1jb2xvci1ob3Zlcik7XFxufVxcbi5jb250cm9sQmluZGluZyA+IDpmaXJzdC1jaGlsZCB7XFxuICB3aWR0aDogMTAwJSAhaW1wb3J0YW50O1xcbiAgaGVpZ2h0OiAxMDAlICFpbXBvcnRhbnQ7XFxufVxcblxcbi5tYWNyb0JpbmRpbmdzIFtkcmFnZ2FibGVdIHtcXG4gIGN1cnNvcjogZ3JhYjtcXG59XFxuXFxuLmFjdGlvbnMge1xcbiAgdmlzaWJpbGl0eTogaGlkZGVuO1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgdG9wOiAwcHg7XFxuICByaWdodDogMHB4O1xcbiAgZm9udC1zaXplOiA4MCU7XFxuXFxuICBjb2xvcjogdmFyKC0ta2V5LWNvbG9yLWhvdmVyKTtcXG59XFxuLmFjdGlvbnMgPiAqIHtcXG4gIG1hcmdpbjogMnB4O1xcbiAgb3BhY2l0eTogMC41O1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG4ubWFjcm9CaW5kaW5ncyA6aG92ZXIgLmFjdGlvbnMge1xcbiAgdmlzaWJpbGl0eTogdmlzaWJsZTtcXG4gIHotaW5kZXg6IDEwO1xcbn1cXG5cXG4uYWN0aW9ucyA6aG92ZXIge1xcbiAgb3BhY2l0eTogMTtcXG59XFxuXFxuXFxuLmZpZWxkIHtcXG4gIG1hcmdpbjogMTBweCAwO1xcbiAgZGlzcGxheTogZmxleDtcXG59XFxuXFxuLmZpZWxkIGxhYmVsIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIHdpZHRoOiAxMjBweDtcXG4gIHRleHQtYWxpZ246IHJpZ2h0O1xcbiAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xcbn1cXG5cXG4uYmV0YURpc2NsYWltZXIge1xcbiAgZm9udC1zaXplOiA4MCU7XFxufVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ubG9jYWxzID0ge1xuXHRcIm1haW5cIjogXCJrYzhBdTMyN3BtSWpLTzdhdUxYVFwiLFxuXHRcInNpZGViYXJcIjogXCJCOEZwUnRWZHhidkpqd1pvVk5CNFwiLFxuXHRcIm1hY3JvXCI6IFwiVXMzSWhmMEFvVmJadkR1bFA3NFFcIixcblx0XCJoZWFkaW5nXCI6IFwiT1ZJNElrVnNWenlrMGVJQW45TlhcIixcblx0XCJhY3Rpb25cIjogXCJRTmxTT19HU0doUmZVRlJFX3Y4RVwiLFxuXHRcInJlbW92ZVwiOiBcIkR2ekJ3R0RIN0hzbm5JYnFhZUhpXCIsXG5cdFwibWFjcm9BY3Rpb25zXCI6IFwibXdoUl9XN2lxSHE4MDN4TkJWMUhcIixcblx0XCJtYWNyb0JpbmRpbmdzXCI6IFwiVEJnVDduQjdKU1NqblRwTVFlWHBcIixcblx0XCJjb250cm9sQmluZGluZ1wiOiBcIllNSmJzTHZuRUdPYlV5NFlfaTZ3XCIsXG5cdFwiYWN0aW9uc1wiOiBcIkk1ZHJjNGRBNUtwc2hwM1BQbGUxXCIsXG5cdFwiZmllbGRcIjogXCJpRDlEc0tNWloxZFF4cjA0NDg4d1wiLFxuXHRcImJldGFEaXNjbGFpbWVyXCI6IFwicXVHTzdYRlBySG9ZaXF1MjJtd2dcIlxufTtcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIuX0V0NDNSSURCUzMxV0dUc0pXNlEge1xcbiAgbWFyZ2luOiAyMHB4IDAgMzVweDtcXG59XFxuLl9FdDQzUklEQlMzMVdHVHNKVzZRIGgzIHtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuLl9FdDQzUklEQlMzMVdHVHNKVzZRIGgzOmhvdmVyIHtcXG4gIGNvbG9yOiByb3lhbGJsdWU7XFxufVxcblxcbi5VRDlMOEd0eFJ5Wk5DbDZhNWRzQSB7XFxuICBjb2xvcjogdmFyKC0ta2V5LWNvbG9yLWJhc2UpO1xcbiAgb3BhY2l0eTogMC43O1xcbn1cXG5cXG4uc2FoNEJ1MXhxNzJMN0REZW1PelUge1xcbiAgcGFkZGluZy1sZWZ0OiAxNnB4O1xcbn1cXG5cXG4ucFNrN3k2elU5SjhVX0l5YmJoWkIgLnJocXczTkg4TnF2YmVWMGlkbUp6IHtcXG4gIHRyYW5zZm9ybTogcm90YXRlKC05MGRlZyk7XFxuICB0cmFuc2l0aW9uOiAxMDBtcztcXG59XFxuXFxuLnBTazd5NnpVOUo4VV9JeWJiaFpCIC5zYWg0QnUxeHE3Mkw3RERlbU96VSB7XFxuICBkaXNwbGF5OiBub25lO1xcbn1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvS2V5Ym9hcmQvV2FybmluZ3Mvc3R5bGVzLm1vZHVsZS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSxtQkFBbUI7QUFDckI7QUFDQTtFQUNFLGVBQWU7QUFDakI7QUFDQTtFQUNFLGdCQUFnQjtBQUNsQjs7QUFFQTtFQUNFLDRCQUE0QjtFQUM1QixZQUFZO0FBQ2Q7O0FBRUE7RUFDRSxrQkFBa0I7QUFDcEI7O0FBRUE7RUFDRSx5QkFBeUI7RUFDekIsaUJBQWlCO0FBQ25COztBQUVBO0VBQ0UsYUFBYTtBQUNmXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi53YXJuaW5nQ2F0ZWdvcnkge1xcbiAgbWFyZ2luOiAyMHB4IDAgMzVweDtcXG59XFxuLndhcm5pbmdDYXRlZ29yeSBoMyB7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcbi53YXJuaW5nQ2F0ZWdvcnkgaDM6aG92ZXIge1xcbiAgY29sb3I6IHJveWFsYmx1ZTtcXG59XFxuXFxuLmVtcHR5Q2F0ZWdvcnkge1xcbiAgY29sb3I6IHZhcigtLWtleS1jb2xvci1iYXNlKTtcXG4gIG9wYWNpdHk6IDAuNztcXG59XFxuXFxuLndhcm5pbmdEZXRhaWxzIHtcXG4gIHBhZGRpbmctbGVmdDogMTZweDtcXG59XFxuXFxuLmNvbGxhcHNlZENhdGVnb3J5IC5jYXJldCB7XFxuICB0cmFuc2Zvcm06IHJvdGF0ZSgtOTBkZWcpO1xcbiAgdHJhbnNpdGlvbjogMTAwbXM7XFxufVxcblxcbi5jb2xsYXBzZWRDYXRlZ29yeSAud2FybmluZ0RldGFpbHMge1xcbiAgZGlzcGxheTogbm9uZTtcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5sb2NhbHMgPSB7XG5cdFwid2FybmluZ0NhdGVnb3J5XCI6IFwiX0V0NDNSSURCUzMxV0dUc0pXNlFcIixcblx0XCJlbXB0eUNhdGVnb3J5XCI6IFwiVUQ5TDhHdHhSeVpOQ2w2YTVkc0FcIixcblx0XCJ3YXJuaW5nRGV0YWlsc1wiOiBcInNhaDRCdTF4cTcyTDdERGVtT3pVXCIsXG5cdFwiY29sbGFwc2VkQ2F0ZWdvcnlcIjogXCJwU2s3eTZ6VTlKOFVfSXliYmhaQlwiLFxuXHRcImNhcmV0XCI6IFwicmhxdzNOSDhOcXZiZVYwaWRtSnpcIlxufTtcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIuRDBCSDM5XzZ3d2ljbFc4YUt1b2kge1xcbiAgZGlzcGxheTogaW5saW5lLWZsZXg7XFxuICBsaXN0LXN0eWxlLXR5cGU6IG5vbmU7XFxuICBtYXJnaW46IDA7XFxuICBwYWRkaW5nOiAwO1xcbn1cXG4uRDBCSDM5XzZ3d2ljbFc4YUt1b2kgbGkge1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgcGFkZGluZzogNXB4O1xcbiAgbWFyZ2luOiA1cHg7XFxuICBib3JkZXItcmFkaXVzOiA0cHg7XFxuICBmb250LXZhcmlhbnQ6IHNtYWxsLWNhcHM7XFxufVxcbi5EMEJIMzlfNnd3aWNsVzhhS3VvaSBsaS54d282VjdBV0NteThDRHZ1VHdSZyB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1zZWxlY3Rpb24pO1xcbiAgY29sb3I6IHdoaXRlO1xcbiAgY3Vyc29yOiBkZWZhdWx0O1xcbn1cXG5cXG4ublZic2tFb2FHeFdmOTZxRWd0eHoge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbn1cXG4ublZic2tFb2FHeFdmOTZxRWd0eHogPiAqIHtcXG4gIHdpZHRoOiAxMDAlICFpbXBvcnRhbnQ7XFxuICBoZWlnaHQ6IDEwMCUgIWltcG9ydGFudDtcXG59XFxuXFxuLkFlMnMwZXFJVmhlYlRFY0pHYzNGIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZVxcbn1cXG4uQWUyczBlcUlWaGViVEVjSkdjM0Y6OmFmdGVyIHtcXG4gIGNvbnRlbnQ6ICdiZXRhJztcXG4gIGJhY2tncm91bmQtY29sb3I6IHJlZDtcXG4gIGNvbG9yOiB3aGl0ZTtcXG4gIGZvbnQtc2l6ZTogMTJweDtcXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xcbiAgcGFkZGluZzogMXB4IDNweDtcXG4gIGJvcmRlci1yYWRpdXM6IDZweDtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogMDtcXG4gIHJpZ2h0OiAwO1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoNjAlLCAtNjAlKSByb3RhdGUoMTNkZWcpO1xcbn1cXG4ueHdvNlY3QVdDbXk4Q0R2dVR3UmcgLkFlMnMwZXFJVmhlYlRFY0pHYzNGOjphZnRlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcXG4gIGNvbG9yOiB2YXIoLS1zZWxlY3Rpb24pO1xcbiAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0tc2VsZWN0aW9uKTtcXG59XFxuLnNRUTBxRmpIcHRKYlE4cXZ1WEdhIHtcXG4gIGNvbG9yOiB2YXIoLS1lcnJvci1oaWdobGlnaHQpO1xcbn1cXG4uRDBCSDM5XzZ3d2ljbFc4YUt1b2kgbGkueHdvNlY3QVdDbXk4Q0R2dVR3Umcuc1FRMHFGakhwdEpiUThxdnVYR2Ege1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tZXJyb3ItaGlnaGxpZ2h0KTtcXG4gIGNvbG9yOiB3aGl0ZTtcXG59XCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL0tleWJvYXJkL3N0eWxlcy5tb2R1bGUuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0VBQ0Usb0JBQW9CO0VBQ3BCLHFCQUFxQjtFQUNyQixTQUFTO0VBQ1QsVUFBVTtBQUNaO0FBQ0E7RUFDRSxlQUFlO0VBQ2YsWUFBWTtFQUNaLFdBQVc7RUFDWCxrQkFBa0I7RUFDbEIsd0JBQXdCO0FBQzFCO0FBQ0E7RUFDRSxrQ0FBa0M7RUFDbEMsWUFBWTtFQUNaLGVBQWU7QUFDakI7O0FBRUE7RUFDRSxrQkFBa0I7QUFDcEI7QUFDQTtFQUNFLHNCQUFzQjtFQUN0Qix1QkFBdUI7QUFDekI7O0FBRUE7RUFDRTtBQUNGO0FBQ0E7RUFDRSxlQUFlO0VBQ2YscUJBQXFCO0VBQ3JCLFlBQVk7RUFDWixlQUFlO0VBQ2YsaUJBQWlCO0VBQ2pCLGdCQUFnQjtFQUNoQixrQkFBa0I7RUFDbEIsa0JBQWtCO0VBQ2xCLE1BQU07RUFDTixRQUFRO0VBQ1IsNkNBQTZDO0FBQy9DO0FBQ0E7RUFDRSx1QkFBdUI7RUFDdkIsdUJBQXVCO0VBQ3ZCLGtDQUFrQztBQUNwQztBQUNBO0VBQ0UsNkJBQTZCO0FBQy9CO0FBQ0E7RUFDRSx3Q0FBd0M7RUFDeEMsWUFBWTtBQUNkXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5lZGl0b3JNb2RlVGFicyB7XFxuICBkaXNwbGF5OiBpbmxpbmUtZmxleDtcXG4gIGxpc3Qtc3R5bGUtdHlwZTogbm9uZTtcXG4gIG1hcmdpbjogMDtcXG4gIHBhZGRpbmc6IDA7XFxufVxcbi5lZGl0b3JNb2RlVGFicyBsaSB7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBwYWRkaW5nOiA1cHg7XFxuICBtYXJnaW46IDVweDtcXG4gIGJvcmRlci1yYWRpdXM6IDRweDtcXG4gIGZvbnQtdmFyaWFudDogc21hbGwtY2FwcztcXG59XFxuLmVkaXRvck1vZGVUYWJzIGxpLmFjdGl2ZUVkaXRUYWIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tc2VsZWN0aW9uKTtcXG4gIGNvbG9yOiB3aGl0ZTtcXG4gIGN1cnNvcjogZGVmYXVsdDtcXG59XFxuXFxuLnBsYWNlciB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxufVxcbi5wbGFjZXIgPiAqIHtcXG4gIHdpZHRoOiAxMDAlICFpbXBvcnRhbnQ7XFxuICBoZWlnaHQ6IDEwMCUgIWltcG9ydGFudDtcXG59XFxuXFxuLmJldGEge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlXFxufVxcbi5iZXRhOjphZnRlciB7XFxuICBjb250ZW50OiAnYmV0YSc7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZWQ7XFxuICBjb2xvcjogd2hpdGU7XFxuICBmb250LXNpemU6IDEycHg7XFxuICBmb250LXdlaWdodDogYm9sZDtcXG4gIHBhZGRpbmc6IDFweCAzcHg7XFxuICBib3JkZXItcmFkaXVzOiA2cHg7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDA7XFxuICByaWdodDogMDtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlKDYwJSwgLTYwJSkgcm90YXRlKDEzZGVnKTtcXG59XFxuLmFjdGl2ZUVkaXRUYWIgLmJldGE6OmFmdGVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xcbiAgY29sb3I6IHZhcigtLXNlbGVjdGlvbik7XFxuICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1zZWxlY3Rpb24pO1xcbn1cXG4ud2FybmluZ1RhYiB7XFxuICBjb2xvcjogdmFyKC0tZXJyb3ItaGlnaGxpZ2h0KTtcXG59XFxuLmVkaXRvck1vZGVUYWJzIGxpLmFjdGl2ZUVkaXRUYWIud2FybmluZ1RhYiB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1lcnJvci1oaWdobGlnaHQpO1xcbiAgY29sb3I6IHdoaXRlO1xcbn1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmxvY2FscyA9IHtcblx0XCJlZGl0b3JNb2RlVGFic1wiOiBcIkQwQkgzOV82d3dpY2xXOGFLdW9pXCIsXG5cdFwiYWN0aXZlRWRpdFRhYlwiOiBcInh3bzZWN0FXQ215OENEdnVUd1JnXCIsXG5cdFwicGxhY2VyXCI6IFwiblZic2tFb2FHeFdmOTZxRWd0eHpcIixcblx0XCJiZXRhXCI6IFwiQWUyczBlcUlWaGViVEVjSkdjM0ZcIixcblx0XCJ3YXJuaW5nVGFiXCI6IFwic1FRMHFGakhwdEpiUThxdnVYR2FcIlxufTtcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIuUWtld056R2FnSWJuZGkzckpwS20ge1xcbiAgYm9yZGVyOiBub25lO1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgY29sb3I6IHdoaXRlO1xcbiAgYmFja2dyb3VuZDogIzI0ODtcXG4gIGJvcmRlci1yYWRpdXM6IDEwMCU7XFxuICB3aWR0aDogMjRweDtcXG4gIGhlaWdodDogMjRweDtcXG4gIGxpbmUtaGVpZ2h0OiAyNHB4O1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbn1cXG4uUWtld056R2FnSWJuZGkzckpwS206aG92ZXIge1xcbiAgYmFja2dyb3VuZDogIzQ4RjtcXG59XCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL1NvdXJjZXMvRGVtby9zdHlsZS5tb2R1bGUuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0VBQ0UsWUFBWTtFQUNaLGVBQWU7RUFDZixZQUFZO0VBQ1osZ0JBQWdCO0VBQ2hCLG1CQUFtQjtFQUNuQixXQUFXO0VBQ1gsWUFBWTtFQUNaLGlCQUFpQjtFQUNqQixrQkFBa0I7QUFDcEI7QUFDQTtFQUNFLGdCQUFnQjtBQUNsQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIuaGVscCB7XFxuICBib3JkZXI6IG5vbmU7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBjb2xvcjogd2hpdGU7XFxuICBiYWNrZ3JvdW5kOiAjMjQ4O1xcbiAgYm9yZGVyLXJhZGl1czogMTAwJTtcXG4gIHdpZHRoOiAyNHB4O1xcbiAgaGVpZ2h0OiAyNHB4O1xcbiAgbGluZS1oZWlnaHQ6IDI0cHg7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxufVxcbi5oZWxwOmhvdmVyIHtcXG4gIGJhY2tncm91bmQ6ICM0OEY7XFxufVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ubG9jYWxzID0ge1xuXHRcImhlbHBcIjogXCJRa2V3TnpHYWdJYm5kaTNySnBLbVwiXG59O1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi56OHozR1h1WXFsZXBDejR0UlBaaiB7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gIGJvcmRlcjogMXB4IHNvbGlkIGhzbCgwLCAwJSwgODAlKTtcXG4gIGJvcmRlci1yYWRpdXM6IDRweDtcXG4gIGdhcDogNXB4O1xcbiAgaGVpZ2h0OiAzOHB4O1xcbiAgcGFkZGluZzogMCA4cHg7XFxuXFxuICAvKiBjb2xvcjogaHNsKDAsIDAlLCAyMCUpOyAqL1xcbn1cXG5cXG4ueXlIZmFsOXBNNER6U2hNbDRMQVkge1xcbiAgZGlzcGxheTogaW5saW5lLWZsZXg7XFxuICBoZWlnaHQ6IDMwcHg7XFxuICBib3JkZXItcmFkaXVzOiA1cHg7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcblxcbiAgZm9udC1zaXplOiA3MCU7XFxuICBwYWRkaW5nOiAwIDRweDtcXG5cXG4gIGJhY2tncm91bmQtY29sb3I6IHJveWFsYmx1ZTtcXG4gIGNvbG9yOiB3aGl0ZTtcXG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcXG59XFxuXFxuLnVrZHljVDR0YXJXVmxWM1BDNlJyIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBoZWlnaHQ6IDM4cHg7XFxuICBnYXA6IDRweDtcXG59XFxuXFxuLnVrZHljVDR0YXJXVmxWM1BDNlJyIGJ1dHRvbixcXG4udWtkeWNUNHRhcldWbFYzUEM2UnIgLnl5SGZhbDlwTTREelNoTWw0TEFZIHtcXG4gIGhlaWdodDogMzhweDtcXG59XFxuXFxuLnl5SGZhbDlwTTREelNoTWw0TEFZIGNvZGUge1xcbiAgZm9udC1mYW1pbHk6IG1vbm9zcGFjZTtcXG59XFxuXFxuLlF2STV3bzdfdTZPZUFjMTJpYjBXIHtcXG4gIHdpZHRoOiAzMHB4O1xcbiAgaGVpZ2h0OiAzMHB4O1xcbiAgbGluZS1oZWlnaHQ6IDMwcHg7XFxuICBmb250LXNpemU6IDIwMCU7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxufVxcblxcbi5lVXc1Tlpxb1BQRjNCY3lZRHBKeCB7XFxuICAvKiBjb2xvcjogdmFyKC0tc2VsZWN0aW9uKTsgKi9cXG59XFxuXFxuLlhqWTRsTl9sWTNuU2dIY3c2N2JYIHtcXG4gIC8qIGNvbG9yOiBicm93bjsgKi9cXG59XFxuXFxuLkFwX093Q3RwM2oxUTI5UGhwdzNWIHtcXG4gIGNvbG9yOiBnb2xkO1xcbiAgYW5pbWF0aW9uOiBXakJ1UGZsczRWNDFkMnNqYk5GVSAxcyBsaW5lYXIgYWx0ZXJuYXRlIGluZmluaXRlO1xcbn1cXG5cXG5Aa2V5ZnJhbWVzIFdqQnVQZmxzNFY0MWQyc2piTkZVIHtcXG4gIGZyb20geyBvcGFjaXR5OiAwLjU7IH1cXG4gIHRvIHsgb3BhY2l0eTogMTsgfVxcbn1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvU291cmNlcy9HaXRodWIvc3R5bGVzLm1vZHVsZS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSxlQUFlO0VBQ2YsYUFBYTtFQUNiLHNCQUFzQjtFQUN0QixpQ0FBaUM7RUFDakMsa0JBQWtCO0VBQ2xCLFFBQVE7RUFDUixZQUFZO0VBQ1osY0FBYzs7RUFFZCw0QkFBNEI7QUFDOUI7O0FBRUE7RUFDRSxvQkFBb0I7RUFDcEIsWUFBWTtFQUNaLGtCQUFrQjtFQUNsQixtQkFBbUI7O0VBRW5CLGNBQWM7RUFDZCxjQUFjOztFQUVkLDJCQUEyQjtFQUMzQixZQUFZO0VBQ1oscUJBQXFCO0FBQ3ZCOztBQUVBO0VBQ0UsYUFBYTtFQUNiLFlBQVk7RUFDWixRQUFRO0FBQ1Y7O0FBRUE7O0VBRUUsWUFBWTtBQUNkOztBQUVBO0VBQ0Usc0JBQXNCO0FBQ3hCOztBQUVBO0VBQ0UsV0FBVztFQUNYLFlBQVk7RUFDWixpQkFBaUI7RUFDakIsZUFBZTtFQUNmLGtCQUFrQjtBQUNwQjs7QUFFQTtFQUNFLDZCQUE2QjtBQUMvQjs7QUFFQTtFQUNFLGtCQUFrQjtBQUNwQjs7QUFFQTtFQUNFLFdBQVc7RUFDWCw0REFBNkM7QUFDL0M7O0FBRUE7RUFDRSxPQUFPLFlBQVksRUFBRTtFQUNyQixLQUFLLFVBQVUsRUFBRTtBQUNuQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIuY29tcGFjdFdyYXBwZXIge1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICBib3JkZXI6IDFweCBzb2xpZCBoc2woMCwgMCUsIDgwJSk7XFxuICBib3JkZXItcmFkaXVzOiA0cHg7XFxuICBnYXA6IDVweDtcXG4gIGhlaWdodDogMzhweDtcXG4gIHBhZGRpbmc6IDAgOHB4O1xcblxcbiAgLyogY29sb3I6IGhzbCgwLCAwJSwgMjAlKTsgKi9cXG59XFxuXFxuLmJ1aWxkRGV0YWlscyB7XFxuICBkaXNwbGF5OiBpbmxpbmUtZmxleDtcXG4gIGhlaWdodDogMzBweDtcXG4gIGJvcmRlci1yYWRpdXM6IDVweDtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuXFxuICBmb250LXNpemU6IDcwJTtcXG4gIHBhZGRpbmc6IDAgNHB4O1xcblxcbiAgYmFja2dyb3VuZC1jb2xvcjogcm95YWxibHVlO1xcbiAgY29sb3I6IHdoaXRlO1xcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xcbn1cXG5cXG4ucGlja2VyQWN0aW9ucyB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgaGVpZ2h0OiAzOHB4O1xcbiAgZ2FwOiA0cHg7XFxufVxcblxcbi5waWNrZXJBY3Rpb25zIGJ1dHRvbixcXG4ucGlja2VyQWN0aW9ucyAuYnVpbGREZXRhaWxzIHtcXG4gIGhlaWdodDogMzhweDtcXG59XFxuXFxuLmJ1aWxkRGV0YWlscyBjb2RlIHtcXG4gIGZvbnQtZmFtaWx5OiBtb25vc3BhY2U7XFxufVxcblxcbi5idWlsZFN0YXR1cyB7XFxuICB3aWR0aDogMzBweDtcXG4gIGhlaWdodDogMzBweDtcXG4gIGxpbmUtaGVpZ2h0OiAzMHB4O1xcbiAgZm9udC1zaXplOiAyMDAlO1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbn1cXG5cXG4uYnVpbGRTdWNjZXNzIHtcXG4gIC8qIGNvbG9yOiB2YXIoLS1zZWxlY3Rpb24pOyAqL1xcbn1cXG5cXG4uYnVpbGRGYWlsZWQge1xcbiAgLyogY29sb3I6IGJyb3duOyAqL1xcbn1cXG5cXG4uYnVpbGRQZW5kaW5nIHtcXG4gIGNvbG9yOiBnb2xkO1xcbiAgYW5pbWF0aW9uOiBwdWxzZSAxcyBsaW5lYXIgYWx0ZXJuYXRlIGluZmluaXRlO1xcbn1cXG5cXG5Aa2V5ZnJhbWVzIHB1bHNlIHtcXG4gIGZyb20geyBvcGFjaXR5OiAwLjU7IH1cXG4gIHRvIHsgb3BhY2l0eTogMTsgfVxcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmxvY2FscyA9IHtcblx0XCJjb21wYWN0V3JhcHBlclwiOiBcIno4ejNHWHVZcWxlcEN6NHRSUFpqXCIsXG5cdFwiYnVpbGREZXRhaWxzXCI6IFwieXlIZmFsOXBNNER6U2hNbDRMQVlcIixcblx0XCJwaWNrZXJBY3Rpb25zXCI6IFwidWtkeWNUNHRhcldWbFYzUEM2UnJcIixcblx0XCJidWlsZFN0YXR1c1wiOiBcIlF2STV3bzdfdTZPZUFjMTJpYjBXXCIsXG5cdFwiYnVpbGRTdWNjZXNzXCI6IFwiZVV3NU5acW9QUEYzQmN5WURwSnhcIixcblx0XCJidWlsZEZhaWxlZFwiOiBcIlhqWTRsTl9sWTNuU2dIY3c2N2JYXCIsXG5cdFwiYnVpbGRQZW5kaW5nXCI6IFwiQXBfT3dDdHAzajFRMjlQaHB3M1ZcIixcblx0XCJwdWxzZVwiOiBcIldqQnVQZmxzNFY0MWQyc2piTkZVXCJcbn07XG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLnNQMmtEUm9UWkVsWlVUTkhxMDMzIHtcXG4gIHdpZHRoOiAzMDBweDtcXG5cXHRwYWRkaW5nOiAxMHB4O1xcblxcdGJvcmRlci1yYWRpdXM6IDRweDtcXG5cXHRiYWNrZ3JvdW5kOiByYWRpYWwtZ3JhZGllbnQoXFxuXFx0XFx0cmdiYSh2YXIoLS1iZy1yZ2IpLCAxKSAyMCUsXFxuXFx0XFx0cmdiYSh2YXIoLS1iZy1yZ2IpLCAuNikgMTAwJVxcblxcdCk7XFxufVxcbi5zUDJrRFJvVFpFbFpVVE5IcTAzMyBpbnB1dCB7XFxuXFx0ZGlzcGxheTogYmxvY2s7XFxuXFx0d2lkdGg6IDEwMCU7XFxuXFx0aGVpZ2h0OiAzMHB4O1xcblxcdGxpbmUtaGVpZ2h0OiAzMHB4O1xcblxcblxcdGZvbnQtc2l6ZTogMTIwJTtcXG5cXHRtYXJnaW46IDA7XFxuXFx0cGFkZGluZzogNHB4O1xcblxcdGJvcmRlcjogbm9uZTtcXG5cXHRib3JkZXItcmFkaXVzOiA0cHg7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbn1cXG51bC5pbkFTOVF1bmtmM2c1SzN4ejZvNiB7XFxuXFx0cG9zaXRpb246IHJlbGF0aXZlO1xcblxcdGZvbnQtZmFtaWx5OiBtb25vc3BhY2U7XFxuXFx0bGlzdC1zdHlsZS1wb3NpdGlvbjogaW5zaWRlO1xcblxcdGxpc3Qtc3R5bGUtdHlwZTogbm9uZTtcXG5cXHRtYXgtaGVpZ2h0OiAzMDBweDtcXG5cXHRvdmVyZmxvdzogc2Nyb2xsO1xcblxcdHBhZGRpbmc6IDRweDtcXG4gIG1hcmdpbjogNHB4IDA7XFxuXFx0YmFja2dyb3VuZDogcmdiYSgwLCAwLCAwLCAwLjc1KTtcXG5cXHRib3JkZXItcmFkaXVzOiA0cHg7XFxufVxcbi5pbkFTOVF1bmtmM2c1SzN4ejZvNiBsaSB7XFxuXFx0Y3Vyc29yOiBwb2ludGVyO1xcblxcdGNvbG9yOiB3aGl0ZTtcXG5cXHRwYWRkaW5nOiA1cHg7XFxufVxcbi5pbkFTOVF1bmtmM2c1SzN4ejZvNiBsaTpob3ZlciwgLmluQVM5UXVua2YzZzVLM3h6Nm82IGxpLkJMN0N4cm5fZWZibFFYWTNXMVN3IHtcXG5cXHRiYWNrZ3JvdW5kOiB3aGl0ZTtcXG5cXHRjb2xvcjogYmxhY2s7XFxufVxcbi5pbkFTOVF1bmtmM2c1SzN4ejZvNiBsaSBiIHsgY29sb3I6IHJlZDsgfVxcbi5pbkFTOVF1bmtmM2c1SzN4ejZvNiBsaSAudWxkMFhhZW9RYVFKSndwMExUMFgge1xcblxcdGZvbnQtc3R5bGU6IGl0YWxpYztcXG5cXHRmb250LXNpemU6IDkwJTtcXG5cXHRtYXJnaW46IDA7XFxuXFx0Y29sb3I6IGdyYXk7XFxufVxcblxcbi5wcWlaUXVibEtYdm1uVF9FU0R4USB7XFxuICBmb250LXNpemU6IDEwcHg7XFxufVxcblxcbi5wcWlaUXVibEtYdm1uVF9FU0R4USBhIHtcXG4gIGNvbG9yOiB2YXIoLS1zZWxlY3Rpb24pO1xcbiAgYm9yZGVyLWJvdHRvbTogMXB4IGRvdHRlZCB2YXIoLS1zZWxlY3Rpb24pO1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG5cXG4uRUNVczRnMmoxcmVrUDR4eGdRRHIge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbn1cXG4uRUNVczRnMmoxcmVrUDR4eGdRRHIgaW5wdXQge1xcbiAgcGFkZGluZzogNHB4IDRweCA0cHggMzBweDtcXG59XFxuXFxuLnhEVUFnUVplQnAwVFpTT3FDd0htIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG5cXHR0b3A6IDUwJTtcXG5cXHRsZWZ0OiAxMHB4O1xcblxcdHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNTAlKTtcXG5cXHRwb2ludGVyLWV2ZW50czogbm9uZTtcXG59XFxuLmVZNXpSbDQ5c0VTTGpYbWl6TUVQIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG5cXHR0b3A6IDUwJTtcXG5cXHRyaWdodDogMTBweDtcXG5cXHR0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTUwJSk7XFxuXFx0Y3Vyc29yOiBwb2ludGVyO1xcbn1cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvVmFsdWVQaWNrZXIvc3R5bGUubW9kdWxlLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLFlBQVk7Q0FDYixhQUFhO0NBQ2Isa0JBQWtCO0NBQ2xCOzs7RUFHQztBQUNGO0FBQ0E7Q0FDQyxjQUFjO0NBQ2QsV0FBVztDQUNYLFlBQVk7Q0FDWixpQkFBaUI7O0NBRWpCLGVBQWU7Q0FDZixTQUFTO0NBQ1QsWUFBWTtDQUNaLFlBQVk7Q0FDWixrQkFBa0I7RUFDakIsc0JBQXNCO0FBQ3hCO0FBQ0E7Q0FDQyxrQkFBa0I7Q0FDbEIsc0JBQXNCO0NBQ3RCLDJCQUEyQjtDQUMzQixxQkFBcUI7Q0FDckIsaUJBQWlCO0NBQ2pCLGdCQUFnQjtDQUNoQixZQUFZO0VBQ1gsYUFBYTtDQUNkLCtCQUErQjtDQUMvQixrQkFBa0I7QUFDbkI7QUFDQTtDQUNDLGVBQWU7Q0FDZixZQUFZO0NBQ1osWUFBWTtBQUNiO0FBQ0E7Q0FDQyxpQkFBaUI7Q0FDakIsWUFBWTtBQUNiO0FBQ0EsNkJBQWdCLFVBQVUsRUFBRTtBQUM1QjtDQUNDLGtCQUFrQjtDQUNsQixjQUFjO0NBQ2QsU0FBUztDQUNULFdBQVc7QUFDWjs7QUFFQTtFQUNFLGVBQWU7QUFDakI7O0FBRUE7RUFDRSx1QkFBdUI7RUFDdkIsMENBQTBDO0VBQzFDLGVBQWU7QUFDakI7O0FBRUE7RUFDRSxrQkFBa0I7QUFDcEI7QUFDQTtFQUNFLHlCQUF5QjtBQUMzQjs7QUFFQTtFQUNFLGtCQUFrQjtDQUNuQixRQUFRO0NBQ1IsVUFBVTtDQUNWLDJCQUEyQjtDQUMzQixvQkFBb0I7QUFDckI7QUFDQTtFQUNFLGtCQUFrQjtDQUNuQixRQUFRO0NBQ1IsV0FBVztDQUNYLDJCQUEyQjtDQUMzQixlQUFlO0FBQ2hCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5kaWFsb2cge1xcbiAgd2lkdGg6IDMwMHB4O1xcblxcdHBhZGRpbmc6IDEwcHg7XFxuXFx0Ym9yZGVyLXJhZGl1czogNHB4O1xcblxcdGJhY2tncm91bmQ6IHJhZGlhbC1ncmFkaWVudChcXG5cXHRcXHRyZ2JhKHZhcigtLWJnLXJnYiksIDEpIDIwJSxcXG5cXHRcXHRyZ2JhKHZhcigtLWJnLXJnYiksIC42KSAxMDAlXFxuXFx0KTtcXG59XFxuLmRpYWxvZyBpbnB1dCB7XFxuXFx0ZGlzcGxheTogYmxvY2s7XFxuXFx0d2lkdGg6IDEwMCU7XFxuXFx0aGVpZ2h0OiAzMHB4O1xcblxcdGxpbmUtaGVpZ2h0OiAzMHB4O1xcblxcblxcdGZvbnQtc2l6ZTogMTIwJTtcXG5cXHRtYXJnaW46IDA7XFxuXFx0cGFkZGluZzogNHB4O1xcblxcdGJvcmRlcjogbm9uZTtcXG5cXHRib3JkZXItcmFkaXVzOiA0cHg7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbn1cXG51bC5yZXN1bHRzIHtcXG5cXHRwb3NpdGlvbjogcmVsYXRpdmU7XFxuXFx0Zm9udC1mYW1pbHk6IG1vbm9zcGFjZTtcXG5cXHRsaXN0LXN0eWxlLXBvc2l0aW9uOiBpbnNpZGU7XFxuXFx0bGlzdC1zdHlsZS10eXBlOiBub25lO1xcblxcdG1heC1oZWlnaHQ6IDMwMHB4O1xcblxcdG92ZXJmbG93OiBzY3JvbGw7XFxuXFx0cGFkZGluZzogNHB4O1xcbiAgbWFyZ2luOiA0cHggMDtcXG5cXHRiYWNrZ3JvdW5kOiByZ2JhKDAsIDAsIDAsIDAuNzUpO1xcblxcdGJvcmRlci1yYWRpdXM6IDRweDtcXG59XFxuLnJlc3VsdHMgbGkge1xcblxcdGN1cnNvcjogcG9pbnRlcjtcXG5cXHRjb2xvcjogd2hpdGU7XFxuXFx0cGFkZGluZzogNXB4O1xcbn1cXG4ucmVzdWx0cyBsaTpob3ZlciwgLnJlc3VsdHMgbGkuaGlnaGxpZ2h0ZWQge1xcblxcdGJhY2tncm91bmQ6IHdoaXRlO1xcblxcdGNvbG9yOiBibGFjaztcXG59XFxuLnJlc3VsdHMgbGkgYiB7IGNvbG9yOiByZWQ7IH1cXG4ucmVzdWx0cyBsaSAuZGVzY3JpcHRpb24ge1xcblxcdGZvbnQtc3R5bGU6IGl0YWxpYztcXG5cXHRmb250LXNpemU6IDkwJTtcXG5cXHRtYXJnaW46IDA7XFxuXFx0Y29sb3I6IGdyYXk7XFxufVxcblxcbi5jaG9pY2VzLWNvdW50ZXIge1xcbiAgZm9udC1zaXplOiAxMHB4O1xcbn1cXG5cXG4uY2hvaWNlcy1jb3VudGVyIGEge1xcbiAgY29sb3I6IHZhcigtLXNlbGVjdGlvbik7XFxuICBib3JkZXItYm90dG9tOiAxcHggZG90dGVkIHZhcigtLXNlbGVjdGlvbik7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcblxcbi5zZWFyY2hXcmFwcGVyIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG59XFxuLnNlYXJjaFdyYXBwZXIgaW5wdXQge1xcbiAgcGFkZGluZzogNHB4IDRweCA0cHggMzBweDtcXG59XFxuXFxuLnNlYXJjaEljb24ge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcblxcdHRvcDogNTAlO1xcblxcdGxlZnQ6IDEwcHg7XFxuXFx0dHJhbnNmb3JtOiB0cmFuc2xhdGVZKC01MCUpO1xcblxcdHBvaW50ZXItZXZlbnRzOiBub25lO1xcbn1cXG4uY2xlYXJTZWFyY2hJY29uIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG5cXHR0b3A6IDUwJTtcXG5cXHRyaWdodDogMTBweDtcXG5cXHR0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTUwJSk7XFxuXFx0Y3Vyc29yOiBwb2ludGVyO1xcbn1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmxvY2FscyA9IHtcblx0XCJkaWFsb2dcIjogXCJzUDJrRFJvVFpFbFpVVE5IcTAzM1wiLFxuXHRcInJlc3VsdHNcIjogXCJpbkFTOVF1bmtmM2c1SzN4ejZvNlwiLFxuXHRcImhpZ2hsaWdodGVkXCI6IFwiQkw3Q3hybl9lZmJsUVhZM1cxU3dcIixcblx0XCJkZXNjcmlwdGlvblwiOiBcInVsZDBYYWVvUWFRSkp3cDBMVDBYXCIsXG5cdFwiY2hvaWNlcy1jb3VudGVyXCI6IFwicHFpWlF1YmxLWHZtblRfRVNEeFFcIixcblx0XCJzZWFyY2hXcmFwcGVyXCI6IFwiRUNVczRnMmoxcmVrUDR4eGdRRHJcIixcblx0XCJzZWFyY2hJY29uXCI6IFwieERVQWdRWmVCcDBUWlNPcUN3SG1cIixcblx0XCJjbGVhclNlYXJjaEljb25cIjogXCJlWTV6Umw0OXNFU0xqWG1pek1FUFwiXG59O1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIlxcbi5fdldOSVhNa2VtUWF4OXJrQ0pRaCB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB6LWluZGV4OiAxMDA7XFxuICBib3R0b206IDVweDtcXG4gIGxlZnQ6IDVweDtcXG59XFxuXFxuLl92V05JWE1rZW1RYXg5cmtDSlFoIGxhYmVsIHtcXG4gIGZvbnQtc2l6ZTogNzUlO1xcbiAgZm9udC1zdHlsZTogaXRhbGljO1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICBwYWRkaW5nOiAwIDEwcHg7XFxufVxcblxcbi5xaUMyTnJ1akU0ZWJxbUhqenEwXyB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICBmb250LXNpemU6IDExMCU7XFxuICBmb250LXN0eWxlOiBpdGFsaWM7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1jb2RlLWJnKTtcXG4gIGJvcmRlci1yYWRpdXM6IDIwcHg7XFxuICBwYWRkaW5nOiA1cHggMTBweDtcXG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcXG5cXG4gIGNvbG9yOiByb3lhbGJsdWU7XFxufVxcbi5xaUMyTnJ1akU0ZWJxbUhqenEwXzpob3ZlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByb3lhbGJsdWU7XFxuICBjb2xvcjogd2hpdGU7XFxufVwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9zdHlsZXMubW9kdWxlLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiO0FBQ0E7RUFDRSxxQkFBcUI7RUFDckIsa0JBQWtCO0VBQ2xCLFlBQVk7RUFDWixXQUFXO0VBQ1gsU0FBUztBQUNYOztBQUVBO0VBQ0UsY0FBYztFQUNkLGtCQUFrQjtFQUNsQixjQUFjO0VBQ2QsZUFBZTtBQUNqQjs7QUFFQTtFQUNFLHFCQUFxQjtFQUNyQixlQUFlO0VBQ2Ysa0JBQWtCO0VBQ2xCLGdDQUFnQztFQUNoQyxtQkFBbUI7RUFDbkIsaUJBQWlCO0VBQ2pCLHFCQUFxQjs7RUFFckIsZ0JBQWdCO0FBQ2xCO0FBQ0E7RUFDRSwyQkFBMkI7RUFDM0IsWUFBWTtBQUNkXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIlxcbi53cmFwcGVyIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHotaW5kZXg6IDEwMDtcXG4gIGJvdHRvbTogNXB4O1xcbiAgbGVmdDogNXB4O1xcbn1cXG5cXG4ud3JhcHBlciBsYWJlbCB7XFxuICBmb250LXNpemU6IDc1JTtcXG4gIGZvbnQtc3R5bGU6IGl0YWxpYztcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgcGFkZGluZzogMCAxMHB4O1xcbn1cXG5cXG4uZ2l0aHViTGluayB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICBmb250LXNpemU6IDExMCU7XFxuICBmb250LXN0eWxlOiBpdGFsaWM7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1jb2RlLWJnKTtcXG4gIGJvcmRlci1yYWRpdXM6IDIwcHg7XFxuICBwYWRkaW5nOiA1cHggMTBweDtcXG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcXG5cXG4gIGNvbG9yOiByb3lhbGJsdWU7XFxufVxcbi5naXRodWJMaW5rOmhvdmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJveWFsYmx1ZTtcXG4gIGNvbG9yOiB3aGl0ZTtcXG59XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5sb2NhbHMgPSB7XG5cdFwid3JhcHBlclwiOiBcIl92V05JWE1rZW1RYXg5cmtDSlFoXCIsXG5cdFwiZ2l0aHViTGlua1wiOiBcInFpQzJOcnVqRTRlYnFtSGp6cTBfXCJcbn07XG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsInZhciBtYXAgPSB7XG5cdFwiLi9hZlwiOiA0Mjc4Nixcblx0XCIuL2FmLmpzXCI6IDQyNzg2LFxuXHRcIi4vYXJcIjogMzA4NjcsXG5cdFwiLi9hci1kelwiOiAxNDEzMCxcblx0XCIuL2FyLWR6LmpzXCI6IDE0MTMwLFxuXHRcIi4vYXIta3dcIjogOTYxMzUsXG5cdFwiLi9hci1rdy5qc1wiOiA5NjEzNSxcblx0XCIuL2FyLWx5XCI6IDU2NDQwLFxuXHRcIi4vYXItbHkuanNcIjogNTY0NDAsXG5cdFwiLi9hci1tYVwiOiA0NzcwMixcblx0XCIuL2FyLW1hLmpzXCI6IDQ3NzAyLFxuXHRcIi4vYXItc2FcIjogMTYwNDAsXG5cdFwiLi9hci1zYS5qc1wiOiAxNjA0MCxcblx0XCIuL2FyLXRuXCI6IDM3MTAwLFxuXHRcIi4vYXItdG4uanNcIjogMzcxMDAsXG5cdFwiLi9hci5qc1wiOiAzMDg2Nyxcblx0XCIuL2F6XCI6IDMxMDgzLFxuXHRcIi4vYXouanNcIjogMzEwODMsXG5cdFwiLi9iZVwiOiA5ODA4LFxuXHRcIi4vYmUuanNcIjogOTgwOCxcblx0XCIuL2JnXCI6IDY4MzM4LFxuXHRcIi4vYmcuanNcIjogNjgzMzgsXG5cdFwiLi9ibVwiOiA2NzQzOCxcblx0XCIuL2JtLmpzXCI6IDY3NDM4LFxuXHRcIi4vYm5cIjogODkwNSxcblx0XCIuL2JuLWJkXCI6IDc2MjI1LFxuXHRcIi4vYm4tYmQuanNcIjogNzYyMjUsXG5cdFwiLi9ibi5qc1wiOiA4OTA1LFxuXHRcIi4vYm9cIjogMTE1NjAsXG5cdFwiLi9iby5qc1wiOiAxMTU2MCxcblx0XCIuL2JyXCI6IDEyNzgsXG5cdFwiLi9ici5qc1wiOiAxMjc4LFxuXHRcIi4vYnNcIjogODA2MjIsXG5cdFwiLi9icy5qc1wiOiA4MDYyMixcblx0XCIuL2NhXCI6IDI0NjgsXG5cdFwiLi9jYS5qc1wiOiAyNDY4LFxuXHRcIi4vY3NcIjogNTgyMixcblx0XCIuL2NzLmpzXCI6IDU4MjIsXG5cdFwiLi9jdlwiOiA1MDg3Nyxcblx0XCIuL2N2LmpzXCI6IDUwODc3LFxuXHRcIi4vY3lcIjogNDczNzMsXG5cdFwiLi9jeS5qc1wiOiA0NzM3Myxcblx0XCIuL2RhXCI6IDI0NzgwLFxuXHRcIi4vZGEuanNcIjogMjQ3ODAsXG5cdFwiLi9kZVwiOiA1OTc0MCxcblx0XCIuL2RlLWF0XCI6IDYwMjE3LFxuXHRcIi4vZGUtYXQuanNcIjogNjAyMTcsXG5cdFwiLi9kZS1jaFwiOiA2MDg5NCxcblx0XCIuL2RlLWNoLmpzXCI6IDYwODk0LFxuXHRcIi4vZGUuanNcIjogNTk3NDAsXG5cdFwiLi9kdlwiOiA1MzAwLFxuXHRcIi4vZHYuanNcIjogNTMwMCxcblx0XCIuL2VsXCI6IDUwODM3LFxuXHRcIi4vZWwuanNcIjogNTA4MzcsXG5cdFwiLi9lbi1hdVwiOiA3ODM0OCxcblx0XCIuL2VuLWF1LmpzXCI6IDc4MzQ4LFxuXHRcIi4vZW4tY2FcIjogNzc5MjUsXG5cdFwiLi9lbi1jYS5qc1wiOiA3NzkyNSxcblx0XCIuL2VuLWdiXCI6IDIyMjQzLFxuXHRcIi4vZW4tZ2IuanNcIjogMjIyNDMsXG5cdFwiLi9lbi1pZVwiOiA0NjQzNixcblx0XCIuL2VuLWllLmpzXCI6IDQ2NDM2LFxuXHRcIi4vZW4taWxcIjogNDcyMDcsXG5cdFwiLi9lbi1pbC5qc1wiOiA0NzIwNyxcblx0XCIuL2VuLWluXCI6IDQ0MTc1LFxuXHRcIi4vZW4taW4uanNcIjogNDQxNzUsXG5cdFwiLi9lbi1uelwiOiA3NjMxOSxcblx0XCIuL2VuLW56LmpzXCI6IDc2MzE5LFxuXHRcIi4vZW4tc2dcIjogMzE2NjIsXG5cdFwiLi9lbi1zZy5qc1wiOiAzMTY2Mixcblx0XCIuL2VvXCI6IDkyOTE1LFxuXHRcIi4vZW8uanNcIjogOTI5MTUsXG5cdFwiLi9lc1wiOiA1NTY1NSxcblx0XCIuL2VzLWRvXCI6IDU1MjUxLFxuXHRcIi4vZXMtZG8uanNcIjogNTUyNTEsXG5cdFwiLi9lcy1teFwiOiA5NjExMixcblx0XCIuL2VzLW14LmpzXCI6IDk2MTEyLFxuXHRcIi4vZXMtdXNcIjogNzExNDYsXG5cdFwiLi9lcy11cy5qc1wiOiA3MTE0Nixcblx0XCIuL2VzLmpzXCI6IDU1NjU1LFxuXHRcIi4vZXRcIjogNTYwMyxcblx0XCIuL2V0LmpzXCI6IDU2MDMsXG5cdFwiLi9ldVwiOiA3Nzc2Myxcblx0XCIuL2V1LmpzXCI6IDc3NzYzLFxuXHRcIi4vZmFcIjogNzY5NTksXG5cdFwiLi9mYS5qc1wiOiA3Njk1OSxcblx0XCIuL2ZpXCI6IDExODk3LFxuXHRcIi4vZmkuanNcIjogMTE4OTcsXG5cdFwiLi9maWxcIjogNDI1NDksXG5cdFwiLi9maWwuanNcIjogNDI1NDksXG5cdFwiLi9mb1wiOiA5NDY5NCxcblx0XCIuL2ZvLmpzXCI6IDk0Njk0LFxuXHRcIi4vZnJcIjogOTQ0NzAsXG5cdFwiLi9mci1jYVwiOiA2MzA0OSxcblx0XCIuL2ZyLWNhLmpzXCI6IDYzMDQ5LFxuXHRcIi4vZnItY2hcIjogNTIzMzAsXG5cdFwiLi9mci1jaC5qc1wiOiA1MjMzMCxcblx0XCIuL2ZyLmpzXCI6IDk0NDcwLFxuXHRcIi4vZnlcIjogNTA0NCxcblx0XCIuL2Z5LmpzXCI6IDUwNDQsXG5cdFwiLi9nYVwiOiAyOTI5NSxcblx0XCIuL2dhLmpzXCI6IDI5Mjk1LFxuXHRcIi4vZ2RcIjogMjEwMSxcblx0XCIuL2dkLmpzXCI6IDIxMDEsXG5cdFwiLi9nbFwiOiAzODc5NCxcblx0XCIuL2dsLmpzXCI6IDM4Nzk0LFxuXHRcIi4vZ29tLWRldmFcIjogMjc4ODQsXG5cdFwiLi9nb20tZGV2YS5qc1wiOiAyNzg4NCxcblx0XCIuL2dvbS1sYXRuXCI6IDIzMTY4LFxuXHRcIi4vZ29tLWxhdG4uanNcIjogMjMxNjgsXG5cdFwiLi9ndVwiOiA5NTM0OSxcblx0XCIuL2d1LmpzXCI6IDk1MzQ5LFxuXHRcIi4vaGVcIjogMjQyMDYsXG5cdFwiLi9oZS5qc1wiOiAyNDIwNixcblx0XCIuL2hpXCI6IDMwMDk0LFxuXHRcIi4vaGkuanNcIjogMzAwOTQsXG5cdFwiLi9oclwiOiAzMDMxNixcblx0XCIuL2hyLmpzXCI6IDMwMzE2LFxuXHRcIi4vaHVcIjogMjIxMzgsXG5cdFwiLi9odS5qc1wiOiAyMjEzOCxcblx0XCIuL2h5LWFtXCI6IDExNDIzLFxuXHRcIi4vaHktYW0uanNcIjogMTE0MjMsXG5cdFwiLi9pZFwiOiAyOTIxOCxcblx0XCIuL2lkLmpzXCI6IDI5MjE4LFxuXHRcIi4vaXNcIjogOTAxMzUsXG5cdFwiLi9pcy5qc1wiOiA5MDEzNSxcblx0XCIuL2l0XCI6IDkwNjI2LFxuXHRcIi4vaXQtY2hcIjogMTAxNTAsXG5cdFwiLi9pdC1jaC5qc1wiOiAxMDE1MCxcblx0XCIuL2l0LmpzXCI6IDkwNjI2LFxuXHRcIi4vamFcIjogMzkxODMsXG5cdFwiLi9qYS5qc1wiOiAzOTE4Myxcblx0XCIuL2p2XCI6IDI0Mjg2LFxuXHRcIi4vanYuanNcIjogMjQyODYsXG5cdFwiLi9rYVwiOiAxMjEwNSxcblx0XCIuL2thLmpzXCI6IDEyMTA1LFxuXHRcIi4va2tcIjogNDc3NzIsXG5cdFwiLi9ray5qc1wiOiA0Nzc3Mixcblx0XCIuL2ttXCI6IDE4NzU4LFxuXHRcIi4va20uanNcIjogMTg3NTgsXG5cdFwiLi9rblwiOiA3OTI4Mixcblx0XCIuL2tuLmpzXCI6IDc5MjgyLFxuXHRcIi4va29cIjogMzM3MzAsXG5cdFwiLi9rby5qc1wiOiAzMzczMCxcblx0XCIuL2t1XCI6IDE0MDgsXG5cdFwiLi9rdS5qc1wiOiAxNDA4LFxuXHRcIi4va3lcIjogMzMyOTEsXG5cdFwiLi9reS5qc1wiOiAzMzI5MSxcblx0XCIuL2xiXCI6IDM2ODQxLFxuXHRcIi4vbGIuanNcIjogMzY4NDEsXG5cdFwiLi9sb1wiOiA1NTQ2Nixcblx0XCIuL2xvLmpzXCI6IDU1NDY2LFxuXHRcIi4vbHRcIjogNTcwMTAsXG5cdFwiLi9sdC5qc1wiOiA1NzAxMCxcblx0XCIuL2x2XCI6IDM3NTk1LFxuXHRcIi4vbHYuanNcIjogMzc1OTUsXG5cdFwiLi9tZVwiOiAzOTg2MSxcblx0XCIuL21lLmpzXCI6IDM5ODYxLFxuXHRcIi4vbWlcIjogMzU0OTMsXG5cdFwiLi9taS5qc1wiOiAzNTQ5Myxcblx0XCIuL21rXCI6IDk1OTY2LFxuXHRcIi4vbWsuanNcIjogOTU5NjYsXG5cdFwiLi9tbFwiOiA4NzM0MSxcblx0XCIuL21sLmpzXCI6IDg3MzQxLFxuXHRcIi4vbW5cIjogNTExNSxcblx0XCIuL21uLmpzXCI6IDUxMTUsXG5cdFwiLi9tclwiOiAxMDM3MCxcblx0XCIuL21yLmpzXCI6IDEwMzcwLFxuXHRcIi4vbXNcIjogOTg0Nyxcblx0XCIuL21zLW15XCI6IDQxMjM3LFxuXHRcIi4vbXMtbXkuanNcIjogNDEyMzcsXG5cdFwiLi9tcy5qc1wiOiA5ODQ3LFxuXHRcIi4vbXRcIjogNzIxMjYsXG5cdFwiLi9tdC5qc1wiOiA3MjEyNixcblx0XCIuL215XCI6IDU2MTY1LFxuXHRcIi4vbXkuanNcIjogNTYxNjUsXG5cdFwiLi9uYlwiOiA2NDkyNCxcblx0XCIuL25iLmpzXCI6IDY0OTI0LFxuXHRcIi4vbmVcIjogMTY3NDQsXG5cdFwiLi9uZS5qc1wiOiAxNjc0NCxcblx0XCIuL25sXCI6IDkzOTAxLFxuXHRcIi4vbmwtYmVcIjogNTk4MTQsXG5cdFwiLi9ubC1iZS5qc1wiOiA1OTgxNCxcblx0XCIuL25sLmpzXCI6IDkzOTAxLFxuXHRcIi4vbm5cIjogODM4NzcsXG5cdFwiLi9ubi5qc1wiOiA4Mzg3Nyxcblx0XCIuL29jLWxuY1wiOiA5MjEzNSxcblx0XCIuL29jLWxuYy5qc1wiOiA5MjEzNSxcblx0XCIuL3BhLWluXCI6IDE1ODU4LFxuXHRcIi4vcGEtaW4uanNcIjogMTU4NTgsXG5cdFwiLi9wbFwiOiA2NDQ5NSxcblx0XCIuL3BsLmpzXCI6IDY0NDk1LFxuXHRcIi4vcHRcIjogODk1MjAsXG5cdFwiLi9wdC1iclwiOiA1Nzk3MSxcblx0XCIuL3B0LWJyLmpzXCI6IDU3OTcxLFxuXHRcIi4vcHQuanNcIjogODk1MjAsXG5cdFwiLi9yb1wiOiA5NjQ1OSxcblx0XCIuL3JvLmpzXCI6IDk2NDU5LFxuXHRcIi4vcnVcIjogMjE3OTMsXG5cdFwiLi9ydS5qc1wiOiAyMTc5Myxcblx0XCIuL3NkXCI6IDQwOTUwLFxuXHRcIi4vc2QuanNcIjogNDA5NTAsXG5cdFwiLi9zZVwiOiAxMDQ5MCxcblx0XCIuL3NlLmpzXCI6IDEwNDkwLFxuXHRcIi4vc2lcIjogOTAxMjQsXG5cdFwiLi9zaS5qc1wiOiA5MDEyNCxcblx0XCIuL3NrXCI6IDY0MjQ5LFxuXHRcIi4vc2suanNcIjogNjQyNDksXG5cdFwiLi9zbFwiOiAxNDk4NSxcblx0XCIuL3NsLmpzXCI6IDE0OTg1LFxuXHRcIi4vc3FcIjogNTExMDQsXG5cdFwiLi9zcS5qc1wiOiA1MTEwNCxcblx0XCIuL3NyXCI6IDQ5MTMxLFxuXHRcIi4vc3ItY3lybFwiOiA3OTkxNSxcblx0XCIuL3NyLWN5cmwuanNcIjogNzk5MTUsXG5cdFwiLi9zci5qc1wiOiA0OTEzMSxcblx0XCIuL3NzXCI6IDk1NjA2LFxuXHRcIi4vc3MuanNcIjogOTU2MDYsXG5cdFwiLi9zdlwiOiA5ODc2MCxcblx0XCIuL3N2LmpzXCI6IDk4NzYwLFxuXHRcIi4vc3dcIjogOTExNzIsXG5cdFwiLi9zdy5qc1wiOiA5MTE3Mixcblx0XCIuL3RhXCI6IDI3MzMzLFxuXHRcIi4vdGEuanNcIjogMjczMzMsXG5cdFwiLi90ZVwiOiAyMzExMCxcblx0XCIuL3RlLmpzXCI6IDIzMTEwLFxuXHRcIi4vdGV0XCI6IDUyMDk1LFxuXHRcIi4vdGV0LmpzXCI6IDUyMDk1LFxuXHRcIi4vdGdcIjogMjczMjEsXG5cdFwiLi90Zy5qc1wiOiAyNzMyMSxcblx0XCIuL3RoXCI6IDkwNDEsXG5cdFwiLi90aC5qc1wiOiA5MDQxLFxuXHRcIi4vdGtcIjogMTkwMDUsXG5cdFwiLi90ay5qc1wiOiAxOTAwNSxcblx0XCIuL3RsLXBoXCI6IDc1NzY4LFxuXHRcIi4vdGwtcGguanNcIjogNzU3NjgsXG5cdFwiLi90bGhcIjogODk0NDQsXG5cdFwiLi90bGguanNcIjogODk0NDQsXG5cdFwiLi90clwiOiA3MjM5Nyxcblx0XCIuL3RyLmpzXCI6IDcyMzk3LFxuXHRcIi4vdHpsXCI6IDI4MjU0LFxuXHRcIi4vdHpsLmpzXCI6IDI4MjU0LFxuXHRcIi4vdHptXCI6IDUxMTA2LFxuXHRcIi4vdHptLWxhdG5cIjogMzA2OTksXG5cdFwiLi90em0tbGF0bi5qc1wiOiAzMDY5OSxcblx0XCIuL3R6bS5qc1wiOiA1MTEwNixcblx0XCIuL3VnLWNuXCI6IDkyODgsXG5cdFwiLi91Zy1jbi5qc1wiOiA5Mjg4LFxuXHRcIi4vdWtcIjogNjc2OTEsXG5cdFwiLi91ay5qc1wiOiA2NzY5MSxcblx0XCIuL3VyXCI6IDEzNzk1LFxuXHRcIi4vdXIuanNcIjogMTM3OTUsXG5cdFwiLi91elwiOiA2NzkxLFxuXHRcIi4vdXotbGF0blwiOiA2MDU4OCxcblx0XCIuL3V6LWxhdG4uanNcIjogNjA1ODgsXG5cdFwiLi91ei5qc1wiOiA2NzkxLFxuXHRcIi4vdmlcIjogNjU2NjYsXG5cdFwiLi92aS5qc1wiOiA2NTY2Nixcblx0XCIuL3gtcHNldWRvXCI6IDE0Mzc4LFxuXHRcIi4veC1wc2V1ZG8uanNcIjogMTQzNzgsXG5cdFwiLi95b1wiOiA3NTgwNSxcblx0XCIuL3lvLmpzXCI6IDc1ODA1LFxuXHRcIi4vemgtY25cIjogODM4MzksXG5cdFwiLi96aC1jbi5qc1wiOiA4MzgzOSxcblx0XCIuL3poLWhrXCI6IDU1NzI2LFxuXHRcIi4vemgtaGsuanNcIjogNTU3MjYsXG5cdFwiLi96aC1tb1wiOiA5OTgwNyxcblx0XCIuL3poLW1vLmpzXCI6IDk5ODA3LFxuXHRcIi4vemgtdHdcIjogNzQxNTIsXG5cdFwiLi96aC10dy5qc1wiOiA3NDE1MlxufTtcblxuXG5mdW5jdGlvbiB3ZWJwYWNrQ29udGV4dChyZXEpIHtcblx0dmFyIGlkID0gd2VicGFja0NvbnRleHRSZXNvbHZlKHJlcSk7XG5cdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKGlkKTtcbn1cbmZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0UmVzb2x2ZShyZXEpIHtcblx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhtYXAsIHJlcSkpIHtcblx0XHR2YXIgZSA9IG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIgKyByZXEgKyBcIidcIik7XG5cdFx0ZS5jb2RlID0gJ01PRFVMRV9OT1RfRk9VTkQnO1xuXHRcdHRocm93IGU7XG5cdH1cblx0cmV0dXJuIG1hcFtyZXFdO1xufVxud2VicGFja0NvbnRleHQua2V5cyA9IGZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0S2V5cygpIHtcblx0cmV0dXJuIE9iamVjdC5rZXlzKG1hcCk7XG59O1xud2VicGFja0NvbnRleHQucmVzb2x2ZSA9IHdlYnBhY2tDb250ZXh0UmVzb2x2ZTtcbm1vZHVsZS5leHBvcnRzID0gd2VicGFja0NvbnRleHQ7XG53ZWJwYWNrQ29udGV4dC5pZCA9IDQ2NzAwOyJdLCJuYW1lcyI6WyJvcHRpb25zIiwic3R5bGVUYWdUcmFuc2Zvcm0iLCJzZXRBdHRyaWJ1dGVzIiwiaW5zZXJ0IiwiZG9tQVBJIiwiaW5zZXJ0U3R5bGVFbGVtZW50IiwiU2VhcmNoQ29udGV4dCIsImNyZWF0ZUNvbnRleHQiLCJnZXRTZWFyY2hUYXJnZXRzIiwiU2V0dGluZ3NDb250ZXh0Iiwic2V0dGluZ3MiLCJvcGVuU2V0dGluZ3NEaWFsb2ciLCJmYUNvbGxlY3Rpb25zIiwiYnJhbmRzIiwiZGVmYXVsdCIsInNvbGlkIiwicm91bmQiLCJJY29uIiwicHJvcHMiLCJuYW1lIiwiY2xhc3NOYW1lIiwiY29sbGVjdGlvbiIsImljb25Qcm9wcyIsImdyb3VwQ2xhc3MiLCJpY29uQ2xhc3MiLCJqb2luIiwicHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwiZGVmYXVsdFByb3BzIiwiSWNvbkJ1dHRvbiIsImljb24iLCJ0ZXh0IiwiY2hpbGRyZW4iLCJvbkNsaWNrIiwicmVzdCIsInBhcnNlQm9vbGVhbiIsInZhbCIsImluY2x1ZGVzIiwidG9TdHJpbmciLCJ0b0xvd2VyQ2FzZSIsImFwaUJhc2VVcmwiLCJwcm9jZXNzIiwiZW5hYmxlR2l0SHViIiwiZW5hYmxlTG9jYWwiLCJlbmFibGVEZW1vIiwibG9hZEJlaGF2aW91ckJpbmRpbmdzIiwiYmVoYXZpb3JTY2hlbWFzIiwiYmVoYXZpb3JCaW5kaW5ncyIsImJlaGF2aW9ycyIsImJpbmRpbmdzIiwia2V5Y29kZXMiLCJrZXljb2RlR2x5cGhzIiwibG9hZEF2YWlsYWJsZUtleWJvYXJkcyIsImZldGNoIiwiY29uZmlnIiwicmVzcG9uc2UiLCJqc29uIiwibG9hZEtleWJvYXJkRmlsZXMiLCJrZXlib2FyZCIsInBhdGgiLCJlbmNvZGVVUklDb21wb25lbnQiLCJ1cmwiLCJvayIsImVyciIsIkVycm9yIiwidXBkYXRlS2V5bWFwIiwia2V5bWFwIiwibWV0aG9kIiwiaGVhZGVycyIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5Iiwic2hvcnRlc3RBbGlhcyIsImFsaWFzZXMiLCJzb3J0IiwiYSIsImIiLCJsZW5ndGgiLCJmblBhdHRlcm4iLCJub3JtYWxpemVabWtLZXljb2RlcyIsInJlZHVjZSIsImtleWNvZGUiLCJkZXNjcmlwdGlvbiIsImNvbnRleHQiLCJzeW1ib2wiLCJmYUljb24iLCJuYW1lcyIsImZpbHRlciIsIm1hdGNoIiwiZm5Db2RlIiwibWFwIiwidiIsImJhc2UiLCJwYXJhbXMiLCJjb2RlIiwicHVzaCIsIk9iamVjdCIsImFzc2lnbiIsImlzTW9kaWZpZXIiLCJzcGxpdCIsImkiLCJEZWZpbml0aW9uc0NvbnRleHQiLCJiZWhhdmlvdXJzIiwiYmVoYXZpb3JCaW5kcyIsImdseXBocyIsInNlbGVjdERlZmluaXRpb25zIiwic3RhdGUiLCJkZWZpbml0aW9ucyIsIkRlZmluaXRpb25zQ29udGV4dFByb3ZpZGVyIiwidXNlU2VsZWN0b3IiLCJkaXNwYXRjaCIsInVzZURpc3BhdGNoIiwidXNlRWZmZWN0IiwiUHJvbWlzZSIsImFsbCIsImFwaSIsInRoZW4iLCJzY2hlbWFzIiwiY2xvbmVEZWVwIiwiaW5kZXhlZCIsImtleUJ5Iiwibm9uZSIsIm1hY3JvcyIsImJ5Q29udGV4dCIsInR5cGUiLCJQcm92aWRlciIsInZhbHVlIiwidXNlQ29udGV4dCIsIm1lcmdlZEdseXBocyIsInVzZU1lbW8iLCJpc01hYyIsIndpbmRvdyIsIm5hdmlnYXRvciIsInBsYXRmb3JtIiwic3RhcnRzV2l0aCIsImlzV2luIiwiY29tcGFjdCIsImJhc2ljIiwidW5pY29kZSIsInBsYXRmb3JtcyIsIm1hYyIsIndpbiIsIm92ZXJsYXkiLCJnZXRNZXJnZWRHbHlwaHMiLCJnZXQiLCJwbGF0Zm9ybUdseXBocyIsImV4dGVuZGVkQmVoYXZpb3VycyIsImZ1bGxMaXN0IiwiYmVoYXZpb3IiLCJsYWJlbHMiLCJiaW5kIiwicHJvcGVydGllcyIsImxhYmVsIiwicmF3IiwibWFjcm8iLCJhdmFpbGFibGVMYXllcnMiLCJpc0VtcHR5IiwibGF5ZXJzIiwibGF5ZXIiLCJzb3VyY2VzIiwiYmVoYXZpb3Vyc0J5Q29udGV4dCIsInNlYXJjaFRhcmdldHMiLCJiZWhhdmlvdXIiLCJwYXJhbSIsImVudW0iLCJjb25zb2xlIiwiZXJyb3IiLCJpZGVudGlmaWVycyIsImtleXMiLCJkZWZpbmVzIiwidW5kZWZpbmVkIiwiQWN0aW9uQnV0dG9uIiwic2Vjb25kYXJ5Iiwic3R5bGVzIiwiRGlhbG9nQm94IiwiZGlzbWlzc1RleHQiLCJjbGFzc2VzIiwib25EaXNtaXNzIiwid3JhcHBlciIsInBvc2l0aW9uIiwidG9wIiwibGVmdCIsIndpZHRoIiwiaGVpZ2h0IiwiYmFja2dyb3VuZENvbG9yIiwiYmFja2Ryb3BGaWx0ZXIiLCJ6SW5kZXgiLCJkaXNwbGF5IiwianVzdGlmeUNvbnRlbnQiLCJhbGlnbkl0ZW1zIiwiY2VudGVyT25seSIsImJhY2tncm91bmQiLCJwb2ludGVyRXZlbnRzIiwiY29udGVudCIsIk1vZGFsIiwidXNlUmVmIiwiaGFuZGxlQ2xpY2siLCJ1c2VDYWxsYmFjayIsImUiLCJjdXJyZW50IiwidGFyZ2V0IiwiY29udGFpbnMiLCJzdHlsZSIsIlJlYWN0RE9NIiwicmVmIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsIklucHV0IiwidmFsaWRhdG9yIiwicmVxdWlyZWQiLCJwcm9wVmFsdWVTaGFwZSIsInVzZVJhdyIsInBhcnNlZCIsImRldmljZXRyZWVOb2RlU2hhcGUiLCJpc1JlcXVpcmVkIiwicHJvcFZhbHVlIiwia2V5IiwiY29tcG9uZW50TmFtZSIsImxvY2F0aW9uIiwicHJvcEZ1bGxOYW1lIiwidmFsaWRhdGVEZXZpY2V0cmVlTm9kZU5hbWUiLCJ2YWxpZGF0ZURldmljZXRyZWVJZGVudGlmaWVyIiwidmFsaWRhdGVEZXZpY2V0cmVlTGFiZWwiLCJpc0NvbWJpbmVkIiwibm9kZSIsIm5vZGVMYWJlbCIsImxhYmVsUHJvcCIsIk5vZGVJZGVudGlmaWVycyIsIm9uVXBkYXRlIiwidXNlU3RhdGUiLCJuYW1lRnJvbUJpbmQiLCJzZXROYW1lRnJvbUJpbmQiLCJsYWJlbEZyb21CaW5kIiwic2V0TGFiZWxGcm9tQmluZCIsImhhbmRsZVVwZGF0ZU5vZGVOYW1lIiwiaGFuZGxlVXBkYXRlTm9kZUxhYmVsIiwic2xpY2UiLCJ0b1VwcGVyQ2FzZSIsInVzZUlkZW50aWZpZXJVcGRhdGVycyIsImhhbmRsZVVwZGF0ZUxhYmVsUHJvcGVydHkiLCJvbkNoYW5nZSIsInJlYWRPbmx5IiwiZGlzYWJsZWQiLCJ0aXRsZSIsImNoZWNrZWQiLCJCZWhhdmlvckhlYWRlciIsImNvbXBhdGlibGUiLCJQcm9wZXJ0eU5hbWUiLCJwcm9wZXJ0eSIsInNjaGVtYSIsImRlcHJlY2F0ZWRCeSIsIkRFRkFVTFRfU0laRSIsIkRFRkFVTFRfUEFERElORyIsImdldENvbXB1dGVkUGFyYW1zIiwic2l6ZSIsInJvdGF0aW9uIiwieCIsInkiLCJ1IiwiaCIsInJ4IiwicnkiLCJ0cmFuc2Zvcm1LZXlQb2x5Z29uIiwicG9pbnQiLCJhbmdsZSIsIk1hdGgiLCJQSSIsImNvcyIsInNpbiIsImdldFdyYXBwZXJEaW1lbnNpb25zIiwibGF5b3V0IiwidHJhbnNmb3JtZWQiLCJ4VmFsdWVzIiwieVZhbHVlcyIsIm1pbiIsIm1heCIsImdldEtleUJvdW5kaW5nQm94IiwidyIsInIiLCJnZXRXcmFwcGVyU3R5bGUiLCJsYXlvdXRPckJCb3giLCJzY2FsZSIsIm92ZXJyaWRlcyIsImJib3giLCJBcnJheSIsImlzQXJyYXkiLCJtYXJnaW4iLCJwYWRkaW5nIiwiZGltZW5zaW9ucyIsImtleUxheW91dCIsImdldFBvc2l0aW9uIiwicGljayIsImdldFJvdGF0aW9uIiwiZ2V0U2l6ZSIsIlBsYWNlciIsInBvc2l0aW9uaW5nU3R5bGUiLCJ0cmFuc2Zvcm1PcmlnaW4iLCJ0cmFuc2Zvcm0iLCJnZXRLZXlTdHlsZXMiLCJsYXlvdXRQcm9wVHlwZXMiLCJLZXlib2FyZExheW91dCIsInJlbmRlcktleSIsImluZGV4Iiwic2VsZWN0YWJsZSIsInRoZW1lQ2xhc3MiLCJEcmFnU2VsZWN0Q29udGFpbmVyIiwib25Nb3VzZURvd24iLCJzZWxlY3RpbmciLCJuZWdhdGUiLCJyZWN0IiwidXNlRHJhZ1NlbGVjdG9yIiwicG9seWdvbnMiLCJvblNlbGVjdCIsInNldFN0YXRlIiwiaGFuZGxlTW91c2VEb3duIiwiZXZlbnQiLCJlbGVtZW50IiwicGFyZW50Tm9kZSIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImdldFJlbGF0aXZlQW5jZXN0b3IiLCJjbGllbnRYIiwiY2xpZW50WSIsInByZXZlbnREZWZhdWx0Iiwic3RhcnQiLCJpbnRlcnNlY3RpbmciLCJvZmZzZXQiLCJvZmZzZXRSZWN0IiwiaGFuZGxlS2V5RG93biIsInJlcGVhdCIsInNoaWZ0S2V5IiwiaGFuZGxlS2V5VXAiLCJoYW5kbGVNb3VzZU1vdmUiLCJhbHRLZXkiLCJ4MCIsInkwIiwiY2xhbXAiLCJyaWdodCIsImJvdHRvbSIsImFicyIsImdldEludGVyc2VjdGluZ1BvbHlnb25zIiwiaGFuZGxlTW91c2VVcCIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwib25Nb3VzZU1vdmUiLCJhY2MiLCJwb2ludHMiLCJzb21lIiwiVGlwIiwiY2xhc3NOYW1lcyIsIkxheW91dENvbnRleHQiLCJiaW5kaW5nQ291bnQiLCJ3cmFwcGVyRGltZW5zaW9ucyIsIndyYXBwZXJTdHlsZSIsIkxheW91dENvbnRleHRQcm92aWRlciIsImxheW91dFNjYWxlIiwiZ2V0UG9seWdvbnMiLCJnZXRMYXlvdXRQb2x5Z29ucyIsIktleVBvc2l0aW9uU2VsZWN0b3IiLCJtYW51YWxTZWxlY3Rpb24iLCJtYW51YWxEZVNlbGVjdGlvbiIsImRyYWdTZWxlY3Rpb24iLCJkcmFnRGVTZWxlY3Rpb24iLCJwcm9tcHQiLCJrZXlQb2x5Z29ucyIsInVzZVJlZHVjZXIiLCJhY3Rpb24iLCJtYW51YWxTZWxlY3Rpb25Db3VudCIsIm1hbnVhbERlU2VsZWN0aW9uQ291bnQiLCJ1c2VkRHJhZ1NlbGVjdGlvbiIsInVzZWREcmFnRGVTZWxlY3Rpb24iLCJzaG93U2VsZWN0VGlwIiwic2hvd0RlU2VsZWN0VGlwIiwiYWN0aW9ucyIsInNlbGVjdGlvbkFjdGlvbnMiLCJoYW5kbGVEcmFnU2VsZWN0IiwiaGFuZGxlU2VsZWN0S2V5IiwiaXNTZWxlY3RlZCIsImtleVBvc2l0aW9uIiwiZHJhZ1Byb3BzIiwic2VsZWN0ZWRJbmRpY2VzIiwicHJldmlld0FkZGluZ0luZGljZXMiLCJwcmV2aWV3UmVtb3ZpbmdJbmRpY2VzIiwiUmF3UHJvcGVydHlWYWx1ZSIsInByb3AiLCJDb25zdFByb3BlcnR5VmFsdWUiLCJjb25zdCIsIlN0cmluZ1Byb3BlcnR5VmFsdWUiLCJwbGFjZWhvbGRlciIsIkludGVnZXJQcm9wZXJ0eVZhbHVlIiwiTnVtYmVyIiwiQm9vbGVhblByb3BlcnR5VmFsdWUiLCJjeWNsZSIsImFycmF5IiwibmV4dCIsIlJlc3VsdExpc3QiLCJyZXN1bHRzIiwicmVuZGVyUmVzdWx0IiwiY3Vyc29ySW5kZXgiLCJzZXRDdXJzb3JJbmRleCIsImxpc3RSZWYiLCJtb3ZlQ3Vyc29yIiwiaW5pdGlhbCIsInNjcm9sbCIsInNlbGVjdG9yIiwicXVlcnlTZWxlY3RvciIsIm9mZnNldFBhcmVudCIsInNjcm9sbFRvcCIsIm9mZnNldEhlaWdodCIsIm9mZnNldFRvcCIsInNjcm9sbEhlaWdodCIsInNjcm9sbEludG9WaWV3IiwiaGFuZGxlSGlnaGxpZ2h0TmV4dCIsImhhbmRsZUhpZ2h0aWdodFByZXYiLCJoYW5kbGVTZWxlY3RBY3RpdmUiLCJBcnJvd0Rvd24iLCJBcnJvd1VwIiwiRW50ZXIiLCJzdG9wUHJvcGFnYXRpb24iLCJyZXN1bHQiLCJvbkRvdWJsZUNsaWNrIiwib25Nb3VzZU92ZXIiLCJmb2N1c0lucHV0IiwiZm9jdXMiLCJzZWxlY3QiLCJTZWFyY2hGaWx0ZXIiLCJjaG9pY2VzIiwic2VhcmNoS2V5IiwicmVuZGVyUmVzdWx0cyIsImluaXRpYWxRdWVyeSIsInVzZVNlYXJjaCIsInF1ZXJ5Iiwic2V0UXVlcnkiLCJsaW1pdCIsImZ1enp5c29ydCIsIm9iaiIsInNlYXJjaCIsImhhbmRsZUtleVByZXNzIiwiQ2hvaWNlc1BpY2tlciIsImZvcm1hdHRlZENob2ljZXMiLCJyZW5kZXJTZWFyY2hSZXN1bHQiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsIl9faHRtbCIsImNob2ljZSIsIkVudW1Qcm9wZXJ0eVZhbHVlIiwiaGFuZGxlQ2hhbmdlIiwiaW5kZXhPZiIsIk11bHRpU2VsZWN0UHJvcGVydHlWYWx1ZSIsIiRzb3VyY2UiLCJzb3VyY2UiLCIka2V5IiwidXNlU2NoZW1hQ2hvaWNlcyIsInNlbGVjdGVkIiwiTXVsdGlTZWxlY3QiLCJNdWx0aVNlbGVjdENoaXBzIiwiTXVsdGlTZWxlY3RDaGVja2JveGVzIiwiYWRkaW5nIiwic2V0QWRkaW5nIiwiYWRkQ2hvaWNlIiwicmVtb3ZlIiwiRW51bVBpY2tlciIsIm5vZGVTaGFwZSIsImJpbmROb2RlIiwiR2VuZXJpY1BpY2tlciIsIkhTQlBpY2tlciIsInMiLCJsIiwiaHNsIiwic2V0SHNsIiwiaGFuZGxlQ29uZmlybSIsImNvbG9yIiwiZGlzYWJsZUFscGhhIiwib25DaGFuZ2VDb21wbGV0ZSIsInRleHRBbGlnbiIsInRyZWVUb1NlcXVlbmNlIiwidHJlZSIsInNlcXVlbmNlVG9UcmVlIiwic2VxIiwibGVmdE1vZGlmaWVycyIsInJpZ2h0TW9kaWZpZXJzIiwiTW9kaWZpZXJzUm93Iiwicm93IiwibW9kIiwiTW9kaWZpZXJzUGlja2VyIiwiaGFuZGxlU2VsZWN0aW9uIiwibW9kaWZpZXIiLCJOdWxsS2V5IiwiZ2V0U291cmNlVGl0bGUiLCJyZW5kZXJTb3VyY2UiLCJCaW5kVmFsdWUiLCJfaXNQbGFjZWhvbGRlciIsImJpbmRQcm9wVHlwZXMiLCJjb2RlcyIsImNvZGVMYWJlbHMiLCJGcmFnbWVudCIsIm1pc3NpbmciLCJnZXRCZWhhdmlvdXJQYXJhbXMiLCJwYXJzZWRQYXJhbXMiLCJmaXJzdFBhcnNlZFBhcmFtIiwiY29tbWFuZHMiLCJjb25jYXQiLCJtYWtlSW5kZXgiLCJ0cmF2ZXJzZSIsImZvckVhY2giLCJpc0NvbXBsZXgiLCJub3JtYWxpemVkIiwiYmVoYXZpb3VyUGFyYW1zIiwiZmlyc3QiLCJpc0xvbmdTeW1ib2wiLCJpc011bHRpUGFyYW0iLCJpc05lc3RlZFBhcmFtIiwiY3JlYXRlUHJvbXB0TWVzc2FnZSIsInByb21wdE1hcHBpbmciLCJjb21tYW5kIiwiaHlkcmF0ZVRyZWUiLCJoeWRyYXRlTm9kZSIsInNsb3QiLCJhcyIsImdldFNvdXJjZVZhbHVlIiwibW9kaWZpZXJzTWFwIiwiTFNIRlQiLCJMQ1RSTCIsIkxBTFQiLCJMR1VJIiwiUlNIRlQiLCJSQ1RSTCIsIlJBTFQiLCJSR1VJIiwicmVzdWx0TGlzdFN0eWxlIiwiS2V5Y29kZVBpY2tlciIsImluaXRpYWxNb2RpZmllcnMiLCJzZWxlY3RlZE1vZGlmaWVycyIsInNldFNlbGVjdGVkTW9kaWZpZXJzIiwiYXQiLCJzZWxlY3RlZEtleWNvZGUiLCJzZXRTZWxlY3RlZEtleWNvZGUiLCJoeWRyYXRlZCIsIm1vZGlmaWVycyIsIm1vZGlmaWVyRnVuY3Rpb25zIiwiaGFuZGxlU2VsZWN0S2V5Y29kZSIsImdhcCIsIlJhd1ZhbHVlUGlja2VyIiwiaW5pdGlhbFZhbHVlIiwic2V0VmFsdWUiLCJpc05hTiIsIm9uS2V5RG93biIsIkRFRkFVTFRfQklORF9CRUhBVklPVVIiLCJzZWxlY3RMYXllcnMiLCJsYXllcnNTbGljZSIsImNyZWF0ZVNsaWNlIiwiaW5pdGlhbFN0YXRlIiwicmVkdWNlcnMiLCJjcmVhdGVMYXllciIsInRpbWVzIiwicGF5bG9hZCIsImNyZWF0ZUVtcHR5QmluZGluZyIsInVwZGF0ZUxheWVyTWV0YWRhdGEiLCJsYXllckluZGV4IiwicmVuYW1lTGF5ZXIiLCJkZWxldGVMYXllciIsInNwbGljZSIsInVwZGF0ZUtleUJpbmRpbmciLCJiaW5kSW5kZXgiLCJiaW5kaW5nIiwidXBkYXRlU2Vuc29yQmluZGluZ3MiLCJzZW5zb3JCaW5kaW5ncyIsInNlbnNvckluZGV4IiwicmViaW5kVHJhbnNwYXJlbnRUb0tleVByZXNzIiwicmViaW5kVHJhbnNwYXJlbnRUb05vbmUiLCJyZWJpbmROb25lVG9LZXlwcmVzcyIsInJlYmluZE5vbmVUb1RyYW5zcGFyZW50IiwicmViaW5kRW1wdHlLZXlwcmVzc1RvVHJhbnNwYXJlbnQiLCJyZWJpbmRFbXB0eUtleXByZXNzVG9Ob25lIiwiTGF5ZXJQaWNrZXIiLCJWYWx1ZVBpY2tlciIsIm9uQ2FuY2VsIiwicGlja2VyUHJvcHMiLCJQaWNrZXJDb21wb25lbnQiLCJoZWxwZXIiLCJIdWVTYXRWYWxQaWNrZXIiLCJzZWFyY2hUaHJlc2hvbGQiLCJmcmVlRm9ybSIsIndpdGhvdXRJbmRleCIsInJlcGxhY2VJbmRleCIsIkJlaGF2aW9yc3NQcm9wZXJ0eVZhbHVlIiwic2VsZWN0aW9uIiwiZWRpdGluZyIsInNldEVkaXRpbmciLCJpbnNlcnRQaGFuZGxlIiwidXBkYXRlUGhhbmRsZSIsInJlbW92ZVBoYW5kbGUiLCJwaGFuZGxlIiwib3V0ZXJTdHlsZSIsImN1cnNvciIsInZlcnRpY2FsQWxpZ24iLCJib3JkZXIiLCJib3JkZXJSYWRpdXMiLCJpbm5lclN0eWxlIiwiaGFuZGxlU2VsZWN0UGFyYW1zIiwiR2VuZXJpY0JpbmROb2RlIiwiQmluZFBhcmFtbGlzdCIsInNsb3RzIiwiQmluZFBhcmFtIiwiQmluZENvbXBvbmVudCIsIkh1ZVNhdFZhbEJpbmROb2RlIiwiS2V5Y29kZUJpbmROb2RlIiwicm9vdCIsIndyYXBwZXJQcm9wcyIsIkJpbmRpbmciLCJzaG9ydFN5bWJvbCIsImhpZGVCZWhhdmlvdXIiLCJiaW5kVHJlZSIsImVycm9ycyIsImhhc0Vycm9ycyIsImhhbmRsZVNlbGVjdE5vZGUiLCJub2RlSW5kZXgiLCJ1cGRhdGVkIiwidGFyZ2V0Tm9kZSIsImhhbmRsZVNlbGVjdFRyZWUiLCJvbGRBZGRpdGlvbmFsUGFyYW1zIiwiYWRkaXRpb25hbFBhcmFtcyIsInAiLCJLZXkiLCJrZXlXcmFwcGVyUHJvcHMiLCJCaW5kaW5nc1Byb3BlcnR5VmFsdWUiLCJpbnNlcnRCaW5kaW5nIiwidXBkYXRlQmluZGluZyIsInJlbW92ZUJpbmRpbmciLCJQcm9wZXJ0eVZhbHVlIiwicGVuZGluZ0NoYW5nZXMiLCJzZXRQZW5kaW5nQ2hhbmdlcyIsImhhbmRsZVByb3BWYWx1ZUNoYW5nZSIsImNvbmZpcm0iLCJzY2hlbWFQcm9wcyIsInByb3BlcnRpZXNMaXN0IiwibWF4SGVpZ2h0Iiwib3ZlcmZsb3ciLCJvbWl0IiwiaGFuZGxlRGVsZXRlUHJvcCIsIkxpbmsiLCJocmVmIiwiZXh0ZXJuYWwiLCJzaG93RXh0ZXJuYWwiLCJyZWwiLCJCZXRhTm90aWNlRGlhbG9nIiwiaXNzdWVzTGluayIsImtub3duQmVoYXZpb3JUeXBlcyIsIk5ld0JlaGF2aW9yTW9kYWwiLCJwZW5kaW5nU2VsZWN0aW9uIiwic2V0UGVuZGluZ1NlbGVjdGlvbiIsImNyZWF0ZUJlaGF2aW9yIiwicHJvcFNjaGVtYSIsImlzQmluZGluZ1R5cGUiLCJzZWxlY3RCZWhhdmlvcnMiLCJiZWhhdmlvcnNTbGljZSIsImFkZEJlaGF2aW9yIiwidXBkYXRlQmVoYXZpb3IiLCJiZWhhdmlvckluZGV4IiwicmVzb2x2ZUJlaGF2aW9yUGFyYW1zIiwiZGVsZXRlQmVoYXZpb3IiLCJleHBlcmltZW50YWxTZXR0aW5ncyIsImNyZWF0aW5nIiwic2V0Q3JlYXRpbmciLCJiZXRhRGlzY2xhaW1lclZpc2libGUiLCJzZXRCZXRhRGlzY2xhaW1lclZpc2libGUiLCJoYW5kbGVBZGQiLCJoYW5kbGVBZGRQZW5kaW5nIiwic2V0VGltZW91dCIsImhhbmRsZUVkaXQiLCJoYW5kbGVEZWxldGUiLCJzaG93QmV0YURpYWxvZyIsImhpZGVCZXRhRGlhbG9nIiwidG9nZ2xlQmV0YSIsImVuYWJsZUJlaGF2aW9yRWRpdGluZyIsIlNlbGVjdEtleUNUQSIsIkNvbWJvSW5wdXRNYXAiLCJrZXlQb3NpdGlvbnMiLCJzdG9wIiwiZm4iLCJvbktleSIsIm1hcHBpbmciLCJFZGl0YWJsZUZpZWxkIiwidmFsaWRhdGUiLCJyZW5kZXIiLCJhdHRlbXB0ZWRFbXB0eSIsImNhbmNlbEVkaXRpbmciLCJoYW5kbGVDbGlja091dHNpZGUiLCJFc2NhcGUiLCJvcHRpb24iLCJjb21ibyIsInBlbmRpbmciLCJzZXRQZW5kaW5nIiwiaWRlbnRpZmllciIsImh0bWxGb3IiLCJpZCIsInRpbWVvdXRNcyIsInNsb3dSZWxlYXNlIiwic2VsZWN0Q29tYm9zIiwiY29tYm9zIiwiY29tYm9zU2xpY2UiLCJ1cGRhdGVDb21ib0JpbmRpbmciLCJjb21ib0luZGV4IiwidXBkYXRlQ29tYm9LZXlwb3NpdGlvbnMiLCJjcmVhdGVDb21ibyIsInJlbmFtZUNvbWJvIiwiZGVsZXRlQ29tYm8iLCJjdXN0b21pemVDb21ibyIsIkNvbWJvRWRpdG9yIiwiY29uZmlnRWRpdCIsInNldENvbmZpZ0VkaXQiLCJ2YWxpZGF0ZUNvbWJvSWRlbnRpZmllciIsImhhbmRsZUN1c3RvbWl6ZUNvbWJvIiwiaGFuZGxlUmVuYW1lQ29tYm8iLCJ1cGRhdGUiLCJoYW5kbGVVcGRhdGVCaW5kaW5ncyIsImhhbmRsZVVwZGF0ZUtleVBvc2l0aW9ucyIsIkxheWVyU2VsZWN0b3IiLCJhY3RpdmVMYXllciIsInJlbmFtaW5nIiwic2V0UmVuYW1pbmciLCJoYW5kbGVTZWxlY3QiLCJsYXllck5hbWUiLCJmaW5pc2hFZGl0aW5nIiwiQXJyb3dJY29uIiwiZGlyZWN0aW9uIiwieG1sbnMiLCJ2aWV3Qm94Iiwic3Ryb2tlIiwic3Ryb2tlV2lkdGgiLCJmaWxsIiwiZCIsIkVuY29kZXJCaW5kaW5nIiwic2Vuc29ycyIsImhhbmRsZVVwZGF0ZSIsIm9yaWdpbmFsQmluZGluZ3MiLCJmbGV4RGlyZWN0aW9uIiwic2Vuc29yIiwibGFiZWxUZXh0IiwiaW5jcmVtZW50IiwiZGVjcmVtZW50IiwiZm9udFZhcmlhbnQiLCJmb250U2l6ZSIsIm1hcmdpblRvcCIsIkFjdGlvbk1lbnUiLCJpc09wZW4iLCJzZXRPcGVuIiwiY2xvc2VBbmQiLCJjYWxsYmFjayIsIkxheWVyQWN0aW9uc01lbnUiLCJhZGRpdGlvbmFsQWN0aW9ucyIsInRyYW5zcGFyZW50VG9LZXlwcmVzcyIsInRyYW5zcGFyZW50VG9Ob25lIiwibm9uZVRvS2V5cHJlc3MiLCJub25lVG9UcmFuc3BhcmVudCIsImVtcHR5S2V5cHJlc3NUb1RyYW5zcGFyZW50IiwiZW1wdHlLZXlwcmVzc1RvTm9uZSIsIm9uQ2xvc2UiLCJQcm9tcHRGb3JGaXJzdExheWVyIiwiTGF5ZXJCaW5kaW5ncyIsImhhbmRsZVVwZGF0ZUJpbmQiLCJJTklUSUFMX1NUQVRFIiwia2V5c0hlbGQiLCJrZXlzSGVsZEJlZm9yZUxhc3RSZWxlYXNlIiwibWFwcGluZ3MiLCJBbHQiLCJDb250cm9sIiwiU2hpZnQiLCJNZXRhIiwiQXJyb3dMZWZ0IiwiQXJyb3dSaWdodCIsIlRhYiIsIkhvbWUiLCJFbmQiLCJQYWdlRG93biIsIlBhZ2VVcCIsIkJhY2tzcGFjZSIsIkRlbGV0ZSIsInVzZVF1aWNrQXNzaWdubWVudCIsImRlZmF1bHRTdGFydCIsImlzQWN0aXZlIiwic2V0SXNBY3RpdmUiLCJzZXRCaW5kSW5kZXgiLCJuZXh0QmluZCIsImFwcGxpZWRNb2RpZmllcnMiLCJjdHJsS2V5IiwibWV0YUtleSIsImdldE1vZGlmaWVycyIsIm1hcHBlZCIsIm1hcENoYXJhY3RlciIsInByZWZpeCIsImdldFNpZGVQcmVmaXgiLCJub3JtYWxpemVLZXkiLCJnZXRCaW5kRnJvbUtleSIsIm9uS2V5UHJlc3MiLCJyZWR1Y2VLZXlEb3duIiwicmVkdWNlS2V5VXAiLCJ1c2VLZXlIYW5kbGVyIiwic3RhcnRRdWlja0Fzc2lnbm1lbnQiLCJjYW5jZWxRdWlja0Fzc2lnbm1lbnQiLCJRdWlja0Fzc2lnbm1lbnRNb2RhbCIsInN0YXR1cyIsIm1pbldpZHRoIiwic2V0QWN0aXZlTGF5ZXIiLCJzaG93Q29uZmlnIiwic2V0U2hvd0NvbmZpZyIsInNob3dRdWlja0Fzc2lnbk1vZGFsIiwic2V0U2hvd1F1aWNrQXNzaWduTW9kYWwiLCJvcGVuQ29uZmlnIiwib3BlblF1aWNrQXNzaWduIiwiY2xvc2VRdWlja0Fzc2lnbiIsImlzQ29udHJvbEJpbmRpbmciLCJEcm9wWm9uZUNvbnRhaW5lciIsImRyYWdnaW5nIiwiZHJhZ01vZGUiLCJjdXJyZW50VGFyZ2V0Iiwic2V0Q3VycmVudFRhcmdldCIsImJpbmRpbmdSb3dzIiwicm93cyIsImlzUm93RW1wdHkiLCJncm91cEludG9Sb3dzIiwiaGFuZGxlRHJhZ0VudGVyIiwibG9nIiwiaXNDdXJyZW50VGFyZ2V0IiwiaXNFcXVhbCIsImhhbmRsZURyYWdMZWF2ZSIsImhhbmRsZURyb3AiLCJjb2wiLCJoYWxmIiwib25Ecm9wIiwiRHJvcFpvbmVSb3ciLCJpc0Ryb3BwaW5nIiwib25EcmFnRW50ZXIiLCJvbkRyYWdMZWF2ZSIsImoiLCJEcm9wWm9uZUJlZm9yZSIsIkRyb3Bab25lQWZ0ZXIiLCJEcm9wWm9uZSIsImNvbnRyb2wiLCJzaW5nbGVWYWx1ZSIsInBhdHRlcm5NYXBwaW5ncyIsInBhdHRlcm4iLCJjb252ZXJ0IiwiZGlnaXQiLCJjaGFyIiwic2ltcGxlTWFwcGluZ3MiLCIkIiwiXyIsInN0cmluZyIsInNldFN0cmluZyIsInNlcXVlbmNlIiwic2VsZWN0TWFjcm9zIiwibWFjcm9zU2xpY2UiLCJhZGRNYWNybyIsInJlbmFtZU1hY3JvIiwiZGVsZXRlTWFjcm8iLCJhZGRNYWNyb0NvbnRyb2xCaW5kaW5nIiwibWFjcm9JbmRleCIsImFkZE1hY3JvS2V5QmluZGluZyIsInVwZGF0ZU1hY3JvQmluZGluZyIsInJlb3JkZXJNYWNyb0JpbmRpbmciLCJ0YXJnZXRJbmRleCIsImFyciIsImRlbGV0ZU1hY3JvQmluZGluZyIsImN1c3RvbWl6ZU1hY3JvT3B0aW9ucyIsIk1hY3JvQmluZHMiLCJzZXREcmFnZ2luZyIsInNlcXVlbmNlTW9kYWxPcGVuIiwic2V0U2VxdWVuY2VNb2RhbE9wZW4iLCJjbGVhckRyb3AiLCJjbGVhckRyYWciLCJkcmFnZ2FibGUiLCJvbkRyYWdTdGFydCIsImRhdGFUcmFuc2ZlciIsIml0ZW1zIiwiY2xlYXJEYXRhIiwibW9kZSIsImhhbmRsZURyYWdTdGFydCIsIk1hY3JvIiwib3BlbkNvbmZpZ01vZGFsIiwiYmluZFNoYXBlIiwic2FuaXR5Q2hlY2tQb3NpaXRpb25zIiwiZXZlcnkiLCJzZWxlY3ROYW1lIiwiaXRlbSIsInNlbGVjdEJpbmQiLCJzZWxlY3RMYWJlbCIsImdldER1cGxpY2F0ZXNCeSIsIml0ZW1zQnlLZXkiLCJncm91cEJ5IiwidmFsdWVzIiwiZ3JvdXAiLCJzYW5pdHlDaGVja05vZGVOYW1lcyIsImxheWVyTmFtZXMiLCJjb21ib05hbWVzIiwibWFjcm9OYW1lcyIsImJlaGF2aW9yTmFtZXMiLCJnZXRCZWhhdmlvck5vZGVOYW1lcyIsImR1cGxpY2F0ZXMiLCJyZWRlZmluZWQiLCJyZXNlcnZlZElkZW50aWZpZXJzIiwicGFzc3dvcmRNYWNyb3MiLCJzYW5pdHlDaGVja05vZGVMYWJlbHMiLCJnZXRCZWhhdmlvckxhYmVscyIsInNhbml0eUNoZWNrTm9kZVJlZmVyZW5jZXMiLCJub2Rlc0J5UmVmIiwiZ2V0QmVoYXZpb3JSZWZlcmVuY2VzIiwibm9kZXMiLCJEZWZhdWx0V2FybmluZ0l0ZW0iLCJXYXJuaW5nQ2F0ZWdvcnkiLCJleHBsYW5hdGlvbiIsIndhcm5pbmdzIiwicmVuZGVyV2FybmluZyIsImNvbGxhcHNlZCIsInNldENvbGxhcHNlZCIsImlzc3VlIiwic2FuaXR5Q2hlY2tzIiwibm9kZU5hbWVzIiwibm9kZUxhYmVscyIsIm5vZGVSZWZlcmVuY2VzIiwibGF5b3V0TWlzc2luZ1Bvc2l0aW9ucyIsIm1heFdpZHRoIiwicGFkZGluZ0JvdHRvbSIsIlRhYnMiLCJ0YWJzIiwiZGVmYXVsdFRhYiIsImFjdGl2ZVRhYiIsInNldEFjdGl2ZVRhYiIsInRhYiIsInRhYkNsYXNzZXMiLCJzZWxlY3RLZXltYXAiLCJLZXlib2FyZCIsInNhbml0eUNoZWNrTGF5b3V0Iiwic2FuaXR5Q2hlY2siLCJ3YXJuaW5nQ291bnQiLCJjb21wb25lbnQiLCJMYXllckVkaXRvciIsImtleW1hcFByb3B0eXBlcyIsInJlcG9zaXRvcnlVcmwiLCJHaXRIdWJMaW5rIiwiZm9udFN0eWxlIiwiU2V0dGluZ3MiLCJoYW5kbGVVcGRhdGVTZXR0aW5nIiwidW5pY29kZUdseXBocyIsIlNwaW5uZXIiLCJ3ZWJzb2NrZXRVcmwiLCJBUEkiLCJ0aGlzIiwidG9rZW4iLCJBdXRob3JpemF0aW9uIiwiYXhpb3MiLCJlbWl0IiwiaW5pdGlhbGl6aW5nIiwiaW5pdEV2ZW50cyIsImluc3RhbGxhdGlvblVybCIsIlVSTFNlYXJjaFBhcmFtcyIsImJlZ2luTG9naW5GbG93IiwibG9jYWxTdG9yYWdlIiwiYXV0aF90b2tlbiIsImhpc3RvcnkiLCJyZXBsYWNlU3RhdGUiLCJwYXRobmFtZSIsIl9yZXF1ZXN0IiwiZGF0YSIsInN1c3BlbmRlZCIsImluc3RhbGxhdGlvbnMiLCJpbnN0YWxsYXRpb24iLCJzdXNwZW5kZWRfYXQiLCJ3YXJuIiwidXNlcm5hbWUiLCJyZXBvc2l0b3JpZXMiLCJyZXBvSW5zdGFsbGF0aW9uTWFwIiwiYnVmZmVyZWRNZXNzYWdlcyIsInNlbmQiLCJtZXNzYWdlIiwic29ja2V0IiwicmVhZHlTdGF0ZSIsIldlYlNvY2tldCIsIk9QRU4iLCJvbm9wZW4iLCJEYXRlIiwic2hpZnQiLCJmbHVzaCIsInNldEludGVydmFsIiwib25jbG9zZSIsIm9uZXJyb3IiLCJvbm1lc3NhZ2UiLCJwYXJzZSIsIndvcmtmbG93X3J1biIsIm9uIiwiZmV0Y2hBdmFpbGFibGVGZWF0dXJlcyIsInJlbW92ZUl0ZW0iLCJpbnN0YWxsYXRpb25JZCIsImZpbmQiLCJodG1sX3VybCIsInJlcG9zaXRvcnlfc2VsZWN0aW9uIiwicmVwbyIsImZ1bGxfbmFtZSIsInJlcG9zaXRvcnkiLCJicmFuY2giLCJVUkwiLCJzZXQiLCJsYXlvdXRzIiwiaW5mbyIsImRlZmF1bHRMYXlvdXQiLCJwcmVmZXJyZWRMYXlvdXQiLCJjaG9zZW4iLCJyZXBsYWNlIiwibGF5b3V0TWV0YWRhdGEiLCJrZXlib2FyZHMiLCJkZWZhdWx0S2V5bWFwIiwiaXNHaXRIdWJBdXRob3JpemVkIiwiYmV0YUZlYXR1cmVzIiwiZmVhdHVyZXMiLCJFdmVudEVtaXR0ZXIiLCJnb29kQ29uY2x1c2lvbnMiLCJiYWRDb25jbHVzaW9ucyIsIkZ1enp5VGltZXN0YW1wIiwidGltZXN0YW1wIiwibW9tZW50IiwiZnJvbU5vdyIsImZ1enp5Iiwic2V0RnV6enkiLCJpbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJ0b0lTT1N0cmluZyIsIkJ1aWxkTGluayIsImxhdGVzdFJ1biIsIm1hcHBlZEljb24iLCJjb25jbHVzaW9uIiwiaGVhZF9zaGEiLCJ1cGRhdGVkX2F0IiwiY3JlYXRlZF9hdCIsIkNvbW1pdCIsIm9uQ29uZmlybSIsInNldE1lc3NhZ2UiLCJzdGF0ZVNlbGVjdG9yIiwiU291cmNlQWN0aW9ucyIsInNvdXJjZU90aGVyIiwiX3VubW9kaWZpZWRLZXltYXAiLCJzYXZpbmciLCJsYXRlc3RCdWlsZCIsImhhc0NoYW5nZWQiLCJpcyIsImhhbmRsZUNvbW1pdENoYW5nZXMiLCJnaXRodWIiLCJjb21taXREaWFsb2dPcGVuIiwiR2l0SHViSXNzdWVzTGluayIsIkdpdEh1Yldpa2lMYXlvdXRzTGluayIsImxheW91dFRvb2xzTGluayIsIkRpc2NvcmRQcm9maWxlTGluayIsIkdlbmVyYWxIZWxwT2ZmZXJDb3B5IiwiS2V5bWFwTGF5b3V0UmVzb3VyY2VzIiwiTGF5b3V0R2VuZXJhdGlvbkVycm9yIiwibGluZUhlaWdodCIsIkJ1dHRvbiIsImRhcmtNb2RlUHJlZmVyZW5jZSIsIm1hdGNoTWVkaWEiLCJpbnZlcnRlZE5ldXRyYWxDb2xvcnMiLCJjb2xvcnMiLCJTZWxlY3QiLCJ0aGVtZSIsImlzRGFyayIsIm1hdGNoZXMiLCJjb250YWluZXIiLCJiYXNlU3R5bGVzIiwibWVudSIsImlzU2VhcmNoYWJsZSIsIm9uRXJyb3IiLCJzZXRLZXlib2FyZHMiLCJzZXRLZXlib2FyZCIsInBlcnNpc3RlZEtleWJvYXJkIiwiZ2V0SXRlbSIsImluaXRpYWxTZWxlY3Rpb24iLCJkaWFsb2ciLCJoYW5kbGVTZWxlY3RLZXlib2FyZCIsInNldEl0ZW0iLCJnZXRPcHRpb25WYWx1ZSIsImdldE9wdGlvbkxhYmVsIiwiRGVtb0hlbHBEaWFsb2ciLCJkZW1vTGluayIsInNob3dEZW1vSGVscERpYWxvZyIsInNldFNob3dEZW1vSGVscERpYWxvZyIsImxpc3RTdHlsZSIsImZvbnRGYW1pbHkiLCJsaXN0SXRlbVN0eWxlIiwiVmFsaWRhdGlvbkVycm9ycyIsImZpbGUiLCJmaWxlRnJvbVRpdGxlIiwiUkVQT1NJVE9SWSIsIkJSQU5DSCIsIktFWUJPQVJEIiwiZ2V0UGVyc2lzdGVkS2V5Ym9hcmQiLCJyZXBvSWQiLCJibG9ja2VkIiwiaW5pdGlhbGl6ZWQiLCJzZWxlY3RlZFJlcG9JZCIsInNlbGVjdGVkQnJhbmNoTmFtZSIsInNlbGVjdGVkS2V5Ym9hcmQiLCJicmFuY2hlcyIsImxvYWRpbmciLCJ3YXJuaW5nRmxhZ3MiLCJwaWNrZXJTbGljZSIsImNsZWFyU2VsZWN0aW9uIiwiaW50ZWdyYXRpb25Jbml0aWFsaXplZCIsInBlcnNpc3RlZFJlcG9JZCIsInN0b3JhZ2UiLCJsb2FkaW5nQnJhbmNoZXNMaXN0IiwibG9hZGVkQnJhbmNoZXNMaXN0IiwiYXZhaWxhYmxlIiwiZGVmYXVsdEJyYW5jaCIsImRlZmF1bHRfYnJhbmNoIiwicHJldmlvdXNCcmFuY2giLCJsb2FkaW5nS2V5Ym9hcmRzTGlzdCIsImxvYWRlZEtleWJvYXJkc0xpc3QiLCJkZWZhdWx0S2V5Ym9hcmQiLCJwcmV2aW91c0tleWJvYXJkIiwic2VsZWN0ZWRSZXBvc2l0b3J5Iiwic2VsZWN0ZWRCcmFuY2giLCJrZXlib2FyZExvYWRpbmciLCJrZXlib2FyZExvYWRlZFN1Y2Nlc3MiLCJ1c2VQaWNrZXJTdG9yZSIsInJlZHVjZXIiLCJkaXNwYXRjaGVycyIsIlN1Z2dlc3RSZW1vdGVSZXBvIiwibWlzc2luZ1BhdGgiLCJTdWdnZXN0UmVwb1NlbGVjdGlvbiIsIlN1Z2dlc3RXcm9uZ1JlcG8iLCJvdGhlclJlcG9PckJyYW5jaEF2YWlsYWJsZSIsIk1pc3NpbmdMYXlvdXQiLCJMb2dpbiIsIkluc3RhbGwiLCJncmVldGluZyIsIk1pc3NpbmdLZXltYXBzIiwiR2l0aEh1YkV4cGFuZGVkUGlja2VyIiwic2VsZWN0aW9ucyIsInJlcG9zaXRvcnlDaG9pY2VzIiwiYnJhbmNoQ2hvaWNlcyIsImtleWJvYXJkQ2hvaWNlcyIsInNlbGVjdGVkUmVwb0Nob2ljZSIsInNlbGVjdGVkQnJhbmNoQ2hvaWNlIiwic2VsZWN0ZWRLZXlib2FyZENob2ljZSIsImdldFZhbHVlIiwiZnVsbCIsImZvcm1hdE9wdGlvbkxhYmVsIiwiaXNNaXNzaW5nQ29uZmlnIiwiaXNNYXRjaCIsImlzTWlzc2luZ0tleW1hcHMiLCJpbnRlbnQiLCJpc01pc3NpbmdMYXlvdXQiLCJpc01pc3NpbmdCb2FyZCIsIkdpdGh1YlBpY2tlciIsImV4dHJhcyIsImFjY291bnQiLCJsb2dpbiIsImtleWJvYXJkc0xpc3QiLCJ1c2VSZXBvc2l0b3J5T3B0aW9ucyIsIkJsb2NrZWQiLCJsYXlvdXRHZW5lcmF0aW9uRXJyb3IiLCJyZXBvVmFsaWRhdGlvbiIsImRpYWxvZ1Byb3BzIiwibG9hZEtleWJvYXJkIiwicmVsb2FkS2V5Ym9hcmQiLCJleHBhbmRlZCIsIm9uRXhwYW5kIiwic291cmNlQ2hvaWNlcyIsInNlbGVjdGVkU291cmNlIiwiZGVmYXVsdFNvdXJjZSIsIktleW1hcEJpbmRpbmdzVXNlUHJlcHJvY2Vzc29yTWFjcm9zIiwiS2V5bWFwUGFyc2luZ0ZhaWxlZCIsIktleW1hcFVzaW5nTWlyeW9rdSIsIk1pc3NpbmdSb290Tm9kZSIsIlpta05vZGVmcmVlQ29uZmlnIiwiU3VnZ2VzdEF1dG9MYXlvdXRUd2VhayIsIktleWJvYXJkUGlja2VyIiwidG9nZ2xlU3RhdGUiLCJzZXRUb2dnbGVTdGF0ZSIsIndyYXBwZXJSZWYiLCJzZXRTb3VyY2UiLCJhdXRvR2VuZXJhdGVkIiwic2V0TGF5b3V0SW5mbyIsInNob3dEaWFsb2ciLCJzZXRTaG93RGlhbG9nIiwiY2xvc2VEaWFsb2ciLCJpc0V4cGFuZGVkIiwic2V0RXhwYW5kZWQiLCJzZXRDb21wYWN0Iiwic2hvd0xheW91dEhlbHAiLCJlbmFibGVkIiwiaXNJbkRvY3VtZW50IiwiaXNJbldyYXBwZXIiLCJ1c2VDbGlja091dHNpZGVIYW5kbGVyIiwiaGFuZGxlS2V5Ym9hcmRTZWxlY3RlZCIsImdldEVycm9yRGlhbG9nIiwiaGFuZGxlRXJyb3IiLCJmb3JtYXRTdGFja0ZyYW1lIiwiZnJhbWUiLCJmaWxlTmFtZSIsImxpbmVOdW1iZXIiLCJjb2x1bW5OdW1iZXIiLCJuZXdHaXRodWJJc3N1ZSIsIlVuZXhwZWN0ZWRFcnJvciIsInN0YWNrIiwic2V0U3RhY2siLCJmb3JtYXR0ZWRFcnJvciIsInNldEZvcm1hdHRlZEVycm9yIiwiY29waWVkIiwic2V0Q29waWVkIiwiU3RhY2tUcmFjZSIsInBhcnNlU3RhY2siLCJ0cmltIiwiZm9ybWF0RXJyb3JUZXh0IiwiY2xpcGJvYXJkIiwid3JpdGVUZXh0IiwiRXJyb3JCb3VuZGFyeSIsIlJlYWN0IiwiS2V5bWFwU2F2ZUZhaWxlZCIsInNhdmVFcnJvciIsInNldHRpbmdzVmlzaWJsZSIsImhhbmRsZXIiLCJydW4iLCJoZWFkX2JyYW5jaCIsImJ1aWxkIiwib3RoZXIiLCJoYW5kbGVVcGRhdGVTZXR0aW5ncyIsIlNvdXJjZVBpY2tlciIsImxpZ2h0IiwiZGFyayIsInN5c3RlbSIsImluaXQiLCJrZXlib2FyZFJlZHVjZXIiLCJjb21iaW5lUmVkdWNlcnMiLCJiZWhhdmlvcnNSZWR1Y2VyIiwiY29tYm9zUmVkdWNlciIsImxheWVyc1JlZHVjZXIiLCJtYWNyb3NSZWR1Y2VyIiwiY29uZmlndXJlU3RvcmUiLCJuZXdTdGF0ZSIsIm5ld0tleWJvYXJkU3RhdGUiLCJzZWxlY3RLZXlib2FyZCIsInVuc2F2ZWQiLCJ0aGVtZXMiLCJkYXRhc2V0IiwiY3ljbGVUaGVtZSIsImFwcFJlZHVjZXIiLCJwcmVsb2FkZWRTdGF0ZSIsInN0b3JlIiwiX19fQ1NTX0xPQURFUl9FWFBPUlRfX18iLCJtb2R1bGUiLCJsb2NhbHMiLCJ3ZWJwYWNrQ29udGV4dCIsInJlcSIsIndlYnBhY2tDb250ZXh0UmVzb2x2ZSIsIl9fd2VicGFja19yZXF1aXJlX18iLCJvIiwicmVzb2x2ZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9