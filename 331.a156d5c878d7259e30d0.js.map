{"version":3,"file":"331.a156d5c878d7259e30d0.js","mappings":";oKAMA,SAASA,EAAuBC,GAC9B,IAAQC,EAAcD,EAAdC,UAER,OACE,SAAC,IAAK,WACJ,UAAC,IAAS,CAACA,UAAWA,EAAU,WAC9B,wBAAI,wCACJ,uBAAG,oIAIH,uBAAG,4RAMH,yBAAG,4BACyBC,EAAAA,GAAiB,WAKrD,CAEAH,EAAsBI,UAAY,CAChCF,UAAWG,IAAAA,KAAAA,YAGb,sWClCA,gnGAAAC,GAAA,wBAAAA,EAAA,sBAAAA,GAAA,iBAAAA,GAAA,ssDAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,4bAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,yhBAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,qGAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,+kBAAAA,GAAA,gEAAAA,GAAA,0JAAAA,EAAA,6FAAAA,GAAA,mIAAAA,IAAA,+RAAAA,IAAA,2OAAAA,EAAA,iBAAAA,EAAA,EAAAA,IAAA,EAAAA,GAAA,EAAAA,GAAA,SAqFA,UA/EA,SAAoB,GAAyB,IAArBC,EAAQ,EAARA,SAAUC,EAAO,EAAPA,QACc,KAAZC,EAAAA,EAAAA,UAAS,IAAG,GAAvCC,EAAS,KAAEC,EAAY,KACgB,KAAdF,EAAAA,EAAAA,UAAS,MAAK,GAAvCG,EAAQ,KAAEC,EAAW,KAEtBC,GAAUC,EAAAA,EAAAA,UAAQ,kBACtBL,EAAUM,KAAI,SAAAC,GAAI,MAAK,CAAEC,GAAID,EAAMA,KAAAA,EAAM,GAAE,GAC1C,CAACP,KAEJS,EAAAA,EAAAA,YAAU,WACR,YAAC,wGACyBC,EAAAA,KAA4B,OAA9CV,EAAY,EAAH,KACTW,EAAoBC,KAAKC,MAAMC,aAAaC,QAAQ,gCAAkC,QACtFC,EAAmBhB,EAAUiB,SAASN,GACxCA,EACAX,EAAU,GAEdC,EAAaD,GACbG,EAAYa,GAAiB,0CAR/B,EAUF,GAAG,CAACf,EAAcE,KAElBM,EAAAA,EAAAA,YAAU,WACR,YAAC,sGACKP,EAAU,CAAF,yCAEgCQ,EAAAA,GAAsBR,GAAS,gBAA/DgB,EAAI,EAAJA,KAAMC,EAAM,EAANA,OAAQC,EAAO,EAAPA,QACdC,EAAYH,EAAZG,QACFC,EAAkBH,EAAOI,OAAO,wBAClCJ,EAAOI,OAAO,wBAAwBC,QAAQ,KAAM,IACpD,KAEEC,EAAgBC,OAAOC,KAAKN,GAAS,GACrCO,EACJP,EAAQC,IACRD,EAAQI,GAGV5B,EAAS,CACPgC,OAAQ,QACR3B,SAAAA,EACA0B,eAAAA,EACAE,OAAQF,EAAeE,OACvBX,OAAAA,EACAC,QAAAA,IACA,sDAEE,KAAIW,SAAU,CAAF,iCACM,KAAIA,SAASC,OAAM,QAA5B,GACQ,0BADL,EAAH,KACDzB,KAAgC,iBACE,OAA1CT,EAAQ,CAAEmC,OAAQ3C,EAAAA,IAAwB,+FA3BpD,EAoCF,GAAG,CAACO,EAAUC,EAASI,IAEvB,IAAMgC,GAAuBC,EAAAA,EAAAA,cAAY,YAAsB,IAAfjC,EAAQ,EAAZM,GAC1CM,aAAasB,QAAQ,8BAA+BxB,KAAKyB,UAAUnC,IACnEC,EAAYD,EACd,GAAG,CAACC,IAEEmC,EAAYC,IAAKnC,EAAS,CAAEI,GAAIN,IAEtC,OACE,SAAC,KAAM,CACLsC,MAAM,WACNC,MAAOH,EACPI,QAAStC,EACTuC,SAAUT,EACVU,eAAgB,SAAAC,GAAM,OAAIA,EAAOrC,EAAE,EACnCsC,eAAgB,SAAAD,GAAM,OAAIA,EAAOtC,IAAI,GAG3C","sources":["webpack:///./src/Dialogs/LayoutGenerationError.js","webpack:///./src/Sources/Local/Picker.js"],"sourcesContent":["import PropTypes from 'prop-types'\n\nimport DialogBox from '../Common/DialogBox'\nimport Modal from '../Common/Modal'\nimport { GitHubIssuesLink } from './support'\n\nfunction LayoutGenerationError (props) {\n  const { onDismiss } = props\n\n  return (\n    <Modal>\n      <DialogBox onDismiss={onDismiss}>\n        <h2>Automatic Layout Generation Failed</h2>\n        <p>\n          No accompanying layout was found with your keymap file and the Keymap\n          Editor was unable to generate one automatically for you.\n        </p>\n        <p>\n          Something went wrong with the attempted automatic layout generation\n          for your keyboard and there's no automatic way to recover, but if you\n          want to reach out for assistance maybe we can work together to resolve\n          any technical issues or else craft a manual layout for your keyboard.\n        </p>\n        <p>\n          Share your experience at {GitHubIssuesLink}.\n        </p>\n      </DialogBox>\n    </Modal>\n  )\n}\n\nLayoutGenerationError.propTypes = {\n  onDismiss: PropTypes.func.isRequired\n}\n\nexport default LayoutGenerationError\n","import find from 'lodash/find'\nimport { useCallback, useEffect, useMemo, useState } from 'react'\n\nimport * as api from './api'\nimport LayoutGenerationError from '../../Dialogs/LayoutGenerationError'\nimport { Select } from '../Controls'\n\nfunction LocalPicker ({ onSelect, onError }) {\n  const [keyboards, setKeyboards] = useState([])\n  const [keyboard, setKeyboard] = useState(null)\n\n  const choices = useMemo(() => (\n    keyboards.map(name => ({ id: name, name }))\n  ), [keyboards])\n\n  useEffect(() => {\n    (async function () {\n      const keyboards = await api.loadAvailableKeyboards()\n      const persistedKeyboard = JSON.parse(localStorage.getItem('localSourceSelectedKeyboard') || 'null')\n      const initialSelection = keyboards.includes(persistedKeyboard)\n        ? persistedKeyboard\n        : keyboards[0]\n\n      setKeyboards(keyboards)\n      setKeyboard(initialSelection)\n    })()\n  }, [setKeyboards, setKeyboard])\n\n  useEffect(() => {\n    (async function () {\n      if (keyboard) {\n        try {\n          const { info, keymap, sensors } = await api.loadKeyboardFiles(keyboard)\n          const { layouts } = info\n          const preferredLayout = keymap.chosen['zmk,matrix_transform']\n            ? keymap.chosen['zmk,matrix_transform'].replace(/^&/, '')\n            : null\n\n          const defaultLayout = Object.keys(layouts)[0]\n          const layoutMetadata = (\n            layouts[preferredLayout] ||\n            layouts[defaultLayout]\n          )\n\n          onSelect({\n            source: 'local',\n            keyboard,\n            layoutMetadata,\n            layout: layoutMetadata.layout,\n            keymap,\n            sensors\n          })\n        } catch (err) {\n          if (err.response) {\n            const error = await err.response.json()\n            if (error.name === 'LayoutGenerationError') {\n              onError({ dialog: LayoutGenerationError })\n              return\n            }\n          }\n\n          throw err\n        }\n      }\n    })()\n  }, [onSelect, onError, keyboard])\n\n  const handleSelectKeyboard = useCallback(({ id: keyboard }) => {\n    localStorage.setItem('localSourceSelectedKeyboard', JSON.stringify(keyboard))\n    setKeyboard(keyboard)\n  }, [setKeyboard])\n\n  const selection = find(choices, { id: keyboard })\n\n  return (\n    <Select\n      label=\"Keyboard\"\n      value={selection}\n      options={choices}\n      onChange={handleSelectKeyboard}\n      getOptionValue={option => option.id}\n      getOptionLabel={option => option.name}\n    />\n  )\n}\n\nexport default LocalPicker\n"],"names":["LayoutGenerationError","props","onDismiss","GitHubIssuesLink","propTypes","PropTypes","i","onSelect","onError","useState","keyboards","setKeyboards","keyboard","setKeyboard","choices","useMemo","map","name","id","useEffect","api","persistedKeyboard","JSON","parse","localStorage","getItem","initialSelection","includes","info","keymap","sensors","layouts","preferredLayout","chosen","replace","defaultLayout","Object","keys","layoutMetadata","source","layout","response","json","dialog","handleSelectKeyboard","useCallback","setItem","stringify","selection","find","label","value","options","onChange","getOptionValue","option","getOptionLabel"],"sourceRoot":""}