/*! For license information please see main.977408314202ef3fe4a1.js.LICENSE.txt */
(self.webpackChunkapp=self.webpackChunkapp||[]).push([[179],{41482:function(e,n,t){"use strict";var r=t(67294),o=t(20745),i=t(95998),a=t(93379),c=t.n(a),l=t(7795),s=t.n(l),u=t(90569),p=t.n(u),f=t(3565),d=t.n(f),y=t(19216),h=t.n(y),b=t(44589),m=t.n(b),A=t(51424),v={};v.styleTagTransform=m(),v.setAttributes=d(),v.insert=p().bind(null,"head"),v.domAPI=s(),v.insertStyleElement=h(),c()(A.Z,v),A.Z&&A.Z.locals&&A.Z.locals,t(56831);var g=t(39087),x={};x.styleTagTransform=m(),x.setAttributes=d(),x.insert=p().bind(null,"head"),x.domAPI=s(),x.insertStyleElement=h(),c()(g.Z,x),g.Z&&g.Z.locals&&g.Z.locals;var j=(0,r.createContext)({getSearchTargets:null}),C=(0,r.createContext)({settings:null,openSettingsDialog:null});function w(e){return e&&["1","on","yes","true"].includes(e.toString().toLowerCase())}var E="https://zmk-keymap-editor.fly.dev",k=w("true"),O=w("false"),S=w("true");function B(e){return B="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},B(e)}function P(){P=function(){return e};var e={},n=Object.prototype,t=n.hasOwnProperty,r=Object.defineProperty||function(e,n,t){e[n]=t.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function l(e,n,t){return Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}),e[n]}try{l({},"")}catch(e){l=function(e,n,t){return e[n]=t}}function s(e,n,t,o){var i=n&&n.prototype instanceof f?n:f,a=Object.create(i.prototype),c=new E(o||[]);return r(a,"_invoke",{value:x(e,t,c)}),a}function u(e,n,t){try{return{type:"normal",arg:e.call(n,t)}}catch(e){return{type:"throw",arg:e}}}e.wrap=s;var p={};function f(){}function d(){}function y(){}var h={};l(h,i,(function(){return this}));var b=Object.getPrototypeOf,m=b&&b(b(k([])));m&&m!==n&&t.call(m,i)&&(h=m);var A=y.prototype=f.prototype=Object.create(h);function v(e){["next","throw","return"].forEach((function(n){l(e,n,(function(e){return this._invoke(n,e)}))}))}function g(e,n){function o(r,i,a,c){var l=u(e[r],e,i);if("throw"!==l.type){var s=l.arg,p=s.value;return p&&"object"==B(p)&&t.call(p,"__await")?n.resolve(p.__await).then((function(e){o("next",e,a,c)}),(function(e){o("throw",e,a,c)})):n.resolve(p).then((function(e){s.value=e,a(s)}),(function(e){return o("throw",e,a,c)}))}c(l.arg)}var i;r(this,"_invoke",{value:function(e,t){function r(){return new n((function(n,r){o(e,t,n,r)}))}return i=i?i.then(r,r):r()}})}function x(e,n,t){var r="suspendedStart";return function(o,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw i;return{value:void 0,done:!0}}for(t.method=o,t.arg=i;;){var a=t.delegate;if(a){var c=j(a,t);if(c){if(c===p)continue;return c}}if("next"===t.method)t.sent=t._sent=t.arg;else if("throw"===t.method){if("suspendedStart"===r)throw r="completed",t.arg;t.dispatchException(t.arg)}else"return"===t.method&&t.abrupt("return",t.arg);r="executing";var l=u(e,n,t);if("normal"===l.type){if(r=t.done?"completed":"suspendedYield",l.arg===p)continue;return{value:l.arg,done:t.done}}"throw"===l.type&&(r="completed",t.method="throw",t.arg=l.arg)}}}function j(e,n){var t=n.method,r=e.iterator[t];if(void 0===r)return n.delegate=null,"throw"===t&&e.iterator.return&&(n.method="return",n.arg=void 0,j(e,n),"throw"===n.method)||"return"!==t&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+t+"' method")),p;var o=u(r,e.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,p;var i=o.arg;return i?i.done?(n[e.resultName]=i.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=void 0),n.delegate=null,p):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,p)}function C(e){var n={tryLoc:e[0]};1 in e&&(n.catchLoc=e[1]),2 in e&&(n.finallyLoc=e[2],n.afterLoc=e[3]),this.tryEntries.push(n)}function w(e){var n=e.completion||{};n.type="normal",delete n.arg,e.completion=n}function E(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(C,this),this.reset(!0)}function k(e){if(e){var n=e[i];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,o=function n(){for(;++r<e.length;)if(t.call(e,r))return n.value=e[r],n.done=!1,n;return n.value=void 0,n.done=!0,n};return o.next=o}}return{next:O}}function O(){return{value:void 0,done:!0}}return d.prototype=y,r(A,"constructor",{value:y,configurable:!0}),r(y,"constructor",{value:d,configurable:!0}),d.displayName=l(y,c,"GeneratorFunction"),e.isGeneratorFunction=function(e){var n="function"==typeof e&&e.constructor;return!!n&&(n===d||"GeneratorFunction"===(n.displayName||n.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,y):(e.__proto__=y,l(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},e.awrap=function(e){return{__await:e}},v(g.prototype),l(g.prototype,a,(function(){return this})),e.AsyncIterator=g,e.async=function(n,t,r,o,i){void 0===i&&(i=Promise);var a=new g(s(n,t,r,o),i);return e.isGeneratorFunction(t)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},v(A),l(A,c,"Generator"),l(A,i,(function(){return this})),l(A,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var n=Object(e),t=[];for(var r in n)t.push(r);return t.reverse(),function e(){for(;t.length;){var r=t.pop();if(r in n)return e.value=r,e.done=!1,e}return e.done=!0,e}},e.values=k,E.prototype={constructor:E,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(w),!e)for(var n in this)"t"===n.charAt(0)&&t.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function r(t,r){return a.type="throw",a.arg=e,n.next=t,r&&(n.method="next",n.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var c=t.call(i,"catchLoc"),l=t.call(i,"finallyLoc");if(c&&l){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(e,n){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&t.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=n&&n<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=n,i?(this.method="next",this.next=i.finallyLoc,p):this.complete(a)},complete:function(e,n){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&n&&(this.next=n),p},finish:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.finallyLoc===e)return this.complete(t.completion,t.afterLoc),w(t),p}},catch:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.tryLoc===e){var r=t.completion;if("throw"===r.type){var o=r.arg;w(t)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,t){return this.delegate={iterator:k(e),resultName:n,nextLoc:t},"next"===this.method&&(this.arg=void 0),p}},e}function I(e,n,t,r,o,i,a){try{var c=e[i](a),l=c.value}catch(e){return void t(e)}c.done?n(l):Promise.resolve(l).then(r,o)}function T(e){return function(){var n=this,t=arguments;return new Promise((function(r,o){var i=e.apply(n,t);function a(e){I(i,r,o,a,c,"next",e)}function c(e){I(i,r,o,a,c,"throw",e)}a(void 0)}))}}function D(){return L.apply(this,arguments)}function L(){return(L=T(P().mark((function e(){var n,r,o;return P().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Promise.resolve().then(t.t.bind(t,95130,23));case 2:return n=e.sent,r=n.behaviorSchemas,o=n.behaviorBindings,e.abrupt("return",{behaviors:r,bindings:o});case 6:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function R(){return(R=T(P().mark((function e(){var n,r;return P().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,t.e(712).then(t.t.bind(t,52779,23));case 2:return n=e.sent,r=n.keycodes,e.abrupt("return",r);case 5:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function N(){return(N=T(P().mark((function e(){var n,r;return P().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,t.e(712).then(t.t.bind(t,52779,23));case 2:return n=e.sent,r=n.keycodeGlyphs,e.abrupt("return",r);case 5:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function _(){return M.apply(this,arguments)}function M(){return(M=T(P().mark((function e(){var n;return P().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,fetch("".concat(E,"/v2/local/keyboards"));case 2:return n=e.sent,e.abrupt("return",n.json());case 4:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function Y(e){return K.apply(this,arguments)}function K(){return(K=T(P().mark((function e(n){var t,r,o;return P().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t="v2/local/keyboards/".concat(encodeURIComponent(n)),r="".concat(E,"/").concat(t),e.next=4,fetch(r);case 4:return o=e.sent,e.abrupt("return",o.json());case 6:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function q(e,n){return Z.apply(this,arguments)}function Z(){return Z=T(P().mark((function e(n,t){var r,o,i;return P().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r="v2/local/keyboards/".concat(encodeURIComponent(n),"/keymap"),o="".concat(E,"/").concat(r),e.next=4,fetch(o,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});case 4:return i=e.sent,e.abrupt("return",i.json());case 6:case"end":return e.stop()}}),e)}))),Z.apply(this,arguments)}var U=t(45697),G=t.n(U),z=t(85893);function W(e){return W="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},W(e)}var F=["name","className","collection"];function X(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function V(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==W(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==W(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===W(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}var Q={brands:"fab",default:"fa",solid:"fas",round:"far"};function H(e){var n=e.name,t=e.className,r=e.collection,o=function(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}(e,F),i=Q[r],a="fa-".concat(n);return(0,z.jsx)("span",function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?X(Object(t),!0).forEach((function(n){V(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):X(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}({className:[t,i,a].join(" ")},o))}H.propTypes={name:G().string.isRequired,className:G().string,collection:G().string},H.defaultProps={collection:"default",className:""};var J=H;function $(e){return $="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},$(e)}var ee=["collection","icon","text","children","onClick"];function ne(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function te(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?ne(Object(t),!0).forEach((function(n){re(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ne(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function re(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==$(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==$(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===$(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function oe(e){var n=e.collection,t=e.icon,r=e.text,o=e.children,i=e.onClick,a=function(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}(e,ee);return(0,z.jsxs)("button",te(te({onClick:i},a),{},{children:[(0,z.jsx)(J,{collection:n,name:t})," ",r||o]}))}var ie=t(92127),ae={};ae.styleTagTransform=m(),ae.setAttributes=d(),ae.insert=p().bind(null,"head"),ae.domAPI=s(),ae.insertStyleElement=h(),c()(ie.Z,ae);var ce=ie.Z&&ie.Z.locals?ie.Z.locals:void 0;function le(e){return le="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},le(e)}var se=["children"];function ue(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function pe(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?ue(Object(t),!0).forEach((function(n){fe(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ue(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function fe(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==le(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==le(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===le(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function de(e){var n=e.children,t=function(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}(e,se);return(0,z.jsxs)("div",pe(pe({},t),{},{className:ce.spinner,children:[(0,z.jsx)("i",{className:"".concat(ce.icon," fa fa-spinner")}),n]}))}var ye=t(96486),he=t(63105),be=t.n(he),me=t(27361),Ae=t.n(me),ve=t(41609),ge=t.n(ve),xe=t(24350),je=t.n(xe),Ce=t(35161),we=t.n(Ce),Ee=t(50361),ke=t.n(Ee);function Oe(e,n){var t="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!t){if(Array.isArray(e)||(t=Se(e))||n&&e&&"number"==typeof e.length){t&&(e=t);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,c=!1;return{s:function(){t=t.call(e)},n:function(){var e=t.next();return a=e.done,e},e:function(e){c=!0,i=e},f:function(){try{a||null==t.return||t.return()}finally{if(c)throw i}}}}function Se(e,n){if(e){if("string"==typeof e)return Be(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Be(e,n):void 0}}function Be(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function Pe(e){return(n=e,function(e){if(Array.isArray(e))return Be(e)}(n)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(n)||Se(n)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()).sort((function(e,n){return e.length-n.length}))[0].replace(/^KC_/,"");var n}var Ie=/^(.+?)\((code)\)$/;function Te(e){return e.reduce((function(e,n){var t,r=n.description,o=n.context,i=n.symbol,a=n.faIcon,c=n.names.filter((function(e){return!e.match(Ie)})),l=Pe(c),s=n.names.map((function(e){return e.match(Ie)})).filter((function(e){return!!e}))[0],u={name:l,aliases:c,description:r,context:o,faIcon:a,symbol:i||l,params:[]},p=Oe(c);try{for(p.s();!(t=p.n()).done;){var f=t.value;e.push(Object.assign({},u,{code:f,isModifier:!!s}))}}catch(e){p.e(e)}finally{p.f()}return s&&e.push(Object.assign({},u,{code:s[1],params:s[2].split(",")})),e}),[])}function De(e){return De="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},De(e)}function Le(){Le=function(){return e};var e={},n=Object.prototype,t=n.hasOwnProperty,r=Object.defineProperty||function(e,n,t){e[n]=t.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function l(e,n,t){return Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}),e[n]}try{l({},"")}catch(e){l=function(e,n,t){return e[n]=t}}function s(e,n,t,o){var i=n&&n.prototype instanceof f?n:f,a=Object.create(i.prototype),c=new E(o||[]);return r(a,"_invoke",{value:x(e,t,c)}),a}function u(e,n,t){try{return{type:"normal",arg:e.call(n,t)}}catch(e){return{type:"throw",arg:e}}}e.wrap=s;var p={};function f(){}function d(){}function y(){}var h={};l(h,i,(function(){return this}));var b=Object.getPrototypeOf,m=b&&b(b(k([])));m&&m!==n&&t.call(m,i)&&(h=m);var A=y.prototype=f.prototype=Object.create(h);function v(e){["next","throw","return"].forEach((function(n){l(e,n,(function(e){return this._invoke(n,e)}))}))}function g(e,n){function o(r,i,a,c){var l=u(e[r],e,i);if("throw"!==l.type){var s=l.arg,p=s.value;return p&&"object"==De(p)&&t.call(p,"__await")?n.resolve(p.__await).then((function(e){o("next",e,a,c)}),(function(e){o("throw",e,a,c)})):n.resolve(p).then((function(e){s.value=e,a(s)}),(function(e){return o("throw",e,a,c)}))}c(l.arg)}var i;r(this,"_invoke",{value:function(e,t){function r(){return new n((function(n,r){o(e,t,n,r)}))}return i=i?i.then(r,r):r()}})}function x(e,n,t){var r="suspendedStart";return function(o,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw i;return{value:void 0,done:!0}}for(t.method=o,t.arg=i;;){var a=t.delegate;if(a){var c=j(a,t);if(c){if(c===p)continue;return c}}if("next"===t.method)t.sent=t._sent=t.arg;else if("throw"===t.method){if("suspendedStart"===r)throw r="completed",t.arg;t.dispatchException(t.arg)}else"return"===t.method&&t.abrupt("return",t.arg);r="executing";var l=u(e,n,t);if("normal"===l.type){if(r=t.done?"completed":"suspendedYield",l.arg===p)continue;return{value:l.arg,done:t.done}}"throw"===l.type&&(r="completed",t.method="throw",t.arg=l.arg)}}}function j(e,n){var t=n.method,r=e.iterator[t];if(void 0===r)return n.delegate=null,"throw"===t&&e.iterator.return&&(n.method="return",n.arg=void 0,j(e,n),"throw"===n.method)||"return"!==t&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+t+"' method")),p;var o=u(r,e.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,p;var i=o.arg;return i?i.done?(n[e.resultName]=i.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=void 0),n.delegate=null,p):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,p)}function C(e){var n={tryLoc:e[0]};1 in e&&(n.catchLoc=e[1]),2 in e&&(n.finallyLoc=e[2],n.afterLoc=e[3]),this.tryEntries.push(n)}function w(e){var n=e.completion||{};n.type="normal",delete n.arg,e.completion=n}function E(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(C,this),this.reset(!0)}function k(e){if(e){var n=e[i];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,o=function n(){for(;++r<e.length;)if(t.call(e,r))return n.value=e[r],n.done=!1,n;return n.value=void 0,n.done=!0,n};return o.next=o}}return{next:O}}function O(){return{value:void 0,done:!0}}return d.prototype=y,r(A,"constructor",{value:y,configurable:!0}),r(y,"constructor",{value:d,configurable:!0}),d.displayName=l(y,c,"GeneratorFunction"),e.isGeneratorFunction=function(e){var n="function"==typeof e&&e.constructor;return!!n&&(n===d||"GeneratorFunction"===(n.displayName||n.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,y):(e.__proto__=y,l(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},e.awrap=function(e){return{__await:e}},v(g.prototype),l(g.prototype,a,(function(){return this})),e.AsyncIterator=g,e.async=function(n,t,r,o,i){void 0===i&&(i=Promise);var a=new g(s(n,t,r,o),i);return e.isGeneratorFunction(t)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},v(A),l(A,c,"Generator"),l(A,i,(function(){return this})),l(A,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var n=Object(e),t=[];for(var r in n)t.push(r);return t.reverse(),function e(){for(;t.length;){var r=t.pop();if(r in n)return e.value=r,e.done=!1,e}return e.done=!0,e}},e.values=k,E.prototype={constructor:E,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(w),!e)for(var n in this)"t"===n.charAt(0)&&t.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function r(t,r){return a.type="throw",a.arg=e,n.next=t,r&&(n.method="next",n.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var c=t.call(i,"catchLoc"),l=t.call(i,"finallyLoc");if(c&&l){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(e,n){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&t.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=n&&n<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=n,i?(this.method="next",this.next=i.finallyLoc,p):this.complete(a)},complete:function(e,n){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&n&&(this.next=n),p},finish:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.finallyLoc===e)return this.complete(t.completion,t.afterLoc),w(t),p}},catch:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.tryLoc===e){var r=t.completion;if("throw"===r.type){var o=r.arg;w(t)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,t){return this.delegate={iterator:k(e),resultName:n,nextLoc:t},"next"===this.method&&(this.arg=void 0),p}},e}function Re(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function Ne(e,n,t,r,o,i,a){try{var c=e[i](a),l=c.value}catch(e){return void t(e)}c.done?n(l):Promise.resolve(l).then(r,o)}var _e=(0,r.createContext)({keycodes:[],behaviours:[],behaviors:{},behaviorBinds:[],glyphs:[]}),Me=function(e){return e.definitions};function Ye(e){var n=e.children,t=(0,i.v9)(Me),o=(0,i.I0)();if((0,r.useEffect)((function(){var e;(e=Le().mark((function e(){var n,r,i,a,c,l,s;return Le().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(null===t){e.next=2;break}return e.abrupt("return");case 2:return e.next=4,Promise.all([function(){return R.apply(this,arguments)}().then(Te),D(),function(){return N.apply(this,arguments)}()]);case 4:n=e.sent,p=3,r=function(e){if(Array.isArray(e))return e}(u=n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(u,p)||function(e,n){if(e){if("string"==typeof e)return Re(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Re(e,n):void 0}}(u,p)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),i=r[0],a=r[1],c=r[2],l=ke()(a.behaviors),s=ke()(a.bindings),i.indexed=je()(i,"code"),s.indexed=je()(s,"code"),s.context={none:s.filter((function(e){return!e.context})),macros:be()(s,{context:"macros"})},s.byContext={none:je()(s.context.none,"code"),macros:je()(s.context.macros,"code")},o({type:"DEFINITIONS_SET",definitions:{keycodes:i,behaviours:s,behaviors:l,behaviorBinds:s,glyphs:c}});case 16:case"end":return e.stop()}var u,p}),e)})),function(){var n=this,t=arguments;return new Promise((function(r,o){var i=e.apply(n,t);function a(e){Ne(i,r,o,a,c,"next",e)}function c(e){Ne(i,r,o,a,c,"throw",e)}a(void 0)}))})()}),[t,o]),t)return(0,z.jsx)(_e.Provider,{value:t,children:n})}var Ke=["children"];function qe(e){return function(e){if(Array.isArray(e))return Ze(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,n){if(e){if("string"==typeof e)return Ze(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Ze(e,n):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Ze(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var Ue=function(e){var n=e.children,t=function(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}(e,Ke).keymap,o=(0,r.useContext)(_e),i=o.keycodes,a=o.behaviours,c=o.glyphs,l=(0,r.useContext)(C).settings,s=(0,r.useMemo)((function(){var e=window.navigator.platform.startsWith("Mac"),n=window.navigator.platform.startsWith("Win"),t=e?"mac":n&&"win";return function(e,n){return(0,ye.compact)([e.basic,n.unicode&&e.unicode,"mac"===n.platform&&e.platforms.mac,"win"===n.platform&&e.platforms.win]).reduce((function(e,n){var t,r=Oe(n);try{for(r.s();!(t=r.n()).done;){var o=t.value,i=o.names.filter((function(e){return!e.match(Ie)})),a=Pe(i);e[a]||(e[a]={}),e[a].symbol=e[a].symbol||o.symbol,e[a].faIcon=e[a].faIcon||o.faIcon}}catch(e){r.e(e)}finally{r.f()}return e}),{})}(c,{unicode:Ae()(l,"unicodeGlyphs",!0),platform:"auto"!==Ae()(l,"platformGlyphs","auto")?l.platformGlyphs:t})}),[c,l]),u=(0,r.useMemo)((function(){var e=[].concat(qe(a),qe((t.behaviors||[]).map((function(e){return{code:"&".concat(e.labels[0]),bind:"&".concat(e.labels[0]),name:e.name,description:'Custom behavior: "'.concat(e.properties.label.raw||e.name,'"'),params:e.params}}))),qe(t.macros.map((function(e){return{code:"&".concat(e.identifier),name:e.identifier,description:"Custom macro",params:[]}}))));return e.indexed=je()(e,"code"),e.context={none:e.filter((function(e){return!e.context})),macros:be()(e,{context:"macros"})},e.byContext={none:je()(e.context.none,"code"),macros:je()(e.context.macros,"code")},e}),[a,t.behaviors,t.macros]),p=(0,r.useMemo)((function(){return ge()(t)?[]:t.layers.map((function(e,n){return{code:n,description:e.name||"Layer ".concat(n)}}))}),[t]),f=(0,r.useMemo)((function(){return{kc:i.indexed,code:i.indexed,mod:je()(be()(i,"isModifier"),"code"),behaviours:u.indexed,behavioursByContext:u.byContext,layer:je()(p,"code")}}),[i,u,p]),d=(0,r.useMemo)((function(){return{behaviour:u,layer:p,mod:be()(i,"isModifier"),code:i}}),[u,i,p]),y=(0,r.useMemo)((function(){return function(e,n){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"none";return e.enum?e.enum.map((function(e){return{code:e}})):e.raw?[]:"command"===e?Ae()(f.behavioursByContext,[t,n,"commands"],[]):(d[e]||console.error("cannot find target for",e),"behaviour"===e?d.behaviour.context[t]:d[e])}}),[d,f]),h=(0,r.useMemo)((function(){return[].concat(qe(we()(i,"code")),qe(Object.keys(t.defines||{})))}),[i,t.defines]);return(0,z.jsx)(j.Provider,{value:{getSearchTargets:y,mergedGlyphs:s,sources:f,identifiers:h},children:n})},Ge=t(56281),ze={};ze.styleTagTransform=m(),ze.setAttributes=d(),ze.insert=p().bind(null,"head"),ze.domAPI=s(),ze.insertStyleElement=h(),c()(Ge.Z,ze);var We=Ge.Z&&Ge.Z.locals?Ge.Z.locals:void 0;function Fe(e){return Fe="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Fe(e)}var Xe=["children","secondary","className"];function Ve(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Qe(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Ve(Object(t),!0).forEach((function(n){He(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Ve(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function He(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Fe(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Fe(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Fe(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Je(e){var n=e.children,t=e.secondary,r=e.className,o=function(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}(e,Xe);return(0,z.jsx)("button",Qe(Qe({className:[r,We.action,t&&We.secondary].join(" ")},o),{},{children:n}))}Je.defaultProps={className:""};var $e=Je,en=t(57557),nn=t.n(en),tn=t(49502),rn={};rn.styleTagTransform=m(),rn.setAttributes=d(),rn.insert=p().bind(null,"head"),rn.domAPI=s(),rn.insertStyleElement=h(),c()(tn.Z,rn);var on=tn.Z&&tn.Z.locals?tn.Z.locals:void 0;function an(e){return an="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},an(e)}var cn=["dismissText","classes","onDismiss","children"];function ln(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function sn(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?ln(Object(t),!0).forEach((function(n){un(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ln(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function un(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==an(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==an(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===an(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function pn(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function fn(e){var n,t=e.dismissText,r=void 0===t?"Ok":t,o=e.classes,i=void 0===o?[]:o,a=e.onDismiss,c=e.children,l=function(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}(e,cn);return(0,z.jsxs)("div",sn(sn({className:[on.dialog].concat((n=i,function(e){if(Array.isArray(e))return pn(e)}(n)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(n)||function(e,n){if(e){if("string"==typeof e)return pn(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?pn(e,n):void 0}}(n)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())).join(" ")},l),{},{children:[c,r&&(0,z.jsx)("button",{className:on.button,onClick:a,children:r})]}))}var dn=t(73935);function yn(e){return yn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},yn(e)}function hn(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function bn(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?hn(Object(t),!0).forEach((function(n){mn(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):hn(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function mn(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==yn(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==yn(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===yn(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}var An={wrapper:{position:"absolute",top:"0",left:"0",width:"100vw",height:"100vh",backgroundColor:"rgba(104, 123, 162, 0.39)",backdropFilter:"blur(1px)",zIndex:"50",display:"flex",justifyContent:"center",alignItems:"center"},centerOnly:{background:"transparent",pointerEvents:"none"},content:{display:"block",pointerEvents:"all"}};function vn(e){var n=e.onDismiss,t=e.centerOnly,o=void 0!==t&&t,i=e.children,a=(0,r.useRef)(),c=(0,r.useCallback)((function(e){n&&a.current&&e.target.contains(a.current)&&n()}),[a,n]),l=o?bn(bn({},An.wrapper),An.centerOnly):An.wrapper;return dn.createPortal((0,z.jsx)("div",{onClick:c,style:l,children:(0,z.jsx)("div",{ref:a,style:An.content,children:i})}),document.getElementById("modal-root"))}vn.propTypes={onDismiss:G().func};var gn=vn,xn=t(34288),jn={};jn.styleTagTransform=m(),jn.setAttributes=d(),jn.insert=p().bind(null,"head"),jn.domAPI=s(),jn.insertStyleElement=h(),c()(xn.Z,jn);var Cn=xn.Z&&xn.Z.locals?xn.Z.locals:void 0;function wn(e){var n=e.property,t=e.schema;return(0,z.jsxs)(z.Fragment,{children:[(0,z.jsx)("span",{className:Cn.propertyName,title:n,children:n}),t.deprecatedBy&&(0,z.jsx)("sub",{className:Cn.propertyDeprecation,children:"(deprecated)"})]})}function En(e){return function(e){if(Array.isArray(e))return kn(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,n){if(e){if("string"==typeof e)return kn(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?kn(e,n):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function kn(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var On=65,Sn=5;function Bn(e,n){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return{x:e.x*(On+Sn),y:e.y*(On+Sn),u:n.u*On+Sn*(n.u-1),h:n.h*On+Sn*(n.h-1),rx:(e.x-(t.x||e.x))*-(On+Sn),ry:(e.y-(t.y||e.y))*-(On+Sn),a:t.a||0}}function Pn(e,n,t){var r=Bn(e,n,t),o=r.x,i=r.y,a=r.u,c=r.h,l=r.a,s=r.rx,u=r.ry;return[{x:0,y:0},{x:a,y:0},{x:a,y:c},{x:0,y:c}].map((function(e){var n=e.x-s,t=e.y-u,r=Math.PI*l/180;return{x:s+n*Math.cos(r)-t*Math.sin(r),y:u+t*Math.cos(r)+n*Math.sin(r)}})).map((function(e){return{x:e.x+o,y:e.y+i}}))}function In(e){return In="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},In(e)}function Tn(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Dn(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==In(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==In(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===In(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Ln(e){return e.map((function(e){return function(e,n,t){var r=Pn(e,n,t),o=we()(r,"x"),i=we()(r,"y");return{min:{x:Math.min.apply(Math,En(o)),y:Math.min.apply(Math,En(i))},max:{x:Math.max.apply(Math,En(o)),y:Math.max.apply(Math,En(i))}}}({x:e.x,y:e.y},{u:e.u||e.w||1,h:e.h||1},{x:e.rx,y:e.ry,a:e.r})})).reduce((function(e,n){var t=e.x,r=e.y,o=n.max;return{x:Math.max(t,o.x),y:Math.max(r,o.y)}}),{x:0,y:0})}function Rn(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},t=n.scale,r=void 0===t?1:t,o=n.overrides,i=void 0===o?{}:o,a=Array.isArray(e)?Ln(e):e;return function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Tn(Object(t),!0).forEach((function(n){Dn(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Tn(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}({width:"".concat(a.x*r,"px"),height:"".concat(a.y*r,"px"),margin:"0 auto",padding:"0 40px 40px"},i)}var Nn=t(78718),_n=t.n(Nn),Mn=t(87995),Yn={};Yn.styleTagTransform=m(),Yn.setAttributes=d(),Yn.insert=p().bind(null,"head"),Yn.domAPI=s(),Yn.insertStyleElement=h(),c()(Mn.Z,Yn);var Kn=Mn.Z&&Mn.Z.locals?Mn.Z.locals:void 0;function qn(e){return qn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},qn(e)}function Zn(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Un(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Zn(Object(t),!0).forEach((function(n){Gn(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Zn(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Gn(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==qn(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==qn(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===qn(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}var zn={x:G().number.isRequired,y:G().number.isRequired},Wn={a:G().number,rx:G().number,ry:G().number},Fn={u:G().number,h:G().number},Xn=G().shape(Un(Un(Un({},zn),Wn),Fn)),Vn=G().arrayOf(Xn);function Qn(e){return Qn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Qn(e)}var Hn=["keyLayout","children"];function Jn(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function $n(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Jn(Object(t),!0).forEach((function(n){et(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Jn(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function et(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Qn(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Qn(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Qn(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}var nt=function(e){return _n()(e,["x","y"])},tt=function(e){return{x:e.rx,y:e.ry,a:e.r}},rt=function(e){var n=e.w,t=void 0===n?1:n,r=e.u,o=void 0===r?t:r,i=e.h;return{u:o,h:void 0===i?1:i}};function ot(e){var n=e.keyLayout,t=e.children,r=function(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}(e,Hn),o=nt(n),i=tt(n),a=rt(n),c=function(e,n,t){var r=Bn(e,n,t),o=r.x,i=r.y,a=r.u,c=r.h,l=r.a,s=r.rx,u=r.ry;return{top:"".concat(i,"px"),left:"".concat(o,"px"),width:"".concat(a,"px"),height:"".concat(c,"px"),transformOrigin:"".concat(s,"px ").concat(u,"px"),transform:"rotate(".concat(l||0,"deg)")}}(o,a,i);return(0,z.jsx)("div",$n($n({className:Kn.placer,style:c,"data-u":a.u,"data-h":a.h},r),{},{children:t}))}ot.propTypes={scale:G().number,keyLayout:Xn.isRequired},ot.defaultProps={scale:1};var it=ot;function at(e){var n=e.layout,t=e.renderKey,r=e.scale;return(0,z.jsx)("div",{style:{position:"relative",transform:"scale(".concat(r,")"),transformOrigin:0},children:n.map((function(e,n){return(0,z.jsx)(it,{keyLayout:e,children:t({index:n,keyLayout:e})},n)}))})}at.propTypes={layout:Vn.isRequired,renderKey:G().func.isRequired,scale:G().number},at.defaultProps={scale:1};var ct=at,lt=t(39693),st=t.n(lt),ut=t(2),pt={};pt.styleTagTransform=m(),pt.setAttributes=d(),pt.insert=p().bind(null,"head"),pt.domAPI=s(),pt.insertStyleElement=h(),c()(ut.Z,pt);var ft=ut.Z&&ut.Z.locals?ut.Z.locals:void 0;function dt(e){return dt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},dt(e)}var yt=["children","selectable","themeClass","className"];function ht(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function bt(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?ht(Object(t),!0).forEach((function(n){mt(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ht(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function mt(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==dt(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==dt(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===dt(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}var At=function(e){var n=e.children,t=e.selectable,r=void 0===t||t,o=e.themeClass,i=void 0===o?void 0:o,a=e.className,c=void 0===a?"":a,l=function(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}(e,yt),s=st()([ft.key,r&&ft.selectable,null!=i?i:ft.keyDefaultTheme,c]).join(" ");return(0,z.jsx)("div",bt(bt({className:s},l),{},{children:n}))},vt=t(74691),gt=t.n(vt),xt=t(56520),jt={};jt.styleTagTransform=m(),jt.setAttributes=d(),jt.insert=p().bind(null,"head"),jt.domAPI=s(),jt.insertStyleElement=h(),c()(xt.Z,jt);var Ct=xt.Z&&xt.Z.locals?xt.Z.locals:void 0;function wt(e){return wt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},wt(e)}function Et(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function kt(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Et(Object(t),!0).forEach((function(n){Ot(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Et(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Ot(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==wt(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==wt(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===wt(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function St(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(e,n)||function(e,n){if(e){if("string"==typeof e)return Bt(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Bt(e,n):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Bt(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function Pt(e){var n=e.onMouseDown,t=e.selecting,r=e.negate,o=e.rect,i=e.size,a=e.children;return(0,z.jsxs)("div",{onMouseDown:n,className:st()([Ct.container,t&&Ct.selecting]).join(" "),children:[a,t&&(0,z.jsx)("div",{className:st()([Ct.overlay,r&&Ct.negate]).join(" "),style:{position:"absolute",top:o[0][1]+"px",left:o[0][0]+"px",width:i[0]+"px",height:i[1]+"px"}})]})}function It(e){var n=e.polygons,t=e.onSelect,o=St((0,r.useState)({}),2),i=o[0],a=o[1],c=(0,r.useCallback)((function(e){var n=function(e){for(;(e=e.parentNode)&&("relative"!==e.style.position||!e.getBoundingClientRect().height););return e}(e.target).getBoundingClientRect(),t=e.clientX,r=e.clientY;e.preventDefault(),a({start:[t,r],intersecting:[],offset:[n.left,n.top],offsetRect:n})}),[a]),l=(0,r.useCallback)((function(e){i.selecting&&!e.repeat&&e.shiftKey&&a((function(e){return kt(kt({},e),{},{negate:!0})}))}),[i.selecting,a]),s=(0,r.useCallback)((function(e){!i.negate||e.repeat||e.shiftKey||a((function(e){return kt(kt({},e),{},{negate:!1})}))}),[i.negate,a]),u=(0,r.useCallback)((function(e){var t=i.start,r=i.offset,o=i.offsetRect;if(t){var c=e.shiftKey,l=e.altKey,s=e.clientX,u=e.clientY,p=St(t,2),f=p[0],d=p[1],y=gt()(s,o.left,o.right),h=gt()(u,o.top,o.bottom),b=[[Math.min(y,f)-r[0],Math.min(h,d)-r[1]],[Math.max(y,f)-r[0],Math.max(h,d)-r[1]]],m=[Math.abs(y-f),Math.abs(h-d)];a((function(e){return kt(kt({},e),{},{negate:c||l,selecting:m[0]>3||m[1]>3,intersecting:Tt(b,n),rect:b,size:m})}))}}),[i,n,a]),p=(0,r.useCallback)((function(e){i.start&&(i.selecting&&t({negate:i.negate,intersecting:i.intersecting}),a({start:null,selecting:!1}))}),[t,i,a]);return(0,r.useEffect)((function(){return window.addEventListener("mouseup",p),window.addEventListener("mousemove",u),window.addEventListener("keydown",l),window.addEventListener("keyup",s),function(){window.removeEventListener("mouseup",p),window.removeEventListener("mousemove",u),window.removeEventListener("keydown",l),window.removeEventListener("keyup",s)}}),[p,u,l,s]),[kt(kt({},i),{},{onMouseDown:c,onMouseMove:u}),Pt]}function Tt(e,n){return n.reduce((function(n,t,r){return t.some((function(n){var t=n.x,r=n.y;return e[0][0]<t&&t<e[1][0]&&e[0][1]<r&&r<e[1][1]}))&&n.push(r),n}),[])}var Dt=t(49040),Lt={};Lt.styleTagTransform=m(),Lt.setAttributes=d(),Lt.insert=p().bind(null,"head"),Lt.domAPI=s(),Lt.insertStyleElement=h(),c()(Dt.Z,Lt);var Rt=Dt.Z&&Dt.Z.locals?Dt.Z.locals:void 0,Nt=t(528),_t={};_t.styleTagTransform=m(),_t.setAttributes=d(),_t.insert=p().bind(null,"head"),_t.domAPI=s(),_t.insertStyleElement=h(),c()(Nt.Z,_t);var Mt=Nt.Z&&Nt.Z.locals?Nt.Z.locals:void 0;function Yt(e){var n=e.children,t=e.className,r=void 0===t?"":t,o=[Mt.tip,r].join(" ");return(0,z.jsxs)("div",{className:o,children:[(0,z.jsx)(J,{name:"hand-point-up"})," ",n]})}var Kt=(0,r.createContext)({layout:[],bindingCount:0,wrapperDimensions:{},wrapperStyle:{}});function qt(e){var n=e.layout,t=e.children,o=(0,r.useMemo)((function(){return n.length}),[n.length]),i=(0,r.useMemo)((function(){return Ln(n)}),[n]),a=(0,r.useMemo)((function(){return Rn(i)}),[i]),c={layout:n,bindingCount:o,wrapperDimensions:i,wrapperStyle:a};return(0,z.jsx)(Kt.Provider,{value:c,children:t})}function Zt(e){return Zt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Zt(e)}function Ut(e){return function(e){if(Array.isArray(e))return Qt(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||Vt(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Gt(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function zt(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Gt(Object(t),!0).forEach((function(n){Wt(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Gt(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Wt(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Zt(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Zt(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Zt(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Ft(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(e,n)||Vt(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Xt(e,n){var t="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!t){if(Array.isArray(e)||(t=Vt(e))||n&&e&&"number"==typeof e.length){t&&(e=t);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,c=!1;return{s:function(){t=t.call(e)},n:function(){var e=t.next();return a=e.done,e},e:function(e){c=!0,i=e},f:function(){try{a||null==t.return||t.return()}finally{if(c)throw i}}}}function Vt(e,n){if(e){if("string"==typeof e)return Qt(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Qt(e,n):void 0}}function Qt(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var Ht=.2,Jt=function(e){var n,t=function(e,n){return e.map((function(e){return Pn({x:e.x,y:e.y},{u:e.u||e.w||1,h:e.h||1},{x:e.rx,y:e.ry,a:e.r})}))}(e),r=Xt(t);try{for(r.s();!(n=r.n()).done;){var o,i=Xt(n.value);try{for(i.s();!(o=i.n()).done;){var a=o.value;a.x*=Ht,a.y*=Ht}}catch(e){i.e(e)}finally{i.f()}}}catch(e){r.e(e)}finally{r.f()}return t};function $t(e){var n,t,o,i,a,c,l,s=e.value,u=e.prompt,p=e.onUpdate,f=(0,r.useContext)(Kt),d=f.layout,y=f.wrapperDimensions,h=(0,r.useMemo)((function(){return Jt(d)}),[d]),b=(0,r.useMemo)((function(){return Rn(y,{scale:Ht,overrides:{position:"relative",padding:0,margin:0}})}),[y]),m=(n=Ft((0,r.useReducer)((function(e,n){switch(n){case"INCREMENT_MANUAL_SELECTION":return zt(zt({},e),{},{manualSelectionCount:e.manualSelectionCount+1});case"INCREMENT_MANUAL_DESELECTION":return zt(zt({},e),{},{manualDeSelectionCount:e.manualDeSelectionCount+1});case"TRACK_DRAG_SELECTION":return zt(zt({},e),{},{usedDragSelection:!0});case"TRACK_DRAG_DESELECTION":return zt(zt({},e),{},{usedDragDeSelection:!0});default:throw new Error("Unrecognized action type in ".concat(n))}}),{manualSelectionCount:0,manualDeSelectionCount:0,usedDragSelection:!1,usedDragDeSelection:!1}),2),t=n[0],o=n[1],i=(0,r.useCallback)((function(){return o("INCREMENT_MANUAL_SELECTION")}),[o]),a=(0,r.useCallback)((function(){return o("INCREMENT_MANUAL_DESELECTION")}),[o]),c=(0,r.useCallback)((function(){return o("TRACK_DRAG_SELECTION")}),[o]),l=(0,r.useCallback)((function(){return o("TRACK_DRAG_DESELECTION")}),[o]),{showSelectTip:!t.usedDragSelection&&t.manualSelectionCount>3,showDeSelectTip:!t.usedDragDeSelection&&t.manualDeSelectionCount>3,actions:{manualSelection:i,manualDeSelection:a,dragSelection:c,dragDeSelection:l}}),A=m.showSelectTip,v=m.showDeSelectTip,g=m.actions,x=(0,r.useCallback)((function(e){var n=e.negate,t=e.intersecting;n?g.dragDeSelection():g.dragSelection(),p(n?s.filter((function(e){return!t.includes(e)})):[].concat(Ut(s),Ut(t)))}),[s,p,g]),j=(0,r.useCallback)((function(e){var n=s.includes(e);n?g.manualDeSelection():g.manualSelection(),p(n?s.filter((function(n){return n!==e})):[].concat(Ut(s),[e]))}),[s,p,g]),C=Ft(It({onSelect:x,polygons:h}),2),w=C[0],E=C[1],k=w.selecting?w.intersecting:[],O=s,S=w.negate?[]:k.filter((function(e){return!O.includes(e)})),B=w.negate?k.filter((function(e){return O.includes(e)})):[];return(0,z.jsx)("div",{style:b,children:(0,z.jsxs)(E,zt(zt({},w),{},{children:[(0,z.jsx)(ct,{layout:d,bindings:[],scale:Ht,renderKey:function(e){var n=e.index;return(0,z.jsx)(At,{onClick:function(){return j(n)},themeClass:(0,ye.compact)([Rt.key,O.includes(n)&&Rt.highlight,S.includes(n)&&Rt.previewAdd,B.includes(n)&&Rt.previewRemove]).join(" ")})}}),u&&(0,z.jsx)("prompt",{}),A&&(0,z.jsx)(Yt,{className:Rt.tip,children:"Drag to select a region"}),v&&(0,z.jsx)(Yt,{className:Rt.tip,children:"Shift+Drag to de-select a region"})]}))})}$t.propTypes={onUpdate:G().func.isRequired,value:G().arrayOf(G().number).isRequired,prompt:G().node};var er=$t,nr=t(27470),tr={};tr.styleTagTransform=m(),tr.setAttributes=d(),tr.insert=p().bind(null,"head"),tr.domAPI=s(),tr.insertStyleElement=h(),c()(nr.Z,tr);var rr=nr.Z&&nr.Z.locals?nr.Z.locals:void 0;function or(e){return or="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},or(e)}function ir(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function ar(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?ir(Object(t),!0).forEach((function(n){cr(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ir(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function cr(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==or(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==or(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===or(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function lr(e){var n=e.prop,t=e.schema,r=e.onUpdate;return(0,z.jsxs)(z.Fragment,{children:[(0,z.jsx)(J,{name:"code",title:"Raw property value"})," ",(0,z.jsx)("input",{required:null==t?void 0:t.required,value:null==n?void 0:n.raw,onChange:function(e){return r(ar(ar({},n),{},{raw:e.target.value,useRaw:!0}))}})]})}function sr(e){var n=e.schema;return(0,z.jsx)("span",{className:[rr.propertyValue,rr.readonly].join(" "),children:n.const})}function ur(e){var n,t=e.prop,r=e.schema,o=e.onUpdate;return(0,z.jsx)("input",{type:"text",className:rr.propertyValue,value:null!==(n=null==t?void 0:t.parsed)&&void 0!==n?n:"",placeholder:r.default&&"Default: ".concat(r.default),onChange:function(e){o(ar(ar({},t),{},{parsed:e.target.value,useRaw:!1}))}})}function pr(e){var n,t=e.prop,r=e.schema,o=e.onUpdate;return(0,z.jsx)("input",{type:"number",className:rr.propertyValue,value:null!==(n=null==t?void 0:t.parsed)&&void 0!==n?n:"",placeholder:r.default&&"Default: ".concat(r.default),onChange:function(e){o(ar(ar({},t),{},{parsed:Number(e.target.value),useRaw:!1}))}})}function fr(e){var n=e.prop,t=e.onUpdate;return(0,z.jsx)("input",{type:"checkbox",className:rr.propertyValue,checked:(null==n?void 0:n.parsed)||!1,onChange:function(e){t({parsed:!!e.target.checked,useRaw:!1})}})}var dr=t(87360),yr=t.n(dr),hr=function(e,n){var t=(n+(arguments.length>2&&void 0!==arguments[2]?arguments[2]:1))%e.length;return t<0?e.length+t:t},br=t(47881),mr={};mr.styleTagTransform=m(),mr.setAttributes=d(),mr.insert=p().bind(null,"head"),mr.domAPI=s(),mr.insertStyleElement=h(),c()(br.Z,mr);var Ar=br.Z&&br.Z.locals?br.Z.locals:void 0;function vr(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function gr(e){var n,t,o=e.results,i=e.onSelect,a=e.renderResult,c=(n=(0,r.useState)(0),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||function(e,n){if(e){if("string"==typeof e)return vr(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?vr(e,n):void 0}}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),l=c[0],s=c[1],u=(0,r.useRef)(null),p=(0,r.useCallback)((function(e,n){var t,r,i,a,c,p;if(0!==o.length)if(void 0!==n){var f=null!==l?hr(o,l,n):e,d='li[data-result-index="'.concat(f,'"]');r=null===(t=u.current)||void 0===t?void 0:t.querySelector(d),i=r.offsetParent.scrollTop,a=r.offsetParent.offsetHeight,c=r.offsetTop,p=c+r.scrollHeight,(c<i||p>i+a)&&r.scrollIntoView(!1),s(f)}else s(e);else s(null)}),[o,l,s]),f=(0,r.useCallback)((function(){p(0,1)}),[p]),d=(0,r.useCallback)((function(){p(o.length-1,-1)}),[p,o]),y=(0,r.useCallback)((function(e){i(o[l],e)}),[o,l,i]),h=(0,r.useCallback)((function(e){var n={ArrowDown:f,ArrowUp:d,Enter:y}[e.key];n&&(e.preventDefault(),e.stopPropagation(),n(e))}),[f,d,y]);return(0,r.useEffect)((function(){return document.body.addEventListener("keydown",h),function(){return document.body.removeEventListener("keydown",h)}}),[u,h]),(0,z.jsx)("ul",{className:Ar.results,ref:u,children:o.map((function(e,n){return(0,z.jsx)("li",{className:l===n?Ar.highlighted:"",title:e.description,"data-result-index":n,onClick:function(n){return i(e,n)},onDoubleClick:function(n){return i(e,n)},onMouseOver:function(){return p(n)},children:a(e,n)},n)}))})}gr.propTypes={results:G().array.isRequired,onSelect:G().func.isRequired,renderResult:G().func.isRequired};var xr=gr;function jr(e){return jr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},jr(e)}function Cr(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function wr(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Cr(Object(t),!0).forEach((function(n){Er(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Cr(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Er(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==jr(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==jr(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===jr(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function kr(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function Or(e){e&&(e.focus(),e.select())}var Sr=function(e){var n,t,o=e.choices,i=e.searchKey,a=e.renderResults,c=e.initialQuery,l=!o.length||o.length>10,s=(n=(0,r.useState)(c),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||function(e,n){if(e){if("string"==typeof e)return kr(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?kr(e,n):void 0}}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),u=s[0],p=s[1],f=(0,r.useMemo)((function(){if(!u||!l)return o;var e={key:i,limit:30};return yr().go(u,o,e).map((function(e){return wr(wr({},e.obj),{},{search:e})}))}),[l,u,o,i]),d=(0,r.useCallback)((function(e){p(e.target.value)}),[p]);return(0,z.jsxs)(z.Fragment,{children:[l&&(0,z.jsxs)("div",{className:Ar.searchWrapper,children:[(0,z.jsx)("input",{ref:Or,type:"text",value:u,onChange:d}),(0,z.jsx)(J,{className:Ar.searchIcon,name:"search"}),(0,z.jsx)(J,{className:Ar.clearSearchIcon,name:"times",onClick:function(){return p("")}})]}),a(f)]})};Sr.propTypes={choices:G().array.isRequired,searchKey:G().string.isRequired,initialQuery:G().string.isRequired,renderResults:G().func.isRequired},Sr.defaultProps={initialQuery:""};var Br=Sr;function Pr(e){var n=e.choices,t=e.prompt,o=e.onSelect,i=(0,r.useMemo)((function(){return n.map((function(e){return{value:e}}))}),[n]),a=(0,r.useCallback)((function(e){var n=e.search?(0,z.jsx)("span",{dangerouslySetInnerHTML:{__html:yr().highlight(e.search)}}):(0,z.jsx)("span",{children:e.value});return(0,z.jsxs)(z.Fragment,{children:[n,e.description&&(0,z.jsx)("p",{className:Ar.description,children:e.description})]})}),[]);return(0,z.jsxs)("div",{className:Ar.dialog,children:[(0,z.jsx)("p",{children:t||"Select"}),(0,z.jsx)(Br,{choices:i,initialQuery:"",searchKey:"value",renderResults:function(e){return e&&(0,z.jsx)(xr,{results:e,onSelect:function(e){return o(e.value)},renderResult:a})}})]})}Pr.propTypes={choices:G().arrayOf(G().stirng).isRequired,prompt:G().string,onSelect:G().func.isRequired};var Ir=Pr;function Tr(e){return Tr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Tr(e)}function Dr(e){return function(e){if(Array.isArray(e))return Rr(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||Lr(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Lr(e,n){if(e){if("string"==typeof e)return Rr(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Rr(e,n):void 0}}function Rr(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function Nr(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function _r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Nr(Object(t),!0).forEach((function(n){Mr(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Nr(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Mr(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Tr(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Tr(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Tr(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Yr(e){var n=e.prop,t=void 0===n?{}:n,o=e.schema,i=e.onUpdate,a=o.enum,c=t.parsed,l=(0,r.useCallback)((function(e){i(_r(_r({},t),{},{parsed:a[e.target.value],useRaw:!1}))}),[t,a,i]);return(0,z.jsx)("select",{className:rr.propertyValue,onChange:l,value:a.indexOf(c),children:a.map((function(e,n){return(0,z.jsx)("option",{value:n,children:e},n)}))})}function Kr(e){var n=e.prop,t=void 0===n?{}:n,o=e.schema,i=e.onUpdate,a=function(e){var n=(0,r.useContext)(_e);return(0,r.useMemo)((function(){if(!e.choices)return[];if(Array.isArray(e.choices))return e.choices;if(!e.choices.$source)throw new Error("Expected schema.choices.$source");var t=n[e.choices.$source];return e.choices.$key?we()(t,e.choices.$key):t}),[n,e.choices])}(o),c=t.parsed,l=void 0===c?[]:c,s=(0,r.useCallback)((function(e){i(_r(_r({},t),{},{useRaw:!1,parsed:e}))}),[t,i]),u=a.length>20?Zr:qr;return(0,z.jsx)(u,{selected:l,choices:a,onUpdate:s})}function qr(e){var n=e.selected,t=e.choices,o=e.onUpdate,i=(0,r.useCallback)((function(e){o(n.includes(e)?n.filter((function(n){return n!==e})):[].concat(Dr(n),[e]))}),[n,o]);return(0,z.jsx)("ol",{className:rr.propertyMultiSelect,children:t.map((function(e,t){return(0,z.jsx)("li",{children:(0,z.jsxs)("label",{children:[(0,z.jsx)("input",{type:"checkbox",checked:n.includes(e),onChange:function(n){return i(e)}}),e]})},t)}))})}function Zr(e){var n,t,o=e.selected,i=e.choices,a=e.onUpdate,c=(n=(0,r.useState)(!1),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||Lr(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),l=c[0],s=c[1],u=(0,r.useCallback)((function(e){a([].concat(Dr(o),[e])),s(!1)}),[s,o,a]),p=(0,r.useCallback)((function(e){a(o.filter((function(n){return n!==e})))}),[o,a]);return(0,z.jsxs)(z.Fragment,{children:[(0,z.jsx)("ul",{className:rr.propertyMultiSelectChips,children:o.map((function(e,n){return(0,z.jsx)("li",{children:(0,z.jsxs)("span",{className:rr.behaviorBind,children:[e," ",(0,z.jsx)(J,{name:"times",className:rr.phandleRemove,onClick:function(){return p(e)}})]})},n)}))}),(0,z.jsxs)($e,{secondary:!0,onClick:function(){return s(!0)},children:[(0,z.jsx)(J,{name:"plus"})," Add"]}),l&&(0,z.jsx)(gn,{onDismiss:function(){return s(!1)},children:(0,z.jsx)(Ir,{choices:i,onSelect:u})})]})}function Ur(e){var n=(0,r.useContext)(j).getSearchTargets,t=e.param,o=e.prompt,i=e.onSelect,a=(0,r.useMemo)((function(){return n(t)}),[n,t]);return(0,z.jsxs)("div",{className:Ar.dialog,children:[(0,z.jsx)("p",{children:o}),(0,z.jsx)(xr,{results:a,onSelect:i,renderResult:function(e){return e.code}})]})}Ur.propTypes={value:G().any.isRequired,param:G().object.isRequired,prompt:G().string.isRequired,onSelect:G().func.isRequired},Ur.defaultProps={value:""};var Gr=Ur,zr=G().oneOfType([G().oneOf(["code","layer","mod","command"]),G().shape({type:G().oneOf(["placeholder"])}),G().shape({enum:G().array,raw:G().bool,name:G().string.isRequired,type:G().string.isRequired})]),Wr=G().arrayOf(zr),Fr=G().oneOfType([G().string,G().number]),Xr=G().shape({params:Wr,code:Fr.isRequired,description:G().string,symbol:G().string,faIcon:G().string}),Vr={value:Fr,source:Xr};Vr.params=G().arrayOf(G().shape(Vr));var Qr=G().shape(Vr),Hr=Qr;function Jr(e){var n=e.prompt,t=e.searchKey,o=e.node,i=e.param,a=e.behaviour,c=e.context,l=e.onSelect,s=(0,r.useContext)(j).getSearchTargets,u=(0,r.useCallback)((function(e){var n=e.search?(0,z.jsx)("span",{dangerouslySetInnerHTML:{__html:yr().highlight(e.search)}}):(0,z.jsx)("span",{children:e.code});return(0,z.jsxs)(z.Fragment,{children:[n,e.description&&(0,z.jsx)("p",{className:Ar.description,children:e.description})]})}),[]),p=(0,r.useMemo)((function(){return s(i,a.code,c)}),[s,i,a,c]);return(0,z.jsxs)("div",{className:Ar.dialog,children:[(0,z.jsx)("p",{children:n}),(0,z.jsx)(Br,{choices:p,initialQuery:o.value||"",searchKey:t,renderResults:function(e){return e&&(0,z.jsx)(xr,{results:e,onSelect:l,renderResult:u})}})]})}G().arrayOf(Qr),Jr.propTypes={node:Hr.isRequired,param:G().oneOfType([G().string,G().shape({enum:G().array,raw:G().bool,type:G().string})]).isRequired,prompt:G().string.isRequired,searchKey:G().string.isRequired,behaviour:G().object.isRequired,context:G().string.isRequired,onSelect:G().func.isRequired};var $r=Jr,eo=t(93565);function no(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function to(e){var n,t,o=e.node,i=e.onSelect,a=(n=(0,r.useState)({h:Number(o.params[0].value),s:Number(o.params[1].value)/100,l:Number(o.params[2].value)/100}),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||function(e,n){if(e){if("string"==typeof e)return no(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?no(e,n):void 0}}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),c=a[0],l=a[1],s=(0,r.useCallback)((function(e){var n=e.hsl;l(n)}),[l]),u=(0,r.useCallback)((function(){i([{value:Math.round(c.h)},{value:Math.round(100*c.s)},{value:Math.round(100*c.l)}])}),[c,i]);return(0,z.jsxs)("div",{children:[(0,z.jsx)("p",{children:"Select colour"}),(0,z.jsx)(eo.AI,{color:c,disableAlpha:!0,onChangeComplete:s}),(0,z.jsx)("p",{style:{textAlign:"center"},children:(0,z.jsx)($e,{onClick:u,children:"Confirm"})})]})}to.propTypes={value:G().any.isRequired,prompt:G().string.isRequired,param:G().oneOfType([G().shape({enum:G().array,raw:G().bool,type:G().string})]).isRequired,onSelect:G().func.isRequired},to.defaultProps={value:""};var ro=to;function oo(e,n){if(e){if("string"==typeof e)return ao(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?ao(e,n):void 0}}function io(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}function ao(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function co(e){return e.params.length>0?[e].concat(function(e){if(Array.isArray(e))return ao(e)}(n=co(e.params[0]))||io(n)||oo(n)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()):[e];var n}function lo(e){var n,t=function(e){if(Array.isArray(e))return e}(n=e)||io(n)||oo(n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),r=t[0],o=t.slice(1);return{value:r,params:0===o.length?[]:[lo(o)]}}var so=t(14409),uo={};uo.styleTagTransform=m(),uo.setAttributes=d(),uo.insert=p().bind(null,"head"),uo.domAPI=s(),uo.insertStyleElement=h(),c()(so.Z,uo);var po=so.Z&&so.Z.locals?so.Z.locals:void 0;function fo(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var yo=["LSHFT","LALT","LCTRL","LGUI"],ho=["RSHFT","RALT","RCTRL","RGUI"];function bo(e){var n=e.selected,t=e.row,r=e.onSelect;return(0,z.jsx)("ul",{className:po.modifiers,children:t.map((function(e,t){return(0,z.jsx)("li",{className:n.includes(e)?po.selected:"",onClick:function(){return r(e)},children:e},t)}))})}function mo(e){var n=e.selected,t=e.onChange;function r(e){var r;t(n.includes(e)?n.filter((function(n){return n!==e})):[].concat(function(e){if(Array.isArray(e))return fo(e)}(r=n)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(r)||function(e,n){if(e){if("string"==typeof e)return fo(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?fo(e,n):void 0}}(r)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),[e]))}return(0,z.jsxs)(z.Fragment,{children:[(0,z.jsx)(bo,{row:yo,selected:n,onSelect:r}),(0,z.jsx)(bo,{row:ho,selected:n,onSelect:r})]})}mo.propTypes={selected:G().arrayOf(G().string)};var Ao=mo;function vo(){return(0,z.jsx)("span",{children:"⦸"})}function go(e){return e&&"(".concat(e.code,") ").concat(e.description)}function xo(e){var n,t=e&&((null==e?void 0:e.symbol)||(null==e||null===(n=e.code)||void 0===n?void 0:n.toString()));return(null==e?void 0:e.faIcon)&&(0,z.jsx)(J,{name:e.faIcon})||t||(0,z.jsx)(vo,{})}function jo(e){var n=e.node,t=e.onSelect,o=n.value,i=n.source,a=n._isPlaceholder,c=go(i),l=(0,r.useCallback)((function(e){e.stopPropagation(),t({node:n})}),[n,t]);return(0,z.jsx)("span",{className:st()([ft.code,(void 0===o||a)&&ft.missingValue]).join(" "),title:c,onClick:l,children:xo(i)})}jo.propTypes={node:Hr.isRequired,onSelect:G().func.isRequired};var Co=jo;function wo(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var Eo=function(e){var n,t=e.node,o=e.onSelect,i=(0,r.useCallback)((function(e){e.stopPropagation(),o({node:t,type:"tree"})}),[t,o]),a=(0,r.useMemo)((function(){return we()(co(t),"source")}),[t]),c=(0,r.useMemo)((function(){return a.map(xo).map((function(e,n){return(0,z.jsx)(r.Fragment,{children:e},n)})).reduce((function(e,n){return 0===e.length?[n]:[].concat(function(e){if(Array.isArray(e))return wo(e)}(t=e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(t)||function(e,n){if(e){if("string"==typeof e)return wo(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?wo(e,n):void 0}}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),[" ",n]);var t}),[])}),[a]),l=(0,r.useMemo)((function(){return a.map(go).join(" + ")}),[a]),s=void 0===(null===(n=t.source)||void 0===n?void 0:n.code)||void 0===t.value||t._isPlaceholder;return(0,z.jsx)("span",{className:st()([ft.code,s&&ft.missingValue]).join(" "),title:l,onClick:i,children:c})};function ko(e,n){var t=Ae()(e,"[0]",{}),r=je()(n.commands,"code");return[].concat(n.params||[],"command"===Ae()(n,"params[0]")?Ae()(r[t.value],"additionalParams",[]):[])}function Oo(e){return Oo="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Oo(e)}function So(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Bo(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?So(Object(t),!0).forEach((function(n){Po(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):So(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Po(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Oo(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Oo(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Oo(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Io(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(e,n)||function(e,n){if(e){if("string"==typeof e)return To(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?To(e,n):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function To(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function Do(e){var n=[];return function e(t){var r=t.params||[];n.push(t),r.forEach(e)}(e),n}function Lo(e,n){var t=Io(e.params,1)[0],r=Ae()(t,"source.symbol",Ae()(t,"value","")),o=!Ae()(t,"source.faIcon")&&r.length>4,i=n.length>1,a=Ae()(t,"params",[]).length>0;return o||i||a}function Ro(e){var n={layer:"Select layer",mod:"Select modifier",behaviour:"Select behaviour",command:"Select command",keycode:"Select key code"};return e.name?"Select ".concat(e.name):n[e]||n.keycode}function No(e,n,t){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"none",o=arguments.length>4?arguments[4]:void 0,i=e,a=Ae()(t.behavioursByContext[r],i,{}),c=ko(n,a),l=je()(a.commands,"code");function s(e,n){if(!e)return{value:void 0,slot:n,params:[]};var r=e.value,i=e.params,a=e._isPlaceholder,c=function(e,n){var r;return"command"===n?l[e]:n.raw||n.enum||"placeholder"===n.type?{code:e}:null==t||null===(r=t[n])||void 0===r?void 0:r[e]}(r,n);return{value:r,_isPlaceholder:a,slot:n,source:Bo(Bo({},c),{},{symbol:Ae()(o,[null==c?void 0:c.name,"symbol"],null==c?void 0:c.symbol),faIcon:Ae()(o,[null==c?void 0:c.name,"faIcon"],null==c?void 0:c.faIcon)}),params:Ae()(c,"params",[]).map((function(e,n){return s(i[n],e)}))}}return{value:e,slot:"behaviour",source:a,params:c.map((function(e,t){return s(n[t],e)}))}}function _o(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(e,n)||Mo(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Mo(e,n){if(e){if("string"==typeof e)return Yo(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Yo(e,n):void 0}}function Yo(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var Ko={LSHFT:"LS",LCTRL:"LC",LALT:"LA",LGUI:"LG",RSHFT:"RS",RCTRL:"RC",RALT:"RA",RGUI:"RG"};function qo(e){var n=e.search?(0,z.jsx)("span",{dangerouslySetInnerHTML:{__html:yr().highlight(e.search)}}):(0,z.jsx)("span",{children:e.code});return(0,z.jsxs)(z.Fragment,{children:[n,(0,z.jsx)("p",{className:Ar.description,children:e.description})]})}function Zo(e){var n=e.node,t=e.onSelect,o=e.behaviour,i=(0,r.useContext)(j),a=i.getSearchTargets,c=i.sources,l=i.mergedGlyphs,s=(0,r.useMemo)((function(){return we()(co(n),"source")}),[n]),u=1===s.length?[]:s.slice(0,-1),p=_o((0,r.useState)(we()(u,"name")),2),f=p[0],d=p[1],y=_o((0,r.useState)(s.at(-1)),2),h=y[0],b=y[1],m=(0,r.useMemo)((function(){return a("code",o.code).filter((function(e){return 0===e.params.length}))}),[a,o]),A=No("&kp",[{value:null==h?void 0:h.code,params:null==h?void 0:h.params}],c,void 0,l),v=(0,r.useCallback)((function(e,n){var r,o=n.map((function(e){return Ko[e]})),i=lo(st()([].concat(function(e){if(Array.isArray(e))return Yo(e)}(r=o)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(r)||Mo(r)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),[null==e?void 0:e.code])));t(i)}),[t]),g=(0,r.useCallback)((function(e,n){"dblclick"!==n.type?b(e):v(e,f)}),[v,f,b]);return(0,z.jsxs)("div",{className:Ar.dialog,children:[(0,z.jsxs)("div",{style:{display:"flex",gap:"10px"},children:[(0,z.jsxs)("div",{children:[(0,z.jsx)("p",{children:"Keycode"}),(0,z.jsx)(At,{className:po.previewKeycode,selectable:!1,children:(0,z.jsx)(Eo,{node:A.params[0],onSelect:function(){}})})]}),(0,z.jsxs)("div",{children:[(0,z.jsx)("p",{children:"Modifiers"}),(0,z.jsx)(Ao,{selected:f,onChange:d})]})]}),(0,z.jsx)("p",{children:"Available Keycodes"}),(0,z.jsx)(Br,{choices:m,initialQuery:null==h?void 0:h.code,searchKey:"code",renderResults:function(e){return e&&(0,z.jsx)(xr,{results:e,onSelect:g,renderResult:qo})}}),(0,z.jsx)(Yt,{className:po.quickCloseTip,children:"Double-click to select and close the dialog"}),(0,z.jsxs)("p",{style:{textAlign:"center"},children:[(0,z.jsx)($e,{onClick:function(){v(h,f)},children:"Confirm"}),(0,z.jsx)($e,{onClick:function(){t(n)},secondary:!0,children:"Cancel"})]})]})}Zo.propTypes={node:Hr.isRequired,param:G().oneOfType([G().string,G().shape({enum:G().array,raw:G().bool,type:G().string})]).isRequired,prompt:G().string.isRequired,searchKey:G().string.isRequired,behaviour:G().object.isRequired,context:G().string.isRequired,onSelect:G().func.isRequired};var Uo=Zo;function Go(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function zo(e){e&&(e.focus(),e.select())}function Wo(e){var n,t,o=e.value,i=e.param,a=e.onSelect,c=(n=(0,r.useState)(o),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||function(e,n){if(e){if("string"==typeof e)return Go(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Go(e,n):void 0}}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),l=c[0],s=c[1],u=(0,r.useCallback)((function(e){"Enter"===e.key&&a({code:l})}),[l,a]),p=(0,r.useCallback)((function(e){var n=e.target.value;"number"===i.type&&(n=Number(n),Number.isNaN(n))||s(n)}),[i,s]);return(0,z.jsxs)("div",{className:Ar.dialog,children:[(0,z.jsx)("p",{children:"Enter raw value"}),(0,z.jsx)("input",{ref:zo,type:"text",value:l,onChange:p,onKeyDown:u})]})}Wo.propTypes={value:G().any.isRequired,prompt:G().string.isRequired,param:G().oneOfType([G().shape({enum:G().array,raw:G().bool,type:G().string})]).isRequired,onSelect:G().func.isRequired},Wo.defaultProps={value:""};var Fo=Wo;function Xo(e){var n=(0,r.useContext)(j).getSearchTargets,t=e.onSelect,o=(0,r.useMemo)((function(){return n("layer")}),[n]);return(0,z.jsxs)("div",{className:Ar.dialog,children:[(0,z.jsx)("p",{children:"Select layer"}),(0,z.jsx)(xr,{results:o,onSelect:t,renderResult:function(e){return(0,z.jsxs)(z.Fragment,{children:[e.code,e.description&&(0,z.jsx)("p",{className:Ar.description,children:e.description})]})}})]})}Xo.propTypes={value:G().string.isRequired,behaviour:G().object.isRequired,onSelect:G().func.isRequired},Xo.defaultProps={value:""};var Vo=Xo;function Qo(e){return Qo="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Qo(e)}function Ho(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Jo(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Ho(Object(t),!0).forEach((function(n){$o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Ho(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function $o(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Qo(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Qo(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Qo(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function ei(e){var n=e.node,t=e.type,o=e.onCancel,i=e.onSelect,a=(0,ye.pick)(e,["node","value","prompt","param","node","behaviour","context","searchKey"]),c=(0,r.useMemo)((function(){var e;return"params"===t&&"hsb-color-picker"===(null===(e=n.source)||void 0===e?void 0:e.helper)?ro:n.slot.raw||"placeholder"===n.slot.type?Fo:n.slot.enum?Gr:"code"===n.slot?Uo:"layer"===n.slot?Vo:$r}),[n,t]);return(0,z.jsx)(gn,{onDismiss:o,children:(0,z.jsx)(c,Jo(Jo({},a),{},{param:n.slot,onSelect:i}))})}ei.propTypes={type:G().string.isRequired,node:Hr.isRequired,behaviour:G().object.isRequired,prompt:G().string.isRequired,searchKey:G().string.isRequired,searchThreshold:G().number,onCancel:G().func.isRequired,onSelect:G().func.isRequired},ei.defaultProps={type:"value",value:"",freeForm:!1,searchThreshold:10};var ni=ei;function ti(e){return function(e){if(Array.isArray(e))return ri(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,n){if(e){if("string"==typeof e)return ri(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?ri(e,n):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ri(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var oi=function(e,n){return[].concat(ti(e.slice(0,n)),ti(e.slice(n+1)))},ii=function(e,n,t){return[].concat(ti(e.slice(0,n)),[t],ti(e.slice(n+1)))};function ai(e){return ai="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},ai(e)}function ci(e){return function(e){if(Array.isArray(e))return fi(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||pi(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function li(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function si(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?li(Object(t),!0).forEach((function(n){ui(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):li(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function ui(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==ai(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==ai(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===ai(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function pi(e,n){if(e){if("string"==typeof e)return fi(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?fi(e,n):void 0}}function fi(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function di(e){var n,t,o=e.prop,i=void 0===o?{}:o,a=e.schema,c=void 0===a?{}:a,l=e.onUpdate,s=i.parsed,u=void 0===s?[]:s,p=c.length,f=(n=(0,r.useState)(null),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||pi(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),d=f[0],y=f[1],h=(0,r.useCallback)((function(){l(si(si({},i),{},{useRaw:!1,parsed:[].concat(ci(u),[""])})),y(u.length)}),[i,u,l,y]),b=(0,r.useCallback)((function(e){l(si(si({},i),{},{useRaw:!1,parsed:ii(u,d,e.code)})),y(null)}),[i,u,d,l]),m=(0,r.useCallback)((function(e){l(si(si({},i),{},{useRaw:!1,parsed:oi(u,e)}))}),[i,u,l]);return(0,z.jsxs)("div",{children:[(0,z.jsx)("ol",{className:(0,ye.compact)([rr.propertyPhandleSelect,1===p&&rr.propertyPhandleSingleton]).join(" "),children:u.map((function(e,n){return(0,z.jsx)("li",{children:(0,z.jsxs)("span",{className:rr.behaviorBind,onClick:function(){return y(n)},children:[e,1!==p&&(0,z.jsx)(J,{name:"times",className:rr.phandleRemove,onClick:function(e){e.stopPropagation(),m(n)}})]})},n)}))}),null!==d&&(0,z.jsx)(ni,{node:{value:u[d],params:[],slot:"behaviour"},type:"value",context:"none",behaviour:{code:u[d]},prompt:"Select Behavior",searchKey:"code",onSelect:b,onCancel:function(){return y(null)}}),p&&u.length<p&&(0,z.jsxs)($e,{secondary:!0,onClick:h,children:[(0,z.jsx)(J,{name:"plus"})," Add Behavior"]})]})}function yi(e){return yi="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},yi(e)}function hi(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function bi(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?hi(Object(t),!0).forEach((function(n){mi(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):hi(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function mi(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==yi(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==yi(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===yi(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Ai(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var vi={display:"inline-block",cursor:"pointer",verticalAlign:"text-top",border:"0.75px solid var(--key-color-base)",borderRadius:"3px"},gi={display:"flex",justifyContent:"center",alignItems:"center",width:"10px",height:"10px",margin:"1px",borderRadius:"2px"},xi=function(e){var n,t,o=e.node,i=e.onSelect,a=(n=o.params,t=3,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||function(e,n){if(e){if("string"==typeof e)return Ai(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Ai(e,n):void 0}}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),c=a[0],l=a[1],s=a[2],u=(0,r.useCallback)((function(){i({node:o,type:"params"})}),[o,i]),p=(0,r.useMemo)((function(){return[c,l,s].some((function(e){return void 0===e.value}))}),[c,l,s]),f="hsl(".concat(c.value,", ").concat(l.value,"%, ").concat(s.value,"%)");return(0,z.jsxs)(z.Fragment,{children:[(0,z.jsx)(Co,{node:o,onSelect:i}),p?(0,z.jsx)(Co,{node:{},onSelect:u}):(0,z.jsx)("div",{onClick:u,style:vi,children:(0,z.jsx)("div",{className:p?ft.missingValue:null,style:bi(bi({},gi),{},{backgroundColor:f})})})]})};function ji(e){return ji="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},ji(e)}function Ci(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function wi(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Ci(Object(t),!0).forEach((function(n){Ei(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Ci(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Ei(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==ji(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==ji(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===ji(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function ki(e){var n=e.node,t=e.onSelect;return(0,z.jsxs)(z.Fragment,{children:[(0,z.jsx)(Co,{node:n,onSelect:t}),Ae()(n,"source.params.length")>0?(0,z.jsx)(Si,{slots:n.source.params,params:n.params,onSelect:t}):null]})}function Oi(e){var n=e.node,t=e.onSelect,o=e.slot,i=(0,r.useMemo)((function(){var e;return"hsb-color-picker"===(null===(e=n.source)||void 0===e?void 0:e.helper)?xi:"code"===o?Eo:ki}),[n,o]);return(0,z.jsx)("span",{className:ft.param,children:(0,z.jsx)(i,{node:n,onSelect:t})})}function Si(e){var n=e.slots,t=e.params,r=e.onSelect,o=e.root,i=e.wrapperProps;return(0,z.jsx)("span",wi(wi({className:ft.params,"data-is-root":!!o,"data-param-count":t.length},i),{},{children:n.map((function(e,n){return"placeholder"!==e.type&&(0,z.jsx)(Oi,{slot:e,node:t[n],onSelect:r},n)}))}))}Si.propTypes={slots:G().arrayOf(zr).isRequired,params:G().arrayOf(Hr).isRequired,source:Xr,onSelect:G().func.isRequired};var Bi=Si;function Pi(e,n){if(e){if("string"==typeof e)return Ii(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Ii(e,n):void 0}}function Ii(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function Ti(e){var n,t,o,i,a,c,l=(0,r.useContext)(j),s=l.sources,u=l.mergedGlyphs,p=e.context,f=void 0===p?"none":p,d=e.hideBehaviour,y=e.value,h=e.params,b=e.onUpdate,m=(a=(0,r.useState)(null),c=2,function(e){if(Array.isArray(e))return e}(a)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(a,c)||Pi(a,c)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),A=m[0],v=m[1],g=y,x=Ae()(s.behavioursByContext[f],g,{}),C=ko(h,x),w=No(y,h,s,f,u),E=Do(w),k=function(e){if(!e[0].source.code)return!0;var n,t=function(e,n){var t="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!t){if(Array.isArray(e)||(t=Pi(e))){t&&(e=t);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,c=!1;return{s:function(){t=t.call(e)},n:function(){var e=t.next();return a=e.done,e},e:function(e){c=!0,i=e},f:function(){try{a||null==t.return||t.return()}finally{if(c)throw i}}}}(e);try{for(t.s();!(n=t.n()).done;){var r,o=n.value;if(((null===(r=o.source)||void 0===r?void 0:r.params)||[]).length>o.params.length)return!0;if(o.params.some((function(e){return void 0===e.value||""===e.value||void 0===e.source})))return!0}}catch(e){t.e(e)}finally{t.f()}}(E);function O(e){var n=e.node,t=e.type;v({node:n,type:void 0===t?"value":t,nodeIndex:E.indexOf(n)})}return(0,z.jsxs)(z.Fragment,{children:[x&&!d?(0,z.jsx)("span",{className:(0,ye.compact)([ft["behaviour-binding"],!x.code&&ft.missingValue]).join(" "),onClick:function(){return O({node:w})},children:x.code||"⦸"}):null,k&&(0,z.jsx)(J,{name:"warning",className:ft.missing,title:"Binding has missing value(s)"}),(0,z.jsx)(Bi,{root:!0,slots:C,params:w.params,onSelect:O,wrapperProps:{"data-simple":(n=w,t=Io(n.params,1)[0],o=Ae()(t,"source.symbol",Ae()(t,"source.code","")),i=!!Ae()(t,"source.faIcon")||1===o.length,1===n.params.length&&i),"data-long":Lo(w,C)}}),A&&(0,z.jsx)(ni,{node:A.node,type:A.type,behaviour:x,context:f,prompt:Ro(A.node.slot),searchKey:"code",onSelect:function(e){if("tree"===A.type)return function(e){var n=e.value,t=e.params,r=A.nodeIndex,o=ke()(w),i=Do(o),a=i[r];a.value=n,a.params=t,delete a._isPlaceholder,i.forEach((function(e){delete e.source})),v(null),b(_n()(o,["value","params"]))}(e);if("params"===A.type)return function(e){var n=A.nodeIndex,t=ke()(w),r=Do(t);r[n].params=e,r.forEach((function(e){delete e.source})),v(null),b(_n()(t,["value","params"]))}(e);var n=A.node,t=A.nodeIndex,r=ke()(w),o=Do(r),i=o[t];if(n.slot.raw)"number"===n.slot.type&&(e.code=Number(e.code));else if("command"===n.slot){var a,c,l,s=(null===(a=i.source)||void 0===a||null===(c=a.additionalParams)||void 0===c?void 0:c.length)||0;if(((null===(l=e.additionalParams)||void 0===l?void 0:l.length)||0)<s){var u=o[0];u.params.splice(1,u.params.length-1),o.splice(2,o.length-1)}}i.value=e.code,delete i._isPlaceholder,i.params=((null==e?void 0:e.params)||[]).reduce((function(n,t,r){var o,a;return(null===(o=i.source)||void 0===o||null===(a=o.params)||void 0===a?void 0:a[r])===e.params[r]?n.push(i.params[r]):n.push({value:0,_isPlaceholder:!0}),n}),[]),o.forEach((function(e){delete e.source})),v(null),b(_n()(r,["value","params","_isPlaceholder"]))},onCancel:function(){return v(null)}})]})}Ti.propTypes={context:G().string,hideBehaviour:G().bool.isRequired,value:Fr.isRequired,params:G().arrayOf(Qr),onUpdate:G().func.isRequired},Ti.defaultProps={hideBehaviour:!1};var Di=Ti;function Li(e){return Li="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Li(e)}function Ri(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Ni(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Ri(Object(t),!0).forEach((function(n){_i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Ri(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function _i(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Li(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Li(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Li(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Mi(e){var n=e.context,t=e.value,r=e.params,o=e.keyWrapperProps,i=void 0===o?{}:o,a=e.onUpdate;return(0,z.jsx)(At,Ni(Ni({},i),{},{children:(0,z.jsx)(Di,{context:n,value:t,params:r,onUpdate:a})}))}Mi.propTypes={label:G().string,value:Fr.isRequired,params:G().arrayOf(Qr),onUpdate:G().func.isRequired};var Yi=Mi;function Ki(e){return Ki="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Ki(e)}function qi(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function Zi(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Ui(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Zi(Object(t),!0).forEach((function(n){Gi(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Zi(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Gi(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Ki(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Ki(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Ki(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function zi(e){var n=e.prop,t=void 0===n?{}:n,o=e.onUpdate,i=t.parsed,a=void 0===i?[]:i,c=(0,r.useCallback)((function(){var e;o(Ui(Ui({},t),{},{useRaw:!1,parsed:[].concat((e=a,function(e){if(Array.isArray(e))return qi(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,n){if(e){if("string"==typeof e)return qi(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?qi(e,n):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),[{value:"",params:[]}])}))}),[t,a,o]),l=(0,r.useCallback)((function(e,n){o(Ui(Ui({},t),{},{useRaw:!1,parsed:ii(a,n,e)}))}),[t,a,o]),s=(0,r.useCallback)((function(e){o(Ui(Ui({},t),{},{useRaw:!1,parsed:oi(a,e)}))}),[t,a,o]);return(0,z.jsxs)(z.Fragment,{children:[(0,z.jsx)("ol",{className:rr.propertyBindingsValue,children:a.map((function(e,n){return(0,z.jsx)("li",{children:(0,z.jsxs)(At,{children:[(0,z.jsx)(Yi,{context:"none",value:e.value,params:e.params,onUpdate:function(e){return l(e,n)}}),(0,z.jsx)("div",{className:rr.actions,children:(0,z.jsx)(J,{name:"trash",className:rr.deleteBind,onClick:function(e){e.stopPropagation(),s(n)}})})]})},n)}))}),(0,z.jsxs)($e,{secondary:!0,onClick:c,children:[(0,z.jsx)(J,{name:"plus"})," Add binding"]})]})}function Wi(e){return Wi="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Wi(e)}function Fi(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Xi(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Fi(Object(t),!0).forEach((function(n){Vi(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Fi(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Vi(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Wi(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Wi(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Wi(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Qi(e){var n=e.schema,t=void 0===n?{}:n,r=t.type;if("const"in t)return(0,z.jsx)(sr,Xi({},e));if("enum"in t)return(0,z.jsx)(Yr,Xi({},e));if("key-position-picker"===t.helper){var o=e.prop,i=void 0===o?{}:o,a=e.onUpdate;return(0,z.jsx)(er,{value:i.parsed||[],onUpdate:function(e){a(Xi(Xi({},i),{},{useRaw:!1,parsed:e}))}})}if(t.choices)return(0,z.jsx)(Kr,Xi({},e));switch(r){case"string":return(0,z.jsx)(ur,Xi({},e));case"int":return(0,z.jsx)(pr,Xi({},e));case"boolean":return(0,z.jsx)(fr,Xi({},e));case"phandle":case"phandles":return(0,z.jsx)(di,Xi({},e));case"phandle-array":return(0,z.jsx)(zi,Xi({},e));default:return(0,z.jsx)(lr,Xi({},e))}}Qi.propTypes={schema:G().shape({type:G().oneOf(["string","boolean","int","array","phandle","phandles","phandle-array","integer-union"]),required:G().bool,description:G().string,default:G().any,const:G().any,helper:G().any}),prop:G().shape({parsed:G().any,raw:G().string}),onUpdate:G().func.isRequired};var Hi=Qi;function Ji(e){return e.length>31?"maximum length: 31":e.match(/^[^a-zA-Z]/)?"first character must be a letter":e.match(/[^a-zA-Z0-9,._+-]/)?"valid characters: a-zA-Z0-9,._+-":void 0}var $i=Ji;function ea(e){return e.length>31?"maximum length: 31":e.match(/^[^a-zA-Z]/)?"first character must be a letter":e.match(/[^a-zA-Z0-9_]/)?"valid characters: a-zA-Z0-9_":void 0}var na=t(33988),ta={};ta.styleTagTransform=m(),ta.setAttributes=d(),ta.insert=p().bind(null,"head"),ta.domAPI=s(),ta.insertStyleElement=h(),c()(na.Z,ta);var ra=na.Z&&na.Z.locals?na.Z.locals:void 0;function oa(e){return oa="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},oa(e)}var ia=["validator","required","value"];function aa(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function ca(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?aa(Object(t),!0).forEach((function(n){la(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):aa(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function la(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==oa(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==oa(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===oa(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function sa(e){var n=e.validator,t=e.required,r=void 0!==t&&t,o=e.value,i=void 0===o?"":o,a=function(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}(e,ia),c=n(i)||!i&&r&&"cannot be empty";return(0,z.jsxs)("span",{className:ra.wrapper,children:[(0,z.jsx)("input",ca({type:"text",value:i},a)),c&&(0,z.jsx)("span",{className:ra.error,children:c})]})}function ua(e){return ua="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},ua(e)}function pa(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function fa(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?pa(Object(t),!0).forEach((function(n){da(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):pa(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function da(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==ua(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==ua(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===ua(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function ya(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(e,n)||ha(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ha(e,n){if(e){if("string"==typeof e)return ba(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?ba(e,n):void 0}}function ba(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function ma(e){var n=e.name,t=e.labels,r=ya(void 0===t?[]:t,1)[0],o=e.properties.label;return n.toLowerCase()===(r||"").toLowerCase()&&n.toLowerCase()===((null==o?void 0:o.parsed)||"").toLowerCase()}function Aa(e){var n=e.node;return(0,z.jsxs)("div",{children:[(0,z.jsx)("p",{children:(0,z.jsx)("code",{children:n.properties.compatible.parsed})}),(0,z.jsx)(va,fa({},e))]})}function va(e){var n=e.node,t=e.onUpdate,o=ya((0,r.useState)(ma(n)),2),i=o[0],a=o[1],c=ya((0,r.useState)(ma(n)),2),l=c[0],s=c[1],u=function(e,n,t,o){var i=(0,r.useCallback)((function(t){n(fa(fa({},e),{},{name:t.target.value}))}),[e,n]),a=(0,r.useCallback)((function(r){var i,a=r.target.value,c=[a].concat(function(e){if(Array.isArray(e))return ba(e)}(i=e.labels.slice(1))||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(i)||ha(i)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),l=t?a:e.name,s=o?fa(fa({},e.properties),{},{label:{parsed:a.toUpperCase(),raw:'"'.concat(a.toUpperCase(),'"'),useRaw:!1}}):e.properties;n(fa(fa({},e),{},{name:l,labels:c,properties:s}))}),[e,n,t,o]);return[i,a,(0,r.useCallback)((function(t){return n(fa(fa({},e),{},{properties:fa(fa({},e.properties),{},{label:fa(fa({},e.properties.label),{},{parsed:t.target.value,useRaw:!1})})}))}),[e,n])]}(n,t,i,l),p=ya(u,3),f=p[0],d=p[1],y=p[2];return(0,z.jsx)("table",{children:(0,z.jsxs)("tbody",{children:[(0,z.jsxs)("tr",{children:[(0,z.jsx)("th",{children:"Bind"}),(0,z.jsx)("td",{children:(0,z.jsx)(sa,{type:"text",value:n.labels[0]||"",required:!0,validator:ea,onChange:d})})]}),(0,z.jsxs)("tr",{children:[(0,z.jsx)("th",{children:"Node"}),(0,z.jsxs)("td",{children:[(0,z.jsx)(sa,{value:n.name,required:!0,readOnly:i,disabled:i,validator:Ji,onChange:f}),(0,z.jsxs)("label",{title:"Set automatically using bind name",children:[(0,z.jsx)("input",{type:"checkbox",checked:i,onChange:function(e){return a(e.target.checked)}})," Automatic"]})]})]}),(0,z.jsxs)("tr",{children:[(0,z.jsx)("th",{children:"Label"}),(0,z.jsxs)("td",{children:[(0,z.jsx)(sa,{type:"text",value:n.properties.label.parsed||"",required:!0,readOnly:l,disabled:l,validator:function(){return null},onChange:y}),(0,z.jsxs)("label",{title:"Set automatically using bind name",children:[(0,z.jsx)("input",{type:"checkbox",checked:l,onChange:function(e){return s(e.target.checked)}})," Automatic"]})]})]})]})})}function ga(e){return ga="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},ga(e)}function xa(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function ja(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?xa(Object(t),!0).forEach((function(n){Ca(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):xa(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Ca(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==ga(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==ga(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===ga(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function wa(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var Ea=function(e){var n,t,o,i=e.node,a=e.onUpdate,c=e.onCancel,l=(0,r.useContext)(_e).behaviors,s=(t=(0,r.useState)(i),o=2,function(e){if(Array.isArray(e))return e}(t)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(t,o)||function(e,n){if(e){if("string"==typeof e)return wa(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?wa(e,n):void 0}}(t,o)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),u=s[0],p=s[1],f=l[null===(n=i.properties.compatible)||void 0===n?void 0:n.parsed],d=function(e){return function(n){p(ja(ja({},u),{},{properties:ja(ja({},u.properties),{},Ca({},e,n))}))}},y=(0,r.useCallback)((function(){a(ke()(u))}),[u,a]),h=(null==f?void 0:f.properties)||{},b=(f?Object.keys(h):Object.keys(u.properties)).filter((function(e){var n;return!("label"===e||null!==(n=h[e])&&void 0!==n&&n.deprecatedBy&&!u.properties[e])}));return(0,z.jsx)(gn,{onDismiss:c,children:(0,z.jsx)(fn,{dismissText:!1,children:(0,z.jsxs)("div",{style:{maxHeight:"80vh",overflow:"auto"},children:[(0,z.jsxs)("h2",{children:["Edit ",i.name," ",(0,z.jsxs)("code",{children:["(&",i.labels[0],")"]})]}),(0,z.jsx)(Aa,{node:u,onUpdate:p}),(0,z.jsx)("h3",{children:"Configuration"}),(0,z.jsxs)("table",{className:Cn.editorForm,children:[(0,z.jsx)("thead",{children:(0,z.jsxs)("tr",{children:[(0,z.jsx)("th",{children:"Property"}),(0,z.jsx)("th",{children:"Value"}),(0,z.jsx)("th",{})]})}),(0,z.jsx)("tbody",{children:b.map((function(e,n){var t,r;return(0,z.jsxs)("tr",{children:[(0,z.jsx)("td",{className:Cn.propertyName,children:e in h?(0,z.jsx)(wn,{property:e,schema:h[e]}):(0,z.jsx)("input",{value:e,onChange:(r=e,function(e){p(ja(ja({},u),{},{properties:Object.keys(u.properties).reduce((function(n,t){var o=u.properties[t];return t===r&&(t=e.target.value),n[t]=o,n}),{})}))})})}),(0,z.jsx)("td",{className:Cn.propertyValue,children:(0,z.jsx)(Hi,{name:e,prop:u.properties[e],schema:h[e],onUpdate:d(e)})}),(0,z.jsx)("td",{children:u.properties[e]&&!(null!==(t=h[e])&&void 0!==t&&t.required)&&(0,z.jsx)(J,{name:"trash-can",className:Cn.action,onClick:function(){return function(e){p(ja(ja({},u),{},{properties:nn()(u.properties,e)}))}(e)}})})]},n)}))})]}),(0,z.jsxs)("div",{style:{textAlign:"center"},children:[(0,z.jsx)($e,{onClick:y,children:"Okay"}),(0,z.jsx)($e,{onClick:c,secondary:!0,children:"Cancel"})]})]})})})},ka=t(87617),Oa={};Oa.styleTagTransform=m(),Oa.setAttributes=d(),Oa.insert=p().bind(null,"head"),Oa.domAPI=s(),Oa.insertStyleElement=h(),c()(ka.Z,Oa);var Sa=ka.Z&&ka.Z.locals?ka.Z.locals:void 0;function Ba(e){return Ba="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Ba(e)}var Pa=["href","children","external","showExternal"];function Ia(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Ta(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Ia(Object(t),!0).forEach((function(n){Da(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Ia(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Da(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Ba(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Ba(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Ba(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function La(e){var n=e.href,t=e.children,r=e.external,o=e.showExternal,i=function(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}(e,Pa),a=Object.assign({href:n},i,r&&{rel:"noreferrer",target:"_blank"});return(0,z.jsxs)("a",Ta(Ta({},a),{},{children:[t,r&&o&&(0,z.jsx)(J,{className:Sa.icon,name:"arrow-up-right-from-square"})]}))}La.propTypes={href:G().string.isRequired,children:G().oneOfType([G().arrayOf(G().node),G().node]).isRequired,external:G().bool.isRequired,showExternal:G().bool},La.defaultProps={external:!1,showExternal:!0};var Ra=La;function Na(e){var n=e.onDismiss,t=(0,z.jsx)(Ra,{external:!0,href:"https://github.com/nickcoutsos/keymap-editor/issues",children:"Keymap Editor Issues"});return(0,z.jsx)(gn,{onDismiss:n,children:(0,z.jsxs)(fn,{onDismiss:n,style:{maxHeight:"80vh",overflow:"scroll"},children:[(0,z.jsx)("h2",{children:"Behavior Editing Beta Test"}),(0,z.jsx)("p",{children:"Welcome to the behavior editing beta!"}),(0,z.jsx)("p",{children:"This feature has been a long time coming, and while it should enable a lot of advanced ZMK features through the app it is still a work in progress. Some features are still missing so the use experience is a little rough, and there may be errors as well. Some familiarity with ZMK behavior functionality is expected."}),(0,z.jsxs)("p",{children:["I've been using it for a while and it seems to be in a pretty workable state, but I can't catch everything, so it would mean a lot to me for you to share any feedback or issues on GitHub: ",t,"."]})]})})}function _a(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var Ma=["zmk,behavior-hold-tap","zmk,behavior-mod-morph","zmk,behavior-tap-dance","zmk,behavior-sticky-key","zmk,behavior-caps-word"];function Ya(e){var n,t,o=e.onUpdate,i=e.onCancel,a=(n=(0,r.useState)(""),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||function(e,n){if(e){if("string"==typeof e)return _a(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?_a(e,n):void 0}}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),c=a[0],l=a[1];return(0,z.jsx)(gn,{children:(0,z.jsxs)(fn,{dismissText:null,children:[(0,z.jsx)("h3",{children:"Add new behavior"}),(0,z.jsxs)("label",{children:["Type ",(0,z.jsxs)("select",{required:!0,value:c,onChange:function(e){return l(e.target.value)},children:[(0,z.jsx)("option",{value:"",disabled:!0,children:"Select a behavior type"}),Ma.map((function(e,n){return(0,z.jsx)("option",{value:e,children:e},n)}))]})]}),(0,z.jsxs)("div",{style:{textAlign:"center",margin:"10px"},children:[(0,z.jsx)($e,{disabled:!c,onClick:function(){return o(c)},children:"Create"}),(0,z.jsx)($e,{onClick:i,secondary:!0,children:"Cancel"})]})]})})}Ya.propTypes={onUpdate:G().func.isRequired,onCancel:G().func.isRequired};var Ka=Ya,qa=t(98913),Za=t.n(qa),Ua=t(95130);function Ga(e){return Ga="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Ga(e)}function za(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Wa(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?za(Object(t),!0).forEach((function(n){Fa(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):za(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Fa(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Ga(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Ga(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Ga(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Xa(e,n){var t=n.name,r=n.labels,o=n.label,i=Ua.behaviorSchemas[e];return{name:t,labels:r,properties:Wa({compatible:{raw:'"'.concat(e,'"'),parsed:e},label:{raw:'"'.concat(o,'"'),parsed:o}},Object.keys(i.properties).reduce((function(e,n){var t=i.properties[n];return function(e){return["phandle","phandles","phandle-array"].includes(e.type)}(t)&&t.length?e[n]={parsed:Za()(t.length,(function(){return"&none"}))}:"const"in t&&(e[n]={parsed:t.const,raw:"<".concat(t.const.toString(),">")}),e}),{}))}}var Va=t(97168),Qa=t(62412),Ha=function(e){return e.keyboard.keymap.behaviors},Ja=(0,Va.oM)({name:"behaviors",initialState:[],reducers:{addBehavior:function(e,n){e.push(n.payload.behavior)},updateBehavior:function(e,n){e[n.payload.behaviorIndex]=nn()(n.payload.behavior,"params"),(0,Qa.resolveBehaviorParams)(e)},deleteBehavior:function(e,n){e.splice(n.payload.behaviorIndex,1)}}}),$a=Ja.actions,ec=$a.addBehavior,nc=$a.updateBehavior,tc=$a.deleteBehavior,rc=Ja.reducer;function oc(e){return oc="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},oc(e)}function ic(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function ac(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?ic(Object(t),!0).forEach((function(n){cc(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ic(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function cc(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==oc(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==oc(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===oc(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function lc(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(e,n)||function(e,n){if(e){if("string"==typeof e)return sc(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?sc(e,n):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function sc(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var uc=function(){var e=(0,i.v9)((function(e){return e.experimentalSettings})),n=lc((0,r.useState)(null),2),t=n[0],o=n[1],a=lc((0,r.useState)(!1),2),c=a[0],l=a[1],s=lc((0,r.useState)(!1),2),u=s[0],p=s[1],f=(0,i.v9)(Ha),d=(0,i.I0)(),y=(0,r.useCallback)((function(){l(!0)}),[l]),h=(0,r.useCallback)((function(e){l(!1),d(ec({behavior:Xa(e,{name:"new_behavior",labels:["new_behavior"],label:"NEW_BEHAVIOR"})})),setTimeout((function(){return o(f.length)}))}),[f,d,l,o]),b=(0,r.useCallback)((function(e){o(e)}),[o]),m=(0,r.useCallback)((function(e){d(tc({behaviorIndex:e}))}),[d]),A=(0,r.useCallback)((function(e){e.stopPropagation(),p(!0)}),[p]),v=(0,r.useCallback)((function(){p(!1)}),[p]),g=(0,r.useCallback)((function(n){d({type:"SETTINGS_UPDATE",settings:ac(ac({},e),{},{enableBehaviorEditing:n})})}),[e,d]);return(0,z.jsxs)("div",{className:Cn.main,children:[c&&(0,z.jsx)(Ka,{onUpdate:h,onCancel:function(){return l(!1)}}),null!==t&&(0,z.jsx)(Ea,{node:f[t],onCancel:function(){return o(null)},onUpdate:function(e){o(null),d(nc({behaviorIndex:t,behavior:e}))}}),u&&(0,z.jsx)(Na,{onDismiss:v}),(0,z.jsxs)("div",{className:Cn.panel,children:[(0,z.jsxs)("label",{children:["Enable Beta",(0,z.jsx)("input",{type:"checkbox",checked:e.enableBehaviorEditing,onChange:function(e){return g(e.target.checked)}})]}),(0,z.jsxs)($e,{onClick:A,style:{backgroundColor:"orange"},children:[(0,z.jsx)(J,{name:"warning"})," Details"]}),(0,z.jsx)("h3",{children:"Custom Behaviors"}),(0,z.jsxs)("table",{style:{width:"100%"},children:[(0,z.jsx)("thead",{children:(0,z.jsxs)("tr",{children:[(0,z.jsx)("th",{children:"Binding"}),(0,z.jsx)("th",{children:"Compatible"}),(0,z.jsx)("th",{children:"Actions"})]})}),(0,z.jsx)("tbody",{children:f.map((function(n,t){return(0,z.jsxs)("tr",{children:[(0,z.jsx)("td",{children:(0,z.jsxs)("code",{children:["&",n.labels[0]]})}),(0,z.jsx)("td",{children:n.properties.compatible.raw}),(0,z.jsx)("td",{children:e.enableBehaviorEditing&&(0,z.jsxs)(z.Fragment,{children:[(0,z.jsx)(J,{className:Cn.action,onClick:function(){return b(t)},name:"wrench"}),(0,z.jsx)(J,{className:Cn.action,onClick:function(){return m(t)},name:"trash-can"})]})})]},t)}))})]}),(0,z.jsx)($e,{onClick:y,children:"Add New Behavior"})]})]})},pc=t(78207),fc={};fc.styleTagTransform=m(),fc.setAttributes=d(),fc.insert=p().bind(null,"head"),fc.domAPI=s(),fc.insertStyleElement=h(),c()(pc.Z,fc);var dc=pc.Z&&pc.Z.locals?pc.Z.locals:void 0;function yc(){return(0,z.jsx)("p",{className:dc.floatingMessage,children:"Click on a key to add it to the combo"})}function hc(e){var n=e.keyPositions,t=e.onUpdate;return(0,z.jsxs)("div",{className:dc.comboInputMap,children:[(0,z.jsx)(er,{value:n,onUpdate:t}),n.length<2&&(0,z.jsx)(yc,{})]})}hc.propTypes={onUpdate:G().func.isRequired,keyPositions:G().arrayOf(G().number).isRequired};var bc=hc,mc=t(86015),Ac={};Ac.styleTagTransform=m(),Ac.setAttributes=d(),Ac.insert=p().bind(null,"head"),Ac.domAPI=s(),Ac.insertStyleElement=h(),c()(mc.Z,Ac);var vc=mc.Z&&mc.Z.locals?mc.Z.locals:void 0;function gc(e){return function(n){n.stopPropagation(),e()}}function xc(e){return function(n){e[n.key]&&e[n.key]()}}function jc(e){return jc="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},jc(e)}function Cc(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function wc(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Cc(Object(t),!0).forEach((function(n){Ec(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Cc(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Ec(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==jc(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==jc(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===jc(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function kc(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function Oc(e){var n,t,o=e.value,i=e.validate,a=e.required,c=e.render,l=e.onUpdate,s=(0,r.useRef)(),u=(n=(0,r.useState)({value:o,editing:!1,attemptedEmpty:!1}),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||function(e,n){if(e){if("string"==typeof e)return kc(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?kc(e,n):void 0}}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),p=u[0],f=u[1],d=p.attemptedEmpty?"cannot be empty":i&&i(p.value),y=(0,r.useCallback)((function(e){e&&(e.focus(),e.select())}),[]),h=(0,r.useCallback)((function(){f((function(e){return wc(wc({},e),{},{editing:!1})}))}),[f]),b=(0,r.useCallback)((function(e){s.current&&!s.current.contains(e.target)&&h()}),[s,h]);return(0,r.useEffect)((function(){return document.addEventListener("click",b),function(){return document.removeEventListener("click",b)}}),[b]),p.editing?(0,z.jsxs)("span",{className:vc.container,ref:s,children:[(0,z.jsx)("input",{ref:y,value:p.value,onChange:function(e){return f(wc(wc({},p),{},{attemptedEmpty:!1,value:e.target.value}))},onKeyDown:xc({Enter:function(){p.editing&&(""===p.value&&a?f(wc(wc({},p),{},{attemptedEmpty:!0})):(d||l(p.value),f(wc(wc({},p),{},{value:p.value,editing:!1}))))},Escape:h})}),d&&(0,z.jsx)("span",{className:vc.error,children:d})]}):c((0,z.jsxs)(z.Fragment,{children:[(0,z.jsx)("span",{children:o}),(0,z.jsx)(J,{name:"pencil",className:vc.edit,onClick:gc((function(){return f(wc(wc({},p),{},{editing:!0}))}))})]}))}Oc.propTypes={value:G().string.isRequired,validate:G().func,required:G().bool.isRequired,render:G().func.isRequired,onUpdate:G().func.isRequired},Oc.defaultProps={required:!0};var Sc=Oc;function Bc(e,n){var t="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!t){if(Array.isArray(e)||(t=function(e,n){if(e){if("string"==typeof e)return Pc(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Pc(e,n):void 0}}(e))||n&&e&&"number"==typeof e.length){t&&(e=t);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,c=!1;return{s:function(){t=t.call(e)},n:function(){var e=t.next();return a=e.done,e},e:function(e){c=!0,i=e},f:function(){try{a||null==t.return||t.return()}finally{if(c)throw i}}}}function Pc(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var Ic="&trans",Tc=function(e){return e.keyboard.keymap.layers},Dc=(0,Va.oM)({name:"layers",initialState:[],reducers:{createLayer:function(e,n){e.push({name:"Layer #".concat(e.length),bindings:Za()(n.payload.bindingCount,(function(){return function(){return{value:arguments.length>0&&void 0!==arguments[0]?arguments[0]:Ic,params:[]}}()}))})},updateLayerMetadata:function(e,n){var t=n.payload.layerIndex;Object.assign(e[t],_n()(n.payload,["name","label"]))},renameLayer:function(e,n){e[n.payload.index].name=n.payload.name},deleteLayer:function(e,n){e.splice(n.payload.index,1)},updateKeyBinding:function(e,n){e[n.payload.layerIndex].bindings[n.payload.bindIndex]=n.payload.binding},updateSensorBindings:function(e,n){e[n.payload.layerIndex].sensorBindings[n.payload.sensorIndex]=n.payload.bindings},rebindTransparentToKeyPress:function(e,n){var t,r=Bc(e[n.payload.layerIndex].bindings);try{for(r.s();!(t=r.n()).done;){var o=t.value;"&trans"===o.value&&(o.value="&kp",o.params=[])}}catch(e){r.e(e)}finally{r.f()}},rebindTransparentToNone:function(e,n){var t,r=Bc(e[n.payload.layerIndex].bindings);try{for(r.s();!(t=r.n()).done;){var o=t.value;"&trans"===o.value&&(o.value="&none",o.params=[])}}catch(e){r.e(e)}finally{r.f()}},rebindNoneToKeypress:function(e,n){var t,r=Bc(e[n.payload.layerIndex].bindings);try{for(r.s();!(t=r.n()).done;){var o=t.value;"&none"===o.value&&(o.value="&kp",o.params=[])}}catch(e){r.e(e)}finally{r.f()}},rebindNoneToTransparent:function(e,n){var t,r=Bc(e[n.payload.layerIndex].bindings);try{for(r.s();!(t=r.n()).done;){var o=t.value;"&none"===o.value&&(o.value="&trans",o.params=[])}}catch(e){r.e(e)}finally{r.f()}},rebindEmptyKeypressToTransparent:function(e,n){var t,r=Bc(e[n.payload.layerIndex].bindings);try{for(r.s();!(t=r.n()).done;){var o,i=t.value;"&kp"!==i.value||null!==(o=i.params[0])&&void 0!==o&&o.value||(i.value="&trans",i.params=[])}}catch(e){r.e(e)}finally{r.f()}},rebindEmptyKeypressToNone:function(e,n){var t,r=Bc(e[n.payload.layerIndex].bindings);try{for(r.s();!(t=r.n()).done;){var o,i=t.value;"&kp"!==i.value||null!==(o=i.params[0])&&void 0!==o&&o.value||(i.value="&none",i.params=[])}}catch(e){r.e(e)}finally{r.f()}}}}),Lc=Dc.actions,Rc=Lc.createLayer,Nc=Lc.renameLayer,_c=Lc.deleteLayer,Mc=Lc.updateLayerMetadata,Yc=Lc.updateKeyBinding,Kc=Lc.updateSensorBindings,qc=Lc.rebindTransparentToKeyPress,Zc=Lc.rebindTransparentToNone,Uc=Lc.rebindNoneToKeypress,Gc=Lc.rebindNoneToTransparent,zc=Lc.rebindEmptyKeypressToTransparent,Wc=Lc.rebindEmptyKeypressToNone,Fc=Dc.reducer;function Xc(e){return Xc="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Xc(e)}function Vc(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Qc(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Vc(Object(t),!0).forEach((function(n){Hc(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Vc(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Hc(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Xc(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Xc(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Xc(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Jc(e,n){if(e){if("string"==typeof e)return $c(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?$c(e,n):void 0}}function $c(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function el(e){var n=e.selected,t=e.options,r=e.onUpdate;return(0,z.jsx)("ul",{className:dc.layerList,children:t.map((function(e,t){return(0,z.jsx)("li",{"data-selected":n.includes(t),onClick:function(){return e=t,void r(n.includes(e)?n.filter((function(n){return n!==e})):[].concat(function(e){if(Array.isArray(e))return $c(e)}(o=n)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(o)||Jc(o)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),[e]));var e,o},children:e})}))})}var nl=function(e){var n,t,o=e.combo,a=e.onUpdate,c=(0,i.v9)(Tc),l=(n=(0,r.useState)(_n()(o,["timeoutMs","slowRelease","layers"])),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||Jc(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),s=l[0],u=l[1],p=c.map((function(e){return e.name}));return(0,z.jsx)(gn,{children:(0,z.jsxs)(fn,{onDismiss:function(){a(s)},children:[(0,z.jsxs)("h2",{children:["Customize [",(0,z.jsx)("code",{children:o.identifier}),"]"]}),(0,z.jsxs)("div",{children:[(0,z.jsxs)("div",{className:dc.field,children:[(0,z.jsx)("label",{htmlFor:"customize-combo-timeout",children:"Timeout (ms)"}),(0,z.jsx)("input",{id:"customize-combo-timeout",type:"number",placeholder:"Default",value:s.timeoutMs,onChange:function(e){return u((function(n){return Qc(Qc({},n),{},{timeoutMs:""===e.target.value?void 0:Number(e.target.value)})}))}})]}),(0,z.jsxs)("div",{className:dc.field,children:[(0,z.jsx)("label",{htmlFor:"customize-combo-slow-release",children:"Slow Release"}),(0,z.jsx)("input",{id:"customize-combo-slow-release",type:"checkbox",checked:s.slowRelease,onChange:function(e){return u((function(n){return Qc(Qc({},n),{},{slowRelease:e.target.checked})}))}})]}),(0,z.jsxs)("div",{className:dc.field,children:[(0,z.jsx)("label",{children:"Layers"}),(0,z.jsx)(el,{selected:s.layers||[],options:p,onUpdate:function(e){return u((function(n){return Qc(Qc({},n),{},{layers:e})}))}})]})]})]})})},tl=function(e){return e.keyboard.keymap.combos},rl=(0,Va.oM)({name:"combos",initialState:[],reducers:{updateComboBinding:function(e,n){e[n.payload.comboIndex].bindings=n.payload.bindings},updateComboKeypositions:function(e,n){e[n.payload.comboIndex].keyPositions=n.payload.keyPositions},createCombo:function(e){e.push({identifier:"new_combo",keyPositions:[],bindings:[{value:"&trans",params:[]}]})},renameCombo:function(e,n){e[n.payload.index].identifier=n.payload.name},deleteCombo:function(e,n){e.splice(n.payload.index,1)},customizeCombo:function(e,n){Object.assign(e[n.payload.index],n.payload.config)}}}),ol=rl.actions,il=ol.updateComboBinding,al=ol.updateComboKeypositions,cl=ol.createCombo,ll=ol.renameCombo,sl=ol.deleteCombo,ul=ol.customizeCombo,pl=rl.reducer;function fl(e){return fl="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},fl(e)}function dl(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function yl(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?dl(Object(t),!0).forEach((function(n){hl(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):dl(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function hl(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==fl(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==fl(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===fl(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function bl(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function ml(e){var n,t,o=(0,r.useContext)(j).identifiers,a=(0,i.v9)(tl),c=(0,i.I0)(),l=(n=(0,r.useState)(null),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||function(e,n){if(e){if("string"==typeof e)return bl(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?bl(e,n):void 0}}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),s=l[0],u=l[1];function p(e){return $i(e)||(o.includes(e)?'Cannot use existing identifier "'.concat(e,'"'):null)}return(0,z.jsxs)("div",{className:dc.main,children:[null!==s&&(0,z.jsx)(nl,{combo:a[s],onUpdate:function(e){return function(e,n){u(null),c(ul({index:e,config:n}))}(s,e)}}),(0,z.jsxs)("div",{className:dc.sidebar,children:[(0,z.jsxs)(Ra,{external:!0,href:"https://zmk.dev/docs/features/combos",children:[(0,z.jsx)(J,{name:"book"})," ZMK Docs: Combos"]}),(0,z.jsx)($e,{onClick:function(){c(cl())},children:"Add New Combo"})]}),(0,z.jsx)("div",{className:dc.comboPanel,children:a.map((function(e,n){return(0,z.jsxs)("div",{className:dc.combo,children:[(0,z.jsxs)("div",{className:dc.heading,children:[(0,z.jsx)(Sc,{value:e.identifier,validate:p,render:function(e){return(0,z.jsx)("h5",{children:(0,z.jsx)("code",{children:e})})},onUpdate:function(e){return function(e,n){c(ll({index:e,name:n}))}(n,e)}}),(0,z.jsxs)("div",{className:dc.actions,children:[(0,z.jsx)(J,{name:"wrench",className:"".concat(dc.action),onClick:function(){return u(n)}}),(0,z.jsx)(J,{name:"trash-can",className:"".concat(dc.action," ").concat(dc.remove),onClick:function(){c(sl({index:n}))}})]})]}),(0,z.jsxs)("div",{className:dc.detail,children:[(0,z.jsx)("div",{className:dc.comboOutput,children:(0,z.jsx)(Yi,yl(yl({},e.bindings[0]),{},{onUpdate:function(e){!function(e,n){c(il({comboIndex:e,bindings:[n]}))}(n,e)}}))}),(0,z.jsx)(bc,{keyPositions:e.keyPositions,onUpdate:function(e){return function(e,n){c(al({comboIndex:e,keyPositions:n}))}(n,e)}})]})]},n)}))})]})}ml.propTypes={};var Al=ml,vl=t(50335),gl={};gl.styleTagTransform=m(),gl.setAttributes=d(),gl.insert=p().bind(null,"head"),gl.domAPI=s(),gl.insertStyleElement=h(),c()(vl.Z,gl);var xl=vl.Z&&vl.Z.locals?vl.Z.locals:void 0;function jl(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(e,n)||function(e,n){if(e){if("string"==typeof e)return Cl(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Cl(e,n):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Cl(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function wl(e){var n=e.activeLayer,t=e.onSelect,o=(0,r.useRef)(null),a=(0,i.I0)(),c=(0,r.useContext)(Kt).bindingCount,l=(0,i.v9)(Tc),s=jl((0,r.useState)(!1),2),u=s[0],p=s[1],f=jl((0,r.useState)(""),2),d=f[0],y=f[1],h=(0,r.useCallback)((function(e){if(e===n)return y(l[n].name),void p(!0);p(!1),t(e)}),[l,n,y,p,t]),b=(0,r.useCallback)((function(){return a(Rc({bindingCount:c}))}),[a,c]),m=(0,r.useMemo)((function(){return function(e,n){window.confirm("Really delete layer: ".concat(n,"?"))&&a(_c({index:e}))}}),[a]),A=(0,r.useCallback)((function(){if(u){var e=n,t=d;y(""),p(!1),a(Nc({index:e,name:t}))}}),[d,u,n,y,p,a]),v=(0,r.useCallback)((function(){u&&(y(""),p(!1))}),[u,y,p]),g=(0,r.useMemo)((function(){return function(e){o.current&&!o.current.contains(e.target)&&v()}}),[o,v]);(0,r.useEffect)((function(){return document.addEventListener("click",g),function(){return document.removeEventListener("click",g)}}),[g]);var x=(0,r.useCallback)((function(e){e&&(e.focus(),e.select())}),[]);return(0,z.jsx)("div",{className:xl.layerSelector,"data-renaming":u,ref:o,children:(0,z.jsxs)("ul",{children:[l.map((function(e,t){var r=e.name;return(0,z.jsxs)("li",{className:n===t?xl.active:"","data-layer":t,onClick:gc((function(){return h(t)})),children:[(0,z.jsx)("span",{className:xl.index,children:t}),n===t&&u?(0,z.jsx)("input",{ref:x,className:xl.name,onChange:function(e){return y(e.target.value)},onKeyDown:xc({Enter:A,Escape:v}),value:n===t&&u?d:r}):(0,z.jsxs)("span",{className:xl.name,children:[r,(0,z.jsx)(J,{name:"times-circle",className:xl.delete,onClick:gc((function(){return m(t,r)}))})]})]},"layer-".concat(t))})),(0,z.jsxs)("li",{onClick:b,children:[(0,z.jsx)(J,{className:xl.index,name:"plus"}),(0,z.jsx)("span",{className:xl.name,children:"Add Layer"})]})]})})}wl.propTypes={activeLayer:G().number.isRequired,onSelect:G().func.isRequired};var El=wl;function kl(e){var n=e.direction;return(0,z.jsx)("svg",{xmlns:"http://www.w3.org/2000/svg",width:"65px",height:"65px",viewBox:"0 0 65 65",style:{position:"absolute",top:"-10px",stroke:"var(--key-color-base)",strokeWidth:2,fill:"none",display:"block",width:"65px",height:"65px",pointerEvents:"none"},children:(0,z.jsx)("path",{style:{transform:"scaleX(".concat("cw"===n?-1:1,") rotate(-45deg)"),transformOrigin:"center center"},d:"M 63 31 A 30 30 45 0 0 32.5 2 M 37 -2 L 32.5 2 L 37 6"})})}function Ol(e){var n=e.context,t=e.direction,r=e.params,o=e.onUpdate;return(0,z.jsxs)(At,{themeClass:ft.encoder,children:[(0,z.jsx)(kl,{direction:t}),(0,z.jsx)(Di,{hideBehaviour:!0,context:n,value:"&kp",params:r,onUpdate:o})]})}Ol.propTypes={params:G().arrayOf(Qr),onUpdate:G().func.isRequired};var Sl=Ol;function Bl(e){return Bl="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Bl(e)}function Pl(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function Il(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Tl(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Il(Object(t),!0).forEach((function(n){Dl(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Il(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Dl(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Bl(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Bl(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Bl(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}var Ll=function(e){var n=e.layer,t=e.sensors,r=(0,i.I0)(),o=(0,i.v9)(Tc)[n].sensorBindings,a=void 0===o?[]:o;function c(e,t,o){var i=o.params[0],c=a[e]||{value:"&inc_dec_kp",params:[{value:"",params:[]},{value:"",params:[]}]};r(Kc({layerIndex:n,sensorIndex:e,bindings:Tl(Tl({},c),{},{params:ii(c.params,t,i)})}))}return(0,z.jsxs)("div",{style:{margin:"0 0 30px"},children:[(0,z.jsx)("h3",{children:"Sensor bindings"}),(0,z.jsx)("div",{style:{display:"flex",flexDirection:"row",gap:"25px"},children:t.map((function(e,n){var t,r=e.label||e.identifier,o=function(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(e,n)||function(e,n){if(e){if("string"==typeof e)return Pl(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Pl(e,n):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}((null===(t=a[n])||void 0===t?void 0:t.params)||[],2),i=o[0],l=o[1];return(0,z.jsxs)("div",{style:{display:"block"},children:[(0,z.jsx)("label",{style:{fontVariant:"small-caps",fontSize:"90%"},children:(0,z.jsx)("code",{children:r})}),(0,z.jsxs)("div",{style:{display:"flex",flexDirection:"row",gap:"5px",marginTop:"20px"},children:[(0,z.jsx)(Sl,{direction:"ccw",params:[l],onUpdate:function(e){return c(n,1,e)}}),(0,z.jsx)(Sl,{direction:"cw",params:[i],onUpdate:function(e){return c(n,0,e)}})]})]},n)}))})]})},Rl=t(56634),Nl={};Nl.styleTagTransform=m(),Nl.setAttributes=d(),Nl.insert=p().bind(null,"head"),Nl.domAPI=s(),Nl.insertStyleElement=h(),c()(Rl.Z,Nl);var _l=Rl.Z&&Rl.Z.locals?Rl.Z.locals:void 0;function Ml(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function Yl(e){var n,t,o=e.actions,i=(n=(0,r.useState)(!1),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||function(e,n){if(e){if("string"==typeof e)return Ml(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Ml(e,n):void 0}}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=i[0],c=i[1],l=(0,r.useRef)(),s=(0,r.useCallback)((function(e){l.current&&!l.current.contains(e.target)&&c(!1)}),[l,c]);return(0,r.useEffect)((function(){return document.body.addEventListener("click",s),function(){return document.body.removeEventListener("click",s)}}),[s]),(0,z.jsxs)("div",{ref:l,className:[_l.menu,a&&_l.open].join(" "),children:[(0,z.jsx)("p",{onClick:function(){return c(!a)},children:(0,z.jsx)(J,{name:"ellipsis"})}),(0,z.jsx)("ul",{children:o.map((function(e,n){return(0,z.jsx)("li",{onClick:function(){return function(e){c(!1),e()}(e.callback)},children:e.content},n)}))})]})}function Kl(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function ql(e){var n,t=e.activeLayer,o=e.additionalActions,a=void 0===o?[]:o,c=(0,i.I0)(),l=(0,r.useMemo)((function(){return{transparentToKeypress:function(){return c(qc({layerIndex:t}))},transparentToNone:function(){return c(Zc({layerIndex:t}))},noneToKeypress:function(){return c(Uc({layerIndex:t}))},noneToTransparent:function(){return c(Gc({layerIndex:t}))},emptyKeypressToTransparent:function(){return c(zc({layerIndex:t}))},emptyKeypressToNone:function(){return c(Wc({layerIndex:t}))}}}),[c,t]);return(0,z.jsx)(Yl,{actions:[].concat((n=a,function(e){if(Array.isArray(e))return Kl(e)}(n)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(n)||function(e,n){if(e){if("string"==typeof e)return Kl(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Kl(e,n):void 0}}(n)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),[{callback:l.transparentToKeypress,content:(0,z.jsxs)(z.Fragment,{children:["Convert ",(0,z.jsx)("code",{children:"&trans"})," to ",(0,z.jsx)("code",{children:"&kp"})]})},{callback:l.transparentToNone,content:(0,z.jsxs)(z.Fragment,{children:["Convert ",(0,z.jsx)("code",{children:"&trans"})," to ",(0,z.jsx)("code",{children:"&none"})]})},{callback:l.noneToKeypress,content:(0,z.jsxs)(z.Fragment,{children:["Convert ",(0,z.jsx)("code",{children:"&none"})," to ",(0,z.jsx)("code",{children:"&kp"})]})},{callback:l.noneToTransparent,content:(0,z.jsxs)(z.Fragment,{children:["Convert ",(0,z.jsx)("code",{children:"&none"})," to ",(0,z.jsx)("code",{children:"&trans"})]})},{callback:l.emptyKeypressToTransparent,content:(0,z.jsxs)(z.Fragment,{children:["Convert ",(0,z.jsx)("code",{children:"&kp ⦸"})," to ",(0,z.jsx)("code",{children:"&trans"})]})},{callback:l.emptyKeypressToNone,content:(0,z.jsxs)(z.Fragment,{children:["Convert ",(0,z.jsx)("code",{children:"&kp ⦸"})," to ",(0,z.jsx)("code",{children:"&none"})]})}])})}Yl.propTypes={actions:G().arrayOf(G().shape({callback:G().func.isRequired,content:G().oneOfType([G().node,G().string]).isRequired})).isRequired},ql.propTypes={activeLayer:G().number.isRequired,additionalActions:G().arrayOf(G().shape({callback:G().func.isRequired,content:G().oneOfType([G().node,G().string]).isRequired}))};var Zl=t(59500),Ul={};Ul.styleTagTransform=m(),Ul.setAttributes=d(),Ul.insert=p().bind(null,"head"),Ul.domAPI=s(),Ul.insertStyleElement=h(),c()(Zl.Z,Ul);var Gl=Zl.Z&&Zl.Z.locals?Zl.Z.locals:void 0;function zl(e){return zl="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},zl(e)}function Wl(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Fl(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Wl(Object(t),!0).forEach((function(n){Xl(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Wl(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Xl(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==zl(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==zl(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===zl(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Vl(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var Ql=function(e){var n,t,o=e.activeLayer,a=e.onClose,c=(0,i.I0)(),l=(0,i.v9)(Tc)[o],s=(n=(0,r.useState)(_n()(l,["name","label"])),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||function(e,n){if(e){if("string"==typeof e)return Vl(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Vl(e,n):void 0}}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),u=s[0],p=s[1];return(0,z.jsx)(gn,{onDismiss:a,children:(0,z.jsxs)(fn,{dismissText:"",children:[(0,z.jsxs)("h2",{children:["Customize Layer ",(0,z.jsx)("code",{children:l.name})]}),(0,z.jsxs)("div",{children:[(0,z.jsxs)("div",{className:Gl.field,children:[(0,z.jsx)("label",{htmlFor:"customize-layer-name",children:"Name"}),(0,z.jsx)(sa,{id:"customize-layer-name",placeholder:"Default",value:u.name,validator:Ji,onChange:function(e){return p((function(n){return Fl(Fl({},n),{},{name:e.target.value})}))}})]}),(0,z.jsxs)("div",{className:Gl.field,children:[(0,z.jsx)("label",{htmlFor:"customize-layer-label",children:"Label"}),(0,z.jsx)("input",{id:"customize-layer-label",placeholder:"Default",value:u.label,onChange:function(e){return p((function(n){return Fl(Fl({},n),{},{label:e.target.value})}))}})]})]}),(0,z.jsxs)("div",{style:{textAlign:"center",gap:"5px"},children:[(0,z.jsx)($e,{onClick:function(){c(Mc(Fl({layerIndex:o},u))),a()},children:"OK"}),(0,z.jsx)($e,{onClick:a,secondary:!0,children:"Cancel"})]})]})})};function Hl(){var e=(0,i.I0)(),n=(0,r.useContext)(Kt).bindingCount;return(0,z.jsxs)("div",{style:{textAlign:"center"},children:[(0,z.jsx)("h3",{children:"No keymap layers defined"}),(0,z.jsx)($e,{onClick:function(){return e(Rc({bindingCount:n}))},children:"Add layer"})]})}function Jl(e){var n=e.layout,t=e.activeLayer,o=(0,i.I0)(),a=(0,i.v9)(Tc)[t],c=(0,r.useCallback)((function(e,n){o(Yc({layerIndex:t,bindIndex:e,binding:n}))}),[o,t]);return(0,z.jsx)(ct,{layout:n,bindings:a.bindings,renderKey:function(e){var n,t,r=e.index,o=e.keyLayout;return a.bindings[r]&&(0,z.jsx)(Yi,{label:o.label,value:null===(n=a.bindings[r])||void 0===n?void 0:n.value,params:null===(t=a.bindings[r])||void 0===t?void 0:t.params,onUpdate:function(e){return c(r,e)}})}})}var $l=t(62029);function es(e,n){if(e){if("string"==typeof e)return ns(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?ns(e,n):void 0}}function ns(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var ts={keysHeld:[],keysHeldBeforeLastRelease:[]};function rs(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(e,n)||function(e,n){if(e){if("string"==typeof e)return os(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?os(e,n):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function os(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var is={Alt:"ALT",Control:"CTRL",Shift:"SHFT",Meta:"GUI",ArrowUp:"UP",ArrowDown:"DOWN",ArrowLeft:"LEFT",ArrowRight:"RIGHT",Escape:"ESC",Tab:"TAB",Enter:"RET",Home:"HOME",End:"END",PageDown:"PG_DN",PageUp:"PG_UP",Backspace:"BSPC",Delete:"DEL"};function as(e,n){var t=arguments.length>2&&void 0!==arguments[2]&&arguments[2],o=(0,i.I0)(),a=rs((0,r.useState)(t),2),c=a[0],l=a[1],s=rs((0,r.useState)(0),2),u=s[0],p=s[1],f=(0,r.useCallback)((function(){u===n.length-1?(p(0),l(!1)):p(u+1)}),[u,p,n.length,l]),d=(0,r.useCallback)((function(n){var t=function(e){var n=function(e){return(0,ye.compact)([e.altKey&&"LA",e.ctrlKey&&"LC",e.metaKey&&"LG",e.shiftKey&&"LS"])}(e),t=(0,$l.mapCharacter)(e.key.toLowerCase())||function(e){var n=is[e.key],t=function(e){switch(e.location){case 1:return"L";case 2:return"R";default:return""}}(e);return n?{value:"&kp",params:[{value:t+n,params:[]}]}:null}(e);if(t)return{value:t.value,params:n.reduce((function(e,n){return[{value:n,params:e}]}),t.params)}}(n);t&&(o(Yc({layerIndex:e,bindIndex:u,binding:t})),f())}),[e,u,f,o]);!function(e,n){var t,o,i=(t=(0,r.useReducer)((function(e,n){switch(n.type){case"KEY_DOWN":return function(e,n){return{keysHeld:[].concat((t=e.keysHeld,function(e){if(Array.isArray(e))return ns(e)}(t)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(t)||es(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),[n.event.key]),keysHeldBeforeLastRelease:[]};var t}(e,n);case"KEY_UP":return function(e,n){return{keysHeld:[],keysHeldBeforeLastRelease:e.keysHeld.filter((function(e){return e!==n.event.key}))}}(e,n);case"RESET":return ts;default:return e}}),ts),o=2,function(e){if(Array.isArray(e))return e}(t)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(t,o)||es(t,o)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=i[0],c=i[1],l=(0,r.useCallback)((function(e){e.repeat||(e.preventDefault(),c({type:"KEY_DOWN",event:e}))}),[c]),s=(0,r.useCallback)((function(e){a.keysHeldBeforeLastRelease.includes(e.key)||(e.preventDefault(),n(e),c({type:"KEY_UP",event:e}))}),[a.keysHeldBeforeLastRelease,n,c]);(0,r.useEffect)((function(){if(e)return document.body.addEventListener("keydown",l),document.body.addEventListener("keyup",s),function(){document.body.removeEventListener("keydown",l),document.body.removeEventListener("keyup",s)}}),[e,l,s])}(c,d);var y=(0,r.useCallback)((function(){l(!0)}),[l]),h=(0,r.useCallback)((function(){l(!1)}),[l]);return[{isActive:c,bindIndex:u},{startQuickAssignment:y,cancelQuickAssignment:h,setBindIndex:p}]}function cs(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function ls(e){var n,t,o=e.layout,a=e.layerIndex,c=e.onClose,l=(0,i.v9)(Tc)[a],s=(n=as(a,o,!0),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||function(e,n){if(e){if("string"==typeof e)return cs(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?cs(e,n):void 0}}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),u=s[0],p=s[1],f=(0,r.useMemo)((function(){return Rn(o,{overrides:{minWidth:"400px"}})}),[o]);return(0,r.useEffect)((function(){u.isActive||c()}),[u.isActive,c]),(0,z.jsx)(gn,{onDismiss:c,children:(0,z.jsxs)(fn,{classes:[Gl.quickAssignDialog],dismissText:"",children:[(0,z.jsx)("h2",{children:"Quick-assign layer keybindings"}),(0,z.jsxs)("p",{children:["Press a key on your keyboard to set a ",(0,z.jsx)("code",{children:"&kp"})," binding at the highlighted position in your keymap."]}),(0,z.jsx)("div",{style:f,children:(0,z.jsx)(ct,{layout:o,bindings:l.bindings,renderKey:function(e){var n,t,r=e.index,o=e.keyLayout;return l.bindings[r]&&(0,z.jsx)(Yi,{label:o.label,keyWrapperProps:{selectable:!1,onClick:function(){return p.setBindIndex(r)},className:st()([Gl.quickBindKey,u.bindIndex===r&&Gl.quickBindKeyHighlight]).join(" ")},value:null===(n=l.bindings[r])||void 0===n?void 0:n.value,params:null===(t=l.bindings[r])||void 0===t?void 0:t.params,onUpdate:function(e){}})}})}),(0,z.jsxs)("div",{style:{textAlign:"center"},children:[(0,z.jsx)(Yt,{children:"Click on a different key to jump ahead or correct a previous binding."}),(0,z.jsx)("p",{children:(0,z.jsx)($e,{onClick:c,children:"Done"})})]})]})})}function ss(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(e,n)||function(e,n){if(e){if("string"==typeof e)return us(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?us(e,n):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function us(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var ps=function(e){var n=e.sensors,t=(0,i.v9)(Tc),o=ss((0,r.useState)(0),2),a=o[0],c=o[1],l=ss((0,r.useState)(!1),2),s=l[0],u=l[1],p=ss((0,r.useState)(!1),2),f=p[0],d=p[1],y=Math.max(0,Math.min(a,t.length-1)),h=(0,r.useContext)(Kt),b=h.layout,m=h.wrapperStyle,A=(0,r.useCallback)((function(){return u(!0)}),[u]),v=(0,r.useCallback)((function(){return d(!0)}),[d]),g=(0,r.useCallback)((function(){return d(!1)}),[d]),x=(0,r.useMemo)((function(){return[{callback:A,content:"Change Configuration"},{callback:v,content:(0,z.jsxs)(z.Fragment,{children:["Quick ",(0,z.jsx)("code",{children:"&kp"})," Assignment"]})}]}),[A,v]);if(0===t.length)return(0,z.jsx)(Hl,{});var j=m.width,C=m.height,w=m.margin,E=m.padding;return(0,z.jsxs)(z.Fragment,{children:[(0,z.jsx)(El,{activeLayer:y,onSelect:c}),(0,z.jsxs)("div",{style:{margin:w,padding:E,width:"fit-content"},children:[(0,z.jsxs)("div",{style:{width:j,height:C},children:[(0,z.jsxs)("h3",{style:{position:"relative"},children:["Key Bindings ",(0,z.jsx)(ql,{activeLayer:a,additionalActions:x})]}),(0,z.jsx)(Jl,{layout:b,activeLayer:y})]}),(0,z.jsx)("div",{className:Gl.sensors,"data-sensor-count":n.length,style:{},children:(0,z.jsx)(Ll,{sensors:n,layer:y})})]}),s&&(0,z.jsx)(Ql,{activeLayer:y,onClose:function(){return u(!1)}}),f&&(0,z.jsx)(ls,{layout:b,layerIndex:y,onClose:g})]})};function fs(e){return["&macro_tap","&macro_press","&macro_release","&macro_tap_time","&macro_wait_time","&macro_pause_for_release"].includes(e.value)}var ds=t(96201),ys={};ys.styleTagTransform=m(),ys.setAttributes=d(),ys.insert=p().bind(null,"head"),ys.domAPI=s(),ys.insertStyleElement=h(),c()(ds.Z,ys);var hs=ds.Z&&ds.Z.locals?ds.Z.locals:void 0,bs=t(18446),ms=t.n(bs),As=t(35839),vs={};vs.styleTagTransform=m(),vs.setAttributes=d(),vs.insert=p().bind(null,"head"),vs.domAPI=s(),vs.insertStyleElement=h(),c()(As.Z,vs);var gs=As.Z&&As.Z.locals?As.Z.locals:void 0,xs=["bindings","children","dragging","dragMode"],js=["isDropping","control","classes"],Cs=["bind"],ws=["bind"],Es=["row","isDropping"];function ks(e){return ks="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},ks(e)}function Os(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(e,n)||Ss(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Ss(e,n){if(e){if("string"==typeof e)return Bs(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Bs(e,n):void 0}}function Bs(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function Ps(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}function Is(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Ts(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Is(Object(t),!0).forEach((function(n){Ds(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Is(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Ds(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==ks(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==ks(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===ks(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Ls(e){var n=e.bindings,t=(e.children,e.dragging),o=e.dragMode,i=Ps(e,xs),a=Os((0,r.useState)([null,null]),2),c=a[0],l=a[1],s=(0,r.useMemo)((function(){return function(e){return e.reduce((function(e,n,t){var r=function(){return 0===e.at(-1).length};return(fs(n)&&!r()||!r()&&fs(e.at(-1)[0])||6===e.at(-1).length)&&e.push([]),e.at(-1).push(Ts(Ts({},n),{},{index:t})),e}),[[]])}(n)}),[n]);function u(e){console.log("enter",e),l((function(){return e}))}function p(e){return ms()(c,e)}function f(e){l((function(n){return console.log("leaving",e,"currently in",n),ms()(n,e)?[null,null]:n}))}function d(){console.log("handleDrop",c);var e=Os(c,3),t=e[0],r=e[1],o=e[2],a=s[t][r].index,l=a<n.length-1?a+1:-1;i.onDrop(1===o?l:a)}return t&&(0,z.jsxs)("div",{className:[gs.dropTargets,t?gs.dragging:"","row"===o?gs.dropRowOnly:""].join(" "),children:[s.map((function(e,n){return(0,z.jsxs)(r.Fragment,{children:[(0,z.jsx)(Ms,{row:e,isDropping:p([n,0,-1]),onDragEnter:function(){return u([n,0,-1])},onDragLeave:function(){return f([n,0,-1])},onDrop:d}),e.map((function(t,o){return(0,z.jsxs)(r.Fragment,{children:[(0,z.jsx)(Ns,{bind:t,isDropping:p([n,o,0]),onDragEnter:function(){return u([n,o,0])},onDragLeave:function(){return f([n,o,0])},onDrop:d}),(0,z.jsx)(_s,{bind:t,isDropping:p([n,o,1]),onDragEnter:function(){return u([n,o,1])},onDragLeave:function(){return f([n,o,1])},onDrop:d,"data-extend":fs(t)||o!==e.length-1?0:Math.max(0,5-o)})]},o)}))]},n)})),(0,z.jsx)(Ms,{row:s.length-1,isDropping:p([s.length-1,s.at(-1).length-1,1]),onDragEnter:function(){return u([s.length-1,s.at(-1).length-1,1])},onDragLeave:function(){return f([s.length-1,s.at(-1).length-1,1])},onDrop:d})]})}function Rs(e){var n,t=e.isDropping,r=e.control,o=void 0!==r&&r,i=e.classes,a=void 0===i?[]:i,c=Ps(e,js);return(0,z.jsx)("div",Ts({"data-is-control":o,className:[gs.dropTargetHalf,t?gs.droppable:""].concat((n=a,function(e){if(Array.isArray(e))return Bs(e)}(n)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(n)||Ss(n)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())).join(" ")},c))}function Ns(e){var n=e.bind,t=Ps(e,Cs);return(0,z.jsx)(Rs,Ts({control:fs(n)},t))}function _s(e){var n=e.bind,t=Ps(e,ws);return(0,z.jsx)(Rs,Ts({control:fs(n),classes:[gs.secondHalf]},t))}function Ms(e){e.row;var n=e.isDropping,t=Ps(e,Es);return(0,z.jsx)("div",Ts({"data-drop-mode":"row",className:[gs.dropTargetRow,n?gs.droppable:""].join(" ")},t))}function Ys(e,n){if(e){if("string"==typeof e)return Ks(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Ks(e,n):void 0}}function Ks(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var qs=function(e){return{value:"&kp",params:[{value:e,params:[]}]}},Zs=[{pattern:/[0-9]/,convert:function(e){return qs("N".concat(e))}},{pattern:/[a-z]/,convert:function(e){return qs(e.toUpperCase())}},{pattern:/[A-Z]/,convert:function(e){return{value:"&kp",params:[{value:"LS",params:[{value:e.toUpperCase(),params:[]}]}]}}}],Us={"!":qs("EXCL"),"@":qs("AT"),"#":qs("POUND"),$:qs("DLLR"),"%":qs("PRCNT"),"^":qs("CARET"),"&":qs("AMPS"),"*":qs("STAR"),"(":qs("LPAR"),")":qs("RPAR"),"\n":qs("RET")," ":qs("SPACE"),"-":qs("MINUS"),_:qs("UNDER"),"=":qs("EQUAL"),"+":qs("PLUS"),"[":qs("LBKT"),"]":qs("LBRC"),"{":qs("RBKT"),"}":qs("RBRC"),"\\":qs("BSLH"),"|":qs("PIPE"),"":qs("TILDE2"),";":qs("SEMI"),":":qs("COLON"),"'":qs("SQT"),'"':qs("DQT"),"`":qs("GRAVE"),"~":qs("TILDE"),",":qs("COMMA"),"<":qs("LT"),".":qs("DOT"),">":qs("GT"),"/":qs("FSLH"),"?":qs("QMARK")};var Gs=function(e){var n,t,o=e.onClose,i=(0,r.useContext)(j),a=i.sources,c=i.mergedGlyphs,l=(n=(0,r.useState)("Type something..."),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||Ys(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),s=l[0],u=l[1],p=(0,r.useMemo)((function(){return s.split("").reduce((function(e,n){var t=function(e){if(Us[e])return Us[e];var n,t=function(e,n){var t="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!t){if(Array.isArray(e)||(t=Ys(e))){t&&(e=t);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,c=!1;return{s:function(){t=t.call(e)},n:function(){var e=t.next();return a=e.done,e},e:function(e){c=!0,i=e},f:function(){try{a||null==t.return||t.return()}finally{if(c)throw i}}}}(Zs);try{for(t.s();!(n=t.n()).done;){var r=n.value,o=r.pattern,i=r.convert;if(e.match(o))return i(e)}}catch(e){t.e(e)}finally{t.f()}}(n);return t&&e.push(t),e}),[])}),[s]).map((function(e){return No(e.value,e.params,a,void 0,c)})),f=(0,r.useCallback)((function(e){e&&(e.focus(),e.select())}),[]);return(0,z.jsx)(gn,{children:(0,z.jsxs)(fn,{dismissText:!1,children:[(0,z.jsx)("h2",{children:"Create Typing Sequence"}),(0,z.jsx)("p",{children:"Type a message to generate a sequence of bindings in the macro."}),(0,z.jsx)("textarea",{value:s,ref:f,style:{width:"100%",height:"6rem"},onChange:function(e){return u(e.target.value)}}),(0,z.jsx)("div",{className:hs.macroBindings,children:p.map((function(e,n){return(0,z.jsx)(r.Fragment,{children:(0,z.jsx)(At,{selectable:!1,children:(0,z.jsx)(Eo,{node:e.params[0],onSelect:function(){}})})},n)}))}),(0,z.jsxs)("div",{className:hs.macroActions,children:[(0,z.jsx)($e,{onClick:function(){return o(p)},children:"Add to macro"}),(0,z.jsx)($e,{onClick:function(){return o([])},secondary:!0,children:"Cancel"})]})]})})},zs=function(e){return e.keyboard.keymap.macros},Ws=(0,Va.oM)({name:"macros",initialState:[],reducers:{addMacro:function(e){e.push({identifier:"new_macro",label:"new_macro",bindings:[]})},renameMacro:function(e,n){e[n.payload.index].identifier=n.payload.name},deleteMacro:function(e,n){e.splice(n.payload.index,1)},addMacroControlBinding:function(e,n){e[n.payload.macroIndex].bindings.push({value:"&macro_press",params:[]})},addMacroKeyBinding:function(e,n){e[n.payload.macroIndex].bindings.push(n.payload.binding)},updateMacroBinding:function(e,n){e[n.payload.macroIndex].bindings[n.payload.bindIndex]=n.payload.binding},reorderMacroBinding:function(e,n){var t,r,o;e[n.payload.macroIndex].bindings=(t=e[n.payload.macroIndex].bindings,r=n.payload.bindIndex,-1===(o=n.payload.targetIndex)?[].concat(ti(t.filter((function(e,n){return n!==r}))),[t[r]]):t.reduce((function(e,n,i){return i===o&&e.push(t[r]),i!==r&&e.push(n),e}),[]))},deleteMacroBinding:function(e,n){e[n.payload.macroIndex].bindings.splice(n.payload.bindIndex,1)},customizeMacroOptions:function(e,n){Object.assign(e[n.payload.macroIndex],n.payload.options)}}}),Fs=Ws.actions,Xs=Fs.addMacro,Vs=Fs.renameMacro,Qs=Fs.deleteMacro,Hs=Fs.addMacroControlBinding,Js=Fs.addMacroKeyBinding,$s=Fs.updateMacroBinding,eu=Fs.reorderMacroBinding,nu=Fs.deleteMacroBinding,tu=Fs.customizeMacroOptions,ru=Ws.reducer;function ou(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(e,n)||iu(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function iu(e,n){if(e){if("string"==typeof e)return au(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?au(e,n):void 0}}function au(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function cu(e){var n=e.macroIndex,t=e.bindings,o=e.dispatch,i=ou((0,r.useState)(null),2),a=i[0],c=i[1],l=ou((0,r.useState)(!1),2),s=l[0],u=l[1];return(0,r.useEffect)((function(){function e(){c(null)}function n(e){e.stopPropagation(),e.preventDefault()}return document.body.addEventListener("drop",e),document.body.addEventListener("dragover",n),function(){document.body.removeEventListener("drop",e),document.body.removeEventListener("dragover",n)}}),[c]),(0,z.jsxs)(z.Fragment,{children:[(0,z.jsxs)("div",{className:hs.macroBindings,children:[t.map((function(e,i){return(0,z.jsx)(r.Fragment,{children:(0,z.jsxs)(At,{"data-index":i,themeClass:fs(e)?hs.controlBinding:"",draggable:!0,onDragStart:function(e){return function(e,n){if(e.dataTransfer.items.length)e.dataTransfer.clearData();else{var r=t[n];c({index:n,mode:fs(r)?"row":"col",isControlBinding:fs(r)})}}(e,i)},children:[(0,z.jsx)(Yi,{context:fs(e)?"macros":void 0,value:e.value,params:e.params,onUpdate:function(e){o($s({macroIndex:n,bindIndex:i,binding:e}))}}),(0,z.jsx)("div",{className:hs.actions,children:(0,z.jsx)(J,{name:"trash",className:hs.deleteBind,onClick:gc((function(){return o(nu({macroIndex:n,bindIndex:i}))}))})})]},i)},i)})),(0,z.jsx)(Ls,{dragging:a,bindings:t,onDrop:function(e){o(eu({macroIndex:n,bindIndex:a.index,targetIndex:e})),c(null)}})]}),s&&(0,z.jsx)(Gs,{onClose:function(e){u(!1);var t,r=function(e,n){var t="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!t){if(Array.isArray(e)||(t=iu(e))){t&&(e=t);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,c=!1;return{s:function(){t=t.call(e)},n:function(){var e=t.next();return a=e.done,e},e:function(e){c=!0,i=e},f:function(){try{a||null==t.return||t.return()}finally{if(c)throw i}}}}(e);try{for(r.s();!(t=r.n()).done;){var i=t.value;o(Js({macroIndex:n,binding:i}))}}catch(e){r.e(e)}finally{r.f()}}}),(0,z.jsxs)("div",{className:hs.macroActions,children:[(0,z.jsx)($e,{onClick:function(){return o(Hs({macroIndex:n}))},children:"Add Control Binding"}),(0,z.jsx)($e,{onClick:function(){o(Js({binding:{value:"&kp",params:[]},macroIndex:n}))},children:"Add Key Binding"}),(0,z.jsx)($e,{onClick:function(){return u(!0)},children:"Add String Sequence"})]})]})}cu.propTypes={bindings:G().array.isRequired,macroIndex:G().number.isRequired,dispatch:G().func.isRequired};var lu=cu;function su(e){return su="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},su(e)}function uu(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function pu(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?uu(Object(t),!0).forEach((function(n){fu(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):uu(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function fu(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==su(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==su(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===su(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function du(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var yu=function(e){var n,t,o=e.macro,i=e.onUpdate,a=(n=(0,r.useState)(_n()(o,["label","waitMs","tapMs"])),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||function(e,n){if(e){if("string"==typeof e)return du(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?du(e,n):void 0}}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),c=a[0],l=a[1];return(0,z.jsx)(gn,{children:(0,z.jsxs)(fn,{onDismiss:function(){i(c)},children:[(0,z.jsxs)("h2",{children:["Customize [",(0,z.jsx)("code",{children:o.identifier}),"]"]}),(0,z.jsxs)("div",{children:[(0,z.jsxs)("div",{className:hs.field,children:[(0,z.jsx)("label",{htmlFor:"customize-macro-label",children:"Label"}),(0,z.jsx)("input",{id:"customize-macro-label",value:c.label,onChange:function(e){return l((function(n){return pu(pu({},n),{},{label:e.target.value})}))}})]}),(0,z.jsxs)("div",{className:hs.field,children:[(0,z.jsx)("label",{htmlFor:"customize-macro-wait",children:"Wait (ms)"}),(0,z.jsx)("input",{id:"customize-macro-wait",type:"number",placeholder:"Default",value:c.waitMs,onChange:function(e){return l((function(n){return pu(pu({},n),{},{waitMs:""===e.target.value?void 0:Number(e.target.value)})}))}})]}),(0,z.jsxs)("div",{className:hs.field,children:[(0,z.jsx)("label",{htmlFor:"customize-macro-tap",children:"Tap (ms)"}),(0,z.jsx)("input",{id:"customize-macro-tap",type:"number",placeholder:"Default",value:c.tapMs,onChange:function(e){return l((function(n){return pu(pu({},n),{},{tapMs:""===e.target.value?void 0:Number(e.target.value)})}))}})]})]})]})})};function hu(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function bu(e){var n,t,o=e.index,i=e.macro,a=e.dispatch,c=(n=(0,r.useState)(!1),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||function(e,n){if(e){if("string"==typeof e)return hu(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?hu(e,n):void 0}}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),l=c[0],s=c[1],u=(0,r.useContext)(j).identifiers;return(0,z.jsxs)("div",{className:hs.macro,children:[l&&(0,z.jsx)(yu,{macro:i,onUpdate:function(e){s(!1),a(tu({macroIndex:o,options:e}))}}),(0,z.jsxs)("div",{className:hs.heading,children:[(0,z.jsx)(Sc,{value:i.identifier,validate:function(e){return ea(e)||(u.includes(e)?'Cannot use existing identifier "'.concat(e,'"'):null)},render:function(e){return(0,z.jsx)("h5",{children:(0,z.jsx)("code",{children:e})})},onUpdate:function(e){return a(Vs({index:o,name:e}))}}),(0,z.jsxs)("div",{children:[(0,z.jsx)(J,{name:"wrench",className:"".concat(hs.action),onClick:function(){return s(!0)}}),(0,z.jsx)(J,{name:"trash-can",className:"".concat(hs.action," ").concat(hs.remove),onClick:function(){return a(Qs({index:o}))}})]})]}),(0,z.jsx)(lu,{macroIndex:o,bindings:i.bindings,dispatch:a})]})}bu.propTypes={index:G().number.isRequired,macro:G().shape({identifier:G().string,bindings:G().array.isRequired}).isRequired,dispatch:G().func.isRequired};var mu=bu,Au=function(){var e=(0,i.v9)(zs),n=(0,i.I0)();return(0,z.jsxs)("div",{className:hs.main,children:[(0,z.jsxs)("div",{className:hs.sidebar,children:[(0,z.jsxs)(Ra,{external:!0,href:"https://zmk.dev/docs/behaviors/macros",children:[(0,z.jsx)(J,{name:"book"})," ZMK Docs: Macros"]}),(0,z.jsx)($e,{onClick:function(){return n(Xs())},children:"Add New Macro"})]}),e.map((function(e,t){return(0,z.jsx)(mu,{macro:e,index:t,dispatch:n},t)}))]})},vu={},gu=G().string.isRequired,xu=G().arrayOf(G().shape(vu));vu.value=gu,vu.params=xu;var ju=G().shape(vu),Cu=G().shape({identifier:G().string,index:G().number,bindings:G().arrayOf(ju),keyPositions:G().arrayOf(G().number).isRequired}),wu=G().shape({index:G().number,name:G().string,identifier:G().string,bindings:G().arrayOf(ju).isRequired,sensorBindings:G().arrayOf(ju)}),Eu=G().shape({layers:G().arrayOf(wu).isRequired,combos:G().arrayOf(Cu)}),ku=t(7739),Ou=t.n(ku);function Su(e){return e.every((function(e){return void 0===e.row&&void 0===e.col}))?["Layout in info.json has no row/col definitions. Generated keymap files will not be nicely formatted."]:[]}var Bu=t(2024);function Pu(e){return Pu="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Pu(e)}function Iu(e){return function(e){if(Array.isArray(e))return Tu(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,n){if(e){if("string"==typeof e)return Tu(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Tu(e,n):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Tu(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function Du(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Lu(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Pu(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Pu(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Pu(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Ru(e,n){var t=Ou()(e,n);return Object.values(t).filter((function(e){return e.length>1}))}function Nu(e){var n=e.layers.map((function(e,n){return{location:"Keymap - Layer #".concat(n," (").concat(e.name,")"),path:"keymap.layers[".concat(n,"]"),name:e.name}})),t=e.combos.map((function(e,n){return{location:"Combos - Combo #".concat(n," (").concat(e.identifier,")"),path:"combos[".concat(n,"].name"),name:e.identifier}})),r=e.macros.map((function(e,n){return{location:"Macros - Macro #".concat(n," (").concat(e.identifier,")"),path:"macros[".concat(n,"].name"),name:e.identifier}})),o=function(e){return e.map((function(e,n){return{location:"Behaviors - Behavior #".concat(n," (").concat(e.labels[0],") - Name"),path:"behaviors[".concat(n,"].name"),name:e.name}}))}(e.behaviors),i=[].concat(Iu(Ru(n,"name")),Iu(Ru(t,"name")),Iu(Ru(r,"name")),Iu(Ru(o,"name"))),a=[].concat(Iu(n.filter((function(e){return Bu.includes(e.name)}))),Iu(t.filter((function(e){return Bu.includes(e.name)}))),Iu(r.filter((function(e){return Bu.includes(e.name)}))),Iu(o.filter((function(e){return Bu.includes(e.name)}))));return{duplicates:i,redefined:a,passwordMacros:Iu(r.filter((function(e){return n=e.name,[/(^|[\b_])pass(word)?([\b_]|$)/].some((function(e){return n.match(e)}));var n})))}}function _u(e){var n=Ru([].concat(e.layers.reduce((function(e,n,t){return n.label&&e.push({location:"Keymap - Layer #".concat(t," (").concat(n.name,")"),path:"keymap.layers[".concat(t,"].label"),label:n.label}),e}),[]),e.macros.reduce((function(e,n,t){return n.label&&e.push({location:"Macros - Macro #".concat(t," (").concat(n.identifier,") - Label"),path:"macros[".concat(t,"].label"),label:n.label}),e}),[]),function(e){return e.reduce((function(e,n,t){return n.label&&e.push({location:"Behaviors - Behavior #".concat(t," (").concat(n.labels[0],") - Label"),path:"behaviors[".concat(t,"].label"),label:n.properties.label.parsed}),e}),[])}(e.behaviors)),"label");return{duplicates:n}}function Mu(e){var n=Ou()([].concat(e.macros.map((function(e,n){return{location:"Macros > Macro #".concat(n," (").concat(e.identifier,")"),path:"macros[".concat(n,"].name"),ref:e.identifier}})),function(e){return e.map((function(e,n){return{location:"Behaviors - Behavior #".concat(n," (").concat(e.labels[0],") - Bind"),path:"behaviors[".concat(n,"].bind"),ref:e.labels[0]}}))}(e.behaviors)),"ref");return{duplicates:Object.values(n).reduce((function(e,n){return n.length>1&&e.push(we()(n,"path")),e}),[])}}var Yu=t(79577),Ku={};Ku.styleTagTransform=m(),Ku.setAttributes=d(),Ku.insert=p().bind(null,"head"),Ku.domAPI=s(),Ku.insertStyleElement=h(),c()(Yu.Z,Ku);var qu=Yu.Z&&Yu.Z.locals?Yu.Z.locals:void 0;function Zu(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function Uu(e){return e.location}function Gu(e){var n,t,o=e.name,i=e.explanation,a=e.warnings,c=e.renderWarning,l=void 0===c?Uu:c,s=(n=(0,r.useState)(0===a.length),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||function(e,n){if(e){if("string"==typeof e)return Zu(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Zu(e,n):void 0}}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),u=s[0],p=s[1];return(0,z.jsxs)("div",{className:st()([qu.warningCategory,0===a.length&&qu.emptyCategory,u&&qu.collapsedCategory]).join(" "),children:[(0,z.jsxs)("h3",{onClick:function(){return p(!u)},children:[(0,z.jsx)(J,{className:qu.caret,name:"caret-down"})," "," ",o," ",(0,z.jsxs)("em",{children:["(",a.length," issues)"]})]}),(0,z.jsxs)("div",{className:qu.warningDetails,children:[(0,z.jsx)("blockquote",{children:i}),a.length>0?(0,z.jsx)("ul",{children:a.map((function(e,n){return(0,z.jsx)("li",{children:l(e)},n)}))}):(0,z.jsx)("p",{children:"No problems"})]})]})}var zu=(0,z.jsx)(Ra,{external:!0,href:"https://github.com/nickcoutsos/keymap-editor/issues",children:"issue"}),Wu=function(e){var n=e.sanityChecks,t=n.nodeNames,r=n.nodeLabels,o=n.nodeReferences,i=n.layoutMissingPositions;return(0,z.jsxs)("div",{style:{maxWidth:"700px",margin:"0 auto",paddingBottom:"60px"},children:[(0,z.jsx)("h2",{children:"Warnings"}),(0,z.jsx)(Gu,{name:"Layout row/col positions",warnings:i,explanation:(0,z.jsxs)(z.Fragment,{children:[(0,z.jsx)("p",{children:(0,z.jsxs)("em",{children:["Your keyboard's layout metadata should include a ",(0,z.jsx)("code",{children:"row"}),"and ",(0,z.jsx)("code",{children:"col"})," property for each key in order to generate a readable keymap ",(0,z.jsx)("code",{children:"bindings"})," array."]})}),(0,z.jsxs)("p",{children:["For more information see ",(0,z.jsx)(Ra,{external:!0,href:"https://github.com/nickcoutsos/keymap-editor/wiki/Defining-keyboard-layouts",children:"Keymap Editor Wiki"}),"."]})]}),renderWarning:function(){}}),(0,z.jsx)(Gu,{name:"Duplicate node names",warnings:t.duplicates,explanation:(0,z.jsx)("p",{children:(0,z.jsx)("em",{children:"Node names must within the same section must be unique."})}),renderWarning:function(e){return(0,z.jsxs)(z.Fragment,{children:[(0,z.jsxs)("h4",{children:["Name ",(0,z.jsx)("code",{children:e[0].name})," re-used in:"]}),(0,z.jsx)("ul",{children:e.map((function(e,n){return(0,z.jsx)("li",{children:e.location},n)}))})]})}}),(0,z.jsx)(Gu,{name:"Re-definitions",warnings:t.redefined,explanation:(0,z.jsx)("p",{children:(0,z.jsx)("em",{children:"Node names cannot use existing ZMK identifiers."})})}),(0,z.jsx)(Gu,{name:"Macro Passwords",warnings:t.passwordMacros,explanation:(0,z.jsxs)(z.Fragment,{children:[(0,z.jsx)("p",{children:(0,z.jsx)("em",{children:"Using keyboard macros to enter passwords is a security risk and is strongly discouraged."})}),(0,z.jsx)("p",{children:"Recording passwords in your keyboard means that anyone with physical access to your keyboard would have access to credentials stored within it, whether they know to look for it or not. Also note that through this application you are recording keyboard configuration in a Git repository and storing credentials in a code repository is not considered a safe practice (even if the repository is private)."}),(0,z.jsxs)("p",{children:["Any macros listed here have names which seem to suggest that they are used for password entry. If that is the case I would encourage you to remove them and change the associated password(s) if needed. If this is a mistake feel free to create an ",zu," to help me avoid false alarms in the future!"]})]})}),(0,z.jsx)(Gu,{name:"Duplicate labels",warnings:r.duplicates,explanation:(0,z.jsx)("p",{children:(0,z.jsx)("em",{children:"Label property values must be unique throughout the entire keymap."})}),renderWarning:function(e){return(0,z.jsxs)(z.Fragment,{children:[(0,z.jsxs)("h4",{children:["Name ",(0,z.jsx)("code",{children:e[0].label})," re-used in:"]}),(0,z.jsx)("ul",{children:e.map((function(e,n){return(0,z.jsx)("li",{children:e.location},n)}))})]})}}),(0,z.jsx)(Gu,{name:"Duplicate node references",warnings:o.duplicates,explanation:(0,z.jsx)("p",{children:(0,z.jsx)("em",{children:"Node references must be unique throughout the entire keymap."})}),renderWarning:function(e){return(0,z.jsxs)(z.Fragment,{children:[(0,z.jsxs)("h4",{children:["Reference ",(0,z.jsxs)("code",{children:["&",e[0].ref]})," re-used in:"]}),(0,z.jsx)("ul",{children:e.map((function(e,n){return(0,z.jsx)("li",{children:e.location},n)}))})]})}})]})};function Fu(e){return function(e){if(Array.isArray(e))return Vu(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||Xu(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Xu(e,n){if(e){if("string"==typeof e)return Vu(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Vu(e,n):void 0}}function Vu(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function Qu(e){var n,t,o=e.text,i=e.tabs,a=e.defaultTab,c=e.children,l=(n=(0,r.useState)(a),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||Xu(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),s=l[0],u=l[1];return(0,z.jsxs)(z.Fragment,{children:[(0,z.jsx)("h3",{style:{display:"inline"},children:o}),(0,z.jsx)("ul",{className:Kn.editorModeTabs,children:i.map((function(e,n){var t=e.name,r=e.tabClasses,o=void 0===r?[]:r;return(0,z.jsx)("li",{onClick:function(){return u(n)},className:(0,ye.compact)([s===n&&Kn.activeEditTab].concat(Fu(o))).join(" "),children:t},n)}))}),c[s]]})}var Hu=function(e){return e.keyboard.keymap};function Ju(e){var n=(0,i.v9)(Hu),t=(0,r.useContext)(Kt).layout,o=e.sensors,a=(0,r.useMemo)((function(){return function(e,n){return function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Du(Object(t),!0).forEach((function(n){Lu(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Du(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}({nodeNames:Nu(e),nodeLabels:_u(e),nodeReferences:Mu(e)},function(e){return{layoutMissingPositions:Su(e)}}(n))}(n,t)}),[n,t]),c=(0,r.useMemo)((function(){var e=a.nodeNames,n=a.nodeLabels,t=a.nodeReferences,r=a.layoutMissingPositions;return e.duplicates.length+e.redefined.length+e.passwordMacros.length+n.duplicates.length+t.duplicates.length+r.length}),[a]),l=(0,ye.compact)([{name:"layers",component:(0,z.jsx)(ps,{sensors:o})},{name:"combos",component:(0,z.jsx)(Al,{})},{name:"macros",component:(0,z.jsx)(Au,{})},{name:(0,z.jsx)("span",{className:Kn.beta,children:"behaviors"}),component:(0,z.jsx)(uc,{})},c>0&&{name:"warnings (".concat(c,")"),tabClasses:[Kn.warningTab],component:(0,z.jsx)(Wu,{sanityChecks:a})}]);return(0,z.jsx)(Ue,{keymap:n,children:(0,z.jsx)(Qu,{text:"Editor mode:",tabs:l,defaultTab:0,children:l.map((function(e,n){return(0,z.jsx)(r.Fragment,{children:e.component},n)}))})})}Ju.propTypes={keymap:Eu};var $u=Ju,ep=t(2746),np={};np.styleTagTransform=m(),np.setAttributes=d(),np.insert=p().bind(null,"head"),np.domAPI=s(),np.insertStyleElement=h(),c()(ep.Z,np);var tp=ep.Z&&ep.Z.locals?ep.Z.locals:void 0,rp="https://github.com/nickcoutsos/keymap-editor";function op(){return(0,z.jsxs)("div",{className:tp.wrapper,children:[(0,z.jsx)("label",{children:"Need help? Open an issue:"}),(0,z.jsxs)("a",{className:tp.githubLink,target:"_blank",rel:"noreferrer",href:rp,children:[(0,z.jsx)(J,{collection:"brands",name:"github"}),"/nickcoutsos/keymap-editor"]})]})}function ip(e){return ip="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},ip(e)}function ap(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function cp(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?ap(Object(t),!0).forEach((function(n){lp(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ap(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function lp(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==ip(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==ip(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===ip(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}var sp={description:{fontStyle:"italic",fontSize:"90%"}};function up(e){var n=e.settings,t=e.onUpdate,r=e.onClose;function o(e,r){t(cp(cp({},n),{},lp({},e,r)))}return(0,z.jsx)(gn,{onDismiss:r,children:(0,z.jsxs)(fn,{onDismiss:r,children:[(0,z.jsx)("h1",{children:"Settings"}),(0,z.jsx)("h2",{children:"Keycode glyphs"}),(0,z.jsx)("h3",{children:(0,z.jsxs)("label",{htmlFor:"enable-unicode-glyphs",children:[(0,z.jsx)("input",{id:"enable-unicode-glyphs",type:"checkbox",checked:n.unicodeGlyphs,onChange:function(e){return o("unicodeGlyphs",e.target.checked)}}),"Use Unicode Glyphs"]})}),(0,z.jsxs)("p",{style:sp.description,children:["Use unicode glyphs for visual representations of keycodes like ",(0,z.jsx)("code",{children:"Enter"})," (⮐), ",(0,z.jsx)("code",{children:"Right Arrow"})," (⏵), etc. You can disable this if the symbols don't render correctly."]}),(0,z.jsx)("h3",{children:(0,z.jsxs)("label",{htmlFor:"platform-specific-glyphs",children:["Platform specific glyphs",(0,z.jsxs)("select",{id:"platform-specific-glyphs",value:n.platformGlyphs||"auto",onChange:function(e){return o("platformGlyphs",e.target.value)},children:[(0,z.jsx)("option",{value:"auto",children:"Automatic"}),(0,z.jsx)("option",{value:"win",children:"Windows"}),(0,z.jsx)("option",{value:"mac",children:"macOS"})]})]})}),(0,z.jsxs)("p",{style:sp.description,children:["Render symbols specific to your platform. E.g., render left/right meta key as ",(0,z.jsx)(J,{name:"windows fa-brands"})," for Windows, or ⌘ for macOS."]})]})})}up.propTypes={settings:G().object.isRequired,onUpdate:G().func.isRequired,onClose:G().func.isRequired},up.defaultProps={settings:{}};var pp=up,fp=t(13311),dp=t.n(fp),yp=t(20256),hp=["children","style"],bp=["label"];function mp(e){return mp="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},mp(e)}function Ap(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}function vp(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function gp(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?vp(Object(t),!0).forEach((function(n){xp(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):vp(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function xp(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==mp(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==mp(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===mp(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function jp(e){var n=e.style,t=void 0===n?{}:n,r=e.children;return(0,z.jsx)("div",{style:gp(gp({},{height:"38px",lineHeight:"38px"}),t),children:r})}function Cp(e){var n=e.children,t=e.style,r=void 0===t?{}:t,o=Ap(e,hp);return(0,z.jsx)(jp,{style:r,children:(0,z.jsx)("button",gp(gp({style:{height:"100%"}},o),{},{children:n}))})}var wp=window.matchMedia("(prefers-color-scheme: dark)"),Ep=[0,5,10,20,30,40,50,60,70,80,90].reduce((function(e,n){return e["neutral".concat(n)]="hsl(0, 0%, ".concat(n,"%)"),e}),{});function kp(e){var n=e.label,t=Ap(e,bp),r=(0,i.v9)((function(e){return e})).theme,o="dark"===r||"system"===r&&wp.matches;return(0,z.jsxs)("div",{style:{display:"inline-block",width:"auto"},children:[(0,z.jsx)("label",{style:{display:"block",width:"100%",fontSize:"120%",color:"var(--fg)"},children:n}),(0,z.jsx)(yp.ZP,gp({styles:{container:function(e,n){return gp(gp({},e),{},{display:"inline-block"})},menu:function(e){return gp(gp({},e),{},{width:"max-content",zIndex:10})}},theme:function(e){return gp(gp({},e),{},{colors:gp(gp({},e.colors),o?Ep:{})})},isSearchable:!1},t))]})}function Op(e){return Op="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Op(e)}function Sp(){Sp=function(){return e};var e={},n=Object.prototype,t=n.hasOwnProperty,r=Object.defineProperty||function(e,n,t){e[n]=t.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function l(e,n,t){return Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}),e[n]}try{l({},"")}catch(e){l=function(e,n,t){return e[n]=t}}function s(e,n,t,o){var i=n&&n.prototype instanceof f?n:f,a=Object.create(i.prototype),c=new E(o||[]);return r(a,"_invoke",{value:x(e,t,c)}),a}function u(e,n,t){try{return{type:"normal",arg:e.call(n,t)}}catch(e){return{type:"throw",arg:e}}}e.wrap=s;var p={};function f(){}function d(){}function y(){}var h={};l(h,i,(function(){return this}));var b=Object.getPrototypeOf,m=b&&b(b(k([])));m&&m!==n&&t.call(m,i)&&(h=m);var A=y.prototype=f.prototype=Object.create(h);function v(e){["next","throw","return"].forEach((function(n){l(e,n,(function(e){return this._invoke(n,e)}))}))}function g(e,n){function o(r,i,a,c){var l=u(e[r],e,i);if("throw"!==l.type){var s=l.arg,p=s.value;return p&&"object"==Op(p)&&t.call(p,"__await")?n.resolve(p.__await).then((function(e){o("next",e,a,c)}),(function(e){o("throw",e,a,c)})):n.resolve(p).then((function(e){s.value=e,a(s)}),(function(e){return o("throw",e,a,c)}))}c(l.arg)}var i;r(this,"_invoke",{value:function(e,t){function r(){return new n((function(n,r){o(e,t,n,r)}))}return i=i?i.then(r,r):r()}})}function x(e,n,t){var r="suspendedStart";return function(o,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw i;return{value:void 0,done:!0}}for(t.method=o,t.arg=i;;){var a=t.delegate;if(a){var c=j(a,t);if(c){if(c===p)continue;return c}}if("next"===t.method)t.sent=t._sent=t.arg;else if("throw"===t.method){if("suspendedStart"===r)throw r="completed",t.arg;t.dispatchException(t.arg)}else"return"===t.method&&t.abrupt("return",t.arg);r="executing";var l=u(e,n,t);if("normal"===l.type){if(r=t.done?"completed":"suspendedYield",l.arg===p)continue;return{value:l.arg,done:t.done}}"throw"===l.type&&(r="completed",t.method="throw",t.arg=l.arg)}}}function j(e,n){var t=n.method,r=e.iterator[t];if(void 0===r)return n.delegate=null,"throw"===t&&e.iterator.return&&(n.method="return",n.arg=void 0,j(e,n),"throw"===n.method)||"return"!==t&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+t+"' method")),p;var o=u(r,e.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,p;var i=o.arg;return i?i.done?(n[e.resultName]=i.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=void 0),n.delegate=null,p):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,p)}function C(e){var n={tryLoc:e[0]};1 in e&&(n.catchLoc=e[1]),2 in e&&(n.finallyLoc=e[2],n.afterLoc=e[3]),this.tryEntries.push(n)}function w(e){var n=e.completion||{};n.type="normal",delete n.arg,e.completion=n}function E(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(C,this),this.reset(!0)}function k(e){if(e){var n=e[i];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,o=function n(){for(;++r<e.length;)if(t.call(e,r))return n.value=e[r],n.done=!1,n;return n.value=void 0,n.done=!0,n};return o.next=o}}return{next:O}}function O(){return{value:void 0,done:!0}}return d.prototype=y,r(A,"constructor",{value:y,configurable:!0}),r(y,"constructor",{value:d,configurable:!0}),d.displayName=l(y,c,"GeneratorFunction"),e.isGeneratorFunction=function(e){var n="function"==typeof e&&e.constructor;return!!n&&(n===d||"GeneratorFunction"===(n.displayName||n.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,y):(e.__proto__=y,l(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},e.awrap=function(e){return{__await:e}},v(g.prototype),l(g.prototype,a,(function(){return this})),e.AsyncIterator=g,e.async=function(n,t,r,o,i){void 0===i&&(i=Promise);var a=new g(s(n,t,r,o),i);return e.isGeneratorFunction(t)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},v(A),l(A,c,"Generator"),l(A,i,(function(){return this})),l(A,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var n=Object(e),t=[];for(var r in n)t.push(r);return t.reverse(),function e(){for(;t.length;){var r=t.pop();if(r in n)return e.value=r,e.done=!1,e}return e.done=!0,e}},e.values=k,E.prototype={constructor:E,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(w),!e)for(var n in this)"t"===n.charAt(0)&&t.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function r(t,r){return a.type="throw",a.arg=e,n.next=t,r&&(n.method="next",n.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var c=t.call(i,"catchLoc"),l=t.call(i,"finallyLoc");if(c&&l){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(e,n){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&t.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=n&&n<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=n,i?(this.method="next",this.next=i.finallyLoc,p):this.complete(a)},complete:function(e,n){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&n&&(this.next=n),p},finish:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.finallyLoc===e)return this.complete(t.completion,t.afterLoc),w(t),p}},catch:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.tryLoc===e){var r=t.completion;if("throw"===r.type){var o=r.arg;w(t)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,t){return this.delegate={iterator:k(e),resultName:n,nextLoc:t},"next"===this.method&&(this.arg=void 0),p}},e}function Bp(e,n,t,r,o,i,a){try{var c=e[i](a),l=c.value}catch(e){return void t(e)}c.done?n(l):Promise.resolve(l).then(r,o)}function Pp(e){return function(){var n=this,t=arguments;return new Promise((function(r,o){var i=e.apply(n,t);function a(e){Bp(i,r,o,a,c,"next",e)}function c(e){Bp(i,r,o,a,c,"throw",e)}a(void 0)}))}}function Ip(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(e,n)||function(e,n){if(e){if("string"==typeof e)return Tp(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Tp(e,n):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Tp(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var Dp=function(e){var n=e.onSelect,t=Ip((0,r.useState)([]),2),o=t[0],i=t[1],a=Ip((0,r.useState)(null),2),c=a[0],l=a[1],s=(0,r.useMemo)((function(){return o.map((function(e){return{id:e,name:e}}))}),[o]);(0,r.useEffect)((function(){Pp(Sp().mark((function e(){var n,t,r;return Sp().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,_();case 2:n=e.sent,t=JSON.parse(localStorage.getItem("localSourceSelectedKeyboard")||"null"),r=n.includes(t)?t:n[0],i(n),l(r);case 7:case"end":return e.stop()}}),e)})))()}),[i,l]),(0,r.useEffect)((function(){Pp(Sp().mark((function e(){var t,r,o,i,a,l,s,u;return Sp().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!c){e.next=12;break}return e.next=3,Y(c);case 3:t=e.sent,r=t.info,o=t.keymap,i=t.sensors,a=r.layouts,l=o.chosen["zmk,matrix_transform"]?o.chosen["zmk,matrix_transform"].replace(/^&/,""):null,s=Object.keys(a)[0],u=a[l]||a[s],n({source:"local",keyboard:c,layoutMetadata:u,layout:u.layout,keymap:o,sensors:i});case 12:case"end":return e.stop()}}),e)})))()}),[n,c]);var u=(0,r.useCallback)((function(e){var n=e.id;localStorage.setItem("localSourceSelectedKeyboard",JSON.stringify(n)),l(n)}),[l]),p=(0,ye.find)(s,{id:c});return(0,z.jsx)(kp,{label:"Keyboard",value:p,options:s,onChange:u,getOptionValue:function(e){return e.id},getOptionLabel:function(e){return e.name}})};function Lp(e){return Lp="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Lp(e)}function Rp(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Np(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Rp(Object(t),!0).forEach((function(n){_p(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Rp(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function _p(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Lp(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Lp(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Lp(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Mp(e){var n=(0,z.jsx)(Ra,{href:"https://github.com/nickcoutsos/zmk-config-corne-demo",external:!0,children:"GitHub Repo"});return(0,z.jsx)(gn,{children:(0,z.jsxs)(fn,Np(Np({},e),{},{children:[(0,z.jsx)("h2",{children:"Keymap Editor Demo"}),(0,z.jsx)("p",{children:"Welcome! This demo keyboard is provided to let you experiment with the keymap editor before setting up your own repository."}),(0,z.jsx)("h3",{children:"Features"}),(0,z.jsxs)("ul",{children:[(0,z.jsxs)("li",{children:[(0,z.jsx)("strong",{children:"WYSIWYG Editing"}),". Just click on key and behaviour bindings to make changes, add or remove layers in the sidebar."]}),(0,z.jsxs)("li",{children:[(0,z.jsx)("strong",{children:"Keymap generation"}),". The editor can export keymap to ZMK's syntax (when running locally or integrated with GitHub), and will even attempt to format the ",(0,z.jsx)("code",{children:".keymap"})," file for better readability."]}),(0,z.jsxs)("li",{children:[(0,z.jsx)("strong",{children:"Devicetree parsing"}),". ",(0,z.jsx)("em",{children:"(Experimental!)"})," Read and write to your existing ZMK ",(0,z.jsx)("code",{children:".keymap"})," file so that you can still use ZMK features that the app doesn't support yet."]})]}),(0,z.jsx)("h3",{children:"What's next?"}),(0,z.jsxs)("p",{children:["If you like the editor, try integrating with your own GitHub hosted keyboard config. ",(0,z.jsx)(Ra,{href:"https://github.com/nickcoutsos/zmk-config-corne-demo/generate",external:!0,children:"Use it as a template"})," for your own, or just read through the ",n," for this keyboard to learn what to apply to your existing keyboard."]})]}))})}var Yp=t(33971),Kp={};Kp.styleTagTransform=m(),Kp.setAttributes=d(),Kp.insert=p().bind(null,"head"),Kp.domAPI=s(),Kp.insertStyleElement=h(),c()(Yp.Z,Kp);var qp=Yp.Z&&Yp.Z.locals?Yp.Z.locals:void 0;function Zp(e){return Zp="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Zp(e)}function Up(){Up=function(){return e};var e={},n=Object.prototype,t=n.hasOwnProperty,r=Object.defineProperty||function(e,n,t){e[n]=t.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function l(e,n,t){return Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}),e[n]}try{l({},"")}catch(e){l=function(e,n,t){return e[n]=t}}function s(e,n,t,o){var i=n&&n.prototype instanceof f?n:f,a=Object.create(i.prototype),c=new E(o||[]);return r(a,"_invoke",{value:x(e,t,c)}),a}function u(e,n,t){try{return{type:"normal",arg:e.call(n,t)}}catch(e){return{type:"throw",arg:e}}}e.wrap=s;var p={};function f(){}function d(){}function y(){}var h={};l(h,i,(function(){return this}));var b=Object.getPrototypeOf,m=b&&b(b(k([])));m&&m!==n&&t.call(m,i)&&(h=m);var A=y.prototype=f.prototype=Object.create(h);function v(e){["next","throw","return"].forEach((function(n){l(e,n,(function(e){return this._invoke(n,e)}))}))}function g(e,n){function o(r,i,a,c){var l=u(e[r],e,i);if("throw"!==l.type){var s=l.arg,p=s.value;return p&&"object"==Zp(p)&&t.call(p,"__await")?n.resolve(p.__await).then((function(e){o("next",e,a,c)}),(function(e){o("throw",e,a,c)})):n.resolve(p).then((function(e){s.value=e,a(s)}),(function(e){return o("throw",e,a,c)}))}c(l.arg)}var i;r(this,"_invoke",{value:function(e,t){function r(){return new n((function(n,r){o(e,t,n,r)}))}return i=i?i.then(r,r):r()}})}function x(e,n,t){var r="suspendedStart";return function(o,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw i;return{value:void 0,done:!0}}for(t.method=o,t.arg=i;;){var a=t.delegate;if(a){var c=j(a,t);if(c){if(c===p)continue;return c}}if("next"===t.method)t.sent=t._sent=t.arg;else if("throw"===t.method){if("suspendedStart"===r)throw r="completed",t.arg;t.dispatchException(t.arg)}else"return"===t.method&&t.abrupt("return",t.arg);r="executing";var l=u(e,n,t);if("normal"===l.type){if(r=t.done?"completed":"suspendedYield",l.arg===p)continue;return{value:l.arg,done:t.done}}"throw"===l.type&&(r="completed",t.method="throw",t.arg=l.arg)}}}function j(e,n){var t=n.method,r=e.iterator[t];if(void 0===r)return n.delegate=null,"throw"===t&&e.iterator.return&&(n.method="return",n.arg=void 0,j(e,n),"throw"===n.method)||"return"!==t&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+t+"' method")),p;var o=u(r,e.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,p;var i=o.arg;return i?i.done?(n[e.resultName]=i.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=void 0),n.delegate=null,p):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,p)}function C(e){var n={tryLoc:e[0]};1 in e&&(n.catchLoc=e[1]),2 in e&&(n.finallyLoc=e[2],n.afterLoc=e[3]),this.tryEntries.push(n)}function w(e){var n=e.completion||{};n.type="normal",delete n.arg,e.completion=n}function E(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(C,this),this.reset(!0)}function k(e){if(e){var n=e[i];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,o=function n(){for(;++r<e.length;)if(t.call(e,r))return n.value=e[r],n.done=!1,n;return n.value=void 0,n.done=!0,n};return o.next=o}}return{next:O}}function O(){return{value:void 0,done:!0}}return d.prototype=y,r(A,"constructor",{value:y,configurable:!0}),r(y,"constructor",{value:d,configurable:!0}),d.displayName=l(y,c,"GeneratorFunction"),e.isGeneratorFunction=function(e){var n="function"==typeof e&&e.constructor;return!!n&&(n===d||"GeneratorFunction"===(n.displayName||n.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,y):(e.__proto__=y,l(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},e.awrap=function(e){return{__await:e}},v(g.prototype),l(g.prototype,a,(function(){return this})),e.AsyncIterator=g,e.async=function(n,t,r,o,i){void 0===i&&(i=Promise);var a=new g(s(n,t,r,o),i);return e.isGeneratorFunction(t)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},v(A),l(A,c,"Generator"),l(A,i,(function(){return this})),l(A,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var n=Object(e),t=[];for(var r in n)t.push(r);return t.reverse(),function e(){for(;t.length;){var r=t.pop();if(r in n)return e.value=r,e.done=!1,e}return e.done=!0,e}},e.values=k,E.prototype={constructor:E,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(w),!e)for(var n in this)"t"===n.charAt(0)&&t.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function r(t,r){return a.type="throw",a.arg=e,n.next=t,r&&(n.method="next",n.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var c=t.call(i,"catchLoc"),l=t.call(i,"finallyLoc");if(c&&l){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(e,n){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&t.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=n&&n<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=n,i?(this.method="next",this.next=i.finallyLoc,p):this.complete(a)},complete:function(e,n){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&n&&(this.next=n),p},finish:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.finallyLoc===e)return this.complete(t.completion,t.afterLoc),w(t),p}},catch:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.tryLoc===e){var r=t.completion;if("throw"===r.type){var o=r.arg;w(t)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,t){return this.delegate={iterator:k(e),resultName:n,nextLoc:t},"next"===this.method&&(this.arg=void 0),p}},e}function Gp(e,n,t,r,o,i,a){try{var c=e[i](a),l=c.value}catch(e){return void t(e)}c.done?n(l):Promise.resolve(l).then(r,o)}function zp(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var Wp=function(e){var n,o,i=e.onSelect,a=(n=(0,r.useState)(!1),o=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,o)||function(e,n){if(e){if("string"==typeof e)return zp(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?zp(e,n):void 0}}(n,o)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),c=a[0],l=a[1];return(0,r.useEffect)((function(){var e;(e=Up().mark((function e(){var n,r,o;return Up().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,t.e(873).then(t.t.bind(t,18873,19));case 2:n=e.sent,r=n.layout,o=n.keymap,i({source:"demo",layout:r,keymap:o});case 6:case"end":return e.stop()}}),e)})),function(){var n=this,t=arguments;return new Promise((function(r,o){var i=e.apply(n,t);function a(e){Gp(i,r,o,a,c,"next",e)}function c(e){Gp(i,r,o,a,c,"throw",e)}a(void 0)}))})()}),[i]),(0,z.jsxs)(z.Fragment,{children:[(0,z.jsxs)(Cp,{style:{background:"none",border:"none"},onClick:function(){return l(!0)},children:[(0,z.jsx)(J,{name:"info",className:qp.help})," What is this?"]}),c&&(0,z.jsx)(Mp,{onDismiss:function(){return l(!1)}})]})},Fp=t(66379),Xp=t.n(Fp),Vp=t(9669),Qp=t.n(Vp),Hp=t(26729),Jp=t.n(Hp);function $p(e){return $p="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},$p(e)}function ef(){ef=function(){return e};var e={},n=Object.prototype,t=n.hasOwnProperty,r=Object.defineProperty||function(e,n,t){e[n]=t.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function l(e,n,t){return Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}),e[n]}try{l({},"")}catch(e){l=function(e,n,t){return e[n]=t}}function s(e,n,t,o){var i=n&&n.prototype instanceof f?n:f,a=Object.create(i.prototype),c=new E(o||[]);return r(a,"_invoke",{value:x(e,t,c)}),a}function u(e,n,t){try{return{type:"normal",arg:e.call(n,t)}}catch(e){return{type:"throw",arg:e}}}e.wrap=s;var p={};function f(){}function d(){}function y(){}var h={};l(h,i,(function(){return this}));var b=Object.getPrototypeOf,m=b&&b(b(k([])));m&&m!==n&&t.call(m,i)&&(h=m);var A=y.prototype=f.prototype=Object.create(h);function v(e){["next","throw","return"].forEach((function(n){l(e,n,(function(e){return this._invoke(n,e)}))}))}function g(e,n){function o(r,i,a,c){var l=u(e[r],e,i);if("throw"!==l.type){var s=l.arg,p=s.value;return p&&"object"==$p(p)&&t.call(p,"__await")?n.resolve(p.__await).then((function(e){o("next",e,a,c)}),(function(e){o("throw",e,a,c)})):n.resolve(p).then((function(e){s.value=e,a(s)}),(function(e){return o("throw",e,a,c)}))}c(l.arg)}var i;r(this,"_invoke",{value:function(e,t){function r(){return new n((function(n,r){o(e,t,n,r)}))}return i=i?i.then(r,r):r()}})}function x(e,n,t){var r="suspendedStart";return function(o,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw i;return{value:void 0,done:!0}}for(t.method=o,t.arg=i;;){var a=t.delegate;if(a){var c=j(a,t);if(c){if(c===p)continue;return c}}if("next"===t.method)t.sent=t._sent=t.arg;else if("throw"===t.method){if("suspendedStart"===r)throw r="completed",t.arg;t.dispatchException(t.arg)}else"return"===t.method&&t.abrupt("return",t.arg);r="executing";var l=u(e,n,t);if("normal"===l.type){if(r=t.done?"completed":"suspendedYield",l.arg===p)continue;return{value:l.arg,done:t.done}}"throw"===l.type&&(r="completed",t.method="throw",t.arg=l.arg)}}}function j(e,n){var t=n.method,r=e.iterator[t];if(void 0===r)return n.delegate=null,"throw"===t&&e.iterator.return&&(n.method="return",n.arg=void 0,j(e,n),"throw"===n.method)||"return"!==t&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+t+"' method")),p;var o=u(r,e.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,p;var i=o.arg;return i?i.done?(n[e.resultName]=i.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=void 0),n.delegate=null,p):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,p)}function C(e){var n={tryLoc:e[0]};1 in e&&(n.catchLoc=e[1]),2 in e&&(n.finallyLoc=e[2],n.afterLoc=e[3]),this.tryEntries.push(n)}function w(e){var n=e.completion||{};n.type="normal",delete n.arg,e.completion=n}function E(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(C,this),this.reset(!0)}function k(e){if(e){var n=e[i];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,o=function n(){for(;++r<e.length;)if(t.call(e,r))return n.value=e[r],n.done=!1,n;return n.value=void 0,n.done=!0,n};return o.next=o}}return{next:O}}function O(){return{value:void 0,done:!0}}return d.prototype=y,r(A,"constructor",{value:y,configurable:!0}),r(y,"constructor",{value:d,configurable:!0}),d.displayName=l(y,c,"GeneratorFunction"),e.isGeneratorFunction=function(e){var n="function"==typeof e&&e.constructor;return!!n&&(n===d||"GeneratorFunction"===(n.displayName||n.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,y):(e.__proto__=y,l(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},e.awrap=function(e){return{__await:e}},v(g.prototype),l(g.prototype,a,(function(){return this})),e.AsyncIterator=g,e.async=function(n,t,r,o,i){void 0===i&&(i=Promise);var a=new g(s(n,t,r,o),i);return e.isGeneratorFunction(t)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},v(A),l(A,c,"Generator"),l(A,i,(function(){return this})),l(A,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var n=Object(e),t=[];for(var r in n)t.push(r);return t.reverse(),function e(){for(;t.length;){var r=t.pop();if(r in n)return e.value=r,e.done=!1,e}return e.done=!0,e}},e.values=k,E.prototype={constructor:E,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(w),!e)for(var n in this)"t"===n.charAt(0)&&t.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function r(t,r){return a.type="throw",a.arg=e,n.next=t,r&&(n.method="next",n.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var c=t.call(i,"catchLoc"),l=t.call(i,"finallyLoc");if(c&&l){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(e,n){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&t.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=n&&n<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=n,i?(this.method="next",this.next=i.finallyLoc,p):this.complete(a)},complete:function(e,n){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&n&&(this.next=n),p},finish:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.finallyLoc===e)return this.complete(t.completion,t.afterLoc),w(t),p}},catch:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.tryLoc===e){var r=t.completion;if("throw"===r.type){var o=r.arg;w(t)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,t){return this.delegate={iterator:k(e),resultName:n,nextLoc:t},"next"===this.method&&(this.arg=void 0),p}},e}function nf(e,n,t,r,o,i,a){try{var c=e[i](a),l=c.value}catch(e){return void t(e)}c.done?n(l):Promise.resolve(l).then(r,o)}function tf(e){return function(){var n=this,t=arguments;return new Promise((function(r,o){var i=e.apply(n,t);function a(e){nf(i,r,o,a,c,"next",e)}function c(e){nf(i,r,o,a,c,"throw",e)}a(void 0)}))}}function rf(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,sf(r.key),r)}}function of(e,n){return of=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,n){return e.__proto__=n,e},of(e,n)}function af(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function cf(e){return cf=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},cf(e)}function lf(e,n,t){return(n=sf(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function sf(e){var n=function(e,n){if("object"!==$p(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==$p(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===$p(n)?n:String(n)}var uf="".concat(E.replace("http","ws"),"/github/events"),pf=function(e){!function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),n&&of(e,n)}(f,e);var n,t,r,o,i,a,c,l,s,u,p=(s=f,u=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,n=cf(s);if(u){var t=cf(this).constructor;e=Reflect.construct(n,arguments,t)}else e=n.apply(this,arguments);return function(e,n){if(n&&("object"===$p(n)||"function"==typeof n))return n;if(void 0!==n)throw new TypeError("Derived constructors may only return object or undefined");return af(e)}(this,e)});function f(){var e;!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,f);for(var n=arguments.length,t=new Array(n),r=0;r<n;r++)t[r]=arguments[r];return lf(af(e=p.call.apply(p,[this].concat(t))),"token",null),lf(af(e),"initializing",!1),lf(af(e),"installations",null),lf(af(e),"repositories",null),lf(af(e),"repoInstallationMap",null),lf(af(e),"features",null),lf(af(e),"socket",null),e}return n=f,t=[{key:"_request",value:(l=tf(ef().mark((function e(n){var t;return ef().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return"string"==typeof n&&(n={url:n}),n.url.startsWith("/")&&(n.url="".concat(E).concat(n.url)),n.headers=Object.assign({},n.headers),this.token&&!n.headers.Authorization&&(n.headers.Authorization="Bearer ".concat(this.token)),e.prev=4,e.next=7,Qp()(n);case 7:return e.abrupt("return",e.sent);case 10:throw e.prev=10,e.t0=e.catch(4),401===(null===(t=e.t0.response)||void 0===t?void 0:t.status)&&(console.error("Authentication failed."),this.emit("authentication-failed",e.t0.response)),e.t0;case 14:case"end":return e.stop()}}),e,this,[[4,10]])}))),function(e){return l.apply(this,arguments)})},{key:"init",value:function(){var e=this;return this.initializing||(this.initializing=tf(ef().mark((function n(){var t,r,o,i,a,c;return ef().wrap((function(n){for(;;)switch(n.prev=n.next){case 0:if(e.initEvents(),t="".concat(E,"/github/installation"),(r=new URLSearchParams(window.location.search)).get("setup_action")&&r.get("installation_id")&&e.beginLoginFlow(),!r.get("blocked")){n.next=7;break}return setTimeout((function(){return e.emit("blocked")})),n.abrupt("return");case 7:if(o=r.get("token"),!window.localStorage.auth_token&&o&&(window.history.replaceState({},null,window.location.pathname),window.localStorage.auth_token=o),!window.localStorage.auth_token){n.next=22;break}return e.token=window.localStorage.auth_token,n.next=13,e._request(t);case 13:i=n.sent,a=i.data,c=a.installations.filter((function(e){return e.suspended_at})),a.installations.length===c.length&&(console.warn("No GitHub app installation found for authenticated user."),e.emit("app-not-installed")),e.username=a.username,e.installations=a.installations,e.repositories=a.repositories,e.repoInstallationMap=a.repoInstallationMap,e.emit("authenticated");case 22:case"end":return n.stop()}}),n)})))()),this.initializing}},{key:"initEvents",value:function(){var e=this,n=[],t=function(t){e.socket.readyState!==window.WebSocket.OPEN?(n.push(t),console.log("buffering websocket message",{readyState:e.socket.readyState},t)):e.socket.send(t)};this.socket=new window.WebSocket(uf),this.socket.onopen=function(){console.log(new Date,"connected to console"),function(){for(var t;t=n.shift();)console.log("sending buffered websocket message",t),e.socket.send(t)}(),setInterval((function(){t(JSON.stringify({message:"ping"}))}),2e4)},this.socket.onclose=function(){return console.log(new Date,"disconnected from server")},this.socket.onerror=function(e){return console.error(new Date,e)},this.socket.onmessage=function(n){var t=JSON.parse(n.data);"workflow_run"===t.event&&e.emit("build-update",t.workflow_run)},this.on("authenticated",(function(){var n;null!==(n=e.installations)&&void 0!==n&&n.length&&(e.fetchAvailableFeatures(),t(JSON.stringify({message:"authorize",data:e.token})))}))}},{key:"beginLoginFlow",value:function(){window.localStorage.removeItem("auth_token"),window.location.href="".concat(E,"/github/authorize")}},{key:"beginInstallAppFlow",value:function(){window.location.href="https://github.com/apps/".concat("keymap-editor","/installations/new")}},{key:"manageInstallationRepos",value:function(e){var n=this.installations.find((function(n){return n.id===e}));window.location.href=n.html_url}},{key:"isGitHubAuthorized",value:function(){return!!this.token}},{key:"isAppSuspendedForRepoSelection",value:function(){var e,n,t;return(null===(e=this.installations)||void 0===e?void 0:e.length)>0&&(null===(n=this.installations)||void 0===n?void 0:n.every((function(e){return e.suspended_at})))&&(null===(t=this.installations)||void 0===t?void 0:t.some((function(e){return"all"===e.repository_selection})))}},{key:"isAppInstalled",value:function(){var e,n;return(null===(e=this.installations)||void 0===e?void 0:e.length)&&(null===(n=this.repositories)||void 0===n?void 0:n.length)}},{key:"fetchRepoBranches",value:(c=tf(ef().mark((function e(n){var t,r,o,i;return ef().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=encodeURIComponent(this.repoInstallationMap[n.full_name]),r=encodeURIComponent(n.full_name),e.next=4,this._request("/github/installation/".concat(t,"/").concat(r,"/branches"));case 4:return o=e.sent,i=o.data,e.abrupt("return",i);case 7:case"end":return e.stop()}}),e,this)}))),function(e){return c.apply(this,arguments)})},{key:"fetchBranchKeyboards",value:(a=tf(ef().mark((function e(n,t){var r,o,i,a;return ef().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=encodeURIComponent(this.repoInstallationMap[n.full_name]),o=encodeURIComponent(n.full_name),e.next=4,this._request("/github/installation/".concat(r,"/").concat(o,"/keyboards/").concat(t));case 4:return i=e.sent,a=i.data,e.abrupt("return",a);case 7:case"end":return e.stop()}}),e,this)}))),function(e,n){return a.apply(this,arguments)})},{key:"fetchLayoutAndKeymap",value:(i=tf(ef().mark((function e(n,t){var r,o,i,a,c,l,s,u,p,f,d,y,h,b,m,A=arguments;return ef().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=(A.length>2&&void 0!==A[2]?A[2]:{}).keyboard,o=encodeURIComponent(this.repoInstallationMap[n]),i=encodeURIComponent(n),a=new URL("".concat(E,"/github/keyboard-files/").concat(o,"/").concat(i)),c=new URLSearchParams,t&&c.set("branch",t),r&&c.set("keyboard",r),a.search=c.toString(),e.prev=8,e.next=11,this._request(a.toString());case 11:return l=e.sent,s=l.data,u=s.info.layouts,p=s.keymap,f=Object.keys(s.info.layouts)[0],d=p.chosen["zmk,matrix_transform"]?p.chosen["zmk,matrix_transform"].replace(/^&/,""):null,y=u[d]||u[f],h=y.layout,e.abrupt("return",{layoutMetadata:y,layout:h,keymap:p,keyboards:s.keyboards,default:s.defaultKeymap,sensors:s.sensors});case 21:throw e.prev=21,e.t0=e.catch(8),400===(null===(b=e.t0.response)||void 0===b?void 0:b.status)?(console.error("Failed to load keymap and layout from github",e.t0.response.data),this.emit("repo-validation-error",e.t0.response.data)):500===(null===(m=e.t0.response)||void 0===m?void 0:m.status)&&"LayoutGenerationError"===e.t0.response.data.name&&this.emit("layout-generation-failed",e.t0.response.data),e.t0;case 25:case"end":return e.stop()}}),e,this,[[8,21]])}))),function(e,n){return i.apply(this,arguments)})},{key:"fetchAvailableFeatures",value:(o=tf(ef().mark((function e(){var n,t;return ef().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(this.isGitHubAuthorized()){e.next=2;break}return e.abrupt("return",{betaFeatures:[]});case 2:return this.features||(this.features=this._request("".concat(E,"/github/features"))),e.next=5,this.features;case 5:return n=e.sent,t=n.data,e.abrupt("return",t);case 8:case"end":return e.stop()}}),e,this)}))),function(){return o.apply(this,arguments)})},{key:"fetchBuildStatus",value:(r=tf(ef().mark((function e(n,t){var r,o,i,a,c;return ef().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=encodeURIComponent(this.repoInstallationMap[n]),o=encodeURIComponent(n),i=new URL("".concat(E,"/github/latest-run/").concat(r,"/").concat(o,"/").concat(encodeURIComponent(t))),e.next=5,this._request(i.toString());case 5:return a=e.sent,c=a.data,e.abrupt("return",c);case 8:case"end":return e.stop()}}),e,this)}))),function(e,n){return r.apply(this,arguments)})},{key:"commitChanges",value:function(e,n,t,r){var o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{},i=o.message,a=void 0===i?null:i,c=o.experimentalSettings,l=void 0===c?{}:c,s=o.keyboard,u=encodeURIComponent(this.repoInstallationMap[e]),p=encodeURIComponent(e),f=new URL("".concat(E,"/github/keyboard-files/").concat(u,"/").concat(p,"/").concat(encodeURIComponent(n))),d=l.enableBehaviorEditing,y=void 0!==d&&d,h=new URLSearchParams({enableBehaviorEditing:y});return s&&h.set("keyboard",s),f.search=h.toString(),this._request({url:f.toString(),method:"POST",headers:{"Content-Type":"application/json"},data:{keyboard:s,layout:t,keymap:r,message:a,enableBehaviorEditing:y}})}}],t&&rf(n.prototype,t),Object.defineProperty(n,"prototype",{writable:!1}),f}(Jp()),ff=new pf,df={maxHeight:"300px",overflow:"auto",padding:"10px",fontFamily:"monospace",fontSize:"80%",backgroundColor:"rgb(239, 239, 239, 0.5)"},yf={margin:"10px"};function hf(e){var n=e.onDismiss,t=e.title,r=e.errors,o=e.otherRepoOrBranchAvailable,i=void 0!==o&&o,a=function(e){return"InfoValidationError"===e?"config/info.json":"KeymapValidationError"===e?"config/keymap.json":void 0}(t);return(0,z.jsx)(gn,{children:(0,z.jsxs)(fn,{onDismiss:n,children:[(0,z.jsx)("h2",{children:t}),a&&(0,z.jsxs)("p",{children:["Errors in the file ",(0,z.jsx)("code",{children:a}),"."]}),(0,z.jsx)("ul",{style:df,children:r.map((function(e,n){return(0,z.jsx)("li",{style:yf,children:e},n)}))}),i&&(0,z.jsx)("p",{children:"If you have another branch or repository with the required metadata files you may switch to them instead."})]})})}var bf="selectedGithubRepository",mf="selectedGithubBranch",Af="selectedGithubKeyboard";function vf(e,n){try{return JSON.parse(localStorage.getItem("".concat(Af,":").concat(e,":").concat(n)))}catch(e){return null}}function gf(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var xf={blocked:!1,initialized:!1,selectedRepoId:null,selectedBranchName:null,selectedKeyboard:null,branches:[],keyboards:[],loadingBranches:!1,loadingKeyboards:!1,loadingKeyboard:!1,loadError:null,warningFlags:[]},jf=(0,Va.oM)({name:"github-picker",initialState:xf,reducers:{clearSelection:function(e){e.loadError=null,e.warningFlags=[]},integrationInitialized:function(e){var n,t=function(){try{return JSON.parse(localStorage.getItem(bf))}catch(e){return null}}(),r=ff.repositories||[];dp()(r,{id:t})?n=t:r.length>0&&(n=r[0].id),e.initialized=!0,e.selectedRepoId=n},integrationBlocked:function(e,n){e.blocked=!0},integrationError:function(e,n){e.loadingKeyboard=!1,e.loadError=n.payload.error},loadingBranchesList:function(e){e.loadingBranches=!0},loadedBranchesList:function(e,n){var t=e.selectedRepoId,r=n.payload.branches,o=dp()(ff.repositories,{id:t});e.branches=r,e.keyboard=null,e.keyboards=[],e.loadingBranches=!1;for(var i=we()(r,"name"),a=o.default_branch,c=function(e){try{return JSON.parse(localStorage.getItem("".concat(mf,":").concat(e)))}catch(e){return null}}(t),l=0,s=[1===r.length?r[0].name:null,c,a];l<s.length;l++){var u=s[l];if(i.includes(u)){e.selectedBranchName=u,e.selectedKeyboard=vf(t,u);break}}},loadingKeyboardsList:function(e){e.loadingKeyboards=!0},loadedKeyboardsList:function(e,n){var t=e.selectedRepoId,r=e.selectedBranchName,o=n.payload,i=o.keyboards,a=o.default;e.keyboards=i,e.loadingKeyboards=!1;for(var c=vf(t,r),l=0,s=[1===i.length?i[0]:null,c,a];l<s.length;l++){var u=s[l];if(i.includes(u)){e.selectedKeyboard=u;break}}},selectedRepository:function(e,n){var t;e.selectedRepoId=n.payload.repository.id,e.selectedBranchName=null,e.selectedKeyboard=null,t=e.selectedRepoId,localStorage.setItem(bf,JSON.stringify(t))},selectedBranch:function(e,n){var t,r;e.selectedBranchName=n.payload.name,e.selectedKeyboard=vf(e.selectedRepoId,e.selectedBranchName),t=e.selectedRepoId,r=e.selectedBranchName,localStorage.setItem("".concat(mf,":").concat(t),JSON.stringify(r))},selectedKeyboard:function(e,n){var t,r,o;e.selectedKeyboard=n.payload.name,t=e.selectedRepoId,r=e.selectedBranchName,o=e.selectedKeyboard,localStorage.setItem("".concat(Af,":").concat(t,":").concat(r),JSON.stringify(o))},keyboardLoading:function(e,n){e.loadingKeyboard=!0,e.loadError=null},keyboardLoadedSuccess:function(e,n){var t=n.payload.response.keymap;e.warningFlags=t.warningFlags||[],e.loadingKeyboard=!1},selectedInvalidRepo:function(e,n){},layoutGenerationFailed:function(e,n){}}});function Cf(){var e,n,t,o=(n=(0,r.useReducer)(jf.reducer,xf),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||function(e,n){if(e){if("string"==typeof e)return gf(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?gf(e,n):void 0}}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=o[0],a=(e=o[1],(0,r.useMemo)((function(){return Object.keys(jf.actions).reduce((function(n,t){return n[t]=function(){var n;return e((n=jf.actions)[t].apply(n,arguments))},n}),{})}),[e]));return[i,a]}function wf(e){var n=e.onDismiss,t=e.missingPath,r=e.otherRepoOrBranchAvailable;return(0,z.jsx)(gn,{children:(0,z.jsxs)(fn,{onDismiss:n,children:[(0,z.jsx)("h2",{children:"Missing keyboard definition?"}),(0,z.jsxs)("p",{children:["Hi there! The repository you're trying to load from doesn't have a defined ",(0,z.jsx)("code",{children:t}),". Right now this application is expecting to look at that directory to discover keyboard definitions for experimental features like automatic layout generation."]}),(0,z.jsx)("p",{children:"Is it possible that the keyboard you're trying to edit relies on data from the ZMK or other repositories? Fetching from other repositories is not currently supported."}),(0,z.jsx)("p",{children:"I'm a humble developer and have only worked with configurations for my own handwired builds, so if you feel you're receiving this message in error then please consider opening an issue on this project's GitHub repository to let me know what I can do differently."}),r&&(0,z.jsx)("p",{children:"If you have another branch or repository set up as your zmk-config repo you may switch to that instead."})]})})}wf.propTypes={onDismiss:G().func.isRequired,missingPath:G().string.isRequired,otherRepoOrBranchAvailable:G().bool};var Ef=wf;function kf(e){var n=e.installation,t="https://github.com/settings/installations/".concat(n.id);return(0,z.jsx)(gn,{children:(0,z.jsxs)(fn,{dismissText:null,children:[(0,z.jsx)("h2",{children:"App Disabled"}),(0,z.jsxs)("p",{children:["Hello there, your installation of the keymap editor's GitHub app is currently disabled. ",(0,z.jsx)("em",{children:"This is not a ban!"})]}),(0,z.jsxs)("p",{children:["When you installed this app for your GitHub account you installed it for ",(0,z.jsx)("em",{children:"all"})," of your repositories, and we need to do a little cleanup as we roll out some new features as it's very likely you will have other repositories unrelated to ZMK keyboard configurations."]}),(0,z.jsx)("h3",{children:"How to fix this"}),(0,z.jsxs)("p",{children:["If you're still interested in using the keymap editor (and I'd love for you to be able to) please go to your ",(0,z.jsx)(Ra,{href:t,children:"installation settings"})," on GitHub and select only the repositories you want to use with this tool. As soon as that's done you'll be sent back here and ready to go."]}),(0,z.jsx)("p",{children:"As always, if you're looking for clarification or further assistance please visit our GitHub repo and open an issue or start a discussion."})]})})}kf.propTypes={installation:G().shape({id:G().number.isRequired}).isRequired};var Of=kf;function Sf(e){var n=e.onDismiss,t=e.otherRepoOrBranchAvailable,r=(0,z.jsx)(Ra,{external:!0,href:"https://github.com/nickcoutsos/keymap-editor/issues",children:"issue"});return(0,z.jsx)(gn,{children:(0,z.jsxs)(fn,{onDismiss:n,children:[(0,z.jsx)("h2",{children:"Is this a zmk-config repo?"}),(0,z.jsxs)("p",{children:["Hi there! The repository you're trying to load from doesn't have a defined ",(0,z.jsx)("code",{children:"config"})," directory. Right now this application is expecting to look at that directory to discover keymaps and other metadata."]}),t&&(0,z.jsx)("p",{children:"If you have another branch or repository set up as your zmk-config repo you may switch to that instead."}),(0,z.jsxs)("p",{children:["This is a solo project and I have only worked with a few kinds of zmk config repos, so if this is a valid repo for zmk-powered keyboard firmware then please consider opening an ",r," to let me know what I can do differently."]})]})})}Sf.propTypes={onDismiss:G().func.isRequired,otherRepoOrBranchAvailable:G().bool};var Bf=Sf;function Pf(e){var n=e.onDismiss,t=(0,z.jsx)(Ra,{external:!0,href:"https://github.com/nickcoutsos/keymap-editor/issues",children:"Keymap Editor Issues"});return(0,z.jsx)(gn,{children:(0,z.jsxs)(fn,{onDismiss:n,children:[(0,z.jsx)("h2",{children:"Automatic Layout Generation Failed"}),(0,z.jsx)("p",{children:"No accompanying layout was found with your keymap file and the Keymap Editor was unable to generate one automatically for you."}),(0,z.jsx)("p",{children:"Something went wrong with the attempted automatic layout generation for your keyboard and there's no automatic way to recover, but if you want to reach out for assistance maybe we can work together to resolve any technical issues or else craft a manual layout for your keyboard."}),(0,z.jsxs)("p",{children:["Share your experience at ",t,"."]})]})})}Pf.propTypes={onDismiss:G().func.isRequired};var If=Pf,Tf=function(){return(0,z.jsx)(gn,{children:(0,z.jsxs)(fn,{dismissText:null,children:[(0,z.jsx)("h2",{children:"GitHub Account Blocked"}),(0,z.jsx)("p",{children:"Hi, your access to this application has been disabled."}),(0,z.jsxs)("p",{children:["This could be an innocent mistake. Possibly you've misunderstood the intended purpose of this app, possibly I got carried away with some housekeeping. If you want more information or feel this was done in error, please reach out to ",(0,z.jsx)("em",{children:"nickcoutsos"})," on GitHub or Discord (you can find me on the ZMK server)."]})]})})},Df=(0,z.jsx)(Ra,{external:!0,href:"https://github.com/nickcoutsos/keymap-editor/issues",children:"Keymap Editor Issues"}),Lf=(0,z.jsx)(Ra,{href:"https://github.com/nickcoutsos/keymap-editor/wiki/Defining-keyboard-layouts",external:!0,children:"Keymap Editor Wiki: Defining keyboard layouts"}),Rf=(0,z.jsx)(Ra,{href:"https://nickcoutsos.github.io/keymap-layout-tools/",external:!0,children:"Keymap Layout Tools - Helper"});function Nf(e){var n=e.onDismiss;return(0,z.jsx)(gn,{children:(0,z.jsxs)(fn,{onDismiss:n,children:[(0,z.jsx)("h2",{children:"No Layout Available"}),(0,z.jsx)("p",{children:"Your keymap doesn't have an accompanying layout and we don't know enough about your keyboard to generate one for you automatically."}),(0,z.jsxs)("p",{children:["If you meant to include layout data, please make sure that its in the same directory as your keymap, like ",(0,z.jsx)("code",{children:"config/info.json"})," or ",(0,z.jsx)("code",{children:"config/<keyboard>.json"}),"."]}),(0,z.jsxs)("p",{children:["For more information about how Keymap Editor layotus are defined, you can read ",Lf,", and if you need an environment to quickly test changes to a layout try ",Rf,"."]}),(0,z.jsxs)("p",{children:["Don't hesitate to reach out via ",Df," for assistance, and maybe we can work together to resolve any technical issues or else craft a manual layout for your keyboard."]})]})})}Nf.propTypes={onDismiss:G().func.isRequired};var _f=Nf;function Mf(){return(0,z.jsx)(gn,{centerOnly:!0,children:(0,z.jsxs)(fn,{dismissText:null,style:{width:"400px"},children:[(0,z.jsx)("h2",{children:"Authenticate with GitHub"}),(0,z.jsx)("p",{children:"Please log-in to GitHub to continue."}),(0,z.jsx)(oe,{collection:"brands",icon:"github",text:"Login with GitHub",style:{display:"block",margin:"0 auto"},onClick:function(){return ff.beginLoginFlow()}})]})})}Mf.propTypes={};var Yf=Mf;function Kf(){var e=ff.username?"Welcome, ".concat(ff.username,"!"):"Welcome!";return(0,z.jsx)(gn,{centerOnly:!0,children:(0,z.jsxs)(fn,{dismissText:null,children:[(0,z.jsx)("h2",{children:e}),(0,z.jsx)("p",{children:"To begin import your own keymaps, you'll need to grant the Keymap Editor app access to the relevant GitHub repositories. Please make sure to only select repositories that are set up for ZMK keyboard configurations."}),(0,z.jsxs)("p",{children:["This app requires read and write access to the repositories you select in order to write to arbitrary ",(0,z.jsx)("code",{children:".keymap"})," files. It also receives all build action events for the repository, which generates quite a bit of traffic. Selecting ",(0,z.jsx)("code",{children:"All repositories"})," for the app installation will lead to a suspension."]}),(0,z.jsx)(oe,{collection:"brands",icon:"github",text:"Add Repository",style:{display:"block",margin:"0 auto"},onClick:function(){return ff.beginInstallAppFlow()}})]})})}Kf.propTypes={};var qf=Kf;function Zf(e){return Zf="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Zf(e)}function Uf(e){return function(e){if(Array.isArray(e))return Hf(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||Qf(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Gf(){Gf=function(){return e};var e={},n=Object.prototype,t=n.hasOwnProperty,r=Object.defineProperty||function(e,n,t){e[n]=t.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function l(e,n,t){return Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}),e[n]}try{l({},"")}catch(e){l=function(e,n,t){return e[n]=t}}function s(e,n,t,o){var i=n&&n.prototype instanceof f?n:f,a=Object.create(i.prototype),c=new E(o||[]);return r(a,"_invoke",{value:x(e,t,c)}),a}function u(e,n,t){try{return{type:"normal",arg:e.call(n,t)}}catch(e){return{type:"throw",arg:e}}}e.wrap=s;var p={};function f(){}function d(){}function y(){}var h={};l(h,i,(function(){return this}));var b=Object.getPrototypeOf,m=b&&b(b(k([])));m&&m!==n&&t.call(m,i)&&(h=m);var A=y.prototype=f.prototype=Object.create(h);function v(e){["next","throw","return"].forEach((function(n){l(e,n,(function(e){return this._invoke(n,e)}))}))}function g(e,n){function o(r,i,a,c){var l=u(e[r],e,i);if("throw"!==l.type){var s=l.arg,p=s.value;return p&&"object"==Zf(p)&&t.call(p,"__await")?n.resolve(p.__await).then((function(e){o("next",e,a,c)}),(function(e){o("throw",e,a,c)})):n.resolve(p).then((function(e){s.value=e,a(s)}),(function(e){return o("throw",e,a,c)}))}c(l.arg)}var i;r(this,"_invoke",{value:function(e,t){function r(){return new n((function(n,r){o(e,t,n,r)}))}return i=i?i.then(r,r):r()}})}function x(e,n,t){var r="suspendedStart";return function(o,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw i;return{value:void 0,done:!0}}for(t.method=o,t.arg=i;;){var a=t.delegate;if(a){var c=j(a,t);if(c){if(c===p)continue;return c}}if("next"===t.method)t.sent=t._sent=t.arg;else if("throw"===t.method){if("suspendedStart"===r)throw r="completed",t.arg;t.dispatchException(t.arg)}else"return"===t.method&&t.abrupt("return",t.arg);r="executing";var l=u(e,n,t);if("normal"===l.type){if(r=t.done?"completed":"suspendedYield",l.arg===p)continue;return{value:l.arg,done:t.done}}"throw"===l.type&&(r="completed",t.method="throw",t.arg=l.arg)}}}function j(e,n){var t=n.method,r=e.iterator[t];if(void 0===r)return n.delegate=null,"throw"===t&&e.iterator.return&&(n.method="return",n.arg=void 0,j(e,n),"throw"===n.method)||"return"!==t&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+t+"' method")),p;var o=u(r,e.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,p;var i=o.arg;return i?i.done?(n[e.resultName]=i.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=void 0),n.delegate=null,p):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,p)}function C(e){var n={tryLoc:e[0]};1 in e&&(n.catchLoc=e[1]),2 in e&&(n.finallyLoc=e[2],n.afterLoc=e[3]),this.tryEntries.push(n)}function w(e){var n=e.completion||{};n.type="normal",delete n.arg,e.completion=n}function E(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(C,this),this.reset(!0)}function k(e){if(e){var n=e[i];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,o=function n(){for(;++r<e.length;)if(t.call(e,r))return n.value=e[r],n.done=!1,n;return n.value=void 0,n.done=!0,n};return o.next=o}}return{next:O}}function O(){return{value:void 0,done:!0}}return d.prototype=y,r(A,"constructor",{value:y,configurable:!0}),r(y,"constructor",{value:d,configurable:!0}),d.displayName=l(y,c,"GeneratorFunction"),e.isGeneratorFunction=function(e){var n="function"==typeof e&&e.constructor;return!!n&&(n===d||"GeneratorFunction"===(n.displayName||n.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,y):(e.__proto__=y,l(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},e.awrap=function(e){return{__await:e}},v(g.prototype),l(g.prototype,a,(function(){return this})),e.AsyncIterator=g,e.async=function(n,t,r,o,i){void 0===i&&(i=Promise);var a=new g(s(n,t,r,o),i);return e.isGeneratorFunction(t)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},v(A),l(A,c,"Generator"),l(A,i,(function(){return this})),l(A,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var n=Object(e),t=[];for(var r in n)t.push(r);return t.reverse(),function e(){for(;t.length;){var r=t.pop();if(r in n)return e.value=r,e.done=!1,e}return e.done=!0,e}},e.values=k,E.prototype={constructor:E,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(w),!e)for(var n in this)"t"===n.charAt(0)&&t.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function r(t,r){return a.type="throw",a.arg=e,n.next=t,r&&(n.method="next",n.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var c=t.call(i,"catchLoc"),l=t.call(i,"finallyLoc");if(c&&l){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(e,n){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&t.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=n&&n<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=n,i?(this.method="next",this.next=i.finallyLoc,p):this.complete(a)},complete:function(e,n){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&n&&(this.next=n),p},finish:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.finallyLoc===e)return this.complete(t.completion,t.afterLoc),w(t),p}},catch:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.tryLoc===e){var r=t.completion;if("throw"===r.type){var o=r.arg;w(t)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,t){return this.delegate={iterator:k(e),resultName:n,nextLoc:t},"next"===this.method&&(this.arg=void 0),p}},e}function zf(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Wf(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?zf(Object(t),!0).forEach((function(n){Ff(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):zf(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Ff(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Zf(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Zf(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Zf(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Xf(e,n,t,r,o,i,a){try{var c=e[i](a),l=c.value}catch(e){return void t(e)}c.done?n(l):Promise.resolve(l).then(r,o)}function Vf(e){return function(){var n=this,t=arguments;return new Promise((function(r,o){var i=e.apply(n,t);function a(e){Xf(i,r,o,a,c,"next",e)}function c(e){Xf(i,r,o,a,c,"throw",e)}a(void 0)}))}}function Qf(e,n){if(e){if("string"==typeof e)return Hf(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Hf(e,n):void 0}}function Hf(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var Jf=function(e){return Xp()(e,{name:"LayoutGenerationError"})},$f=function(e){return Xp()(e,{name:"MissingRepoFile",path:"config"})},ed=function(e){return Xp()(e,{name:"MissingRepoFile",path:"config/info.json"})||Xp()(e,{name:"MissingRepoFile",intent:"metadata"})},nd=function(e){return"MissingRepoFile"===(null==e?void 0:e.name)&&(null==e?void 0:e.path.match(/config\/boards\/[^/]+\/[^/]+\/[^/]+?\..*$/))};function td(e){var n,t,o=(n=Cf(),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||Qf(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=o[0],a=o[1],c=i.initialized,l=i.branches,s=i.selectedRepoId,u=i.selectedBranchName,p=i.keyboards,f=i.selectedKeyboard,d=i.loadingBranches,y=i.loadingKeyboards,h=i.loadingKeyboard,b=i.loadError,m=e.onSelect;(0,r.useEffect)((function(){ff.init().then(a.integrationInitialized),ff.on("authentication-failed",(function(){return ff.beginLoginFlow()})),ff.on("blocked",a.integrationBlocked),ff.on("repo-validation-error",(function(e){return a.integrationError({error:e})})),ff.on("layout-generation-failed",(function(e){return a.integrationError({error:e})}))}),[a]);var A=(0,r.useCallback)(function(){var e=Vf(Gf().mark((function e(n,t,r){var o,i,c,l;return Gf().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return i=ff.repositories,c=null===(o=dp()(i,{id:n}))||void 0===o?void 0:o.full_name,a.keyboardLoading(),e.next=5,ff.fetchLayoutAndKeymap(c,t,{keyboard:r});case 5:l=e.sent,a.keyboardLoadedSuccess({response:l}),m(Wf({github:{repository:c,branch:t,keyboard:r}},l));case 8:case"end":return e.stop()}}),e)})));return function(n,t,r){return e.apply(this,arguments)}}(),[a,m]);(0,r.useEffect)((function(){s&&Vf(Gf().mark((function e(){var n,t;return Gf().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return a.loadingBranchesList(),n=dp()(ff.repositories,{id:s}),e.next=4,ff.fetchRepoBranches(n);case 4:t=e.sent,a.loadedBranchesList({branches:t});case 6:case"end":return e.stop()}}),e)})))()}),[s,a]),(0,r.useEffect)((function(){s&&u&&Vf(Gf().mark((function e(){var n,t;return Gf().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return a.loadingKeyboardsList(),n=dp()(ff.repositories,{id:s}),e.next=4,ff.fetchBranchKeyboards(n,u);case 4:t=e.sent,a.loadedKeyboardsList(t);case 6:case"end":return e.stop()}}),e)})))()}),[s,u,a]);var v=(0,r.useCallback)((function(){return A(s,u,f)}),[A,s,u,f]);if((0,r.useEffect)((function(){s&&u&&A(s,u,f)}),[s,u,f,A]),!c)return null;if(i.blocked)return(0,z.jsx)(Tf,{});if(!ff.isGitHubAuthorized())return(0,z.jsx)(Yf,{});if(!ff.isAppInstalled())return(0,z.jsx)(qf,{});if(ff.isAppSuspendedForRepoSelection())return(0,z.jsx)(Of,{installation:ff.installations[0]});var g=ff.repositories.map((function(e){return{id:e.id,name:e.name,full:e.full_name}})),x=ff.installations.map((function(e){return{id:e.id,type:"installation",name:"[Manage available repos for ".concat(e.account.login,"...]")}})),j=[].concat(Uf(g),Uf(x)),C=l.map((function(e){return{id:e.name,name:e.name}})),w=p.map((function(e){return{id:e,name:e}}));if(Jf(b))return(0,z.jsx)(If,{onDismiss:a.clearSelection});if(nd(b))return(0,z.jsx)(Ef,{onDismiss:a.clearSelection});if(ed(b))return(0,z.jsx)(_f,{onDismiss:a.clearSelection});if($f(b))return(0,z.jsx)(Bf,{onDismiss:a.clearSelection,otherRepoOrBranchAvailable:j.length>1||C.length>0});if(b&&!Jf(b)&&!nd(b)&&!ed(b)&&!$f(b))return(0,z.jsx)(hf,{title:b.name,errors:b.errors,otherRepoOrBranchAvailable:j.length>1||C.length>0,onDismiss:a.clearSelection});var E=dp()(g,{id:s}),k=dp()(C,{id:u}),O=dp()(w,{id:f});return(0,z.jsxs)(z.Fragment,{children:[(0,z.jsx)(kp,{label:"Repository",value:E,options:j,onChange:function(e){var n=e.id;if("installation"!==e.type){var t=dp()(g,{id:n});a.selectedRepository({repository:t})}else ff.manageInstallationRepos(n)},getValue:function(e){return e.id},getOptionValue:function(e){return e.id},getOptionLabel:function(e){return e.full||e.name},formatOptionLabel:function(e,n){var t=n.context;return(0,z.jsx)(z.Fragment,{children:"value"===t?e.name:e.full||e.name})}}),l.length>1&&(0,z.jsx)(kp,{label:"Branch",value:k,options:C,onChange:function(e){var n=e.id;return a.selectedBranch({name:n})},getOptionValue:function(e){return e.id},getOptionLabel:function(e){return e.name}}),p.length>1&&(0,z.jsx)(kp,{label:"Keyboard",value:O,options:w,getOptionValue:function(e){return e.id},getOptionLabel:function(e){return e.name},onChange:function(e){var n=e.id;return a.selectedKeyboard({name:n})}}),(d||y||h)&&(0,z.jsx)(jp,{children:(0,z.jsx)(de,{})}),u&&!h&&(0,z.jsx)(Cp,{onClick:v,children:(0,z.jsx)(J,{name:"sync"})})]})}td.propTypes={onSelect:G().func.isRequired};var rd=td,od=st()([S&&{id:"demo",name:"Demo Keyboard"},O&&{id:"local",name:"Local"},k&&{id:"github",name:"GitHub"}]),id=localStorage.getItem("selectedSource"),ad=(1===od.length?od[0].id:null)||(od.find((function(e){return e.id===id}))?id:od[0].id);function cd(e){var n=e.onDismiss,t=(0,z.jsx)(Ra,{external:!0,href:"https://discord.com/users/115507966555193345",children:"Discord"});return(0,z.jsx)(gn,{children:(0,z.jsxs)(fn,{onDismiss:n,children:[(0,z.jsx)("h2",{children:"Could not parse keymap"}),(0,z.jsx)("p",{children:"It looks like some bindings in your keymap are using custom pre-processor macros which isn't supported by the Keymap Editor. These macros make it difficult both to resolve bindings to behaviors and parameters, as well as to generate modified keymap code that is consistent with your original intentions."}),(0,z.jsx)("p",{children:"Please either continue editing your keymap by hand with these helpers or if you would like to use this editor, rewrite the keymap to use ZMK's syntax directly."}),(0,z.jsxs)("p",{children:["If you feel this is incorrect or wish to discuss the issue please feel free to reach out via the Keymap Editor's GitHub repository or find me on ",t,"."]})]})})}cd.propTypes={onDismiss:G().func.isRequired};var ld=cd;function sd(e){var n=e.onDismiss,t=(0,z.jsx)(Ra,{external:!0,href:"https://discord.com/users/115507966555193345",children:"Discord"}),r=(0,z.jsx)(Ra,{external:!0,href:"https://github.com/nickcoutsos/keymap-editor/issues",children:"Keymap Editor - Issues"});return(0,z.jsx)(gn,{children:(0,z.jsxs)(fn,{onDismiss:n,children:[(0,z.jsx)("h2",{children:"Could not parse keymap"}),(0,z.jsx)("p",{children:"Something went wrong while trying to parse your keymap. It's hard to say what exactly, because I wasn't expecting this."}),(0,z.jsx)("p",{children:"A common occurrence here is keymaps using a variety of pre-processor macros to define layers/combos/etc."}),(0,z.jsxs)("p",{children:["If you'd like some help with this problem feel free to post on the project's repository ",r," or reach out directly to me via ",t,"."]})]})})}sd.propTypes={onDismiss:G().func.isRequired};var ud=sd;function pd(e){var n=e.onDismiss;return(0,z.jsx)(gn,{children:(0,z.jsxs)(fn,{onDismiss:n,children:[(0,z.jsx)("h2",{children:"Could not parse Miryoku keymap"}),(0,z.jsx)("p",{children:"It looks like your keyboard is built using Miryoku to manage the configuration and keymap. Parsing and editing keymaps that use this syntax is unsupported by the Keymap Editor."}),(0,z.jsx)("p",{children:"Please either continue editing your keymap by hand with these helpers or if you would like to use this editor, rewrite the keymap to use ZMK's syntax directly."})]})})}pd.propTypes={onDismiss:G().func.isRequired};var fd=pd;function dd(e){var n=e.onDismiss,t=(0,z.jsx)(Ra,{external:!0,href:"https://github.com/nickcoutsos/keymap-editor/issues",children:"Keymap Editor - Issues"});return(0,z.jsx)(gn,{children:(0,z.jsxs)(fn,{onDismiss:n,children:[(0,z.jsx)("h2",{children:"Could not parse keymap"}),(0,z.jsx)("p",{children:"Missing devicetree root node."}),(0,z.jsx)("p",{children:"The keymap editor was unable to find a devicetree root node in your keymap. This means that either something is wrong with the parser or something is wrong with your keymap's syntax."}),(0,z.jsxs)("p",{children:["If you've been using the keymap editor succesfully up to now it's possible that it has introduced an error in the keymap file. Please reach out for support at ",t,"."]})]})})}dd.propTypes={onDismiss:G().func.isRequired};var yd=dd;function hd(e){var n=e.onDismiss;return(0,z.jsx)(gn,{children:(0,z.jsxs)(fn,{onDismiss:n,children:[(0,z.jsx)("h2",{children:"Could not parse keymap"}),(0,z.jsxs)("p",{children:["Detected use of ",(0,z.jsx)("code",{children:"zmk-nodefree-config"})]}),(0,z.jsx)("p",{children:"It looks like your keymap is built using helper functions from the zmk-nodefree-config library to replace devicetree syntax. Parsing and editing keymaps that use this syntax is unsupported by the Keymap Editor."}),(0,z.jsx)("p",{children:"Please either continue editing your keymap by hand with these helpers or if you would like to use this editor, rewrite the keymap to use ZMK's syntax directly."})]})})}hd.propTypes={onDismiss:G().func.isRequired};var bd=hd;function md(e){return md="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},md(e)}function Ad(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function vd(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Ad(Object(t),!0).forEach((function(n){gd(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Ad(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function gd(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==md(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==md(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===md(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}var xd="https://github.com/nickcoutsos/keymap-editor/wiki/Defining-keyboard-layouts",jd="https://nickcoutsos.github.io/keymap-layout-tools/";function Cd(e){var n=(0,z.jsx)(Ra,{href:xd,external:!0,children:"Keymap Editor Wiki: Defining keyboard layouts"}),t=(0,z.jsx)(Ra,{href:jd,external:!0,children:"Keymap Layout Tools - Helper"});return(0,z.jsx)(gn,{children:(0,z.jsxs)(fn,vd(vd({},e),{},{children:[(0,z.jsx)("h2",{children:"This layout was Auto-Generated"}),(0,z.jsx)("p",{children:"Hi there! There wasn't a layout definition to accompany your keymap file, so the keymap editor tried to generate one automatically in a last-ditch effort to help you get into the app."}),(0,z.jsxs)("p",{children:["This layout definition was (or will be) saved when you first save keymap changes with the keymap editor, so remember that if there are any tweaks you'd like to make to improve it you can do so by editing the ",(0,z.jsx)("code",{children:"info.json"})," file. If you want an easier way to test changes try pasting your layout into the ",t," (work in progress)."]}),(0,z.jsxs)("p",{children:["For more information on how to do that see ",n,". If you run into any trouble, reach out by making an issue on the project repo and I'd be happy to discuss."]})]}))})}Cd.propTypes={};var wd=Cd;function Ed(e){return Ed="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Ed(e)}function kd(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Od(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Ed(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Ed(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Ed(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Sd(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(e,n)||function(e,n){if(e){if("string"==typeof e)return Bd(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Bd(e,n):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Bd(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function Pd(e){var n=e.onSelect,t=Sd((0,r.useState)(ad),2),o=t[0],i=t[1],a=Sd((0,r.useState)({autoGenerated:!1}),2),c=a[0].autoGenerated,l=a[1],s=Sd((0,r.useState)(null),2),u=s[0],p=s[1],f=(0,r.useCallback)((function(){return p(null)}),[p]),d=(0,r.useCallback)((function(){p({component:wd,onClose:f})}),[p,f]),y=(0,r.useCallback)((function(e){var t=e.keymap.warningFlags,r=void 0===t?[]:t,i=(e.layoutMetadata||{}).autoGenerated,a=void 0!==i&&i,c=function(e){switch(e[0]){case"USING_ZMK_NODEFREE_MACROS":return bd;case"USING_MIRYOKU_DTSI":return fd;case"USING_NON_ZMK_MACRO":return ld;case"KEYMAP_PARSING_FAILED":return ud;case"MISSING_ROOT_NODE":return yd;default:return null}}(r);if(c)return p({component:c,onClose:f}),void n({source:o,keyboard:null});l({autoGenerated:a}),n(function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?kd(Object(t),!0).forEach((function(n){Od(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):kd(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}({source:o},e))}),[n,o,p,f]);(0,r.useEffect)((function(){localStorage.setItem("selectedSource",o)}),[o]);var h=dp()(od,{id:o});return(0,z.jsxs)("div",{style:{display:"flex",flexDirection:"row",alignItems:"end",gap:"5px",margin:"5px"},children:[(0,z.jsx)(kp,{label:"Source",value:h,options:od,getOptionLabel:function(e){return e.name},getOptionValue:function(e){return e.id},onChange:function(e){var n=e.id;return i(n)}}),(null==u?void 0:u.component)&&(0,z.jsx)(u.component,{onDismiss:u.onClose}),"local"===o&&(0,z.jsx)(Dp,{onSelect:y}),"demo"===o&&(0,z.jsx)(Wp,{onSelect:y}),"github"===o&&(0,z.jsx)(rd,{onSelect:y}),c&&(0,z.jsxs)(Cp,{onClick:d,children:[(0,z.jsx)(J,{name:"warning"})," Layout wrong?"]})]})}Pd.propTypes={onSelect:G().func.isRequired};var Id=Pd,Td=t(30381),Dd=t.n(Td),Ld=t(80047),Rd={};Rd.styleTagTransform=m(),Rd.setAttributes=d(),Rd.insert=p().bind(null,"head"),Rd.domAPI=s(),Rd.insertStyleElement=h(),c()(Ld.Z,Rd);var Nd=Ld.Z&&Ld.Z.locals?Ld.Z.locals:void 0;function _d(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var Md=["success"],Yd=["action_required","cancelled","failure","skipped","stale","timed_out"];function Kd(e){var n,t,o=e.timestamp,i=(n=(0,r.useState)(Dd()(o).fromNow()),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||function(e,n){if(e){if("string"==typeof e)return _d(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?_d(e,n):void 0}}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=i[0],c=i[1];return(0,r.useEffect)((function(){c(Dd()(o).fromNow());var e=setInterval((function(){c(Dd()(o).fromNow())}),6e4);return function(){return clearInterval(e)}}),[o,c]),(0,z.jsx)("span",{title:o.toISOString(),children:a})}function qd(e){var n=e.latestRun,t=Md.includes(n.conclusion)?(0,z.jsx)(J,{name:"check"}):Yd.includes(n.conclusion)?(0,z.jsx)(J,{name:"xmark"}):(0,z.jsx)(de,{});return(0,z.jsxs)(Ra,{href:n.html_url,className:Nd.buildDetails,external:!0,showExternal:!1,children:[(0,z.jsxs)("span",{className:Nd.buildSummary,children:["Firmware build (",(0,z.jsx)("code",{children:n.head_sha.slice(0,5)}),") ",t,(0,z.jsx)("br",{}),(0,z.jsx)(Kd,{timestamp:new Date(n.updated_at)})]}),(0,z.jsx)(J,{name:"file-arrow-down",className:[Nd.buildStatus,Nd.buildSuccess].join(" ")})]})}qd.propTypes={latestRun:G().shape({id:G().number.isRequired,name:G().string.isRequired,head_sha:G().string.isRequired,status:G().oneOf(["completed","action_required","cancelled","failure","neutral","skipped","stale","success","timed_out","in_progress","queued","requested","waiting"]).isRequired,conclusion:G().oneOf([null,"action_required","cancelled","failure","neutral","success","skipped","stale","timed_out"]),created_at:G().string.isRequired,updated_at:G().string.isRequired})};var Zd=qd;function Ud(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function Gd(e){var n,t,o=e.onConfirm,i=e.onCancel,a=(n=(0,r.useState)(""),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||function(e,n){if(e){if("string"==typeof e)return Ud(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Ud(e,n):void 0}}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),c=a[0],l=a[1];return(0,z.jsx)(gn,{children:(0,z.jsxs)(fn,{dismissText:null,children:[(0,z.jsx)("h2",{children:"Commit keymap changes"}),(0,z.jsx)("textarea",{style:{width:"100%"},placeholder:"Message (optional)",value:c,onChange:function(e){l(e.target.value)}}),(0,z.jsxs)("p",{style:{textAlign:"center",gap:"10px"},children:[(0,z.jsx)($e,{onClick:function(){return o(c)},children:"Commit"}),(0,z.jsx)($e,{onClick:i,secondary:!0,children:"Cancel"})]})]})})}Gd.propTypes={onConfirm:G().func.isRequired,onCancel:G().func.isRequired};var zd=Gd,Wd=t(70401),Fd=t.n(Wd),Xd=t(14084),Vd={};Vd.styleTagTransform=m(),Vd.setAttributes=d(),Vd.insert=p().bind(null,"head"),Vd.domAPI=s(),Vd.insertStyleElement=h(),c()(Xd.Z,Vd);var Qd=Xd.Z&&Xd.Z.locals?Xd.Z.locals:void 0;function Hd(e){return Hd="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Hd(e)}function Jd(){Jd=function(){return e};var e={},n=Object.prototype,t=n.hasOwnProperty,r=Object.defineProperty||function(e,n,t){e[n]=t.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function l(e,n,t){return Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}),e[n]}try{l({},"")}catch(e){l=function(e,n,t){return e[n]=t}}function s(e,n,t,o){var i=n&&n.prototype instanceof f?n:f,a=Object.create(i.prototype),c=new E(o||[]);return r(a,"_invoke",{value:x(e,t,c)}),a}function u(e,n,t){try{return{type:"normal",arg:e.call(n,t)}}catch(e){return{type:"throw",arg:e}}}e.wrap=s;var p={};function f(){}function d(){}function y(){}var h={};l(h,i,(function(){return this}));var b=Object.getPrototypeOf,m=b&&b(b(k([])));m&&m!==n&&t.call(m,i)&&(h=m);var A=y.prototype=f.prototype=Object.create(h);function v(e){["next","throw","return"].forEach((function(n){l(e,n,(function(e){return this._invoke(n,e)}))}))}function g(e,n){function o(r,i,a,c){var l=u(e[r],e,i);if("throw"!==l.type){var s=l.arg,p=s.value;return p&&"object"==Hd(p)&&t.call(p,"__await")?n.resolve(p.__await).then((function(e){o("next",e,a,c)}),(function(e){o("throw",e,a,c)})):n.resolve(p).then((function(e){s.value=e,a(s)}),(function(e){return o("throw",e,a,c)}))}c(l.arg)}var i;r(this,"_invoke",{value:function(e,t){function r(){return new n((function(n,r){o(e,t,n,r)}))}return i=i?i.then(r,r):r()}})}function x(e,n,t){var r="suspendedStart";return function(o,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw i;return{value:void 0,done:!0}}for(t.method=o,t.arg=i;;){var a=t.delegate;if(a){var c=j(a,t);if(c){if(c===p)continue;return c}}if("next"===t.method)t.sent=t._sent=t.arg;else if("throw"===t.method){if("suspendedStart"===r)throw r="completed",t.arg;t.dispatchException(t.arg)}else"return"===t.method&&t.abrupt("return",t.arg);r="executing";var l=u(e,n,t);if("normal"===l.type){if(r=t.done?"completed":"suspendedYield",l.arg===p)continue;return{value:l.arg,done:t.done}}"throw"===l.type&&(r="completed",t.method="throw",t.arg=l.arg)}}}function j(e,n){var t=n.method,r=e.iterator[t];if(void 0===r)return n.delegate=null,"throw"===t&&e.iterator.return&&(n.method="return",n.arg=void 0,j(e,n),"throw"===n.method)||"return"!==t&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+t+"' method")),p;var o=u(r,e.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,p;var i=o.arg;return i?i.done?(n[e.resultName]=i.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=void 0),n.delegate=null,p):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,p)}function C(e){var n={tryLoc:e[0]};1 in e&&(n.catchLoc=e[1]),2 in e&&(n.finallyLoc=e[2],n.afterLoc=e[3]),this.tryEntries.push(n)}function w(e){var n=e.completion||{};n.type="normal",delete n.arg,e.completion=n}function E(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(C,this),this.reset(!0)}function k(e){if(e){var n=e[i];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,o=function n(){for(;++r<e.length;)if(t.call(e,r))return n.value=e[r],n.done=!1,n;return n.value=void 0,n.done=!0,n};return o.next=o}}return{next:O}}function O(){return{value:void 0,done:!0}}return d.prototype=y,r(A,"constructor",{value:y,configurable:!0}),r(y,"constructor",{value:d,configurable:!0}),d.displayName=l(y,c,"GeneratorFunction"),e.isGeneratorFunction=function(e){var n="function"==typeof e&&e.constructor;return!!n&&(n===d||"GeneratorFunction"===(n.displayName||n.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,y):(e.__proto__=y,l(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},e.awrap=function(e){return{__await:e}},v(g.prototype),l(g.prototype,a,(function(){return this})),e.AsyncIterator=g,e.async=function(n,t,r,o,i){void 0===i&&(i=Promise);var a=new g(s(n,t,r,o),i);return e.isGeneratorFunction(t)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},v(A),l(A,c,"Generator"),l(A,i,(function(){return this})),l(A,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var n=Object(e),t=[];for(var r in n)t.push(r);return t.reverse(),function e(){for(;t.length;){var r=t.pop();if(r in n)return e.value=r,e.done=!1,e}return e.done=!0,e}},e.values=k,E.prototype={constructor:E,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(w),!e)for(var n in this)"t"===n.charAt(0)&&t.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function r(t,r){return a.type="throw",a.arg=e,n.next=t,r&&(n.method="next",n.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var c=t.call(i,"catchLoc"),l=t.call(i,"finallyLoc");if(c&&l){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(e,n){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&t.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=n&&n<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=n,i?(this.method="next",this.next=i.finallyLoc,p):this.complete(a)},complete:function(e,n){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&n&&(this.next=n),p},finish:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.finallyLoc===e)return this.complete(t.completion,t.afterLoc),w(t),p}},catch:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.tryLoc===e){var r=t.completion;if("throw"===r.type){var o=r.arg;w(t)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,t){return this.delegate={iterator:k(e),resultName:n,nextLoc:t},"next"===this.method&&(this.arg=void 0),p}},e}function $d(e,n,t,r,o,i,a){try{var c=e[i](a),l=c.value}catch(e){return void t(e)}c.done?n(l):Promise.resolve(l).then(r,o)}function ey(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(e,n)||function(e,n){if(e){if("string"==typeof e)return ny(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?ny(e,n):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ny(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function ty(e){return"  ".concat(e.fileName,":").concat(e.lineNumber,":").concat(e.columnNumber)}var ry=(0,z.jsx)(Ra,{external:!0,href:"https://github.com/nickcoutsos/keymap-editor/issues/new",children:"new issue"});function oy(e){var n=e.error,t=ey((0,r.useState)([]),2),o=t[0],i=t[1],a=ey((0,r.useState)(""),2),c=a[0],l=a[1],s=ey((0,r.useState)(!1),2),u=s[0],p=s[1];return(0,r.useEffect)((function(){function e(){var t;return t=Jd().mark((function e(){return Jd().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.t0=i,e.next=3,Fd().fromError(n);case 3:e.t1=e.sent,(0,e.t0)(e.t1);case 5:case"end":return e.stop()}}),e)})),e=function(){var e=this,n=arguments;return new Promise((function(r,o){var i=t.apply(e,n);function a(e){$d(i,r,o,a,c,"next",e)}function c(e){$d(i,r,o,a,c,"throw",e)}a(void 0)}))},e.apply(this,arguments)}!function(){e.apply(this,arguments)}()}),[i,n]),(0,r.useEffect)((function(){l(function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];return"\n".concat(e.name,"\n\n").concat(e.message,"\n\n").concat(n.map(ty).join("\n"),"\n").trim()}(n,o))}),[n,o]),(0,r.useEffect)((function(){u&&setTimeout((function(){p(!1)}),3e3)}),[u,p]),(0,z.jsx)(gn,{children:(0,z.jsxs)(fn,{dismissText:!1,style:{maxWidth:"700px"},children:[(0,z.jsx)("h2",{children:"Unexpected error"}),(0,z.jsxs)("p",{children:["Something unexpected happened and the keymap editor app cannot recover. Please consider taking a moment to open a ",ry,"with the details below to help me investigate and improve the app."]}),(0,z.jsxs)("div",{className:Qd.stackTrace,children:[(0,z.jsx)("pre",{children:c}),(0,z.jsx)(oe,{icon:"copy",title:"Copy error text",className:Qd.button,onClick:function(){var e="".concat("```","\n").concat(c,"\n").concat("```");navigator.clipboard.writeText(e).then((function(){return p(!0)}))}}),u&&(0,z.jsx)("div",{className:Qd.copyMessage,children:"Copied!"})]})]})})}oy.propTypes={error:G().instanceOf(Error).isRequired};var iy=oy;function ay(e){return ay="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},ay(e)}function cy(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,(void 0,o=function(e,n){if("object"!==ay(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==ay(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(r.key),"symbol"===ay(o)?o:String(o)),r)}var o}function ly(e,n){return ly=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,n){return e.__proto__=n,e},ly(e,n)}function sy(e){return sy=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},sy(e)}var uy=function(e){!function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),n&&ly(e,n)}(c,e);var n,t,r,o,i,a=(o=c,i=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,n=sy(o);if(i){var t=sy(this).constructor;e=Reflect.construct(n,arguments,t)}else e=n.apply(this,arguments);return function(e,n){if(n&&("object"===ay(n)||"function"==typeof n))return n;if(void 0!==n)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(this,e)});function c(e){var n;return function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,c),(n=a.call(this,e)).state={error:null},n}return n=c,r=[{key:"getDerivedStateFromError",value:function(e){return{error:e}}}],(t=[{key:"render",value:function(){var e=this.props.children,n=this.state.error;return n?(0,z.jsx)(iy,{error:n}):e}}])&&cy(n.prototype,t),r&&cy(n,r),Object.defineProperty(n,"prototype",{writable:!1}),c}(r.Component),py=(0,z.jsx)(Ra,{external:!0,href:"https://github.com/nickcoutsos/keymap-editor/issues",children:"Keymap Editor - Issues"});function fy(e){var n=e.onDismiss;return(0,z.jsx)(gn,{children:(0,z.jsxs)(fn,{onDismiss:n,children:[(0,z.jsx)("h2",{children:"Failed to save keymap changes"}),(0,z.jsx)("p",{children:"Sorry, an unexpected error occurred while trying to save your keymap."}),(0,z.jsx)("p",{children:"Please try again or raise an issue if the problem persists and I'll try to work it out with you. Seriously I can only get this right if I know what's wrong, and in some cases that comes down to people using this editor in more advanced ways than I myself have."}),(0,z.jsx)("p",{children:py})]})})}fy.propTypes={onDismiss:G().func.isRequired};var dy=fy;function yy(e){return yy="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},yy(e)}var hy=["source","layout","keymap","sensors"];function by(){by=function(){return e};var e={},n=Object.prototype,t=n.hasOwnProperty,r=Object.defineProperty||function(e,n,t){e[n]=t.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function l(e,n,t){return Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}),e[n]}try{l({},"")}catch(e){l=function(e,n,t){return e[n]=t}}function s(e,n,t,o){var i=n&&n.prototype instanceof f?n:f,a=Object.create(i.prototype),c=new E(o||[]);return r(a,"_invoke",{value:x(e,t,c)}),a}function u(e,n,t){try{return{type:"normal",arg:e.call(n,t)}}catch(e){return{type:"throw",arg:e}}}e.wrap=s;var p={};function f(){}function d(){}function y(){}var h={};l(h,i,(function(){return this}));var b=Object.getPrototypeOf,m=b&&b(b(k([])));m&&m!==n&&t.call(m,i)&&(h=m);var A=y.prototype=f.prototype=Object.create(h);function v(e){["next","throw","return"].forEach((function(n){l(e,n,(function(e){return this._invoke(n,e)}))}))}function g(e,n){function o(r,i,a,c){var l=u(e[r],e,i);if("throw"!==l.type){var s=l.arg,p=s.value;return p&&"object"==yy(p)&&t.call(p,"__await")?n.resolve(p.__await).then((function(e){o("next",e,a,c)}),(function(e){o("throw",e,a,c)})):n.resolve(p).then((function(e){s.value=e,a(s)}),(function(e){return o("throw",e,a,c)}))}c(l.arg)}var i;r(this,"_invoke",{value:function(e,t){function r(){return new n((function(n,r){o(e,t,n,r)}))}return i=i?i.then(r,r):r()}})}function x(e,n,t){var r="suspendedStart";return function(o,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw i;return{value:void 0,done:!0}}for(t.method=o,t.arg=i;;){var a=t.delegate;if(a){var c=j(a,t);if(c){if(c===p)continue;return c}}if("next"===t.method)t.sent=t._sent=t.arg;else if("throw"===t.method){if("suspendedStart"===r)throw r="completed",t.arg;t.dispatchException(t.arg)}else"return"===t.method&&t.abrupt("return",t.arg);r="executing";var l=u(e,n,t);if("normal"===l.type){if(r=t.done?"completed":"suspendedYield",l.arg===p)continue;return{value:l.arg,done:t.done}}"throw"===l.type&&(r="completed",t.method="throw",t.arg=l.arg)}}}function j(e,n){var t=n.method,r=e.iterator[t];if(void 0===r)return n.delegate=null,"throw"===t&&e.iterator.return&&(n.method="return",n.arg=void 0,j(e,n),"throw"===n.method)||"return"!==t&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+t+"' method")),p;var o=u(r,e.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,p;var i=o.arg;return i?i.done?(n[e.resultName]=i.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=void 0),n.delegate=null,p):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,p)}function C(e){var n={tryLoc:e[0]};1 in e&&(n.catchLoc=e[1]),2 in e&&(n.finallyLoc=e[2],n.afterLoc=e[3]),this.tryEntries.push(n)}function w(e){var n=e.completion||{};n.type="normal",delete n.arg,e.completion=n}function E(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(C,this),this.reset(!0)}function k(e){if(e){var n=e[i];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,o=function n(){for(;++r<e.length;)if(t.call(e,r))return n.value=e[r],n.done=!1,n;return n.value=void 0,n.done=!0,n};return o.next=o}}return{next:O}}function O(){return{value:void 0,done:!0}}return d.prototype=y,r(A,"constructor",{value:y,configurable:!0}),r(y,"constructor",{value:d,configurable:!0}),d.displayName=l(y,c,"GeneratorFunction"),e.isGeneratorFunction=function(e){var n="function"==typeof e&&e.constructor;return!!n&&(n===d||"GeneratorFunction"===(n.displayName||n.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,y):(e.__proto__=y,l(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},e.awrap=function(e){return{__await:e}},v(g.prototype),l(g.prototype,a,(function(){return this})),e.AsyncIterator=g,e.async=function(n,t,r,o,i){void 0===i&&(i=Promise);var a=new g(s(n,t,r,o),i);return e.isGeneratorFunction(t)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},v(A),l(A,c,"Generator"),l(A,i,(function(){return this})),l(A,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var n=Object(e),t=[];for(var r in n)t.push(r);return t.reverse(),function e(){for(;t.length;){var r=t.pop();if(r in n)return e.value=r,e.done=!1,e}return e.done=!0,e}},e.values=k,E.prototype={constructor:E,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(w),!e)for(var n in this)"t"===n.charAt(0)&&t.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function r(t,r){return a.type="throw",a.arg=e,n.next=t,r&&(n.method="next",n.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var c=t.call(i,"catchLoc"),l=t.call(i,"finallyLoc");if(c&&l){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(e,n){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&t.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=n&&n<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=n,i?(this.method="next",this.next=i.finallyLoc,p):this.complete(a)},complete:function(e,n){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&n&&(this.next=n),p},finish:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.finallyLoc===e)return this.complete(t.completion,t.afterLoc),w(t),p}},catch:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.tryLoc===e){var r=t.completion;if("throw"===r.type){var o=r.arg;w(t)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,t){return this.delegate={iterator:k(e),resultName:n,nextLoc:t},"next"===this.method&&(this.arg=void 0),p}},e}function my(e,n,t,r,o,i,a){try{var c=e[i](a),l=c.value}catch(e){return void t(e)}c.done?n(l):Promise.resolve(l).then(r,o)}function Ay(e){return function(){var n=this,t=arguments;return new Promise((function(r,o){var i=e.apply(n,t);function a(e){my(i,r,o,a,c,"next",e)}function c(e){my(i,r,o,a,c,"throw",e)}a(void 0)}))}}var vy=function(){var e=(0,i.v9)((function(e){return e})),n=(0,i.I0)(),t=e.source,o=e.sourceOther,a=e.keyboard,c=e._unmodifiedKeymap,l=e.saving,s=e.saveError,u=e.theme,p=e.settingsVisible,f=e.experimentalSettings,d=e.latestBuild;function y(){return y=Ay(by().mark((function t(){var r,i,a;return by().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=o.keyboard,i=e.keyboard.keymap,t.prev=2,t.next=5,q(r,i);case 5:a=t.sent,n({type:"KEYMAP_SAVE_SUCCESS",keymap:a}),t.next=12;break;case 9:t.prev=9,t.t0=t.catch(2),n({type:"KEYMAP_SAVE_FAILURE"});case 12:case"end":return t.stop()}}),t,null,[[2,9]])}))),y.apply(this,arguments)}(0,r.useEffect)((function(){if(null!=o&&o.github)return Ay(by().mark((function n(){var t,r,i;return by().wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return t=o.github,r=t.repository,i=t.branch,n.t0=e,n.next=4,ff.fetchBuildStatus(r,i);case 4:n.t1=n.sent,(0,n.t0)(n.t1);case 6:case"end":return n.stop()}}),n)})))(),ff.on("build-update",e),function(){return ff.off("build-update",e)};function e(e){e.head_branch===o.github.branch&&n({type:"GITHUB_BUILD_UPDATE",build:e})}n({type:"GITHUB_BUILD_UPDATE",build:null})}),[o,n]);var h=(0,r.useCallback)((function(e){var t=o.github,r=t.repository,i=t.branch;Ay(by().mark((function t(){var c,l,s,u;return by().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n({type:"COMMIT_DIALOG_CLOSE"}),n({type:"KEYMAP_SAVE_START"}),c=a.layout,l=a.keymap,t.prev=3,t.next=6,ff.commitChanges(r,i,c,l,{message:e,experimentalSettings:f,keyboard:o.github.keyboard});case 6:s=t.sent,u=s.data,n({type:"KEYMAP_SAVE_SUCCESS",keymap:u}),t.next=14;break;case 11:t.prev=11,t.t0=t.catch(3),n({type:"KEYMAP_SAVE_FAILURE"});case 14:case"end":return t.stop()}}),t,null,[[3,11]])})))()}),[o,a,n,f]),b=(0,r.useCallback)((function(e){var t=e.source,r=e.layout,o=e.keymap,i=e.sensors,a=void 0===i?[]:i,c=function(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}(e,hy);n(o?{type:"SELECT_KEYBOARD",source:t,sourceOther:c,layout:r,keymap:o,sensors:a}:{type:"CLEAR_KEYBOARD_SELECTION"})}),[n]),m=(0,r.useCallback)((function(e){n({type:"SETTINGS_UPDATE",settings:e})}),[n]),A=(0,r.useCallback)((function(){return n({type:"SETTINGS_OPEN"})}),[n]),v=a&&!Object.is(a.keymap,c);return(0,z.jsxs)(z.Fragment,{children:[(0,z.jsx)(uy,{children:(0,z.jsxs)(C.Provider,{value:{settings:f,openSettingsDialog:A},children:[(0,z.jsx)(Id,{onSelect:b}),(0,z.jsxs)("div",{id:"settings-bar",children:[(0,z.jsx)(oe,{id:"light-mode",title:"Toggle theme",icon:{light:"sun",dark:"moon",system:"circle-half-stroke"}[u]||"circle-half-stroke",onClick:function(){return n({type:"CYCLE_THEME"})}}),(0,z.jsx)(oe,{id:"settings-button",icon:"cog",onClick:A}),p&&(0,z.jsx)(pp,{settings:f,onUpdate:m,onClose:function(){return n({type:"SETTINGS_CLOSE"})}})]}),(0,z.jsxs)("div",{id:"actions",children:["local"===t&&(0,z.jsx)("button",{disabled:!v,onClick:function(){return y.apply(this,arguments)},children:"Save Local"}),"github"===t&&(0,z.jsxs)("button",{title:"Commit keymap changes to GitHub repository",disabled:!v,onClick:function(){n({type:"COMMIT_DIALOG_OPEN"})},children:[l?"Saving":"Commit Changes",l&&(0,z.jsx)(de,{})]}),e.commitDialogOpen&&(0,z.jsx)(zd,{onConfirm:h,onCancel:function(){return n({type:"COMMIT_DIALOG_CLOSE"})}}),d&&(0,z.jsx)(Zd,{latestRun:d})]}),(0,z.jsxs)(Ye,{children:[a&&(0,z.jsx)(qt,{layout:a.layout,children:(0,z.jsx)($u,{keymap:a.keymap,sensors:a.sensors})}),s&&(0,z.jsx)(dy,{onDismiss:function(){return n({type:"CLEAR_SAVE_ERROR"})}})]})]})}),(0,z.jsx)(op,{})]})};function gy(e){return gy="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},gy(e)}function xy(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function jy(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?xy(Object(t),!0).forEach((function(n){Cy(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):xy(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Cy(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==gy(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==gy(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===gy(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function wy(){var e=JSON.parse(localStorage.getItem("experimental-settings")||"{}");return{definitions:null,source:null,sourceOther:null,keyboard:null,_unmodifiedKeymap:null,saving:null,saveError:null,settingsVisible:null,commitDialogOpen:!1,theme:JSON.parse(localStorage.getItem("theme")),experimentalSettings:{unicodeGlyphs:Ae()(e,"unicodeGlyphs",!0),platformGlyphs:Ae()(e,"platformGlyphs","auto"),enableBehaviorEditing:Ae()(e,"enableBehaviorEditing",!1)},latestBuild:null}}var Ey=wy();var ky=t(14890);function Oy(e){return Oy="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Oy(e)}function Sy(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function By(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Sy(Object(t),!0).forEach((function(n){Py(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Sy(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Py(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Oy(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Oy(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Oy(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}var Iy=(0,ky.UY)({layout:function(){return arguments.length>0&&void 0!==arguments[0]?arguments[0]:[]},sensors:function(){return arguments.length>0&&void 0!==arguments[0]?arguments[0]:[]},keymap:(0,ky.UY)({warningFlags:function(){return arguments.length>0&&void 0!==arguments[0]?arguments[0]:[]},defines:function(){return arguments.length>0&&void 0!==arguments[0]?arguments[0]:[]},chosen:function(){return arguments.length>0&&void 0!==arguments[0]?arguments[0]:{}},behaviors:rc,combos:pl,layers:Fc,macros:ru})}),Ty=(0,Va.xC)({reducer:function(e,n){var t=function(e,n){var t=n.type,r=e.keyboard;switch(t){case"INITIALIZE":return wy();case"DEFINITIONS_SET":return jy(jy({},e),{},{definitions:n.definitions});case"CLEAR_KEYBOARD_SELECTION":return jy(jy({},e),{},{keyboard:null});case"SELECT_KEYBOARD":return jy(jy({},e),{},{source:n.source,sourceOther:n.sourceOther,keyboard:jy(jy({},r),_n()(n,["layout","keymap","sensors"])),_unmodifiedKeymap:n.keymap});case"COMMIT_DIALOG_OPEN":return jy(jy({},e),{},{commitDialogOpen:!0});case"COMMIT_DIALOG_CLOSE":return jy(jy({},e),{},{commitDialogOpen:!1});case"GITHUB_BUILD_UPDATE":return jy(jy({},e),{},{latestBuild:n.build});case"KEYMAP_SAVE_START":return jy(jy({},e),{},{saving:!0,saveError:!1});case"KEYMAP_SAVE_SUCCESS":return jy(jy({},e),{},{saving:!1,unsaved:!1,keyboard:jy(jy({},e.keyboard),{},{keymap:n.keymap||e.keyboard.keymap}),_unmodifiedKeymap:n.keymap||e.keyboard.keymap});case"KEYMAP_SAVE_FAILURE":return jy(jy({},e),{},{saving:!1,saveError:!0});case"CLEAR_SAVE_ERROR":return jy(jy({},e),{},{saveError:null});case"SETTINGS_OPEN":return jy(jy({},e),{},{settingsVisible:!0});case"SETTINGS_CLOSE":return jy(jy({},e),{},{settingsVisible:!1});case"SETTINGS_UPDATE":return localStorage.setItem("experimental-settings",JSON.stringify(n.settings)),jy(jy({},e),{},{experimentalSettings:n.settings});case"CYCLE_THEME":return function(e,n){var t=["light","dark","system"],r=t.indexOf(e.theme),o=t.at((r+1)%t.length);return localStorage.setItem("theme",'"'.concat(o,'"')),document.body.dataset.theme=o,jy(jy({},e),{},{theme:o})}(e);default:return e}}(e,n);return By(By({},t),{},{keyboard:t.keyboard&&By(By({},t.keyboard),Iy(t.keyboard,n))})},preloadedState:Ey});document.body.dataset.theme=Ey.theme,o.createRoot(document.getElementById("app-root")).render((0,z.jsx)(r.StrictMode,{children:(0,z.jsx)(i.zt,{store:Ty,children:(0,z.jsx)(vy,{})})}))},39087:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,':root {\n  --bg: white;\n  --bg-rgb: 255,255,255;\n  --fg: black;\n\t--dark-red: #910e0e;\n\t--dark-blue: #6d99c6;\n  --error-highlight: rgb(179, 60, 60);\n  --selection: rgb(60, 179, 113);\n  --hover-selection: rgba(60, 179, 113, 0.85);\n  --delete: rgb(179, 60, 72);\n  --delete-faint: rgba(179, 60, 72, 0.6);\n  --link: royalblue;\n  --link-hover: #6d99c6;\n  --key-bg-base: #f2f2f2;\n  --key-bg-hover: white;\n  --key-bg-highlight: sandybrown;\n  --key-color-base: #6f6f6f;\n  --key-color-extreme: #313131;\n  --key-color-hover: white;\n  --code-bg: rgba(0, 0, 0, 0.15);\n}\nhtml {\n  font-family: sans-serif;\n}\nhtml, body {\n\twidth: 100vw;\n\theight: 100vh;\n\toverflow: auto;\n\tpadding: 0;\n\tmargin: 0;\n  background-color: var(--bg);\n  color: var(--fg);\n\n  transition: 300ms ease-in-out;\n  transition-property: color, background-color, border-color;\n}\n\nh1, h2, h3, h4, h5, h6 {\n  font-family: Quicksand, avenir, sans-serif;\n}\n\nbody[data-theme="dark"] {\n  color-scheme: dark;\n  --bg: #123;\n  --bg-rgb: 17,34,51;\n  --fg: white;\n  --key-bg-base: #1c2c3b;\n  --key-color-base: #b7b7b7;\n  --key-color-extreme: #e7e7e7;\n}\n@media (prefers-color-scheme: dark) {\n  body[data-theme="system"] {\n    color-scheme: dark;\n    --bg: #123;\n    --bg-rgb: 17,34,51;\n    --fg: white;\n    --key-bg-base: #1c2c3b;\n    --key-color-base: #b7b7b7;\n    --key-color-extreme: #e7e7e7;\n  }\n}\n\nh3 {\n  margin-bottom: 10px;\n}\n\na { color: var(--link) }\na:hover { color: var(--link-hover) }\n\ncode {\n  background-color: var(--code-bg);\n  border-radius: 2px;\n  padding: .15em .3em .05em;\n}\n\n#actions {\n\tposition: absolute;\n  display: flex;\n\tbottom: 5px;\n\tright: 5px;\n  gap: 4px;\n}\n\n#actions button {\n  display: inline-block;\n  cursor: pointer;\n  background-color: var(--hover-selection);\n  color: white;\n\n  font-size: 16px;\n  border: none;\n  border-radius: 5px;\n  padding: 0 5px;\n\n  height: 30px;\n  line-height: 30px;\n  vertical-align: middle;\n}\n\n#actions button[disabled] {\n  filter: saturate(20%);\n  opacity: .5;\n  cursor: not-allowed;\n}\n\n#settings-bar {\n  position: absolute;\n  top: 10px;\n  right: 10px;\n}\n\n#settings-bar button {\n  background: none;\n  color: var(--fg);\n  border: none;\n}\n#settings-bar button:hover {\n  cursor: pointer;\n  color: royalblue;\n}\n\n.fa-delete-right::before {\n  content: \'\\f55a\';\n  transform-origin: center;\n  transform: rotateZ(180deg);\n  display: inline-block;\n}\n',"",{version:3,sources:["webpack://./src/App.css"],names:[],mappings:"AAAA;EACE,WAAW;EACX,qBAAqB;EACrB,WAAW;CACZ,mBAAmB;CACnB,oBAAoB;EACnB,mCAAmC;EACnC,8BAA8B;EAC9B,2CAA2C;EAC3C,0BAA0B;EAC1B,sCAAsC;EACtC,iBAAiB;EACjB,qBAAqB;EACrB,sBAAsB;EACtB,qBAAqB;EACrB,8BAA8B;EAC9B,yBAAyB;EACzB,4BAA4B;EAC5B,wBAAwB;EACxB,8BAA8B;AAChC;AACA;EACE,uBAAuB;AACzB;AACA;CACC,YAAY;CACZ,aAAa;CACb,cAAc;CACd,UAAU;CACV,SAAS;EACR,2BAA2B;EAC3B,gBAAgB;;EAEhB,6BAA6B;EAC7B,0DAA0D;AAC5D;;AAEA;EACE,0CAA0C;AAC5C;;AAEA;EACE,kBAAkB;EAClB,UAAU;EACV,kBAAkB;EAClB,WAAW;EACX,sBAAsB;EACtB,yBAAyB;EACzB,4BAA4B;AAC9B;AACA;EACE;IACE,kBAAkB;IAClB,UAAU;IACV,kBAAkB;IAClB,WAAW;IACX,sBAAsB;IACtB,yBAAyB;IACzB,4BAA4B;EAC9B;AACF;;AAEA;EACE,mBAAmB;AACrB;;AAEA,IAAI,mBAAmB;AACvB,UAAU,yBAAyB;;AAEnC;EACE,gCAAgC;EAChC,kBAAkB;EAClB,yBAAyB;AAC3B;;AAEA;CACC,kBAAkB;EACjB,aAAa;CACd,WAAW;CACX,UAAU;EACT,QAAQ;AACV;;AAEA;EACE,qBAAqB;EACrB,eAAe;EACf,wCAAwC;EACxC,YAAY;;EAEZ,eAAe;EACf,YAAY;EACZ,kBAAkB;EAClB,cAAc;;EAEd,YAAY;EACZ,iBAAiB;EACjB,sBAAsB;AACxB;;AAEA;EACE,qBAAqB;EACrB,WAAW;EACX,mBAAmB;AACrB;;AAEA;EACE,kBAAkB;EAClB,SAAS;EACT,WAAW;AACb;;AAEA;EACE,gBAAgB;EAChB,gBAAgB;EAChB,YAAY;AACd;AACA;EACE,eAAe;EACf,gBAAgB;AAClB;;AAEA;EACE,gBAAgB;EAChB,wBAAwB;EACxB,0BAA0B;EAC1B,qBAAqB;AACvB",sourcesContent:[':root {\n  --bg: white;\n  --bg-rgb: 255,255,255;\n  --fg: black;\n\t--dark-red: #910e0e;\n\t--dark-blue: #6d99c6;\n  --error-highlight: rgb(179, 60, 60);\n  --selection: rgb(60, 179, 113);\n  --hover-selection: rgba(60, 179, 113, 0.85);\n  --delete: rgb(179, 60, 72);\n  --delete-faint: rgba(179, 60, 72, 0.6);\n  --link: royalblue;\n  --link-hover: #6d99c6;\n  --key-bg-base: #f2f2f2;\n  --key-bg-hover: white;\n  --key-bg-highlight: sandybrown;\n  --key-color-base: #6f6f6f;\n  --key-color-extreme: #313131;\n  --key-color-hover: white;\n  --code-bg: rgba(0, 0, 0, 0.15);\n}\nhtml {\n  font-family: sans-serif;\n}\nhtml, body {\n\twidth: 100vw;\n\theight: 100vh;\n\toverflow: auto;\n\tpadding: 0;\n\tmargin: 0;\n  background-color: var(--bg);\n  color: var(--fg);\n\n  transition: 300ms ease-in-out;\n  transition-property: color, background-color, border-color;\n}\n\nh1, h2, h3, h4, h5, h6 {\n  font-family: Quicksand, avenir, sans-serif;\n}\n\nbody[data-theme="dark"] {\n  color-scheme: dark;\n  --bg: #123;\n  --bg-rgb: 17,34,51;\n  --fg: white;\n  --key-bg-base: #1c2c3b;\n  --key-color-base: #b7b7b7;\n  --key-color-extreme: #e7e7e7;\n}\n@media (prefers-color-scheme: dark) {\n  body[data-theme="system"] {\n    color-scheme: dark;\n    --bg: #123;\n    --bg-rgb: 17,34,51;\n    --fg: white;\n    --key-bg-base: #1c2c3b;\n    --key-color-base: #b7b7b7;\n    --key-color-extreme: #e7e7e7;\n  }\n}\n\nh3 {\n  margin-bottom: 10px;\n}\n\na { color: var(--link) }\na:hover { color: var(--link-hover) }\n\ncode {\n  background-color: var(--code-bg);\n  border-radius: 2px;\n  padding: .15em .3em .05em;\n}\n\n#actions {\n\tposition: absolute;\n  display: flex;\n\tbottom: 5px;\n\tright: 5px;\n  gap: 4px;\n}\n\n#actions button {\n  display: inline-block;\n  cursor: pointer;\n  background-color: var(--hover-selection);\n  color: white;\n\n  font-size: 16px;\n  border: none;\n  border-radius: 5px;\n  padding: 0 5px;\n\n  height: 30px;\n  line-height: 30px;\n  vertical-align: middle;\n}\n\n#actions button[disabled] {\n  filter: saturate(20%);\n  opacity: .5;\n  cursor: not-allowed;\n}\n\n#settings-bar {\n  position: absolute;\n  top: 10px;\n  right: 10px;\n}\n\n#settings-bar button {\n  background: none;\n  color: var(--fg);\n  border: none;\n}\n#settings-bar button:hover {\n  cursor: pointer;\n  color: royalblue;\n}\n\n.fa-delete-right::before {\n  content: \'\\f55a\';\n  transform-origin: center;\n  transform: rotateZ(180deg);\n  display: inline-block;\n}\n'],sourceRoot:""}]),n.Z=a},51424:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,"body {\n  margin: 0;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\ncode {\n  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n    monospace;\n}\n","",{version:3,sources:["webpack://./src/index.css"],names:[],mappings:"AAAA;EACE,SAAS;EACT,mCAAmC;EACnC,kCAAkC;AACpC;;AAEA;EACE;aACW;AACb",sourcesContent:["body {\n  margin: 0;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\ncode {\n  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n    monospace;\n}\n"],sourceRoot:""}]),n.Z=a},56281:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,"button.pi2Ig8c3Fdh4H2Jpxdo7 {\n  display: inline-block;\n  cursor: pointer;\n  background-color: var(--hover-selection);\n  color: white;\n\n  font-size: 16px;\n  border: none;\n  border-radius: 5px;\n  padding: 0 5px;\n\n  height: 30px;\n  line-height: 30px;\n  vertical-align: middle;\n}\n\nbutton.Ctpu4E2dZYJ6g8CUGFOF {\n  color: var(--fg);\n  background-color: transparent;\n}\n\nbutton.pi2Ig8c3Fdh4H2Jpxdo7[disabled] {\n  filter: saturate(20%);\n  opacity: .5;\n  cursor: not-allowed;\n}\n","",{version:3,sources:["webpack://./src/Common/action-button.module.css"],names:[],mappings:"AAAA;EACE,qBAAqB;EACrB,eAAe;EACf,wCAAwC;EACxC,YAAY;;EAEZ,eAAe;EACf,YAAY;EACZ,kBAAkB;EAClB,cAAc;;EAEd,YAAY;EACZ,iBAAiB;EACjB,sBAAsB;AACxB;;AAEA;EACE,gBAAgB;EAChB,6BAA6B;AAC/B;;AAEA;EACE,qBAAqB;EACrB,WAAW;EACX,mBAAmB;AACrB",sourcesContent:["button.action {\n  display: inline-block;\n  cursor: pointer;\n  background-color: var(--hover-selection);\n  color: white;\n\n  font-size: 16px;\n  border: none;\n  border-radius: 5px;\n  padding: 0 5px;\n\n  height: 30px;\n  line-height: 30px;\n  vertical-align: middle;\n}\n\nbutton.secondary {\n  color: var(--fg);\n  background-color: transparent;\n}\n\nbutton.action[disabled] {\n  filter: saturate(20%);\n  opacity: .5;\n  cursor: not-allowed;\n}\n"],sourceRoot:""}]),a.locals={action:"pi2Ig8c3Fdh4H2Jpxdo7",secondary:"Ctpu4E2dZYJ6g8CUGFOF"},n.Z=a},56634:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,".jThiLc5_BrUyl71v3rKn {\n  display: inline-block;\n  position: absolute;\n  z-index: 5;\n  font-size: 70%;\n  background: var(--bg);\n  padding: 5px 10px;\n  margin-left: 10px;\n\n  border-radius: 4px;\n}\n\n.jThiLc5_BrUyl71v3rKn p {\n  display: inline-block;\n  cursor: pointer;\n  margin: 0;\n}\n\n.jThiLc5_BrUyl71v3rKn ul {\n  display: none;\n}\n.jThiLc5_BrUyl71v3rKn.xG2GKlsc07jLEb2aMC6H {\n  box-shadow: 2px 2px 5px 0px rgba(0, 0, 0, 0.5);\n}\n.jThiLc5_BrUyl71v3rKn.xG2GKlsc07jLEb2aMC6H ul {\n  display: block;\n  padding: 0;\n  margin: 0;\n  list-style-type: none;\n}\n\n.jThiLc5_BrUyl71v3rKn li {\n  cursor: pointer;\n  margin: 2px 0;\n  line-height: 20px;\n  padding: 0 5px;\n  border-radius: 10px;\n}\n\n.jThiLc5_BrUyl71v3rKn li:hover {\n  background-color: var(--hover-selection);\n  color: white;\n}\n","",{version:3,sources:["webpack://./src/Common/action-menu.module.css"],names:[],mappings:"AAAA;EACE,qBAAqB;EACrB,kBAAkB;EAClB,UAAU;EACV,cAAc;EACd,qBAAqB;EACrB,iBAAiB;EACjB,iBAAiB;;EAEjB,kBAAkB;AACpB;;AAEA;EACE,qBAAqB;EACrB,eAAe;EACf,SAAS;AACX;;AAEA;EACE,aAAa;AACf;AACA;EACE,8CAA8C;AAChD;AACA;EACE,cAAc;EACd,UAAU;EACV,SAAS;EACT,qBAAqB;AACvB;;AAEA;EACE,eAAe;EACf,aAAa;EACb,iBAAiB;EACjB,cAAc;EACd,mBAAmB;AACrB;;AAEA;EACE,wCAAwC;EACxC,YAAY;AACd",sourcesContent:[".menu {\n  display: inline-block;\n  position: absolute;\n  z-index: 5;\n  font-size: 70%;\n  background: var(--bg);\n  padding: 5px 10px;\n  margin-left: 10px;\n\n  border-radius: 4px;\n}\n\n.menu p {\n  display: inline-block;\n  cursor: pointer;\n  margin: 0;\n}\n\n.menu ul {\n  display: none;\n}\n.menu.open {\n  box-shadow: 2px 2px 5px 0px rgba(0, 0, 0, 0.5);\n}\n.menu.open ul {\n  display: block;\n  padding: 0;\n  margin: 0;\n  list-style-type: none;\n}\n\n.menu li {\n  cursor: pointer;\n  margin: 2px 0;\n  line-height: 20px;\n  padding: 0 5px;\n  border-radius: 10px;\n}\n\n.menu li:hover {\n  background-color: var(--hover-selection);\n  color: white;\n}\n"],sourceRoot:""}]),a.locals={menu:"jThiLc5_BrUyl71v3rKn",open:"xG2GKlsc07jLEb2aMC6H"},n.Z=a},49502:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,".ZpdcqlK42OntJos3eGw0 {\n  background-color: var(--bg);\n  padding: 20px 40px;\n  margin: 40px;\n  max-width: 500px;\n  box-shadow: 0px 10px 25px rgba(0, 0, 0, 0.4);\n  border-radius: 2px;\n}\n\n.ZpdcqlK42OntJos3eGw0 p, .ZpdcqlK42OntJos3eGw0 ul {\n  font-family: sans-serif;\n  line-height: 1.3rem;\n}\n\n.Mywg1Gw3bKMc9Kd9qcEO {\n  display: block;\n  margin: 0 auto;\n}\n","",{version:3,sources:["webpack://./src/Common/dialog-box.module.css"],names:[],mappings:"AAAA;EACE,2BAA2B;EAC3B,kBAAkB;EAClB,YAAY;EACZ,gBAAgB;EAChB,4CAA4C;EAC5C,kBAAkB;AACpB;;AAEA;EACE,uBAAuB;EACvB,mBAAmB;AACrB;;AAEA;EACE,cAAc;EACd,cAAc;AAChB",sourcesContent:[".dialog {\n  background-color: var(--bg);\n  padding: 20px 40px;\n  margin: 40px;\n  max-width: 500px;\n  box-shadow: 0px 10px 25px rgba(0, 0, 0, 0.4);\n  border-radius: 2px;\n}\n\n.dialog p, .dialog ul {\n  font-family: sans-serif;\n  line-height: 1.3rem;\n}\n\n.button {\n  display: block;\n  margin: 0 auto;\n}\n"],sourceRoot:""}]),a.locals={dialog:"ZpdcqlK42OntJos3eGw0",button:"Mywg1Gw3bKMc9Kd9qcEO"},n.Z=a},86015:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,".ho3CuFFjX1VFNZJiAyVs {\n  position: relative;\n}\n\n.u9J3v5ZrIbuVICzNBkRw {\n  padding: 5px;\n  cursor: pointer;\n  opacity: 0.5;\n  color: var(--key-color-base);\n}\n.u9J3v5ZrIbuVICzNBkRw:hover {\n  opacity: 1;\n}\n\n.wmqWaOx7XyKADh7Kv4RZ {\n  position: absolute;\n  z-index: 10;\n  bottom: 0;\n  left: 50%;\n  transform: translate(-50%, 100%);\n  max-width: 250px;\n  width: 100%;\n\n  border-radius: 4px;\n  padding: 3px 5px;\n\n  color: white;\n  background-color: var(--error-highlight);\n  font-size: 85%;\n  font-family: sans-serif;\n\n  opacity: 0.9;\n}\n.wmqWaOx7XyKADh7Kv4RZ::before {\n  position: absolute;\n  display: block;\n  content: ' ';\n  z-index: -1;\n\n  left: 50%;\n  width: 10px;\n  height: 10px;\n\n  background-color: var(--error-highlight);\n  transform: translate(-50%, -7px) rotate(45deg);\n}\n","",{version:3,sources:["webpack://./src/Common/editablefield.module.css"],names:[],mappings:"AAAA;EACE,kBAAkB;AACpB;;AAEA;EACE,YAAY;EACZ,eAAe;EACf,YAAY;EACZ,4BAA4B;AAC9B;AACA;EACE,UAAU;AACZ;;AAEA;EACE,kBAAkB;EAClB,WAAW;EACX,SAAS;EACT,SAAS;EACT,gCAAgC;EAChC,gBAAgB;EAChB,WAAW;;EAEX,kBAAkB;EAClB,gBAAgB;;EAEhB,YAAY;EACZ,wCAAwC;EACxC,cAAc;EACd,uBAAuB;;EAEvB,YAAY;AACd;AACA;EACE,kBAAkB;EAClB,cAAc;EACd,YAAY;EACZ,WAAW;;EAEX,SAAS;EACT,WAAW;EACX,YAAY;;EAEZ,wCAAwC;EACxC,8CAA8C;AAChD",sourcesContent:[".container {\n  position: relative;\n}\n\n.edit {\n  padding: 5px;\n  cursor: pointer;\n  opacity: 0.5;\n  color: var(--key-color-base);\n}\n.edit:hover {\n  opacity: 1;\n}\n\n.error {\n  position: absolute;\n  z-index: 10;\n  bottom: 0;\n  left: 50%;\n  transform: translate(-50%, 100%);\n  max-width: 250px;\n  width: 100%;\n\n  border-radius: 4px;\n  padding: 3px 5px;\n\n  color: white;\n  background-color: var(--error-highlight);\n  font-size: 85%;\n  font-family: sans-serif;\n\n  opacity: 0.9;\n}\n.error::before {\n  position: absolute;\n  display: block;\n  content: ' ';\n  z-index: -1;\n\n  left: 50%;\n  width: 10px;\n  height: 10px;\n\n  background-color: var(--error-highlight);\n  transform: translate(-50%, -7px) rotate(45deg);\n}\n"],sourceRoot:""}]),a.locals={container:"ho3CuFFjX1VFNZJiAyVs",edit:"u9J3v5ZrIbuVICzNBkRw",error:"wmqWaOx7XyKADh7Kv4RZ"},n.Z=a},33988:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,".OaJISbD1WCmb03at77EG {\n  position: relative;\n}\n\n.MUN9De8dUvbPGH9cEDoQ {\n  position: absolute;\n  z-index: 10;\n  bottom: 0;\n  left: 50%;\n  transform: translate(-50%, 100%);\n  max-width: 250px;\n  width: 100%;\n\n  border-radius: 4px;\n  padding: 3px 5px;\n\n  color: white;\n  background-color: var(--error-highlight);\n  font-size: 85%;\n  font-family: sans-serif;\n\n  opacity: 0.9;\n}\n.MUN9De8dUvbPGH9cEDoQ::before {\n  position: absolute;\n  display: block;\n  content: ' ';\n  z-index: -1;\n\n  left: 50%;\n  width: 10px;\n  height: 10px;\n\n  background-color: var(--error-highlight);\n  transform: translate(-50%, -7px) rotate(45deg);\n}\n","",{version:3,sources:["webpack://./src/Common/input.module.css"],names:[],mappings:"AAAA;EACE,kBAAkB;AACpB;;AAEA;EACE,kBAAkB;EAClB,WAAW;EACX,SAAS;EACT,SAAS;EACT,gCAAgC;EAChC,gBAAgB;EAChB,WAAW;;EAEX,kBAAkB;EAClB,gBAAgB;;EAEhB,YAAY;EACZ,wCAAwC;EACxC,cAAc;EACd,uBAAuB;;EAEvB,YAAY;AACd;AACA;EACE,kBAAkB;EAClB,cAAc;EACd,YAAY;EACZ,WAAW;;EAEX,SAAS;EACT,WAAW;EACX,YAAY;;EAEZ,wCAAwC;EACxC,8CAA8C;AAChD",sourcesContent:[".wrapper {\n  position: relative;\n}\n\n.error {\n  position: absolute;\n  z-index: 10;\n  bottom: 0;\n  left: 50%;\n  transform: translate(-50%, 100%);\n  max-width: 250px;\n  width: 100%;\n\n  border-radius: 4px;\n  padding: 3px 5px;\n\n  color: white;\n  background-color: var(--error-highlight);\n  font-size: 85%;\n  font-family: sans-serif;\n\n  opacity: 0.9;\n}\n.error::before {\n  position: absolute;\n  display: block;\n  content: ' ';\n  z-index: -1;\n\n  left: 50%;\n  width: 10px;\n  height: 10px;\n\n  background-color: var(--error-highlight);\n  transform: translate(-50%, -7px) rotate(45deg);\n}\n"],sourceRoot:""}]),a.locals={wrapper:"OaJISbD1WCmb03at77EG",error:"MUN9De8dUvbPGH9cEDoQ"},n.Z=a},87617:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,".J2R67AQeCK_aC1DKFCMJ {\n  margin: 4px;\n}","",{version:3,sources:["webpack://./src/Common/link.module.css"],names:[],mappings:"AAAA;EACE,WAAW;AACb",sourcesContent:[".icon {\n  margin: 4px;\n}"],sourceRoot:""}]),a.locals={icon:"J2R67AQeCK_aC1DKFCMJ"},n.Z=a},92127:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,".FMkASzwt_oMscZdObpDQ {\n  display: inline-block;\n  text-align: center;\n}\n.TNF6aRMBPANvZifB27ZK {\n  display: inline-block;\n  animation: GGCs7iiBiwDCnT80cyTh 1s linear infinite;\n}\n\n@keyframes GGCs7iiBiwDCnT80cyTh {\n  from { transform: rotate(0deg); }\n  to { transform: rotate(360deg); }\n}","",{version:3,sources:["webpack://./src/Common/spinner.module.css"],names:[],mappings:"AAAA;EACE,qBAAqB;EACrB,kBAAkB;AACpB;AACA;EACE,qBAAqB;EACrB,kDAAkC;AACpC;;AAEA;EACE,OAAO,uBAAuB,EAAE;EAChC,KAAK,yBAAyB,EAAE;AAClC",sourcesContent:[".spinner {\n  display: inline-block;\n  text-align: center;\n}\n.icon {\n  display: inline-block;\n  animation: spin 1s linear infinite;\n}\n\n@keyframes spin {\n  from { transform: rotate(0deg); }\n  to { transform: rotate(360deg); }\n}"],sourceRoot:""}]),a.locals={spinner:"FMkASzwt_oMscZdObpDQ",icon:"TNF6aRMBPANvZifB27ZK",spin:"GGCs7iiBiwDCnT80cyTh"},n.Z=a},528:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,".sq9i7hQeTeeKuarmO8oA {\n  display: inline-block;\n  font-size: 70%;\n  background: rgba(0, 0, 0, 0.5);\n  color: white;\n  padding: 4px;\n  border-radius: 4px;\n}\n","",{version:3,sources:["webpack://./src/Common/tip.module.css"],names:[],mappings:"AAAA;EACE,qBAAqB;EACrB,cAAc;EACd,8BAA8B;EAC9B,YAAY;EACZ,YAAY;EACZ,kBAAkB;AACpB",sourcesContent:[".tip {\n  display: inline-block;\n  font-size: 70%;\n  background: rgba(0, 0, 0, 0.5);\n  color: white;\n  padding: 4px;\n  border-radius: 4px;\n}\n"],sourceRoot:""}]),a.locals={tip:"sq9i7hQeTeeKuarmO8oA"},n.Z=a},14084:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,".Q5veln3l3laVkuNPs5dQ {\n  position: relative;\n}\n\n.Q5veln3l3laVkuNPs5dQ pre {\n  white-space: pre;\n  background-color: var(--code-bg);\n  color: var(--key-color-base);\n  padding: 10px;\n  max-height: 320px;\n  overflow: scroll;\n}\n\n.dqzgBwJ1Rq0XgMqeAKe7 {\n  position: absolute;\n  top: 15px;\n  right: 15px;\n  padding: 4px 7px;\n  color: var(--key-color-base);\n  background-color: var(--key-bg-base);\n  border: 1px solid var(--key-color-base);\n  border-radius: 3px;\n}\n.dqzgBwJ1Rq0XgMqeAKe7:hover {\n  cursor: pointer;\n  background-color: var(--selection);\n  border: var(--selection);\n  color: white;\n}\n\n.YV2lKA9hbJpP4Vs4udw8 {\n  position: absolute;\n  top: 5px;\n  right: 0px;\n  background-color: var(--selection);\n  color: white;\n  padding: 10px;\n  border-radius: 2px;\n  cursor: none;\n}\n","",{version:3,sources:["webpack://./src/Dialogs/unexpected-error.module.css"],names:[],mappings:"AAAA;EACE,kBAAkB;AACpB;;AAEA;EACE,gBAAgB;EAChB,gCAAgC;EAChC,4BAA4B;EAC5B,aAAa;EACb,iBAAiB;EACjB,gBAAgB;AAClB;;AAEA;EACE,kBAAkB;EAClB,SAAS;EACT,WAAW;EACX,gBAAgB;EAChB,4BAA4B;EAC5B,oCAAoC;EACpC,uCAAuC;EACvC,kBAAkB;AACpB;AACA;EACE,eAAe;EACf,kCAAkC;EAClC,wBAAwB;EACxB,YAAY;AACd;;AAEA;EACE,kBAAkB;EAClB,QAAQ;EACR,UAAU;EACV,kCAAkC;EAClC,YAAY;EACZ,aAAa;EACb,kBAAkB;EAClB,YAAY;AACd",sourcesContent:[".stackTrace {\n  position: relative;\n}\n\n.stackTrace pre {\n  white-space: pre;\n  background-color: var(--code-bg);\n  color: var(--key-color-base);\n  padding: 10px;\n  max-height: 320px;\n  overflow: scroll;\n}\n\n.button {\n  position: absolute;\n  top: 15px;\n  right: 15px;\n  padding: 4px 7px;\n  color: var(--key-color-base);\n  background-color: var(--key-bg-base);\n  border: 1px solid var(--key-color-base);\n  border-radius: 3px;\n}\n.button:hover {\n  cursor: pointer;\n  background-color: var(--selection);\n  border: var(--selection);\n  color: white;\n}\n\n.copyMessage {\n  position: absolute;\n  top: 5px;\n  right: 0px;\n  background-color: var(--selection);\n  color: white;\n  padding: 10px;\n  border-radius: 2px;\n  cursor: none;\n}\n"],sourceRoot:""}]),a.locals={stackTrace:"Q5veln3l3laVkuNPs5dQ",button:"dqzgBwJ1Rq0XgMqeAKe7",copyMessage:"YV2lKA9hbJpP4Vs4udw8"},n.Z=a},14409:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,".xCOOsvxL5qQ3kR8ri91A {\n  box-shadow: 0 4px 10px 0px rgba(0, 0, 0, 0.5);\n}\n\n.u4uW9U2E0DfbUM9vP9pf {\n  text-align: center;\n  padding: 0;\n  margin: 0;\n}\n\n.u4uW9U2E0DfbUM9vP9pf li {\n  display: inline-block;\n  font-family: monospace;\n  font-size: 120%;\n  margin: 4px 2px;\n  padding: 4px 4px;\n  border-radius: 2px;\n  cursor: pointer;\n\n  background-color: rgba(0, 0, 0, .5);\n  opacity: 0.5;\n  color: white;\n}\n\n.u4uW9U2E0DfbUM9vP9pf li.YcHSun3PLo8dCb9qIZtc {\n  opacity: 1;\n  background-color: var(--selection);\n  color: white;\n}\n\n.u4uW9U2E0DfbUM9vP9pf li:hover {\n  opacity: 1;\n  background-color: var(--hover-selection);\n}\n\n.d3hMEDpEkH8H7YLG_NjI {\n  width: 100%;\n  box-sizing: border-box;\n  text-align: center;\n}\n","",{version:3,sources:["webpack://./src/EnhancedPickers/Keycode/styles.module.css"],names:[],mappings:"AAAA;EACE,6CAA6C;AAC/C;;AAEA;EACE,kBAAkB;EAClB,UAAU;EACV,SAAS;AACX;;AAEA;EACE,qBAAqB;EACrB,sBAAsB;EACtB,eAAe;EACf,eAAe;EACf,gBAAgB;EAChB,kBAAkB;EAClB,eAAe;;EAEf,mCAAmC;EACnC,YAAY;EACZ,YAAY;AACd;;AAEA;EACE,UAAU;EACV,kCAAkC;EAClC,YAAY;AACd;;AAEA;EACE,UAAU;EACV,wCAAwC;AAC1C;;AAEA;EACE,WAAW;EACX,sBAAsB;EACtB,kBAAkB;AACpB",sourcesContent:[".previewKeycode {\n  box-shadow: 0 4px 10px 0px rgba(0, 0, 0, 0.5);\n}\n\n.modifiers {\n  text-align: center;\n  padding: 0;\n  margin: 0;\n}\n\n.modifiers li {\n  display: inline-block;\n  font-family: monospace;\n  font-size: 120%;\n  margin: 4px 2px;\n  padding: 4px 4px;\n  border-radius: 2px;\n  cursor: pointer;\n\n  background-color: rgba(0, 0, 0, .5);\n  opacity: 0.5;\n  color: white;\n}\n\n.modifiers li.selected {\n  opacity: 1;\n  background-color: var(--selection);\n  color: white;\n}\n\n.modifiers li:hover {\n  opacity: 1;\n  background-color: var(--hover-selection);\n}\n\n.quickCloseTip {\n  width: 100%;\n  box-sizing: border-box;\n  text-align: center;\n}\n"],sourceRoot:""}]),a.locals={previewKeycode:"xCOOsvxL5qQ3kR8ri91A",modifiers:"u4uW9U2E0DfbUM9vP9pf",selected:"YcHSun3PLo8dCb9qIZtc",quickCloseTip:"d3hMEDpEkH8H7YLG_NjI"},n.Z=a},27470:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,'.S3t60CK1JCROFIrRlm4j [readonly] {\n  cursor: not-allowed;\n  color: gray;\n  outline: gray;\n}\n\ninput.S3t60CK1JCROFIrRlm4j[type="text"],\ninput.S3t60CK1JCROFIrRlm4j[type="number"],\nselect.S3t60CK1JCROFIrRlm4j {\n  width: 100%;\n}\n\nol.MedG7SPG2ge2h7j2yqrJ {\n  list-style-type: none;\n  margin-top: 0;\n  padding: 0;\n}\n.V50Bekt6td9yQOSiDGdx {\n  list-style-type: none;\n  margin: 0;\n  padding: 0;\n}\n.V50Bekt6td9yQOSiDGdx li {\n  display: inline-block;\n  line-height: 2rem;\n}\nol.QNg3v6_eJoK7_qV0_y9n {\n  margin: 0;\n}\nol.QNg3v6_eJoK7_qV0_y9n li {\n  line-height: 2rem;\n}\nol.u65C3Uji7covMUn996dR {\n  list-style-type: none;\n  padding: 0;\n}\n.xp5u4Uo4X2fxxX9KwwXu {\n  cursor: pointer;\n  margin: 2px;\n  padding: 5px;\n  font-family: monospace;\n  border-radius: 1rem;\n  background-color: var(--key-bg-base);\n}\n.xp5u4Uo4X2fxxX9KwwXu:hover {\n  background-color: var(--hover-selection);\n  color: white;\n}\n\n.gpFGP00LCwlGjK6yrGWw {\n  vertical-align: text-bottom;\n  margin: 0 2px;\n}\n.gpFGP00LCwlGjK6yrGWw:hover {\n  color: black;\n}\n\n.gsAzkKxnfzTcp5ApwmWS {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n  list-style-type: none;\n  padding: 0;\n  margin: 0;\n}\n\n/* Copied from MacroEditor :( */\n.KrcWDYfRVRfvRhpsBFxs {\n  visibility: hidden;\n  position: absolute;\n  top: 0px;\n  right: 0px;\n  font-size: 80%;\n\n  color: var(--key-color-hover);\n}\n.KrcWDYfRVRfvRhpsBFxs > * {\n  margin: 2px;\n  opacity: 0.5;\n  cursor: pointer;\n}\n.gsAzkKxnfzTcp5ApwmWS li :hover .KrcWDYfRVRfvRhpsBFxs {\n  visibility: visible;\n  z-index: 10;\n}\n\n.KrcWDYfRVRfvRhpsBFxs :hover {\n  opacity: 1;\n}\n',"",{version:3,sources:["webpack://./src/Keyboard/Behaviors/PropertyValue/styles.module.css"],names:[],mappings:"AAAA;EACE,mBAAmB;EACnB,WAAW;EACX,aAAa;AACf;;AAEA;;;EAGE,WAAW;AACb;;AAEA;EACE,qBAAqB;EACrB,aAAa;EACb,UAAU;AACZ;AACA;EACE,qBAAqB;EACrB,SAAS;EACT,UAAU;AACZ;AACA;EACE,qBAAqB;EACrB,iBAAiB;AACnB;AACA;EACE,SAAS;AACX;AACA;EACE,iBAAiB;AACnB;AACA;EACE,qBAAqB;EACrB,UAAU;AACZ;AACA;EACE,eAAe;EACf,WAAW;EACX,YAAY;EACZ,sBAAsB;EACtB,mBAAmB;EACnB,oCAAoC;AACtC;AACA;EACE,wCAAwC;EACxC,YAAY;AACd;;AAEA;EACE,2BAA2B;EAC3B,aAAa;AACf;AACA;EACE,YAAY;AACd;;AAEA;EACE,aAAa;EACb,eAAe;EACf,SAAS;EACT,qBAAqB;EACrB,UAAU;EACV,SAAS;AACX;;AAEA,+BAA+B;AAC/B;EACE,kBAAkB;EAClB,kBAAkB;EAClB,QAAQ;EACR,UAAU;EACV,cAAc;;EAEd,6BAA6B;AAC/B;AACA;EACE,WAAW;EACX,YAAY;EACZ,eAAe;AACjB;AACA;EACE,mBAAmB;EACnB,WAAW;AACb;;AAEA;EACE,UAAU;AACZ",sourcesContent:['.propertyValue [readonly] {\n  cursor: not-allowed;\n  color: gray;\n  outline: gray;\n}\n\ninput.propertyValue[type="text"],\ninput.propertyValue[type="number"],\nselect.propertyValue {\n  width: 100%;\n}\n\nol.propertyMultiSelect {\n  list-style-type: none;\n  margin-top: 0;\n  padding: 0;\n}\n.propertyMultiSelectChips {\n  list-style-type: none;\n  margin: 0;\n  padding: 0;\n}\n.propertyMultiSelectChips li {\n  display: inline-block;\n  line-height: 2rem;\n}\nol.propertyPhandleSelect {\n  margin: 0;\n}\nol.propertyPhandleSelect li {\n  line-height: 2rem;\n}\nol.propertyPhandleSingleton {\n  list-style-type: none;\n  padding: 0;\n}\n.behaviorBind {\n  cursor: pointer;\n  margin: 2px;\n  padding: 5px;\n  font-family: monospace;\n  border-radius: 1rem;\n  background-color: var(--key-bg-base);\n}\n.behaviorBind:hover {\n  background-color: var(--hover-selection);\n  color: white;\n}\n\n.phandleRemove {\n  vertical-align: text-bottom;\n  margin: 0 2px;\n}\n.phandleRemove:hover {\n  color: black;\n}\n\n.propertyBindingsValue {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n  list-style-type: none;\n  padding: 0;\n  margin: 0;\n}\n\n/* Copied from MacroEditor :( */\n.actions {\n  visibility: hidden;\n  position: absolute;\n  top: 0px;\n  right: 0px;\n  font-size: 80%;\n\n  color: var(--key-color-hover);\n}\n.actions > * {\n  margin: 2px;\n  opacity: 0.5;\n  cursor: pointer;\n}\n.propertyBindingsValue li :hover .actions {\n  visibility: visible;\n  z-index: 10;\n}\n\n.actions :hover {\n  opacity: 1;\n}\n'],sourceRoot:""}]),a.locals={propertyValue:"S3t60CK1JCROFIrRlm4j",propertyMultiSelect:"MedG7SPG2ge2h7j2yqrJ",propertyMultiSelectChips:"V50Bekt6td9yQOSiDGdx",propertyPhandleSelect:"QNg3v6_eJoK7_qV0_y9n",propertyPhandleSingleton:"u65C3Uji7covMUn996dR",behaviorBind:"xp5u4Uo4X2fxxX9KwwXu",phandleRemove:"gpFGP00LCwlGjK6yrGWw",propertyBindingsValue:"gsAzkKxnfzTcp5ApwmWS",actions:"KrcWDYfRVRfvRhpsBFxs"},n.Z=a},34288:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,".kcj881bnLDph62EcKelj {\n  padding-bottom: 60px;\n}\n\n.GeuMxQtBvZYr0nOURDHd {\n  display: flex;\n  width: 190px;\n  flex-direction: column;\n  padding: 10px;\n  gap: 10px;\n  position: fixed;\n}\n\n.NqlHG1MKBiOUUFAed3CM {\n  max-width: 700px;\n  margin: 0 auto;\n  padding-bottom: 60px;\n}\n\n.NqlHG1MKBiOUUFAed3CM table {\n  border-spacing: 0;\n}\n.NqlHG1MKBiOUUFAed3CM table thead {\n  text-align: left;\n}\n\n.NqlHG1MKBiOUUFAed3CM table tbody tr td {\n  padding: 10px;\n  margin: 0;\n}\n.NqlHG1MKBiOUUFAed3CM table tbody tr:nth-child(even) {\n  background-color: var(--key-bg-base);\n}\n\n.Q3_rmo3XiEVg8qfXgKX_ {\n  cursor: pointer;\n  padding: 5px;\n  opacity: 0.6;\n}\n.Q3_rmo3XiEVg8qfXgKX_:hover {\n  opacity: 1;\n}\n\ntable.czOKx_t_EDF44pilzyzA { max-height: 80vh; }\ntable.czOKx_t_EDF44pilzyzA th { text-align: left }\ntable.czOKx_t_EDF44pilzyzA input { font-family: monospace }\ntable.czOKx_t_EDF44pilzyzA td {\n  padding: 4px;\n  vertical-align: top;\n}\ntable.czOKx_t_EDF44pilzyzA .s8rWNi6e8BZ7yQubfDws {\n  font-family: monospace;\n}\n.Bux6GxjreGZZkcXqx6kv {\n  display: block;\n  font-style: italic;\n}\n","",{version:3,sources:["webpack://./src/Keyboard/Behaviors/styles.module.css"],names:[],mappings:"AAAA;EACE,oBAAoB;AACtB;;AAEA;EACE,aAAa;EACb,YAAY;EACZ,sBAAsB;EACtB,aAAa;EACb,SAAS;EACT,eAAe;AACjB;;AAEA;EACE,gBAAgB;EAChB,cAAc;EACd,oBAAoB;AACtB;;AAEA;EACE,iBAAiB;AACnB;AACA;EACE,gBAAgB;AAClB;;AAEA;EACE,aAAa;EACb,SAAS;AACX;AACA;EACE,oCAAoC;AACtC;;AAEA;EACE,eAAe;EACf,YAAY;EACZ,YAAY;AACd;AACA;EACE,UAAU;AACZ;;AAEA,6BAAmB,gBAAgB,EAAE;AACrC,gCAAsB,iBAAiB;AACvC,mCAAyB,uBAAuB;AAChD;EACE,YAAY;EACZ,mBAAmB;AACrB;AACA;EACE,sBAAsB;AACxB;AACA;EACE,cAAc;EACd,kBAAkB;AACpB",sourcesContent:[".main {\n  padding-bottom: 60px;\n}\n\n.sidebar {\n  display: flex;\n  width: 190px;\n  flex-direction: column;\n  padding: 10px;\n  gap: 10px;\n  position: fixed;\n}\n\n.panel {\n  max-width: 700px;\n  margin: 0 auto;\n  padding-bottom: 60px;\n}\n\n.panel table {\n  border-spacing: 0;\n}\n.panel table thead {\n  text-align: left;\n}\n\n.panel table tbody tr td {\n  padding: 10px;\n  margin: 0;\n}\n.panel table tbody tr:nth-child(even) {\n  background-color: var(--key-bg-base);\n}\n\n.action {\n  cursor: pointer;\n  padding: 5px;\n  opacity: 0.6;\n}\n.action:hover {\n  opacity: 1;\n}\n\ntable.editorForm { max-height: 80vh; }\ntable.editorForm th { text-align: left }\ntable.editorForm input { font-family: monospace }\ntable.editorForm td {\n  padding: 4px;\n  vertical-align: top;\n}\ntable.editorForm .propertyName {\n  font-family: monospace;\n}\n.propertyDeprecation {\n  display: block;\n  font-style: italic;\n}\n"],sourceRoot:""}]),a.locals={main:"kcj881bnLDph62EcKelj",sidebar:"GeuMxQtBvZYr0nOURDHd",panel:"NqlHG1MKBiOUUFAed3CM",action:"Q3_rmo3XiEVg8qfXgKX_",editorForm:"czOKx_t_EDF44pilzyzA",propertyName:"s8rWNi6e8BZ7yQubfDws",propertyDeprecation:"Bux6GxjreGZZkcXqx6kv"},n.Z=a},78207:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,'.pwXbGORsYKqyOPBm9_dW {\n  padding-bottom: 60px;\n}\n\n.QgFDXNybKD_XN66M_WpJ {\n  display: flex;\n  width: 190px;\n  flex-direction: column;\n  padding: 10px;\n  gap: 10px;\n  position: fixed;\n}\n\n.Gy0KZGCgOeVminAfggFQ {\n  cursor: pointer;\n  background-color: var(--key-bg-base);\n}\n.Gy0KZGCgOeVminAfggFQ:hover {\n  border: 4px solid var(--selection);\n  box-sizing: border-box;\n}\n\n.Ld9cVdtpS_DpbEifyX9Y {\n  background-color: var(--selection);\n}\n.Ld9cVdtpS_DpbEifyX9Y:hover {\n  background-color: var(--hover-selection);\n}\n\n.mqpJ7uHAMKxvORoOIPFK {\n  max-width: 450px;\n  margin: 0 auto;\n  padding-bottom: 60px;\n}\n\n.BVucwy4AZCyl7GyivzMn {\n  display: flex;\n  justify-content: space-between;\n  border-bottom: 2px solid var(--key-bg-base);\n  margin: 5px 0;\n}\n\n.U6g0njWjBrtb_I3XhAeV {\n  cursor: pointer;\n  padding: 5px;\n  opacity: 0.6;\n}\n.U6g0njWjBrtb_I3XhAeV:hover {\n  opacity: 1;\n}\n\n.CROhsBLtunQ2BbfWdkQw {\n  margin: 10px 0 40px;\n}\n\n.CROhsBLtunQ2BbfWdkQw .MhA4fXXuaZ1iPvv05w4m {\n  display: flex;\n  justify-content: space-evenly;\n  align-items: center;\n}\n\n.CROhsBLtunQ2BbfWdkQw h5 {\n  margin: 0;\n}\n\n.vujYcgQjiN4BGp37FMUH {\n  color: var(--key-color-base);\n}\n\n.uh2yPWyfEOZtgXo2_KtU {\n  color: var(--delete);\n}\n\n.NAB1EN6_pcYIy5Db9XnC {\n  display: none !important;\n}\n.NAB1EN6_pcYIy5Db9XnC:hover {\n  color: white;\n  cursor: pointer;\n}\n.kYn8brsFgEaf61oQyv4d:hover .NAB1EN6_pcYIy5Db9XnC {\n  display: flex !important;\n  position: absolute;\n  right: -48px;\n  transform: scale(0.5);\n}\n\n.NGxnhfSJaJ9FNu3hlBfc.NAB1EN6_pcYIy5Db9XnC,\n.NGxnhfSJaJ9FNu3hlBfc.GXgG_IaQTricqThqzsKe > * {\n  background-color: sandybrown;\n  color: white;\n}\n.NGxnhfSJaJ9FNu3hlBfc.NAB1EN6_pcYIy5Db9XnC {\n  display: flex;\n}\n\n.fljdvcebOv1gbKZpf0vW {\n  margin: 10px 0;\n  display: flex;\n}\n\n.fljdvcebOv1gbKZpf0vW label {\n  display: inline-block;\n  width: 120px;\n  text-align: right;\n  margin-right: 10px;\n}\n\n.bnN6JCit0RcjdQiqzw8w {\n  list-style-type: none;\n  margin: 0;\n  padding: 0;\n}\n.bnN6JCit0RcjdQiqzw8w li {\n  cursor: pointer;\n  display: inline-block;\n  padding: 5px 10px;\n  margin: 5px;\n  border-radius: 30px;\n  background-color: var(--key-bg-base);\n}\n.bnN6JCit0RcjdQiqzw8w li[data-selected="true"] {\n  background-color: var(--selection);\n  color: var(--key-color-hover);\n}\n.bnN6JCit0RcjdQiqzw8w li:hover {\n  background-color: var(--hover-selection);\n  color: var(--key-color-hover);\n}\n\n.NpLEYrC32KQ4rUx9hUFJ {\n  background-color: var(--key-bg-base);\n  border-radius: 30px;\n  color: var(--key-color-base);\n  font-size: 80%;\n  text-align: center;\n  padding: 5px;\n  position: absolute;\n  bottom: -40px;\n  left: 50%;\n  transform: translate(-50%, 0);\n  width: 110%;\n\n  pointer-events: none;\n  transition: opacity ease-in-out .5s;\n}\n\n.l2gtE1XKS63R5TM5unip { position: relative }\n.l2gtE1XKS63R5TM5unip:hover .NpLEYrC32KQ4rUx9hUFJ { opacity: 0.25 }\n',"",{version:3,sources:["webpack://./src/Keyboard/Combos/styles.module.css"],names:[],mappings:"AAAA;EACE,oBAAoB;AACtB;;AAEA;EACE,aAAa;EACb,YAAY;EACZ,sBAAsB;EACtB,aAAa;EACb,SAAS;EACT,eAAe;AACjB;;AAEA;EACE,eAAe;EACf,oCAAoC;AACtC;AACA;EACE,kCAAkC;EAClC,sBAAsB;AACxB;;AAEA;EACE,kCAAkC;AACpC;AACA;EACE,wCAAwC;AAC1C;;AAEA;EACE,gBAAgB;EAChB,cAAc;EACd,oBAAoB;AACtB;;AAEA;EACE,aAAa;EACb,8BAA8B;EAC9B,2CAA2C;EAC3C,aAAa;AACf;;AAEA;EACE,eAAe;EACf,YAAY;EACZ,YAAY;AACd;AACA;EACE,UAAU;AACZ;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,6BAA6B;EAC7B,mBAAmB;AACrB;;AAEA;EACE,SAAS;AACX;;AAEA;EACE,4BAA4B;AAC9B;;AAEA;EACE,oBAAoB;AACtB;;AAEA;EACE,wBAAwB;AAC1B;AACA;EACE,YAAY;EACZ,eAAe;AACjB;AACA;EACE,wBAAwB;EACxB,kBAAkB;EAClB,YAAY;EACZ,qBAAqB;AACvB;;AAEA;;EAEE,4BAA4B;EAC5B,YAAY;AACd;AACA;EACE,aAAa;AACf;;AAEA;EACE,cAAc;EACd,aAAa;AACf;;AAEA;EACE,qBAAqB;EACrB,YAAY;EACZ,iBAAiB;EACjB,kBAAkB;AACpB;;AAEA;EACE,qBAAqB;EACrB,SAAS;EACT,UAAU;AACZ;AACA;EACE,eAAe;EACf,qBAAqB;EACrB,iBAAiB;EACjB,WAAW;EACX,mBAAmB;EACnB,oCAAoC;AACtC;AACA;EACE,kCAAkC;EAClC,6BAA6B;AAC/B;AACA;EACE,wCAAwC;EACxC,6BAA6B;AAC/B;;AAEA;EACE,oCAAoC;EACpC,mBAAmB;EACnB,4BAA4B;EAC5B,cAAc;EACd,kBAAkB;EAClB,YAAY;EACZ,kBAAkB;EAClB,aAAa;EACb,SAAS;EACT,6BAA6B;EAC7B,WAAW;;EAEX,oBAAoB;EACpB,mCAAmC;AACrC;;AAEA,wBAAiB,mBAAmB;AACpC,oDAAwC,cAAc",sourcesContent:['.main {\n  padding-bottom: 60px;\n}\n\n.sidebar {\n  display: flex;\n  width: 190px;\n  flex-direction: column;\n  padding: 10px;\n  gap: 10px;\n  position: fixed;\n}\n\n.selectable {\n  cursor: pointer;\n  background-color: var(--key-bg-base);\n}\n.selectable:hover {\n  border: 4px solid var(--selection);\n  box-sizing: border-box;\n}\n\n.highlight {\n  background-color: var(--selection);\n}\n.highlight:hover {\n  background-color: var(--hover-selection);\n}\n\n.comboPanel {\n  max-width: 450px;\n  margin: 0 auto;\n  padding-bottom: 60px;\n}\n\n.heading {\n  display: flex;\n  justify-content: space-between;\n  border-bottom: 2px solid var(--key-bg-base);\n  margin: 5px 0;\n}\n\n.action {\n  cursor: pointer;\n  padding: 5px;\n  opacity: 0.6;\n}\n.action:hover {\n  opacity: 1;\n}\n\n.combo {\n  margin: 10px 0 40px;\n}\n\n.combo .detail {\n  display: flex;\n  justify-content: space-evenly;\n  align-items: center;\n}\n\n.combo h5 {\n  margin: 0;\n}\n\n.edit {\n  color: var(--key-color-base);\n}\n\n.remove {\n  color: var(--delete);\n}\n\n.addComboInput {\n  display: none !important;\n}\n.addComboInput:hover {\n  color: white;\n  cursor: pointer;\n}\n.comboInputList:hover .addComboInput {\n  display: flex !important;\n  position: absolute;\n  right: -48px;\n  transform: scale(0.5);\n}\n\n.active.addComboInput,\n.active.comboInput > * {\n  background-color: sandybrown;\n  color: white;\n}\n.active.addComboInput {\n  display: flex;\n}\n\n.field {\n  margin: 10px 0;\n  display: flex;\n}\n\n.field label {\n  display: inline-block;\n  width: 120px;\n  text-align: right;\n  margin-right: 10px;\n}\n\n.layerList {\n  list-style-type: none;\n  margin: 0;\n  padding: 0;\n}\n.layerList li {\n  cursor: pointer;\n  display: inline-block;\n  padding: 5px 10px;\n  margin: 5px;\n  border-radius: 30px;\n  background-color: var(--key-bg-base);\n}\n.layerList li[data-selected="true"] {\n  background-color: var(--selection);\n  color: var(--key-color-hover);\n}\n.layerList li:hover {\n  background-color: var(--hover-selection);\n  color: var(--key-color-hover);\n}\n\n.floatingMessage {\n  background-color: var(--key-bg-base);\n  border-radius: 30px;\n  color: var(--key-color-base);\n  font-size: 80%;\n  text-align: center;\n  padding: 5px;\n  position: absolute;\n  bottom: -40px;\n  left: 50%;\n  transform: translate(-50%, 0);\n  width: 110%;\n\n  pointer-events: none;\n  transition: opacity ease-in-out .5s;\n}\n\n.comboInputMap { position: relative }\n.comboInputMap:hover .floatingMessage { opacity: 0.25 }\n'],sourceRoot:""}]),a.locals={main:"pwXbGORsYKqyOPBm9_dW",sidebar:"QgFDXNybKD_XN66M_WpJ",selectable:"Gy0KZGCgOeVminAfggFQ",highlight:"Ld9cVdtpS_DpbEifyX9Y",comboPanel:"mqpJ7uHAMKxvORoOIPFK",heading:"BVucwy4AZCyl7GyivzMn",action:"U6g0njWjBrtb_I3XhAeV",combo:"CROhsBLtunQ2BbfWdkQw",detail:"MhA4fXXuaZ1iPvv05w4m",edit:"vujYcgQjiN4BGp37FMUH",remove:"uh2yPWyfEOZtgXo2_KtU",addComboInput:"NAB1EN6_pcYIy5Db9XnC",comboInputList:"kYn8brsFgEaf61oQyv4d",active:"NGxnhfSJaJ9FNu3hlBfc",comboInput:"GXgG_IaQTricqThqzsKe",field:"fljdvcebOv1gbKZpf0vW",layerList:"bnN6JCit0RcjdQiqzw8w",floatingMessage:"NpLEYrC32KQ4rUx9hUFJ",comboInputMap:"l2gtE1XKS63R5TM5unip"},n.Z=a},56520:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,".eEWh1kMxq0qwtAjWodL_ {\n  width: 100%;\n  height: 100%;\n  margin: 0;\n  padding: 0;\n}\n\n.eEWh1kMxq0qwtAjWodL_.Me2iewShkkUWEmhCKAJV {\n  cursor: crosshair;\n}\n\n.wou_rpm0nvB8wxB153cE {\n  position: absolute;\n  background-color: rgba(150, 255, 150, 0.1);\n  border: 3px dotted rgba(150, 255, 150, 0.7);\n  pointer-events: none;\n  box-sizing: border-box;\n}\n\n.wou_rpm0nvB8wxB153cE.fM8xQCv4KykkW5ssxgEg {\n  background-color: rgba(120, 120, 120, 0.1);\n  border-color: rgba(120, 120, 120, 0.25);\n}\n","",{version:3,sources:["webpack://./src/Keyboard/Common/dragSelector.module.css"],names:[],mappings:"AAAA;EACE,WAAW;EACX,YAAY;EACZ,SAAS;EACT,UAAU;AACZ;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,kBAAkB;EAClB,0CAA0C;EAC1C,2CAA2C;EAC3C,oBAAoB;EACpB,sBAAsB;AACxB;;AAEA;EACE,0CAA0C;EAC1C,uCAAuC;AACzC",sourcesContent:[".container {\n  width: 100%;\n  height: 100%;\n  margin: 0;\n  padding: 0;\n}\n\n.container.selecting {\n  cursor: crosshair;\n}\n\n.overlay {\n  position: absolute;\n  background-color: rgba(150, 255, 150, 0.1);\n  border: 3px dotted rgba(150, 255, 150, 0.7);\n  pointer-events: none;\n  box-sizing: border-box;\n}\n\n.overlay.negate {\n  background-color: rgba(120, 120, 120, 0.1);\n  border-color: rgba(120, 120, 120, 0.25);\n}\n"],sourceRoot:""}]),a.locals={container:"eEWh1kMxq0qwtAjWodL_",selecting:"Me2iewShkkUWEmhCKAJV",overlay:"wou_rpm0nvB8wxB153cE",negate:"fM8xQCv4KykkW5ssxgEg"},n.Z=a},49040:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,".lD5TsvdIbEAHNdmhfnlb {\n  background-color: var(--key-bg-base);\n}\n.yk89E4zK9zlO69OXhKn5:hover {\n  cursor: pointer;\n  border: 4px solid var(--selection);\n  box-sizing: border-box;\n}\n\n.pzTvsxKjpy6MqcFhxh9j {\n  background-color: var(--selection);\n}\n.pzTvsxKjpy6MqcFhxh9j:hover {\n  background-color: var(--hover-selection);\n}\n\n.r_Sdklnj57CE2ZjnBDw6 {\n  background-color: var(--hover-selection);\n  filter: brightness(135%);\n}\n\n.Ich9T1nSzHs1a84insfp {\n  background-color: var(--hover-selection);\n  filter: brightness(75%);\n}\n\n._3U1zi1J1sXT41AzpAA1j {\n  position: absolute;\n  bottom: 0;\n  right: 50%;\n  transform: translate(50%, 100%);\n}\n","",{version:3,sources:["webpack://./src/Keyboard/Common/keyPositionSelectorStyles.module.css"],names:[],mappings:"AAAA;EACE,oCAAoC;AACtC;AACA;EACE,eAAe;EACf,kCAAkC;EAClC,sBAAsB;AACxB;;AAEA;EACE,kCAAkC;AACpC;AACA;EACE,wCAAwC;AAC1C;;AAEA;EACE,wCAAwC;EACxC,wBAAwB;AAC1B;;AAEA;EACE,wCAAwC;EACxC,uBAAuB;AACzB;;AAEA;EACE,kBAAkB;EAClB,SAAS;EACT,UAAU;EACV,+BAA+B;AACjC",sourcesContent:[".key {\n  background-color: var(--key-bg-base);\n}\n.selectable:hover {\n  cursor: pointer;\n  border: 4px solid var(--selection);\n  box-sizing: border-box;\n}\n\n.highlight {\n  background-color: var(--selection);\n}\n.highlight:hover {\n  background-color: var(--hover-selection);\n}\n\n.previewAdd {\n  background-color: var(--hover-selection);\n  filter: brightness(135%);\n}\n\n.previewRemove {\n  background-color: var(--hover-selection);\n  filter: brightness(75%);\n}\n\n.tip {\n  position: absolute;\n  bottom: 0;\n  right: 50%;\n  transform: translate(50%, 100%);\n}\n"],sourceRoot:""}]),a.locals={key:"lD5TsvdIbEAHNdmhfnlb",selectable:"yk89E4zK9zlO69OXhKn5",highlight:"pzTvsxKjpy6MqcFhxh9j",previewAdd:"r_Sdklnj57CE2ZjnBDw6",previewRemove:"Ich9T1nSzHs1a84insfp",tip:"_3U1zi1J1sXT41AzpAA1j"},n.Z=a},2:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,'.CoLZlKR1WcMrFd9XhDMC {\n\tposition: relative;\n\tdisplay: flex;\n\tjustify-content: center;\n\talign-items: center;\n\n\tfont-family: Quicksand, avenir, sans-serif;\n\n\t/* TODO: remove this once I have a wrapper with size defaults */\n\twidth: 65px;\n\theight: 65px;\n\n\tfont-size: 110%;\n\tborder-radius: 5px;\n}\n\n.CoLZlKR1WcMrFd9XhDMC.CT4uGhwl8sY0LwT3p39g:not(:hover) .UNzQquWsoIanOpIN0Q9L {\n\ttext-decoration: underline wavy var(--error-highlight);\n\ttext-underline-offset: 4px;\n\tcolor: var(--error-highlight);\n\tfont-weight: bold;\n}\n\n.Y5EVt8b0BaXNd9uLxhfh {\n\tposition: absolute;\n\tleft: 2px;\n\tbottom: 2px;\n\tfont-size: 80%;\n\n\tanimation: sYr3l9y03JxO_2AP73jr ease-in-out 1s alternate-reverse;\n}\n.Y5EVt8b0BaXNd9uLxhfh.CT4uGhwl8sY0LwT3p39g:hover {\n\tcolor: rgb(255, 225, 0);\n}\n\n@keyframes sYr3l9y03JxO_2AP73jr {\n\t0% { color: var(--key-color-base) }\n\t100% { color: var(--key-color-extreme) }\n}\n\n\n.CoLZlKR1WcMrFd9XhDMC.CT4uGhwl8sY0LwT3p39g:hover .DejZXCvvhJILPbs9Q8ht,\n.CoLZlKR1WcMrFd9XhDMC.CT4uGhwl8sY0LwT3p39g:hover .GliE4Ybwli9X6TNTjD1_ {\n\tborder-bottom-left-radius: 0;\n\tborder-bottom-right-radius: 0;\n\ttext-decoration: underline dotted white 2px;\n\ttext-underline-offset: 4px;\n}\n\n\n.huQDP3GbTLThbVIP8wFp {\n\tcolor: var(--key-color-base);\n\tbackground-color: var(--key-bg-base);\n}\n\n.PpMmKpJfEi37Ldw7AeBT {\n\tborder-radius: 100%;\n\tbackground-color: var(--key-bg-base);\n\tcolor: var(--key-color-base);\n}\n\n.k2EIh8YlFvp9sBuklSxx {\n\tposition: absolute;\n\ttop: 0;\n\tleft: 50%;\n\ttransform: translateX(-50%);\n\tfont-size: 50%;\n}\n\n.CT4uGhwl8sY0LwT3p39g:hover, .PpMmKpJfEi37Ldw7AeBT.CT4uGhwl8sY0LwT3p39g:hover {\n\tbackground-color: var(--hover-selection);\n\ttransition: 200ms;\n\tz-index: 1;\n}\n.CoLZlKR1WcMrFd9XhDMC.CT4uGhwl8sY0LwT3p39g:hover .DejZXCvvhJILPbs9Q8ht, .CoLZlKR1WcMrFd9XhDMC.CT4uGhwl8sY0LwT3p39g:hover .GliE4Ybwli9X6TNTjD1_ {\n\tcolor: var(--key-color-hover);\n}\n.CoLZlKR1WcMrFd9XhDMC > .DejZXCvvhJILPbs9Q8ht {\n\tpadding: 5px;\n}\n\n[data-simple="true"] { font-size: 140%; }\n[data-long="true"] { font-size: 60%; }\n\n.ApHDJFJGYUaGTgzMeIKZ:not([data-is-root="true"])::before { content: \'(\'; opacity: 0.4; font-weight: bold; margin: 2px; }\n.ApHDJFJGYUaGTgzMeIKZ:not([data-is-root="true"])::after { content: \')\'; opacity: 0.4; font-weight: bold; margin: 2px; }\n.ApHDJFJGYUaGTgzMeIKZ:not([data-is-root="true"]) .mLz637Atn0jZXey6Rx4v:not(:last-child)::after { content: \',\'; }\n\n.DejZXCvvhJILPbs9Q8ht {\n\tcursor: default;\n\tpadding: 0px 4px;\n\tmargin-left: -2px;\n\tmargin-right: -2px;\n}\n\n.CT4uGhwl8sY0LwT3p39g .DejZXCvvhJILPbs9Q8ht {\n\tcursor: pointer;\n\tdisplay: inline-block;\n\tbox-sizing: content-box;\n\tmin-width: 0.5em;\n\ttext-align: center;\n\tborder-radius: 4px;\n}\n.CT4uGhwl8sY0LwT3p39g .DejZXCvvhJILPbs9Q8ht:hover {\n\tbackground-color: white !important;\n\tcolor: var(--hover-selection) !important;\n\tborder-radius: 4px !important;\n}\n\n.DejZXCvvhJILPbs9Q8ht * {\n\tpointer-events: none;\n}\n\n.GliE4Ybwli9X6TNTjD1_ {\n  position: absolute;\n  top: 0;\n  left: 0;\n  font-size: 10px;\n  padding: 2px;\n  opacity: 0.65;\n}\n\n.GliE4Ybwli9X6TNTjD1_:hover {\n  cursor: pointer;\n  color: var(--hover-selection) !important;\n  background-color: var(--key-bg-hover);\n  border-radius: 5px 0;\n  opacity: 1;\n}\n',"",{version:3,sources:["webpack://./src/Keyboard/Keys/styles.module.css"],names:[],mappings:"AAAA;CACC,kBAAkB;CAClB,aAAa;CACb,uBAAuB;CACvB,mBAAmB;;CAEnB,0CAA0C;;CAE1C,+DAA+D;CAC/D,WAAW;CACX,YAAY;;CAEZ,eAAe;CACf,kBAAkB;AACnB;;AAEA;CACC,sDAAsD;CACtD,0BAA0B;CAC1B,6BAA6B;CAC7B,iBAAiB;AAClB;;AAEA;CACC,kBAAkB;CAClB,SAAS;CACT,WAAW;CACX,cAAc;;CAEd,gEAAiD;AAClD;AACA;CACC,uBAAuB;AACxB;;AAEA;CACC,KAAK,6BAA6B;CAClC,OAAO,gCAAgC;AACxC;;;AAGA;;CAEC,4BAA4B;CAC5B,6BAA6B;CAC7B,2CAA2C;CAC3C,0BAA0B;AAC3B;;;AAGA;CACC,4BAA4B;CAC5B,oCAAoC;AACrC;;AAEA;CACC,mBAAmB;CACnB,oCAAoC;CACpC,4BAA4B;AAC7B;;AAEA;CACC,kBAAkB;CAClB,MAAM;CACN,SAAS;CACT,2BAA2B;CAC3B,cAAc;AACf;;AAEA;CACC,wCAAwC;CACxC,iBAAiB;CACjB,UAAU;AACX;AACA;CACC,6BAA6B;AAC9B;AACA;CACC,YAAY;AACb;;AAEA,uBAAuB,eAAe,EAAE;AACxC,qBAAqB,cAAc,EAAE;;AAErC,2DAA6C,YAAY,EAAE,YAAY,EAAE,iBAAiB,EAAE,WAAW,EAAE;AACzG,0DAA4C,YAAY,EAAE,YAAY,EAAE,iBAAiB,EAAE,WAAW,EAAE;AACxG,iGAAoE,YAAY,EAAE;;AAElF;CACC,eAAe;CACf,gBAAgB;CAChB,iBAAiB;CACjB,kBAAkB;AACnB;;AAEA;CACC,eAAe;CACf,qBAAqB;CACrB,uBAAuB;CACvB,gBAAgB;CAChB,kBAAkB;CAClB,kBAAkB;AACnB;AACA;CACC,kCAAkC;CAClC,wCAAwC;CACxC,6BAA6B;AAC9B;;AAEA;CACC,oBAAoB;AACrB;;AAEA;EACE,kBAAkB;EAClB,MAAM;EACN,OAAO;EACP,eAAe;EACf,YAAY;EACZ,aAAa;AACf;;AAEA;EACE,eAAe;EACf,wCAAwC;EACxC,qCAAqC;EACrC,oBAAoB;EACpB,UAAU;AACZ",sourcesContent:['.key {\n\tposition: relative;\n\tdisplay: flex;\n\tjustify-content: center;\n\talign-items: center;\n\n\tfont-family: Quicksand, avenir, sans-serif;\n\n\t/* TODO: remove this once I have a wrapper with size defaults */\n\twidth: 65px;\n\theight: 65px;\n\n\tfont-size: 110%;\n\tborder-radius: 5px;\n}\n\n.key.selectable:not(:hover) .missingValue {\n\ttext-decoration: underline wavy var(--error-highlight);\n\ttext-underline-offset: 4px;\n\tcolor: var(--error-highlight);\n\tfont-weight: bold;\n}\n\n.missing {\n\tposition: absolute;\n\tleft: 2px;\n\tbottom: 2px;\n\tfont-size: 80%;\n\n\tanimation: pulse ease-in-out 1s alternate-reverse;\n}\n.missing.selectable:hover {\n\tcolor: rgb(255, 225, 0);\n}\n\n@keyframes pulse {\n\t0% { color: var(--key-color-base) }\n\t100% { color: var(--key-color-extreme) }\n}\n\n\n.key.selectable:hover .code,\n.key.selectable:hover .behaviour-binding {\n\tborder-bottom-left-radius: 0;\n\tborder-bottom-right-radius: 0;\n\ttext-decoration: underline dotted white 2px;\n\ttext-underline-offset: 4px;\n}\n\n\n.keyDefaultTheme {\n\tcolor: var(--key-color-base);\n\tbackground-color: var(--key-bg-base);\n}\n\n.encoder {\n\tborder-radius: 100%;\n\tbackground-color: var(--key-bg-base);\n\tcolor: var(--key-color-base);\n}\n\n.encoderDirection {\n\tposition: absolute;\n\ttop: 0;\n\tleft: 50%;\n\ttransform: translateX(-50%);\n\tfont-size: 50%;\n}\n\n.selectable:hover, .encoder.selectable:hover {\n\tbackground-color: var(--hover-selection);\n\ttransition: 200ms;\n\tz-index: 1;\n}\n.key.selectable:hover .code, .key.selectable:hover .behaviour-binding {\n\tcolor: var(--key-color-hover);\n}\n.key > .code {\n\tpadding: 5px;\n}\n\n[data-simple="true"] { font-size: 140%; }\n[data-long="true"] { font-size: 60%; }\n\n.params:not([data-is-root="true"])::before { content: \'(\'; opacity: 0.4; font-weight: bold; margin: 2px; }\n.params:not([data-is-root="true"])::after { content: \')\'; opacity: 0.4; font-weight: bold; margin: 2px; }\n.params:not([data-is-root="true"]) .param:not(:last-child)::after { content: \',\'; }\n\n.code {\n\tcursor: default;\n\tpadding: 0px 4px;\n\tmargin-left: -2px;\n\tmargin-right: -2px;\n}\n\n.selectable .code {\n\tcursor: pointer;\n\tdisplay: inline-block;\n\tbox-sizing: content-box;\n\tmin-width: 0.5em;\n\ttext-align: center;\n\tborder-radius: 4px;\n}\n.selectable .code:hover {\n\tbackground-color: white !important;\n\tcolor: var(--hover-selection) !important;\n\tborder-radius: 4px !important;\n}\n\n.code * {\n\tpointer-events: none;\n}\n\n.behaviour-binding {\n  position: absolute;\n  top: 0;\n  left: 0;\n  font-size: 10px;\n  padding: 2px;\n  opacity: 0.65;\n}\n\n.behaviour-binding:hover {\n  cursor: pointer;\n  color: var(--hover-selection) !important;\n  background-color: var(--key-bg-hover);\n  border-radius: 5px 0;\n  opacity: 1;\n}\n'],sourceRoot:""}]),a.locals={key:"CoLZlKR1WcMrFd9XhDMC",selectable:"CT4uGhwl8sY0LwT3p39g",missingValue:"UNzQquWsoIanOpIN0Q9L",missing:"Y5EVt8b0BaXNd9uLxhfh",pulse:"sYr3l9y03JxO_2AP73jr",code:"DejZXCvvhJILPbs9Q8ht","behaviour-binding":"GliE4Ybwli9X6TNTjD1_",keyDefaultTheme:"huQDP3GbTLThbVIP8wFp",encoder:"PpMmKpJfEi37Ldw7AeBT",encoderDirection:"k2EIh8YlFvp9sBuklSxx",params:"ApHDJFJGYUaGTgzMeIKZ",param:"mLz637Atn0jZXey6Rx4v"},n.Z=a},50335:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,'.m8ytsfY_MWY9AIiiT3KI {\n  position: absolute;\n  pointer-events: none;\n  z-index: 2;\n}\n.m8ytsfY_MWY9AIiiT3KI > * {\n  pointer-events: all;\n}\n\n.m8ytsfY_MWY9AIiiT3KI ul {\n  display: flex;\n  flex-direction: column;\n  list-style-type: none;\n  gap: 4px;\n  margin: 0;\n  padding: 0;\n}\n.m8ytsfY_MWY9AIiiT3KI li {\n  cursor: pointer;\n  position: relative;\n  background-color: rgba(201, 201, 201, 0.5);\n  color: darkgray;\n  border-radius: 15px;\n  height: 30px;\n  padding: 0px;\n  margin: 0 2px;\n  width: max-content;\n}\n.m8ytsfY_MWY9AIiiT3KI li:hover {\n  background-color: rgba(60, 179, 113, 0.85);\n  color: white;\n  padding-right: 35px;\n}\n.m8ytsfY_MWY9AIiiT3KI li.rzXVahzmmEOXmjXi8olg {\n  background-color: rgb(60, 179, 113);\n  color: white;\n}\n\n.m8ytsfY_MWY9AIiiT3KI li * {\n  display: inline-block;\n}\n.m8ytsfY_MWY9AIiiT3KI li .L_GJEqnFbay_ZzM0Yh7B {\n  overflow: auto;\n  width: 30px;\n  height: 30px;\n  line-height: 30px;\n  text-align: center;\n}\n.m8ytsfY_MWY9AIiiT3KI li .fkZZwegREyu_Wk9Pw6s7 {\n  overflow: hidden;\n  width: 0;\n  height: 30px;\n  line-height: 30px;\n  padding: 0;\n  font-variant: small-caps;\n}\n\n.m8ytsfY_MWY9AIiiT3KI ul li:hover .fkZZwegREyu_Wk9Pw6s7,\n.m8ytsfY_MWY9AIiiT3KI[data-renaming="true"] li.rzXVahzmmEOXmjXi8olg .fkZZwegREyu_Wk9Pw6s7 {\n  transition: .15s ease-in;\n  width: auto;\n  padding: 0 0 0 10px;\n}\n\n.m8ytsfY_MWY9AIiiT3KI button {\n  width: 30px;\n  height: 30px;\n  line-height: 30px;\n  padding: 0;\n  text-align: center;\n  border-radius: 15px;\n}\n\n.m8ytsfY_MWY9AIiiT3KI input.fkZZwegREyu_Wk9Pw6s7 {\n  vertical-align: top;\n  width: 100px;\n  border: none;\n  outline: none;\n  background: transparent;\n  color: white;\n}\n\n.m8ytsfY_MWY9AIiiT3KI .NbFgZxnyAF9EIjx8ncPM {\n  cursor: pointer;\n  position: absolute;\n  right: 10px;\n  visibility: hidden;\n\n  height: 30px;\n  line-height: 30px;\n}\n.m8ytsfY_MWY9AIiiT3KI li:hover .NbFgZxnyAF9EIjx8ncPM {\n  visibility: visible;\n}\n\n.m8ytsfY_MWY9AIiiT3KI li.rzXVahzmmEOXmjXi8olg .fkZZwegREyu_Wk9Pw6s7 {\n  cursor: text;\n}\n',"",{version:3,sources:["webpack://./src/Keyboard/Layers/layer-selector.module.css"],names:[],mappings:"AAAA;EACE,kBAAkB;EAClB,oBAAoB;EACpB,UAAU;AACZ;AACA;EACE,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,qBAAqB;EACrB,QAAQ;EACR,SAAS;EACT,UAAU;AACZ;AACA;EACE,eAAe;EACf,kBAAkB;EAClB,0CAA0C;EAC1C,eAAe;EACf,mBAAmB;EACnB,YAAY;EACZ,YAAY;EACZ,aAAa;EACb,kBAAkB;AACpB;AACA;EACE,0CAA0C;EAC1C,YAAY;EACZ,mBAAmB;AACrB;AACA;EACE,mCAAmC;EACnC,YAAY;AACd;;AAEA;EACE,qBAAqB;AACvB;AACA;EACE,cAAc;EACd,WAAW;EACX,YAAY;EACZ,iBAAiB;EACjB,kBAAkB;AACpB;AACA;EACE,gBAAgB;EAChB,QAAQ;EACR,YAAY;EACZ,iBAAiB;EACjB,UAAU;EACV,wBAAwB;AAC1B;;AAEA;;EAEE,wBAAwB;EACxB,WAAW;EACX,mBAAmB;AACrB;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,iBAAiB;EACjB,UAAU;EACV,kBAAkB;EAClB,mBAAmB;AACrB;;AAEA;EACE,mBAAmB;EACnB,YAAY;EACZ,YAAY;EACZ,aAAa;EACb,uBAAuB;EACvB,YAAY;AACd;;AAEA;EACE,eAAe;EACf,kBAAkB;EAClB,WAAW;EACX,kBAAkB;;EAElB,YAAY;EACZ,iBAAiB;AACnB;AACA;EACE,mBAAmB;AACrB;;AAEA;EACE,YAAY;AACd",sourcesContent:['.layerSelector {\n  position: absolute;\n  pointer-events: none;\n  z-index: 2;\n}\n.layerSelector > * {\n  pointer-events: all;\n}\n\n.layerSelector ul {\n  display: flex;\n  flex-direction: column;\n  list-style-type: none;\n  gap: 4px;\n  margin: 0;\n  padding: 0;\n}\n.layerSelector li {\n  cursor: pointer;\n  position: relative;\n  background-color: rgba(201, 201, 201, 0.5);\n  color: darkgray;\n  border-radius: 15px;\n  height: 30px;\n  padding: 0px;\n  margin: 0 2px;\n  width: max-content;\n}\n.layerSelector li:hover {\n  background-color: rgba(60, 179, 113, 0.85);\n  color: white;\n  padding-right: 35px;\n}\n.layerSelector li.active {\n  background-color: rgb(60, 179, 113);\n  color: white;\n}\n\n.layerSelector li * {\n  display: inline-block;\n}\n.layerSelector li .index {\n  overflow: auto;\n  width: 30px;\n  height: 30px;\n  line-height: 30px;\n  text-align: center;\n}\n.layerSelector li .name {\n  overflow: hidden;\n  width: 0;\n  height: 30px;\n  line-height: 30px;\n  padding: 0;\n  font-variant: small-caps;\n}\n\n.layerSelector ul li:hover .name,\n.layerSelector[data-renaming="true"] li.active .name {\n  transition: .15s ease-in;\n  width: auto;\n  padding: 0 0 0 10px;\n}\n\n.layerSelector button {\n  width: 30px;\n  height: 30px;\n  line-height: 30px;\n  padding: 0;\n  text-align: center;\n  border-radius: 15px;\n}\n\n.layerSelector input.name {\n  vertical-align: top;\n  width: 100px;\n  border: none;\n  outline: none;\n  background: transparent;\n  color: white;\n}\n\n.layerSelector .delete {\n  cursor: pointer;\n  position: absolute;\n  right: 10px;\n  visibility: hidden;\n\n  height: 30px;\n  line-height: 30px;\n}\n.layerSelector li:hover .delete {\n  visibility: visible;\n}\n\n.layerSelector li.active .name {\n  cursor: text;\n}\n'],sourceRoot:""}]),a.locals={layerSelector:"m8ytsfY_MWY9AIiiT3KI",active:"rzXVahzmmEOXmjXi8olg",index:"L_GJEqnFbay_ZzM0Yh7B",name:"fkZZwegREyu_Wk9Pw6s7",delete:"NbFgZxnyAF9EIjx8ncPM"},n.Z=a},59500:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,'.EwvVNY6vlf7HwYmXTbzi {\n  margin: 10px 0;\n  display: flex;\n}\n\n.EwvVNY6vlf7HwYmXTbzi label {\n  display: inline-block;\n  width: 120px;\n  text-align: right;\n  margin-right: 10px;\n}\n\n.uhiC_7TzN7eCNbm5C6a8[data-sensor-count="0"] {\n  display: none;\n}\n\n.raNkhxmGTqtKQI9X2gVA:not(.y7y6ypMwmSafQKgt7oBw) {\n  cursor: pointer;\n}\n.raNkhxmGTqtKQI9X2gVA > * {\n  pointer-events: none;\n}\n.raNkhxmGTqtKQI9X2gVA:hover, .y7y6ypMwmSafQKgt7oBw {\n  color: var(--key-color-hover);\n  background-color: var(--selection);\n}\n.raNkhxmGTqtKQI9X2gVA:hover {\n  background-color: var(--hover-selection);\n}\n\n.sahMSNIG_94Hn9tEEZ8q {\n  max-width: 80vw;\n  overflow-x: scroll;\n}',"",{version:3,sources:["webpack://./src/Keyboard/Layers/style.module.css"],names:[],mappings:"AAAA;EACE,cAAc;EACd,aAAa;AACf;;AAEA;EACE,qBAAqB;EACrB,YAAY;EACZ,iBAAiB;EACjB,kBAAkB;AACpB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,eAAe;AACjB;AACA;EACE,oBAAoB;AACtB;AACA;EACE,6BAA6B;EAC7B,kCAAkC;AACpC;AACA;EACE,wCAAwC;AAC1C;;AAEA;EACE,eAAe;EACf,kBAAkB;AACpB",sourcesContent:['.field {\n  margin: 10px 0;\n  display: flex;\n}\n\n.field label {\n  display: inline-block;\n  width: 120px;\n  text-align: right;\n  margin-right: 10px;\n}\n\n.sensors[data-sensor-count="0"] {\n  display: none;\n}\n\n.quickBindKey:not(.quickBindKeyHighlight) {\n  cursor: pointer;\n}\n.quickBindKey > * {\n  pointer-events: none;\n}\n.quickBindKey:hover, .quickBindKeyHighlight {\n  color: var(--key-color-hover);\n  background-color: var(--selection);\n}\n.quickBindKey:hover {\n  background-color: var(--hover-selection);\n}\n\n.quickAssignDialog {\n  max-width: 80vw;\n  overflow-x: scroll;\n}'],sourceRoot:""}]),a.locals={field:"EwvVNY6vlf7HwYmXTbzi",sensors:"uhiC_7TzN7eCNbm5C6a8",quickBindKey:"raNkhxmGTqtKQI9X2gVA",quickBindKeyHighlight:"y7y6ypMwmSafQKgt7oBw",quickAssignDialog:"sahMSNIG_94Hn9tEEZ8q"},n.Z=a},35839:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,'\n.O8SEfqE2Ewc3b7c7mY_N {\n  position:absolute;\n  top: -5px;\n  left: 0px;\n  width: 100%;\n  /* border: 1px solid red; */\n  /* padding: 5px; */\n  /* opacity: 0.5; */\n  display: flex;\n  flex-wrap: wrap;\n}\n\n.s9O56LWZBKHctVZ4a6fa {\n  position: relative;\n  width: 37.5px;\n  height: 65px;\n  margin: 0;\n}\n\n.s9O56LWZBKHctVZ4a6fa[data-is-control="true"] {\n  width: 450px;\n  height: 15px;\n}\n\n.NNwZmurJWlIfvb3BWlNX {\n  position: relative;\n  width: 450px;\n  height: 10px;\n}\n.NNwZmurJWlIfvb3BWlNX.wVYVfDVsCKFNjQcGKIVI::after {\n  content: \'\';\n  display: block;\n  position: absolute;\n  top: 50%;\n  transform: translate(0, -50%);\n  width: 450px;\n  height: 4px;\n  background-color: var(--selection);\n}\n.MDfy6RcGBlm8W_ChRhyP[data-extend="1"] { width: calc(37.5px + 1 * 75px); }\n.MDfy6RcGBlm8W_ChRhyP[data-extend="2"] { width: calc(37.5px + 2 * 75px); }\n.MDfy6RcGBlm8W_ChRhyP[data-extend="3"] { width: calc(37.5px + 3 * 75px); }\n.MDfy6RcGBlm8W_ChRhyP[data-extend="4"] { width: calc(37.5px + 4 * 75px); }\n.MDfy6RcGBlm8W_ChRhyP[data-extend="5"] { width: calc(37.5px + 5 * 75px); }\n\n/* .dropTargetHalf {\n  background-color: blue;\n  opacity: 0.25;\n}\n.dropTargetHalf.secondHalf {\n  background-color: red;\n}\n.dropTargetRow {\n  background-color: purple;\n  opacity: 0.25;\n} */\n\n.wVYVfDVsCKFNjQcGKIVI.s9O56LWZBKHctVZ4a6fa:not(.MDfy6RcGBlm8W_ChRhyP):not([data-is-control="true"])::before,\n.wVYVfDVsCKFNjQcGKIVI.MDfy6RcGBlm8W_ChRhyP:not([data-is-control="true"])::after {\n  content: \'\';\n  display: block;\n  height: 65px;\n  width: 4px;\n  border-radius: 4px;\n  background-color: var(--selection);\n}\n\n.AuFB9WiCynP_oONYhOvq .wVYVfDVsCKFNjQcGKIVI:not([data-drop-mode="row"])::before,\n.AuFB9WiCynP_oONYhOvq .wVYVfDVsCKFNjQcGKIVI:not([data-drop-mode="row"])::after {\n   visibility: hidden;\n }\n\n.s9O56LWZBKHctVZ4a6fa:not(.MDfy6RcGBlm8W_ChRhyP):not([data-is-control="true"])::before {\n  transform: translate(-50%, 0);\n}\n.MDfy6RcGBlm8W_ChRhyP:not([data-is-control="true"])::after {\n  position: absolute;\n  left: 32.5px;\n  transform: translate(50%, 0);\n}\n',"",{version:3,sources:["webpack://./src/Keyboard/Macros/drag-and-drop.module.css"],names:[],mappings:";AACA;EACE,iBAAiB;EACjB,SAAS;EACT,SAAS;EACT,WAAW;EACX,2BAA2B;EAC3B,kBAAkB;EAClB,kBAAkB;EAClB,aAAa;EACb,eAAe;AACjB;;AAEA;EACE,kBAAkB;EAClB,aAAa;EACb,YAAY;EACZ,SAAS;AACX;;AAEA;EACE,YAAY;EACZ,YAAY;AACd;;AAEA;EACE,kBAAkB;EAClB,YAAY;EACZ,YAAY;AACd;AACA;EACE,WAAW;EACX,cAAc;EACd,kBAAkB;EAClB,QAAQ;EACR,6BAA6B;EAC7B,YAAY;EACZ,WAAW;EACX,kCAAkC;AACpC;AACA,yCAA+B,8BAA8B,EAAE;AAC/D,yCAA+B,8BAA8B,EAAE;AAC/D,yCAA+B,8BAA8B,EAAE;AAC/D,yCAA+B,8BAA8B,EAAE;AAC/D,yCAA+B,8BAA8B,EAAE;;AAE/D;;;;;;;;;;GAUG;;AAEH;;EAEE,WAAW;EACX,cAAc;EACd,YAAY;EACZ,UAAU;EACV,kBAAkB;EAClB,kCAAkC;AACpC;;AAEA;;GAEG,kBAAkB;CACpB;;AAED;EACE,6BAA6B;AAC/B;AACA;EACE,kBAAkB;EAClB,YAAY;EACZ,4BAA4B;AAC9B",sourcesContent:['\n.dropTargets {\n  position:absolute;\n  top: -5px;\n  left: 0px;\n  width: 100%;\n  /* border: 1px solid red; */\n  /* padding: 5px; */\n  /* opacity: 0.5; */\n  display: flex;\n  flex-wrap: wrap;\n}\n\n.dropTargetHalf {\n  position: relative;\n  width: 37.5px;\n  height: 65px;\n  margin: 0;\n}\n\n.dropTargetHalf[data-is-control="true"] {\n  width: 450px;\n  height: 15px;\n}\n\n.dropTargetRow {\n  position: relative;\n  width: 450px;\n  height: 10px;\n}\n.dropTargetRow.droppable::after {\n  content: \'\';\n  display: block;\n  position: absolute;\n  top: 50%;\n  transform: translate(0, -50%);\n  width: 450px;\n  height: 4px;\n  background-color: var(--selection);\n}\n.secondHalf[data-extend="1"] { width: calc(37.5px + 1 * 75px); }\n.secondHalf[data-extend="2"] { width: calc(37.5px + 2 * 75px); }\n.secondHalf[data-extend="3"] { width: calc(37.5px + 3 * 75px); }\n.secondHalf[data-extend="4"] { width: calc(37.5px + 4 * 75px); }\n.secondHalf[data-extend="5"] { width: calc(37.5px + 5 * 75px); }\n\n/* .dropTargetHalf {\n  background-color: blue;\n  opacity: 0.25;\n}\n.dropTargetHalf.secondHalf {\n  background-color: red;\n}\n.dropTargetRow {\n  background-color: purple;\n  opacity: 0.25;\n} */\n\n.droppable.dropTargetHalf:not(.secondHalf):not([data-is-control="true"])::before,\n.droppable.secondHalf:not([data-is-control="true"])::after {\n  content: \'\';\n  display: block;\n  height: 65px;\n  width: 4px;\n  border-radius: 4px;\n  background-color: var(--selection);\n}\n\n.dropRowOnly .droppable:not([data-drop-mode="row"])::before,\n.dropRowOnly .droppable:not([data-drop-mode="row"])::after {\n   visibility: hidden;\n }\n\n.dropTargetHalf:not(.secondHalf):not([data-is-control="true"])::before {\n  transform: translate(-50%, 0);\n}\n.secondHalf:not([data-is-control="true"])::after {\n  position: absolute;\n  left: 32.5px;\n  transform: translate(50%, 0);\n}\n'],sourceRoot:""}]),a.locals={dropTargets:"O8SEfqE2Ewc3b7c7mY_N",dropTargetHalf:"s9O56LWZBKHctVZ4a6fa",dropTargetRow:"NNwZmurJWlIfvb3BWlNX",droppable:"wVYVfDVsCKFNjQcGKIVI",secondHalf:"MDfy6RcGBlm8W_ChRhyP",dropRowOnly:"AuFB9WiCynP_oONYhOvq"},n.Z=a},96201:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,".kc8Au327pmIjKO7auLXT {\n  padding-bottom: 60px;\n}\n\n.B8FpRtVdxbvJjwZoVNB4 {\n  display: flex;\n  position: fixed;\n  width: 180px;\n  flex-direction: column;\n  padding: 10px;\n  gap: 10px;\n}\n\n.Us3Ihf0AoVbZvDulP74Q {\n  width: 550px;\n  margin: 10px auto 40px;\n}\n.OVI4IkVsVzyk0eIAn9NX {\n  display: flex;\n  position: relative;\n  justify-content: space-between;\n  border-bottom: 2px solid var(--key-bg-base);\n  margin: 5px 0;\n}\n.OVI4IkVsVzyk0eIAn9NX h5 {\n  margin: 0;\n}\n.QNlSO_GSGhRfUFRE_v8E {\n  cursor: pointer;\n  padding: 5px;\n  opacity: 0.6;\n}\n.QNlSO_GSGhRfUFRE_v8E:hover {\n  opacity: 1;\n}\n.DvzBwGDH7HsnnIbqaeHi {\n  color: var(--delete);\n}\n\n.mwhR_W7iqHq803xNBV1H {\n  text-align: center;\n}\n.mwhR_W7iqHq803xNBV1H > * {\n  margin: 5px;\n}\n\n.TBgT7nB7JSSjnTpMQeXp {\n  position: relative;\n  width: 450px;\n  /* border: 1px solid lightgray; */\n  margin: 0 auto;\n  padding: 5px;\n\n  display: flex;\n  flex-wrap: wrap;\n}\n\n.TBgT7nB7JSSjnTpMQeXp > * {\n  margin: 5px;\n  width: 65px;\n  height: 65px;\n}\n\n.YMJbsLvnEGObUy4Y_i6w {\n  width: 100%;\n  height: 30px;\n  box-sizing: border-box;\n}\n.YMJbsLvnEGObUy4Y_i6w:hover {\n  background-color: var(--hover-selection);\n  color: var(--key-color-hover);\n}\n.YMJbsLvnEGObUy4Y_i6w > :first-child {\n  width: 100% !important;\n  height: 100% !important;\n}\n\n.TBgT7nB7JSSjnTpMQeXp [draggable] {\n  cursor: grab;\n}\n\n.I5drc4dA5Kpshp3PPle1 {\n  visibility: hidden;\n  position: absolute;\n  top: 0px;\n  right: 0px;\n  font-size: 80%;\n\n  color: var(--key-color-hover);\n}\n.I5drc4dA5Kpshp3PPle1 > * {\n  margin: 2px;\n  opacity: 0.5;\n  cursor: pointer;\n}\n.TBgT7nB7JSSjnTpMQeXp :hover .I5drc4dA5Kpshp3PPle1 {\n  visibility: visible;\n  z-index: 10;\n}\n\n.I5drc4dA5Kpshp3PPle1 :hover {\n  opacity: 1;\n}\n\n\n.iD9DsKMZZ1dQxr04488w {\n  margin: 10px 0;\n  display: flex;\n}\n\n.iD9DsKMZZ1dQxr04488w label {\n  display: inline-block;\n  width: 120px;\n  text-align: right;\n  margin-right: 10px;\n}\n\n.quGO7XFPrHoYiqu22mwg {\n  font-size: 80%;\n}","",{version:3,sources:["webpack://./src/Keyboard/Macros/styles.module.css"],names:[],mappings:"AAAA;EACE,oBAAoB;AACtB;;AAEA;EACE,aAAa;EACb,eAAe;EACf,YAAY;EACZ,sBAAsB;EACtB,aAAa;EACb,SAAS;AACX;;AAEA;EACE,YAAY;EACZ,sBAAsB;AACxB;AACA;EACE,aAAa;EACb,kBAAkB;EAClB,8BAA8B;EAC9B,2CAA2C;EAC3C,aAAa;AACf;AACA;EACE,SAAS;AACX;AACA;EACE,eAAe;EACf,YAAY;EACZ,YAAY;AACd;AACA;EACE,UAAU;AACZ;AACA;EACE,oBAAoB;AACtB;;AAEA;EACE,kBAAkB;AACpB;AACA;EACE,WAAW;AACb;;AAEA;EACE,kBAAkB;EAClB,YAAY;EACZ,iCAAiC;EACjC,cAAc;EACd,YAAY;;EAEZ,aAAa;EACb,eAAe;AACjB;;AAEA;EACE,WAAW;EACX,WAAW;EACX,YAAY;AACd;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,sBAAsB;AACxB;AACA;EACE,wCAAwC;EACxC,6BAA6B;AAC/B;AACA;EACE,sBAAsB;EACtB,uBAAuB;AACzB;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,kBAAkB;EAClB,kBAAkB;EAClB,QAAQ;EACR,UAAU;EACV,cAAc;;EAEd,6BAA6B;AAC/B;AACA;EACE,WAAW;EACX,YAAY;EACZ,eAAe;AACjB;AACA;EACE,mBAAmB;EACnB,WAAW;AACb;;AAEA;EACE,UAAU;AACZ;;;AAGA;EACE,cAAc;EACd,aAAa;AACf;;AAEA;EACE,qBAAqB;EACrB,YAAY;EACZ,iBAAiB;EACjB,kBAAkB;AACpB;;AAEA;EACE,cAAc;AAChB",sourcesContent:[".main {\n  padding-bottom: 60px;\n}\n\n.sidebar {\n  display: flex;\n  position: fixed;\n  width: 180px;\n  flex-direction: column;\n  padding: 10px;\n  gap: 10px;\n}\n\n.macro {\n  width: 550px;\n  margin: 10px auto 40px;\n}\n.heading {\n  display: flex;\n  position: relative;\n  justify-content: space-between;\n  border-bottom: 2px solid var(--key-bg-base);\n  margin: 5px 0;\n}\n.heading h5 {\n  margin: 0;\n}\n.action {\n  cursor: pointer;\n  padding: 5px;\n  opacity: 0.6;\n}\n.action:hover {\n  opacity: 1;\n}\n.remove {\n  color: var(--delete);\n}\n\n.macroActions {\n  text-align: center;\n}\n.macroActions > * {\n  margin: 5px;\n}\n\n.macroBindings {\n  position: relative;\n  width: 450px;\n  /* border: 1px solid lightgray; */\n  margin: 0 auto;\n  padding: 5px;\n\n  display: flex;\n  flex-wrap: wrap;\n}\n\n.macroBindings > * {\n  margin: 5px;\n  width: 65px;\n  height: 65px;\n}\n\n.controlBinding {\n  width: 100%;\n  height: 30px;\n  box-sizing: border-box;\n}\n.controlBinding:hover {\n  background-color: var(--hover-selection);\n  color: var(--key-color-hover);\n}\n.controlBinding > :first-child {\n  width: 100% !important;\n  height: 100% !important;\n}\n\n.macroBindings [draggable] {\n  cursor: grab;\n}\n\n.actions {\n  visibility: hidden;\n  position: absolute;\n  top: 0px;\n  right: 0px;\n  font-size: 80%;\n\n  color: var(--key-color-hover);\n}\n.actions > * {\n  margin: 2px;\n  opacity: 0.5;\n  cursor: pointer;\n}\n.macroBindings :hover .actions {\n  visibility: visible;\n  z-index: 10;\n}\n\n.actions :hover {\n  opacity: 1;\n}\n\n\n.field {\n  margin: 10px 0;\n  display: flex;\n}\n\n.field label {\n  display: inline-block;\n  width: 120px;\n  text-align: right;\n  margin-right: 10px;\n}\n\n.betaDisclaimer {\n  font-size: 80%;\n}"],sourceRoot:""}]),a.locals={main:"kc8Au327pmIjKO7auLXT",sidebar:"B8FpRtVdxbvJjwZoVNB4",macro:"Us3Ihf0AoVbZvDulP74Q",heading:"OVI4IkVsVzyk0eIAn9NX",action:"QNlSO_GSGhRfUFRE_v8E",remove:"DvzBwGDH7HsnnIbqaeHi",macroActions:"mwhR_W7iqHq803xNBV1H",macroBindings:"TBgT7nB7JSSjnTpMQeXp",controlBinding:"YMJbsLvnEGObUy4Y_i6w",actions:"I5drc4dA5Kpshp3PPle1",field:"iD9DsKMZZ1dQxr04488w",betaDisclaimer:"quGO7XFPrHoYiqu22mwg"},n.Z=a},79577:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,"._Et43RIDBS31WGTsJW6Q {\n  margin: 20px 0 35px;\n}\n._Et43RIDBS31WGTsJW6Q h3 {\n  cursor: pointer;\n}\n._Et43RIDBS31WGTsJW6Q h3:hover {\n  color: royalblue;\n}\n\n.UD9L8GtxRyZNCl6a5dsA {\n  color: var(--key-color-base);\n  opacity: 0.7;\n}\n\n.sah4Bu1xq72L7DDemOzU {\n  padding-left: 16px;\n}\n\n.pSk7y6zU9J8U_IybbhZB .rhqw3NH8NqvbeV0idmJz {\n  transform: rotate(-90deg);\n  transition: 100ms;\n}\n\n.pSk7y6zU9J8U_IybbhZB .sah4Bu1xq72L7DDemOzU {\n  display: none;\n}\n","",{version:3,sources:["webpack://./src/Keyboard/Warnings/styles.module.css"],names:[],mappings:"AAAA;EACE,mBAAmB;AACrB;AACA;EACE,eAAe;AACjB;AACA;EACE,gBAAgB;AAClB;;AAEA;EACE,4BAA4B;EAC5B,YAAY;AACd;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,yBAAyB;EACzB,iBAAiB;AACnB;;AAEA;EACE,aAAa;AACf",sourcesContent:[".warningCategory {\n  margin: 20px 0 35px;\n}\n.warningCategory h3 {\n  cursor: pointer;\n}\n.warningCategory h3:hover {\n  color: royalblue;\n}\n\n.emptyCategory {\n  color: var(--key-color-base);\n  opacity: 0.7;\n}\n\n.warningDetails {\n  padding-left: 16px;\n}\n\n.collapsedCategory .caret {\n  transform: rotate(-90deg);\n  transition: 100ms;\n}\n\n.collapsedCategory .warningDetails {\n  display: none;\n}\n"],sourceRoot:""}]),a.locals={warningCategory:"_Et43RIDBS31WGTsJW6Q",emptyCategory:"UD9L8GtxRyZNCl6a5dsA",warningDetails:"sah4Bu1xq72L7DDemOzU",collapsedCategory:"pSk7y6zU9J8U_IybbhZB",caret:"rhqw3NH8NqvbeV0idmJz"},n.Z=a},87995:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,".D0BH39_6wwiclW8aKuoi {\n  display: inline-flex;\n  list-style-type: none;\n  margin: 0;\n  padding: 0;\n}\n.D0BH39_6wwiclW8aKuoi li {\n  cursor: pointer;\n  padding: 5px;\n  margin: 5px;\n  border-radius: 4px;\n  font-variant: small-caps;\n}\n.D0BH39_6wwiclW8aKuoi li.xwo6V7AWCmy8CDvuTwRg {\n  background-color: var(--selection);\n  color: white;\n  cursor: default;\n}\n\n.nVbskEoaGxWf96qEgtxz {\n  position: absolute;\n}\n.nVbskEoaGxWf96qEgtxz > * {\n  width: 100% !important;\n  height: 100% !important;\n}\n\n.Ae2s0eqIVhebTEcJGc3F {\n  position: relative\n}\n.Ae2s0eqIVhebTEcJGc3F::after {\n  content: 'beta';\n  background-color: red;\n  color: white;\n  font-size: 12px;\n  font-weight: bold;\n  padding: 1px 3px;\n  border-radius: 6px;\n  position: absolute;\n  top: 0;\n  right: 0;\n  transform: translate(60%, -60%) rotate(13deg);\n}\n.xwo6V7AWCmy8CDvuTwRg .Ae2s0eqIVhebTEcJGc3F::after {\n  background-color: white;\n  color: var(--selection);\n  border: 1px solid var(--selection);\n}\n.sQQ0qFjHptJbQ8qvuXGa {\n  color: var(--error-highlight);\n}\n.D0BH39_6wwiclW8aKuoi li.xwo6V7AWCmy8CDvuTwRg.sQQ0qFjHptJbQ8qvuXGa {\n  background-color: var(--error-highlight);\n  color: white;\n}","",{version:3,sources:["webpack://./src/Keyboard/styles.module.css"],names:[],mappings:"AAAA;EACE,oBAAoB;EACpB,qBAAqB;EACrB,SAAS;EACT,UAAU;AACZ;AACA;EACE,eAAe;EACf,YAAY;EACZ,WAAW;EACX,kBAAkB;EAClB,wBAAwB;AAC1B;AACA;EACE,kCAAkC;EAClC,YAAY;EACZ,eAAe;AACjB;;AAEA;EACE,kBAAkB;AACpB;AACA;EACE,sBAAsB;EACtB,uBAAuB;AACzB;;AAEA;EACE;AACF;AACA;EACE,eAAe;EACf,qBAAqB;EACrB,YAAY;EACZ,eAAe;EACf,iBAAiB;EACjB,gBAAgB;EAChB,kBAAkB;EAClB,kBAAkB;EAClB,MAAM;EACN,QAAQ;EACR,6CAA6C;AAC/C;AACA;EACE,uBAAuB;EACvB,uBAAuB;EACvB,kCAAkC;AACpC;AACA;EACE,6BAA6B;AAC/B;AACA;EACE,wCAAwC;EACxC,YAAY;AACd",sourcesContent:[".editorModeTabs {\n  display: inline-flex;\n  list-style-type: none;\n  margin: 0;\n  padding: 0;\n}\n.editorModeTabs li {\n  cursor: pointer;\n  padding: 5px;\n  margin: 5px;\n  border-radius: 4px;\n  font-variant: small-caps;\n}\n.editorModeTabs li.activeEditTab {\n  background-color: var(--selection);\n  color: white;\n  cursor: default;\n}\n\n.placer {\n  position: absolute;\n}\n.placer > * {\n  width: 100% !important;\n  height: 100% !important;\n}\n\n.beta {\n  position: relative\n}\n.beta::after {\n  content: 'beta';\n  background-color: red;\n  color: white;\n  font-size: 12px;\n  font-weight: bold;\n  padding: 1px 3px;\n  border-radius: 6px;\n  position: absolute;\n  top: 0;\n  right: 0;\n  transform: translate(60%, -60%) rotate(13deg);\n}\n.activeEditTab .beta::after {\n  background-color: white;\n  color: var(--selection);\n  border: 1px solid var(--selection);\n}\n.warningTab {\n  color: var(--error-highlight);\n}\n.editorModeTabs li.activeEditTab.warningTab {\n  background-color: var(--error-highlight);\n  color: white;\n}"],sourceRoot:""}]),a.locals={editorModeTabs:"D0BH39_6wwiclW8aKuoi",activeEditTab:"xwo6V7AWCmy8CDvuTwRg",placer:"nVbskEoaGxWf96qEgtxz",beta:"Ae2s0eqIVhebTEcJGc3F",warningTab:"sQQ0qFjHptJbQ8qvuXGa"},n.Z=a},33971:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,".QkewNzGagIbndi3rJpKm {\n  border: none;\n  cursor: pointer;\n  color: white;\n  background: #248;\n  border-radius: 100%;\n  width: 24px;\n  height: 24px;\n  line-height: 24px;\n  text-align: center;\n}\n.QkewNzGagIbndi3rJpKm:hover {\n  background: #48F;\n}","",{version:3,sources:["webpack://./src/Sources/Demo/style.module.css"],names:[],mappings:"AAAA;EACE,YAAY;EACZ,eAAe;EACf,YAAY;EACZ,gBAAgB;EAChB,mBAAmB;EACnB,WAAW;EACX,YAAY;EACZ,iBAAiB;EACjB,kBAAkB;AACpB;AACA;EACE,gBAAgB;AAClB",sourcesContent:[".help {\n  border: none;\n  cursor: pointer;\n  color: white;\n  background: #248;\n  border-radius: 100%;\n  width: 24px;\n  height: 24px;\n  line-height: 24px;\n  text-align: center;\n}\n.help:hover {\n  background: #48F;\n}"],sourceRoot:""}]),a.locals={help:"QkewNzGagIbndi3rJpKm"},n.Z=a},80047:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,"\n.yyHfal9pM4DzShMl4LAY {\n  display: inline-flex;\n  height: 30px;\n  border-radius: 5px;\n\n  font-size: 70%;\n  padding: 0 4px;\n\n  background-color: royalblue;\n  color: white;\n  text-decoration: none;\n}\n\n.yyHfal9pM4DzShMl4LAY code {\n  font-family: monospace;\n}\n\n.QvI5wo7_u6OeAc12ib0W {\n  width: 30px;\n  height: 30px;\n  line-height: 30px;\n  font-size: 200%;\n  text-align: center;\n}\n\n.eUw5NZqoPPF3BcyYDpJx {\n  /* color: var(--selection); */\n}\n\n.XjY4lN_lY3nSgHcw67bX {\n  /* color: brown; */\n}\n\n.Ap_OwCtp3j1Q29Phpw3V {\n  color: gold;\n  animation: WjBuPfls4V41d2sjbNFU 1s linear alternate infinite;\n}\n\n@keyframes WjBuPfls4V41d2sjbNFU {\n  from { opacity: 0.5; }\n  to { opacity: 1; }\n}\n","",{version:3,sources:["webpack://./src/Sources/Github/styles.module.css"],names:[],mappings:";AACA;EACE,oBAAoB;EACpB,YAAY;EACZ,kBAAkB;;EAElB,cAAc;EACd,cAAc;;EAEd,2BAA2B;EAC3B,YAAY;EACZ,qBAAqB;AACvB;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,iBAAiB;EACjB,eAAe;EACf,kBAAkB;AACpB;;AAEA;EACE,6BAA6B;AAC/B;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,WAAW;EACX,4DAA6C;AAC/C;;AAEA;EACE,OAAO,YAAY,EAAE;EACrB,KAAK,UAAU,EAAE;AACnB",sourcesContent:["\n.buildDetails {\n  display: inline-flex;\n  height: 30px;\n  border-radius: 5px;\n\n  font-size: 70%;\n  padding: 0 4px;\n\n  background-color: royalblue;\n  color: white;\n  text-decoration: none;\n}\n\n.buildDetails code {\n  font-family: monospace;\n}\n\n.buildStatus {\n  width: 30px;\n  height: 30px;\n  line-height: 30px;\n  font-size: 200%;\n  text-align: center;\n}\n\n.buildSuccess {\n  /* color: var(--selection); */\n}\n\n.buildFailed {\n  /* color: brown; */\n}\n\n.buildPending {\n  color: gold;\n  animation: pulse 1s linear alternate infinite;\n}\n\n@keyframes pulse {\n  from { opacity: 0.5; }\n  to { opacity: 1; }\n}\n"],sourceRoot:""}]),a.locals={buildDetails:"yyHfal9pM4DzShMl4LAY",buildStatus:"QvI5wo7_u6OeAc12ib0W",buildSuccess:"eUw5NZqoPPF3BcyYDpJx",buildFailed:"XjY4lN_lY3nSgHcw67bX",buildPending:"Ap_OwCtp3j1Q29Phpw3V",pulse:"WjBuPfls4V41d2sjbNFU"},n.Z=a},47881:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,".sP2kDRoTZElZUTNHq033 {\n  width: 300px;\n\tpadding: 10px;\n\tborder-radius: 4px;\n\tbackground: radial-gradient(\n\t\trgba(var(--bg-rgb), 1) 20%,\n\t\trgba(var(--bg-rgb), .6) 100%\n\t);\n}\n.sP2kDRoTZElZUTNHq033 input {\n\tdisplay: block;\n\twidth: 100%;\n\theight: 30px;\n\tline-height: 30px;\n\n\tfont-size: 120%;\n\tmargin: 0;\n\tpadding: 4px;\n\tborder: none;\n\tborder-radius: 4px;\n  box-sizing: border-box;\n}\nul.inAS9Qunkf3g5K3xz6o6 {\n\tposition: relative;\n\tfont-family: monospace;\n\tlist-style-position: inside;\n\tlist-style-type: none;\n\tmax-height: 300px;\n\toverflow: scroll;\n\tpadding: 4px;\n  margin: 4px 0;\n\tbackground: rgba(0, 0, 0, 0.75);\n\tborder-radius: 4px;\n}\n.inAS9Qunkf3g5K3xz6o6 li {\n\tcursor: pointer;\n\tcolor: white;\n\tpadding: 5px;\n}\n.inAS9Qunkf3g5K3xz6o6 li:hover, .inAS9Qunkf3g5K3xz6o6 li.BL7Cxrn_efblQXY3W1Sw {\n\tbackground: white;\n\tcolor: black;\n}\n.inAS9Qunkf3g5K3xz6o6 li b { color: red; }\n.inAS9Qunkf3g5K3xz6o6 li .uld0XaeoQaQJJwp0LT0X {\n\tfont-style: italic;\n\tfont-size: 90%;\n\tmargin: 0;\n\tcolor: gray;\n}\n\n.pqiZQublKXvmnT_ESDxQ {\n  font-size: 10px;\n}\n\n.pqiZQublKXvmnT_ESDxQ a {\n  color: var(--selection);\n  border-bottom: 1px dotted var(--selection);\n  cursor: pointer;\n}\n\n.ECUs4g2j1rekP4xxgQDr {\n  position: relative;\n}\n.ECUs4g2j1rekP4xxgQDr input {\n  padding: 4px 4px 4px 30px;\n}\n\n.xDUAgQZeBp0TZSOqCwHm {\n  position: absolute;\n\ttop: 50%;\n\tleft: 10px;\n\ttransform: translateY(-50%);\n\tpointer-events: none;\n}\n.eY5zRl49sESLjXmizMEP {\n  position: absolute;\n\ttop: 50%;\n\tright: 10px;\n\ttransform: translateY(-50%);\n\tcursor: pointer;\n}","",{version:3,sources:["webpack://./src/ValuePicker/style.module.css"],names:[],mappings:"AAAA;EACE,YAAY;CACb,aAAa;CACb,kBAAkB;CAClB;;;EAGC;AACF;AACA;CACC,cAAc;CACd,WAAW;CACX,YAAY;CACZ,iBAAiB;;CAEjB,eAAe;CACf,SAAS;CACT,YAAY;CACZ,YAAY;CACZ,kBAAkB;EACjB,sBAAsB;AACxB;AACA;CACC,kBAAkB;CAClB,sBAAsB;CACtB,2BAA2B;CAC3B,qBAAqB;CACrB,iBAAiB;CACjB,gBAAgB;CAChB,YAAY;EACX,aAAa;CACd,+BAA+B;CAC/B,kBAAkB;AACnB;AACA;CACC,eAAe;CACf,YAAY;CACZ,YAAY;AACb;AACA;CACC,iBAAiB;CACjB,YAAY;AACb;AACA,6BAAgB,UAAU,EAAE;AAC5B;CACC,kBAAkB;CAClB,cAAc;CACd,SAAS;CACT,WAAW;AACZ;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,uBAAuB;EACvB,0CAA0C;EAC1C,eAAe;AACjB;;AAEA;EACE,kBAAkB;AACpB;AACA;EACE,yBAAyB;AAC3B;;AAEA;EACE,kBAAkB;CACnB,QAAQ;CACR,UAAU;CACV,2BAA2B;CAC3B,oBAAoB;AACrB;AACA;EACE,kBAAkB;CACnB,QAAQ;CACR,WAAW;CACX,2BAA2B;CAC3B,eAAe;AAChB",sourcesContent:[".dialog {\n  width: 300px;\n\tpadding: 10px;\n\tborder-radius: 4px;\n\tbackground: radial-gradient(\n\t\trgba(var(--bg-rgb), 1) 20%,\n\t\trgba(var(--bg-rgb), .6) 100%\n\t);\n}\n.dialog input {\n\tdisplay: block;\n\twidth: 100%;\n\theight: 30px;\n\tline-height: 30px;\n\n\tfont-size: 120%;\n\tmargin: 0;\n\tpadding: 4px;\n\tborder: none;\n\tborder-radius: 4px;\n  box-sizing: border-box;\n}\nul.results {\n\tposition: relative;\n\tfont-family: monospace;\n\tlist-style-position: inside;\n\tlist-style-type: none;\n\tmax-height: 300px;\n\toverflow: scroll;\n\tpadding: 4px;\n  margin: 4px 0;\n\tbackground: rgba(0, 0, 0, 0.75);\n\tborder-radius: 4px;\n}\n.results li {\n\tcursor: pointer;\n\tcolor: white;\n\tpadding: 5px;\n}\n.results li:hover, .results li.highlighted {\n\tbackground: white;\n\tcolor: black;\n}\n.results li b { color: red; }\n.results li .description {\n\tfont-style: italic;\n\tfont-size: 90%;\n\tmargin: 0;\n\tcolor: gray;\n}\n\n.choices-counter {\n  font-size: 10px;\n}\n\n.choices-counter a {\n  color: var(--selection);\n  border-bottom: 1px dotted var(--selection);\n  cursor: pointer;\n}\n\n.searchWrapper {\n  position: relative;\n}\n.searchWrapper input {\n  padding: 4px 4px 4px 30px;\n}\n\n.searchIcon {\n  position: absolute;\n\ttop: 50%;\n\tleft: 10px;\n\ttransform: translateY(-50%);\n\tpointer-events: none;\n}\n.clearSearchIcon {\n  position: absolute;\n\ttop: 50%;\n\tright: 10px;\n\ttransform: translateY(-50%);\n\tcursor: pointer;\n}"],sourceRoot:""}]),a.locals={dialog:"sP2kDRoTZElZUTNHq033",results:"inAS9Qunkf3g5K3xz6o6",highlighted:"BL7Cxrn_efblQXY3W1Sw",description:"uld0XaeoQaQJJwp0LT0X","choices-counter":"pqiZQublKXvmnT_ESDxQ",searchWrapper:"ECUs4g2j1rekP4xxgQDr",searchIcon:"xDUAgQZeBp0TZSOqCwHm",clearSearchIcon:"eY5zRl49sESLjXmizMEP"},n.Z=a},2746:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,"\n._vWNIXMkemQax9rkCJQh {\n  display: inline-block;\n  position: absolute;\n  z-index: 100;\n  bottom: 5px;\n  left: 5px;\n}\n\n._vWNIXMkemQax9rkCJQh label {\n  font-size: 75%;\n  font-style: italic;\n  display: block;\n  padding: 0 10px;\n}\n\n.qiC2NrujE4ebqmHjzq0_ {\n  display: inline-block;\n  font-size: 110%;\n  font-style: italic;\n  background-color: var(--code-bg);\n  border-radius: 20px;\n  padding: 5px 10px;\n  text-decoration: none;\n\n  color: royalblue;\n}\n.qiC2NrujE4ebqmHjzq0_:hover {\n  background-color: royalblue;\n  color: white;\n}","",{version:3,sources:["webpack://./src/styles.module.css"],names:[],mappings:";AACA;EACE,qBAAqB;EACrB,kBAAkB;EAClB,YAAY;EACZ,WAAW;EACX,SAAS;AACX;;AAEA;EACE,cAAc;EACd,kBAAkB;EAClB,cAAc;EACd,eAAe;AACjB;;AAEA;EACE,qBAAqB;EACrB,eAAe;EACf,kBAAkB;EAClB,gCAAgC;EAChC,mBAAmB;EACnB,iBAAiB;EACjB,qBAAqB;;EAErB,gBAAgB;AAClB;AACA;EACE,2BAA2B;EAC3B,YAAY;AACd",sourcesContent:["\n.wrapper {\n  display: inline-block;\n  position: absolute;\n  z-index: 100;\n  bottom: 5px;\n  left: 5px;\n}\n\n.wrapper label {\n  font-size: 75%;\n  font-style: italic;\n  display: block;\n  padding: 0 10px;\n}\n\n.githubLink {\n  display: inline-block;\n  font-size: 110%;\n  font-style: italic;\n  background-color: var(--code-bg);\n  border-radius: 20px;\n  padding: 5px 10px;\n  text-decoration: none;\n\n  color: royalblue;\n}\n.githubLink:hover {\n  background-color: royalblue;\n  color: white;\n}"],sourceRoot:""}]),a.locals={wrapper:"_vWNIXMkemQax9rkCJQh",githubLink:"qiC2NrujE4ebqmHjzq0_"},n.Z=a},46700:function(e,n,t){var r={"./af":42786,"./af.js":42786,"./ar":30867,"./ar-dz":14130,"./ar-dz.js":14130,"./ar-kw":96135,"./ar-kw.js":96135,"./ar-ly":56440,"./ar-ly.js":56440,"./ar-ma":47702,"./ar-ma.js":47702,"./ar-sa":16040,"./ar-sa.js":16040,"./ar-tn":37100,"./ar-tn.js":37100,"./ar.js":30867,"./az":31083,"./az.js":31083,"./be":9808,"./be.js":9808,"./bg":68338,"./bg.js":68338,"./bm":67438,"./bm.js":67438,"./bn":8905,"./bn-bd":76225,"./bn-bd.js":76225,"./bn.js":8905,"./bo":11560,"./bo.js":11560,"./br":1278,"./br.js":1278,"./bs":80622,"./bs.js":80622,"./ca":2468,"./ca.js":2468,"./cs":5822,"./cs.js":5822,"./cv":50877,"./cv.js":50877,"./cy":47373,"./cy.js":47373,"./da":24780,"./da.js":24780,"./de":59740,"./de-at":60217,"./de-at.js":60217,"./de-ch":60894,"./de-ch.js":60894,"./de.js":59740,"./dv":5300,"./dv.js":5300,"./el":50837,"./el.js":50837,"./en-au":78348,"./en-au.js":78348,"./en-ca":77925,"./en-ca.js":77925,"./en-gb":22243,"./en-gb.js":22243,"./en-ie":46436,"./en-ie.js":46436,"./en-il":47207,"./en-il.js":47207,"./en-in":44175,"./en-in.js":44175,"./en-nz":76319,"./en-nz.js":76319,"./en-sg":31662,"./en-sg.js":31662,"./eo":92915,"./eo.js":92915,"./es":55655,"./es-do":55251,"./es-do.js":55251,"./es-mx":96112,"./es-mx.js":96112,"./es-us":71146,"./es-us.js":71146,"./es.js":55655,"./et":5603,"./et.js":5603,"./eu":77763,"./eu.js":77763,"./fa":76959,"./fa.js":76959,"./fi":11897,"./fi.js":11897,"./fil":42549,"./fil.js":42549,"./fo":94694,"./fo.js":94694,"./fr":94470,"./fr-ca":63049,"./fr-ca.js":63049,"./fr-ch":52330,"./fr-ch.js":52330,"./fr.js":94470,"./fy":5044,"./fy.js":5044,"./ga":29295,"./ga.js":29295,"./gd":2101,"./gd.js":2101,"./gl":38794,"./gl.js":38794,"./gom-deva":27884,"./gom-deva.js":27884,"./gom-latn":23168,"./gom-latn.js":23168,"./gu":95349,"./gu.js":95349,"./he":24206,"./he.js":24206,"./hi":30094,"./hi.js":30094,"./hr":30316,"./hr.js":30316,"./hu":22138,"./hu.js":22138,"./hy-am":11423,"./hy-am.js":11423,"./id":29218,"./id.js":29218,"./is":90135,"./is.js":90135,"./it":90626,"./it-ch":10150,"./it-ch.js":10150,"./it.js":90626,"./ja":39183,"./ja.js":39183,"./jv":24286,"./jv.js":24286,"./ka":12105,"./ka.js":12105,"./kk":47772,"./kk.js":47772,"./km":18758,"./km.js":18758,"./kn":79282,"./kn.js":79282,"./ko":33730,"./ko.js":33730,"./ku":1408,"./ku.js":1408,"./ky":33291,"./ky.js":33291,"./lb":36841,"./lb.js":36841,"./lo":55466,"./lo.js":55466,"./lt":57010,"./lt.js":57010,"./lv":37595,"./lv.js":37595,"./me":39861,"./me.js":39861,"./mi":35493,"./mi.js":35493,"./mk":95966,"./mk.js":95966,"./ml":87341,"./ml.js":87341,"./mn":5115,"./mn.js":5115,"./mr":10370,"./mr.js":10370,"./ms":9847,"./ms-my":41237,"./ms-my.js":41237,"./ms.js":9847,"./mt":72126,"./mt.js":72126,"./my":56165,"./my.js":56165,"./nb":64924,"./nb.js":64924,"./ne":16744,"./ne.js":16744,"./nl":93901,"./nl-be":59814,"./nl-be.js":59814,"./nl.js":93901,"./nn":83877,"./nn.js":83877,"./oc-lnc":92135,"./oc-lnc.js":92135,"./pa-in":15858,"./pa-in.js":15858,"./pl":64495,"./pl.js":64495,"./pt":89520,"./pt-br":57971,"./pt-br.js":57971,"./pt.js":89520,"./ro":96459,"./ro.js":96459,"./ru":21793,"./ru.js":21793,"./sd":40950,"./sd.js":40950,"./se":10490,"./se.js":10490,"./si":90124,"./si.js":90124,"./sk":64249,"./sk.js":64249,"./sl":14985,"./sl.js":14985,"./sq":51104,"./sq.js":51104,"./sr":49131,"./sr-cyrl":79915,"./sr-cyrl.js":79915,"./sr.js":49131,"./ss":95606,"./ss.js":95606,"./sv":98760,"./sv.js":98760,"./sw":91172,"./sw.js":91172,"./ta":27333,"./ta.js":27333,"./te":23110,"./te.js":23110,"./tet":52095,"./tet.js":52095,"./tg":27321,"./tg.js":27321,"./th":9041,"./th.js":9041,"./tk":19005,"./tk.js":19005,"./tl-ph":75768,"./tl-ph.js":75768,"./tlh":89444,"./tlh.js":89444,"./tr":72397,"./tr.js":72397,"./tzl":28254,"./tzl.js":28254,"./tzm":51106,"./tzm-latn":30699,"./tzm-latn.js":30699,"./tzm.js":51106,"./ug-cn":9288,"./ug-cn.js":9288,"./uk":67691,"./uk.js":67691,"./ur":13795,"./ur.js":13795,"./uz":6791,"./uz-latn":60588,"./uz-latn.js":60588,"./uz.js":6791,"./vi":65666,"./vi.js":65666,"./x-pseudo":14378,"./x-pseudo.js":14378,"./yo":75805,"./yo.js":75805,"./zh-cn":83839,"./zh-cn.js":83839,"./zh-hk":55726,"./zh-hk.js":55726,"./zh-mo":99807,"./zh-mo.js":99807,"./zh-tw":74152,"./zh-tw.js":74152};function o(e){var n=i(e);return t(n)}function i(e){if(!t.o(r,e)){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}return r[e]}o.keys=function(){return Object.keys(r)},o.resolve=i,e.exports=o,o.id=46700}},function(e){e.O(0,[712,216],(function(){return 41482,e(e.s=41482)})),e.O()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,