/*! For license information please see main.19fcda7808481ca5b225.js.LICENSE.txt */
(self.webpackChunkapp=self.webpackChunkapp||[]).push([[179],{4673:function(e,n,t){"use strict";var r=t(67294),o=t(20745),i=t(95998),a=t(93379),c=t.n(a),l=t(7795),s=t.n(l),u=t(90569),f=t.n(u),p=t(3565),d=t.n(p),y=t(19216),h=t.n(y),b=t(44589),A=t.n(b),m=t(51424),v={};v.styleTagTransform=A(),v.setAttributes=d(),v.insert=f().bind(null,"head"),v.domAPI=s(),v.insertStyleElement=h(),c()(m.Z,v),m.Z&&m.Z.locals&&m.Z.locals,t(56831);var g=t(39087),x={};x.styleTagTransform=A(),x.setAttributes=d(),x.insert=f().bind(null,"head"),x.domAPI=s(),x.insertStyleElement=h(),c()(g.Z,x),g.Z&&g.Z.locals&&g.Z.locals;var j=(0,r.createContext)({getSearchTargets:null}),C=(0,r.createContext)({settings:null,openSettingsDialog:null});function w(e){return e&&["1","on","yes","true"].includes(e.toString().toLowerCase())}var E="https://zmk-keymap-editor.fly.dev",O=w("true"),k=w("false"),S=w("true");function B(e){return B="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},B(e)}function P(){P=function(){return e};var e={},n=Object.prototype,t=n.hasOwnProperty,r=Object.defineProperty||function(e,n,t){e[n]=t.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function l(e,n,t){return Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}),e[n]}try{l({},"")}catch(e){l=function(e,n,t){return e[n]=t}}function s(e,n,t,o){var i=n&&n.prototype instanceof p?n:p,a=Object.create(i.prototype),c=new E(o||[]);return r(a,"_invoke",{value:x(e,t,c)}),a}function u(e,n,t){try{return{type:"normal",arg:e.call(n,t)}}catch(e){return{type:"throw",arg:e}}}e.wrap=s;var f={};function p(){}function d(){}function y(){}var h={};l(h,i,(function(){return this}));var b=Object.getPrototypeOf,A=b&&b(b(O([])));A&&A!==n&&t.call(A,i)&&(h=A);var m=y.prototype=p.prototype=Object.create(h);function v(e){["next","throw","return"].forEach((function(n){l(e,n,(function(e){return this._invoke(n,e)}))}))}function g(e,n){function o(r,i,a,c){var l=u(e[r],e,i);if("throw"!==l.type){var s=l.arg,f=s.value;return f&&"object"==B(f)&&t.call(f,"__await")?n.resolve(f.__await).then((function(e){o("next",e,a,c)}),(function(e){o("throw",e,a,c)})):n.resolve(f).then((function(e){s.value=e,a(s)}),(function(e){return o("throw",e,a,c)}))}c(l.arg)}var i;r(this,"_invoke",{value:function(e,t){function r(){return new n((function(n,r){o(e,t,n,r)}))}return i=i?i.then(r,r):r()}})}function x(e,n,t){var r="suspendedStart";return function(o,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw i;return{value:void 0,done:!0}}for(t.method=o,t.arg=i;;){var a=t.delegate;if(a){var c=j(a,t);if(c){if(c===f)continue;return c}}if("next"===t.method)t.sent=t._sent=t.arg;else if("throw"===t.method){if("suspendedStart"===r)throw r="completed",t.arg;t.dispatchException(t.arg)}else"return"===t.method&&t.abrupt("return",t.arg);r="executing";var l=u(e,n,t);if("normal"===l.type){if(r=t.done?"completed":"suspendedYield",l.arg===f)continue;return{value:l.arg,done:t.done}}"throw"===l.type&&(r="completed",t.method="throw",t.arg=l.arg)}}}function j(e,n){var t=n.method,r=e.iterator[t];if(void 0===r)return n.delegate=null,"throw"===t&&e.iterator.return&&(n.method="return",n.arg=void 0,j(e,n),"throw"===n.method)||"return"!==t&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+t+"' method")),f;var o=u(r,e.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,f;var i=o.arg;return i?i.done?(n[e.resultName]=i.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=void 0),n.delegate=null,f):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,f)}function C(e){var n={tryLoc:e[0]};1 in e&&(n.catchLoc=e[1]),2 in e&&(n.finallyLoc=e[2],n.afterLoc=e[3]),this.tryEntries.push(n)}function w(e){var n=e.completion||{};n.type="normal",delete n.arg,e.completion=n}function E(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(C,this),this.reset(!0)}function O(e){if(e){var n=e[i];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,o=function n(){for(;++r<e.length;)if(t.call(e,r))return n.value=e[r],n.done=!1,n;return n.value=void 0,n.done=!0,n};return o.next=o}}return{next:k}}function k(){return{value:void 0,done:!0}}return d.prototype=y,r(m,"constructor",{value:y,configurable:!0}),r(y,"constructor",{value:d,configurable:!0}),d.displayName=l(y,c,"GeneratorFunction"),e.isGeneratorFunction=function(e){var n="function"==typeof e&&e.constructor;return!!n&&(n===d||"GeneratorFunction"===(n.displayName||n.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,y):(e.__proto__=y,l(e,c,"GeneratorFunction")),e.prototype=Object.create(m),e},e.awrap=function(e){return{__await:e}},v(g.prototype),l(g.prototype,a,(function(){return this})),e.AsyncIterator=g,e.async=function(n,t,r,o,i){void 0===i&&(i=Promise);var a=new g(s(n,t,r,o),i);return e.isGeneratorFunction(t)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},v(m),l(m,c,"Generator"),l(m,i,(function(){return this})),l(m,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var n=Object(e),t=[];for(var r in n)t.push(r);return t.reverse(),function e(){for(;t.length;){var r=t.pop();if(r in n)return e.value=r,e.done=!1,e}return e.done=!0,e}},e.values=O,E.prototype={constructor:E,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(w),!e)for(var n in this)"t"===n.charAt(0)&&t.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function r(t,r){return a.type="throw",a.arg=e,n.next=t,r&&(n.method="next",n.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var c=t.call(i,"catchLoc"),l=t.call(i,"finallyLoc");if(c&&l){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(e,n){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&t.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=n&&n<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=n,i?(this.method="next",this.next=i.finallyLoc,f):this.complete(a)},complete:function(e,n){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&n&&(this.next=n),f},finish:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.finallyLoc===e)return this.complete(t.completion,t.afterLoc),w(t),f}},catch:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.tryLoc===e){var r=t.completion;if("throw"===r.type){var o=r.arg;w(t)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,t){return this.delegate={iterator:O(e),resultName:n,nextLoc:t},"next"===this.method&&(this.arg=void 0),f}},e}function I(e,n,t,r,o,i,a){try{var c=e[i](a),l=c.value}catch(e){return void t(e)}c.done?n(l):Promise.resolve(l).then(r,o)}function T(e){return function(){var n=this,t=arguments;return new Promise((function(r,o){var i=e.apply(n,t);function a(e){I(i,r,o,a,c,"next",e)}function c(e){I(i,r,o,a,c,"throw",e)}a(void 0)}))}}function D(){return L.apply(this,arguments)}function L(){return(L=T(P().mark((function e(){var n,r,o;return P().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Promise.resolve().then(t.t.bind(t,95130,23));case 2:return n=e.sent,r=n.behaviorSchemas,o=n.behaviorBindings,e.abrupt("return",{behaviors:r,bindings:o});case 6:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function R(){return(R=T(P().mark((function e(){var n,r;return P().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,t.e(712).then(t.t.bind(t,52779,23));case 2:return n=e.sent,r=n.keycodes,e.abrupt("return",r);case 5:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function N(){return(N=T(P().mark((function e(){var n,r;return P().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,t.e(712).then(t.t.bind(t,52779,23));case 2:return n=e.sent,r=n.keycodeGlyphs,e.abrupt("return",r);case 5:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function _(){return M.apply(this,arguments)}function M(){return(M=T(P().mark((function e(){var n;return P().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,fetch("".concat(E,"/v2/local/keyboards"));case 2:return n=e.sent,e.abrupt("return",n.json());case 4:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function Y(e){return K.apply(this,arguments)}function K(){return(K=T(P().mark((function e(n){var t,r,o;return P().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t="v2/local/keyboards/".concat(encodeURIComponent(n)),r="".concat(E,"/").concat(t),e.next=4,fetch(r);case 4:return o=e.sent,e.abrupt("return",o.json());case 6:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function Z(e,n){return q.apply(this,arguments)}function q(){return q=T(P().mark((function e(n,t){var r,o,i;return P().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r="v2/local/keyboards/".concat(encodeURIComponent(n),"/keymap"),o="".concat(E,"/").concat(r),e.next=4,fetch(o,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});case 4:return i=e.sent,e.abrupt("return",i.json());case 6:case"end":return e.stop()}}),e)}))),q.apply(this,arguments)}var U=t(45697),G=t.n(U),z=t(85893);function W(e){return W="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},W(e)}var F=["name","className","collection"];function X(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function V(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==W(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==W(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===W(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}var Q={brands:"fab",default:"fa",solid:"fas",round:"far"};function H(e){var n=e.name,t=e.className,r=e.collection,o=function(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}(e,F),i=Q[r],a="fa-".concat(n);return(0,z.jsx)("span",function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?X(Object(t),!0).forEach((function(n){V(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):X(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}({className:[t,i,a].join(" ")},o))}H.propTypes={name:G().string.isRequired,className:G().string,collection:G().string},H.defaultProps={collection:"default",className:""};var J=H;function $(e){return $="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},$(e)}var ee=["collection","icon","text","children","onClick"];function ne(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function te(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?ne(Object(t),!0).forEach((function(n){re(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ne(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function re(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==$(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==$(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===$(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function oe(e){var n=e.collection,t=e.icon,r=e.text,o=e.children,i=e.onClick,a=function(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}(e,ee);return(0,z.jsxs)("button",te(te({onClick:i},a),{},{children:[(0,z.jsx)(J,{collection:n,name:t})," ",r||o]}))}var ie=t(92127),ae={};ae.styleTagTransform=A(),ae.setAttributes=d(),ae.insert=f().bind(null,"head"),ae.domAPI=s(),ae.insertStyleElement=h(),c()(ie.Z,ae);var ce=ie.Z&&ie.Z.locals?ie.Z.locals:void 0;function le(e){return le="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},le(e)}var se=["children"];function ue(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function fe(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?ue(Object(t),!0).forEach((function(n){pe(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ue(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function pe(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==le(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==le(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===le(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function de(e){var n=e.children,t=function(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}(e,se);return(0,z.jsxs)("div",fe(fe({},t),{},{className:ce.spinner,children:[(0,z.jsx)("i",{className:"".concat(ce.icon," fa fa-spinner")}),n]}))}var ye=t(96486),he=t(63105),be=t.n(he),Ae=t(27361),me=t.n(Ae),ve=t(41609),ge=t.n(ve),xe=t(24350),je=t.n(xe),Ce=t(35161),we=t.n(Ce),Ee=t(50361),Oe=t.n(Ee);function ke(e,n){var t="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!t){if(Array.isArray(e)||(t=Se(e))||n&&e&&"number"==typeof e.length){t&&(e=t);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,c=!1;return{s:function(){t=t.call(e)},n:function(){var e=t.next();return a=e.done,e},e:function(e){c=!0,i=e},f:function(){try{a||null==t.return||t.return()}finally{if(c)throw i}}}}function Se(e,n){if(e){if("string"==typeof e)return Be(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Be(e,n):void 0}}function Be(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function Pe(e){return(n=e,function(e){if(Array.isArray(e))return Be(e)}(n)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(n)||Se(n)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()).sort((function(e,n){return e.length-n.length}))[0].replace(/^KC_/,"");var n}var Ie=/^(.+?)\((code)\)$/;function Te(e){return e.reduce((function(e,n){var t,r=n.description,o=n.context,i=n.symbol,a=n.faIcon,c=n.names.filter((function(e){return!e.match(Ie)})),l=Pe(c),s=n.names.map((function(e){return e.match(Ie)})).filter((function(e){return!!e}))[0],u={name:l,aliases:c,description:r,context:o,faIcon:a,symbol:i||l,params:[]},f=ke(c);try{for(f.s();!(t=f.n()).done;){var p=t.value;e.push(Object.assign({},u,{code:p,isModifier:!!s}))}}catch(e){f.e(e)}finally{f.f()}return s&&e.push(Object.assign({},u,{code:s[1],params:s[2].split(",")})),e}),[])}function De(e){return De="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},De(e)}function Le(){Le=function(){return e};var e={},n=Object.prototype,t=n.hasOwnProperty,r=Object.defineProperty||function(e,n,t){e[n]=t.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function l(e,n,t){return Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}),e[n]}try{l({},"")}catch(e){l=function(e,n,t){return e[n]=t}}function s(e,n,t,o){var i=n&&n.prototype instanceof p?n:p,a=Object.create(i.prototype),c=new E(o||[]);return r(a,"_invoke",{value:x(e,t,c)}),a}function u(e,n,t){try{return{type:"normal",arg:e.call(n,t)}}catch(e){return{type:"throw",arg:e}}}e.wrap=s;var f={};function p(){}function d(){}function y(){}var h={};l(h,i,(function(){return this}));var b=Object.getPrototypeOf,A=b&&b(b(O([])));A&&A!==n&&t.call(A,i)&&(h=A);var m=y.prototype=p.prototype=Object.create(h);function v(e){["next","throw","return"].forEach((function(n){l(e,n,(function(e){return this._invoke(n,e)}))}))}function g(e,n){function o(r,i,a,c){var l=u(e[r],e,i);if("throw"!==l.type){var s=l.arg,f=s.value;return f&&"object"==De(f)&&t.call(f,"__await")?n.resolve(f.__await).then((function(e){o("next",e,a,c)}),(function(e){o("throw",e,a,c)})):n.resolve(f).then((function(e){s.value=e,a(s)}),(function(e){return o("throw",e,a,c)}))}c(l.arg)}var i;r(this,"_invoke",{value:function(e,t){function r(){return new n((function(n,r){o(e,t,n,r)}))}return i=i?i.then(r,r):r()}})}function x(e,n,t){var r="suspendedStart";return function(o,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw i;return{value:void 0,done:!0}}for(t.method=o,t.arg=i;;){var a=t.delegate;if(a){var c=j(a,t);if(c){if(c===f)continue;return c}}if("next"===t.method)t.sent=t._sent=t.arg;else if("throw"===t.method){if("suspendedStart"===r)throw r="completed",t.arg;t.dispatchException(t.arg)}else"return"===t.method&&t.abrupt("return",t.arg);r="executing";var l=u(e,n,t);if("normal"===l.type){if(r=t.done?"completed":"suspendedYield",l.arg===f)continue;return{value:l.arg,done:t.done}}"throw"===l.type&&(r="completed",t.method="throw",t.arg=l.arg)}}}function j(e,n){var t=n.method,r=e.iterator[t];if(void 0===r)return n.delegate=null,"throw"===t&&e.iterator.return&&(n.method="return",n.arg=void 0,j(e,n),"throw"===n.method)||"return"!==t&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+t+"' method")),f;var o=u(r,e.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,f;var i=o.arg;return i?i.done?(n[e.resultName]=i.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=void 0),n.delegate=null,f):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,f)}function C(e){var n={tryLoc:e[0]};1 in e&&(n.catchLoc=e[1]),2 in e&&(n.finallyLoc=e[2],n.afterLoc=e[3]),this.tryEntries.push(n)}function w(e){var n=e.completion||{};n.type="normal",delete n.arg,e.completion=n}function E(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(C,this),this.reset(!0)}function O(e){if(e){var n=e[i];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,o=function n(){for(;++r<e.length;)if(t.call(e,r))return n.value=e[r],n.done=!1,n;return n.value=void 0,n.done=!0,n};return o.next=o}}return{next:k}}function k(){return{value:void 0,done:!0}}return d.prototype=y,r(m,"constructor",{value:y,configurable:!0}),r(y,"constructor",{value:d,configurable:!0}),d.displayName=l(y,c,"GeneratorFunction"),e.isGeneratorFunction=function(e){var n="function"==typeof e&&e.constructor;return!!n&&(n===d||"GeneratorFunction"===(n.displayName||n.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,y):(e.__proto__=y,l(e,c,"GeneratorFunction")),e.prototype=Object.create(m),e},e.awrap=function(e){return{__await:e}},v(g.prototype),l(g.prototype,a,(function(){return this})),e.AsyncIterator=g,e.async=function(n,t,r,o,i){void 0===i&&(i=Promise);var a=new g(s(n,t,r,o),i);return e.isGeneratorFunction(t)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},v(m),l(m,c,"Generator"),l(m,i,(function(){return this})),l(m,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var n=Object(e),t=[];for(var r in n)t.push(r);return t.reverse(),function e(){for(;t.length;){var r=t.pop();if(r in n)return e.value=r,e.done=!1,e}return e.done=!0,e}},e.values=O,E.prototype={constructor:E,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(w),!e)for(var n in this)"t"===n.charAt(0)&&t.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function r(t,r){return a.type="throw",a.arg=e,n.next=t,r&&(n.method="next",n.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var c=t.call(i,"catchLoc"),l=t.call(i,"finallyLoc");if(c&&l){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(e,n){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&t.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=n&&n<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=n,i?(this.method="next",this.next=i.finallyLoc,f):this.complete(a)},complete:function(e,n){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&n&&(this.next=n),f},finish:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.finallyLoc===e)return this.complete(t.completion,t.afterLoc),w(t),f}},catch:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.tryLoc===e){var r=t.completion;if("throw"===r.type){var o=r.arg;w(t)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,t){return this.delegate={iterator:O(e),resultName:n,nextLoc:t},"next"===this.method&&(this.arg=void 0),f}},e}function Re(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function Ne(e,n,t,r,o,i,a){try{var c=e[i](a),l=c.value}catch(e){return void t(e)}c.done?n(l):Promise.resolve(l).then(r,o)}var _e=(0,r.createContext)({keycodes:[],behaviours:[],behaviors:{},behaviorBinds:[],glyphs:[]}),Me=function(e){return e.definitions};function Ye(e){var n=e.children,t=(0,i.v9)(Me),o=(0,i.I0)();if((0,r.useEffect)((function(){var e;(e=Le().mark((function e(){var n,r,i,a,c,l,s;return Le().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(null===t){e.next=2;break}return e.abrupt("return");case 2:return e.next=4,Promise.all([function(){return R.apply(this,arguments)}().then(Te),D(),function(){return N.apply(this,arguments)}()]);case 4:n=e.sent,f=3,r=function(e){if(Array.isArray(e))return e}(u=n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(u,f)||function(e,n){if(e){if("string"==typeof e)return Re(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Re(e,n):void 0}}(u,f)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),i=r[0],a=r[1],c=r[2],l=Oe()(a.behaviors),s=Oe()(a.bindings),i.indexed=je()(i,"code"),s.indexed=je()(s,"code"),s.context={none:s.filter((function(e){return!e.context})),macros:be()(s,{context:"macros"})},s.byContext={none:je()(s.context.none,"code"),macros:je()(s.context.macros,"code")},o({type:"DEFINITIONS_SET",definitions:{keycodes:i,behaviours:s,behaviors:l,behaviorBinds:s,glyphs:c}});case 16:case"end":return e.stop()}var u,f}),e)})),function(){var n=this,t=arguments;return new Promise((function(r,o){var i=e.apply(n,t);function a(e){Ne(i,r,o,a,c,"next",e)}function c(e){Ne(i,r,o,a,c,"throw",e)}a(void 0)}))})()}),[t,o]),t)return(0,z.jsx)(_e.Provider,{value:t,children:n})}var Ke=["children"];function Ze(e){return function(e){if(Array.isArray(e))return qe(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,n){if(e){if("string"==typeof e)return qe(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?qe(e,n):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function qe(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var Ue=function(e){var n=e.children,t=function(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}(e,Ke).keymap,o=(0,r.useContext)(_e),i=o.keycodes,a=o.behaviours,c=o.glyphs,l=(0,r.useContext)(C).settings,s=(0,r.useMemo)((function(){var e=window.navigator.platform.startsWith("Mac"),n=window.navigator.platform.startsWith("Win"),t=e?"mac":n&&"win";return function(e,n){return(0,ye.compact)([e.basic,n.unicode&&e.unicode,"mac"===n.platform&&e.platforms.mac,"win"===n.platform&&e.platforms.win]).reduce((function(e,n){var t,r=ke(n);try{for(r.s();!(t=r.n()).done;){var o=t.value,i=o.names.filter((function(e){return!e.match(Ie)})),a=Pe(i);e[a]||(e[a]={}),e[a].symbol=e[a].symbol||o.symbol,e[a].faIcon=e[a].faIcon||o.faIcon}}catch(e){r.e(e)}finally{r.f()}return e}),{})}(c,{unicode:me()(l,"unicodeGlyphs",!0),platform:"auto"!==me()(l,"platformGlyphs","auto")?l.platformGlyphs:t})}),[c,l]),u=(0,r.useMemo)((function(){var e=[].concat(Ze(a),Ze((t.behaviors||[]).map((function(e){return{code:"&".concat(e.labels[0]),bind:"&".concat(e.labels[0]),name:e.name,description:'Custom behavior: "'.concat(e.properties.label.raw||e.name,'"'),params:e.params}}))),Ze(t.macros.map((function(e){return{code:"&".concat(e.identifier),name:e.identifier,description:"Custom macro",params:[]}}))));return e.indexed=je()(e,"code"),e.context={none:e.filter((function(e){return!e.context})),macros:be()(e,{context:"macros"})},e.byContext={none:je()(e.context.none,"code"),macros:je()(e.context.macros,"code")},e}),[a,t.behaviors,t.macros]),f=(0,r.useMemo)((function(){return ge()(t)?[]:t.layers.map((function(e,n){return{code:n,description:e.name||"Layer ".concat(n)}}))}),[t]),p=(0,r.useMemo)((function(){return{kc:i.indexed,code:i.indexed,mod:je()(be()(i,"isModifier"),"code"),behaviours:u.indexed,behavioursByContext:u.byContext,layer:je()(f,"code")}}),[i,u,f]),d=(0,r.useMemo)((function(){return{behaviour:u,layer:f,mod:be()(i,"isModifier"),code:i}}),[u,i,f]),y=(0,r.useMemo)((function(){return function(e,n){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"none";return e.enum?e.enum.map((function(e){return{code:e}})):e.raw?[]:"command"===e?me()(p.behavioursByContext,[t,n,"commands"],[]):(d[e]||console.error("cannot find target for",e),"behaviour"===e?d.behaviour.context[t]:d[e])}}),[d,p]),h=(0,r.useMemo)((function(){return[].concat(Ze(we()(i,"code")),Ze(Object.keys(t.defines||{})))}),[i,t.defines]);return(0,z.jsx)(j.Provider,{value:{getSearchTargets:y,mergedGlyphs:s,sources:p,identifiers:h},children:n})},Ge=t(56281),ze={};ze.styleTagTransform=A(),ze.setAttributes=d(),ze.insert=f().bind(null,"head"),ze.domAPI=s(),ze.insertStyleElement=h(),c()(Ge.Z,ze);var We=Ge.Z&&Ge.Z.locals?Ge.Z.locals:void 0;function Fe(e){return Fe="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Fe(e)}var Xe=["children","secondary","className"];function Ve(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Qe(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Ve(Object(t),!0).forEach((function(n){He(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Ve(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function He(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Fe(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Fe(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Fe(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Je(e){var n=e.children,t=e.secondary,r=e.className,o=function(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}(e,Xe);return(0,z.jsx)("button",Qe(Qe({className:[r,We.action,t&&We.secondary].join(" ")},o),{},{children:n}))}Je.defaultProps={className:""};var $e=Je,en=t(57557),nn=t.n(en),tn=t(49502),rn={};rn.styleTagTransform=A(),rn.setAttributes=d(),rn.insert=f().bind(null,"head"),rn.domAPI=s(),rn.insertStyleElement=h(),c()(tn.Z,rn);var on=tn.Z&&tn.Z.locals?tn.Z.locals:void 0;function an(e){return an="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},an(e)}var cn=["dismissText","classes","onDismiss","children"];function ln(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function sn(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?ln(Object(t),!0).forEach((function(n){un(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ln(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function un(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==an(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==an(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===an(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function fn(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function pn(e){var n,t=e.dismissText,r=void 0===t?"Ok":t,o=e.classes,i=void 0===o?[]:o,a=e.onDismiss,c=e.children,l=function(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}(e,cn);return(0,z.jsxs)("div",sn(sn({className:[on.dialog].concat((n=i,function(e){if(Array.isArray(e))return fn(e)}(n)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(n)||function(e,n){if(e){if("string"==typeof e)return fn(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?fn(e,n):void 0}}(n)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())).join(" ")},l),{},{children:[c,r&&(0,z.jsx)("button",{className:on.button,onClick:a,children:r})]}))}var dn=t(73935);function yn(e){return yn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},yn(e)}function hn(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function bn(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?hn(Object(t),!0).forEach((function(n){An(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):hn(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function An(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==yn(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==yn(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===yn(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}var mn={wrapper:{position:"absolute",top:"0",left:"0",width:"100vw",height:"100vh",backgroundColor:"rgba(104, 123, 162, 0.39)",backdropFilter:"blur(1px)",zIndex:"50",display:"flex",justifyContent:"center",alignItems:"center"},centerOnly:{background:"transparent",pointerEvents:"none"},content:{display:"block",pointerEvents:"all"}};function vn(e){var n=e.onDismiss,t=e.centerOnly,o=void 0!==t&&t,i=e.children,a=(0,r.useRef)(),c=(0,r.useCallback)((function(e){n&&a.current&&e.target.contains(a.current)&&n()}),[a,n]),l=o?bn(bn({},mn.wrapper),mn.centerOnly):mn.wrapper;return dn.createPortal((0,z.jsx)("div",{onClick:c,style:l,children:(0,z.jsx)("div",{ref:a,style:mn.content,children:i})}),document.getElementById("modal-root"))}vn.propTypes={onDismiss:G().func};var gn=vn,xn=t(34288),jn={};jn.styleTagTransform=A(),jn.setAttributes=d(),jn.insert=f().bind(null,"head"),jn.domAPI=s(),jn.insertStyleElement=h(),c()(xn.Z,jn);var Cn=xn.Z&&xn.Z.locals?xn.Z.locals:void 0;function wn(e){var n=e.property,t=e.schema;return(0,z.jsxs)(z.Fragment,{children:[(0,z.jsx)("span",{className:Cn.propertyName,title:n,children:n}),t.deprecatedBy&&(0,z.jsx)("sub",{className:Cn.propertyDeprecation,children:"(deprecated)"})]})}function En(e){return function(e){if(Array.isArray(e))return On(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,n){if(e){if("string"==typeof e)return On(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?On(e,n):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function On(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var kn=65,Sn=5;function Bn(e,n){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return{x:e.x*(kn+Sn),y:e.y*(kn+Sn),u:n.u*kn+Sn*(n.u-1),h:n.h*kn+Sn*(n.h-1),rx:(e.x-(t.x||e.x))*-(kn+Sn),ry:(e.y-(t.y||e.y))*-(kn+Sn),a:t.a||0}}function Pn(e,n,t){var r=Bn(e,n,t),o=r.x,i=r.y,a=r.u,c=r.h,l=r.a,s=r.rx,u=r.ry;return[{x:0,y:0},{x:a,y:0},{x:a,y:c},{x:0,y:c}].map((function(e){var n=e.x-s,t=e.y-u,r=Math.PI*l/180;return{x:s+n*Math.cos(r)-t*Math.sin(r),y:u+t*Math.cos(r)+n*Math.sin(r)}})).map((function(e){return{x:e.x+o,y:e.y+i}}))}function In(e){return In="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},In(e)}function Tn(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Dn(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==In(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==In(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===In(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Ln(e){return e.map((function(e){return function(e,n,t){var r=Pn(e,n,t),o=we()(r,"x"),i=we()(r,"y");return{min:{x:Math.min.apply(Math,En(o)),y:Math.min.apply(Math,En(i))},max:{x:Math.max.apply(Math,En(o)),y:Math.max.apply(Math,En(i))}}}({x:e.x,y:e.y},{u:e.u||e.w||1,h:e.h||1},{x:e.rx,y:e.ry,a:e.r})})).reduce((function(e,n){var t=e.x,r=e.y,o=n.max;return{x:Math.max(t,o.x),y:Math.max(r,o.y)}}),{x:0,y:0})}function Rn(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},t=n.scale,r=void 0===t?1:t,o=n.overrides,i=void 0===o?{}:o,a=Array.isArray(e)?Ln(e):e;return function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Tn(Object(t),!0).forEach((function(n){Dn(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Tn(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}({width:"".concat(a.x*r,"px"),height:"".concat(a.y*r,"px"),margin:"0 auto",padding:"0 40px 40px"},i)}var Nn=t(78718),_n=t.n(Nn),Mn=t(87995),Yn={};Yn.styleTagTransform=A(),Yn.setAttributes=d(),Yn.insert=f().bind(null,"head"),Yn.domAPI=s(),Yn.insertStyleElement=h(),c()(Mn.Z,Yn);var Kn=Mn.Z&&Mn.Z.locals?Mn.Z.locals:void 0;function Zn(e){return Zn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Zn(e)}function qn(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Un(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?qn(Object(t),!0).forEach((function(n){Gn(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):qn(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Gn(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Zn(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Zn(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Zn(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}var zn={x:G().number.isRequired,y:G().number.isRequired},Wn={a:G().number,rx:G().number,ry:G().number},Fn={u:G().number,h:G().number},Xn=G().shape(Un(Un(Un({},zn),Wn),Fn)),Vn=G().arrayOf(Xn);function Qn(e){return Qn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Qn(e)}var Hn=["keyLayout","children"];function Jn(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function $n(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Jn(Object(t),!0).forEach((function(n){et(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Jn(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function et(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Qn(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Qn(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Qn(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}var nt=function(e){return _n()(e,["x","y"])},tt=function(e){return{x:e.rx,y:e.ry,a:e.r}},rt=function(e){var n=e.w,t=void 0===n?1:n,r=e.u,o=void 0===r?t:r,i=e.h;return{u:o,h:void 0===i?1:i}};function ot(e){var n=e.keyLayout,t=e.children,r=function(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}(e,Hn),o=nt(n),i=tt(n),a=rt(n),c=function(e,n,t){var r=Bn(e,n,t),o=r.x,i=r.y,a=r.u,c=r.h,l=r.a,s=r.rx,u=r.ry;return{top:"".concat(i,"px"),left:"".concat(o,"px"),width:"".concat(a,"px"),height:"".concat(c,"px"),transformOrigin:"".concat(s,"px ").concat(u,"px"),transform:"rotate(".concat(l||0,"deg)")}}(o,a,i);return(0,z.jsx)("div",$n($n({className:Kn.placer,style:c,"data-u":a.u,"data-h":a.h},r),{},{children:t}))}ot.propTypes={scale:G().number,keyLayout:Xn.isRequired},ot.defaultProps={scale:1};var it=ot;function at(e){var n=e.layout,t=e.renderKey,r=e.scale;return(0,z.jsx)("div",{style:{position:"relative",transform:"scale(".concat(r,")"),transformOrigin:0},children:n.map((function(e,n){return(0,z.jsx)(it,{keyLayout:e,children:t({index:n,keyLayout:e})},n)}))})}at.propTypes={layout:Vn.isRequired,renderKey:G().func.isRequired,scale:G().number},at.defaultProps={scale:1};var ct=at,lt=t(39693),st=t.n(lt),ut=t(2),ft={};ft.styleTagTransform=A(),ft.setAttributes=d(),ft.insert=f().bind(null,"head"),ft.domAPI=s(),ft.insertStyleElement=h(),c()(ut.Z,ft);var pt=ut.Z&&ut.Z.locals?ut.Z.locals:void 0;function dt(e){return dt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},dt(e)}var yt=["children","selectable","themeClass","className"];function ht(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function bt(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?ht(Object(t),!0).forEach((function(n){At(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ht(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function At(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==dt(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==dt(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===dt(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}var mt=function(e){var n=e.children,t=e.selectable,r=void 0===t||t,o=e.themeClass,i=void 0===o?void 0:o,a=e.className,c=void 0===a?"":a,l=function(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}(e,yt),s=st()([pt.key,r&&pt.selectable,null!=i?i:pt.keyDefaultTheme,c]).join(" ");return(0,z.jsx)("div",bt(bt({className:s},l),{},{children:n}))},vt=t(74691),gt=t.n(vt),xt=t(56520),jt={};jt.styleTagTransform=A(),jt.setAttributes=d(),jt.insert=f().bind(null,"head"),jt.domAPI=s(),jt.insertStyleElement=h(),c()(xt.Z,jt);var Ct=xt.Z&&xt.Z.locals?xt.Z.locals:void 0;function wt(e){return wt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},wt(e)}function Et(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Ot(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Et(Object(t),!0).forEach((function(n){kt(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Et(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function kt(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==wt(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==wt(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===wt(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function St(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(e,n)||function(e,n){if(e){if("string"==typeof e)return Bt(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Bt(e,n):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Bt(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function Pt(e){var n=e.onMouseDown,t=e.selecting,r=e.negate,o=e.rect,i=e.size,a=e.children;return(0,z.jsxs)("div",{onMouseDown:n,className:st()([Ct.container,t&&Ct.selecting]).join(" "),children:[a,t&&(0,z.jsx)("div",{className:st()([Ct.overlay,r&&Ct.negate]).join(" "),style:{position:"absolute",top:o[0][1]+"px",left:o[0][0]+"px",width:i[0]+"px",height:i[1]+"px"}})]})}function It(e){var n=e.polygons,t=e.onSelect,o=St((0,r.useState)({}),2),i=o[0],a=o[1],c=(0,r.useCallback)((function(e){var n=function(e){for(;(e=e.parentNode)&&("relative"!==e.style.position||!e.getBoundingClientRect().height););return e}(e.target).getBoundingClientRect(),t=e.clientX,r=e.clientY;e.preventDefault(),a({start:[t,r],intersecting:[],offset:[n.left,n.top],offsetRect:n})}),[a]),l=(0,r.useCallback)((function(e){i.selecting&&!e.repeat&&e.shiftKey&&a((function(e){return Ot(Ot({},e),{},{negate:!0})}))}),[i.selecting,a]),s=(0,r.useCallback)((function(e){!i.negate||e.repeat||e.shiftKey||a((function(e){return Ot(Ot({},e),{},{negate:!1})}))}),[i.negate,a]),u=(0,r.useCallback)((function(e){var t=i.start,r=i.offset,o=i.offsetRect;if(t){var c=e.shiftKey,l=e.altKey,s=e.clientX,u=e.clientY,f=St(t,2),p=f[0],d=f[1],y=gt()(s,o.left,o.right),h=gt()(u,o.top,o.bottom),b=[[Math.min(y,p)-r[0],Math.min(h,d)-r[1]],[Math.max(y,p)-r[0],Math.max(h,d)-r[1]]],A=[Math.abs(y-p),Math.abs(h-d)];a((function(e){return Ot(Ot({},e),{},{negate:c||l,selecting:A[0]>3||A[1]>3,intersecting:Tt(b,n),rect:b,size:A})}))}}),[i,n,a]),f=(0,r.useCallback)((function(e){i.start&&(i.selecting&&t({negate:i.negate,intersecting:i.intersecting}),a({start:null,selecting:!1}))}),[t,i,a]);return(0,r.useEffect)((function(){return window.addEventListener("mouseup",f),window.addEventListener("mousemove",u),window.addEventListener("keydown",l),window.addEventListener("keyup",s),function(){window.removeEventListener("mouseup",f),window.removeEventListener("mousemove",u),window.removeEventListener("keydown",l),window.removeEventListener("keyup",s)}}),[f,u,l,s]),[Ot(Ot({},i),{},{onMouseDown:c,onMouseMove:u}),Pt]}function Tt(e,n){return n.reduce((function(n,t,r){return t.some((function(n){var t=n.x,r=n.y;return e[0][0]<t&&t<e[1][0]&&e[0][1]<r&&r<e[1][1]}))&&n.push(r),n}),[])}var Dt=t(49040),Lt={};Lt.styleTagTransform=A(),Lt.setAttributes=d(),Lt.insert=f().bind(null,"head"),Lt.domAPI=s(),Lt.insertStyleElement=h(),c()(Dt.Z,Lt);var Rt=Dt.Z&&Dt.Z.locals?Dt.Z.locals:void 0,Nt=t(528),_t={};_t.styleTagTransform=A(),_t.setAttributes=d(),_t.insert=f().bind(null,"head"),_t.domAPI=s(),_t.insertStyleElement=h(),c()(Nt.Z,_t);var Mt=Nt.Z&&Nt.Z.locals?Nt.Z.locals:void 0;function Yt(e){var n=e.children,t=e.className,r=void 0===t?"":t,o=[Mt.tip,r].join(" ");return(0,z.jsxs)("div",{className:o,children:[(0,z.jsx)(J,{name:"hand-point-up"})," ",n]})}var Kt=(0,r.createContext)({layout:[],bindingCount:0,wrapperDimensions:{},wrapperStyle:{}});function Zt(e){var n=e.layout,t=e.children,o=(0,r.useMemo)((function(){return n.length}),[n.length]),i=(0,r.useMemo)((function(){return Ln(n)}),[n]),a=(0,r.useMemo)((function(){return Rn(i)}),[i]),c={layout:n,bindingCount:o,wrapperDimensions:i,wrapperStyle:a};return(0,z.jsx)(Kt.Provider,{value:c,children:t})}function qt(e){return qt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},qt(e)}function Ut(e){return function(e){if(Array.isArray(e))return Qt(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||Vt(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Gt(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function zt(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Gt(Object(t),!0).forEach((function(n){Wt(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Gt(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Wt(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==qt(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==qt(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===qt(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Ft(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(e,n)||Vt(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Xt(e,n){var t="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!t){if(Array.isArray(e)||(t=Vt(e))||n&&e&&"number"==typeof e.length){t&&(e=t);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,c=!1;return{s:function(){t=t.call(e)},n:function(){var e=t.next();return a=e.done,e},e:function(e){c=!0,i=e},f:function(){try{a||null==t.return||t.return()}finally{if(c)throw i}}}}function Vt(e,n){if(e){if("string"==typeof e)return Qt(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Qt(e,n):void 0}}function Qt(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var Ht=.2,Jt=function(e){var n,t=function(e,n){return e.map((function(e){return Pn({x:e.x,y:e.y},{u:e.u||e.w||1,h:e.h||1},{x:e.rx,y:e.ry,a:e.r})}))}(e),r=Xt(t);try{for(r.s();!(n=r.n()).done;){var o,i=Xt(n.value);try{for(i.s();!(o=i.n()).done;){var a=o.value;a.x*=Ht,a.y*=Ht}}catch(e){i.e(e)}finally{i.f()}}}catch(e){r.e(e)}finally{r.f()}return t};function $t(e){var n,t,o,i,a,c,l,s=e.value,u=e.prompt,f=e.onUpdate,p=(0,r.useContext)(Kt),d=p.layout,y=p.wrapperDimensions,h=(0,r.useMemo)((function(){return Jt(d)}),[d]),b=(0,r.useMemo)((function(){return Rn(y,{scale:Ht,overrides:{position:"relative",padding:0,margin:0}})}),[y]),A=(n=Ft((0,r.useReducer)((function(e,n){switch(n){case"INCREMENT_MANUAL_SELECTION":return zt(zt({},e),{},{manualSelectionCount:e.manualSelectionCount+1});case"INCREMENT_MANUAL_DESELECTION":return zt(zt({},e),{},{manualDeSelectionCount:e.manualDeSelectionCount+1});case"TRACK_DRAG_SELECTION":return zt(zt({},e),{},{usedDragSelection:!0});case"TRACK_DRAG_DESELECTION":return zt(zt({},e),{},{usedDragDeSelection:!0});default:throw new Error("Unrecognized action type in ".concat(n))}}),{manualSelectionCount:0,manualDeSelectionCount:0,usedDragSelection:!1,usedDragDeSelection:!1}),2),t=n[0],o=n[1],i=(0,r.useCallback)((function(){return o("INCREMENT_MANUAL_SELECTION")}),[o]),a=(0,r.useCallback)((function(){return o("INCREMENT_MANUAL_DESELECTION")}),[o]),c=(0,r.useCallback)((function(){return o("TRACK_DRAG_SELECTION")}),[o]),l=(0,r.useCallback)((function(){return o("TRACK_DRAG_DESELECTION")}),[o]),{showSelectTip:!t.usedDragSelection&&t.manualSelectionCount>3,showDeSelectTip:!t.usedDragDeSelection&&t.manualDeSelectionCount>3,actions:{manualSelection:i,manualDeSelection:a,dragSelection:c,dragDeSelection:l}}),m=A.showSelectTip,v=A.showDeSelectTip,g=A.actions,x=(0,r.useCallback)((function(e){var n=e.negate,t=e.intersecting;n?g.dragDeSelection():g.dragSelection(),f(n?s.filter((function(e){return!t.includes(e)})):[].concat(Ut(s),Ut(t)))}),[s,f,g]),j=(0,r.useCallback)((function(e){var n=s.includes(e);n?g.manualDeSelection():g.manualSelection(),f(n?s.filter((function(n){return n!==e})):[].concat(Ut(s),[e]))}),[s,f,g]),C=Ft(It({onSelect:x,polygons:h}),2),w=C[0],E=C[1],O=w.selecting?w.intersecting:[],k=s,S=w.negate?[]:O.filter((function(e){return!k.includes(e)})),B=w.negate?O.filter((function(e){return k.includes(e)})):[];return(0,z.jsx)("div",{style:b,children:(0,z.jsxs)(E,zt(zt({},w),{},{children:[(0,z.jsx)(ct,{layout:d,bindings:[],scale:Ht,renderKey:function(e){var n=e.index;return(0,z.jsx)(mt,{onClick:function(){return j(n)},themeClass:(0,ye.compact)([Rt.key,k.includes(n)&&Rt.highlight,S.includes(n)&&Rt.previewAdd,B.includes(n)&&Rt.previewRemove]).join(" ")})}}),u&&(0,z.jsx)("prompt",{}),m&&(0,z.jsx)(Yt,{className:Rt.tip,children:"Drag to select a region"}),v&&(0,z.jsx)(Yt,{className:Rt.tip,children:"Shift+Drag to de-select a region"})]}))})}$t.propTypes={onUpdate:G().func.isRequired,value:G().arrayOf(G().number).isRequired,prompt:G().node};var er=$t,nr=t(27470),tr={};tr.styleTagTransform=A(),tr.setAttributes=d(),tr.insert=f().bind(null,"head"),tr.domAPI=s(),tr.insertStyleElement=h(),c()(nr.Z,tr);var rr=nr.Z&&nr.Z.locals?nr.Z.locals:void 0;function or(e){return or="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},or(e)}function ir(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function ar(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?ir(Object(t),!0).forEach((function(n){cr(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ir(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function cr(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==or(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==or(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===or(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function lr(e){var n=e.prop,t=e.schema,r=e.onUpdate;return(0,z.jsxs)(z.Fragment,{children:[(0,z.jsx)(J,{name:"code",title:"Raw property value"})," ",(0,z.jsx)("input",{required:null==t?void 0:t.required,value:null==n?void 0:n.raw,onChange:function(e){return r(ar(ar({},n),{},{raw:e.target.value,useRaw:!0}))}})]})}function sr(e){var n=e.schema;return(0,z.jsx)("span",{className:[rr.propertyValue,rr.readonly].join(" "),children:n.const})}function ur(e){var n,t=e.prop,r=e.schema,o=e.onUpdate;return(0,z.jsx)("input",{type:"text",className:rr.propertyValue,value:null!==(n=null==t?void 0:t.parsed)&&void 0!==n?n:"",placeholder:r.default&&"Default: ".concat(r.default),onChange:function(e){o(ar(ar({},t),{},{parsed:e.target.value,useRaw:!1}))}})}function fr(e){var n,t=e.prop,r=e.schema,o=e.onUpdate;return(0,z.jsx)("input",{type:"number",className:rr.propertyValue,value:null!==(n=null==t?void 0:t.parsed)&&void 0!==n?n:"",placeholder:r.default&&"Default: ".concat(r.default),onChange:function(e){o(ar(ar({},t),{},{parsed:Number(e.target.value),useRaw:!1}))}})}function pr(e){var n=e.prop,t=e.onUpdate;return(0,z.jsx)("input",{type:"checkbox",className:rr.propertyValue,checked:(null==n?void 0:n.parsed)||!1,onChange:function(e){t({parsed:!!e.target.checked,useRaw:!1})}})}var dr=t(87360),yr=t.n(dr),hr=function(e,n){var t=(n+(arguments.length>2&&void 0!==arguments[2]?arguments[2]:1))%e.length;return t<0?e.length+t:t},br=t(47881),Ar={};Ar.styleTagTransform=A(),Ar.setAttributes=d(),Ar.insert=f().bind(null,"head"),Ar.domAPI=s(),Ar.insertStyleElement=h(),c()(br.Z,Ar);var mr=br.Z&&br.Z.locals?br.Z.locals:void 0;function vr(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function gr(e){var n,t,o=e.results,i=e.onSelect,a=e.renderResult,c=(n=(0,r.useState)(0),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||function(e,n){if(e){if("string"==typeof e)return vr(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?vr(e,n):void 0}}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),l=c[0],s=c[1],u=(0,r.useRef)(null),f=(0,r.useCallback)((function(e,n){var t,r,i,a,c,f;if(0!==o.length)if(void 0!==n){var p=null!==l?hr(o,l,n):e,d='li[data-result-index="'.concat(p,'"]');r=null===(t=u.current)||void 0===t?void 0:t.querySelector(d),i=r.offsetParent.scrollTop,a=r.offsetParent.offsetHeight,c=r.offsetTop,f=c+r.scrollHeight,(c<i||f>i+a)&&r.scrollIntoView(!1),s(p)}else s(e);else s(null)}),[o,l,s]),p=(0,r.useCallback)((function(){f(0,1)}),[f]),d=(0,r.useCallback)((function(){f(o.length-1,-1)}),[f,o]),y=(0,r.useCallback)((function(){i(o[l])}),[o,l,i]),h=(0,r.useCallback)((function(e){var n={ArrowDown:p,ArrowUp:d,Enter:y}[e.key];n&&(e.preventDefault(),e.stopPropagation(),n())}),[p,d,y]);return(0,r.useEffect)((function(){return document.body.addEventListener("keydown",h,!0),function(){return document.body.removeEventListener("keydown",h,!0)}}),[h]),(0,z.jsx)("ul",{className:mr.results,ref:u,children:o.map((function(e,n){return(0,z.jsx)("li",{className:l===n?mr.highlighted:"",title:e.description,"data-result-index":n,onClick:function(){return i(e)},onMouseOver:function(){return f(n)},children:a(e,n)},n)}))})}gr.propTypes={results:G().array.isRequired,onSelect:G().func.isRequired,renderResult:G().func.isRequired};var xr=gr;function jr(e){return jr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},jr(e)}function Cr(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function wr(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Cr(Object(t),!0).forEach((function(n){Er(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Cr(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Er(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==jr(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==jr(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===jr(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Or(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function kr(e){e&&(e.focus(),e.select())}var Sr=function(e){var n,t,o=e.choices,i=e.searchKey,a=e.renderResults,c=e.initialQuery,l=!o.length||o.length>10,s=(n=(0,r.useState)(c),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||function(e,n){if(e){if("string"==typeof e)return Or(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Or(e,n):void 0}}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),u=s[0],f=s[1],p=(0,r.useMemo)((function(){if(!u||!l)return o;var e={key:i,limit:30};return yr().go(u,o,e).map((function(e){return wr(wr({},e.obj),{},{search:e})}))}),[l,u,o,i]),d=(0,r.useCallback)((function(e){f(e.target.value)}),[f]);return(0,z.jsxs)(z.Fragment,{children:[l&&(0,z.jsxs)("div",{className:mr.searchWrapper,children:[(0,z.jsx)("input",{ref:kr,type:"text",value:u,onChange:d}),(0,z.jsx)(J,{className:mr.searchIcon,name:"search"}),(0,z.jsx)(J,{className:mr.clearSearchIcon,name:"times",onClick:function(){return f("")}})]}),a(p)]})};Sr.propTypes={choices:G().array.isRequired,searchKey:G().string.isRequired,initialQuery:G().string.isRequired,renderResults:G().func.isRequired},Sr.defaultProps={initialQuery:""};var Br=Sr;function Pr(e){var n=e.choices,t=e.prompt,o=e.onSelect,i=(0,r.useMemo)((function(){return n.map((function(e){return{value:e}}))}),[n]),a=(0,r.useCallback)((function(e){var n=e.search?(0,z.jsx)("span",{dangerouslySetInnerHTML:{__html:yr().highlight(e.search)}}):(0,z.jsx)("span",{children:e.value});return(0,z.jsxs)(z.Fragment,{children:[n,e.description&&(0,z.jsx)("p",{className:mr.description,children:e.description})]})}),[]);return(0,z.jsxs)("div",{className:mr.dialog,children:[(0,z.jsx)("p",{children:t||"Select"}),(0,z.jsx)(Br,{choices:i,initialQuery:"",searchKey:"value",renderResults:function(e){return e&&(0,z.jsx)(xr,{results:e,onSelect:function(e){return o(e.value)},renderResult:a})}})]})}Pr.propTypes={choices:G().arrayOf(G().stirng).isRequired,prompt:G().string,onSelect:G().func.isRequired};var Ir=Pr;function Tr(e){return Tr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Tr(e)}function Dr(e){return function(e){if(Array.isArray(e))return Rr(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||Lr(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Lr(e,n){if(e){if("string"==typeof e)return Rr(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Rr(e,n):void 0}}function Rr(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function Nr(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function _r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Nr(Object(t),!0).forEach((function(n){Mr(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Nr(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Mr(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Tr(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Tr(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Tr(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Yr(e){var n=e.prop,t=void 0===n?{}:n,o=e.schema,i=e.onUpdate,a=o.enum,c=t.parsed,l=(0,r.useCallback)((function(e){i(_r(_r({},t),{},{parsed:a[e.target.value],useRaw:!1}))}),[t,a,i]);return(0,z.jsx)("select",{className:rr.propertyValue,onChange:l,value:a.indexOf(c),children:a.map((function(e,n){return(0,z.jsx)("option",{value:n,children:e},n)}))})}function Kr(e){var n=e.prop,t=void 0===n?{}:n,o=e.schema,i=e.onUpdate,a=function(e){var n=(0,r.useContext)(_e);return(0,r.useMemo)((function(){if(!e.choices)return[];if(Array.isArray(e.choices))return e.choices;if(!e.choices.$source)throw new Error("Expected schema.choices.$source");var t=n[e.choices.$source];return e.choices.$key?we()(t,e.choices.$key):t}),[n,e.choices])}(o),c=t.parsed,l=void 0===c?[]:c,s=(0,r.useCallback)((function(e){i(_r(_r({},t),{},{useRaw:!1,parsed:e}))}),[t,i]),u=a.length>20?qr:Zr;return(0,z.jsx)(u,{selected:l,choices:a,onUpdate:s})}function Zr(e){var n=e.selected,t=e.choices,o=e.onUpdate,i=(0,r.useCallback)((function(e){o(n.includes(e)?n.filter((function(n){return n!==e})):[].concat(Dr(n),[e]))}),[n,o]);return(0,z.jsx)("ol",{className:rr.propertyMultiSelect,children:t.map((function(e,t){return(0,z.jsx)("li",{children:(0,z.jsxs)("label",{children:[(0,z.jsx)("input",{type:"checkbox",checked:n.includes(e),onChange:function(n){return i(e)}}),e]})},t)}))})}function qr(e){var n,t,o=e.selected,i=e.choices,a=e.onUpdate,c=(n=(0,r.useState)(!1),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||Lr(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),l=c[0],s=c[1],u=(0,r.useCallback)((function(e){a([].concat(Dr(o),[e])),s(!1)}),[s,o,a]),f=(0,r.useCallback)((function(e){a(o.filter((function(n){return n!==e})))}),[o,a]);return(0,z.jsxs)(z.Fragment,{children:[(0,z.jsx)("ul",{className:rr.propertyMultiSelectChips,children:o.map((function(e,n){return(0,z.jsx)("li",{children:(0,z.jsxs)("span",{className:rr.behaviorBind,children:[e," ",(0,z.jsx)(J,{name:"times",className:rr.phandleRemove,onClick:function(){return f(e)}})]})},n)}))}),(0,z.jsxs)($e,{secondary:!0,onClick:function(){return s(!0)},children:[(0,z.jsx)(J,{name:"plus"})," Add"]}),l&&(0,z.jsx)(gn,{onDismiss:function(){return s(!1)},children:(0,z.jsx)(Ir,{choices:i,onSelect:u})})]})}function Ur(e){var n=(0,r.useContext)(j).getSearchTargets,t=e.param,o=e.prompt,i=e.onSelect,a=(0,r.useMemo)((function(){return n(t)}),[n,t]);return(0,z.jsxs)("div",{className:mr.dialog,children:[(0,z.jsx)("p",{children:o}),(0,z.jsx)(xr,{results:a,onSelect:i,renderResult:function(e){return e.code}})]})}Ur.propTypes={value:G().any.isRequired,param:G().object.isRequired,prompt:G().string.isRequired,onSelect:G().func.isRequired},Ur.defaultProps={value:""};var Gr=Ur,zr=G().oneOfType([G().oneOf(["code","layer","mod","command"]),G().shape({type:G().oneOf(["placeholder"])}),G().shape({enum:G().array,raw:G().bool,name:G().string.isRequired,type:G().string.isRequired})]),Wr=G().arrayOf(zr),Fr=G().oneOfType([G().string,G().number]),Xr=G().shape({params:Wr,code:Fr.isRequired,description:G().string,symbol:G().string,faIcon:G().string}),Vr={value:Fr,source:Xr};Vr.params=G().arrayOf(G().shape(Vr));var Qr=G().shape(Vr),Hr=Qr;function Jr(e){var n=e.prompt,t=e.searchKey,o=e.node,i=e.param,a=e.behaviour,c=e.context,l=e.onSelect,s=(0,r.useContext)(j).getSearchTargets,u=(0,r.useCallback)((function(e){var n=e.search?(0,z.jsx)("span",{dangerouslySetInnerHTML:{__html:yr().highlight(e.search)}}):(0,z.jsx)("span",{children:e.code});return(0,z.jsxs)(z.Fragment,{children:[n,e.description&&(0,z.jsx)("p",{className:mr.description,children:e.description})]})}),[]),f=(0,r.useMemo)((function(){return s(i,a.code,c)}),[s,i,a,c]);return(0,z.jsxs)("div",{className:mr.dialog,children:[(0,z.jsx)("p",{children:n}),(0,z.jsx)(Br,{choices:f,initialQuery:o.value||"",searchKey:t,renderResults:function(e){return e&&(0,z.jsx)(xr,{results:e,onSelect:l,renderResult:u})}})]})}G().arrayOf(Qr),Jr.propTypes={node:Hr.isRequired,param:G().oneOfType([G().string,G().shape({enum:G().array,raw:G().bool,type:G().string})]).isRequired,prompt:G().string.isRequired,searchKey:G().string.isRequired,behaviour:G().object.isRequired,context:G().string.isRequired,onSelect:G().func.isRequired};var $r=Jr,eo=t(93565);function no(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function to(e){var n,t,o=e.node,i=e.onSelect,a=(n=(0,r.useState)({h:Number(o.params[0].value),s:Number(o.params[1].value)/100,l:Number(o.params[2].value)/100}),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||function(e,n){if(e){if("string"==typeof e)return no(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?no(e,n):void 0}}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),c=a[0],l=a[1],s=(0,r.useCallback)((function(e){var n=e.hsl;l(n)}),[l]),u=(0,r.useCallback)((function(){i([{value:Math.round(c.h)},{value:Math.round(100*c.s)},{value:Math.round(100*c.l)}])}),[c,i]);return(0,z.jsxs)("div",{children:[(0,z.jsx)("p",{children:"Select colour"}),(0,z.jsx)(eo.AI,{color:c,disableAlpha:!0,onChangeComplete:s}),(0,z.jsx)("p",{style:{textAlign:"center"},children:(0,z.jsx)($e,{onClick:u,children:"Confirm"})})]})}to.propTypes={value:G().any.isRequired,prompt:G().string.isRequired,param:G().oneOfType([G().shape({enum:G().array,raw:G().bool,type:G().string})]).isRequired,onSelect:G().func.isRequired},to.defaultProps={value:""};var ro=to;function oo(e,n){if(e){if("string"==typeof e)return ao(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?ao(e,n):void 0}}function io(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}function ao(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function co(e){return e.params.length>0?[e].concat(function(e){if(Array.isArray(e))return ao(e)}(n=co(e.params[0]))||io(n)||oo(n)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()):[e];var n}function lo(e){var n,t=function(e){if(Array.isArray(e))return e}(n=e)||io(n)||oo(n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),r=t[0],o=t.slice(1);return{value:r,params:0===o.length?[]:[lo(o)]}}var so=t(14409),uo={};uo.styleTagTransform=A(),uo.setAttributes=d(),uo.insert=f().bind(null,"head"),uo.domAPI=s(),uo.insertStyleElement=h(),c()(so.Z,uo);var fo=so.Z&&so.Z.locals?so.Z.locals:void 0;function po(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var yo=["LSHFT","LALT","LCTRL","LGUI"],ho=["RSHFT","RALT","RCTRL","RGUI"];function bo(e){var n=e.selected,t=e.row,r=e.onSelect;return(0,z.jsx)("ul",{className:fo.modifiers,children:t.map((function(e,t){return(0,z.jsx)("li",{className:n.includes(e)?fo.selected:"",onClick:function(){return r(e)},children:e},t)}))})}function Ao(e){var n=e.selected,t=e.onChange;function r(e){var r;t(n.includes(e)?n.filter((function(n){return n!==e})):[].concat(function(e){if(Array.isArray(e))return po(e)}(r=n)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(r)||function(e,n){if(e){if("string"==typeof e)return po(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?po(e,n):void 0}}(r)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),[e]))}return(0,z.jsxs)(z.Fragment,{children:[(0,z.jsx)(bo,{row:yo,selected:n,onSelect:r}),(0,z.jsx)(bo,{row:ho,selected:n,onSelect:r})]})}Ao.propTypes={selected:G().arrayOf(G().string)};var mo=Ao;function vo(){return(0,z.jsx)("span",{children:"⦸"})}function go(e){return e&&"(".concat(e.code,") ").concat(e.description)}function xo(e){var n,t=e&&((null==e?void 0:e.symbol)||(null==e||null===(n=e.code)||void 0===n?void 0:n.toString()));return(null==e?void 0:e.faIcon)&&(0,z.jsx)(J,{name:e.faIcon})||t||(0,z.jsx)(vo,{})}function jo(e){var n=e.node,t=e.onSelect,o=n.value,i=n.source,a=n._isPlaceholder,c=go(i),l=(0,r.useCallback)((function(e){e.stopPropagation(),t({node:n})}),[n,t]);return(0,z.jsx)("span",{className:st()([pt.code,(void 0===o||a)&&pt.missingValue]).join(" "),title:c,onClick:l,children:xo(i)})}jo.propTypes={node:Hr.isRequired,onSelect:G().func.isRequired};var Co=jo;function wo(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var Eo=function(e){var n,t=e.node,o=e.onSelect,i=(0,r.useCallback)((function(e){e.stopPropagation(),o({node:t,type:"tree"})}),[t,o]),a=(0,r.useMemo)((function(){return we()(co(t),"source")}),[t]),c=(0,r.useMemo)((function(){return a.map(xo).map((function(e,n){return(0,z.jsx)(r.Fragment,{children:e},n)})).reduce((function(e,n){return 0===e.length?[n]:[].concat(function(e){if(Array.isArray(e))return wo(e)}(t=e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(t)||function(e,n){if(e){if("string"==typeof e)return wo(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?wo(e,n):void 0}}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),[" ",n]);var t}),[])}),[a]),l=(0,r.useMemo)((function(){return a.map(go).join(" + ")}),[a]),s=void 0===(null===(n=t.source)||void 0===n?void 0:n.code)||void 0===t.value||t._isPlaceholder;return(0,z.jsx)("span",{className:st()([pt.code,s&&pt.missingValue]).join(" "),title:l,onClick:i,children:c})};function Oo(e,n){var t=me()(e,"[0]",{}),r=je()(n.commands,"code");return[].concat(n.params||[],"command"===me()(n,"params[0]")?me()(r[t.value],"additionalParams",[]):[])}function ko(e){return ko="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},ko(e)}function So(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Bo(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?So(Object(t),!0).forEach((function(n){Po(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):So(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Po(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==ko(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==ko(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===ko(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Io(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(e,n)||function(e,n){if(e){if("string"==typeof e)return To(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?To(e,n):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function To(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function Do(e){var n=[];return function e(t){var r=t.params||[];n.push(t),r.forEach(e)}(e),n}function Lo(e,n){var t=Io(e.params,1)[0],r=me()(t,"source.symbol",me()(t,"value","")),o=!me()(t,"source.faIcon")&&r.length>4,i=n.length>1,a=me()(t,"params",[]).length>0;return o||i||a}function Ro(e){var n={layer:"Select layer",mod:"Select modifier",behaviour:"Select behaviour",command:"Select command",keycode:"Select key code"};return e.name?"Select ".concat(e.name):n[e]||n.keycode}function No(e,n,t){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"none",o=arguments.length>4?arguments[4]:void 0,i=e,a=me()(t.behavioursByContext[r],i,{}),c=Oo(n,a),l=je()(a.commands,"code");function s(e,n){if(!e)return{value:void 0,slot:n,params:[]};var r=e.value,i=e.params,a=e._isPlaceholder,c=function(e,n){var r;return"command"===n?l[e]:n.raw||n.enum||"placeholder"===n.type?{code:e}:null==t||null===(r=t[n])||void 0===r?void 0:r[e]}(r,n);return{value:r,_isPlaceholder:a,slot:n,source:Bo(Bo({},c),{},{symbol:me()(o,[null==c?void 0:c.name,"symbol"],null==c?void 0:c.symbol),faIcon:me()(o,[null==c?void 0:c.name,"faIcon"],null==c?void 0:c.faIcon)}),params:me()(c,"params",[]).map((function(e,n){return s(i[n],e)}))}}return{value:e,slot:"behaviour",source:a,params:c.map((function(e,t){return s(n[t],e)}))}}function _o(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(e,n)||Mo(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Mo(e,n){if(e){if("string"==typeof e)return Yo(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Yo(e,n):void 0}}function Yo(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function Ko(e){var n=e.search?(0,z.jsx)("span",{dangerouslySetInnerHTML:{__html:yr().highlight(e.search)}}):(0,z.jsx)("span",{children:e.code});return(0,z.jsxs)(z.Fragment,{children:[n,(0,z.jsx)("p",{className:mr.description,children:e.description})]})}function Zo(e){var n=e.node,t=e.onSelect,o=e.behaviour,i=(0,r.useContext)(j),a=i.getSearchTargets,c=i.sources,l=i.mergedGlyphs,s=(0,r.useMemo)((function(){return we()(co(n),"source")}),[n]),u=1===s.length?[]:s.slice(0,-1),f=_o((0,r.useState)(we()(u,"name")),2),p=f[0],d=f[1],y=_o((0,r.useState)(s.at(-1)),2),h=y[0],b=y[1],A=(0,r.useMemo)((function(){return a("code",o.code).filter((function(e){return 0===e.params.length}))}),[a,o]),m=No("&kp",[{value:null==h?void 0:h.code,params:null==h?void 0:h.params}],c,void 0,l);return(0,z.jsxs)("div",{className:mr.dialog,children:[(0,z.jsxs)("div",{style:{display:"flex",gap:"10px"},children:[(0,z.jsxs)("div",{children:[(0,z.jsx)("p",{children:"Keycode"}),(0,z.jsx)(mt,{className:fo.previewKeycode,selectable:!1,children:(0,z.jsx)(Eo,{node:m.params[0],onSelect:function(){}})})]}),(0,z.jsxs)("div",{children:[(0,z.jsx)("p",{children:"Modifiers"}),(0,z.jsx)(mo,{selected:p,onChange:d})]})]}),(0,z.jsx)("p",{children:"Available Keycodes"}),(0,z.jsx)(Br,{choices:A,initialQuery:null==h?void 0:h.code,searchKey:"code",renderResults:function(e){return e&&(0,z.jsx)(xr,{results:e,onSelect:b,renderResult:Ko})}}),(0,z.jsxs)("p",{style:{textAlign:"center"},children:[(0,z.jsx)($e,{onClick:function(){var e,n={LSHFT:"LS",LCTRL:"LC",LALT:"LA",LGUI:"LG",RSHFT:"RS",RCTRL:"RC",RALT:"RA",RGUI:"RG"},r=p.map((function(e){return n[e]})),o=lo(st()([].concat(function(e){if(Array.isArray(e))return Yo(e)}(e=r)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||Mo(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),[null==h?void 0:h.code])));t(o)},children:"Confirm"}),(0,z.jsx)($e,{onClick:function(){t(n)},secondary:!0,children:"Cancel"})]})]})}Zo.propTypes={node:Hr.isRequired,param:G().oneOfType([G().string,G().shape({enum:G().array,raw:G().bool,type:G().string})]).isRequired,prompt:G().string.isRequired,searchKey:G().string.isRequired,behaviour:G().object.isRequired,context:G().string.isRequired,onSelect:G().func.isRequired};var qo=Zo;function Uo(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function Go(e){e&&(e.focus(),e.select())}function zo(e){var n,t,o=e.value,i=e.param,a=e.onSelect,c=(n=(0,r.useState)(o),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||function(e,n){if(e){if("string"==typeof e)return Uo(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Uo(e,n):void 0}}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),l=c[0],s=c[1],u=(0,r.useCallback)((function(e){"Enter"===e.key&&a({code:l})}),[l,a]),f=(0,r.useCallback)((function(e){var n=e.target.value;"number"===i.type&&(n=Number(n),Number.isNaN(n))||s(n)}),[i,s]);return(0,z.jsxs)("div",{className:mr.dialog,children:[(0,z.jsx)("p",{children:"Enter raw value"}),(0,z.jsx)("input",{ref:Go,type:"text",value:l,onChange:f,onKeyDown:u})]})}zo.propTypes={value:G().any.isRequired,prompt:G().string.isRequired,param:G().oneOfType([G().shape({enum:G().array,raw:G().bool,type:G().string})]).isRequired,onSelect:G().func.isRequired},zo.defaultProps={value:""};var Wo=zo;function Fo(e){var n=(0,r.useContext)(j).getSearchTargets,t=e.onSelect,o=(0,r.useMemo)((function(){return n("layer")}),[n]);return(0,z.jsxs)("div",{className:mr.dialog,children:[(0,z.jsx)("p",{children:"Select layer"}),(0,z.jsx)(xr,{results:o,onSelect:t,renderResult:function(e){return(0,z.jsxs)(z.Fragment,{children:[e.code,e.description&&(0,z.jsx)("p",{className:mr.description,children:e.description})]})}})]})}Fo.propTypes={value:G().string.isRequired,behaviour:G().object.isRequired,onSelect:G().func.isRequired},Fo.defaultProps={value:""};var Xo=Fo;function Vo(e){return Vo="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Vo(e)}function Qo(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Ho(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Qo(Object(t),!0).forEach((function(n){Jo(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Qo(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Jo(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Vo(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Vo(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Vo(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function $o(e){var n=e.node,t=e.type,o=e.onCancel,i=e.onSelect,a=(0,ye.pick)(e,["node","value","prompt","param","node","behaviour","context","searchKey"]),c=(0,r.useMemo)((function(){var e;return"params"===t&&"hsb-color-picker"===(null===(e=n.source)||void 0===e?void 0:e.helper)?ro:n.slot.raw||"placeholder"===n.slot.type?Wo:n.slot.enum?Gr:"code"===n.slot?qo:"layer"===n.slot?Xo:$r}),[n,t]);return(0,z.jsx)(gn,{onDismiss:o,children:(0,z.jsx)(c,Ho(Ho({},a),{},{param:n.slot,onSelect:i}))})}$o.propTypes={type:G().string.isRequired,node:Hr.isRequired,behaviour:G().object.isRequired,prompt:G().string.isRequired,searchKey:G().string.isRequired,searchThreshold:G().number,onCancel:G().func.isRequired,onSelect:G().func.isRequired},$o.defaultProps={type:"value",value:"",freeForm:!1,searchThreshold:10};var ei=$o;function ni(e){return function(e){if(Array.isArray(e))return ti(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,n){if(e){if("string"==typeof e)return ti(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?ti(e,n):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ti(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var ri=function(e,n){return[].concat(ni(e.slice(0,n)),ni(e.slice(n+1)))},oi=function(e,n,t){return[].concat(ni(e.slice(0,n)),[t],ni(e.slice(n+1)))};function ii(e){return ii="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},ii(e)}function ai(e){return function(e){if(Array.isArray(e))return fi(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||ui(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ci(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function li(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?ci(Object(t),!0).forEach((function(n){si(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ci(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function si(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==ii(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==ii(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===ii(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function ui(e,n){if(e){if("string"==typeof e)return fi(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?fi(e,n):void 0}}function fi(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function pi(e){var n,t,o=e.prop,i=void 0===o?{}:o,a=e.schema,c=void 0===a?{}:a,l=e.onUpdate,s=i.parsed,u=void 0===s?[]:s,f=c.length,p=(n=(0,r.useState)(null),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||ui(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),d=p[0],y=p[1],h=(0,r.useCallback)((function(){l(li(li({},i),{},{useRaw:!1,parsed:[].concat(ai(u),[""])})),y(u.length)}),[i,u,l,y]),b=(0,r.useCallback)((function(e){l(li(li({},i),{},{useRaw:!1,parsed:oi(u,d,e.code)})),y(null)}),[i,u,d,l]),A=(0,r.useCallback)((function(e){l(li(li({},i),{},{useRaw:!1,parsed:ri(u,e)}))}),[i,u,l]);return(0,z.jsxs)("div",{children:[(0,z.jsx)("ol",{className:(0,ye.compact)([rr.propertyPhandleSelect,1===f&&rr.propertyPhandleSingleton]).join(" "),children:u.map((function(e,n){return(0,z.jsx)("li",{children:(0,z.jsxs)("span",{className:rr.behaviorBind,onClick:function(){return y(n)},children:[e,1!==f&&(0,z.jsx)(J,{name:"times",className:rr.phandleRemove,onClick:function(e){e.stopPropagation(),A(n)}})]})},n)}))}),null!==d&&(0,z.jsx)(ei,{node:{value:u[d],params:[],slot:"behaviour"},type:"value",context:"none",behaviour:{code:u[d]},prompt:"Select Behavior",searchKey:"code",onSelect:b,onCancel:function(){return y(null)}}),f&&u.length<f&&(0,z.jsxs)($e,{secondary:!0,onClick:h,children:[(0,z.jsx)(J,{name:"plus"})," Add Behavior"]})]})}function di(e){return di="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},di(e)}function yi(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function hi(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?yi(Object(t),!0).forEach((function(n){bi(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):yi(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function bi(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==di(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==di(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===di(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Ai(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var mi={display:"inline-block",cursor:"pointer",verticalAlign:"text-top",border:"0.75px solid var(--key-color-base)",borderRadius:"3px"},vi={display:"flex",justifyContent:"center",alignItems:"center",width:"10px",height:"10px",margin:"1px",borderRadius:"2px"},gi=function(e){var n,t,o=e.node,i=e.onSelect,a=(n=o.params,t=3,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||function(e,n){if(e){if("string"==typeof e)return Ai(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Ai(e,n):void 0}}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),c=a[0],l=a[1],s=a[2],u=(0,r.useCallback)((function(){i({node:o,type:"params"})}),[o,i]),f=(0,r.useMemo)((function(){return[c,l,s].some((function(e){return void 0===e.value}))}),[c,l,s]),p="hsl(".concat(c.value,", ").concat(l.value,"%, ").concat(s.value,"%)");return(0,z.jsxs)(z.Fragment,{children:[(0,z.jsx)(Co,{node:o,onSelect:i}),f?(0,z.jsx)(Co,{node:{},onSelect:u}):(0,z.jsx)("div",{onClick:u,style:mi,children:(0,z.jsx)("div",{className:f?pt.missingValue:null,style:hi(hi({},vi),{},{backgroundColor:p})})})]})};function xi(e){return xi="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},xi(e)}function ji(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Ci(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?ji(Object(t),!0).forEach((function(n){wi(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ji(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function wi(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==xi(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==xi(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===xi(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Ei(e){var n=e.node,t=e.onSelect;return(0,z.jsxs)(z.Fragment,{children:[(0,z.jsx)(Co,{node:n,onSelect:t}),me()(n,"source.params.length")>0?(0,z.jsx)(ki,{slots:n.source.params,params:n.params,onSelect:t}):null]})}function Oi(e){var n=e.node,t=e.onSelect,o=e.slot,i=(0,r.useMemo)((function(){var e;return"hsb-color-picker"===(null===(e=n.source)||void 0===e?void 0:e.helper)?gi:"code"===o?Eo:Ei}),[n,o]);return(0,z.jsx)("span",{className:pt.param,children:(0,z.jsx)(i,{node:n,onSelect:t})})}function ki(e){var n=e.slots,t=e.params,r=e.onSelect,o=e.root,i=e.wrapperProps;return(0,z.jsx)("span",Ci(Ci({className:pt.params,"data-is-root":!!o,"data-param-count":t.length},i),{},{children:n.map((function(e,n){return"placeholder"!==e.type&&(0,z.jsx)(Oi,{slot:e,node:t[n],onSelect:r},n)}))}))}ki.propTypes={slots:G().arrayOf(zr).isRequired,params:G().arrayOf(Hr).isRequired,source:Xr,onSelect:G().func.isRequired};var Si=ki;function Bi(e,n){if(e){if("string"==typeof e)return Pi(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Pi(e,n):void 0}}function Pi(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function Ii(e){var n,t,o,i,a,c,l=(0,r.useContext)(j),s=l.sources,u=l.mergedGlyphs,f=e.context,p=void 0===f?"none":f,d=e.hideBehaviour,y=e.value,h=e.params,b=e.onUpdate,A=(a=(0,r.useState)(null),c=2,function(e){if(Array.isArray(e))return e}(a)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(a,c)||Bi(a,c)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),m=A[0],v=A[1],g=y,x=me()(s.behavioursByContext[p],g,{}),C=Oo(h,x),w=No(y,h,s,p,u),E=Do(w),O=function(e){if(!e[0].source.code)return!0;var n,t=function(e,n){var t="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!t){if(Array.isArray(e)||(t=Bi(e))){t&&(e=t);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,c=!1;return{s:function(){t=t.call(e)},n:function(){var e=t.next();return a=e.done,e},e:function(e){c=!0,i=e},f:function(){try{a||null==t.return||t.return()}finally{if(c)throw i}}}}(e);try{for(t.s();!(n=t.n()).done;){var r,o=n.value;if(((null===(r=o.source)||void 0===r?void 0:r.params)||[]).length>o.params.length)return!0;if(o.params.some((function(e){return void 0===e.value||""===e.value||void 0===e.source})))return!0}}catch(e){t.e(e)}finally{t.f()}}(E);function k(e){var n=e.node,t=e.type;v({node:n,type:void 0===t?"value":t,nodeIndex:E.indexOf(n)})}return(0,z.jsxs)(z.Fragment,{children:[x&&!d?(0,z.jsx)("span",{className:(0,ye.compact)([pt["behaviour-binding"],!x.code&&pt.missingValue]).join(" "),onClick:function(){return k({node:w})},children:x.code||"⦸"}):null,O&&(0,z.jsx)(J,{name:"warning",className:pt.missing,title:"Binding has missing value(s)"}),(0,z.jsx)(Si,{root:!0,slots:C,params:w.params,onSelect:k,wrapperProps:{"data-simple":(n=w,t=Io(n.params,1)[0],o=me()(t,"source.symbol",me()(t,"source.code","")),i=!!me()(t,"source.faIcon")||1===o.length,1===n.params.length&&i),"data-long":Lo(w,C)}}),m&&(0,z.jsx)(ei,{node:m.node,type:m.type,behaviour:x,context:p,prompt:Ro(m.node.slot),searchKey:"code",onSelect:function(e){if("tree"===m.type)return function(e){var n=e.value,t=e.params,r=m.nodeIndex,o=Oe()(w),i=Do(o),a=i[r];a.value=n,a.params=t,delete a._isPlaceholder,i.forEach((function(e){delete e.source})),v(null),b(_n()(o,["value","params"]))}(e);if("params"===m.type)return function(e){var n=m.nodeIndex,t=Oe()(w),r=Do(t);r[n].params=e,r.forEach((function(e){delete e.source})),v(null),b(_n()(t,["value","params"]))}(e);var n=m.node,t=m.nodeIndex,r=Oe()(w),o=Do(r),i=o[t];if(n.slot.raw)"number"===n.slot.type&&(e.code=Number(e.code));else if("command"===n.slot){var a,c,l,s=(null===(a=i.source)||void 0===a||null===(c=a.additionalParams)||void 0===c?void 0:c.length)||0;if(((null===(l=e.additionalParams)||void 0===l?void 0:l.length)||0)<s){var u=o[0];u.params.splice(1,u.params.length-1),o.splice(2,o.length-1)}}i.value=e.code,delete i._isPlaceholder,i.params=((null==e?void 0:e.params)||[]).reduce((function(n,t,r){var o,a;return(null===(o=i.source)||void 0===o||null===(a=o.params)||void 0===a?void 0:a[r])===e.params[r]?n.push(i.params[r]):n.push({value:0,_isPlaceholder:!0}),n}),[]),o.forEach((function(e){delete e.source})),v(null),b(_n()(r,["value","params","_isPlaceholder"]))},onCancel:function(){return v(null)}})]})}Ii.propTypes={context:G().string,hideBehaviour:G().bool.isRequired,value:Fr.isRequired,params:G().arrayOf(Qr),onUpdate:G().func.isRequired},Ii.defaultProps={hideBehaviour:!1};var Ti=Ii;function Di(e){return Di="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Di(e)}function Li(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Ri(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Li(Object(t),!0).forEach((function(n){Ni(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Li(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Ni(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Di(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Di(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Di(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function _i(e){var n=e.context,t=e.value,r=e.params,o=e.keyWrapperProps,i=void 0===o?{}:o,a=e.onUpdate;return(0,z.jsx)(mt,Ri(Ri({},i),{},{children:(0,z.jsx)(Ti,{context:n,value:t,params:r,onUpdate:a})}))}_i.propTypes={label:G().string,value:Fr.isRequired,params:G().arrayOf(Qr),onUpdate:G().func.isRequired};var Mi=_i;function Yi(e){return Yi="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Yi(e)}function Ki(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function Zi(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function qi(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Zi(Object(t),!0).forEach((function(n){Ui(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Zi(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Ui(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Yi(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Yi(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Yi(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Gi(e){var n=e.prop,t=void 0===n?{}:n,o=e.onUpdate,i=t.parsed,a=void 0===i?[]:i,c=(0,r.useCallback)((function(){var e;o(qi(qi({},t),{},{useRaw:!1,parsed:[].concat((e=a,function(e){if(Array.isArray(e))return Ki(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,n){if(e){if("string"==typeof e)return Ki(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Ki(e,n):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),[{value:"",params:[]}])}))}),[t,a,o]),l=(0,r.useCallback)((function(e,n){o(qi(qi({},t),{},{useRaw:!1,parsed:oi(a,n,e)}))}),[t,a,o]),s=(0,r.useCallback)((function(e){o(qi(qi({},t),{},{useRaw:!1,parsed:ri(a,e)}))}),[t,a,o]);return(0,z.jsxs)(z.Fragment,{children:[(0,z.jsx)("ol",{className:rr.propertyBindingsValue,children:a.map((function(e,n){return(0,z.jsx)("li",{children:(0,z.jsxs)(mt,{children:[(0,z.jsx)(Mi,{context:"none",value:e.value,params:e.params,onUpdate:function(e){return l(e,n)}}),(0,z.jsx)("div",{className:rr.actions,children:(0,z.jsx)(J,{name:"trash",className:rr.deleteBind,onClick:function(e){e.stopPropagation(),s(n)}})})]})},n)}))}),(0,z.jsxs)($e,{secondary:!0,onClick:c,children:[(0,z.jsx)(J,{name:"plus"})," Add binding"]})]})}function zi(e){return zi="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},zi(e)}function Wi(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Fi(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Wi(Object(t),!0).forEach((function(n){Xi(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Wi(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Xi(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==zi(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==zi(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===zi(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Vi(e){var n=e.schema,t=void 0===n?{}:n,r=t.type;if("const"in t)return(0,z.jsx)(sr,Fi({},e));if("enum"in t)return(0,z.jsx)(Yr,Fi({},e));if("key-position-picker"===t.helper){var o=e.prop,i=void 0===o?{}:o,a=e.onUpdate;return(0,z.jsx)(er,{value:i.parsed||[],onUpdate:function(e){a(Fi(Fi({},i),{},{useRaw:!1,parsed:e}))}})}if(t.choices)return(0,z.jsx)(Kr,Fi({},e));switch(r){case"string":return(0,z.jsx)(ur,Fi({},e));case"int":return(0,z.jsx)(fr,Fi({},e));case"boolean":return(0,z.jsx)(pr,Fi({},e));case"phandle":case"phandles":return(0,z.jsx)(pi,Fi({},e));case"phandle-array":return(0,z.jsx)(Gi,Fi({},e));default:return(0,z.jsx)(lr,Fi({},e))}}Vi.propTypes={schema:G().shape({type:G().oneOf(["string","boolean","int","array","phandle","phandles","phandle-array","integer-union"]),required:G().bool,description:G().string,default:G().any,const:G().any,helper:G().any}),prop:G().shape({parsed:G().any,raw:G().string}),onUpdate:G().func.isRequired};var Qi=Vi;function Hi(e){return e.length>31?"maximum length: 31":e.match(/^[^a-zA-Z]/)?"first character must be a letter":e.match(/[^a-zA-Z0-9,._+-]/)?"valid characters: a-zA-Z0-9,._+-":void 0}var Ji=Hi;function $i(e){return e.length>31?"maximum length: 31":e.match(/^[^a-zA-Z]/)?"first character must be a letter":e.match(/[^a-zA-Z0-9_]/)?"valid characters: a-zA-Z0-9_":void 0}var ea=t(33988),na={};na.styleTagTransform=A(),na.setAttributes=d(),na.insert=f().bind(null,"head"),na.domAPI=s(),na.insertStyleElement=h(),c()(ea.Z,na);var ta=ea.Z&&ea.Z.locals?ea.Z.locals:void 0;function ra(e){return ra="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},ra(e)}var oa=["validator","required","value"];function ia(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function aa(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?ia(Object(t),!0).forEach((function(n){ca(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ia(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function ca(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==ra(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==ra(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===ra(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function la(e){var n=e.validator,t=e.required,r=void 0!==t&&t,o=e.value,i=void 0===o?"":o,a=function(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}(e,oa),c=n(i)||!i&&r&&"cannot be empty";return(0,z.jsxs)("span",{className:ta.wrapper,children:[(0,z.jsx)("input",aa({type:"text",value:i},a)),c&&(0,z.jsx)("span",{className:ta.error,children:c})]})}function sa(e){return sa="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},sa(e)}function ua(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function fa(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?ua(Object(t),!0).forEach((function(n){pa(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ua(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function pa(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==sa(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==sa(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===sa(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function da(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(e,n)||ya(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ya(e,n){if(e){if("string"==typeof e)return ha(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?ha(e,n):void 0}}function ha(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function ba(e){var n=e.name,t=e.labels,r=da(void 0===t?[]:t,1)[0],o=e.properties.label;return n.toLowerCase()===(r||"").toLowerCase()&&n.toLowerCase()===((null==o?void 0:o.parsed)||"").toLowerCase()}function Aa(e){var n=e.node;return(0,z.jsxs)("div",{children:[(0,z.jsx)("p",{children:(0,z.jsx)("code",{children:n.properties.compatible.parsed})}),(0,z.jsx)(ma,fa({},e))]})}function ma(e){var n=e.node,t=e.onUpdate,o=da((0,r.useState)(ba(n)),2),i=o[0],a=o[1],c=da((0,r.useState)(ba(n)),2),l=c[0],s=c[1],u=function(e,n,t,o){var i=(0,r.useCallback)((function(t){n(fa(fa({},e),{},{name:t.target.value}))}),[e,n]),a=(0,r.useCallback)((function(r){var i,a=r.target.value,c=[a].concat(function(e){if(Array.isArray(e))return ha(e)}(i=e.labels.slice(1))||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(i)||ya(i)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),l=t?a:e.name,s=o?fa(fa({},e.properties),{},{label:{parsed:a.toUpperCase(),raw:'"'.concat(a.toUpperCase(),'"'),useRaw:!1}}):e.properties;n(fa(fa({},e),{},{name:l,labels:c,properties:s}))}),[e,n,t,o]);return[i,a,(0,r.useCallback)((function(t){return n(fa(fa({},e),{},{properties:fa(fa({},e.properties),{},{label:fa(fa({},e.properties.label),{},{parsed:t.target.value,useRaw:!1})})}))}),[e,n])]}(n,t,i,l),f=da(u,3),p=f[0],d=f[1],y=f[2];return(0,z.jsx)("table",{children:(0,z.jsxs)("tbody",{children:[(0,z.jsxs)("tr",{children:[(0,z.jsx)("th",{children:"Bind"}),(0,z.jsx)("td",{children:(0,z.jsx)(la,{type:"text",value:n.labels[0]||"",required:!0,validator:$i,onChange:d})})]}),(0,z.jsxs)("tr",{children:[(0,z.jsx)("th",{children:"Node"}),(0,z.jsxs)("td",{children:[(0,z.jsx)(la,{value:n.name,required:!0,readOnly:i,disabled:i,validator:Hi,onChange:p}),(0,z.jsxs)("label",{title:"Set automatically using bind name",children:[(0,z.jsx)("input",{type:"checkbox",checked:i,onChange:function(e){return a(e.target.checked)}})," Automatic"]})]})]}),(0,z.jsxs)("tr",{children:[(0,z.jsx)("th",{children:"Label"}),(0,z.jsxs)("td",{children:[(0,z.jsx)(la,{type:"text",value:n.properties.label.parsed||"",required:!0,readOnly:l,disabled:l,validator:function(){return null},onChange:y}),(0,z.jsxs)("label",{title:"Set automatically using bind name",children:[(0,z.jsx)("input",{type:"checkbox",checked:l,onChange:function(e){return s(e.target.checked)}})," Automatic"]})]})]})]})})}function va(e){return va="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},va(e)}function ga(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function xa(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?ga(Object(t),!0).forEach((function(n){ja(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ga(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function ja(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==va(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==va(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===va(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Ca(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var wa=function(e){var n,t,o,i=e.node,a=e.onUpdate,c=e.onCancel,l=(0,r.useContext)(_e).behaviors,s=(t=(0,r.useState)(i),o=2,function(e){if(Array.isArray(e))return e}(t)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(t,o)||function(e,n){if(e){if("string"==typeof e)return Ca(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Ca(e,n):void 0}}(t,o)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),u=s[0],f=s[1],p=l[null===(n=i.properties.compatible)||void 0===n?void 0:n.parsed],d=function(e){return function(n){f(xa(xa({},u),{},{properties:xa(xa({},u.properties),{},ja({},e,n))}))}},y=(0,r.useCallback)((function(){a(Oe()(u))}),[u,a]),h=(null==p?void 0:p.properties)||{},b=(p?Object.keys(h):Object.keys(u.properties)).filter((function(e){var n;return!("label"===e||null!==(n=h[e])&&void 0!==n&&n.deprecatedBy&&!u.properties[e])}));return(0,z.jsx)(gn,{onDismiss:c,children:(0,z.jsx)(pn,{dismissText:!1,children:(0,z.jsxs)("div",{style:{maxHeight:"80vh",overflow:"auto"},children:[(0,z.jsxs)("h2",{children:["Edit ",i.name," ",(0,z.jsxs)("code",{children:["(&",i.labels[0],")"]})]}),(0,z.jsx)(Aa,{node:u,onUpdate:f}),(0,z.jsx)("h3",{children:"Configuration"}),(0,z.jsxs)("table",{className:Cn.editorForm,children:[(0,z.jsx)("thead",{children:(0,z.jsxs)("tr",{children:[(0,z.jsx)("th",{children:"Property"}),(0,z.jsx)("th",{children:"Value"}),(0,z.jsx)("th",{})]})}),(0,z.jsx)("tbody",{children:b.map((function(e,n){var t,r;return(0,z.jsxs)("tr",{children:[(0,z.jsx)("td",{className:Cn.propertyName,children:e in h?(0,z.jsx)(wn,{property:e,schema:h[e]}):(0,z.jsx)("input",{value:e,onChange:(r=e,function(e){f(xa(xa({},u),{},{properties:Object.keys(u.properties).reduce((function(n,t){var o=u.properties[t];return t===r&&(t=e.target.value),n[t]=o,n}),{})}))})})}),(0,z.jsx)("td",{className:Cn.propertyValue,children:(0,z.jsx)(Qi,{name:e,prop:u.properties[e],schema:h[e],onUpdate:d(e)})}),(0,z.jsx)("td",{children:u.properties[e]&&!(null!==(t=h[e])&&void 0!==t&&t.required)&&(0,z.jsx)(J,{name:"trash-can",className:Cn.action,onClick:function(){return function(e){f(xa(xa({},u),{},{properties:nn()(u.properties,e)}))}(e)}})})]},n)}))})]}),(0,z.jsxs)("div",{style:{textAlign:"center"},children:[(0,z.jsx)($e,{onClick:y,children:"Okay"}),(0,z.jsx)($e,{onClick:c,secondary:!0,children:"Cancel"})]})]})})})},Ea=t(87617),Oa={};Oa.styleTagTransform=A(),Oa.setAttributes=d(),Oa.insert=f().bind(null,"head"),Oa.domAPI=s(),Oa.insertStyleElement=h(),c()(Ea.Z,Oa);var ka=Ea.Z&&Ea.Z.locals?Ea.Z.locals:void 0;function Sa(e){return Sa="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Sa(e)}var Ba=["href","children","external","showExternal"];function Pa(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Ia(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Pa(Object(t),!0).forEach((function(n){Ta(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Pa(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Ta(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Sa(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Sa(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Sa(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Da(e){var n=e.href,t=e.children,r=e.external,o=e.showExternal,i=function(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}(e,Ba),a=Object.assign({href:n},i,r&&{rel:"noreferrer",target:"_blank"});return(0,z.jsxs)("a",Ia(Ia({},a),{},{children:[t,r&&o&&(0,z.jsx)(J,{className:ka.icon,name:"arrow-up-right-from-square"})]}))}Da.propTypes={href:G().string.isRequired,children:G().oneOfType([G().arrayOf(G().node),G().node]).isRequired,external:G().bool.isRequired,showExternal:G().bool},Da.defaultProps={external:!1,showExternal:!0};var La=Da;function Ra(e){var n=e.onDismiss,t=(0,z.jsx)(La,{external:!0,href:"https://github.com/nickcoutsos/keymap-editor/issues",children:"Keymap Editor Issues"});return(0,z.jsx)(gn,{onDismiss:n,children:(0,z.jsxs)(pn,{onDismiss:n,style:{maxHeight:"80vh",overflow:"scroll"},children:[(0,z.jsx)("h2",{children:"Behavior Editing Beta Test"}),(0,z.jsx)("p",{children:"Welcome to the behavior editing beta!"}),(0,z.jsx)("p",{children:"This feature has been a long time coming, and while it should enable a lot of advanced ZMK features through the app it is still a work in progress. Some features are still missing so the use experience is a little rough, and there may be errors as well. Some familiarity with ZMK behavior functionality is expected."}),(0,z.jsxs)("p",{children:["I've been using it for a while and it seems to be in a pretty workable state, but I can't catch everything, so it would mean a lot to me for you to share any feedback or issues on GitHub: ",t,"."]})]})})}function Na(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var _a=["zmk,behavior-hold-tap","zmk,behavior-mod-morph","zmk,behavior-tap-dance","zmk,behavior-sticky-key","zmk,behavior-caps-word"];function Ma(e){var n,t,o=e.onUpdate,i=e.onCancel,a=(n=(0,r.useState)(""),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||function(e,n){if(e){if("string"==typeof e)return Na(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Na(e,n):void 0}}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),c=a[0],l=a[1];return(0,z.jsx)(gn,{children:(0,z.jsxs)(pn,{dismissText:null,children:[(0,z.jsx)("h3",{children:"Add new behavior"}),(0,z.jsxs)("label",{children:["Type ",(0,z.jsxs)("select",{required:!0,value:c,onChange:function(e){return l(e.target.value)},children:[(0,z.jsx)("option",{value:"",disabled:!0,children:"Select a behavior type"}),_a.map((function(e,n){return(0,z.jsx)("option",{value:e,children:e},n)}))]})]}),(0,z.jsxs)("div",{style:{textAlign:"center",margin:"10px"},children:[(0,z.jsx)($e,{disabled:!c,onClick:function(){return o(c)},children:"Create"}),(0,z.jsx)($e,{onClick:i,secondary:!0,children:"Cancel"})]})]})})}Ma.propTypes={onUpdate:G().func.isRequired,onCancel:G().func.isRequired};var Ya=Ma,Ka=t(98913),Za=t.n(Ka),qa=t(95130);function Ua(e){return Ua="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Ua(e)}function Ga(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function za(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Ga(Object(t),!0).forEach((function(n){Wa(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Ga(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Wa(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Ua(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Ua(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Ua(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Fa(e,n){var t=n.name,r=n.labels,o=n.label,i=qa.behaviorSchemas[e];return{name:t,labels:r,properties:za({compatible:{raw:'"'.concat(e,'"'),parsed:e},label:{raw:'"'.concat(o,'"'),parsed:o}},Object.keys(i.properties).reduce((function(e,n){var t=i.properties[n];return function(e){return["phandle","phandles","phandle-array"].includes(e.type)}(t)&&t.length?e[n]={parsed:Za()(t.length,(function(){return"&none"}))}:"const"in t&&(e[n]={parsed:t.const,raw:"<".concat(t.const.toString(),">")}),e}),{}))}}var Xa=t(97168),Va=t(62412),Qa=function(e){return e.keyboard.keymap.behaviors},Ha=(0,Xa.oM)({name:"behaviors",initialState:[],reducers:{addBehavior:function(e,n){e.push(n.payload.behavior)},updateBehavior:function(e,n){e[n.payload.behaviorIndex]=nn()(n.payload.behavior,"params"),(0,Va.resolveBehaviorParams)(e)},deleteBehavior:function(e,n){e.splice(n.payload.behaviorIndex,1)}}}),Ja=Ha.actions,$a=Ja.addBehavior,ec=Ja.updateBehavior,nc=Ja.deleteBehavior,tc=Ha.reducer;function rc(e){return rc="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},rc(e)}function oc(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function ic(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?oc(Object(t),!0).forEach((function(n){ac(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):oc(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function ac(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==rc(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==rc(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===rc(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function cc(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(e,n)||function(e,n){if(e){if("string"==typeof e)return lc(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?lc(e,n):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function lc(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var sc=function(){var e=(0,i.v9)((function(e){return e.experimentalSettings})),n=cc((0,r.useState)(null),2),t=n[0],o=n[1],a=cc((0,r.useState)(!1),2),c=a[0],l=a[1],s=cc((0,r.useState)(!1),2),u=s[0],f=s[1],p=(0,i.v9)(Qa),d=(0,i.I0)(),y=(0,r.useCallback)((function(){l(!0)}),[l]),h=(0,r.useCallback)((function(e){l(!1),d($a({behavior:Fa(e,{name:"new_behavior",labels:["new_behavior"],label:"NEW_BEHAVIOR"})})),setTimeout((function(){return o(p.length)}))}),[p,d,l,o]),b=(0,r.useCallback)((function(e){o(e)}),[o]),A=(0,r.useCallback)((function(e){d(nc({behaviorIndex:e}))}),[d]),m=(0,r.useCallback)((function(e){e.stopPropagation(),f(!0)}),[f]),v=(0,r.useCallback)((function(){f(!1)}),[f]),g=(0,r.useCallback)((function(n){d({type:"SETTINGS_UPDATE",settings:ic(ic({},e),{},{enableBehaviorEditing:n})})}),[e,d]);return(0,z.jsxs)("div",{className:Cn.main,children:[c&&(0,z.jsx)(Ya,{onUpdate:h,onCancel:function(){return l(!1)}}),null!==t&&(0,z.jsx)(wa,{node:p[t],onCancel:function(){return o(null)},onUpdate:function(e){o(null),d(ec({behaviorIndex:t,behavior:e}))}}),u&&(0,z.jsx)(Ra,{onDismiss:v}),(0,z.jsxs)("div",{className:Cn.panel,children:[(0,z.jsxs)("label",{children:["Enable Beta",(0,z.jsx)("input",{type:"checkbox",checked:e.enableBehaviorEditing,onChange:function(e){return g(e.target.checked)}})]}),(0,z.jsxs)($e,{onClick:m,style:{backgroundColor:"orange"},children:[(0,z.jsx)(J,{name:"warning"})," Details"]}),(0,z.jsx)("h3",{children:"Custom Behaviors"}),(0,z.jsxs)("table",{style:{width:"100%"},children:[(0,z.jsx)("thead",{children:(0,z.jsxs)("tr",{children:[(0,z.jsx)("th",{children:"Binding"}),(0,z.jsx)("th",{children:"Compatible"}),(0,z.jsx)("th",{children:"Actions"})]})}),(0,z.jsx)("tbody",{children:p.map((function(n,t){return(0,z.jsxs)("tr",{children:[(0,z.jsx)("td",{children:(0,z.jsxs)("code",{children:["&",n.labels[0]]})}),(0,z.jsx)("td",{children:n.properties.compatible.raw}),(0,z.jsx)("td",{children:e.enableBehaviorEditing&&(0,z.jsxs)(z.Fragment,{children:[(0,z.jsx)(J,{className:Cn.action,onClick:function(){return b(t)},name:"wrench"}),(0,z.jsx)(J,{className:Cn.action,onClick:function(){return A(t)},name:"trash-can"})]})})]},t)}))})]}),(0,z.jsx)($e,{onClick:y,children:"Add New Behavior"})]})]})},uc=t(78207),fc={};fc.styleTagTransform=A(),fc.setAttributes=d(),fc.insert=f().bind(null,"head"),fc.domAPI=s(),fc.insertStyleElement=h(),c()(uc.Z,fc);var pc=uc.Z&&uc.Z.locals?uc.Z.locals:void 0;function dc(){return(0,z.jsx)("p",{className:pc.floatingMessage,children:"Click on a key to add it to the combo"})}function yc(e){var n=e.keyPositions,t=e.onUpdate;return(0,z.jsxs)("div",{className:pc.comboInputMap,children:[(0,z.jsx)(er,{value:n,onUpdate:t}),n.length<2&&(0,z.jsx)(dc,{})]})}yc.propTypes={onUpdate:G().func.isRequired,keyPositions:G().arrayOf(G().number).isRequired};var hc=yc,bc=t(86015),Ac={};Ac.styleTagTransform=A(),Ac.setAttributes=d(),Ac.insert=f().bind(null,"head"),Ac.domAPI=s(),Ac.insertStyleElement=h(),c()(bc.Z,Ac);var mc=bc.Z&&bc.Z.locals?bc.Z.locals:void 0;function vc(e){return function(n){n.stopPropagation(),e()}}function gc(e){return function(n){e[n.key]&&e[n.key]()}}function xc(e){return xc="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},xc(e)}function jc(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Cc(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?jc(Object(t),!0).forEach((function(n){wc(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):jc(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function wc(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==xc(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==xc(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===xc(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Ec(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function Oc(e){var n,t,o=e.value,i=e.validate,a=e.required,c=e.render,l=e.onUpdate,s=(0,r.useRef)(),u=(n=(0,r.useState)({value:o,editing:!1,attemptedEmpty:!1}),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||function(e,n){if(e){if("string"==typeof e)return Ec(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Ec(e,n):void 0}}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),f=u[0],p=u[1],d=f.attemptedEmpty?"cannot be empty":i&&i(f.value),y=(0,r.useCallback)((function(e){e&&(e.focus(),e.select())}),[]),h=(0,r.useCallback)((function(){p((function(e){return Cc(Cc({},e),{},{editing:!1})}))}),[p]),b=(0,r.useCallback)((function(e){s.current&&!s.current.contains(e.target)&&h()}),[s,h]);return(0,r.useEffect)((function(){return document.addEventListener("click",b),function(){return document.removeEventListener("click",b)}}),[b]),f.editing?(0,z.jsxs)("span",{className:mc.container,ref:s,children:[(0,z.jsx)("input",{ref:y,value:f.value,onChange:function(e){return p(Cc(Cc({},f),{},{attemptedEmpty:!1,value:e.target.value}))},onKeyDown:gc({Enter:function(){f.editing&&(""===f.value&&a?p(Cc(Cc({},f),{},{attemptedEmpty:!0})):(d||l(f.value),p(Cc(Cc({},f),{},{value:f.value,editing:!1}))))},Escape:h})}),d&&(0,z.jsx)("span",{className:mc.error,children:d})]}):c((0,z.jsxs)(z.Fragment,{children:[(0,z.jsx)("span",{children:o}),(0,z.jsx)(J,{name:"pencil",className:mc.edit,onClick:vc((function(){return p(Cc(Cc({},f),{},{editing:!0}))}))})]}))}Oc.propTypes={value:G().string.isRequired,validate:G().func,required:G().bool.isRequired,render:G().func.isRequired,onUpdate:G().func.isRequired},Oc.defaultProps={required:!0};var kc=Oc;function Sc(e,n){var t="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!t){if(Array.isArray(e)||(t=function(e,n){if(e){if("string"==typeof e)return Bc(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Bc(e,n):void 0}}(e))||n&&e&&"number"==typeof e.length){t&&(e=t);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,c=!1;return{s:function(){t=t.call(e)},n:function(){var e=t.next();return a=e.done,e},e:function(e){c=!0,i=e},f:function(){try{a||null==t.return||t.return()}finally{if(c)throw i}}}}function Bc(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var Pc="&trans",Ic=function(e){return e.keyboard.keymap.layers},Tc=(0,Xa.oM)({name:"layers",initialState:[],reducers:{createLayer:function(e,n){e.push({name:"Layer #".concat(e.length),bindings:Za()(n.payload.bindingCount,(function(){return function(){return{value:arguments.length>0&&void 0!==arguments[0]?arguments[0]:Pc,params:[]}}()}))})},updateLayerMetadata:function(e,n){var t=n.payload.layerIndex;Object.assign(e[t],_n()(n.payload,["name","label"]))},renameLayer:function(e,n){e[n.payload.index].name=n.payload.name},deleteLayer:function(e,n){e.splice(n.payload.index,1)},updateKeyBinding:function(e,n){e[n.payload.layerIndex].bindings[n.payload.bindIndex]=n.payload.binding},updateSensorBindings:function(e,n){e[n.payload.layerIndex].sensorBindings[n.payload.sensorIndex]=n.payload.bindings},rebindTransparentToKeyPress:function(e,n){var t,r=Sc(e[n.payload.layerIndex].bindings);try{for(r.s();!(t=r.n()).done;){var o=t.value;"&trans"===o.value&&(o.value="&kp",o.params=[])}}catch(e){r.e(e)}finally{r.f()}},rebindTransparentToNone:function(e,n){var t,r=Sc(e[n.payload.layerIndex].bindings);try{for(r.s();!(t=r.n()).done;){var o=t.value;"&trans"===o.value&&(o.value="&none",o.params=[])}}catch(e){r.e(e)}finally{r.f()}},rebindNoneToKeypress:function(e,n){var t,r=Sc(e[n.payload.layerIndex].bindings);try{for(r.s();!(t=r.n()).done;){var o=t.value;"&none"===o.value&&(o.value="&kp",o.params=[])}}catch(e){r.e(e)}finally{r.f()}},rebindNoneToTransparent:function(e,n){var t,r=Sc(e[n.payload.layerIndex].bindings);try{for(r.s();!(t=r.n()).done;){var o=t.value;"&none"===o.value&&(o.value="&trans",o.params=[])}}catch(e){r.e(e)}finally{r.f()}},rebindEmptyKeypressToTransparent:function(e,n){var t,r=Sc(e[n.payload.layerIndex].bindings);try{for(r.s();!(t=r.n()).done;){var o,i=t.value;"&kp"!==i.value||null!==(o=i.params[0])&&void 0!==o&&o.value||(i.value="&trans",i.params=[])}}catch(e){r.e(e)}finally{r.f()}},rebindEmptyKeypressToNone:function(e,n){var t,r=Sc(e[n.payload.layerIndex].bindings);try{for(r.s();!(t=r.n()).done;){var o,i=t.value;"&kp"!==i.value||null!==(o=i.params[0])&&void 0!==o&&o.value||(i.value="&none",i.params=[])}}catch(e){r.e(e)}finally{r.f()}}}}),Dc=Tc.actions,Lc=Dc.createLayer,Rc=Dc.renameLayer,Nc=Dc.deleteLayer,_c=Dc.updateLayerMetadata,Mc=Dc.updateKeyBinding,Yc=Dc.updateSensorBindings,Kc=Dc.rebindTransparentToKeyPress,Zc=Dc.rebindTransparentToNone,qc=Dc.rebindNoneToKeypress,Uc=Dc.rebindNoneToTransparent,Gc=Dc.rebindEmptyKeypressToTransparent,zc=Dc.rebindEmptyKeypressToNone,Wc=Tc.reducer;function Fc(e){return Fc="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Fc(e)}function Xc(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Vc(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Xc(Object(t),!0).forEach((function(n){Qc(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Xc(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Qc(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Fc(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Fc(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Fc(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Hc(e,n){if(e){if("string"==typeof e)return Jc(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Jc(e,n):void 0}}function Jc(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function $c(e){var n=e.selected,t=e.options,r=e.onUpdate;return(0,z.jsx)("ul",{className:pc.layerList,children:t.map((function(e,t){return(0,z.jsx)("li",{"data-selected":n.includes(t),onClick:function(){return e=t,void r(n.includes(e)?n.filter((function(n){return n!==e})):[].concat(function(e){if(Array.isArray(e))return Jc(e)}(o=n)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(o)||Hc(o)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),[e]));var e,o},children:e})}))})}var el=function(e){var n,t,o=e.combo,a=e.onUpdate,c=(0,i.v9)(Ic),l=(n=(0,r.useState)(_n()(o,["timeoutMs","slowRelease","layers"])),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||Hc(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),s=l[0],u=l[1],f=c.map((function(e){return e.name}));return(0,z.jsx)(gn,{children:(0,z.jsxs)(pn,{onDismiss:function(){a(s)},children:[(0,z.jsxs)("h2",{children:["Customize [",(0,z.jsx)("code",{children:o.identifier}),"]"]}),(0,z.jsxs)("div",{children:[(0,z.jsxs)("div",{className:pc.field,children:[(0,z.jsx)("label",{htmlFor:"customize-combo-timeout",children:"Timeout (ms)"}),(0,z.jsx)("input",{id:"customize-combo-timeout",type:"number",placeholder:"Default",value:s.timeoutMs,onChange:function(e){return u((function(n){return Vc(Vc({},n),{},{timeoutMs:""===e.target.value?void 0:Number(e.target.value)})}))}})]}),(0,z.jsxs)("div",{className:pc.field,children:[(0,z.jsx)("label",{htmlFor:"customize-combo-slow-release",children:"Slow Release"}),(0,z.jsx)("input",{id:"customize-combo-slow-release",type:"checkbox",checked:s.slowRelease,onChange:function(e){return u((function(n){return Vc(Vc({},n),{},{slowRelease:e.target.checked})}))}})]}),(0,z.jsxs)("div",{className:pc.field,children:[(0,z.jsx)("label",{children:"Layers"}),(0,z.jsx)($c,{selected:s.layers||[],options:f,onUpdate:function(e){return u((function(n){return Vc(Vc({},n),{},{layers:e})}))}})]})]})]})})},nl=function(e){return e.keyboard.keymap.combos},tl=(0,Xa.oM)({name:"combos",initialState:[],reducers:{updateComboBinding:function(e,n){e[n.payload.comboIndex].bindings=n.payload.bindings},updateComboKeypositions:function(e,n){e[n.payload.comboIndex].keyPositions=n.payload.keyPositions},createCombo:function(e){e.push({identifier:"new_combo",keyPositions:[],bindings:[{value:"&trans",params:[]}]})},renameCombo:function(e,n){e[n.payload.index].identifier=n.payload.name},deleteCombo:function(e,n){e.splice(n.payload.index,1)},customizeCombo:function(e,n){Object.assign(e[n.payload.index],n.payload.config)}}}),rl=tl.actions,ol=rl.updateComboBinding,il=rl.updateComboKeypositions,al=rl.createCombo,cl=rl.renameCombo,ll=rl.deleteCombo,sl=rl.customizeCombo,ul=tl.reducer;function fl(e){return fl="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},fl(e)}function pl(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function dl(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?pl(Object(t),!0).forEach((function(n){yl(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):pl(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function yl(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==fl(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==fl(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===fl(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function hl(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function bl(e){var n,t,o=(0,r.useContext)(j).identifiers,a=(0,i.v9)(nl),c=(0,i.I0)(),l=(n=(0,r.useState)(null),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||function(e,n){if(e){if("string"==typeof e)return hl(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?hl(e,n):void 0}}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),s=l[0],u=l[1];function f(e){return Ji(e)||(o.includes(e)?'Cannot use existing identifier "'.concat(e,'"'):null)}return(0,z.jsxs)("div",{className:pc.main,children:[null!==s&&(0,z.jsx)(el,{combo:a[s],onUpdate:function(e){return function(e,n){u(null),c(sl({index:e,config:n}))}(s,e)}}),(0,z.jsxs)("div",{className:pc.sidebar,children:[(0,z.jsxs)(La,{external:!0,href:"https://zmk.dev/docs/features/combos",children:[(0,z.jsx)(J,{name:"book"})," ZMK Docs: Combos"]}),(0,z.jsx)($e,{onClick:function(){c(al())},children:"Add New Combo"})]}),(0,z.jsx)("div",{className:pc.comboPanel,children:a.map((function(e,n){return(0,z.jsxs)("div",{className:pc.combo,children:[(0,z.jsxs)("div",{className:pc.heading,children:[(0,z.jsx)(kc,{value:e.identifier,validate:f,render:function(e){return(0,z.jsx)("h5",{children:(0,z.jsx)("code",{children:e})})},onUpdate:function(e){return function(e,n){c(cl({index:e,name:n}))}(n,e)}}),(0,z.jsxs)("div",{className:pc.actions,children:[(0,z.jsx)(J,{name:"wrench",className:"".concat(pc.action),onClick:function(){return u(n)}}),(0,z.jsx)(J,{name:"trash-can",className:"".concat(pc.action," ").concat(pc.remove),onClick:function(){c(ll({index:n}))}})]})]}),(0,z.jsxs)("div",{className:pc.detail,children:[(0,z.jsx)("div",{className:pc.comboOutput,children:(0,z.jsx)(Mi,dl(dl({},e.bindings[0]),{},{onUpdate:function(e){!function(e,n){c(ol({comboIndex:e,bindings:[n]}))}(n,e)}}))}),(0,z.jsx)(hc,{keyPositions:e.keyPositions,onUpdate:function(e){return function(e,n){c(il({comboIndex:e,keyPositions:n}))}(n,e)}})]})]},n)}))})]})}bl.propTypes={};var Al=bl,ml=t(50335),vl={};vl.styleTagTransform=A(),vl.setAttributes=d(),vl.insert=f().bind(null,"head"),vl.domAPI=s(),vl.insertStyleElement=h(),c()(ml.Z,vl);var gl=ml.Z&&ml.Z.locals?ml.Z.locals:void 0;function xl(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(e,n)||function(e,n){if(e){if("string"==typeof e)return jl(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?jl(e,n):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function jl(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function Cl(e){var n=e.activeLayer,t=e.onSelect,o=(0,r.useRef)(null),a=(0,i.I0)(),c=(0,r.useContext)(Kt).bindingCount,l=(0,i.v9)(Ic),s=xl((0,r.useState)(!1),2),u=s[0],f=s[1],p=xl((0,r.useState)(""),2),d=p[0],y=p[1],h=(0,r.useCallback)((function(e){if(e===n)return y(l[n].name),void f(!0);f(!1),t(e)}),[l,n,y,f,t]),b=(0,r.useCallback)((function(){return a(Lc({bindingCount:c}))}),[a,c]),A=(0,r.useMemo)((function(){return function(e,n){window.confirm("Really delete layer: ".concat(n,"?"))&&a(Nc({index:e}))}}),[a]),m=(0,r.useCallback)((function(){if(u){var e=n,t=d;y(""),f(!1),a(Rc({index:e,name:t}))}}),[d,u,n,y,f,a]),v=(0,r.useCallback)((function(){u&&(y(""),f(!1))}),[u,y,f]),g=(0,r.useMemo)((function(){return function(e){o.current&&!o.current.contains(e.target)&&v()}}),[o,v]);(0,r.useEffect)((function(){return document.addEventListener("click",g),function(){return document.removeEventListener("click",g)}}),[g]);var x=(0,r.useCallback)((function(e){e&&(e.focus(),e.select())}),[]);return(0,z.jsx)("div",{className:gl.layerSelector,"data-renaming":u,ref:o,children:(0,z.jsxs)("ul",{children:[l.map((function(e,t){var r=e.name;return(0,z.jsxs)("li",{className:n===t?gl.active:"","data-layer":t,onClick:vc((function(){return h(t)})),children:[(0,z.jsx)("span",{className:gl.index,children:t}),n===t&&u?(0,z.jsx)("input",{ref:x,className:gl.name,onChange:function(e){return y(e.target.value)},onKeyDown:gc({Enter:m,Escape:v}),value:n===t&&u?d:r}):(0,z.jsxs)("span",{className:gl.name,children:[r,(0,z.jsx)(J,{name:"times-circle",className:gl.delete,onClick:vc((function(){return A(t,r)}))})]})]},"layer-".concat(t))})),(0,z.jsxs)("li",{onClick:b,children:[(0,z.jsx)(J,{className:gl.index,name:"plus"}),(0,z.jsx)("span",{className:gl.name,children:"Add Layer"})]})]})})}Cl.propTypes={activeLayer:G().number.isRequired,onSelect:G().func.isRequired};var wl=Cl;function El(e){var n=e.direction;return(0,z.jsx)("svg",{xmlns:"http://www.w3.org/2000/svg",width:"65px",height:"65px",viewBox:"0 0 65 65",style:{position:"absolute",top:"-10px",stroke:"var(--key-color-base)",strokeWidth:2,fill:"none",display:"block",width:"65px",height:"65px",pointerEvents:"none"},children:(0,z.jsx)("path",{style:{transform:"scaleX(".concat("cw"===n?-1:1,") rotate(-45deg)"),transformOrigin:"center center"},d:"M 63 31 A 30 30 45 0 0 32.5 2 M 37 -2 L 32.5 2 L 37 6"})})}function Ol(e){var n=e.context,t=e.direction,r=e.params,o=e.onUpdate;return(0,z.jsxs)(mt,{themeClass:pt.encoder,children:[(0,z.jsx)(El,{direction:t}),(0,z.jsx)(Ti,{hideBehaviour:!0,context:n,value:"&kp",params:r,onUpdate:o})]})}Ol.propTypes={params:G().arrayOf(Qr),onUpdate:G().func.isRequired};var kl=Ol;function Sl(e){return Sl="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Sl(e)}function Bl(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function Pl(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Il(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Pl(Object(t),!0).forEach((function(n){Tl(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Pl(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Tl(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Sl(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Sl(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Sl(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}var Dl=function(e){var n=e.layer,t=e.sensors,r=(0,i.I0)(),o=(0,i.v9)(Ic)[n].sensorBindings,a=void 0===o?[]:o;function c(e,t,o){var i=o.params[0],c=a[e]||{value:"&inc_dec_kp",params:[{value:"",params:[]},{value:"",params:[]}]};r(Yc({layerIndex:n,sensorIndex:e,bindings:Il(Il({},c),{},{params:oi(c.params,t,i)})}))}return(0,z.jsxs)("div",{style:{margin:"0 0 30px"},children:[(0,z.jsx)("h3",{children:"Sensor bindings"}),(0,z.jsx)("div",{style:{display:"flex",flexDirection:"row",gap:"25px"},children:t.map((function(e,n){var t,r=e.label||e.identifier,o=function(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(e,n)||function(e,n){if(e){if("string"==typeof e)return Bl(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Bl(e,n):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}((null===(t=a[n])||void 0===t?void 0:t.params)||[],2),i=o[0],l=o[1];return(0,z.jsxs)("div",{style:{display:"block"},children:[(0,z.jsx)("label",{style:{fontVariant:"small-caps",fontSize:"90%"},children:(0,z.jsx)("code",{children:r})}),(0,z.jsxs)("div",{style:{display:"flex",flexDirection:"row",gap:"5px",marginTop:"20px"},children:[(0,z.jsx)(kl,{direction:"ccw",params:[l],onUpdate:function(e){return c(n,1,e)}}),(0,z.jsx)(kl,{direction:"cw",params:[i],onUpdate:function(e){return c(n,0,e)}})]})]},n)}))})]})},Ll=t(56634),Rl={};Rl.styleTagTransform=A(),Rl.setAttributes=d(),Rl.insert=f().bind(null,"head"),Rl.domAPI=s(),Rl.insertStyleElement=h(),c()(Ll.Z,Rl);var Nl=Ll.Z&&Ll.Z.locals?Ll.Z.locals:void 0;function _l(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function Ml(e){var n,t,o=e.actions,i=(n=(0,r.useState)(!1),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||function(e,n){if(e){if("string"==typeof e)return _l(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?_l(e,n):void 0}}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=i[0],c=i[1],l=(0,r.useRef)(),s=(0,r.useCallback)((function(e){l.current&&!l.current.contains(e.target)&&c(!1)}),[l,c]);return(0,r.useEffect)((function(){return document.body.addEventListener("click",s),function(){return document.body.removeEventListener("click",s)}}),[s]),(0,z.jsxs)("div",{ref:l,className:[Nl.menu,a&&Nl.open].join(" "),children:[(0,z.jsx)("p",{onClick:function(){return c(!a)},children:(0,z.jsx)(J,{name:"ellipsis"})}),(0,z.jsx)("ul",{children:o.map((function(e,n){return(0,z.jsx)("li",{onClick:function(){return function(e){c(!1),e()}(e.callback)},children:e.content},n)}))})]})}function Yl(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function Kl(e){var n,t=e.activeLayer,o=e.additionalActions,a=void 0===o?[]:o,c=(0,i.I0)(),l=(0,r.useMemo)((function(){return{transparentToKeypress:function(){return c(Kc({layerIndex:t}))},transparentToNone:function(){return c(Zc({layerIndex:t}))},noneToKeypress:function(){return c(qc({layerIndex:t}))},noneToTransparent:function(){return c(Uc({layerIndex:t}))},emptyKeypressToTransparent:function(){return c(Gc({layerIndex:t}))},emptyKeypressToNone:function(){return c(zc({layerIndex:t}))}}}),[c,t]);return(0,z.jsx)(Ml,{actions:[].concat((n=a,function(e){if(Array.isArray(e))return Yl(e)}(n)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(n)||function(e,n){if(e){if("string"==typeof e)return Yl(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Yl(e,n):void 0}}(n)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),[{callback:l.transparentToKeypress,content:(0,z.jsxs)(z.Fragment,{children:["Convert ",(0,z.jsx)("code",{children:"&trans"})," to ",(0,z.jsx)("code",{children:"&kp"})]})},{callback:l.transparentToNone,content:(0,z.jsxs)(z.Fragment,{children:["Convert ",(0,z.jsx)("code",{children:"&trans"})," to ",(0,z.jsx)("code",{children:"&none"})]})},{callback:l.noneToKeypress,content:(0,z.jsxs)(z.Fragment,{children:["Convert ",(0,z.jsx)("code",{children:"&none"})," to ",(0,z.jsx)("code",{children:"&kp"})]})},{callback:l.noneToTransparent,content:(0,z.jsxs)(z.Fragment,{children:["Convert ",(0,z.jsx)("code",{children:"&none"})," to ",(0,z.jsx)("code",{children:"&trans"})]})},{callback:l.emptyKeypressToTransparent,content:(0,z.jsxs)(z.Fragment,{children:["Convert ",(0,z.jsx)("code",{children:"&kp ⦸"})," to ",(0,z.jsx)("code",{children:"&trans"})]})},{callback:l.emptyKeypressToNone,content:(0,z.jsxs)(z.Fragment,{children:["Convert ",(0,z.jsx)("code",{children:"&kp ⦸"})," to ",(0,z.jsx)("code",{children:"&none"})]})}])})}Ml.propTypes={actions:G().arrayOf(G().shape({callback:G().func.isRequired,content:G().oneOfType([G().node,G().string]).isRequired})).isRequired},Kl.propTypes={activeLayer:G().number.isRequired,additionalActions:G().arrayOf(G().shape({callback:G().func.isRequired,content:G().oneOfType([G().node,G().string]).isRequired}))};var Zl=t(59500),ql={};ql.styleTagTransform=A(),ql.setAttributes=d(),ql.insert=f().bind(null,"head"),ql.domAPI=s(),ql.insertStyleElement=h(),c()(Zl.Z,ql);var Ul=Zl.Z&&Zl.Z.locals?Zl.Z.locals:void 0;function Gl(e){return Gl="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Gl(e)}function zl(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Wl(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?zl(Object(t),!0).forEach((function(n){Fl(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):zl(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Fl(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Gl(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Gl(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Gl(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Xl(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var Vl=function(e){var n,t,o=e.activeLayer,a=e.onClose,c=(0,i.I0)(),l=(0,i.v9)(Ic)[o],s=(n=(0,r.useState)(_n()(l,["name","label"])),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||function(e,n){if(e){if("string"==typeof e)return Xl(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Xl(e,n):void 0}}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),u=s[0],f=s[1];return(0,z.jsx)(gn,{onDismiss:a,children:(0,z.jsxs)(pn,{dismissText:"",children:[(0,z.jsxs)("h2",{children:["Customize Layer ",(0,z.jsx)("code",{children:l.name})]}),(0,z.jsxs)("div",{children:[(0,z.jsxs)("div",{className:Ul.field,children:[(0,z.jsx)("label",{htmlFor:"customize-layer-name",children:"Name"}),(0,z.jsx)(la,{id:"customize-layer-name",placeholder:"Default",value:u.name,validator:Hi,onChange:function(e){return f((function(n){return Wl(Wl({},n),{},{name:e.target.value})}))}})]}),(0,z.jsxs)("div",{className:Ul.field,children:[(0,z.jsx)("label",{htmlFor:"customize-layer-label",children:"Label"}),(0,z.jsx)("input",{id:"customize-layer-label",placeholder:"Default",value:u.label,onChange:function(e){return f((function(n){return Wl(Wl({},n),{},{label:e.target.value})}))}})]})]}),(0,z.jsxs)("div",{style:{textAlign:"center",gap:"5px"},children:[(0,z.jsx)($e,{onClick:function(){c(_c(Wl({layerIndex:o},u))),a()},children:"OK"}),(0,z.jsx)($e,{onClick:a,secondary:!0,children:"Cancel"})]})]})})};function Ql(){var e=(0,i.I0)(),n=(0,r.useContext)(Kt).bindingCount;return(0,z.jsxs)("div",{style:{textAlign:"center"},children:[(0,z.jsx)("h3",{children:"No keymap layers defined"}),(0,z.jsx)($e,{onClick:function(){return e(Lc({bindingCount:n}))},children:"Add layer"})]})}function Hl(e){var n=e.layout,t=e.activeLayer,o=(0,i.I0)(),a=(0,i.v9)(Ic)[t],c=(0,r.useCallback)((function(e,n){o(Mc({layerIndex:t,bindIndex:e,binding:n}))}),[o,t]);return(0,z.jsx)(ct,{layout:n,bindings:a.bindings,renderKey:function(e){var n,t,r=e.index,o=e.keyLayout;return a.bindings[r]&&(0,z.jsx)(Mi,{label:o.label,value:null===(n=a.bindings[r])||void 0===n?void 0:n.value,params:null===(t=a.bindings[r])||void 0===t?void 0:t.params,onUpdate:function(e){return c(r,e)}})}})}var Jl=t(62029);function $l(e,n){if(e){if("string"==typeof e)return es(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?es(e,n):void 0}}function es(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var ns={keysHeld:[],keysHeldBeforeLastRelease:[]};function ts(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(e,n)||function(e,n){if(e){if("string"==typeof e)return rs(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?rs(e,n):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function rs(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var os={Alt:"ALT",Control:"CTRL",Shift:"SHFT",Meta:"GUI",ArrowUp:"UP",ArrowDown:"DOWN",ArrowLeft:"LEFT",ArrowRight:"RIGHT",Escape:"ESC",Tab:"TAB",Enter:"RET",Home:"HOME",End:"END",PageDown:"PG_DN",PageUp:"PG_UP",Backspace:"BSPC",Delete:"DEL"};function is(e,n){var t=arguments.length>2&&void 0!==arguments[2]&&arguments[2],o=(0,i.I0)(),a=ts((0,r.useState)(t),2),c=a[0],l=a[1],s=ts((0,r.useState)(0),2),u=s[0],f=s[1],p=(0,r.useCallback)((function(){u===n.length-1?(f(0),l(!1)):f(u+1)}),[u,f,n.length,l]),d=(0,r.useCallback)((function(n){var t=function(e){var n=function(e){return(0,ye.compact)([e.altKey&&"LA",e.ctrlKey&&"LC",e.metaKey&&"LG",e.shiftKey&&"LS"])}(e),t=(0,Jl.mapCharacter)(e.key.toLowerCase())||function(e){var n=os[e.key],t=function(e){switch(e.location){case 1:return"L";case 2:return"R";default:return""}}(e);return n?{value:"&kp",params:[{value:t+n,params:[]}]}:null}(e);if(t)return{value:t.value,params:n.reduce((function(e,n){return[{value:n,params:e}]}),t.params)}}(n);t&&(o(Mc({layerIndex:e,bindIndex:u,binding:t})),p())}),[e,u,p,o]);!function(e,n){var t,o,i=(t=(0,r.useReducer)((function(e,n){switch(n.type){case"KEY_DOWN":return function(e,n){return{keysHeld:[].concat((t=e.keysHeld,function(e){if(Array.isArray(e))return es(e)}(t)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(t)||$l(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),[n.event.key]),keysHeldBeforeLastRelease:[]};var t}(e,n);case"KEY_UP":return function(e,n){return{keysHeld:[],keysHeldBeforeLastRelease:e.keysHeld.filter((function(e){return e!==n.event.key}))}}(e,n);case"RESET":return ns;default:return e}}),ns),o=2,function(e){if(Array.isArray(e))return e}(t)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(t,o)||$l(t,o)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=i[0],c=i[1],l=(0,r.useCallback)((function(e){e.repeat||(e.preventDefault(),c({type:"KEY_DOWN",event:e}))}),[c]),s=(0,r.useCallback)((function(e){a.keysHeldBeforeLastRelease.includes(e.key)||(e.preventDefault(),n(e),c({type:"KEY_UP",event:e}))}),[a.keysHeldBeforeLastRelease,n,c]);(0,r.useEffect)((function(){if(e)return document.body.addEventListener("keydown",l),document.body.addEventListener("keyup",s),function(){document.body.removeEventListener("keydown",l),document.body.removeEventListener("keyup",s)}}),[e,l,s])}(c,d);var y=(0,r.useCallback)((function(){l(!0)}),[l]),h=(0,r.useCallback)((function(){l(!1)}),[l]);return[{isActive:c,bindIndex:u},{startQuickAssignment:y,cancelQuickAssignment:h,setBindIndex:f}]}function as(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function cs(e){var n,t,o=e.layout,a=e.layerIndex,c=e.onClose,l=(0,i.v9)(Ic)[a],s=(n=is(a,o,!0),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||function(e,n){if(e){if("string"==typeof e)return as(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?as(e,n):void 0}}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),u=s[0],f=s[1],p=(0,r.useMemo)((function(){return Rn(o,{overrides:{minWidth:"400px"}})}),[o]);return(0,r.useEffect)((function(){u.isActive||c()}),[u.isActive,c]),(0,z.jsx)(gn,{onDismiss:c,children:(0,z.jsxs)(pn,{classes:[Ul.quickAssignDialog],dismissText:"",children:[(0,z.jsx)("h2",{children:"Quick-assign layer keybindings"}),(0,z.jsxs)("p",{children:["Press a key on your keyboard to set a ",(0,z.jsx)("code",{children:"&kp"})," binding at the highlighted position in your keymap."]}),(0,z.jsx)("div",{style:p,children:(0,z.jsx)(ct,{layout:o,bindings:l.bindings,renderKey:function(e){var n,t,r=e.index,o=e.keyLayout;return l.bindings[r]&&(0,z.jsx)(Mi,{label:o.label,keyWrapperProps:{selectable:!1,onClick:function(){return f.setBindIndex(r)},className:st()([Ul.quickBindKey,u.bindIndex===r&&Ul.quickBindKeyHighlight]).join(" ")},value:null===(n=l.bindings[r])||void 0===n?void 0:n.value,params:null===(t=l.bindings[r])||void 0===t?void 0:t.params,onUpdate:function(e){}})}})}),(0,z.jsxs)("div",{style:{textAlign:"center"},children:[(0,z.jsx)(Yt,{children:"Click on a different key to jump ahead or correct a previous binding."}),(0,z.jsx)("p",{children:(0,z.jsx)($e,{onClick:c,children:"Done"})})]})]})})}function ls(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(e,n)||function(e,n){if(e){if("string"==typeof e)return ss(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?ss(e,n):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ss(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var us=function(e){var n=e.sensors,t=(0,i.v9)(Ic),o=ls((0,r.useState)(0),2),a=o[0],c=o[1],l=ls((0,r.useState)(!1),2),s=l[0],u=l[1],f=ls((0,r.useState)(!1),2),p=f[0],d=f[1],y=Math.max(0,Math.min(a,t.length-1)),h=(0,r.useContext)(Kt),b=h.layout,A=h.wrapperStyle,m=(0,r.useCallback)((function(){return u(!0)}),[u]),v=(0,r.useCallback)((function(){return d(!0)}),[d]),g=(0,r.useCallback)((function(){return d(!1)}),[d]),x=(0,r.useMemo)((function(){return[{callback:m,content:"Change Configuration"},{callback:v,content:(0,z.jsxs)(z.Fragment,{children:["Quick ",(0,z.jsx)("code",{children:"&kp"})," Assignment"]})}]}),[m,v]);if(0===t.length)return(0,z.jsx)(Ql,{});var j=A.width,C=A.height,w=A.margin,E=A.padding;return(0,z.jsxs)(z.Fragment,{children:[(0,z.jsx)(wl,{activeLayer:y,onSelect:c}),(0,z.jsxs)("div",{style:{margin:w,padding:E,width:"fit-content"},children:[(0,z.jsxs)("div",{style:{width:j,height:C},children:[(0,z.jsxs)("h3",{style:{position:"relative"},children:["Key Bindings ",(0,z.jsx)(Kl,{activeLayer:a,additionalActions:x})]}),(0,z.jsx)(Hl,{layout:b,activeLayer:y})]}),(0,z.jsx)("div",{className:Ul.sensors,"data-sensor-count":n.length,style:{},children:(0,z.jsx)(Dl,{sensors:n,layer:y})})]}),s&&(0,z.jsx)(Vl,{activeLayer:y,onClose:function(){return u(!1)}}),p&&(0,z.jsx)(cs,{layout:b,layerIndex:y,onClose:g})]})};function fs(e){return["&macro_tap","&macro_press","&macro_release","&macro_tap_time","&macro_wait_time","&macro_pause_for_release"].includes(e.value)}var ps=t(96201),ds={};ds.styleTagTransform=A(),ds.setAttributes=d(),ds.insert=f().bind(null,"head"),ds.domAPI=s(),ds.insertStyleElement=h(),c()(ps.Z,ds);var ys=ps.Z&&ps.Z.locals?ps.Z.locals:void 0,hs=t(18446),bs=t.n(hs),As=t(35839),ms={};ms.styleTagTransform=A(),ms.setAttributes=d(),ms.insert=f().bind(null,"head"),ms.domAPI=s(),ms.insertStyleElement=h(),c()(As.Z,ms);var vs=As.Z&&As.Z.locals?As.Z.locals:void 0,gs=["bindings","children","dragging","dragMode"],xs=["isDropping","control","classes"],js=["bind"],Cs=["bind"],ws=["row","isDropping"];function Es(e){return Es="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Es(e)}function Os(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(e,n)||ks(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ks(e,n){if(e){if("string"==typeof e)return Ss(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Ss(e,n):void 0}}function Ss(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function Bs(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}function Ps(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Is(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Ps(Object(t),!0).forEach((function(n){Ts(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Ps(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Ts(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Es(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Es(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Es(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Ds(e){var n=e.bindings,t=(e.children,e.dragging),o=e.dragMode,i=Bs(e,gs),a=Os((0,r.useState)([null,null]),2),c=a[0],l=a[1],s=(0,r.useMemo)((function(){return function(e){return e.reduce((function(e,n,t){var r=function(){return 0===e.at(-1).length};return(fs(n)&&!r()||!r()&&fs(e.at(-1)[0])||6===e.at(-1).length)&&e.push([]),e.at(-1).push(Is(Is({},n),{},{index:t})),e}),[[]])}(n)}),[n]);function u(e){console.log("enter",e),l((function(){return e}))}function f(e){return bs()(c,e)}function p(e){l((function(n){return console.log("leaving",e,"currently in",n),bs()(n,e)?[null,null]:n}))}function d(){console.log("handleDrop",c);var e=Os(c,3),t=e[0],r=e[1],o=e[2],a=s[t][r].index,l=a<n.length-1?a+1:-1;i.onDrop(1===o?l:a)}return t&&(0,z.jsxs)("div",{className:[vs.dropTargets,t?vs.dragging:"","row"===o?vs.dropRowOnly:""].join(" "),children:[s.map((function(e,n){return(0,z.jsxs)(r.Fragment,{children:[(0,z.jsx)(_s,{row:e,isDropping:f([n,0,-1]),onDragEnter:function(){return u([n,0,-1])},onDragLeave:function(){return p([n,0,-1])},onDrop:d}),e.map((function(t,o){return(0,z.jsxs)(r.Fragment,{children:[(0,z.jsx)(Rs,{bind:t,isDropping:f([n,o,0]),onDragEnter:function(){return u([n,o,0])},onDragLeave:function(){return p([n,o,0])},onDrop:d}),(0,z.jsx)(Ns,{bind:t,isDropping:f([n,o,1]),onDragEnter:function(){return u([n,o,1])},onDragLeave:function(){return p([n,o,1])},onDrop:d,"data-extend":fs(t)||o!==e.length-1?0:Math.max(0,5-o)})]},o)}))]},n)})),(0,z.jsx)(_s,{row:s.length-1,isDropping:f([s.length-1,s.at(-1).length-1,1]),onDragEnter:function(){return u([s.length-1,s.at(-1).length-1,1])},onDragLeave:function(){return p([s.length-1,s.at(-1).length-1,1])},onDrop:d})]})}function Ls(e){var n,t=e.isDropping,r=e.control,o=void 0!==r&&r,i=e.classes,a=void 0===i?[]:i,c=Bs(e,xs);return(0,z.jsx)("div",Is({"data-is-control":o,className:[vs.dropTargetHalf,t?vs.droppable:""].concat((n=a,function(e){if(Array.isArray(e))return Ss(e)}(n)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(n)||ks(n)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())).join(" ")},c))}function Rs(e){var n=e.bind,t=Bs(e,js);return(0,z.jsx)(Ls,Is({control:fs(n)},t))}function Ns(e){var n=e.bind,t=Bs(e,Cs);return(0,z.jsx)(Ls,Is({control:fs(n),classes:[vs.secondHalf]},t))}function _s(e){e.row;var n=e.isDropping,t=Bs(e,ws);return(0,z.jsx)("div",Is({"data-drop-mode":"row",className:[vs.dropTargetRow,n?vs.droppable:""].join(" ")},t))}function Ms(e,n){if(e){if("string"==typeof e)return Ys(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Ys(e,n):void 0}}function Ys(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var Ks=function(e){return{value:"&kp",params:[{value:e,params:[]}]}},Zs=[{pattern:/[0-9]/,convert:function(e){return Ks("N".concat(e))}},{pattern:/[a-z]/,convert:function(e){return Ks(e.toUpperCase())}},{pattern:/[A-Z]/,convert:function(e){return{value:"&kp",params:[{value:"LS",params:[{value:e.toUpperCase(),params:[]}]}]}}}],qs={"!":Ks("EXCL"),"@":Ks("AT"),"#":Ks("POUND"),$:Ks("DLLR"),"%":Ks("PRCNT"),"^":Ks("CARET"),"&":Ks("AMPS"),"*":Ks("STAR"),"(":Ks("LPAR"),")":Ks("RPAR"),"\n":Ks("RET")," ":Ks("SPACE"),"-":Ks("MINUS"),_:Ks("UNDER"),"=":Ks("EQUAL"),"+":Ks("PLUS"),"[":Ks("LBKT"),"]":Ks("LBRC"),"{":Ks("RBKT"),"}":Ks("RBRC"),"\\":Ks("BSLH"),"|":Ks("PIPE"),"":Ks("TILDE2"),";":Ks("SEMI"),":":Ks("COLON"),"'":Ks("SQT"),'"':Ks("DQT"),"`":Ks("GRAVE"),"~":Ks("TILDE"),",":Ks("COMMA"),"<":Ks("LT"),".":Ks("DOT"),">":Ks("GT"),"/":Ks("FSLH"),"?":Ks("QMARK")};var Us=function(e){var n,t,o=e.onClose,i=(0,r.useContext)(j),a=i.sources,c=i.mergedGlyphs,l=(n=(0,r.useState)("Type something..."),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||Ms(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),s=l[0],u=l[1],f=(0,r.useMemo)((function(){return s.split("").reduce((function(e,n){var t=function(e){if(qs[e])return qs[e];var n,t=function(e,n){var t="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!t){if(Array.isArray(e)||(t=Ms(e))){t&&(e=t);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,c=!1;return{s:function(){t=t.call(e)},n:function(){var e=t.next();return a=e.done,e},e:function(e){c=!0,i=e},f:function(){try{a||null==t.return||t.return()}finally{if(c)throw i}}}}(Zs);try{for(t.s();!(n=t.n()).done;){var r=n.value,o=r.pattern,i=r.convert;if(e.match(o))return i(e)}}catch(e){t.e(e)}finally{t.f()}}(n);return t&&e.push(t),e}),[])}),[s]).map((function(e){return No(e.value,e.params,a,void 0,c)})),p=(0,r.useCallback)((function(e){e&&(e.focus(),e.select())}),[]);return(0,z.jsx)(gn,{children:(0,z.jsxs)(pn,{dismissText:!1,children:[(0,z.jsx)("h2",{children:"Create Typing Sequence"}),(0,z.jsx)("p",{children:"Type a message to generate a sequence of bindings in the macro."}),(0,z.jsx)("textarea",{value:s,ref:p,style:{width:"100%",height:"6rem"},onChange:function(e){return u(e.target.value)}}),(0,z.jsx)("div",{className:ys.macroBindings,children:f.map((function(e,n){return(0,z.jsx)(r.Fragment,{children:(0,z.jsx)(mt,{selectable:!1,children:(0,z.jsx)(Eo,{node:e.params[0],onSelect:function(){}})})},n)}))}),(0,z.jsxs)("div",{className:ys.macroActions,children:[(0,z.jsx)($e,{onClick:function(){return o(f)},children:"Add to macro"}),(0,z.jsx)($e,{onClick:function(){return o([])},secondary:!0,children:"Cancel"})]})]})})},Gs=function(e){return e.keyboard.keymap.macros},zs=(0,Xa.oM)({name:"macros",initialState:[],reducers:{addMacro:function(e){e.push({identifier:"new_macro",label:"new_macro",bindings:[]})},renameMacro:function(e,n){e[n.payload.index].identifier=n.payload.name},deleteMacro:function(e,n){return e.splice(n.payload.index,1)},addMacroControlBinding:function(e,n){e[n.payload.macroIndex].bindings.push({value:"&macro_press",params:[]})},addMacroKeyBinding:function(e,n){e[n.payload.macroIndex].bindings.push(n.payload.binding)},updateMacroBinding:function(e,n){e[n.payload.macroIndex].bindings[n.payload.bindIndex]=n.payload.binding},reorderMacroBinding:function(e,n){var t,r,o;e[n.payload.macroIndex].bindings=(t=e[n.payload.macroIndex].bindings,r=n.payload.bindIndex,-1===(o=n.payload.targetIndex)?[].concat(ni(t.filter((function(e,n){return n!==r}))),[t[r]]):t.reduce((function(e,n,i){return i===o&&e.push(t[r]),i!==r&&e.push(n),e}),[]))},deleteMacroBinding:function(e,n){e[n.payload.macroIndex].bindings.splice(n.payload.macroIndex,1)},customizeMacroOptions:function(e,n){Object.assign(e[n.payload.macroIndex],n.payload.options)}}}),Ws=zs.actions,Fs=Ws.addMacro,Xs=Ws.renameMacro,Vs=Ws.deleteMacro,Qs=Ws.addMacroControlBinding,Hs=Ws.addMacroKeyBinding,Js=Ws.updateMacroBinding,$s=Ws.reorderMacroBinding,eu=Ws.deleteMacroBinding,nu=Ws.customizeMacroOptions,tu=zs.reducer;function ru(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(e,n)||ou(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ou(e,n){if(e){if("string"==typeof e)return iu(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?iu(e,n):void 0}}function iu(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function au(e){var n=e.macroIndex,t=e.bindings,o=e.dispatch,i=ru((0,r.useState)(null),2),a=i[0],c=i[1],l=ru((0,r.useState)(!1),2),s=l[0],u=l[1];return(0,r.useEffect)((function(){function e(){c(null)}function n(e){e.stopPropagation(),e.preventDefault()}return document.body.addEventListener("drop",e),document.body.addEventListener("dragover",n),function(){document.body.removeEventListener("drop",e),document.body.removeEventListener("dragover",n)}}),[c]),(0,z.jsxs)(z.Fragment,{children:[(0,z.jsxs)("div",{className:ys.macroBindings,children:[t.map((function(e,i){return(0,z.jsx)(r.Fragment,{children:(0,z.jsxs)(mt,{"data-index":i,themeClass:fs(e)?ys.controlBinding:"",draggable:!0,onDragStart:function(e){return function(e,n){if(e.dataTransfer.items.length)e.dataTransfer.clearData();else{var r=t[n];c({index:n,mode:fs(r)?"row":"col",isControlBinding:fs(r)})}}(e,i)},children:[(0,z.jsx)(Mi,{context:fs(e)?"macros":void 0,value:e.value,params:e.params,onUpdate:function(e){o(Js({macroIndex:n,bindIndex:i,binding:e}))}}),(0,z.jsx)("div",{className:ys.actions,children:(0,z.jsx)(J,{name:"trash",className:ys.deleteBind,onClick:vc((function(){return o(eu({macroIndex:n,bindIndex:i}))}))})})]},i)},i)})),(0,z.jsx)(Ds,{dragging:a,bindings:t,onDrop:function(e){o($s({macroIndex:n,bindIndex:a.index,targetIndex:e})),c(null)}})]}),s&&(0,z.jsx)(Us,{onClose:function(e){u(!1);var t,r=function(e,n){var t="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!t){if(Array.isArray(e)||(t=ou(e))){t&&(e=t);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,c=!1;return{s:function(){t=t.call(e)},n:function(){var e=t.next();return a=e.done,e},e:function(e){c=!0,i=e},f:function(){try{a||null==t.return||t.return()}finally{if(c)throw i}}}}(e);try{for(r.s();!(t=r.n()).done;){var i=t.value;o(Hs({macroIndex:n,binding:i}))}}catch(e){r.e(e)}finally{r.f()}}}),(0,z.jsxs)("div",{className:ys.macroActions,children:[(0,z.jsx)($e,{onClick:function(){return o(Qs({macroIndex:n}))},children:"Add Control Binding"}),(0,z.jsx)($e,{onClick:function(){o(Hs({binding:{value:"&kp",params:[]},macroIndex:n}))},children:"Add Key Binding"}),(0,z.jsx)($e,{onClick:function(){return u(!0)},children:"Add String Sequence"})]})]})}au.propTypes={bindings:G().array.isRequired,macroIndex:G().number.isRequired,dispatch:G().func.isRequired};var cu=au;function lu(e){return lu="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},lu(e)}function su(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function uu(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?su(Object(t),!0).forEach((function(n){fu(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):su(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function fu(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==lu(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==lu(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===lu(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function pu(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var du=function(e){var n,t,o=e.macro,i=e.onUpdate,a=(n=(0,r.useState)(_n()(o,["label","waitMs","tapMs"])),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||function(e,n){if(e){if("string"==typeof e)return pu(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?pu(e,n):void 0}}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),c=a[0],l=a[1];return(0,z.jsx)(gn,{children:(0,z.jsxs)(pn,{onDismiss:function(){i(c)},children:[(0,z.jsxs)("h2",{children:["Customize [",(0,z.jsx)("code",{children:o.identifier}),"]"]}),(0,z.jsxs)("div",{children:[(0,z.jsxs)("div",{className:ys.field,children:[(0,z.jsx)("label",{htmlFor:"customize-macro-label",children:"Label"}),(0,z.jsx)("input",{id:"customize-macro-label",value:c.label,onChange:function(e){return l((function(n){return uu(uu({},n),{},{label:e.target.value})}))}})]}),(0,z.jsxs)("div",{className:ys.field,children:[(0,z.jsx)("label",{htmlFor:"customize-macro-wait",children:"Wait (ms)"}),(0,z.jsx)("input",{id:"customize-macro-wait",type:"number",placeholder:"Default",value:c.waitMs,onChange:function(e){return l((function(n){return uu(uu({},n),{},{waitMs:""===e.target.value?void 0:Number(e.target.value)})}))}})]}),(0,z.jsxs)("div",{className:ys.field,children:[(0,z.jsx)("label",{htmlFor:"customize-macro-tap",children:"Tap (ms)"}),(0,z.jsx)("input",{id:"customize-macro-tap",type:"number",placeholder:"Default",value:c.tapMs,onChange:function(e){return l((function(n){return uu(uu({},n),{},{tapMs:""===e.target.value?void 0:Number(e.target.value)})}))}})]})]})]})})};function yu(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function hu(e){var n,t,o=e.index,i=e.macro,a=e.dispatch,c=(n=(0,r.useState)(!1),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||function(e,n){if(e){if("string"==typeof e)return yu(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?yu(e,n):void 0}}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),l=c[0],s=c[1],u=(0,r.useContext)(j).identifiers;return(0,z.jsxs)("div",{className:ys.macro,children:[l&&(0,z.jsx)(du,{macro:i,onUpdate:function(e){s(!1),a(nu({macroIndex:o,options:e}))}}),(0,z.jsxs)("div",{className:ys.heading,children:[(0,z.jsx)(kc,{value:i.identifier,validate:function(e){return $i(e)||(u.includes(e)?'Cannot use existing identifier "'.concat(e,'"'):null)},render:function(e){return(0,z.jsx)("h5",{children:(0,z.jsx)("code",{children:e})})},onUpdate:function(e){return a(Xs({index:o,name:e}))}}),(0,z.jsxs)("div",{children:[(0,z.jsx)(J,{name:"wrench",className:"".concat(ys.action),onClick:function(){return s(!0)}}),(0,z.jsx)(J,{name:"trash-can",className:"".concat(ys.action," ").concat(ys.remove),onClick:function(){return a(Vs({index:o}))}})]})]}),(0,z.jsx)(cu,{macroIndex:o,bindings:i.bindings,dispatch:a})]})}hu.propTypes={index:G().number.isRequired,macro:G().shape({identifier:G().string,bindings:G().array.isRequired}).isRequired,dispatch:G().func.isRequired};var bu=hu,Au=function(){var e=(0,i.v9)(Gs),n=(0,i.I0)();return(0,z.jsxs)("div",{className:ys.main,children:[(0,z.jsxs)("div",{className:ys.sidebar,children:[(0,z.jsxs)(La,{external:!0,href:"https://zmk.dev/docs/behaviors/macros",children:[(0,z.jsx)(J,{name:"book"})," ZMK Docs: Macros"]}),(0,z.jsx)($e,{onClick:function(){return n(Fs())},children:"Add New Macro"})]}),e.map((function(e,t){return(0,z.jsx)(bu,{macro:e,index:t,dispatch:n},t)}))]})},mu={},vu=G().string.isRequired,gu=G().arrayOf(G().shape(mu));mu.value=vu,mu.params=gu;var xu=G().shape(mu),ju=G().shape({identifier:G().string,index:G().number,bindings:G().arrayOf(xu),keyPositions:G().arrayOf(G().number).isRequired}),Cu=G().shape({index:G().number,name:G().string,identifier:G().string,bindings:G().arrayOf(xu).isRequired,sensorBindings:G().arrayOf(xu)}),wu=G().shape({layers:G().arrayOf(Cu).isRequired,combos:G().arrayOf(ju)}),Eu=t(7739),Ou=t.n(Eu);function ku(e){return e.every((function(e){return void 0===e.row&&void 0===e.col}))?["Layout in info.json has no row/col definitions. Generated keymap files will not be nicely formatted."]:[]}var Su=t(2024);function Bu(e){return Bu="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Bu(e)}function Pu(e){return function(e){if(Array.isArray(e))return Iu(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,n){if(e){if("string"==typeof e)return Iu(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Iu(e,n):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Iu(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function Tu(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Du(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Bu(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Bu(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Bu(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Lu(e,n){var t=Ou()(e,n);return Object.values(t).filter((function(e){return e.length>1}))}function Ru(e){var n=e.layers.map((function(e,n){return{location:"Keymap - Layer #".concat(n," (").concat(e.name,")"),path:"keymap.layers[".concat(n,"]"),name:e.name}})),t=e.combos.map((function(e,n){return{location:"Combos - Combo #".concat(n," (").concat(e.identifier,")"),path:"combos[".concat(n,"].name"),name:e.identifier}})),r=e.macros.map((function(e,n){return{location:"Macros - Macro #".concat(n," (").concat(e.identifier,")"),path:"macros[".concat(n,"].name"),name:e.identifier}})),o=function(e){return e.map((function(e,n){return{location:"Behaviors - Behavior #".concat(n," (").concat(e.labels[0],") - Name"),path:"behaviors[".concat(n,"].name"),name:e.name}}))}(e.behaviors),i=[].concat(Pu(Lu(n,"name")),Pu(Lu(t,"name")),Pu(Lu(r,"name")),Pu(Lu(o,"name"))),a=[].concat(Pu(n.filter((function(e){return Su.includes(e.name)}))),Pu(t.filter((function(e){return Su.includes(e.name)}))),Pu(r.filter((function(e){return Su.includes(e.name)}))),Pu(o.filter((function(e){return Su.includes(e.name)}))));return{duplicates:i,redefined:a,passwordMacros:Pu(r.filter((function(e){return n=e.name,[/(^|[\b_])pass(word)?([\b_]|$)/].some((function(e){return n.match(e)}));var n})))}}function Nu(e){var n=Lu([].concat(e.layers.reduce((function(e,n,t){return n.label&&e.push({location:"Keymap - Layer #".concat(t," (").concat(n.name,")"),path:"keymap.layers[".concat(t,"].label"),label:n.label}),e}),[]),e.macros.reduce((function(e,n,t){return n.label&&e.push({location:"Macros - Macro #".concat(t," (").concat(n.identifier,") - Label"),path:"macros[".concat(t,"].label"),label:n.label}),e}),[]),function(e){return e.reduce((function(e,n,t){return n.label&&e.push({location:"Behaviors - Behavior #".concat(t," (").concat(n.labels[0],") - Label"),path:"behaviors[".concat(t,"].label"),label:n.properties.label.parsed}),e}),[])}(e.behaviors)),"label");return{duplicates:n}}function _u(e){var n=Ou()([].concat(e.macros.map((function(e,n){return{location:"Macros > Macro #".concat(n," (").concat(e.identifier,")"),path:"macros[".concat(n,"].name"),ref:e.identifier}})),function(e){return e.map((function(e,n){return{location:"Behaviors - Behavior #".concat(n," (").concat(e.labels[0],") - Bind"),path:"behaviors[".concat(n,"].bind"),ref:e.labels[0]}}))}(e.behaviors)),"ref");return{duplicates:Object.values(n).reduce((function(e,n){return n.length>1&&e.push(we()(n,"path")),e}),[])}}var Mu=t(79577),Yu={};Yu.styleTagTransform=A(),Yu.setAttributes=d(),Yu.insert=f().bind(null,"head"),Yu.domAPI=s(),Yu.insertStyleElement=h(),c()(Mu.Z,Yu);var Ku=Mu.Z&&Mu.Z.locals?Mu.Z.locals:void 0;function Zu(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function qu(e){return e.location}function Uu(e){var n,t,o=e.name,i=e.explanation,a=e.warnings,c=e.renderWarning,l=void 0===c?qu:c,s=(n=(0,r.useState)(0===a.length),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||function(e,n){if(e){if("string"==typeof e)return Zu(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Zu(e,n):void 0}}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),u=s[0],f=s[1];return(0,z.jsxs)("div",{className:st()([Ku.warningCategory,0===a.length&&Ku.emptyCategory,u&&Ku.collapsedCategory]).join(" "),children:[(0,z.jsxs)("h3",{onClick:function(){return f(!u)},children:[(0,z.jsx)(J,{className:Ku.caret,name:"caret-down"})," "," ",o," ",(0,z.jsxs)("em",{children:["(",a.length," issues)"]})]}),(0,z.jsxs)("div",{className:Ku.warningDetails,children:[(0,z.jsx)("blockquote",{children:i}),a.length>0?(0,z.jsx)("ul",{children:a.map((function(e,n){return(0,z.jsx)("li",{children:l(e)},n)}))}):(0,z.jsx)("p",{children:"No problems"})]})]})}var Gu=(0,z.jsx)(La,{external:!0,href:"https://github.com/nickcoutsos/keymap-editor/issues",children:"issue"}),zu=function(e){var n=e.sanityChecks,t=n.nodeNames,r=n.nodeLabels,o=n.nodeReferences,i=n.layoutMissingPositions;return(0,z.jsxs)("div",{style:{maxWidth:"700px",margin:"0 auto",paddingBottom:"60px"},children:[(0,z.jsx)("h2",{children:"Warnings"}),(0,z.jsx)(Uu,{name:"Layout row/col positions",warnings:i,explanation:(0,z.jsxs)(z.Fragment,{children:[(0,z.jsx)("p",{children:(0,z.jsxs)("em",{children:["Your keyboard's layout metadata should include a ",(0,z.jsx)("code",{children:"row"}),"and ",(0,z.jsx)("code",{children:"col"})," property for each key in order to generate a readable keymap ",(0,z.jsx)("code",{children:"bindings"})," array."]})}),(0,z.jsxs)("p",{children:["For more information see ",(0,z.jsx)(La,{external:!0,href:"https://github.com/nickcoutsos/keymap-editor/wiki/Defining-keyboard-layouts",children:"Keymap Editor Wiki"}),"."]})]}),renderWarning:function(){}}),(0,z.jsx)(Uu,{name:"Duplicate node names",warnings:t.duplicates,explanation:(0,z.jsx)("p",{children:(0,z.jsx)("em",{children:"Node names must within the same section must be unique."})}),renderWarning:function(e){return(0,z.jsxs)(z.Fragment,{children:[(0,z.jsxs)("h4",{children:["Name ",(0,z.jsx)("code",{children:e[0].name})," re-used in:"]}),(0,z.jsx)("ul",{children:e.map((function(e,n){return(0,z.jsx)("li",{children:e.location},n)}))})]})}}),(0,z.jsx)(Uu,{name:"Re-definitions",warnings:t.redefined,explanation:(0,z.jsx)("p",{children:(0,z.jsx)("em",{children:"Node names cannot use existing ZMK identifiers."})})}),(0,z.jsx)(Uu,{name:"Macro Passwords",warnings:t.passwordMacros,explanation:(0,z.jsxs)(z.Fragment,{children:[(0,z.jsx)("p",{children:(0,z.jsx)("em",{children:"Using keyboard macros to enter passwords is a security risk and is strongly discouraged."})}),(0,z.jsx)("p",{children:"Recording passwords in your keyboard means that anyone with physical access to your keyboard would have access to credentials stored within it, whether they know to look for it or not. Also note that through this application you are recording keyboard configuration in a Git repository and storing credentials in a code repository is not considered a safe practice (even if the repository is private)."}),(0,z.jsxs)("p",{children:["Any macros listed here have names which seem to suggest that they are used for password entry. If that is the case I would encourage you to remove them and change the associated password(s) if needed. If this is a mistake feel free to create an ",Gu," to help me avoid false alarms in the future!"]})]})}),(0,z.jsx)(Uu,{name:"Duplicate labels",warnings:r.duplicates,explanation:(0,z.jsx)("p",{children:(0,z.jsx)("em",{children:"Label property values must be unique throughout the entire keymap."})}),renderWarning:function(e){return(0,z.jsxs)(z.Fragment,{children:[(0,z.jsxs)("h4",{children:["Name ",(0,z.jsx)("code",{children:e[0].label})," re-used in:"]}),(0,z.jsx)("ul",{children:e.map((function(e,n){return(0,z.jsx)("li",{children:e.location},n)}))})]})}}),(0,z.jsx)(Uu,{name:"Duplicate node references",warnings:o.duplicates,explanation:(0,z.jsx)("p",{children:(0,z.jsx)("em",{children:"Node references must be unique throughout the entire keymap."})}),renderWarning:function(e){return(0,z.jsxs)(z.Fragment,{children:[(0,z.jsxs)("h4",{children:["Reference ",(0,z.jsxs)("code",{children:["&",e[0].ref]})," re-used in:"]}),(0,z.jsx)("ul",{children:e.map((function(e,n){return(0,z.jsx)("li",{children:e.location},n)}))})]})}})]})};function Wu(e){return function(e){if(Array.isArray(e))return Xu(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||Fu(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Fu(e,n){if(e){if("string"==typeof e)return Xu(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Xu(e,n):void 0}}function Xu(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function Vu(e){var n,t,o=e.text,i=e.tabs,a=e.defaultTab,c=e.children,l=(n=(0,r.useState)(a),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||Fu(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),s=l[0],u=l[1];return(0,z.jsxs)(z.Fragment,{children:[(0,z.jsx)("h3",{style:{display:"inline"},children:o}),(0,z.jsx)("ul",{className:Kn.editorModeTabs,children:i.map((function(e,n){var t=e.name,r=e.tabClasses,o=void 0===r?[]:r;return(0,z.jsx)("li",{onClick:function(){return u(n)},className:(0,ye.compact)([s===n&&Kn.activeEditTab].concat(Wu(o))).join(" "),children:t},n)}))}),c[s]]})}var Qu=function(e){return e.keyboard.keymap};function Hu(e){var n=(0,i.v9)(Qu),t=(0,r.useContext)(Kt).layout,o=e.sensors,a=(0,r.useMemo)((function(){return function(e,n){return function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Tu(Object(t),!0).forEach((function(n){Du(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Tu(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}({nodeNames:Ru(e),nodeLabels:Nu(e),nodeReferences:_u(e)},function(e){return{layoutMissingPositions:ku(e)}}(n))}(n,t)}),[n,t]),c=(0,r.useMemo)((function(){var e=a.nodeNames,n=a.nodeLabels,t=a.nodeReferences,r=a.layoutMissingPositions;return e.duplicates.length+e.redefined.length+e.passwordMacros.length+n.duplicates.length+t.duplicates.length+r.length}),[a]),l=(0,ye.compact)([{name:"layers",component:(0,z.jsx)(us,{sensors:o})},{name:"combos",component:(0,z.jsx)(Al,{})},{name:"macros",component:(0,z.jsx)(Au,{})},{name:(0,z.jsx)("span",{className:Kn.beta,children:"behaviors"}),component:(0,z.jsx)(sc,{})},c>0&&{name:"warnings (".concat(c,")"),tabClasses:[Kn.warningTab],component:(0,z.jsx)(zu,{sanityChecks:a})}]);return(0,z.jsx)(Ue,{keymap:n,children:(0,z.jsx)(Vu,{text:"Editor mode:",tabs:l,defaultTab:0,children:l.map((function(e,n){return(0,z.jsx)(r.Fragment,{children:e.component},n)}))})})}Hu.propTypes={keymap:wu};var Ju=Hu,$u=t(2746),ef={};ef.styleTagTransform=A(),ef.setAttributes=d(),ef.insert=f().bind(null,"head"),ef.domAPI=s(),ef.insertStyleElement=h(),c()($u.Z,ef);var nf=$u.Z&&$u.Z.locals?$u.Z.locals:void 0,tf="https://github.com/nickcoutsos/keymap-editor";function rf(){return(0,z.jsxs)("div",{className:nf.wrapper,children:[(0,z.jsx)("label",{children:"Need help? Open an issue:"}),(0,z.jsxs)("a",{className:nf.githubLink,target:"_blank",rel:"noreferrer",href:tf,children:[(0,z.jsx)(J,{collection:"brands",name:"github"}),"/nickcoutsos/keymap-editor"]})]})}function of(e){return of="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},of(e)}function af(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function cf(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?af(Object(t),!0).forEach((function(n){lf(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):af(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function lf(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==of(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==of(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===of(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}var sf={description:{fontStyle:"italic",fontSize:"90%"}};function uf(e){var n=e.settings,t=e.onUpdate,r=e.onClose;function o(e,r){t(cf(cf({},n),{},lf({},e,r)))}return(0,z.jsx)(gn,{onDismiss:r,children:(0,z.jsxs)(pn,{onDismiss:r,children:[(0,z.jsx)("h1",{children:"Settings"}),(0,z.jsx)("h2",{children:"Keycode glyphs"}),(0,z.jsx)("h3",{children:(0,z.jsxs)("label",{htmlFor:"enable-unicode-glyphs",children:[(0,z.jsx)("input",{id:"enable-unicode-glyphs",type:"checkbox",checked:n.unicodeGlyphs,onChange:function(e){return o("unicodeGlyphs",e.target.checked)}}),"Use Unicode Glyphs"]})}),(0,z.jsxs)("p",{style:sf.description,children:["Use unicode glyphs for visual representations of keycodes like ",(0,z.jsx)("code",{children:"Enter"})," (⮐), ",(0,z.jsx)("code",{children:"Right Arrow"})," (⏵), etc. You can disable this if the symbols don't render correctly."]}),(0,z.jsx)("h3",{children:(0,z.jsxs)("label",{htmlFor:"platform-specific-glyphs",children:["Platform specific glyphs",(0,z.jsxs)("select",{id:"platform-specific-glyphs",value:n.platformGlyphs||"auto",onChange:function(e){return o("platformGlyphs",e.target.value)},children:[(0,z.jsx)("option",{value:"auto",children:"Automatic"}),(0,z.jsx)("option",{value:"win",children:"Windows"}),(0,z.jsx)("option",{value:"mac",children:"macOS"})]})]})}),(0,z.jsxs)("p",{style:sf.description,children:["Render symbols specific to your platform. E.g., render left/right meta key as ",(0,z.jsx)(J,{name:"windows fa-brands"})," for Windows, or ⌘ for macOS."]})]})})}uf.propTypes={settings:G().object.isRequired,onUpdate:G().func.isRequired,onClose:G().func.isRequired},uf.defaultProps={settings:{}};var ff=uf,pf=t(13311),df=t.n(pf),yf=t(20256),hf=["children","style"],bf=["label"];function Af(e){return Af="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Af(e)}function mf(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}function vf(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function gf(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?vf(Object(t),!0).forEach((function(n){xf(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):vf(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function xf(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Af(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Af(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Af(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function jf(e){var n=e.style,t=void 0===n?{}:n,r=e.children;return(0,z.jsx)("div",{style:gf(gf({},{height:"38px",lineHeight:"38px"}),t),children:r})}function Cf(e){var n=e.children,t=e.style,r=void 0===t?{}:t,o=mf(e,hf);return(0,z.jsx)(jf,{style:r,children:(0,z.jsx)("button",gf(gf({style:{height:"100%"}},o),{},{children:n}))})}var wf=window.matchMedia("(prefers-color-scheme: dark)"),Ef=[0,5,10,20,30,40,50,60,70,80,90].reduce((function(e,n){return e["neutral".concat(n)]="hsl(0, 0%, ".concat(n,"%)"),e}),{});function Of(e){var n=e.label,t=mf(e,bf),r=(0,i.v9)((function(e){return e})).theme,o="dark"===r||"system"===r&&wf.matches;return(0,z.jsxs)("div",{style:{display:"inline-block",width:"auto"},children:[(0,z.jsx)("label",{style:{display:"block",width:"100%",fontSize:"120%",color:"var(--fg)"},children:n}),(0,z.jsx)(yf.ZP,gf({styles:{container:function(e,n){return gf(gf({},e),{},{display:"inline-block"})},menu:function(e){return gf(gf({},e),{},{width:"max-content",zIndex:10})}},theme:function(e){return gf(gf({},e),{},{colors:gf(gf({},e.colors),o?Ef:{})})},isSearchable:!1},t))]})}function kf(e){return kf="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},kf(e)}function Sf(){Sf=function(){return e};var e={},n=Object.prototype,t=n.hasOwnProperty,r=Object.defineProperty||function(e,n,t){e[n]=t.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function l(e,n,t){return Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}),e[n]}try{l({},"")}catch(e){l=function(e,n,t){return e[n]=t}}function s(e,n,t,o){var i=n&&n.prototype instanceof p?n:p,a=Object.create(i.prototype),c=new E(o||[]);return r(a,"_invoke",{value:x(e,t,c)}),a}function u(e,n,t){try{return{type:"normal",arg:e.call(n,t)}}catch(e){return{type:"throw",arg:e}}}e.wrap=s;var f={};function p(){}function d(){}function y(){}var h={};l(h,i,(function(){return this}));var b=Object.getPrototypeOf,A=b&&b(b(O([])));A&&A!==n&&t.call(A,i)&&(h=A);var m=y.prototype=p.prototype=Object.create(h);function v(e){["next","throw","return"].forEach((function(n){l(e,n,(function(e){return this._invoke(n,e)}))}))}function g(e,n){function o(r,i,a,c){var l=u(e[r],e,i);if("throw"!==l.type){var s=l.arg,f=s.value;return f&&"object"==kf(f)&&t.call(f,"__await")?n.resolve(f.__await).then((function(e){o("next",e,a,c)}),(function(e){o("throw",e,a,c)})):n.resolve(f).then((function(e){s.value=e,a(s)}),(function(e){return o("throw",e,a,c)}))}c(l.arg)}var i;r(this,"_invoke",{value:function(e,t){function r(){return new n((function(n,r){o(e,t,n,r)}))}return i=i?i.then(r,r):r()}})}function x(e,n,t){var r="suspendedStart";return function(o,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw i;return{value:void 0,done:!0}}for(t.method=o,t.arg=i;;){var a=t.delegate;if(a){var c=j(a,t);if(c){if(c===f)continue;return c}}if("next"===t.method)t.sent=t._sent=t.arg;else if("throw"===t.method){if("suspendedStart"===r)throw r="completed",t.arg;t.dispatchException(t.arg)}else"return"===t.method&&t.abrupt("return",t.arg);r="executing";var l=u(e,n,t);if("normal"===l.type){if(r=t.done?"completed":"suspendedYield",l.arg===f)continue;return{value:l.arg,done:t.done}}"throw"===l.type&&(r="completed",t.method="throw",t.arg=l.arg)}}}function j(e,n){var t=n.method,r=e.iterator[t];if(void 0===r)return n.delegate=null,"throw"===t&&e.iterator.return&&(n.method="return",n.arg=void 0,j(e,n),"throw"===n.method)||"return"!==t&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+t+"' method")),f;var o=u(r,e.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,f;var i=o.arg;return i?i.done?(n[e.resultName]=i.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=void 0),n.delegate=null,f):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,f)}function C(e){var n={tryLoc:e[0]};1 in e&&(n.catchLoc=e[1]),2 in e&&(n.finallyLoc=e[2],n.afterLoc=e[3]),this.tryEntries.push(n)}function w(e){var n=e.completion||{};n.type="normal",delete n.arg,e.completion=n}function E(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(C,this),this.reset(!0)}function O(e){if(e){var n=e[i];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,o=function n(){for(;++r<e.length;)if(t.call(e,r))return n.value=e[r],n.done=!1,n;return n.value=void 0,n.done=!0,n};return o.next=o}}return{next:k}}function k(){return{value:void 0,done:!0}}return d.prototype=y,r(m,"constructor",{value:y,configurable:!0}),r(y,"constructor",{value:d,configurable:!0}),d.displayName=l(y,c,"GeneratorFunction"),e.isGeneratorFunction=function(e){var n="function"==typeof e&&e.constructor;return!!n&&(n===d||"GeneratorFunction"===(n.displayName||n.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,y):(e.__proto__=y,l(e,c,"GeneratorFunction")),e.prototype=Object.create(m),e},e.awrap=function(e){return{__await:e}},v(g.prototype),l(g.prototype,a,(function(){return this})),e.AsyncIterator=g,e.async=function(n,t,r,o,i){void 0===i&&(i=Promise);var a=new g(s(n,t,r,o),i);return e.isGeneratorFunction(t)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},v(m),l(m,c,"Generator"),l(m,i,(function(){return this})),l(m,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var n=Object(e),t=[];for(var r in n)t.push(r);return t.reverse(),function e(){for(;t.length;){var r=t.pop();if(r in n)return e.value=r,e.done=!1,e}return e.done=!0,e}},e.values=O,E.prototype={constructor:E,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(w),!e)for(var n in this)"t"===n.charAt(0)&&t.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function r(t,r){return a.type="throw",a.arg=e,n.next=t,r&&(n.method="next",n.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var c=t.call(i,"catchLoc"),l=t.call(i,"finallyLoc");if(c&&l){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(e,n){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&t.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=n&&n<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=n,i?(this.method="next",this.next=i.finallyLoc,f):this.complete(a)},complete:function(e,n){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&n&&(this.next=n),f},finish:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.finallyLoc===e)return this.complete(t.completion,t.afterLoc),w(t),f}},catch:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.tryLoc===e){var r=t.completion;if("throw"===r.type){var o=r.arg;w(t)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,t){return this.delegate={iterator:O(e),resultName:n,nextLoc:t},"next"===this.method&&(this.arg=void 0),f}},e}function Bf(e,n,t,r,o,i,a){try{var c=e[i](a),l=c.value}catch(e){return void t(e)}c.done?n(l):Promise.resolve(l).then(r,o)}function Pf(e){return function(){var n=this,t=arguments;return new Promise((function(r,o){var i=e.apply(n,t);function a(e){Bf(i,r,o,a,c,"next",e)}function c(e){Bf(i,r,o,a,c,"throw",e)}a(void 0)}))}}function If(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(e,n)||function(e,n){if(e){if("string"==typeof e)return Tf(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Tf(e,n):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Tf(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var Df=function(e){var n=e.onSelect,t=If((0,r.useState)([]),2),o=t[0],i=t[1],a=If((0,r.useState)(null),2),c=a[0],l=a[1],s=(0,r.useMemo)((function(){return o.map((function(e){return{id:e,name:e}}))}),[o]);(0,r.useEffect)((function(){Pf(Sf().mark((function e(){var n,t,r;return Sf().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,_();case 2:n=e.sent,t=JSON.parse(localStorage.getItem("localSourceSelectedKeyboard")||"null"),r=n.includes(t)?t:n[0],i(n),l(r);case 7:case"end":return e.stop()}}),e)})))()}),[i,l]),(0,r.useEffect)((function(){Pf(Sf().mark((function e(){var t,r,o,i,a,l,s,u;return Sf().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!c){e.next=12;break}return e.next=3,Y(c);case 3:t=e.sent,r=t.info,o=t.keymap,i=t.sensors,a=r.layouts,l=o.chosen["zmk,matrix_transform"]?o.chosen["zmk,matrix_transform"].replace(/^&/,""):null,s=Object.keys(a)[0],u=a[l]||a[s],n({source:"local",keyboard:c,layoutMetadata:u,layout:u.layout,keymap:o,sensors:i});case 12:case"end":return e.stop()}}),e)})))()}),[n,c]);var u=(0,r.useCallback)((function(e){var n=e.id;localStorage.setItem("localSourceSelectedKeyboard",JSON.stringify(n)),l(n)}),[l]),f=(0,ye.find)(s,{id:c});return(0,z.jsx)(Of,{label:"Keyboard",value:f,options:s,onChange:u,getOptionValue:function(e){return e.id},getOptionLabel:function(e){return e.name}})};function Lf(e){return Lf="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Lf(e)}function Rf(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Nf(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Rf(Object(t),!0).forEach((function(n){_f(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Rf(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function _f(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Lf(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Lf(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Lf(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Mf(e){var n=(0,z.jsx)(La,{href:"https://github.com/nickcoutsos/zmk-config-corne-demo",external:!0,children:"GitHub Repo"});return(0,z.jsx)(gn,{children:(0,z.jsxs)(pn,Nf(Nf({},e),{},{children:[(0,z.jsx)("h2",{children:"Keymap Editor Demo"}),(0,z.jsx)("p",{children:"Welcome! This demo keyboard is provided to let you experiment with the keymap editor before setting up your own repository."}),(0,z.jsx)("h3",{children:"Features"}),(0,z.jsxs)("ul",{children:[(0,z.jsxs)("li",{children:[(0,z.jsx)("strong",{children:"WYSIWYG Editing"}),". Just click on key and behaviour bindings to make changes, add or remove layers in the sidebar."]}),(0,z.jsxs)("li",{children:[(0,z.jsx)("strong",{children:"Keymap generation"}),". The editor can export keymap to ZMK's syntax (when running locally or integrated with GitHub), and will even attempt to format the ",(0,z.jsx)("code",{children:".keymap"})," file for better readability."]}),(0,z.jsxs)("li",{children:[(0,z.jsx)("strong",{children:"Devicetree parsing"}),". ",(0,z.jsx)("em",{children:"(Experimental!)"})," Read and write to your existing ZMK ",(0,z.jsx)("code",{children:".keymap"})," file so that you can still use ZMK features that the app doesn't support yet."]})]}),(0,z.jsx)("h3",{children:"What's next?"}),(0,z.jsxs)("p",{children:["If you like the editor, try integrating with your own GitHub hosted keyboard config. ",(0,z.jsx)(La,{href:"https://github.com/nickcoutsos/zmk-config-corne-demo/generate",external:!0,children:"Use it as a template"})," for your own, or just read through the ",n," for this keyboard to learn what to apply to your existing keyboard."]})]}))})}var Yf=t(33971),Kf={};Kf.styleTagTransform=A(),Kf.setAttributes=d(),Kf.insert=f().bind(null,"head"),Kf.domAPI=s(),Kf.insertStyleElement=h(),c()(Yf.Z,Kf);var Zf=Yf.Z&&Yf.Z.locals?Yf.Z.locals:void 0;function qf(e){return qf="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},qf(e)}function Uf(){Uf=function(){return e};var e={},n=Object.prototype,t=n.hasOwnProperty,r=Object.defineProperty||function(e,n,t){e[n]=t.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function l(e,n,t){return Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}),e[n]}try{l({},"")}catch(e){l=function(e,n,t){return e[n]=t}}function s(e,n,t,o){var i=n&&n.prototype instanceof p?n:p,a=Object.create(i.prototype),c=new E(o||[]);return r(a,"_invoke",{value:x(e,t,c)}),a}function u(e,n,t){try{return{type:"normal",arg:e.call(n,t)}}catch(e){return{type:"throw",arg:e}}}e.wrap=s;var f={};function p(){}function d(){}function y(){}var h={};l(h,i,(function(){return this}));var b=Object.getPrototypeOf,A=b&&b(b(O([])));A&&A!==n&&t.call(A,i)&&(h=A);var m=y.prototype=p.prototype=Object.create(h);function v(e){["next","throw","return"].forEach((function(n){l(e,n,(function(e){return this._invoke(n,e)}))}))}function g(e,n){function o(r,i,a,c){var l=u(e[r],e,i);if("throw"!==l.type){var s=l.arg,f=s.value;return f&&"object"==qf(f)&&t.call(f,"__await")?n.resolve(f.__await).then((function(e){o("next",e,a,c)}),(function(e){o("throw",e,a,c)})):n.resolve(f).then((function(e){s.value=e,a(s)}),(function(e){return o("throw",e,a,c)}))}c(l.arg)}var i;r(this,"_invoke",{value:function(e,t){function r(){return new n((function(n,r){o(e,t,n,r)}))}return i=i?i.then(r,r):r()}})}function x(e,n,t){var r="suspendedStart";return function(o,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw i;return{value:void 0,done:!0}}for(t.method=o,t.arg=i;;){var a=t.delegate;if(a){var c=j(a,t);if(c){if(c===f)continue;return c}}if("next"===t.method)t.sent=t._sent=t.arg;else if("throw"===t.method){if("suspendedStart"===r)throw r="completed",t.arg;t.dispatchException(t.arg)}else"return"===t.method&&t.abrupt("return",t.arg);r="executing";var l=u(e,n,t);if("normal"===l.type){if(r=t.done?"completed":"suspendedYield",l.arg===f)continue;return{value:l.arg,done:t.done}}"throw"===l.type&&(r="completed",t.method="throw",t.arg=l.arg)}}}function j(e,n){var t=n.method,r=e.iterator[t];if(void 0===r)return n.delegate=null,"throw"===t&&e.iterator.return&&(n.method="return",n.arg=void 0,j(e,n),"throw"===n.method)||"return"!==t&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+t+"' method")),f;var o=u(r,e.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,f;var i=o.arg;return i?i.done?(n[e.resultName]=i.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=void 0),n.delegate=null,f):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,f)}function C(e){var n={tryLoc:e[0]};1 in e&&(n.catchLoc=e[1]),2 in e&&(n.finallyLoc=e[2],n.afterLoc=e[3]),this.tryEntries.push(n)}function w(e){var n=e.completion||{};n.type="normal",delete n.arg,e.completion=n}function E(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(C,this),this.reset(!0)}function O(e){if(e){var n=e[i];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,o=function n(){for(;++r<e.length;)if(t.call(e,r))return n.value=e[r],n.done=!1,n;return n.value=void 0,n.done=!0,n};return o.next=o}}return{next:k}}function k(){return{value:void 0,done:!0}}return d.prototype=y,r(m,"constructor",{value:y,configurable:!0}),r(y,"constructor",{value:d,configurable:!0}),d.displayName=l(y,c,"GeneratorFunction"),e.isGeneratorFunction=function(e){var n="function"==typeof e&&e.constructor;return!!n&&(n===d||"GeneratorFunction"===(n.displayName||n.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,y):(e.__proto__=y,l(e,c,"GeneratorFunction")),e.prototype=Object.create(m),e},e.awrap=function(e){return{__await:e}},v(g.prototype),l(g.prototype,a,(function(){return this})),e.AsyncIterator=g,e.async=function(n,t,r,o,i){void 0===i&&(i=Promise);var a=new g(s(n,t,r,o),i);return e.isGeneratorFunction(t)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},v(m),l(m,c,"Generator"),l(m,i,(function(){return this})),l(m,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var n=Object(e),t=[];for(var r in n)t.push(r);return t.reverse(),function e(){for(;t.length;){var r=t.pop();if(r in n)return e.value=r,e.done=!1,e}return e.done=!0,e}},e.values=O,E.prototype={constructor:E,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(w),!e)for(var n in this)"t"===n.charAt(0)&&t.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function r(t,r){return a.type="throw",a.arg=e,n.next=t,r&&(n.method="next",n.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var c=t.call(i,"catchLoc"),l=t.call(i,"finallyLoc");if(c&&l){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(e,n){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&t.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=n&&n<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=n,i?(this.method="next",this.next=i.finallyLoc,f):this.complete(a)},complete:function(e,n){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&n&&(this.next=n),f},finish:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.finallyLoc===e)return this.complete(t.completion,t.afterLoc),w(t),f}},catch:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.tryLoc===e){var r=t.completion;if("throw"===r.type){var o=r.arg;w(t)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,t){return this.delegate={iterator:O(e),resultName:n,nextLoc:t},"next"===this.method&&(this.arg=void 0),f}},e}function Gf(e,n,t,r,o,i,a){try{var c=e[i](a),l=c.value}catch(e){return void t(e)}c.done?n(l):Promise.resolve(l).then(r,o)}function zf(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var Wf=function(e){var n,o,i=e.onSelect,a=(n=(0,r.useState)(!1),o=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,o)||function(e,n){if(e){if("string"==typeof e)return zf(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?zf(e,n):void 0}}(n,o)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),c=a[0],l=a[1];return(0,r.useEffect)((function(){var e;(e=Uf().mark((function e(){var n,r,o;return Uf().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,t.e(873).then(t.t.bind(t,18873,19));case 2:n=e.sent,r=n.layout,o=n.keymap,i({source:"demo",layout:r,keymap:o});case 6:case"end":return e.stop()}}),e)})),function(){var n=this,t=arguments;return new Promise((function(r,o){var i=e.apply(n,t);function a(e){Gf(i,r,o,a,c,"next",e)}function c(e){Gf(i,r,o,a,c,"throw",e)}a(void 0)}))})()}),[i]),(0,z.jsxs)(z.Fragment,{children:[(0,z.jsxs)(Cf,{style:{background:"none",border:"none"},onClick:function(){return l(!0)},children:[(0,z.jsx)(J,{name:"info",className:Zf.help})," What is this?"]}),c&&(0,z.jsx)(Mf,{onDismiss:function(){return l(!1)}})]})},Ff=t(66379),Xf=t.n(Ff),Vf=t(9669),Qf=t.n(Vf),Hf=t(26729),Jf=t.n(Hf);function $f(e){return $f="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},$f(e)}function ep(){ep=function(){return e};var e={},n=Object.prototype,t=n.hasOwnProperty,r=Object.defineProperty||function(e,n,t){e[n]=t.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function l(e,n,t){return Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}),e[n]}try{l({},"")}catch(e){l=function(e,n,t){return e[n]=t}}function s(e,n,t,o){var i=n&&n.prototype instanceof p?n:p,a=Object.create(i.prototype),c=new E(o||[]);return r(a,"_invoke",{value:x(e,t,c)}),a}function u(e,n,t){try{return{type:"normal",arg:e.call(n,t)}}catch(e){return{type:"throw",arg:e}}}e.wrap=s;var f={};function p(){}function d(){}function y(){}var h={};l(h,i,(function(){return this}));var b=Object.getPrototypeOf,A=b&&b(b(O([])));A&&A!==n&&t.call(A,i)&&(h=A);var m=y.prototype=p.prototype=Object.create(h);function v(e){["next","throw","return"].forEach((function(n){l(e,n,(function(e){return this._invoke(n,e)}))}))}function g(e,n){function o(r,i,a,c){var l=u(e[r],e,i);if("throw"!==l.type){var s=l.arg,f=s.value;return f&&"object"==$f(f)&&t.call(f,"__await")?n.resolve(f.__await).then((function(e){o("next",e,a,c)}),(function(e){o("throw",e,a,c)})):n.resolve(f).then((function(e){s.value=e,a(s)}),(function(e){return o("throw",e,a,c)}))}c(l.arg)}var i;r(this,"_invoke",{value:function(e,t){function r(){return new n((function(n,r){o(e,t,n,r)}))}return i=i?i.then(r,r):r()}})}function x(e,n,t){var r="suspendedStart";return function(o,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw i;return{value:void 0,done:!0}}for(t.method=o,t.arg=i;;){var a=t.delegate;if(a){var c=j(a,t);if(c){if(c===f)continue;return c}}if("next"===t.method)t.sent=t._sent=t.arg;else if("throw"===t.method){if("suspendedStart"===r)throw r="completed",t.arg;t.dispatchException(t.arg)}else"return"===t.method&&t.abrupt("return",t.arg);r="executing";var l=u(e,n,t);if("normal"===l.type){if(r=t.done?"completed":"suspendedYield",l.arg===f)continue;return{value:l.arg,done:t.done}}"throw"===l.type&&(r="completed",t.method="throw",t.arg=l.arg)}}}function j(e,n){var t=n.method,r=e.iterator[t];if(void 0===r)return n.delegate=null,"throw"===t&&e.iterator.return&&(n.method="return",n.arg=void 0,j(e,n),"throw"===n.method)||"return"!==t&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+t+"' method")),f;var o=u(r,e.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,f;var i=o.arg;return i?i.done?(n[e.resultName]=i.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=void 0),n.delegate=null,f):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,f)}function C(e){var n={tryLoc:e[0]};1 in e&&(n.catchLoc=e[1]),2 in e&&(n.finallyLoc=e[2],n.afterLoc=e[3]),this.tryEntries.push(n)}function w(e){var n=e.completion||{};n.type="normal",delete n.arg,e.completion=n}function E(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(C,this),this.reset(!0)}function O(e){if(e){var n=e[i];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,o=function n(){for(;++r<e.length;)if(t.call(e,r))return n.value=e[r],n.done=!1,n;return n.value=void 0,n.done=!0,n};return o.next=o}}return{next:k}}function k(){return{value:void 0,done:!0}}return d.prototype=y,r(m,"constructor",{value:y,configurable:!0}),r(y,"constructor",{value:d,configurable:!0}),d.displayName=l(y,c,"GeneratorFunction"),e.isGeneratorFunction=function(e){var n="function"==typeof e&&e.constructor;return!!n&&(n===d||"GeneratorFunction"===(n.displayName||n.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,y):(e.__proto__=y,l(e,c,"GeneratorFunction")),e.prototype=Object.create(m),e},e.awrap=function(e){return{__await:e}},v(g.prototype),l(g.prototype,a,(function(){return this})),e.AsyncIterator=g,e.async=function(n,t,r,o,i){void 0===i&&(i=Promise);var a=new g(s(n,t,r,o),i);return e.isGeneratorFunction(t)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},v(m),l(m,c,"Generator"),l(m,i,(function(){return this})),l(m,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var n=Object(e),t=[];for(var r in n)t.push(r);return t.reverse(),function e(){for(;t.length;){var r=t.pop();if(r in n)return e.value=r,e.done=!1,e}return e.done=!0,e}},e.values=O,E.prototype={constructor:E,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(w),!e)for(var n in this)"t"===n.charAt(0)&&t.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function r(t,r){return a.type="throw",a.arg=e,n.next=t,r&&(n.method="next",n.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var c=t.call(i,"catchLoc"),l=t.call(i,"finallyLoc");if(c&&l){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(e,n){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&t.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=n&&n<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=n,i?(this.method="next",this.next=i.finallyLoc,f):this.complete(a)},complete:function(e,n){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&n&&(this.next=n),f},finish:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.finallyLoc===e)return this.complete(t.completion,t.afterLoc),w(t),f}},catch:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.tryLoc===e){var r=t.completion;if("throw"===r.type){var o=r.arg;w(t)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,t){return this.delegate={iterator:O(e),resultName:n,nextLoc:t},"next"===this.method&&(this.arg=void 0),f}},e}function np(e,n,t,r,o,i,a){try{var c=e[i](a),l=c.value}catch(e){return void t(e)}c.done?n(l):Promise.resolve(l).then(r,o)}function tp(e){return function(){var n=this,t=arguments;return new Promise((function(r,o){var i=e.apply(n,t);function a(e){np(i,r,o,a,c,"next",e)}function c(e){np(i,r,o,a,c,"throw",e)}a(void 0)}))}}function rp(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,lp(r.key),r)}}function op(e,n){return op=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,n){return e.__proto__=n,e},op(e,n)}function ip(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function ap(e){return ap=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},ap(e)}function cp(e,n,t){return(n=lp(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function lp(e){var n=function(e,n){if("object"!==$f(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==$f(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===$f(n)?n:String(n)}var sp="".concat(E.replace("http","ws"),"/github/events"),up=function(e){!function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),n&&op(e,n)}(p,e);var n,t,r,o,i,a,c,l,s,u,f=(s=p,u=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,n=ap(s);if(u){var t=ap(this).constructor;e=Reflect.construct(n,arguments,t)}else e=n.apply(this,arguments);return function(e,n){if(n&&("object"===$f(n)||"function"==typeof n))return n;if(void 0!==n)throw new TypeError("Derived constructors may only return object or undefined");return ip(e)}(this,e)});function p(){var e;!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,p);for(var n=arguments.length,t=new Array(n),r=0;r<n;r++)t[r]=arguments[r];return cp(ip(e=f.call.apply(f,[this].concat(t))),"token",null),cp(ip(e),"initializing",!1),cp(ip(e),"installations",null),cp(ip(e),"repositories",null),cp(ip(e),"repoInstallationMap",null),cp(ip(e),"features",null),cp(ip(e),"socket",null),e}return n=p,t=[{key:"_request",value:(l=tp(ep().mark((function e(n){var t;return ep().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return"string"==typeof n&&(n={url:n}),n.url.startsWith("/")&&(n.url="".concat(E).concat(n.url)),n.headers=Object.assign({},n.headers),this.token&&!n.headers.Authorization&&(n.headers.Authorization="Bearer ".concat(this.token)),e.prev=4,e.next=7,Qf()(n);case 7:return e.abrupt("return",e.sent);case 10:throw e.prev=10,e.t0=e.catch(4),401===(null===(t=e.t0.response)||void 0===t?void 0:t.status)&&(console.error("Authentication failed."),this.emit("authentication-failed",e.t0.response)),e.t0;case 14:case"end":return e.stop()}}),e,this,[[4,10]])}))),function(e){return l.apply(this,arguments)})},{key:"init",value:function(){var e=this;return this.initializing||(this.initializing=tp(ep().mark((function n(){var t,r,o,i,a,c;return ep().wrap((function(n){for(;;)switch(n.prev=n.next){case 0:if(e.initEvents(),t="".concat(E,"/github/installation"),(r=new URLSearchParams(window.location.search)).get("setup_action")&&r.get("installation_id")&&e.beginLoginFlow(),!r.get("blocked")){n.next=7;break}return setTimeout((function(){return e.emit("blocked")})),n.abrupt("return");case 7:if(o=r.get("token"),!window.localStorage.auth_token&&o&&(window.history.replaceState({},null,window.location.pathname),window.localStorage.auth_token=o),!window.localStorage.auth_token){n.next=22;break}return e.token=window.localStorage.auth_token,n.next=13,e._request(t);case 13:i=n.sent,a=i.data,c=a.installations.filter((function(e){return e.suspended_at})),a.installations.length===c.length&&(console.warn("No GitHub app installation found for authenticated user."),e.emit("app-not-installed")),e.username=a.username,e.installations=a.installations,e.repositories=a.repositories,e.repoInstallationMap=a.repoInstallationMap,e.emit("authenticated");case 22:case"end":return n.stop()}}),n)})))()),this.initializing}},{key:"initEvents",value:function(){var e=this,n=[],t=function(t){e.socket.readyState!==window.WebSocket.OPEN?(n.push(t),console.log("buffering websocket message",{readyState:e.socket.readyState},t)):e.socket.send(t)};this.socket=new window.WebSocket(sp),this.socket.onopen=function(){console.log(new Date,"connected to console"),function(){for(var t;t=n.shift();)console.log("sending buffered websocket message",t),e.socket.send(t)}(),setInterval((function(){t(JSON.stringify({message:"ping"}))}),2e4)},this.socket.onclose=function(){return console.log(new Date,"disconnected from server")},this.socket.onerror=function(e){return console.error(new Date,e)},this.socket.onmessage=function(n){var t=JSON.parse(n.data);"workflow_run"===t.event&&e.emit("build-update",t.workflow_run)},this.on("authenticated",(function(){var n;null!==(n=e.installations)&&void 0!==n&&n.length&&(e.fetchAvailableFeatures(),t(JSON.stringify({message:"authorize",data:e.token})))}))}},{key:"beginLoginFlow",value:function(){window.localStorage.removeItem("auth_token"),window.location.href="".concat(E,"/github/authorize")}},{key:"beginInstallAppFlow",value:function(){window.location.href="https://github.com/apps/".concat("keymap-editor","/installations/new")}},{key:"manageInstallationRepos",value:function(e){var n=this.installations.find((function(n){return n.id===e}));window.location.href=n.html_url}},{key:"isGitHubAuthorized",value:function(){return!!this.token}},{key:"isAppSuspendedForRepoSelection",value:function(){var e,n,t;return(null===(e=this.installations)||void 0===e?void 0:e.length)>0&&(null===(n=this.installations)||void 0===n?void 0:n.every((function(e){return e.suspended_at})))&&(null===(t=this.installations)||void 0===t?void 0:t.some((function(e){return"all"===e.repository_selection})))}},{key:"isAppInstalled",value:function(){var e,n;return(null===(e=this.installations)||void 0===e?void 0:e.length)&&(null===(n=this.repositories)||void 0===n?void 0:n.length)}},{key:"fetchRepoBranches",value:(c=tp(ep().mark((function e(n){var t,r,o,i;return ep().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=encodeURIComponent(this.repoInstallationMap[n.full_name]),r=encodeURIComponent(n.full_name),e.next=4,this._request("/github/installation/".concat(t,"/").concat(r,"/branches"));case 4:return o=e.sent,i=o.data,e.abrupt("return",i);case 7:case"end":return e.stop()}}),e,this)}))),function(e){return c.apply(this,arguments)})},{key:"fetchBranchKeyboards",value:(a=tp(ep().mark((function e(n,t){var r,o,i,a;return ep().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=encodeURIComponent(this.repoInstallationMap[n.full_name]),o=encodeURIComponent(n.full_name),e.next=4,this._request("/github/installation/".concat(r,"/").concat(o,"/keyboards/").concat(t));case 4:return i=e.sent,a=i.data,e.abrupt("return",a);case 7:case"end":return e.stop()}}),e,this)}))),function(e,n){return a.apply(this,arguments)})},{key:"fetchLayoutAndKeymap",value:(i=tp(ep().mark((function e(n,t){var r,o,i,a,c,l,s,u,f,p,d,y,h,b,A,m=arguments;return ep().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=(m.length>2&&void 0!==m[2]?m[2]:{}).keyboard,o=encodeURIComponent(this.repoInstallationMap[n]),i=encodeURIComponent(n),a=new URL("".concat(E,"/github/keyboard-files/").concat(o,"/").concat(i)),c=new URLSearchParams,t&&c.set("branch",t),r&&c.set("keyboard",r),a.search=c.toString(),e.prev=8,e.next=11,this._request(a.toString());case 11:return l=e.sent,s=l.data,u=s.info.layouts,f=s.keymap,p=Object.keys(s.info.layouts)[0],d=f.chosen["zmk,matrix_transform"]?f.chosen["zmk,matrix_transform"].replace(/^&/,""):null,y=u[d]||u[p],h=y.layout,e.abrupt("return",{layoutMetadata:y,layout:h,keymap:f,keyboards:s.keyboards,default:s.defaultKeymap,sensors:s.sensors});case 21:throw e.prev=21,e.t0=e.catch(8),400===(null===(b=e.t0.response)||void 0===b?void 0:b.status)?(console.error("Failed to load keymap and layout from github",e.t0.response.data),this.emit("repo-validation-error",e.t0.response.data)):500===(null===(A=e.t0.response)||void 0===A?void 0:A.status)&&"LayoutGenerationError"===e.t0.response.data.name&&this.emit("layout-generation-failed",e.t0.response.data),e.t0;case 25:case"end":return e.stop()}}),e,this,[[8,21]])}))),function(e,n){return i.apply(this,arguments)})},{key:"fetchAvailableFeatures",value:(o=tp(ep().mark((function e(){var n,t;return ep().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(this.isGitHubAuthorized()){e.next=2;break}return e.abrupt("return",{betaFeatures:[]});case 2:return this.features||(this.features=this._request("".concat(E,"/github/features"))),e.next=5,this.features;case 5:return n=e.sent,t=n.data,e.abrupt("return",t);case 8:case"end":return e.stop()}}),e,this)}))),function(){return o.apply(this,arguments)})},{key:"fetchBuildStatus",value:(r=tp(ep().mark((function e(n,t){var r,o,i,a,c;return ep().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=encodeURIComponent(this.repoInstallationMap[n]),o=encodeURIComponent(n),i=new URL("".concat(E,"/github/latest-run/").concat(r,"/").concat(o,"/").concat(encodeURIComponent(t))),e.next=5,this._request(i.toString());case 5:return a=e.sent,c=a.data,e.abrupt("return",c);case 8:case"end":return e.stop()}}),e,this)}))),function(e,n){return r.apply(this,arguments)})},{key:"commitChanges",value:function(e,n,t,r){var o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{},i=o.message,a=void 0===i?null:i,c=o.experimentalSettings,l=void 0===c?{}:c,s=o.keyboard,u=encodeURIComponent(this.repoInstallationMap[e]),f=encodeURIComponent(e),p=new URL("".concat(E,"/github/keyboard-files/").concat(u,"/").concat(f,"/").concat(encodeURIComponent(n))),d=l.enableBehaviorEditing,y=void 0!==d&&d,h=new URLSearchParams({enableBehaviorEditing:y});return s&&h.set("keyboard",s),p.search=h.toString(),this._request({url:p.toString(),method:"POST",headers:{"Content-Type":"application/json"},data:{keyboard:s,layout:t,keymap:r,message:a,enableBehaviorEditing:y}})}}],t&&rp(n.prototype,t),Object.defineProperty(n,"prototype",{writable:!1}),p}(Jf()),fp=new up,pp={maxHeight:"300px",overflow:"auto",padding:"10px",fontFamily:"monospace",fontSize:"80%",backgroundColor:"rgb(239, 239, 239, 0.5)"},dp={margin:"10px"};function yp(e){var n=e.onDismiss,t=e.title,r=e.errors,o=e.otherRepoOrBranchAvailable,i=void 0!==o&&o,a=function(e){return"InfoValidationError"===e?"config/info.json":"KeymapValidationError"===e?"config/keymap.json":void 0}(t);return(0,z.jsx)(gn,{children:(0,z.jsxs)(pn,{onDismiss:n,children:[(0,z.jsx)("h2",{children:t}),a&&(0,z.jsxs)("p",{children:["Errors in the file ",(0,z.jsx)("code",{children:a}),"."]}),(0,z.jsx)("ul",{style:pp,children:r.map((function(e,n){return(0,z.jsx)("li",{style:dp,children:e},n)}))}),i&&(0,z.jsx)("p",{children:"If you have another branch or repository with the required metadata files you may switch to them instead."})]})})}var hp="selectedGithubRepository",bp="selectedGithubBranch",Ap="selectedGithubKeyboard";function mp(e,n){try{return JSON.parse(localStorage.getItem("".concat(Ap,":").concat(e,":").concat(n)))}catch(e){return null}}function vp(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var gp={blocked:!1,initialized:!1,selectedRepoId:null,selectedBranchName:null,selectedKeyboard:null,branches:[],keyboards:[],loadingBranches:!1,loadingKeyboards:!1,loadingKeyboard:!1,loadError:null,warningFlags:[]},xp=(0,Xa.oM)({name:"github-picker",initialState:gp,reducers:{clearSelection:function(e){e.loadError=null,e.warningFlags=[],e.selectedKeyboard=null},integrationInitialized:function(e){var n,t=function(){try{return JSON.parse(localStorage.getItem(hp))}catch(e){return null}}(),r=fp.repositories||[];df()(r,{id:t})?n=t:r.length>0&&(n=r[0].id),e.initialized=!0,e.selectedRepoId=n},integrationBlocked:function(e,n){e.blocked=!0},integrationError:function(e,n){e.loadingKeyboard=!1,e.loadError=n.payload.error},loadingBranchesList:function(e){e.loadingBranches=!0},loadedBranchesList:function(e,n){var t=e.selectedRepoId,r=n.payload.branches,o=df()(fp.repositories,{id:t});e.branches=r,e.keyboard=null,e.keyboards=[],e.loadingBranches=!1;for(var i=we()(r,"name"),a=o.default_branch,c=function(e){try{return JSON.parse(localStorage.getItem("".concat(bp,":").concat(e)))}catch(e){return null}}(t),l=0,s=[1===r.length?r[0].name:null,c,a];l<s.length;l++){var u=s[l];if(i.includes(u)){e.selectedBranchName=u,e.selectedKeyboard=mp(t,u);break}}},loadingKeyboardsList:function(e){e.loadingKeyboards=!0},loadedKeyboardsList:function(e,n){var t=e.selectedRepoId,r=e.selectedBranchName,o=n.payload,i=o.keyboards,a=o.default;e.keyboards=i,e.loadingKeyboards=!1;for(var c=mp(t,r),l=0,s=[1===i.length?i[0]:null,c,a];l<s.length;l++){var u=s[l];if(i.includes(u)){e.selectedKeyboard=u;break}}},selectedRepository:function(e,n){var t;e.selectedRepoId=n.payload.repository.id,e.selectedBranchName=null,e.selectedKeyboard=null,t=e.selectedRepoId,localStorage.setItem(hp,JSON.stringify(t))},selectedBranch:function(e,n){var t,r;e.selectedBranchName=n.payload.name,e.selectedKeyboard=mp(e.selectedRepoId,e.selectedBranchName),t=e.selectedRepoId,r=e.selectedBranchName,localStorage.setItem("".concat(bp,":").concat(t),JSON.stringify(r))},selectedKeyboard:function(e,n){var t,r,o;e.selectedKeyboard=n.payload.name,t=e.selectedRepoId,r=e.selectedBranchName,o=e.selectedKeyboard,localStorage.setItem("".concat(Ap,":").concat(t,":").concat(r),JSON.stringify(o))},keyboardLoading:function(e,n){e.loadingKeyboard=!0,e.loadError=null},keyboardLoadedSuccess:function(e,n){var t=n.payload.response.keymap;e.warningFlags=t.warningFlags||[],e.loadingKeyboard=!1},selectedInvalidRepo:function(e,n){},layoutGenerationFailed:function(e,n){}}});function jp(){var e,n,t,o=(n=(0,r.useReducer)(xp.reducer,gp),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||function(e,n){if(e){if("string"==typeof e)return vp(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?vp(e,n):void 0}}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=o[0],a=(e=o[1],(0,r.useMemo)((function(){return Object.keys(xp.actions).reduce((function(n,t){return n[t]=function(){var n;return e((n=xp.actions)[t].apply(n,arguments))},n}),{})}),[e]));return[i,a]}function Cp(e){var n=e.onDismiss,t=e.missingPath,r=e.otherRepoOrBranchAvailable;return(0,z.jsx)(gn,{children:(0,z.jsxs)(pn,{onDismiss:n,children:[(0,z.jsx)("h2",{children:"Missing keyboard definition?"}),(0,z.jsxs)("p",{children:["Hi there! The repository you're trying to load from doesn't have a defined ",(0,z.jsx)("code",{children:t}),". Right now this application is expecting to look at that directory to discover keyboard definitions for experimental features like automatic layout generation."]}),(0,z.jsx)("p",{children:"Is it possible that the keyboard you're trying to edit relies on data from the ZMK or other repositories? Fetching from other repositories is not currently supported."}),(0,z.jsx)("p",{children:"I'm a humble developer and have only worked with configurations for my own handwired builds, so if you feel you're receiving this message in error then please consider opening an issue on this project's GitHub repository to let me know what I can do differently."}),r&&(0,z.jsx)("p",{children:"If you have another branch or repository set up as your zmk-config repo you may switch to that instead."})]})})}Cp.propTypes={onDismiss:G().func.isRequired,missingPath:G().string.isRequired,otherRepoOrBranchAvailable:G().bool};var wp=Cp;function Ep(e){var n=e.installation,t="https://github.com/settings/installations/".concat(n.id);return(0,z.jsx)(gn,{children:(0,z.jsxs)(pn,{dismissText:null,children:[(0,z.jsx)("h2",{children:"App Disabled"}),(0,z.jsxs)("p",{children:["Hello there, your installation of the keymap editor's GitHub app is currently disabled. ",(0,z.jsx)("em",{children:"This is not a ban!"})]}),(0,z.jsxs)("p",{children:["When you installed this app for your GitHub account you installed it for ",(0,z.jsx)("em",{children:"all"})," of your repositories, and we need to do a little cleanup as we roll out some new features as it's very likely you will have other repositories unrelated to ZMK keyboard configurations."]}),(0,z.jsx)("h3",{children:"How to fix this"}),(0,z.jsxs)("p",{children:["If you're still interested in using the keymap editor (and I'd love for you to be able to) please go to your ",(0,z.jsx)(La,{href:t,children:"installation settings"})," on GitHub and select only the repositories you want to use with this tool. As soon as that's done you'll be sent back here and ready to go."]}),(0,z.jsx)("p",{children:"As always, if you're looking for clarification or further assistance please visit our GitHub repo and open an issue or start a discussion."})]})})}Ep.propTypes={installation:G().shape({id:G().number.isRequired}).isRequired};var Op=Ep;function kp(e){var n=e.onDismiss,t=e.otherRepoOrBranchAvailable,r=(0,z.jsx)(La,{external:!0,href:"https://github.com/nickcoutsos/keymap-editor/issues",children:"issue"});return(0,z.jsx)(gn,{children:(0,z.jsxs)(pn,{onDismiss:n,children:[(0,z.jsx)("h2",{children:"Is this a zmk-config repo?"}),(0,z.jsxs)("p",{children:["Hi there! The repository you're trying to load from doesn't have a defined ",(0,z.jsx)("code",{children:"config"})," directory. Right now this application is expecting to look at that directory to discover keymaps and other metadata."]}),t&&(0,z.jsx)("p",{children:"If you have another branch or repository set up as your zmk-config repo you may switch to that instead."}),(0,z.jsxs)("p",{children:["This is a solo project and I have only worked with a few kinds of zmk config repos, so if this is a valid repo for zmk-powered keyboard firmware then please consider opening an ",r," to let me know what I can do differently."]})]})})}kp.propTypes={onDismiss:G().func.isRequired,otherRepoOrBranchAvailable:G().bool};var Sp=kp;function Bp(e){var n=e.onDismiss,t=(0,z.jsx)(La,{external:!0,href:"https://github.com/nickcoutsos/keymap-editor/issues",children:"Keymap Editor Issues"});return(0,z.jsx)(gn,{children:(0,z.jsxs)(pn,{onDismiss:n,children:[(0,z.jsx)("h2",{children:"Automatic Layout Generation Failed"}),(0,z.jsx)("p",{children:"No accompanying layout was found with your keymap file and the Keymap Editor was unable to generate one automatically for you."}),(0,z.jsx)("p",{children:"Something went wrong with the attempted automatic layout generation for your keyboard and there's no automatic way to recover, but if you want to reach out for assistance maybe we can work together to resolve any technical issues or else craft a manual layout for your keyboard."}),(0,z.jsxs)("p",{children:["Share your experience at ",t,"."]})]})})}Bp.propTypes={onDismiss:G().func.isRequired};var Pp=Bp,Ip=function(){return(0,z.jsx)(gn,{children:(0,z.jsxs)(pn,{dismissText:null,children:[(0,z.jsx)("h2",{children:"GitHub Account Blocked"}),(0,z.jsx)("p",{children:"Hi, your access to this application has been disabled."}),(0,z.jsxs)("p",{children:["This could be an innocent mistake. Possibly you've misunderstood the intended purpose of this app, possibly I got carried away with some housekeeping. If you want more information or feel this was done in error, please reach out to ",(0,z.jsx)("em",{children:"nickcoutsos"})," on GitHub or Discord (you can find me on the ZMK server)."]})]})})};function Tp(){return(0,z.jsx)(gn,{centerOnly:!0,children:(0,z.jsxs)(pn,{dismissText:null,style:{width:"400px"},children:[(0,z.jsx)("h2",{children:"Authenticate with GitHub"}),(0,z.jsx)("p",{children:"Please log-in to GitHub to continue."}),(0,z.jsx)(oe,{collection:"brands",icon:"github",text:"Login with GitHub",style:{display:"block",margin:"0 auto"},onClick:function(){return fp.beginLoginFlow()}})]})})}Tp.propTypes={};var Dp=Tp;function Lp(){var e=fp.username?"Welcome, ".concat(fp.username,"!"):"Welcome!";return(0,z.jsx)(gn,{centerOnly:!0,children:(0,z.jsxs)(pn,{dismissText:null,children:[(0,z.jsx)("h2",{children:e}),(0,z.jsx)("p",{children:"To begin import your own keymaps, you'll need to grant the Keymap Editor app access to the relevant GitHub repositories. Please make sure to only select repositories that are set up for ZMK keyboard configurations."}),(0,z.jsxs)("p",{children:["This app requires read and write access to the repositories you select in order to write to arbitrary ",(0,z.jsx)("code",{children:".keymap"})," files. It also receives all build action events for the repository, which generates quite a bit of traffic. Selecting ",(0,z.jsx)("code",{children:"All repositories"})," for the app installation will lead to a suspension."]}),(0,z.jsx)(oe,{collection:"brands",icon:"github",text:"Add Repository",style:{display:"block",margin:"0 auto"},onClick:function(){return fp.beginInstallAppFlow()}})]})})}Lp.propTypes={};var Rp=Lp;function Np(e){return Np="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Np(e)}function _p(e){return function(e){if(Array.isArray(e))return zp(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||Gp(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Mp(){Mp=function(){return e};var e={},n=Object.prototype,t=n.hasOwnProperty,r=Object.defineProperty||function(e,n,t){e[n]=t.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function l(e,n,t){return Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}),e[n]}try{l({},"")}catch(e){l=function(e,n,t){return e[n]=t}}function s(e,n,t,o){var i=n&&n.prototype instanceof p?n:p,a=Object.create(i.prototype),c=new E(o||[]);return r(a,"_invoke",{value:x(e,t,c)}),a}function u(e,n,t){try{return{type:"normal",arg:e.call(n,t)}}catch(e){return{type:"throw",arg:e}}}e.wrap=s;var f={};function p(){}function d(){}function y(){}var h={};l(h,i,(function(){return this}));var b=Object.getPrototypeOf,A=b&&b(b(O([])));A&&A!==n&&t.call(A,i)&&(h=A);var m=y.prototype=p.prototype=Object.create(h);function v(e){["next","throw","return"].forEach((function(n){l(e,n,(function(e){return this._invoke(n,e)}))}))}function g(e,n){function o(r,i,a,c){var l=u(e[r],e,i);if("throw"!==l.type){var s=l.arg,f=s.value;return f&&"object"==Np(f)&&t.call(f,"__await")?n.resolve(f.__await).then((function(e){o("next",e,a,c)}),(function(e){o("throw",e,a,c)})):n.resolve(f).then((function(e){s.value=e,a(s)}),(function(e){return o("throw",e,a,c)}))}c(l.arg)}var i;r(this,"_invoke",{value:function(e,t){function r(){return new n((function(n,r){o(e,t,n,r)}))}return i=i?i.then(r,r):r()}})}function x(e,n,t){var r="suspendedStart";return function(o,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw i;return{value:void 0,done:!0}}for(t.method=o,t.arg=i;;){var a=t.delegate;if(a){var c=j(a,t);if(c){if(c===f)continue;return c}}if("next"===t.method)t.sent=t._sent=t.arg;else if("throw"===t.method){if("suspendedStart"===r)throw r="completed",t.arg;t.dispatchException(t.arg)}else"return"===t.method&&t.abrupt("return",t.arg);r="executing";var l=u(e,n,t);if("normal"===l.type){if(r=t.done?"completed":"suspendedYield",l.arg===f)continue;return{value:l.arg,done:t.done}}"throw"===l.type&&(r="completed",t.method="throw",t.arg=l.arg)}}}function j(e,n){var t=n.method,r=e.iterator[t];if(void 0===r)return n.delegate=null,"throw"===t&&e.iterator.return&&(n.method="return",n.arg=void 0,j(e,n),"throw"===n.method)||"return"!==t&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+t+"' method")),f;var o=u(r,e.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,f;var i=o.arg;return i?i.done?(n[e.resultName]=i.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=void 0),n.delegate=null,f):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,f)}function C(e){var n={tryLoc:e[0]};1 in e&&(n.catchLoc=e[1]),2 in e&&(n.finallyLoc=e[2],n.afterLoc=e[3]),this.tryEntries.push(n)}function w(e){var n=e.completion||{};n.type="normal",delete n.arg,e.completion=n}function E(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(C,this),this.reset(!0)}function O(e){if(e){var n=e[i];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,o=function n(){for(;++r<e.length;)if(t.call(e,r))return n.value=e[r],n.done=!1,n;return n.value=void 0,n.done=!0,n};return o.next=o}}return{next:k}}function k(){return{value:void 0,done:!0}}return d.prototype=y,r(m,"constructor",{value:y,configurable:!0}),r(y,"constructor",{value:d,configurable:!0}),d.displayName=l(y,c,"GeneratorFunction"),e.isGeneratorFunction=function(e){var n="function"==typeof e&&e.constructor;return!!n&&(n===d||"GeneratorFunction"===(n.displayName||n.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,y):(e.__proto__=y,l(e,c,"GeneratorFunction")),e.prototype=Object.create(m),e},e.awrap=function(e){return{__await:e}},v(g.prototype),l(g.prototype,a,(function(){return this})),e.AsyncIterator=g,e.async=function(n,t,r,o,i){void 0===i&&(i=Promise);var a=new g(s(n,t,r,o),i);return e.isGeneratorFunction(t)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},v(m),l(m,c,"Generator"),l(m,i,(function(){return this})),l(m,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var n=Object(e),t=[];for(var r in n)t.push(r);return t.reverse(),function e(){for(;t.length;){var r=t.pop();if(r in n)return e.value=r,e.done=!1,e}return e.done=!0,e}},e.values=O,E.prototype={constructor:E,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(w),!e)for(var n in this)"t"===n.charAt(0)&&t.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function r(t,r){return a.type="throw",a.arg=e,n.next=t,r&&(n.method="next",n.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var c=t.call(i,"catchLoc"),l=t.call(i,"finallyLoc");if(c&&l){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(e,n){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&t.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=n&&n<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=n,i?(this.method="next",this.next=i.finallyLoc,f):this.complete(a)},complete:function(e,n){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&n&&(this.next=n),f},finish:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.finallyLoc===e)return this.complete(t.completion,t.afterLoc),w(t),f}},catch:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.tryLoc===e){var r=t.completion;if("throw"===r.type){var o=r.arg;w(t)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,t){return this.delegate={iterator:O(e),resultName:n,nextLoc:t},"next"===this.method&&(this.arg=void 0),f}},e}function Yp(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Kp(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Yp(Object(t),!0).forEach((function(n){Zp(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Yp(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Zp(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Np(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Np(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Np(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function qp(e,n,t,r,o,i,a){try{var c=e[i](a),l=c.value}catch(e){return void t(e)}c.done?n(l):Promise.resolve(l).then(r,o)}function Up(e){return function(){var n=this,t=arguments;return new Promise((function(r,o){var i=e.apply(n,t);function a(e){qp(i,r,o,a,c,"next",e)}function c(e){qp(i,r,o,a,c,"throw",e)}a(void 0)}))}}function Gp(e,n){if(e){if("string"==typeof e)return zp(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?zp(e,n):void 0}}function zp(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var Wp=function(e){return Xf()(e,{name:"LayoutGenerationError"})},Fp=function(e){return Xf()(e,{name:"MissingRepoFile",path:"config"})},Xp=function(e){return Xf()(e,{name:"MissingRepoFile",path:"config/info.json"})},Vp=function(e){return"MissingRepoFile"===(null==e?void 0:e.name)&&(null==e?void 0:e.path.match(/config\/boards\/[^/]+\/[^/]+\/[^/]+?\..*$/))};function Qp(e){var n,t,o=(n=jp(),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||Gp(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=o[0],a=o[1],c=i.initialized,l=i.branches,s=i.selectedRepoId,u=i.selectedBranchName,f=i.keyboards,p=i.selectedKeyboard,d=i.loadingBranches,y=i.loadingKeyboards,h=i.loadingKeyboard,b=i.loadError,A=e.onSelect;(0,r.useEffect)((function(){fp.init().then(a.integrationInitialized),fp.on("authentication-failed",(function(){return fp.beginLoginFlow()})),fp.on("blocked",a.integrationBlocked),fp.on("repo-validation-error",(function(e){return a.integrationError({error:e})})),fp.on("layout-generation-failed",(function(e){return a.integrationError({error:e})}))}),[a]);var m=(0,r.useCallback)(function(){var e=Up(Mp().mark((function e(n,t,r){var o,i,c,l;return Mp().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return i=fp.repositories,c=null===(o=df()(i,{id:n}))||void 0===o?void 0:o.full_name,a.keyboardLoading(),e.next=5,fp.fetchLayoutAndKeymap(c,t,{keyboard:r});case 5:l=e.sent,a.keyboardLoadedSuccess({response:l}),A(Kp({github:{repository:c,branch:t,keyboard:r}},l));case 8:case"end":return e.stop()}}),e)})));return function(n,t,r){return e.apply(this,arguments)}}(),[a,A]);(0,r.useEffect)((function(){s&&Up(Mp().mark((function e(){var n,t;return Mp().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return a.loadingBranchesList(),n=df()(fp.repositories,{id:s}),e.next=4,fp.fetchRepoBranches(n);case 4:t=e.sent,a.loadedBranchesList({branches:t});case 6:case"end":return e.stop()}}),e)})))()}),[s,a]),(0,r.useEffect)((function(){s&&u&&Up(Mp().mark((function e(){var n,t;return Mp().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return a.loadingKeyboardsList(),n=df()(fp.repositories,{id:s}),e.next=4,fp.fetchBranchKeyboards(n,u);case 4:t=e.sent,a.loadedKeyboardsList(t);case 6:case"end":return e.stop()}}),e)})))()}),[s,u,a]);var v=(0,r.useCallback)((function(){return m(s,u,p)}),[m,s,u,p]);if((0,r.useEffect)((function(){s&&u&&m(s,u,p)}),[s,u,p,m]),!c)return null;if(i.blocked)return(0,z.jsx)(Ip,{});if(!fp.isGitHubAuthorized())return(0,z.jsx)(Dp,{});if(!fp.isAppInstalled())return(0,z.jsx)(Rp,{});if(fp.isAppSuspendedForRepoSelection())return(0,z.jsx)(Op,{installation:fp.installations[0]});var g=fp.repositories.map((function(e){return{id:e.id,name:e.name,full:e.full_name}})),x=fp.installations.map((function(e){return{id:e.id,type:"installation",name:"[Manage available repos for ".concat(e.account.login,"...]")}})),j=[].concat(_p(g),_p(x)),C=l.map((function(e){return{id:e.name,name:e.name}})),w=f.map((function(e){return{id:e,name:e}}));if(Wp(b))return(0,z.jsx)(Pp,{onDismiss:a.clearSelection});if(Vp(b))return(0,z.jsx)(wp,{onDismiss:a.clearSelection});if(Fp(b))return(0,z.jsx)(Sp,{onDismiss:a.clearSelection,otherRepoOrBranchAvailable:j.length>1||C.length>0});if(b&&!Wp(b)&&!Vp(b)&&!Xp(b)&&!Fp(b))return(0,z.jsx)(yp,{title:b.name,errors:b.errors,otherRepoOrBranchAvailable:j.length>1||C.length>0,onDismiss:a.clearSelection});var E=df()(g,{id:s}),O=df()(C,{id:u}),k=df()(w,{id:p});return(0,z.jsxs)(z.Fragment,{children:[(0,z.jsx)(Of,{label:"Repository",value:E,options:j,onChange:function(e){var n=e.id;if("installation"!==e.type){var t=df()(g,{id:n});a.selectedRepository({repository:t})}else fp.manageInstallationRepos(n)},getValue:function(e){return e.id},getOptionValue:function(e){return e.id},getOptionLabel:function(e){return e.full||e.name},formatOptionLabel:function(e,n){var t=n.context;return(0,z.jsx)(z.Fragment,{children:"value"===t?e.name:e.full||e.name})}}),l.length>1&&(0,z.jsx)(Of,{label:"Branch",value:O,options:C,onChange:function(e){var n=e.id;return a.selectedBranch({name:n})},getOptionValue:function(e){return e.id},getOptionLabel:function(e){return e.name}}),f.length>1&&(0,z.jsx)(Of,{label:"Keyboard",value:k,options:w,getOptionValue:function(e){return e.id},getOptionLabel:function(e){return e.name},onChange:function(e){var n=e.id;return a.selectedKeyboard({name:n})}}),(d||y||h)&&(0,z.jsx)(jf,{children:(0,z.jsx)(de,{})}),u&&!h&&(0,z.jsx)(Cf,{onClick:v,children:(0,z.jsx)(J,{name:"sync"})})]})}Qp.propTypes={onSelect:G().func.isRequired};var Hp=Qp,Jp=st()([S&&{id:"demo",name:"Demo Keyboard"},k&&{id:"local",name:"Local"},O&&{id:"github",name:"GitHub"}]),$p=localStorage.getItem("selectedSource"),ed=(1===Jp.length?Jp[0].id:null)||(Jp.find((function(e){return e.id===$p}))?$p:Jp[0].id);function nd(e){var n=e.onDismiss,t=(0,z.jsx)(La,{external:!0,href:"https://discord.com/users/115507966555193345",children:"Discord"});return(0,z.jsx)(gn,{children:(0,z.jsxs)(pn,{onDismiss:n,children:[(0,z.jsx)("h2",{children:"Could not parse keymap"}),(0,z.jsx)("p",{children:"It looks like some bindings in your keymap are using custom pre-processor macros which isn't supported by the Keymap Editor. These macros make it difficult both to resolve bindings to behaviors and parameters, as well as to generate modified keymap code that is consistent with your original intentions."}),(0,z.jsx)("p",{children:"Please either continue editing your keymap by hand with these helpers or if you would like to use this editor, rewrite the keymap to use ZMK's syntax directly."}),(0,z.jsxs)("p",{children:["If you feel this is incorrect or wish to discuss the issue please feel free to reach out via the Keymap Editor's GitHub repository or find me on ",t,"."]})]})})}nd.propTypes={onDismiss:G().func.isRequired};var td=nd;function rd(e){var n=e.onDismiss,t=(0,z.jsx)(La,{external:!0,href:"https://discord.com/users/115507966555193345",children:"Discord"}),r=(0,z.jsx)(La,{external:!0,href:"https://github.com/nickcoutsos/keymap-editor/issues",children:"Keymap Editor - Issues"});return(0,z.jsx)(gn,{children:(0,z.jsxs)(pn,{onDismiss:n,children:[(0,z.jsx)("h2",{children:"Could not parse keymap"}),(0,z.jsx)("p",{children:"Something went wrong while trying to parse your keymap. It's hard to say what exactly, because I wasn't expecting this."}),(0,z.jsx)("p",{children:"A common occurrence here is keymaps using a variety of pre-processor macros to define layers/combos/etc."}),(0,z.jsxs)("p",{children:["If you'd like some help with this problem feel free to post on the project's repository ",r," or reach out directly to me via ",t,"."]})]})})}rd.propTypes={onDismiss:G().func.isRequired};var od=rd;function id(e){var n=e.onDismiss;return(0,z.jsx)(gn,{children:(0,z.jsxs)(pn,{onDismiss:n,children:[(0,z.jsx)("h2",{children:"Could not parse Miryoku keymap"}),(0,z.jsx)("p",{children:"It looks like your keyboard is built using Miryoku to manage the configuration and keymap. Parsing and editing keymaps that use this syntax is unsupported by the Keymap Editor."}),(0,z.jsx)("p",{children:"Please either continue editing your keymap by hand with these helpers or if you would like to use this editor, rewrite the keymap to use ZMK's syntax directly."})]})})}id.propTypes={onDismiss:G().func.isRequired};var ad=id;function cd(e){var n=e.onDismiss,t=(0,z.jsx)(La,{external:!0,href:"https://github.com/nickcoutsos/keymap-editor/issues",children:"Keymap Editor - Issues"});return(0,z.jsx)(gn,{children:(0,z.jsxs)(pn,{onDismiss:n,children:[(0,z.jsx)("h2",{children:"Could not parse keymap"}),(0,z.jsx)("p",{children:"Missing devicetree root node."}),(0,z.jsx)("p",{children:"The keymap editor was unable to find a devicetree root node in your keymap. This means that either something is wrong with the parser or something is wrong with your keymap's syntax."}),(0,z.jsxs)("p",{children:["If you've been using the keymap editor succesfully up to now it's possible that it has introduced an error in the keymap file. Please reach out for support at ",t,"."]})]})})}cd.propTypes={onDismiss:G().func.isRequired};var ld=cd;function sd(e){var n=e.onDismiss;return(0,z.jsx)(gn,{children:(0,z.jsxs)(pn,{onDismiss:n,children:[(0,z.jsx)("h2",{children:"Could not parse keymap"}),(0,z.jsxs)("p",{children:["Detected use of ",(0,z.jsx)("code",{children:"zmk-nodefree-config"})]}),(0,z.jsx)("p",{children:"It looks like your keymap is built using helper functions from the zmk-nodefree-config library to replace devicetree syntax. Parsing and editing keymaps that use this syntax is unsupported by the Keymap Editor."}),(0,z.jsx)("p",{children:"Please either continue editing your keymap by hand with these helpers or if you would like to use this editor, rewrite the keymap to use ZMK's syntax directly."})]})})}sd.propTypes={onDismiss:G().func.isRequired};var ud=sd;function fd(e){return fd="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},fd(e)}function pd(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function dd(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?pd(Object(t),!0).forEach((function(n){yd(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):pd(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function yd(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==fd(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==fd(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===fd(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}var hd="https://github.com/nickcoutsos/keymap-editor/wiki/Defining-keyboard-layouts",bd="https://nickcoutsos.github.io/keymap-layout-tools/";function Ad(e){var n=(0,z.jsx)(La,{href:hd,external:!0,children:"Keymap Editor Wiki: Defining keyboard layouts"}),t=(0,z.jsx)(La,{href:bd,external:!0,children:"Keymap Layout Tools - Helper"});return(0,z.jsx)(gn,{children:(0,z.jsxs)(pn,dd(dd({},e),{},{children:[(0,z.jsx)("h2",{children:"This layout was Auto-Generated"}),(0,z.jsx)("p",{children:"Hi there! There wasn't a layout definition to accompany your keymap file, so the keymap editor tried to generate one automatically in a last-ditch effort to help you get into the app."}),(0,z.jsxs)("p",{children:["This layout definition was (or will be) saved when you first save keymap changes with the keymap editor, so remember that if there are any tweaks you'd like to make to improve it you can do so by editing the ",(0,z.jsx)("code",{children:"info.json"})," file. If you want an easier way to test changes try pasting your layout into the ",t," (work in progress)."]}),(0,z.jsxs)("p",{children:["For more information on how to do that see ",n,". If you run into any trouble, reach out by making an issue on the project repo and I'd be happy to discuss."]})]}))})}Ad.propTypes={};var md=Ad;function vd(e){return vd="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},vd(e)}function gd(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function xd(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==vd(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==vd(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===vd(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function jd(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(e,n)||function(e,n){if(e){if("string"==typeof e)return Cd(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Cd(e,n):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Cd(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function wd(e){var n=e.onSelect,t=jd((0,r.useState)(ed),2),o=t[0],i=t[1],a=jd((0,r.useState)({autoGenerated:!1}),2),c=a[0].autoGenerated,l=a[1],s=jd((0,r.useState)(null),2),u=s[0],f=s[1],p=(0,r.useCallback)((function(){return f(null)}),[f]),d=(0,r.useCallback)((function(){f({component:md,onClose:p})}),[f,p]),y=(0,r.useCallback)((function(e){var t=e.keymap.warningFlags,r=void 0===t?[]:t,i=(e.layoutMetadata||{}).autoGenerated,a=void 0!==i&&i,c=function(e){switch(e[0]){case"USING_ZMK_NODEFREE_MACROS":return ud;case"USING_MIRYOKU_DTSI":return ad;case"USING_NON_ZMK_MACRO":return td;case"KEYMAP_PARSING_FAILED":return od;case"MISSING_ROOT_NODE":return ld;default:return null}}(r);if(c)return f({component:c,onClose:p}),void n({source:o,keyboard:null});l({autoGenerated:a}),n(function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?gd(Object(t),!0).forEach((function(n){xd(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):gd(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}({source:o},e))}),[n,o,f,p]);(0,r.useEffect)((function(){localStorage.setItem("selectedSource",o)}),[o]);var h=df()(Jp,{id:o});return(0,z.jsxs)("div",{style:{display:"flex",flexDirection:"row",alignItems:"end",gap:"5px",margin:"5px"},children:[(0,z.jsx)(Of,{label:"Source",value:h,options:Jp,getOptionLabel:function(e){return e.name},getOptionValue:function(e){return e.id},onChange:function(e){var n=e.id;return i(n)}}),(null==u?void 0:u.component)&&(0,z.jsx)(u.component,{onDismiss:u.onClose}),"local"===o&&(0,z.jsx)(Df,{onSelect:y}),"demo"===o&&(0,z.jsx)(Wf,{onSelect:y}),"github"===o&&(0,z.jsx)(Hp,{onSelect:y}),c&&(0,z.jsxs)(Cf,{onClick:d,children:[(0,z.jsx)(J,{name:"warning"})," Layout wrong?"]})]})}wd.propTypes={onSelect:G().func.isRequired};var Ed=wd,Od=t(30381),kd=t.n(Od),Sd=t(80047),Bd={};Bd.styleTagTransform=A(),Bd.setAttributes=d(),Bd.insert=f().bind(null,"head"),Bd.domAPI=s(),Bd.insertStyleElement=h(),c()(Sd.Z,Bd);var Pd=Sd.Z&&Sd.Z.locals?Sd.Z.locals:void 0;function Id(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var Td=["success"],Dd=["action_required","cancelled","failure","skipped","stale","timed_out"];function Ld(e){var n,t,o=e.timestamp,i=(n=(0,r.useState)(kd()(o).fromNow()),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||function(e,n){if(e){if("string"==typeof e)return Id(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Id(e,n):void 0}}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=i[0],c=i[1];return(0,r.useEffect)((function(){c(kd()(o).fromNow());var e=setInterval((function(){c(kd()(o).fromNow())}),6e4);return function(){return clearInterval(e)}}),[o,c]),(0,z.jsx)("span",{title:o.toISOString(),children:a})}function Rd(e){var n=e.latestRun,t=Td.includes(n.conclusion)?(0,z.jsx)(J,{name:"check"}):Dd.includes(n.conclusion)?(0,z.jsx)(J,{name:"xmark"}):(0,z.jsx)(de,{});return(0,z.jsxs)(La,{href:n.html_url,className:Pd.buildDetails,external:!0,showExternal:!1,children:[(0,z.jsxs)("span",{className:Pd.buildSummary,children:["Firmware build (",(0,z.jsx)("code",{children:n.head_sha.slice(0,5)}),") ",t,(0,z.jsx)("br",{}),(0,z.jsx)(Ld,{timestamp:new Date(n.updated_at)})]}),(0,z.jsx)(J,{name:"file-arrow-down",className:[Pd.buildStatus,Pd.buildSuccess].join(" ")})]})}Rd.propTypes={latestRun:G().shape({id:G().number.isRequired,name:G().string.isRequired,head_sha:G().string.isRequired,status:G().oneOf(["completed","action_required","cancelled","failure","neutral","skipped","stale","success","timed_out","in_progress","queued","requested","waiting"]).isRequired,conclusion:G().oneOf([null,"action_required","cancelled","failure","neutral","success","skipped","stale","timed_out"]),created_at:G().string.isRequired,updated_at:G().string.isRequired})};var Nd=Rd;function _d(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function Md(e){var n,t,o=e.onConfirm,i=e.onCancel,a=(n=(0,r.useState)(""),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||function(e,n){if(e){if("string"==typeof e)return _d(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?_d(e,n):void 0}}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),c=a[0],l=a[1];return(0,z.jsx)(gn,{children:(0,z.jsxs)(pn,{dismissText:null,children:[(0,z.jsx)("h2",{children:"Commit keymap changes"}),(0,z.jsx)("textarea",{style:{width:"100%"},placeholder:"Message (optional)",value:c,onChange:function(e){l(e.target.value)}}),(0,z.jsxs)("p",{style:{textAlign:"center",gap:"10px"},children:[(0,z.jsx)($e,{onClick:function(){return o(c)},children:"Commit"}),(0,z.jsx)($e,{onClick:i,secondary:!0,children:"Cancel"})]})]})})}Md.propTypes={onConfirm:G().func.isRequired,onCancel:G().func.isRequired};var Yd=Md,Kd=t(70401),Zd=t.n(Kd),qd=t(14084),Ud={};Ud.styleTagTransform=A(),Ud.setAttributes=d(),Ud.insert=f().bind(null,"head"),Ud.domAPI=s(),Ud.insertStyleElement=h(),c()(qd.Z,Ud);var Gd=qd.Z&&qd.Z.locals?qd.Z.locals:void 0;function zd(e){return zd="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},zd(e)}function Wd(){Wd=function(){return e};var e={},n=Object.prototype,t=n.hasOwnProperty,r=Object.defineProperty||function(e,n,t){e[n]=t.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function l(e,n,t){return Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}),e[n]}try{l({},"")}catch(e){l=function(e,n,t){return e[n]=t}}function s(e,n,t,o){var i=n&&n.prototype instanceof p?n:p,a=Object.create(i.prototype),c=new E(o||[]);return r(a,"_invoke",{value:x(e,t,c)}),a}function u(e,n,t){try{return{type:"normal",arg:e.call(n,t)}}catch(e){return{type:"throw",arg:e}}}e.wrap=s;var f={};function p(){}function d(){}function y(){}var h={};l(h,i,(function(){return this}));var b=Object.getPrototypeOf,A=b&&b(b(O([])));A&&A!==n&&t.call(A,i)&&(h=A);var m=y.prototype=p.prototype=Object.create(h);function v(e){["next","throw","return"].forEach((function(n){l(e,n,(function(e){return this._invoke(n,e)}))}))}function g(e,n){function o(r,i,a,c){var l=u(e[r],e,i);if("throw"!==l.type){var s=l.arg,f=s.value;return f&&"object"==zd(f)&&t.call(f,"__await")?n.resolve(f.__await).then((function(e){o("next",e,a,c)}),(function(e){o("throw",e,a,c)})):n.resolve(f).then((function(e){s.value=e,a(s)}),(function(e){return o("throw",e,a,c)}))}c(l.arg)}var i;r(this,"_invoke",{value:function(e,t){function r(){return new n((function(n,r){o(e,t,n,r)}))}return i=i?i.then(r,r):r()}})}function x(e,n,t){var r="suspendedStart";return function(o,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw i;return{value:void 0,done:!0}}for(t.method=o,t.arg=i;;){var a=t.delegate;if(a){var c=j(a,t);if(c){if(c===f)continue;return c}}if("next"===t.method)t.sent=t._sent=t.arg;else if("throw"===t.method){if("suspendedStart"===r)throw r="completed",t.arg;t.dispatchException(t.arg)}else"return"===t.method&&t.abrupt("return",t.arg);r="executing";var l=u(e,n,t);if("normal"===l.type){if(r=t.done?"completed":"suspendedYield",l.arg===f)continue;return{value:l.arg,done:t.done}}"throw"===l.type&&(r="completed",t.method="throw",t.arg=l.arg)}}}function j(e,n){var t=n.method,r=e.iterator[t];if(void 0===r)return n.delegate=null,"throw"===t&&e.iterator.return&&(n.method="return",n.arg=void 0,j(e,n),"throw"===n.method)||"return"!==t&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+t+"' method")),f;var o=u(r,e.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,f;var i=o.arg;return i?i.done?(n[e.resultName]=i.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=void 0),n.delegate=null,f):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,f)}function C(e){var n={tryLoc:e[0]};1 in e&&(n.catchLoc=e[1]),2 in e&&(n.finallyLoc=e[2],n.afterLoc=e[3]),this.tryEntries.push(n)}function w(e){var n=e.completion||{};n.type="normal",delete n.arg,e.completion=n}function E(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(C,this),this.reset(!0)}function O(e){if(e){var n=e[i];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,o=function n(){for(;++r<e.length;)if(t.call(e,r))return n.value=e[r],n.done=!1,n;return n.value=void 0,n.done=!0,n};return o.next=o}}return{next:k}}function k(){return{value:void 0,done:!0}}return d.prototype=y,r(m,"constructor",{value:y,configurable:!0}),r(y,"constructor",{value:d,configurable:!0}),d.displayName=l(y,c,"GeneratorFunction"),e.isGeneratorFunction=function(e){var n="function"==typeof e&&e.constructor;return!!n&&(n===d||"GeneratorFunction"===(n.displayName||n.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,y):(e.__proto__=y,l(e,c,"GeneratorFunction")),e.prototype=Object.create(m),e},e.awrap=function(e){return{__await:e}},v(g.prototype),l(g.prototype,a,(function(){return this})),e.AsyncIterator=g,e.async=function(n,t,r,o,i){void 0===i&&(i=Promise);var a=new g(s(n,t,r,o),i);return e.isGeneratorFunction(t)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},v(m),l(m,c,"Generator"),l(m,i,(function(){return this})),l(m,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var n=Object(e),t=[];for(var r in n)t.push(r);return t.reverse(),function e(){for(;t.length;){var r=t.pop();if(r in n)return e.value=r,e.done=!1,e}return e.done=!0,e}},e.values=O,E.prototype={constructor:E,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(w),!e)for(var n in this)"t"===n.charAt(0)&&t.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function r(t,r){return a.type="throw",a.arg=e,n.next=t,r&&(n.method="next",n.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var c=t.call(i,"catchLoc"),l=t.call(i,"finallyLoc");if(c&&l){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(e,n){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&t.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=n&&n<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=n,i?(this.method="next",this.next=i.finallyLoc,f):this.complete(a)},complete:function(e,n){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&n&&(this.next=n),f},finish:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.finallyLoc===e)return this.complete(t.completion,t.afterLoc),w(t),f}},catch:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.tryLoc===e){var r=t.completion;if("throw"===r.type){var o=r.arg;w(t)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,t){return this.delegate={iterator:O(e),resultName:n,nextLoc:t},"next"===this.method&&(this.arg=void 0),f}},e}function Fd(e,n,t,r,o,i,a){try{var c=e[i](a),l=c.value}catch(e){return void t(e)}c.done?n(l):Promise.resolve(l).then(r,o)}function Xd(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(e,n)||function(e,n){if(e){if("string"==typeof e)return Vd(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Vd(e,n):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Vd(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function Qd(e){return"  ".concat(e.fileName,":").concat(e.lineNumber,":").concat(e.columnNumber)}var Hd=(0,z.jsx)(La,{external:!0,href:"https://github.com/nickcoutsos/keymap-editor/issues/new",children:"new issue"});function Jd(e){var n=e.error,t=Xd((0,r.useState)([]),2),o=t[0],i=t[1],a=Xd((0,r.useState)(""),2),c=a[0],l=a[1],s=Xd((0,r.useState)(!1),2),u=s[0],f=s[1];return(0,r.useEffect)((function(){function e(){var t;return t=Wd().mark((function e(){return Wd().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.t0=i,e.next=3,Zd().fromError(n);case 3:e.t1=e.sent,(0,e.t0)(e.t1);case 5:case"end":return e.stop()}}),e)})),e=function(){var e=this,n=arguments;return new Promise((function(r,o){var i=t.apply(e,n);function a(e){Fd(i,r,o,a,c,"next",e)}function c(e){Fd(i,r,o,a,c,"throw",e)}a(void 0)}))},e.apply(this,arguments)}!function(){e.apply(this,arguments)}()}),[i,n]),(0,r.useEffect)((function(){l(function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];return"\n".concat(e.name,"\n\n").concat(e.message,"\n\n").concat(n.map(Qd).join("\n"),"\n").trim()}(n,o))}),[n,o]),(0,r.useEffect)((function(){u&&setTimeout((function(){f(!1)}),3e3)}),[u,f]),(0,z.jsx)(gn,{children:(0,z.jsxs)(pn,{dismissText:!1,style:{maxWidth:"700px"},children:[(0,z.jsx)("h2",{children:"Unexpected error"}),(0,z.jsxs)("p",{children:["Something unexpected happened and the keymap editor app cannot recover. Please consider taking a moment to open a ",Hd,"with the details below to help me investigate and improve the app."]}),(0,z.jsxs)("div",{className:Gd.stackTrace,children:[(0,z.jsx)("pre",{children:c}),(0,z.jsx)(oe,{icon:"copy",title:"Copy error text",className:Gd.button,onClick:function(){var e="".concat("```","\n").concat(c,"\n").concat("```");navigator.clipboard.writeText(e).then((function(){return f(!0)}))}}),u&&(0,z.jsx)("div",{className:Gd.copyMessage,children:"Copied!"})]})]})})}Jd.propTypes={error:G().instanceOf(Error).isRequired};var $d=Jd;function ey(e){return ey="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},ey(e)}function ny(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,(void 0,o=function(e,n){if("object"!==ey(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==ey(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(r.key),"symbol"===ey(o)?o:String(o)),r)}var o}function ty(e,n){return ty=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,n){return e.__proto__=n,e},ty(e,n)}function ry(e){return ry=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},ry(e)}var oy=function(e){!function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),n&&ty(e,n)}(c,e);var n,t,r,o,i,a=(o=c,i=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,n=ry(o);if(i){var t=ry(this).constructor;e=Reflect.construct(n,arguments,t)}else e=n.apply(this,arguments);return function(e,n){if(n&&("object"===ey(n)||"function"==typeof n))return n;if(void 0!==n)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(this,e)});function c(e){var n;return function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,c),(n=a.call(this,e)).state={error:null},n}return n=c,r=[{key:"getDerivedStateFromError",value:function(e){return{error:e}}}],(t=[{key:"render",value:function(){var e=this.props.children,n=this.state.error;return n?(0,z.jsx)($d,{error:n}):e}}])&&ny(n.prototype,t),r&&ny(n,r),Object.defineProperty(n,"prototype",{writable:!1}),c}(r.Component),iy=(0,z.jsx)(La,{external:!0,href:"https://github.com/nickcoutsos/keymap-editor/issues",children:"Keymap Editor - Issues"});function ay(e){var n=e.onDismiss;return(0,z.jsx)(gn,{children:(0,z.jsxs)(pn,{onDismiss:n,children:[(0,z.jsx)("h2",{children:"Failed to save keymap changes"}),(0,z.jsx)("p",{children:"Sorry, an unexpected error occurred while trying to save your keymap."}),(0,z.jsx)("p",{children:"Please try again or raise an issue if the problem persists and I'll try to work it out with you. Seriously I can only get this right if I know what's wrong, and in some cases that comes down to people using this editor in more advanced ways than I myself have."}),(0,z.jsx)("p",{children:iy})]})})}ay.propTypes={onDismiss:G().func.isRequired};var cy=ay;function ly(e){return ly="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},ly(e)}var sy=["source","layout","keymap","sensors"];function uy(){uy=function(){return e};var e={},n=Object.prototype,t=n.hasOwnProperty,r=Object.defineProperty||function(e,n,t){e[n]=t.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function l(e,n,t){return Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}),e[n]}try{l({},"")}catch(e){l=function(e,n,t){return e[n]=t}}function s(e,n,t,o){var i=n&&n.prototype instanceof p?n:p,a=Object.create(i.prototype),c=new E(o||[]);return r(a,"_invoke",{value:x(e,t,c)}),a}function u(e,n,t){try{return{type:"normal",arg:e.call(n,t)}}catch(e){return{type:"throw",arg:e}}}e.wrap=s;var f={};function p(){}function d(){}function y(){}var h={};l(h,i,(function(){return this}));var b=Object.getPrototypeOf,A=b&&b(b(O([])));A&&A!==n&&t.call(A,i)&&(h=A);var m=y.prototype=p.prototype=Object.create(h);function v(e){["next","throw","return"].forEach((function(n){l(e,n,(function(e){return this._invoke(n,e)}))}))}function g(e,n){function o(r,i,a,c){var l=u(e[r],e,i);if("throw"!==l.type){var s=l.arg,f=s.value;return f&&"object"==ly(f)&&t.call(f,"__await")?n.resolve(f.__await).then((function(e){o("next",e,a,c)}),(function(e){o("throw",e,a,c)})):n.resolve(f).then((function(e){s.value=e,a(s)}),(function(e){return o("throw",e,a,c)}))}c(l.arg)}var i;r(this,"_invoke",{value:function(e,t){function r(){return new n((function(n,r){o(e,t,n,r)}))}return i=i?i.then(r,r):r()}})}function x(e,n,t){var r="suspendedStart";return function(o,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw i;return{value:void 0,done:!0}}for(t.method=o,t.arg=i;;){var a=t.delegate;if(a){var c=j(a,t);if(c){if(c===f)continue;return c}}if("next"===t.method)t.sent=t._sent=t.arg;else if("throw"===t.method){if("suspendedStart"===r)throw r="completed",t.arg;t.dispatchException(t.arg)}else"return"===t.method&&t.abrupt("return",t.arg);r="executing";var l=u(e,n,t);if("normal"===l.type){if(r=t.done?"completed":"suspendedYield",l.arg===f)continue;return{value:l.arg,done:t.done}}"throw"===l.type&&(r="completed",t.method="throw",t.arg=l.arg)}}}function j(e,n){var t=n.method,r=e.iterator[t];if(void 0===r)return n.delegate=null,"throw"===t&&e.iterator.return&&(n.method="return",n.arg=void 0,j(e,n),"throw"===n.method)||"return"!==t&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+t+"' method")),f;var o=u(r,e.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,f;var i=o.arg;return i?i.done?(n[e.resultName]=i.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=void 0),n.delegate=null,f):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,f)}function C(e){var n={tryLoc:e[0]};1 in e&&(n.catchLoc=e[1]),2 in e&&(n.finallyLoc=e[2],n.afterLoc=e[3]),this.tryEntries.push(n)}function w(e){var n=e.completion||{};n.type="normal",delete n.arg,e.completion=n}function E(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(C,this),this.reset(!0)}function O(e){if(e){var n=e[i];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,o=function n(){for(;++r<e.length;)if(t.call(e,r))return n.value=e[r],n.done=!1,n;return n.value=void 0,n.done=!0,n};return o.next=o}}return{next:k}}function k(){return{value:void 0,done:!0}}return d.prototype=y,r(m,"constructor",{value:y,configurable:!0}),r(y,"constructor",{value:d,configurable:!0}),d.displayName=l(y,c,"GeneratorFunction"),e.isGeneratorFunction=function(e){var n="function"==typeof e&&e.constructor;return!!n&&(n===d||"GeneratorFunction"===(n.displayName||n.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,y):(e.__proto__=y,l(e,c,"GeneratorFunction")),e.prototype=Object.create(m),e},e.awrap=function(e){return{__await:e}},v(g.prototype),l(g.prototype,a,(function(){return this})),e.AsyncIterator=g,e.async=function(n,t,r,o,i){void 0===i&&(i=Promise);var a=new g(s(n,t,r,o),i);return e.isGeneratorFunction(t)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},v(m),l(m,c,"Generator"),l(m,i,(function(){return this})),l(m,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var n=Object(e),t=[];for(var r in n)t.push(r);return t.reverse(),function e(){for(;t.length;){var r=t.pop();if(r in n)return e.value=r,e.done=!1,e}return e.done=!0,e}},e.values=O,E.prototype={constructor:E,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(w),!e)for(var n in this)"t"===n.charAt(0)&&t.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function r(t,r){return a.type="throw",a.arg=e,n.next=t,r&&(n.method="next",n.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var c=t.call(i,"catchLoc"),l=t.call(i,"finallyLoc");if(c&&l){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(e,n){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&t.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=n&&n<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=n,i?(this.method="next",this.next=i.finallyLoc,f):this.complete(a)},complete:function(e,n){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&n&&(this.next=n),f},finish:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.finallyLoc===e)return this.complete(t.completion,t.afterLoc),w(t),f}},catch:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.tryLoc===e){var r=t.completion;if("throw"===r.type){var o=r.arg;w(t)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,t){return this.delegate={iterator:O(e),resultName:n,nextLoc:t},"next"===this.method&&(this.arg=void 0),f}},e}function fy(e,n,t,r,o,i,a){try{var c=e[i](a),l=c.value}catch(e){return void t(e)}c.done?n(l):Promise.resolve(l).then(r,o)}function py(e){return function(){var n=this,t=arguments;return new Promise((function(r,o){var i=e.apply(n,t);function a(e){fy(i,r,o,a,c,"next",e)}function c(e){fy(i,r,o,a,c,"throw",e)}a(void 0)}))}}var dy=function(){var e=(0,i.v9)((function(e){return e})),n=(0,i.I0)(),t=e.source,o=e.sourceOther,a=e.keyboard,c=e._unmodifiedKeymap,l=e.saving,s=e.saveError,u=e.theme,f=e.settingsVisible,p=e.experimentalSettings,d=e.latestBuild;function y(){return y=py(uy().mark((function t(){var r,i,a;return uy().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=o.keyboard,i=e.keyboard.keymap,t.prev=2,t.next=5,Z(r,i);case 5:a=t.sent,n({type:"KEYMAP_SAVE_SUCCESS",keymap:a}),t.next=12;break;case 9:t.prev=9,t.t0=t.catch(2),n({type:"KEYMAP_SAVE_FAILURE"});case 12:case"end":return t.stop()}}),t,null,[[2,9]])}))),y.apply(this,arguments)}(0,r.useEffect)((function(){if(null!=o&&o.github)return py(uy().mark((function n(){var t,r,i;return uy().wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return t=o.github,r=t.repository,i=t.branch,n.t0=e,n.next=4,fp.fetchBuildStatus(r,i);case 4:n.t1=n.sent,(0,n.t0)(n.t1);case 6:case"end":return n.stop()}}),n)})))(),fp.on("build-update",e),function(){return fp.off("build-update",e)};function e(e){e.head_branch===o.github.branch&&n({type:"GITHUB_BUILD_UPDATE",build:e})}n({type:"GITHUB_BUILD_UPDATE",build:null})}),[o,n]);var h=(0,r.useCallback)((function(e){var t=o.github,r=t.repository,i=t.branch;py(uy().mark((function t(){var c,l,s,u;return uy().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n({type:"COMMIT_DIALOG_CLOSE"}),n({type:"KEYMAP_SAVE_START"}),c=a.layout,l=a.keymap,t.prev=3,t.next=6,fp.commitChanges(r,i,c,l,{message:e,experimentalSettings:p,keyboard:o.github.keyboard});case 6:s=t.sent,u=s.data,n({type:"KEYMAP_SAVE_SUCCESS",keymap:u}),t.next=14;break;case 11:t.prev=11,t.t0=t.catch(3),n({type:"KEYMAP_SAVE_FAILURE"});case 14:case"end":return t.stop()}}),t,null,[[3,11]])})))()}),[o,a,n,p]),b=(0,r.useCallback)((function(e){var t=e.source,r=e.layout,o=e.keymap,i=e.sensors,a=void 0===i?[]:i,c=function(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}(e,sy);n(o?{type:"SELECT_KEYBOARD",source:t,sourceOther:c,layout:r,keymap:o,sensors:a}:{type:"CLEAR_KEYBOARD_SELECTION"})}),[n]),A=(0,r.useCallback)((function(e){n({type:"SETTINGS_UPDATE",settings:e})}),[n]),m=(0,r.useCallback)((function(){return n({type:"SETTINGS_OPEN"})}),[n]),v=a&&!Object.is(a.keymap,c);return(0,z.jsxs)(z.Fragment,{children:[(0,z.jsx)(oy,{children:(0,z.jsxs)(C.Provider,{value:{settings:p,openSettingsDialog:m},children:[(0,z.jsx)(Ed,{onSelect:b}),(0,z.jsxs)("div",{id:"settings-bar",children:[(0,z.jsx)(oe,{id:"light-mode",title:"Toggle theme",icon:{light:"sun",dark:"moon",system:"circle-half-stroke"}[u]||"circle-half-stroke",onClick:function(){return n({type:"CYCLE_THEME"})}}),(0,z.jsx)(oe,{id:"settings-button",icon:"cog",onClick:m}),f&&(0,z.jsx)(ff,{settings:p,onUpdate:A,onClose:function(){return n({type:"SETTINGS_CLOSE"})}})]}),(0,z.jsxs)("div",{id:"actions",children:["local"===t&&(0,z.jsx)("button",{disabled:!v,onClick:function(){return y.apply(this,arguments)},children:"Save Local"}),"github"===t&&(0,z.jsxs)("button",{title:"Commit keymap changes to GitHub repository",disabled:!v,onClick:function(){n({type:"COMMIT_DIALOG_OPEN"})},children:[l?"Saving":"Commit Changes",l&&(0,z.jsx)(de,{})]}),e.commitDialogOpen&&(0,z.jsx)(Yd,{onConfirm:h,onCancel:function(){return n({type:"COMMIT_DIALOG_CLOSE"})}}),d&&(0,z.jsx)(Nd,{latestRun:d})]}),(0,z.jsxs)(Ye,{children:[a&&(0,z.jsx)(Zt,{layout:a.layout,children:(0,z.jsx)(Ju,{keymap:a.keymap,sensors:a.sensors})}),s&&(0,z.jsx)(cy,{onDismiss:function(){return n({type:"CLEAR_SAVE_ERROR"})}})]})]})}),(0,z.jsx)(rf,{})]})};function yy(e){return yy="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},yy(e)}function hy(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function by(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?hy(Object(t),!0).forEach((function(n){Ay(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):hy(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Ay(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==yy(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==yy(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===yy(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function my(){var e=JSON.parse(localStorage.getItem("experimental-settings")||"{}");return{definitions:null,source:null,sourceOther:null,keyboard:null,_unmodifiedKeymap:null,saving:null,saveError:null,settingsVisible:null,commitDialogOpen:!1,theme:JSON.parse(localStorage.getItem("theme")),experimentalSettings:{unicodeGlyphs:me()(e,"unicodeGlyphs",!0),platformGlyphs:me()(e,"platformGlyphs","auto"),enableBehaviorEditing:me()(e,"enableBehaviorEditing",!1)},latestBuild:null}}var vy=my();var gy=t(14890);function xy(e){return xy="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},xy(e)}function jy(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Cy(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?jy(Object(t),!0).forEach((function(n){wy(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):jy(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function wy(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==xy(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==xy(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===xy(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}var Ey=(0,gy.UY)({layout:function(){return arguments.length>0&&void 0!==arguments[0]?arguments[0]:[]},sensors:function(){return arguments.length>0&&void 0!==arguments[0]?arguments[0]:[]},keymap:(0,gy.UY)({warningFlags:function(){return arguments.length>0&&void 0!==arguments[0]?arguments[0]:[]},defines:function(){return arguments.length>0&&void 0!==arguments[0]?arguments[0]:[]},chosen:function(){return arguments.length>0&&void 0!==arguments[0]?arguments[0]:{}},behaviors:tc,combos:ul,layers:Wc,macros:tu})}),Oy=(0,Xa.xC)({reducer:function(e,n){var t=function(e,n){var t=n.type,r=e.keyboard;switch(t){case"INITIALIZE":return my();case"DEFINITIONS_SET":return by(by({},e),{},{definitions:n.definitions});case"CLEAR_KEYBOARD_SELECTION":return by(by({},e),{},{keyboard:null});case"SELECT_KEYBOARD":return by(by({},e),{},{source:n.source,sourceOther:n.sourceOther,keyboard:by(by({},r),_n()(n,["layout","keymap","sensors"])),_unmodifiedKeymap:n.keymap});case"COMMIT_DIALOG_OPEN":return by(by({},e),{},{commitDialogOpen:!0});case"COMMIT_DIALOG_CLOSE":return by(by({},e),{},{commitDialogOpen:!1});case"GITHUB_BUILD_UPDATE":return by(by({},e),{},{latestBuild:n.build});case"KEYMAP_SAVE_START":return by(by({},e),{},{saving:!0,saveError:!1});case"KEYMAP_SAVE_SUCCESS":return by(by({},e),{},{saving:!1,unsaved:!1,keyboard:by(by({},e.keyboard),{},{keymap:n.keymap||e.keyboard.keymap}),_unmodifiedKeymap:n.keymap||e.keyboard.keymap});case"KEYMAP_SAVE_FAILURE":return by(by({},e),{},{saving:!1,saveError:!0});case"CLEAR_SAVE_ERROR":return by(by({},e),{},{saveError:null});case"SETTINGS_OPEN":return by(by({},e),{},{settingsVisible:!0});case"SETTINGS_CLOSE":return by(by({},e),{},{settingsVisible:!1});case"SETTINGS_UPDATE":return localStorage.setItem("experimental-settings",JSON.stringify(n.settings)),by(by({},e),{},{experimentalSettings:n.settings});case"CYCLE_THEME":return function(e,n){var t=["light","dark","system"],r=t.indexOf(e.theme),o=t.at((r+1)%t.length);return localStorage.setItem("theme",'"'.concat(o,'"')),document.body.dataset.theme=o,by(by({},e),{},{theme:o})}(e);default:return e}}(e,n);return Cy(Cy({},t),{},{keyboard:t.keyboard&&Cy(Cy({},t.keyboard),Ey(t.keyboard,n))})},preloadedState:vy});document.body.dataset.theme=vy.theme,o.createRoot(document.getElementById("app-root")).render((0,z.jsx)(r.StrictMode,{children:(0,z.jsx)(i.zt,{store:Oy,children:(0,z.jsx)(dy,{})})}))},39087:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,':root {\n  --bg: white;\n  --bg-rgb: 255,255,255;\n  --fg: black;\n\t--dark-red: #910e0e;\n\t--dark-blue: #6d99c6;\n  --error-highlight: rgb(179, 60, 60);\n  --selection: rgb(60, 179, 113);\n  --hover-selection: rgba(60, 179, 113, 0.85);\n  --delete: rgb(179, 60, 72);\n  --delete-faint: rgba(179, 60, 72, 0.6);\n  --link: royalblue;\n  --link-hover: #6d99c6;\n  --key-bg-base: #f2f2f2;\n  --key-bg-hover: white;\n  --key-bg-highlight: sandybrown;\n  --key-color-base: #6f6f6f;\n  --key-color-extreme: #313131;\n  --key-color-hover: white;\n  --code-bg: rgba(0, 0, 0, 0.15);\n}\nhtml {\n  font-family: sans-serif;\n}\nhtml, body {\n\twidth: 100vw;\n\theight: 100vh;\n\toverflow: auto;\n\tpadding: 0;\n\tmargin: 0;\n  background-color: var(--bg);\n  color: var(--fg);\n\n  transition: 300ms ease-in-out;\n  transition-property: color, background-color, border-color;\n}\n\nh1, h2, h3, h4, h5, h6 {\n  font-family: Quicksand, avenir, sans-serif;\n}\n\nbody[data-theme="dark"] {\n  color-scheme: dark;\n  --bg: #123;\n  --bg-rgb: 17,34,51;\n  --fg: white;\n  --key-bg-base: #1c2c3b;\n  --key-color-base: #b7b7b7;\n  --key-color-extreme: #e7e7e7;\n}\n@media (prefers-color-scheme: dark) {\n  body[data-theme="system"] {\n    color-scheme: dark;\n    --bg: #123;\n    --bg-rgb: 17,34,51;\n    --fg: white;\n    --key-bg-base: #1c2c3b;\n    --key-color-base: #b7b7b7;\n    --key-color-extreme: #e7e7e7;\n  }\n}\n\nh3 {\n  margin-bottom: 10px;\n}\n\na { color: var(--link) }\na:hover { color: var(--link-hover) }\n\ncode {\n  background-color: var(--code-bg);\n  border-radius: 2px;\n  padding: .15em .3em .05em;\n}\n\n#actions {\n\tposition: absolute;\n  display: flex;\n\tbottom: 5px;\n\tright: 5px;\n  gap: 4px;\n}\n\n#actions button {\n  display: inline-block;\n  cursor: pointer;\n  background-color: var(--hover-selection);\n  color: white;\n\n  font-size: 16px;\n  border: none;\n  border-radius: 5px;\n  padding: 0 5px;\n\n  height: 30px;\n  line-height: 30px;\n  vertical-align: middle;\n}\n\n#actions button[disabled] {\n  filter: saturate(20%);\n  opacity: .5;\n  cursor: not-allowed;\n}\n\n#settings-bar {\n  position: absolute;\n  top: 10px;\n  right: 10px;\n}\n\n#settings-bar button {\n  background: none;\n  color: var(--fg);\n  border: none;\n}\n#settings-bar button:hover {\n  cursor: pointer;\n  color: royalblue;\n}\n\n.fa-delete-right::before {\n  content: \'\\f55a\';\n  transform-origin: center;\n  transform: rotateZ(180deg);\n  display: inline-block;\n}\n',"",{version:3,sources:["webpack://./src/App.css"],names:[],mappings:"AAAA;EACE,WAAW;EACX,qBAAqB;EACrB,WAAW;CACZ,mBAAmB;CACnB,oBAAoB;EACnB,mCAAmC;EACnC,8BAA8B;EAC9B,2CAA2C;EAC3C,0BAA0B;EAC1B,sCAAsC;EACtC,iBAAiB;EACjB,qBAAqB;EACrB,sBAAsB;EACtB,qBAAqB;EACrB,8BAA8B;EAC9B,yBAAyB;EACzB,4BAA4B;EAC5B,wBAAwB;EACxB,8BAA8B;AAChC;AACA;EACE,uBAAuB;AACzB;AACA;CACC,YAAY;CACZ,aAAa;CACb,cAAc;CACd,UAAU;CACV,SAAS;EACR,2BAA2B;EAC3B,gBAAgB;;EAEhB,6BAA6B;EAC7B,0DAA0D;AAC5D;;AAEA;EACE,0CAA0C;AAC5C;;AAEA;EACE,kBAAkB;EAClB,UAAU;EACV,kBAAkB;EAClB,WAAW;EACX,sBAAsB;EACtB,yBAAyB;EACzB,4BAA4B;AAC9B;AACA;EACE;IACE,kBAAkB;IAClB,UAAU;IACV,kBAAkB;IAClB,WAAW;IACX,sBAAsB;IACtB,yBAAyB;IACzB,4BAA4B;EAC9B;AACF;;AAEA;EACE,mBAAmB;AACrB;;AAEA,IAAI,mBAAmB;AACvB,UAAU,yBAAyB;;AAEnC;EACE,gCAAgC;EAChC,kBAAkB;EAClB,yBAAyB;AAC3B;;AAEA;CACC,kBAAkB;EACjB,aAAa;CACd,WAAW;CACX,UAAU;EACT,QAAQ;AACV;;AAEA;EACE,qBAAqB;EACrB,eAAe;EACf,wCAAwC;EACxC,YAAY;;EAEZ,eAAe;EACf,YAAY;EACZ,kBAAkB;EAClB,cAAc;;EAEd,YAAY;EACZ,iBAAiB;EACjB,sBAAsB;AACxB;;AAEA;EACE,qBAAqB;EACrB,WAAW;EACX,mBAAmB;AACrB;;AAEA;EACE,kBAAkB;EAClB,SAAS;EACT,WAAW;AACb;;AAEA;EACE,gBAAgB;EAChB,gBAAgB;EAChB,YAAY;AACd;AACA;EACE,eAAe;EACf,gBAAgB;AAClB;;AAEA;EACE,gBAAgB;EAChB,wBAAwB;EACxB,0BAA0B;EAC1B,qBAAqB;AACvB",sourcesContent:[':root {\n  --bg: white;\n  --bg-rgb: 255,255,255;\n  --fg: black;\n\t--dark-red: #910e0e;\n\t--dark-blue: #6d99c6;\n  --error-highlight: rgb(179, 60, 60);\n  --selection: rgb(60, 179, 113);\n  --hover-selection: rgba(60, 179, 113, 0.85);\n  --delete: rgb(179, 60, 72);\n  --delete-faint: rgba(179, 60, 72, 0.6);\n  --link: royalblue;\n  --link-hover: #6d99c6;\n  --key-bg-base: #f2f2f2;\n  --key-bg-hover: white;\n  --key-bg-highlight: sandybrown;\n  --key-color-base: #6f6f6f;\n  --key-color-extreme: #313131;\n  --key-color-hover: white;\n  --code-bg: rgba(0, 0, 0, 0.15);\n}\nhtml {\n  font-family: sans-serif;\n}\nhtml, body {\n\twidth: 100vw;\n\theight: 100vh;\n\toverflow: auto;\n\tpadding: 0;\n\tmargin: 0;\n  background-color: var(--bg);\n  color: var(--fg);\n\n  transition: 300ms ease-in-out;\n  transition-property: color, background-color, border-color;\n}\n\nh1, h2, h3, h4, h5, h6 {\n  font-family: Quicksand, avenir, sans-serif;\n}\n\nbody[data-theme="dark"] {\n  color-scheme: dark;\n  --bg: #123;\n  --bg-rgb: 17,34,51;\n  --fg: white;\n  --key-bg-base: #1c2c3b;\n  --key-color-base: #b7b7b7;\n  --key-color-extreme: #e7e7e7;\n}\n@media (prefers-color-scheme: dark) {\n  body[data-theme="system"] {\n    color-scheme: dark;\n    --bg: #123;\n    --bg-rgb: 17,34,51;\n    --fg: white;\n    --key-bg-base: #1c2c3b;\n    --key-color-base: #b7b7b7;\n    --key-color-extreme: #e7e7e7;\n  }\n}\n\nh3 {\n  margin-bottom: 10px;\n}\n\na { color: var(--link) }\na:hover { color: var(--link-hover) }\n\ncode {\n  background-color: var(--code-bg);\n  border-radius: 2px;\n  padding: .15em .3em .05em;\n}\n\n#actions {\n\tposition: absolute;\n  display: flex;\n\tbottom: 5px;\n\tright: 5px;\n  gap: 4px;\n}\n\n#actions button {\n  display: inline-block;\n  cursor: pointer;\n  background-color: var(--hover-selection);\n  color: white;\n\n  font-size: 16px;\n  border: none;\n  border-radius: 5px;\n  padding: 0 5px;\n\n  height: 30px;\n  line-height: 30px;\n  vertical-align: middle;\n}\n\n#actions button[disabled] {\n  filter: saturate(20%);\n  opacity: .5;\n  cursor: not-allowed;\n}\n\n#settings-bar {\n  position: absolute;\n  top: 10px;\n  right: 10px;\n}\n\n#settings-bar button {\n  background: none;\n  color: var(--fg);\n  border: none;\n}\n#settings-bar button:hover {\n  cursor: pointer;\n  color: royalblue;\n}\n\n.fa-delete-right::before {\n  content: \'\\f55a\';\n  transform-origin: center;\n  transform: rotateZ(180deg);\n  display: inline-block;\n}\n'],sourceRoot:""}]),n.Z=a},51424:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,"body {\n  margin: 0;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\ncode {\n  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n    monospace;\n}\n","",{version:3,sources:["webpack://./src/index.css"],names:[],mappings:"AAAA;EACE,SAAS;EACT,mCAAmC;EACnC,kCAAkC;AACpC;;AAEA;EACE;aACW;AACb",sourcesContent:["body {\n  margin: 0;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\ncode {\n  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n    monospace;\n}\n"],sourceRoot:""}]),n.Z=a},56281:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,"button.pi2Ig8c3Fdh4H2Jpxdo7 {\n  display: inline-block;\n  cursor: pointer;\n  background-color: var(--hover-selection);\n  color: white;\n\n  font-size: 16px;\n  border: none;\n  border-radius: 5px;\n  padding: 0 5px;\n\n  height: 30px;\n  line-height: 30px;\n  vertical-align: middle;\n}\n\nbutton.Ctpu4E2dZYJ6g8CUGFOF {\n  color: var(--fg);\n  background-color: transparent;\n}\n\nbutton.pi2Ig8c3Fdh4H2Jpxdo7[disabled] {\n  filter: saturate(20%);\n  opacity: .5;\n  cursor: not-allowed;\n}\n","",{version:3,sources:["webpack://./src/Common/action-button.module.css"],names:[],mappings:"AAAA;EACE,qBAAqB;EACrB,eAAe;EACf,wCAAwC;EACxC,YAAY;;EAEZ,eAAe;EACf,YAAY;EACZ,kBAAkB;EAClB,cAAc;;EAEd,YAAY;EACZ,iBAAiB;EACjB,sBAAsB;AACxB;;AAEA;EACE,gBAAgB;EAChB,6BAA6B;AAC/B;;AAEA;EACE,qBAAqB;EACrB,WAAW;EACX,mBAAmB;AACrB",sourcesContent:["button.action {\n  display: inline-block;\n  cursor: pointer;\n  background-color: var(--hover-selection);\n  color: white;\n\n  font-size: 16px;\n  border: none;\n  border-radius: 5px;\n  padding: 0 5px;\n\n  height: 30px;\n  line-height: 30px;\n  vertical-align: middle;\n}\n\nbutton.secondary {\n  color: var(--fg);\n  background-color: transparent;\n}\n\nbutton.action[disabled] {\n  filter: saturate(20%);\n  opacity: .5;\n  cursor: not-allowed;\n}\n"],sourceRoot:""}]),a.locals={action:"pi2Ig8c3Fdh4H2Jpxdo7",secondary:"Ctpu4E2dZYJ6g8CUGFOF"},n.Z=a},56634:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,".jThiLc5_BrUyl71v3rKn {\n  display: inline-block;\n  position: absolute;\n  z-index: 5;\n  font-size: 70%;\n  background: var(--bg);\n  padding: 5px 10px;\n  margin-left: 10px;\n\n  border-radius: 4px;\n}\n\n.jThiLc5_BrUyl71v3rKn p {\n  display: inline-block;\n  cursor: pointer;\n  margin: 0;\n}\n\n.jThiLc5_BrUyl71v3rKn ul {\n  display: none;\n}\n.jThiLc5_BrUyl71v3rKn.xG2GKlsc07jLEb2aMC6H {\n  box-shadow: 2px 2px 5px 0px rgba(0, 0, 0, 0.5);\n}\n.jThiLc5_BrUyl71v3rKn.xG2GKlsc07jLEb2aMC6H ul {\n  display: block;\n  padding: 0;\n  margin: 0;\n  list-style-type: none;\n}\n\n.jThiLc5_BrUyl71v3rKn li {\n  cursor: pointer;\n  margin: 2px 0;\n  line-height: 20px;\n  padding: 0 5px;\n  border-radius: 10px;\n}\n\n.jThiLc5_BrUyl71v3rKn li:hover {\n  background-color: var(--hover-selection);\n  color: white;\n}\n","",{version:3,sources:["webpack://./src/Common/action-menu.module.css"],names:[],mappings:"AAAA;EACE,qBAAqB;EACrB,kBAAkB;EAClB,UAAU;EACV,cAAc;EACd,qBAAqB;EACrB,iBAAiB;EACjB,iBAAiB;;EAEjB,kBAAkB;AACpB;;AAEA;EACE,qBAAqB;EACrB,eAAe;EACf,SAAS;AACX;;AAEA;EACE,aAAa;AACf;AACA;EACE,8CAA8C;AAChD;AACA;EACE,cAAc;EACd,UAAU;EACV,SAAS;EACT,qBAAqB;AACvB;;AAEA;EACE,eAAe;EACf,aAAa;EACb,iBAAiB;EACjB,cAAc;EACd,mBAAmB;AACrB;;AAEA;EACE,wCAAwC;EACxC,YAAY;AACd",sourcesContent:[".menu {\n  display: inline-block;\n  position: absolute;\n  z-index: 5;\n  font-size: 70%;\n  background: var(--bg);\n  padding: 5px 10px;\n  margin-left: 10px;\n\n  border-radius: 4px;\n}\n\n.menu p {\n  display: inline-block;\n  cursor: pointer;\n  margin: 0;\n}\n\n.menu ul {\n  display: none;\n}\n.menu.open {\n  box-shadow: 2px 2px 5px 0px rgba(0, 0, 0, 0.5);\n}\n.menu.open ul {\n  display: block;\n  padding: 0;\n  margin: 0;\n  list-style-type: none;\n}\n\n.menu li {\n  cursor: pointer;\n  margin: 2px 0;\n  line-height: 20px;\n  padding: 0 5px;\n  border-radius: 10px;\n}\n\n.menu li:hover {\n  background-color: var(--hover-selection);\n  color: white;\n}\n"],sourceRoot:""}]),a.locals={menu:"jThiLc5_BrUyl71v3rKn",open:"xG2GKlsc07jLEb2aMC6H"},n.Z=a},49502:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,".ZpdcqlK42OntJos3eGw0 {\n  background-color: var(--bg);\n  padding: 20px 40px;\n  margin: 40px;\n  max-width: 500px;\n  box-shadow: 0px 10px 25px rgba(0, 0, 0, 0.4);\n  border-radius: 2px;\n}\n\n.ZpdcqlK42OntJos3eGw0 p, .ZpdcqlK42OntJos3eGw0 ul {\n  font-family: sans-serif;\n  line-height: 1.3rem;\n}\n\n.Mywg1Gw3bKMc9Kd9qcEO {\n  display: block;\n  margin: 0 auto;\n}\n","",{version:3,sources:["webpack://./src/Common/dialog-box.module.css"],names:[],mappings:"AAAA;EACE,2BAA2B;EAC3B,kBAAkB;EAClB,YAAY;EACZ,gBAAgB;EAChB,4CAA4C;EAC5C,kBAAkB;AACpB;;AAEA;EACE,uBAAuB;EACvB,mBAAmB;AACrB;;AAEA;EACE,cAAc;EACd,cAAc;AAChB",sourcesContent:[".dialog {\n  background-color: var(--bg);\n  padding: 20px 40px;\n  margin: 40px;\n  max-width: 500px;\n  box-shadow: 0px 10px 25px rgba(0, 0, 0, 0.4);\n  border-radius: 2px;\n}\n\n.dialog p, .dialog ul {\n  font-family: sans-serif;\n  line-height: 1.3rem;\n}\n\n.button {\n  display: block;\n  margin: 0 auto;\n}\n"],sourceRoot:""}]),a.locals={dialog:"ZpdcqlK42OntJos3eGw0",button:"Mywg1Gw3bKMc9Kd9qcEO"},n.Z=a},86015:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,".ho3CuFFjX1VFNZJiAyVs {\n  position: relative;\n}\n\n.u9J3v5ZrIbuVICzNBkRw {\n  padding: 5px;\n  cursor: pointer;\n  opacity: 0.5;\n  color: var(--key-color-base);\n}\n.u9J3v5ZrIbuVICzNBkRw:hover {\n  opacity: 1;\n}\n\n.wmqWaOx7XyKADh7Kv4RZ {\n  position: absolute;\n  z-index: 10;\n  bottom: 0;\n  left: 50%;\n  transform: translate(-50%, 100%);\n  max-width: 250px;\n  width: 100%;\n\n  border-radius: 4px;\n  padding: 3px 5px;\n\n  color: white;\n  background-color: var(--error-highlight);\n  font-size: 85%;\n  font-family: sans-serif;\n\n  opacity: 0.9;\n}\n.wmqWaOx7XyKADh7Kv4RZ::before {\n  position: absolute;\n  display: block;\n  content: ' ';\n  z-index: -1;\n\n  left: 50%;\n  width: 10px;\n  height: 10px;\n\n  background-color: var(--error-highlight);\n  transform: translate(-50%, -7px) rotate(45deg);\n}\n","",{version:3,sources:["webpack://./src/Common/editablefield.module.css"],names:[],mappings:"AAAA;EACE,kBAAkB;AACpB;;AAEA;EACE,YAAY;EACZ,eAAe;EACf,YAAY;EACZ,4BAA4B;AAC9B;AACA;EACE,UAAU;AACZ;;AAEA;EACE,kBAAkB;EAClB,WAAW;EACX,SAAS;EACT,SAAS;EACT,gCAAgC;EAChC,gBAAgB;EAChB,WAAW;;EAEX,kBAAkB;EAClB,gBAAgB;;EAEhB,YAAY;EACZ,wCAAwC;EACxC,cAAc;EACd,uBAAuB;;EAEvB,YAAY;AACd;AACA;EACE,kBAAkB;EAClB,cAAc;EACd,YAAY;EACZ,WAAW;;EAEX,SAAS;EACT,WAAW;EACX,YAAY;;EAEZ,wCAAwC;EACxC,8CAA8C;AAChD",sourcesContent:[".container {\n  position: relative;\n}\n\n.edit {\n  padding: 5px;\n  cursor: pointer;\n  opacity: 0.5;\n  color: var(--key-color-base);\n}\n.edit:hover {\n  opacity: 1;\n}\n\n.error {\n  position: absolute;\n  z-index: 10;\n  bottom: 0;\n  left: 50%;\n  transform: translate(-50%, 100%);\n  max-width: 250px;\n  width: 100%;\n\n  border-radius: 4px;\n  padding: 3px 5px;\n\n  color: white;\n  background-color: var(--error-highlight);\n  font-size: 85%;\n  font-family: sans-serif;\n\n  opacity: 0.9;\n}\n.error::before {\n  position: absolute;\n  display: block;\n  content: ' ';\n  z-index: -1;\n\n  left: 50%;\n  width: 10px;\n  height: 10px;\n\n  background-color: var(--error-highlight);\n  transform: translate(-50%, -7px) rotate(45deg);\n}\n"],sourceRoot:""}]),a.locals={container:"ho3CuFFjX1VFNZJiAyVs",edit:"u9J3v5ZrIbuVICzNBkRw",error:"wmqWaOx7XyKADh7Kv4RZ"},n.Z=a},33988:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,".OaJISbD1WCmb03at77EG {\n  position: relative;\n}\n\n.MUN9De8dUvbPGH9cEDoQ {\n  position: absolute;\n  z-index: 10;\n  bottom: 0;\n  left: 50%;\n  transform: translate(-50%, 100%);\n  max-width: 250px;\n  width: 100%;\n\n  border-radius: 4px;\n  padding: 3px 5px;\n\n  color: white;\n  background-color: var(--error-highlight);\n  font-size: 85%;\n  font-family: sans-serif;\n\n  opacity: 0.9;\n}\n.MUN9De8dUvbPGH9cEDoQ::before {\n  position: absolute;\n  display: block;\n  content: ' ';\n  z-index: -1;\n\n  left: 50%;\n  width: 10px;\n  height: 10px;\n\n  background-color: var(--error-highlight);\n  transform: translate(-50%, -7px) rotate(45deg);\n}\n","",{version:3,sources:["webpack://./src/Common/input.module.css"],names:[],mappings:"AAAA;EACE,kBAAkB;AACpB;;AAEA;EACE,kBAAkB;EAClB,WAAW;EACX,SAAS;EACT,SAAS;EACT,gCAAgC;EAChC,gBAAgB;EAChB,WAAW;;EAEX,kBAAkB;EAClB,gBAAgB;;EAEhB,YAAY;EACZ,wCAAwC;EACxC,cAAc;EACd,uBAAuB;;EAEvB,YAAY;AACd;AACA;EACE,kBAAkB;EAClB,cAAc;EACd,YAAY;EACZ,WAAW;;EAEX,SAAS;EACT,WAAW;EACX,YAAY;;EAEZ,wCAAwC;EACxC,8CAA8C;AAChD",sourcesContent:[".wrapper {\n  position: relative;\n}\n\n.error {\n  position: absolute;\n  z-index: 10;\n  bottom: 0;\n  left: 50%;\n  transform: translate(-50%, 100%);\n  max-width: 250px;\n  width: 100%;\n\n  border-radius: 4px;\n  padding: 3px 5px;\n\n  color: white;\n  background-color: var(--error-highlight);\n  font-size: 85%;\n  font-family: sans-serif;\n\n  opacity: 0.9;\n}\n.error::before {\n  position: absolute;\n  display: block;\n  content: ' ';\n  z-index: -1;\n\n  left: 50%;\n  width: 10px;\n  height: 10px;\n\n  background-color: var(--error-highlight);\n  transform: translate(-50%, -7px) rotate(45deg);\n}\n"],sourceRoot:""}]),a.locals={wrapper:"OaJISbD1WCmb03at77EG",error:"MUN9De8dUvbPGH9cEDoQ"},n.Z=a},87617:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,".J2R67AQeCK_aC1DKFCMJ {\n  margin: 4px;\n}","",{version:3,sources:["webpack://./src/Common/link.module.css"],names:[],mappings:"AAAA;EACE,WAAW;AACb",sourcesContent:[".icon {\n  margin: 4px;\n}"],sourceRoot:""}]),a.locals={icon:"J2R67AQeCK_aC1DKFCMJ"},n.Z=a},92127:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,".FMkASzwt_oMscZdObpDQ {\n  display: inline-block;\n  text-align: center;\n}\n.TNF6aRMBPANvZifB27ZK {\n  display: inline-block;\n  animation: GGCs7iiBiwDCnT80cyTh 1s linear infinite;\n}\n\n@keyframes GGCs7iiBiwDCnT80cyTh {\n  from { transform: rotate(0deg); }\n  to { transform: rotate(360deg); }\n}","",{version:3,sources:["webpack://./src/Common/spinner.module.css"],names:[],mappings:"AAAA;EACE,qBAAqB;EACrB,kBAAkB;AACpB;AACA;EACE,qBAAqB;EACrB,kDAAkC;AACpC;;AAEA;EACE,OAAO,uBAAuB,EAAE;EAChC,KAAK,yBAAyB,EAAE;AAClC",sourcesContent:[".spinner {\n  display: inline-block;\n  text-align: center;\n}\n.icon {\n  display: inline-block;\n  animation: spin 1s linear infinite;\n}\n\n@keyframes spin {\n  from { transform: rotate(0deg); }\n  to { transform: rotate(360deg); }\n}"],sourceRoot:""}]),a.locals={spinner:"FMkASzwt_oMscZdObpDQ",icon:"TNF6aRMBPANvZifB27ZK",spin:"GGCs7iiBiwDCnT80cyTh"},n.Z=a},528:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,".sq9i7hQeTeeKuarmO8oA {\n  display: inline-block;\n  font-size: 70%;\n  background: rgba(0, 0, 0, 0.3);\n  color: white;\n  padding: 4px;\n  border-radius: 4px;\n}\n","",{version:3,sources:["webpack://./src/Common/tip.module.css"],names:[],mappings:"AAAA;EACE,qBAAqB;EACrB,cAAc;EACd,8BAA8B;EAC9B,YAAY;EACZ,YAAY;EACZ,kBAAkB;AACpB",sourcesContent:[".tip {\n  display: inline-block;\n  font-size: 70%;\n  background: rgba(0, 0, 0, 0.3);\n  color: white;\n  padding: 4px;\n  border-radius: 4px;\n}\n"],sourceRoot:""}]),a.locals={tip:"sq9i7hQeTeeKuarmO8oA"},n.Z=a},14084:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,".Q5veln3l3laVkuNPs5dQ {\n  position: relative;\n}\n\n.Q5veln3l3laVkuNPs5dQ pre {\n  white-space: pre;\n  background-color: var(--code-bg);\n  color: var(--key-color-base);\n  padding: 10px;\n  max-height: 320px;\n  overflow: scroll;\n}\n\n.dqzgBwJ1Rq0XgMqeAKe7 {\n  position: absolute;\n  top: 15px;\n  right: 15px;\n  padding: 4px 7px;\n  color: var(--key-color-base);\n  background-color: var(--key-bg-base);\n  border: 1px solid var(--key-color-base);\n  border-radius: 3px;\n}\n.dqzgBwJ1Rq0XgMqeAKe7:hover {\n  cursor: pointer;\n  background-color: var(--selection);\n  border: var(--selection);\n  color: white;\n}\n\n.YV2lKA9hbJpP4Vs4udw8 {\n  position: absolute;\n  top: 5px;\n  right: 0px;\n  background-color: var(--selection);\n  color: white;\n  padding: 10px;\n  border-radius: 2px;\n  cursor: none;\n}\n","",{version:3,sources:["webpack://./src/Dialogs/unexpected-error.module.css"],names:[],mappings:"AAAA;EACE,kBAAkB;AACpB;;AAEA;EACE,gBAAgB;EAChB,gCAAgC;EAChC,4BAA4B;EAC5B,aAAa;EACb,iBAAiB;EACjB,gBAAgB;AAClB;;AAEA;EACE,kBAAkB;EAClB,SAAS;EACT,WAAW;EACX,gBAAgB;EAChB,4BAA4B;EAC5B,oCAAoC;EACpC,uCAAuC;EACvC,kBAAkB;AACpB;AACA;EACE,eAAe;EACf,kCAAkC;EAClC,wBAAwB;EACxB,YAAY;AACd;;AAEA;EACE,kBAAkB;EAClB,QAAQ;EACR,UAAU;EACV,kCAAkC;EAClC,YAAY;EACZ,aAAa;EACb,kBAAkB;EAClB,YAAY;AACd",sourcesContent:[".stackTrace {\n  position: relative;\n}\n\n.stackTrace pre {\n  white-space: pre;\n  background-color: var(--code-bg);\n  color: var(--key-color-base);\n  padding: 10px;\n  max-height: 320px;\n  overflow: scroll;\n}\n\n.button {\n  position: absolute;\n  top: 15px;\n  right: 15px;\n  padding: 4px 7px;\n  color: var(--key-color-base);\n  background-color: var(--key-bg-base);\n  border: 1px solid var(--key-color-base);\n  border-radius: 3px;\n}\n.button:hover {\n  cursor: pointer;\n  background-color: var(--selection);\n  border: var(--selection);\n  color: white;\n}\n\n.copyMessage {\n  position: absolute;\n  top: 5px;\n  right: 0px;\n  background-color: var(--selection);\n  color: white;\n  padding: 10px;\n  border-radius: 2px;\n  cursor: none;\n}\n"],sourceRoot:""}]),a.locals={stackTrace:"Q5veln3l3laVkuNPs5dQ",button:"dqzgBwJ1Rq0XgMqeAKe7",copyMessage:"YV2lKA9hbJpP4Vs4udw8"},n.Z=a},14409:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,".xCOOsvxL5qQ3kR8ri91A {\n  box-shadow: 0 4px 10px 0px rgba(0, 0, 0, 0.5);\n}\n\n.u4uW9U2E0DfbUM9vP9pf {\n  text-align: center;\n  padding: 0;\n  margin: 0;\n}\n\n.u4uW9U2E0DfbUM9vP9pf li {\n  display: inline-block;\n  font-family: monospace;\n  font-size: 120%;\n  margin: 4px 2px;\n  padding: 4px 4px;\n  border-radius: 2px;\n  cursor: pointer;\n\n  background-color: rgba(0, 0, 0, .5);\n  opacity: 0.5;\n  color: white;\n}\n\n.u4uW9U2E0DfbUM9vP9pf li.YcHSun3PLo8dCb9qIZtc {\n  opacity: 1;\n  background-color: var(--selection);\n  color: white;\n}\n\n.u4uW9U2E0DfbUM9vP9pf li:hover {\n  opacity: 1;\n  background-color: var(--hover-selection);\n}\n","",{version:3,sources:["webpack://./src/EnhancedPickers/Keycode/styles.module.css"],names:[],mappings:"AAAA;EACE,6CAA6C;AAC/C;;AAEA;EACE,kBAAkB;EAClB,UAAU;EACV,SAAS;AACX;;AAEA;EACE,qBAAqB;EACrB,sBAAsB;EACtB,eAAe;EACf,eAAe;EACf,gBAAgB;EAChB,kBAAkB;EAClB,eAAe;;EAEf,mCAAmC;EACnC,YAAY;EACZ,YAAY;AACd;;AAEA;EACE,UAAU;EACV,kCAAkC;EAClC,YAAY;AACd;;AAEA;EACE,UAAU;EACV,wCAAwC;AAC1C",sourcesContent:[".previewKeycode {\n  box-shadow: 0 4px 10px 0px rgba(0, 0, 0, 0.5);\n}\n\n.modifiers {\n  text-align: center;\n  padding: 0;\n  margin: 0;\n}\n\n.modifiers li {\n  display: inline-block;\n  font-family: monospace;\n  font-size: 120%;\n  margin: 4px 2px;\n  padding: 4px 4px;\n  border-radius: 2px;\n  cursor: pointer;\n\n  background-color: rgba(0, 0, 0, .5);\n  opacity: 0.5;\n  color: white;\n}\n\n.modifiers li.selected {\n  opacity: 1;\n  background-color: var(--selection);\n  color: white;\n}\n\n.modifiers li:hover {\n  opacity: 1;\n  background-color: var(--hover-selection);\n}\n"],sourceRoot:""}]),a.locals={previewKeycode:"xCOOsvxL5qQ3kR8ri91A",modifiers:"u4uW9U2E0DfbUM9vP9pf",selected:"YcHSun3PLo8dCb9qIZtc"},n.Z=a},27470:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,'.S3t60CK1JCROFIrRlm4j [readonly] {\n  cursor: not-allowed;\n  color: gray;\n  outline: gray;\n}\n\ninput.S3t60CK1JCROFIrRlm4j[type="text"],\ninput.S3t60CK1JCROFIrRlm4j[type="number"],\nselect.S3t60CK1JCROFIrRlm4j {\n  width: 100%;\n}\n\nol.MedG7SPG2ge2h7j2yqrJ {\n  list-style-type: none;\n  margin-top: 0;\n  padding: 0;\n}\n.V50Bekt6td9yQOSiDGdx {\n  list-style-type: none;\n  margin: 0;\n  padding: 0;\n}\n.V50Bekt6td9yQOSiDGdx li {\n  display: inline-block;\n  line-height: 2rem;\n}\nol.QNg3v6_eJoK7_qV0_y9n {\n  margin: 0;\n}\nol.QNg3v6_eJoK7_qV0_y9n li {\n  line-height: 2rem;\n}\nol.u65C3Uji7covMUn996dR {\n  list-style-type: none;\n  padding: 0;\n}\n.xp5u4Uo4X2fxxX9KwwXu {\n  cursor: pointer;\n  margin: 2px;\n  padding: 5px;\n  font-family: monospace;\n  border-radius: 1rem;\n  background-color: var(--key-bg-base);\n}\n.xp5u4Uo4X2fxxX9KwwXu:hover {\n  background-color: var(--hover-selection);\n  color: white;\n}\n\n.gpFGP00LCwlGjK6yrGWw {\n  vertical-align: text-bottom;\n  margin: 0 2px;\n}\n.gpFGP00LCwlGjK6yrGWw:hover {\n  color: black;\n}\n\n.gsAzkKxnfzTcp5ApwmWS {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n  list-style-type: none;\n  padding: 0;\n  margin: 0;\n}\n\n/* Copied from MacroEditor :( */\n.KrcWDYfRVRfvRhpsBFxs {\n  visibility: hidden;\n  position: absolute;\n  top: 0px;\n  right: 0px;\n  font-size: 80%;\n\n  color: var(--key-color-hover);\n}\n.KrcWDYfRVRfvRhpsBFxs > * {\n  margin: 2px;\n  opacity: 0.5;\n  cursor: pointer;\n}\n.gsAzkKxnfzTcp5ApwmWS li :hover .KrcWDYfRVRfvRhpsBFxs {\n  visibility: visible;\n  z-index: 10;\n}\n\n.KrcWDYfRVRfvRhpsBFxs :hover {\n  opacity: 1;\n}\n',"",{version:3,sources:["webpack://./src/Keyboard/Behaviors/PropertyValue/styles.module.css"],names:[],mappings:"AAAA;EACE,mBAAmB;EACnB,WAAW;EACX,aAAa;AACf;;AAEA;;;EAGE,WAAW;AACb;;AAEA;EACE,qBAAqB;EACrB,aAAa;EACb,UAAU;AACZ;AACA;EACE,qBAAqB;EACrB,SAAS;EACT,UAAU;AACZ;AACA;EACE,qBAAqB;EACrB,iBAAiB;AACnB;AACA;EACE,SAAS;AACX;AACA;EACE,iBAAiB;AACnB;AACA;EACE,qBAAqB;EACrB,UAAU;AACZ;AACA;EACE,eAAe;EACf,WAAW;EACX,YAAY;EACZ,sBAAsB;EACtB,mBAAmB;EACnB,oCAAoC;AACtC;AACA;EACE,wCAAwC;EACxC,YAAY;AACd;;AAEA;EACE,2BAA2B;EAC3B,aAAa;AACf;AACA;EACE,YAAY;AACd;;AAEA;EACE,aAAa;EACb,eAAe;EACf,SAAS;EACT,qBAAqB;EACrB,UAAU;EACV,SAAS;AACX;;AAEA,+BAA+B;AAC/B;EACE,kBAAkB;EAClB,kBAAkB;EAClB,QAAQ;EACR,UAAU;EACV,cAAc;;EAEd,6BAA6B;AAC/B;AACA;EACE,WAAW;EACX,YAAY;EACZ,eAAe;AACjB;AACA;EACE,mBAAmB;EACnB,WAAW;AACb;;AAEA;EACE,UAAU;AACZ",sourcesContent:['.propertyValue [readonly] {\n  cursor: not-allowed;\n  color: gray;\n  outline: gray;\n}\n\ninput.propertyValue[type="text"],\ninput.propertyValue[type="number"],\nselect.propertyValue {\n  width: 100%;\n}\n\nol.propertyMultiSelect {\n  list-style-type: none;\n  margin-top: 0;\n  padding: 0;\n}\n.propertyMultiSelectChips {\n  list-style-type: none;\n  margin: 0;\n  padding: 0;\n}\n.propertyMultiSelectChips li {\n  display: inline-block;\n  line-height: 2rem;\n}\nol.propertyPhandleSelect {\n  margin: 0;\n}\nol.propertyPhandleSelect li {\n  line-height: 2rem;\n}\nol.propertyPhandleSingleton {\n  list-style-type: none;\n  padding: 0;\n}\n.behaviorBind {\n  cursor: pointer;\n  margin: 2px;\n  padding: 5px;\n  font-family: monospace;\n  border-radius: 1rem;\n  background-color: var(--key-bg-base);\n}\n.behaviorBind:hover {\n  background-color: var(--hover-selection);\n  color: white;\n}\n\n.phandleRemove {\n  vertical-align: text-bottom;\n  margin: 0 2px;\n}\n.phandleRemove:hover {\n  color: black;\n}\n\n.propertyBindingsValue {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n  list-style-type: none;\n  padding: 0;\n  margin: 0;\n}\n\n/* Copied from MacroEditor :( */\n.actions {\n  visibility: hidden;\n  position: absolute;\n  top: 0px;\n  right: 0px;\n  font-size: 80%;\n\n  color: var(--key-color-hover);\n}\n.actions > * {\n  margin: 2px;\n  opacity: 0.5;\n  cursor: pointer;\n}\n.propertyBindingsValue li :hover .actions {\n  visibility: visible;\n  z-index: 10;\n}\n\n.actions :hover {\n  opacity: 1;\n}\n'],sourceRoot:""}]),a.locals={propertyValue:"S3t60CK1JCROFIrRlm4j",propertyMultiSelect:"MedG7SPG2ge2h7j2yqrJ",propertyMultiSelectChips:"V50Bekt6td9yQOSiDGdx",propertyPhandleSelect:"QNg3v6_eJoK7_qV0_y9n",propertyPhandleSingleton:"u65C3Uji7covMUn996dR",behaviorBind:"xp5u4Uo4X2fxxX9KwwXu",phandleRemove:"gpFGP00LCwlGjK6yrGWw",propertyBindingsValue:"gsAzkKxnfzTcp5ApwmWS",actions:"KrcWDYfRVRfvRhpsBFxs"},n.Z=a},34288:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,".kcj881bnLDph62EcKelj {\n  padding-bottom: 60px;\n}\n\n.GeuMxQtBvZYr0nOURDHd {\n  display: flex;\n  width: 190px;\n  flex-direction: column;\n  padding: 10px;\n  gap: 10px;\n  position: fixed;\n}\n\n.NqlHG1MKBiOUUFAed3CM {\n  max-width: 700px;\n  margin: 0 auto;\n  padding-bottom: 60px;\n}\n\n.NqlHG1MKBiOUUFAed3CM table {\n  border-spacing: 0;\n}\n.NqlHG1MKBiOUUFAed3CM table thead {\n  text-align: left;\n}\n\n.NqlHG1MKBiOUUFAed3CM table tbody tr td {\n  padding: 10px;\n  margin: 0;\n}\n.NqlHG1MKBiOUUFAed3CM table tbody tr:nth-child(even) {\n  background-color: var(--key-bg-base);\n}\n\n.Q3_rmo3XiEVg8qfXgKX_ {\n  cursor: pointer;\n  padding: 5px;\n  opacity: 0.6;\n}\n.Q3_rmo3XiEVg8qfXgKX_:hover {\n  opacity: 1;\n}\n\ntable.czOKx_t_EDF44pilzyzA { max-height: 80vh; }\ntable.czOKx_t_EDF44pilzyzA th { text-align: left }\ntable.czOKx_t_EDF44pilzyzA input { font-family: monospace }\ntable.czOKx_t_EDF44pilzyzA td {\n  padding: 4px;\n  vertical-align: top;\n}\ntable.czOKx_t_EDF44pilzyzA .s8rWNi6e8BZ7yQubfDws {\n  font-family: monospace;\n}\n.Bux6GxjreGZZkcXqx6kv {\n  display: block;\n  font-style: italic;\n}\n","",{version:3,sources:["webpack://./src/Keyboard/Behaviors/styles.module.css"],names:[],mappings:"AAAA;EACE,oBAAoB;AACtB;;AAEA;EACE,aAAa;EACb,YAAY;EACZ,sBAAsB;EACtB,aAAa;EACb,SAAS;EACT,eAAe;AACjB;;AAEA;EACE,gBAAgB;EAChB,cAAc;EACd,oBAAoB;AACtB;;AAEA;EACE,iBAAiB;AACnB;AACA;EACE,gBAAgB;AAClB;;AAEA;EACE,aAAa;EACb,SAAS;AACX;AACA;EACE,oCAAoC;AACtC;;AAEA;EACE,eAAe;EACf,YAAY;EACZ,YAAY;AACd;AACA;EACE,UAAU;AACZ;;AAEA,6BAAmB,gBAAgB,EAAE;AACrC,gCAAsB,iBAAiB;AACvC,mCAAyB,uBAAuB;AAChD;EACE,YAAY;EACZ,mBAAmB;AACrB;AACA;EACE,sBAAsB;AACxB;AACA;EACE,cAAc;EACd,kBAAkB;AACpB",sourcesContent:[".main {\n  padding-bottom: 60px;\n}\n\n.sidebar {\n  display: flex;\n  width: 190px;\n  flex-direction: column;\n  padding: 10px;\n  gap: 10px;\n  position: fixed;\n}\n\n.panel {\n  max-width: 700px;\n  margin: 0 auto;\n  padding-bottom: 60px;\n}\n\n.panel table {\n  border-spacing: 0;\n}\n.panel table thead {\n  text-align: left;\n}\n\n.panel table tbody tr td {\n  padding: 10px;\n  margin: 0;\n}\n.panel table tbody tr:nth-child(even) {\n  background-color: var(--key-bg-base);\n}\n\n.action {\n  cursor: pointer;\n  padding: 5px;\n  opacity: 0.6;\n}\n.action:hover {\n  opacity: 1;\n}\n\ntable.editorForm { max-height: 80vh; }\ntable.editorForm th { text-align: left }\ntable.editorForm input { font-family: monospace }\ntable.editorForm td {\n  padding: 4px;\n  vertical-align: top;\n}\ntable.editorForm .propertyName {\n  font-family: monospace;\n}\n.propertyDeprecation {\n  display: block;\n  font-style: italic;\n}\n"],sourceRoot:""}]),a.locals={main:"kcj881bnLDph62EcKelj",sidebar:"GeuMxQtBvZYr0nOURDHd",panel:"NqlHG1MKBiOUUFAed3CM",action:"Q3_rmo3XiEVg8qfXgKX_",editorForm:"czOKx_t_EDF44pilzyzA",propertyName:"s8rWNi6e8BZ7yQubfDws",propertyDeprecation:"Bux6GxjreGZZkcXqx6kv"},n.Z=a},78207:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,'.pwXbGORsYKqyOPBm9_dW {\n  padding-bottom: 60px;\n}\n\n.QgFDXNybKD_XN66M_WpJ {\n  display: flex;\n  width: 190px;\n  flex-direction: column;\n  padding: 10px;\n  gap: 10px;\n  position: fixed;\n}\n\n.Gy0KZGCgOeVminAfggFQ {\n  cursor: pointer;\n  background-color: var(--key-bg-base);\n}\n.Gy0KZGCgOeVminAfggFQ:hover {\n  border: 4px solid var(--selection);\n  box-sizing: border-box;\n}\n\n.Ld9cVdtpS_DpbEifyX9Y {\n  background-color: var(--selection);\n}\n.Ld9cVdtpS_DpbEifyX9Y:hover {\n  background-color: var(--hover-selection);\n}\n\n.mqpJ7uHAMKxvORoOIPFK {\n  max-width: 450px;\n  margin: 0 auto;\n  padding-bottom: 60px;\n}\n\n.BVucwy4AZCyl7GyivzMn {\n  display: flex;\n  justify-content: space-between;\n  border-bottom: 2px solid var(--key-bg-base);\n  margin: 5px 0;\n}\n\n.U6g0njWjBrtb_I3XhAeV {\n  cursor: pointer;\n  padding: 5px;\n  opacity: 0.6;\n}\n.U6g0njWjBrtb_I3XhAeV:hover {\n  opacity: 1;\n}\n\n.CROhsBLtunQ2BbfWdkQw {\n  margin: 10px 0 40px;\n}\n\n.CROhsBLtunQ2BbfWdkQw .MhA4fXXuaZ1iPvv05w4m {\n  display: flex;\n  justify-content: space-evenly;\n  align-items: center;\n}\n\n.CROhsBLtunQ2BbfWdkQw h5 {\n  margin: 0;\n}\n\n.vujYcgQjiN4BGp37FMUH {\n  color: var(--key-color-base);\n}\n\n.uh2yPWyfEOZtgXo2_KtU {\n  color: var(--delete);\n}\n\n.NAB1EN6_pcYIy5Db9XnC {\n  display: none !important;\n}\n.NAB1EN6_pcYIy5Db9XnC:hover {\n  color: white;\n  cursor: pointer;\n}\n.kYn8brsFgEaf61oQyv4d:hover .NAB1EN6_pcYIy5Db9XnC {\n  display: flex !important;\n  position: absolute;\n  right: -48px;\n  transform: scale(0.5);\n}\n\n.NGxnhfSJaJ9FNu3hlBfc.NAB1EN6_pcYIy5Db9XnC,\n.NGxnhfSJaJ9FNu3hlBfc.GXgG_IaQTricqThqzsKe > * {\n  background-color: sandybrown;\n  color: white;\n}\n.NGxnhfSJaJ9FNu3hlBfc.NAB1EN6_pcYIy5Db9XnC {\n  display: flex;\n}\n\n.fljdvcebOv1gbKZpf0vW {\n  margin: 10px 0;\n  display: flex;\n}\n\n.fljdvcebOv1gbKZpf0vW label {\n  display: inline-block;\n  width: 120px;\n  text-align: right;\n  margin-right: 10px;\n}\n\n.bnN6JCit0RcjdQiqzw8w {\n  list-style-type: none;\n  margin: 0;\n  padding: 0;\n}\n.bnN6JCit0RcjdQiqzw8w li {\n  cursor: pointer;\n  display: inline-block;\n  padding: 5px 10px;\n  margin: 5px;\n  border-radius: 30px;\n  background-color: var(--key-bg-base);\n}\n.bnN6JCit0RcjdQiqzw8w li[data-selected="true"] {\n  background-color: var(--selection);\n  color: var(--key-color-hover);\n}\n.bnN6JCit0RcjdQiqzw8w li:hover {\n  background-color: var(--hover-selection);\n  color: var(--key-color-hover);\n}\n\n.NpLEYrC32KQ4rUx9hUFJ {\n  background-color: var(--key-bg-base);\n  border-radius: 30px;\n  color: var(--key-color-base);\n  font-size: 80%;\n  text-align: center;\n  padding: 5px;\n  position: absolute;\n  bottom: -40px;\n  left: 50%;\n  transform: translate(-50%, 0);\n  width: 110%;\n\n  pointer-events: none;\n  transition: opacity ease-in-out .5s;\n}\n\n.l2gtE1XKS63R5TM5unip { position: relative }\n.l2gtE1XKS63R5TM5unip:hover .NpLEYrC32KQ4rUx9hUFJ { opacity: 0.25 }\n',"",{version:3,sources:["webpack://./src/Keyboard/Combos/styles.module.css"],names:[],mappings:"AAAA;EACE,oBAAoB;AACtB;;AAEA;EACE,aAAa;EACb,YAAY;EACZ,sBAAsB;EACtB,aAAa;EACb,SAAS;EACT,eAAe;AACjB;;AAEA;EACE,eAAe;EACf,oCAAoC;AACtC;AACA;EACE,kCAAkC;EAClC,sBAAsB;AACxB;;AAEA;EACE,kCAAkC;AACpC;AACA;EACE,wCAAwC;AAC1C;;AAEA;EACE,gBAAgB;EAChB,cAAc;EACd,oBAAoB;AACtB;;AAEA;EACE,aAAa;EACb,8BAA8B;EAC9B,2CAA2C;EAC3C,aAAa;AACf;;AAEA;EACE,eAAe;EACf,YAAY;EACZ,YAAY;AACd;AACA;EACE,UAAU;AACZ;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,6BAA6B;EAC7B,mBAAmB;AACrB;;AAEA;EACE,SAAS;AACX;;AAEA;EACE,4BAA4B;AAC9B;;AAEA;EACE,oBAAoB;AACtB;;AAEA;EACE,wBAAwB;AAC1B;AACA;EACE,YAAY;EACZ,eAAe;AACjB;AACA;EACE,wBAAwB;EACxB,kBAAkB;EAClB,YAAY;EACZ,qBAAqB;AACvB;;AAEA;;EAEE,4BAA4B;EAC5B,YAAY;AACd;AACA;EACE,aAAa;AACf;;AAEA;EACE,cAAc;EACd,aAAa;AACf;;AAEA;EACE,qBAAqB;EACrB,YAAY;EACZ,iBAAiB;EACjB,kBAAkB;AACpB;;AAEA;EACE,qBAAqB;EACrB,SAAS;EACT,UAAU;AACZ;AACA;EACE,eAAe;EACf,qBAAqB;EACrB,iBAAiB;EACjB,WAAW;EACX,mBAAmB;EACnB,oCAAoC;AACtC;AACA;EACE,kCAAkC;EAClC,6BAA6B;AAC/B;AACA;EACE,wCAAwC;EACxC,6BAA6B;AAC/B;;AAEA;EACE,oCAAoC;EACpC,mBAAmB;EACnB,4BAA4B;EAC5B,cAAc;EACd,kBAAkB;EAClB,YAAY;EACZ,kBAAkB;EAClB,aAAa;EACb,SAAS;EACT,6BAA6B;EAC7B,WAAW;;EAEX,oBAAoB;EACpB,mCAAmC;AACrC;;AAEA,wBAAiB,mBAAmB;AACpC,oDAAwC,cAAc",sourcesContent:['.main {\n  padding-bottom: 60px;\n}\n\n.sidebar {\n  display: flex;\n  width: 190px;\n  flex-direction: column;\n  padding: 10px;\n  gap: 10px;\n  position: fixed;\n}\n\n.selectable {\n  cursor: pointer;\n  background-color: var(--key-bg-base);\n}\n.selectable:hover {\n  border: 4px solid var(--selection);\n  box-sizing: border-box;\n}\n\n.highlight {\n  background-color: var(--selection);\n}\n.highlight:hover {\n  background-color: var(--hover-selection);\n}\n\n.comboPanel {\n  max-width: 450px;\n  margin: 0 auto;\n  padding-bottom: 60px;\n}\n\n.heading {\n  display: flex;\n  justify-content: space-between;\n  border-bottom: 2px solid var(--key-bg-base);\n  margin: 5px 0;\n}\n\n.action {\n  cursor: pointer;\n  padding: 5px;\n  opacity: 0.6;\n}\n.action:hover {\n  opacity: 1;\n}\n\n.combo {\n  margin: 10px 0 40px;\n}\n\n.combo .detail {\n  display: flex;\n  justify-content: space-evenly;\n  align-items: center;\n}\n\n.combo h5 {\n  margin: 0;\n}\n\n.edit {\n  color: var(--key-color-base);\n}\n\n.remove {\n  color: var(--delete);\n}\n\n.addComboInput {\n  display: none !important;\n}\n.addComboInput:hover {\n  color: white;\n  cursor: pointer;\n}\n.comboInputList:hover .addComboInput {\n  display: flex !important;\n  position: absolute;\n  right: -48px;\n  transform: scale(0.5);\n}\n\n.active.addComboInput,\n.active.comboInput > * {\n  background-color: sandybrown;\n  color: white;\n}\n.active.addComboInput {\n  display: flex;\n}\n\n.field {\n  margin: 10px 0;\n  display: flex;\n}\n\n.field label {\n  display: inline-block;\n  width: 120px;\n  text-align: right;\n  margin-right: 10px;\n}\n\n.layerList {\n  list-style-type: none;\n  margin: 0;\n  padding: 0;\n}\n.layerList li {\n  cursor: pointer;\n  display: inline-block;\n  padding: 5px 10px;\n  margin: 5px;\n  border-radius: 30px;\n  background-color: var(--key-bg-base);\n}\n.layerList li[data-selected="true"] {\n  background-color: var(--selection);\n  color: var(--key-color-hover);\n}\n.layerList li:hover {\n  background-color: var(--hover-selection);\n  color: var(--key-color-hover);\n}\n\n.floatingMessage {\n  background-color: var(--key-bg-base);\n  border-radius: 30px;\n  color: var(--key-color-base);\n  font-size: 80%;\n  text-align: center;\n  padding: 5px;\n  position: absolute;\n  bottom: -40px;\n  left: 50%;\n  transform: translate(-50%, 0);\n  width: 110%;\n\n  pointer-events: none;\n  transition: opacity ease-in-out .5s;\n}\n\n.comboInputMap { position: relative }\n.comboInputMap:hover .floatingMessage { opacity: 0.25 }\n'],sourceRoot:""}]),a.locals={main:"pwXbGORsYKqyOPBm9_dW",sidebar:"QgFDXNybKD_XN66M_WpJ",selectable:"Gy0KZGCgOeVminAfggFQ",highlight:"Ld9cVdtpS_DpbEifyX9Y",comboPanel:"mqpJ7uHAMKxvORoOIPFK",heading:"BVucwy4AZCyl7GyivzMn",action:"U6g0njWjBrtb_I3XhAeV",combo:"CROhsBLtunQ2BbfWdkQw",detail:"MhA4fXXuaZ1iPvv05w4m",edit:"vujYcgQjiN4BGp37FMUH",remove:"uh2yPWyfEOZtgXo2_KtU",addComboInput:"NAB1EN6_pcYIy5Db9XnC",comboInputList:"kYn8brsFgEaf61oQyv4d",active:"NGxnhfSJaJ9FNu3hlBfc",comboInput:"GXgG_IaQTricqThqzsKe",field:"fljdvcebOv1gbKZpf0vW",layerList:"bnN6JCit0RcjdQiqzw8w",floatingMessage:"NpLEYrC32KQ4rUx9hUFJ",comboInputMap:"l2gtE1XKS63R5TM5unip"},n.Z=a},56520:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,".eEWh1kMxq0qwtAjWodL_ {\n  width: 100%;\n  height: 100%;\n  margin: 0;\n  padding: 0;\n}\n\n.eEWh1kMxq0qwtAjWodL_.Me2iewShkkUWEmhCKAJV {\n  cursor: crosshair;\n}\n\n.wou_rpm0nvB8wxB153cE {\n  position: absolute;\n  background-color: rgba(150, 255, 150, 0.1);\n  border: 3px dotted rgba(150, 255, 150, 0.7);\n  pointer-events: none;\n  box-sizing: border-box;\n}\n\n.wou_rpm0nvB8wxB153cE.fM8xQCv4KykkW5ssxgEg {\n  background-color: rgba(120, 120, 120, 0.1);\n  border-color: rgba(120, 120, 120, 0.25);\n}\n","",{version:3,sources:["webpack://./src/Keyboard/Common/dragSelector.module.css"],names:[],mappings:"AAAA;EACE,WAAW;EACX,YAAY;EACZ,SAAS;EACT,UAAU;AACZ;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,kBAAkB;EAClB,0CAA0C;EAC1C,2CAA2C;EAC3C,oBAAoB;EACpB,sBAAsB;AACxB;;AAEA;EACE,0CAA0C;EAC1C,uCAAuC;AACzC",sourcesContent:[".container {\n  width: 100%;\n  height: 100%;\n  margin: 0;\n  padding: 0;\n}\n\n.container.selecting {\n  cursor: crosshair;\n}\n\n.overlay {\n  position: absolute;\n  background-color: rgba(150, 255, 150, 0.1);\n  border: 3px dotted rgba(150, 255, 150, 0.7);\n  pointer-events: none;\n  box-sizing: border-box;\n}\n\n.overlay.negate {\n  background-color: rgba(120, 120, 120, 0.1);\n  border-color: rgba(120, 120, 120, 0.25);\n}\n"],sourceRoot:""}]),a.locals={container:"eEWh1kMxq0qwtAjWodL_",selecting:"Me2iewShkkUWEmhCKAJV",overlay:"wou_rpm0nvB8wxB153cE",negate:"fM8xQCv4KykkW5ssxgEg"},n.Z=a},49040:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,".lD5TsvdIbEAHNdmhfnlb {\n  background-color: var(--key-bg-base);\n}\n.yk89E4zK9zlO69OXhKn5:hover {\n  cursor: pointer;\n  border: 4px solid var(--selection);\n  box-sizing: border-box;\n}\n\n.pzTvsxKjpy6MqcFhxh9j {\n  background-color: var(--selection);\n}\n.pzTvsxKjpy6MqcFhxh9j:hover {\n  background-color: var(--hover-selection);\n}\n\n.r_Sdklnj57CE2ZjnBDw6 {\n  background-color: var(--hover-selection);\n  filter: brightness(135%);\n}\n\n.Ich9T1nSzHs1a84insfp {\n  background-color: var(--hover-selection);\n  filter: brightness(75%);\n}\n\n._3U1zi1J1sXT41AzpAA1j {\n  position: absolute;\n  bottom: 0;\n  right: 50%;\n  transform: translate(50%, 100%);\n}\n","",{version:3,sources:["webpack://./src/Keyboard/Common/keyPositionSelectorStyles.module.css"],names:[],mappings:"AAAA;EACE,oCAAoC;AACtC;AACA;EACE,eAAe;EACf,kCAAkC;EAClC,sBAAsB;AACxB;;AAEA;EACE,kCAAkC;AACpC;AACA;EACE,wCAAwC;AAC1C;;AAEA;EACE,wCAAwC;EACxC,wBAAwB;AAC1B;;AAEA;EACE,wCAAwC;EACxC,uBAAuB;AACzB;;AAEA;EACE,kBAAkB;EAClB,SAAS;EACT,UAAU;EACV,+BAA+B;AACjC",sourcesContent:[".key {\n  background-color: var(--key-bg-base);\n}\n.selectable:hover {\n  cursor: pointer;\n  border: 4px solid var(--selection);\n  box-sizing: border-box;\n}\n\n.highlight {\n  background-color: var(--selection);\n}\n.highlight:hover {\n  background-color: var(--hover-selection);\n}\n\n.previewAdd {\n  background-color: var(--hover-selection);\n  filter: brightness(135%);\n}\n\n.previewRemove {\n  background-color: var(--hover-selection);\n  filter: brightness(75%);\n}\n\n.tip {\n  position: absolute;\n  bottom: 0;\n  right: 50%;\n  transform: translate(50%, 100%);\n}\n"],sourceRoot:""}]),a.locals={key:"lD5TsvdIbEAHNdmhfnlb",selectable:"yk89E4zK9zlO69OXhKn5",highlight:"pzTvsxKjpy6MqcFhxh9j",previewAdd:"r_Sdklnj57CE2ZjnBDw6",previewRemove:"Ich9T1nSzHs1a84insfp",tip:"_3U1zi1J1sXT41AzpAA1j"},n.Z=a},2:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,'.CoLZlKR1WcMrFd9XhDMC {\n\tposition: relative;\n\tdisplay: flex;\n\tjustify-content: center;\n\talign-items: center;\n\n\tfont-family: Quicksand, avenir, sans-serif;\n\n\t/* TODO: remove this once I have a wrapper with size defaults */\n\twidth: 65px;\n\theight: 65px;\n\n\tfont-size: 110%;\n\tborder-radius: 5px;\n}\n\n.CoLZlKR1WcMrFd9XhDMC.CT4uGhwl8sY0LwT3p39g:not(:hover) .UNzQquWsoIanOpIN0Q9L {\n\ttext-decoration: underline wavy var(--error-highlight);\n\ttext-underline-offset: 4px;\n\tcolor: var(--error-highlight);\n\tfont-weight: bold;\n}\n\n.Y5EVt8b0BaXNd9uLxhfh {\n\tposition: absolute;\n\tleft: 2px;\n\tbottom: 2px;\n\tfont-size: 80%;\n\n\tanimation: sYr3l9y03JxO_2AP73jr ease-in-out 1s alternate-reverse;\n}\n.Y5EVt8b0BaXNd9uLxhfh.CT4uGhwl8sY0LwT3p39g:hover {\n\tcolor: rgb(255, 225, 0);\n}\n\n@keyframes sYr3l9y03JxO_2AP73jr {\n\t0% { color: var(--key-color-base) }\n\t100% { color: var(--key-color-extreme) }\n}\n\n\n.CoLZlKR1WcMrFd9XhDMC.CT4uGhwl8sY0LwT3p39g:hover .DejZXCvvhJILPbs9Q8ht,\n.CoLZlKR1WcMrFd9XhDMC.CT4uGhwl8sY0LwT3p39g:hover .GliE4Ybwli9X6TNTjD1_ {\n\tborder-bottom-left-radius: 0;\n\tborder-bottom-right-radius: 0;\n\ttext-decoration: underline dotted white 2px;\n\ttext-underline-offset: 4px;\n}\n\n\n.huQDP3GbTLThbVIP8wFp {\n\tcolor: var(--key-color-base);\n\tbackground-color: var(--key-bg-base);\n}\n\n.PpMmKpJfEi37Ldw7AeBT {\n\tborder-radius: 100%;\n\tbackground-color: var(--key-bg-base);\n\tcolor: var(--key-color-base);\n}\n\n.k2EIh8YlFvp9sBuklSxx {\n\tposition: absolute;\n\ttop: 0;\n\tleft: 50%;\n\ttransform: translateX(-50%);\n\tfont-size: 50%;\n}\n\n.CT4uGhwl8sY0LwT3p39g:hover, .PpMmKpJfEi37Ldw7AeBT.CT4uGhwl8sY0LwT3p39g:hover {\n\tbackground-color: var(--hover-selection);\n\ttransition: 200ms;\n\tz-index: 1;\n}\n.CoLZlKR1WcMrFd9XhDMC.CT4uGhwl8sY0LwT3p39g:hover .DejZXCvvhJILPbs9Q8ht, .CoLZlKR1WcMrFd9XhDMC.CT4uGhwl8sY0LwT3p39g:hover .GliE4Ybwli9X6TNTjD1_ {\n\tcolor: var(--key-color-hover);\n}\n.CoLZlKR1WcMrFd9XhDMC > .DejZXCvvhJILPbs9Q8ht {\n\tpadding: 5px;\n}\n\n[data-simple="true"] { font-size: 140%; }\n[data-long="true"] { font-size: 60%; }\n\n.ApHDJFJGYUaGTgzMeIKZ:not([data-is-root="true"])::before { content: \'(\'; opacity: 0.4; font-weight: bold; margin: 2px; }\n.ApHDJFJGYUaGTgzMeIKZ:not([data-is-root="true"])::after { content: \')\'; opacity: 0.4; font-weight: bold; margin: 2px; }\n.ApHDJFJGYUaGTgzMeIKZ:not([data-is-root="true"]) .mLz637Atn0jZXey6Rx4v:not(:last-child)::after { content: \',\'; }\n\n.DejZXCvvhJILPbs9Q8ht {\n\tcursor: default;\n\tpadding: 0px 4px;\n\tmargin-left: -2px;\n\tmargin-right: -2px;\n}\n\n.CT4uGhwl8sY0LwT3p39g .DejZXCvvhJILPbs9Q8ht {\n\tcursor: pointer;\n\tdisplay: inline-block;\n\tbox-sizing: content-box;\n\tmin-width: 0.5em;\n\ttext-align: center;\n\tborder-radius: 4px;\n}\n.CT4uGhwl8sY0LwT3p39g .DejZXCvvhJILPbs9Q8ht:hover {\n\tbackground-color: white !important;\n\tcolor: var(--hover-selection) !important;\n\tborder-radius: 4px !important;\n}\n\n.DejZXCvvhJILPbs9Q8ht * {\n\tpointer-events: none;\n}\n\n.GliE4Ybwli9X6TNTjD1_ {\n  position: absolute;\n  top: 0;\n  left: 0;\n  font-size: 10px;\n  padding: 2px;\n  opacity: 0.65;\n}\n\n.GliE4Ybwli9X6TNTjD1_:hover {\n  cursor: pointer;\n  color: var(--hover-selection) !important;\n  background-color: var(--key-bg-hover);\n  border-radius: 5px 0;\n  opacity: 1;\n}\n',"",{version:3,sources:["webpack://./src/Keyboard/Keys/styles.module.css"],names:[],mappings:"AAAA;CACC,kBAAkB;CAClB,aAAa;CACb,uBAAuB;CACvB,mBAAmB;;CAEnB,0CAA0C;;CAE1C,+DAA+D;CAC/D,WAAW;CACX,YAAY;;CAEZ,eAAe;CACf,kBAAkB;AACnB;;AAEA;CACC,sDAAsD;CACtD,0BAA0B;CAC1B,6BAA6B;CAC7B,iBAAiB;AAClB;;AAEA;CACC,kBAAkB;CAClB,SAAS;CACT,WAAW;CACX,cAAc;;CAEd,gEAAiD;AAClD;AACA;CACC,uBAAuB;AACxB;;AAEA;CACC,KAAK,6BAA6B;CAClC,OAAO,gCAAgC;AACxC;;;AAGA;;CAEC,4BAA4B;CAC5B,6BAA6B;CAC7B,2CAA2C;CAC3C,0BAA0B;AAC3B;;;AAGA;CACC,4BAA4B;CAC5B,oCAAoC;AACrC;;AAEA;CACC,mBAAmB;CACnB,oCAAoC;CACpC,4BAA4B;AAC7B;;AAEA;CACC,kBAAkB;CAClB,MAAM;CACN,SAAS;CACT,2BAA2B;CAC3B,cAAc;AACf;;AAEA;CACC,wCAAwC;CACxC,iBAAiB;CACjB,UAAU;AACX;AACA;CACC,6BAA6B;AAC9B;AACA;CACC,YAAY;AACb;;AAEA,uBAAuB,eAAe,EAAE;AACxC,qBAAqB,cAAc,EAAE;;AAErC,2DAA6C,YAAY,EAAE,YAAY,EAAE,iBAAiB,EAAE,WAAW,EAAE;AACzG,0DAA4C,YAAY,EAAE,YAAY,EAAE,iBAAiB,EAAE,WAAW,EAAE;AACxG,iGAAoE,YAAY,EAAE;;AAElF;CACC,eAAe;CACf,gBAAgB;CAChB,iBAAiB;CACjB,kBAAkB;AACnB;;AAEA;CACC,eAAe;CACf,qBAAqB;CACrB,uBAAuB;CACvB,gBAAgB;CAChB,kBAAkB;CAClB,kBAAkB;AACnB;AACA;CACC,kCAAkC;CAClC,wCAAwC;CACxC,6BAA6B;AAC9B;;AAEA;CACC,oBAAoB;AACrB;;AAEA;EACE,kBAAkB;EAClB,MAAM;EACN,OAAO;EACP,eAAe;EACf,YAAY;EACZ,aAAa;AACf;;AAEA;EACE,eAAe;EACf,wCAAwC;EACxC,qCAAqC;EACrC,oBAAoB;EACpB,UAAU;AACZ",sourcesContent:['.key {\n\tposition: relative;\n\tdisplay: flex;\n\tjustify-content: center;\n\talign-items: center;\n\n\tfont-family: Quicksand, avenir, sans-serif;\n\n\t/* TODO: remove this once I have a wrapper with size defaults */\n\twidth: 65px;\n\theight: 65px;\n\n\tfont-size: 110%;\n\tborder-radius: 5px;\n}\n\n.key.selectable:not(:hover) .missingValue {\n\ttext-decoration: underline wavy var(--error-highlight);\n\ttext-underline-offset: 4px;\n\tcolor: var(--error-highlight);\n\tfont-weight: bold;\n}\n\n.missing {\n\tposition: absolute;\n\tleft: 2px;\n\tbottom: 2px;\n\tfont-size: 80%;\n\n\tanimation: pulse ease-in-out 1s alternate-reverse;\n}\n.missing.selectable:hover {\n\tcolor: rgb(255, 225, 0);\n}\n\n@keyframes pulse {\n\t0% { color: var(--key-color-base) }\n\t100% { color: var(--key-color-extreme) }\n}\n\n\n.key.selectable:hover .code,\n.key.selectable:hover .behaviour-binding {\n\tborder-bottom-left-radius: 0;\n\tborder-bottom-right-radius: 0;\n\ttext-decoration: underline dotted white 2px;\n\ttext-underline-offset: 4px;\n}\n\n\n.keyDefaultTheme {\n\tcolor: var(--key-color-base);\n\tbackground-color: var(--key-bg-base);\n}\n\n.encoder {\n\tborder-radius: 100%;\n\tbackground-color: var(--key-bg-base);\n\tcolor: var(--key-color-base);\n}\n\n.encoderDirection {\n\tposition: absolute;\n\ttop: 0;\n\tleft: 50%;\n\ttransform: translateX(-50%);\n\tfont-size: 50%;\n}\n\n.selectable:hover, .encoder.selectable:hover {\n\tbackground-color: var(--hover-selection);\n\ttransition: 200ms;\n\tz-index: 1;\n}\n.key.selectable:hover .code, .key.selectable:hover .behaviour-binding {\n\tcolor: var(--key-color-hover);\n}\n.key > .code {\n\tpadding: 5px;\n}\n\n[data-simple="true"] { font-size: 140%; }\n[data-long="true"] { font-size: 60%; }\n\n.params:not([data-is-root="true"])::before { content: \'(\'; opacity: 0.4; font-weight: bold; margin: 2px; }\n.params:not([data-is-root="true"])::after { content: \')\'; opacity: 0.4; font-weight: bold; margin: 2px; }\n.params:not([data-is-root="true"]) .param:not(:last-child)::after { content: \',\'; }\n\n.code {\n\tcursor: default;\n\tpadding: 0px 4px;\n\tmargin-left: -2px;\n\tmargin-right: -2px;\n}\n\n.selectable .code {\n\tcursor: pointer;\n\tdisplay: inline-block;\n\tbox-sizing: content-box;\n\tmin-width: 0.5em;\n\ttext-align: center;\n\tborder-radius: 4px;\n}\n.selectable .code:hover {\n\tbackground-color: white !important;\n\tcolor: var(--hover-selection) !important;\n\tborder-radius: 4px !important;\n}\n\n.code * {\n\tpointer-events: none;\n}\n\n.behaviour-binding {\n  position: absolute;\n  top: 0;\n  left: 0;\n  font-size: 10px;\n  padding: 2px;\n  opacity: 0.65;\n}\n\n.behaviour-binding:hover {\n  cursor: pointer;\n  color: var(--hover-selection) !important;\n  background-color: var(--key-bg-hover);\n  border-radius: 5px 0;\n  opacity: 1;\n}\n'],sourceRoot:""}]),a.locals={key:"CoLZlKR1WcMrFd9XhDMC",selectable:"CT4uGhwl8sY0LwT3p39g",missingValue:"UNzQquWsoIanOpIN0Q9L",missing:"Y5EVt8b0BaXNd9uLxhfh",pulse:"sYr3l9y03JxO_2AP73jr",code:"DejZXCvvhJILPbs9Q8ht","behaviour-binding":"GliE4Ybwli9X6TNTjD1_",keyDefaultTheme:"huQDP3GbTLThbVIP8wFp",encoder:"PpMmKpJfEi37Ldw7AeBT",encoderDirection:"k2EIh8YlFvp9sBuklSxx",params:"ApHDJFJGYUaGTgzMeIKZ",param:"mLz637Atn0jZXey6Rx4v"},n.Z=a},50335:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,'.m8ytsfY_MWY9AIiiT3KI {\n  position: absolute;\n  pointer-events: none;\n  z-index: 2;\n}\n.m8ytsfY_MWY9AIiiT3KI > * {\n  pointer-events: all;\n}\n\n.m8ytsfY_MWY9AIiiT3KI ul {\n  display: flex;\n  flex-direction: column;\n  list-style-type: none;\n  gap: 4px;\n  margin: 0;\n  padding: 0;\n}\n.m8ytsfY_MWY9AIiiT3KI li {\n  cursor: pointer;\n  position: relative;\n  background-color: rgba(201, 201, 201, 0.5);\n  color: darkgray;\n  border-radius: 15px;\n  height: 30px;\n  padding: 0px;\n  margin: 0 2px;\n  width: max-content;\n}\n.m8ytsfY_MWY9AIiiT3KI li:hover {\n  background-color: rgba(60, 179, 113, 0.85);\n  color: white;\n  padding-right: 35px;\n}\n.m8ytsfY_MWY9AIiiT3KI li.rzXVahzmmEOXmjXi8olg {\n  background-color: rgb(60, 179, 113);\n  color: white;\n}\n\n.m8ytsfY_MWY9AIiiT3KI li * {\n  display: inline-block;\n}\n.m8ytsfY_MWY9AIiiT3KI li .L_GJEqnFbay_ZzM0Yh7B {\n  overflow: auto;\n  width: 30px;\n  height: 30px;\n  line-height: 30px;\n  text-align: center;\n}\n.m8ytsfY_MWY9AIiiT3KI li .fkZZwegREyu_Wk9Pw6s7 {\n  overflow: hidden;\n  width: 0;\n  height: 30px;\n  line-height: 30px;\n  padding: 0;\n  font-variant: small-caps;\n}\n\n.m8ytsfY_MWY9AIiiT3KI ul li:hover .fkZZwegREyu_Wk9Pw6s7,\n.m8ytsfY_MWY9AIiiT3KI[data-renaming="true"] li.rzXVahzmmEOXmjXi8olg .fkZZwegREyu_Wk9Pw6s7 {\n  transition: .15s ease-in;\n  width: auto;\n  padding: 0 0 0 10px;\n}\n\n.m8ytsfY_MWY9AIiiT3KI button {\n  width: 30px;\n  height: 30px;\n  line-height: 30px;\n  padding: 0;\n  text-align: center;\n  border-radius: 15px;\n}\n\n.m8ytsfY_MWY9AIiiT3KI input.fkZZwegREyu_Wk9Pw6s7 {\n  vertical-align: top;\n  width: 100px;\n  border: none;\n  outline: none;\n  background: transparent;\n  color: white;\n}\n\n.m8ytsfY_MWY9AIiiT3KI .NbFgZxnyAF9EIjx8ncPM {\n  cursor: pointer;\n  position: absolute;\n  right: 10px;\n  visibility: hidden;\n\n  height: 30px;\n  line-height: 30px;\n}\n.m8ytsfY_MWY9AIiiT3KI li:hover .NbFgZxnyAF9EIjx8ncPM {\n  visibility: visible;\n}\n\n.m8ytsfY_MWY9AIiiT3KI li.rzXVahzmmEOXmjXi8olg .fkZZwegREyu_Wk9Pw6s7 {\n  cursor: text;\n}\n',"",{version:3,sources:["webpack://./src/Keyboard/Layers/layer-selector.module.css"],names:[],mappings:"AAAA;EACE,kBAAkB;EAClB,oBAAoB;EACpB,UAAU;AACZ;AACA;EACE,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,qBAAqB;EACrB,QAAQ;EACR,SAAS;EACT,UAAU;AACZ;AACA;EACE,eAAe;EACf,kBAAkB;EAClB,0CAA0C;EAC1C,eAAe;EACf,mBAAmB;EACnB,YAAY;EACZ,YAAY;EACZ,aAAa;EACb,kBAAkB;AACpB;AACA;EACE,0CAA0C;EAC1C,YAAY;EACZ,mBAAmB;AACrB;AACA;EACE,mCAAmC;EACnC,YAAY;AACd;;AAEA;EACE,qBAAqB;AACvB;AACA;EACE,cAAc;EACd,WAAW;EACX,YAAY;EACZ,iBAAiB;EACjB,kBAAkB;AACpB;AACA;EACE,gBAAgB;EAChB,QAAQ;EACR,YAAY;EACZ,iBAAiB;EACjB,UAAU;EACV,wBAAwB;AAC1B;;AAEA;;EAEE,wBAAwB;EACxB,WAAW;EACX,mBAAmB;AACrB;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,iBAAiB;EACjB,UAAU;EACV,kBAAkB;EAClB,mBAAmB;AACrB;;AAEA;EACE,mBAAmB;EACnB,YAAY;EACZ,YAAY;EACZ,aAAa;EACb,uBAAuB;EACvB,YAAY;AACd;;AAEA;EACE,eAAe;EACf,kBAAkB;EAClB,WAAW;EACX,kBAAkB;;EAElB,YAAY;EACZ,iBAAiB;AACnB;AACA;EACE,mBAAmB;AACrB;;AAEA;EACE,YAAY;AACd",sourcesContent:['.layerSelector {\n  position: absolute;\n  pointer-events: none;\n  z-index: 2;\n}\n.layerSelector > * {\n  pointer-events: all;\n}\n\n.layerSelector ul {\n  display: flex;\n  flex-direction: column;\n  list-style-type: none;\n  gap: 4px;\n  margin: 0;\n  padding: 0;\n}\n.layerSelector li {\n  cursor: pointer;\n  position: relative;\n  background-color: rgba(201, 201, 201, 0.5);\n  color: darkgray;\n  border-radius: 15px;\n  height: 30px;\n  padding: 0px;\n  margin: 0 2px;\n  width: max-content;\n}\n.layerSelector li:hover {\n  background-color: rgba(60, 179, 113, 0.85);\n  color: white;\n  padding-right: 35px;\n}\n.layerSelector li.active {\n  background-color: rgb(60, 179, 113);\n  color: white;\n}\n\n.layerSelector li * {\n  display: inline-block;\n}\n.layerSelector li .index {\n  overflow: auto;\n  width: 30px;\n  height: 30px;\n  line-height: 30px;\n  text-align: center;\n}\n.layerSelector li .name {\n  overflow: hidden;\n  width: 0;\n  height: 30px;\n  line-height: 30px;\n  padding: 0;\n  font-variant: small-caps;\n}\n\n.layerSelector ul li:hover .name,\n.layerSelector[data-renaming="true"] li.active .name {\n  transition: .15s ease-in;\n  width: auto;\n  padding: 0 0 0 10px;\n}\n\n.layerSelector button {\n  width: 30px;\n  height: 30px;\n  line-height: 30px;\n  padding: 0;\n  text-align: center;\n  border-radius: 15px;\n}\n\n.layerSelector input.name {\n  vertical-align: top;\n  width: 100px;\n  border: none;\n  outline: none;\n  background: transparent;\n  color: white;\n}\n\n.layerSelector .delete {\n  cursor: pointer;\n  position: absolute;\n  right: 10px;\n  visibility: hidden;\n\n  height: 30px;\n  line-height: 30px;\n}\n.layerSelector li:hover .delete {\n  visibility: visible;\n}\n\n.layerSelector li.active .name {\n  cursor: text;\n}\n'],sourceRoot:""}]),a.locals={layerSelector:"m8ytsfY_MWY9AIiiT3KI",active:"rzXVahzmmEOXmjXi8olg",index:"L_GJEqnFbay_ZzM0Yh7B",name:"fkZZwegREyu_Wk9Pw6s7",delete:"NbFgZxnyAF9EIjx8ncPM"},n.Z=a},59500:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,'.EwvVNY6vlf7HwYmXTbzi {\n  margin: 10px 0;\n  display: flex;\n}\n\n.EwvVNY6vlf7HwYmXTbzi label {\n  display: inline-block;\n  width: 120px;\n  text-align: right;\n  margin-right: 10px;\n}\n\n.uhiC_7TzN7eCNbm5C6a8[data-sensor-count="0"] {\n  display: none;\n}\n\n.raNkhxmGTqtKQI9X2gVA:not(.y7y6ypMwmSafQKgt7oBw) {\n  cursor: pointer;\n}\n.raNkhxmGTqtKQI9X2gVA > * {\n  pointer-events: none;\n}\n.raNkhxmGTqtKQI9X2gVA:hover, .y7y6ypMwmSafQKgt7oBw {\n  color: var(--key-color-hover);\n  background-color: var(--selection);\n}\n.raNkhxmGTqtKQI9X2gVA:hover {\n  background-color: var(--hover-selection);\n}\n\n.sahMSNIG_94Hn9tEEZ8q {\n  max-width: 80vw;\n  overflow-x: scroll;\n}',"",{version:3,sources:["webpack://./src/Keyboard/Layers/style.module.css"],names:[],mappings:"AAAA;EACE,cAAc;EACd,aAAa;AACf;;AAEA;EACE,qBAAqB;EACrB,YAAY;EACZ,iBAAiB;EACjB,kBAAkB;AACpB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,eAAe;AACjB;AACA;EACE,oBAAoB;AACtB;AACA;EACE,6BAA6B;EAC7B,kCAAkC;AACpC;AACA;EACE,wCAAwC;AAC1C;;AAEA;EACE,eAAe;EACf,kBAAkB;AACpB",sourcesContent:['.field {\n  margin: 10px 0;\n  display: flex;\n}\n\n.field label {\n  display: inline-block;\n  width: 120px;\n  text-align: right;\n  margin-right: 10px;\n}\n\n.sensors[data-sensor-count="0"] {\n  display: none;\n}\n\n.quickBindKey:not(.quickBindKeyHighlight) {\n  cursor: pointer;\n}\n.quickBindKey > * {\n  pointer-events: none;\n}\n.quickBindKey:hover, .quickBindKeyHighlight {\n  color: var(--key-color-hover);\n  background-color: var(--selection);\n}\n.quickBindKey:hover {\n  background-color: var(--hover-selection);\n}\n\n.quickAssignDialog {\n  max-width: 80vw;\n  overflow-x: scroll;\n}'],sourceRoot:""}]),a.locals={field:"EwvVNY6vlf7HwYmXTbzi",sensors:"uhiC_7TzN7eCNbm5C6a8",quickBindKey:"raNkhxmGTqtKQI9X2gVA",quickBindKeyHighlight:"y7y6ypMwmSafQKgt7oBw",quickAssignDialog:"sahMSNIG_94Hn9tEEZ8q"},n.Z=a},35839:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,'\n.O8SEfqE2Ewc3b7c7mY_N {\n  position:absolute;\n  top: -5px;\n  left: 0px;\n  width: 100%;\n  /* border: 1px solid red; */\n  /* padding: 5px; */\n  /* opacity: 0.5; */\n  display: flex;\n  flex-wrap: wrap;\n}\n\n.s9O56LWZBKHctVZ4a6fa {\n  position: relative;\n  width: 37.5px;\n  height: 65px;\n  margin: 0;\n}\n\n.s9O56LWZBKHctVZ4a6fa[data-is-control="true"] {\n  width: 450px;\n  height: 15px;\n}\n\n.NNwZmurJWlIfvb3BWlNX {\n  position: relative;\n  width: 450px;\n  height: 10px;\n}\n.NNwZmurJWlIfvb3BWlNX.wVYVfDVsCKFNjQcGKIVI::after {\n  content: \'\';\n  display: block;\n  position: absolute;\n  top: 50%;\n  transform: translate(0, -50%);\n  width: 450px;\n  height: 4px;\n  background-color: var(--selection);\n}\n.MDfy6RcGBlm8W_ChRhyP[data-extend="1"] { width: calc(37.5px + 1 * 75px); }\n.MDfy6RcGBlm8W_ChRhyP[data-extend="2"] { width: calc(37.5px + 2 * 75px); }\n.MDfy6RcGBlm8W_ChRhyP[data-extend="3"] { width: calc(37.5px + 3 * 75px); }\n.MDfy6RcGBlm8W_ChRhyP[data-extend="4"] { width: calc(37.5px + 4 * 75px); }\n.MDfy6RcGBlm8W_ChRhyP[data-extend="5"] { width: calc(37.5px + 5 * 75px); }\n\n/* .dropTargetHalf {\n  background-color: blue;\n  opacity: 0.25;\n}\n.dropTargetHalf.secondHalf {\n  background-color: red;\n}\n.dropTargetRow {\n  background-color: purple;\n  opacity: 0.25;\n} */\n\n.wVYVfDVsCKFNjQcGKIVI.s9O56LWZBKHctVZ4a6fa:not(.MDfy6RcGBlm8W_ChRhyP):not([data-is-control="true"])::before,\n.wVYVfDVsCKFNjQcGKIVI.MDfy6RcGBlm8W_ChRhyP:not([data-is-control="true"])::after {\n  content: \'\';\n  display: block;\n  height: 65px;\n  width: 4px;\n  border-radius: 4px;\n  background-color: var(--selection);\n}\n\n.AuFB9WiCynP_oONYhOvq .wVYVfDVsCKFNjQcGKIVI:not([data-drop-mode="row"])::before,\n.AuFB9WiCynP_oONYhOvq .wVYVfDVsCKFNjQcGKIVI:not([data-drop-mode="row"])::after {\n   visibility: hidden;\n }\n\n.s9O56LWZBKHctVZ4a6fa:not(.MDfy6RcGBlm8W_ChRhyP):not([data-is-control="true"])::before {\n  transform: translate(-50%, 0);\n}\n.MDfy6RcGBlm8W_ChRhyP:not([data-is-control="true"])::after {\n  position: absolute;\n  left: 32.5px;\n  transform: translate(50%, 0);\n}\n',"",{version:3,sources:["webpack://./src/Keyboard/Macros/drag-and-drop.module.css"],names:[],mappings:";AACA;EACE,iBAAiB;EACjB,SAAS;EACT,SAAS;EACT,WAAW;EACX,2BAA2B;EAC3B,kBAAkB;EAClB,kBAAkB;EAClB,aAAa;EACb,eAAe;AACjB;;AAEA;EACE,kBAAkB;EAClB,aAAa;EACb,YAAY;EACZ,SAAS;AACX;;AAEA;EACE,YAAY;EACZ,YAAY;AACd;;AAEA;EACE,kBAAkB;EAClB,YAAY;EACZ,YAAY;AACd;AACA;EACE,WAAW;EACX,cAAc;EACd,kBAAkB;EAClB,QAAQ;EACR,6BAA6B;EAC7B,YAAY;EACZ,WAAW;EACX,kCAAkC;AACpC;AACA,yCAA+B,8BAA8B,EAAE;AAC/D,yCAA+B,8BAA8B,EAAE;AAC/D,yCAA+B,8BAA8B,EAAE;AAC/D,yCAA+B,8BAA8B,EAAE;AAC/D,yCAA+B,8BAA8B,EAAE;;AAE/D;;;;;;;;;;GAUG;;AAEH;;EAEE,WAAW;EACX,cAAc;EACd,YAAY;EACZ,UAAU;EACV,kBAAkB;EAClB,kCAAkC;AACpC;;AAEA;;GAEG,kBAAkB;CACpB;;AAED;EACE,6BAA6B;AAC/B;AACA;EACE,kBAAkB;EAClB,YAAY;EACZ,4BAA4B;AAC9B",sourcesContent:['\n.dropTargets {\n  position:absolute;\n  top: -5px;\n  left: 0px;\n  width: 100%;\n  /* border: 1px solid red; */\n  /* padding: 5px; */\n  /* opacity: 0.5; */\n  display: flex;\n  flex-wrap: wrap;\n}\n\n.dropTargetHalf {\n  position: relative;\n  width: 37.5px;\n  height: 65px;\n  margin: 0;\n}\n\n.dropTargetHalf[data-is-control="true"] {\n  width: 450px;\n  height: 15px;\n}\n\n.dropTargetRow {\n  position: relative;\n  width: 450px;\n  height: 10px;\n}\n.dropTargetRow.droppable::after {\n  content: \'\';\n  display: block;\n  position: absolute;\n  top: 50%;\n  transform: translate(0, -50%);\n  width: 450px;\n  height: 4px;\n  background-color: var(--selection);\n}\n.secondHalf[data-extend="1"] { width: calc(37.5px + 1 * 75px); }\n.secondHalf[data-extend="2"] { width: calc(37.5px + 2 * 75px); }\n.secondHalf[data-extend="3"] { width: calc(37.5px + 3 * 75px); }\n.secondHalf[data-extend="4"] { width: calc(37.5px + 4 * 75px); }\n.secondHalf[data-extend="5"] { width: calc(37.5px + 5 * 75px); }\n\n/* .dropTargetHalf {\n  background-color: blue;\n  opacity: 0.25;\n}\n.dropTargetHalf.secondHalf {\n  background-color: red;\n}\n.dropTargetRow {\n  background-color: purple;\n  opacity: 0.25;\n} */\n\n.droppable.dropTargetHalf:not(.secondHalf):not([data-is-control="true"])::before,\n.droppable.secondHalf:not([data-is-control="true"])::after {\n  content: \'\';\n  display: block;\n  height: 65px;\n  width: 4px;\n  border-radius: 4px;\n  background-color: var(--selection);\n}\n\n.dropRowOnly .droppable:not([data-drop-mode="row"])::before,\n.dropRowOnly .droppable:not([data-drop-mode="row"])::after {\n   visibility: hidden;\n }\n\n.dropTargetHalf:not(.secondHalf):not([data-is-control="true"])::before {\n  transform: translate(-50%, 0);\n}\n.secondHalf:not([data-is-control="true"])::after {\n  position: absolute;\n  left: 32.5px;\n  transform: translate(50%, 0);\n}\n'],sourceRoot:""}]),a.locals={dropTargets:"O8SEfqE2Ewc3b7c7mY_N",dropTargetHalf:"s9O56LWZBKHctVZ4a6fa",dropTargetRow:"NNwZmurJWlIfvb3BWlNX",droppable:"wVYVfDVsCKFNjQcGKIVI",secondHalf:"MDfy6RcGBlm8W_ChRhyP",dropRowOnly:"AuFB9WiCynP_oONYhOvq"},n.Z=a},96201:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,".kc8Au327pmIjKO7auLXT {\n  padding-bottom: 60px;\n}\n\n.B8FpRtVdxbvJjwZoVNB4 {\n  display: flex;\n  position: fixed;\n  width: 180px;\n  flex-direction: column;\n  padding: 10px;\n  gap: 10px;\n}\n\n.Us3Ihf0AoVbZvDulP74Q {\n  width: 550px;\n  margin: 10px auto 40px;\n}\n.OVI4IkVsVzyk0eIAn9NX {\n  display: flex;\n  position: relative;\n  justify-content: space-between;\n  border-bottom: 2px solid var(--key-bg-base);\n  margin: 5px 0;\n}\n.OVI4IkVsVzyk0eIAn9NX h5 {\n  margin: 0;\n}\n.QNlSO_GSGhRfUFRE_v8E {\n  cursor: pointer;\n  padding: 5px;\n  opacity: 0.6;\n}\n.QNlSO_GSGhRfUFRE_v8E:hover {\n  opacity: 1;\n}\n.DvzBwGDH7HsnnIbqaeHi {\n  color: var(--delete);\n}\n\n.mwhR_W7iqHq803xNBV1H {\n  text-align: center;\n}\n.mwhR_W7iqHq803xNBV1H > * {\n  margin: 5px;\n}\n\n.TBgT7nB7JSSjnTpMQeXp {\n  position: relative;\n  width: 450px;\n  /* border: 1px solid lightgray; */\n  margin: 0 auto;\n  padding: 5px;\n\n  display: flex;\n  flex-wrap: wrap;\n}\n\n.TBgT7nB7JSSjnTpMQeXp > * {\n  margin: 5px;\n  width: 65px;\n  height: 65px;\n}\n\n.YMJbsLvnEGObUy4Y_i6w {\n  width: 100%;\n  height: 30px;\n  box-sizing: border-box;\n}\n.YMJbsLvnEGObUy4Y_i6w:hover {\n  background-color: var(--hover-selection);\n  color: var(--key-color-hover);\n}\n.YMJbsLvnEGObUy4Y_i6w > :first-child {\n  width: 100% !important;\n  height: 100% !important;\n}\n\n.TBgT7nB7JSSjnTpMQeXp [draggable] {\n  cursor: grab;\n}\n\n.I5drc4dA5Kpshp3PPle1 {\n  visibility: hidden;\n  position: absolute;\n  top: 0px;\n  right: 0px;\n  font-size: 80%;\n\n  color: var(--key-color-hover);\n}\n.I5drc4dA5Kpshp3PPle1 > * {\n  margin: 2px;\n  opacity: 0.5;\n  cursor: pointer;\n}\n.TBgT7nB7JSSjnTpMQeXp :hover .I5drc4dA5Kpshp3PPle1 {\n  visibility: visible;\n  z-index: 10;\n}\n\n.I5drc4dA5Kpshp3PPle1 :hover {\n  opacity: 1;\n}\n\n\n.iD9DsKMZZ1dQxr04488w {\n  margin: 10px 0;\n  display: flex;\n}\n\n.iD9DsKMZZ1dQxr04488w label {\n  display: inline-block;\n  width: 120px;\n  text-align: right;\n  margin-right: 10px;\n}\n\n.quGO7XFPrHoYiqu22mwg {\n  font-size: 80%;\n}","",{version:3,sources:["webpack://./src/Keyboard/Macros/styles.module.css"],names:[],mappings:"AAAA;EACE,oBAAoB;AACtB;;AAEA;EACE,aAAa;EACb,eAAe;EACf,YAAY;EACZ,sBAAsB;EACtB,aAAa;EACb,SAAS;AACX;;AAEA;EACE,YAAY;EACZ,sBAAsB;AACxB;AACA;EACE,aAAa;EACb,kBAAkB;EAClB,8BAA8B;EAC9B,2CAA2C;EAC3C,aAAa;AACf;AACA;EACE,SAAS;AACX;AACA;EACE,eAAe;EACf,YAAY;EACZ,YAAY;AACd;AACA;EACE,UAAU;AACZ;AACA;EACE,oBAAoB;AACtB;;AAEA;EACE,kBAAkB;AACpB;AACA;EACE,WAAW;AACb;;AAEA;EACE,kBAAkB;EAClB,YAAY;EACZ,iCAAiC;EACjC,cAAc;EACd,YAAY;;EAEZ,aAAa;EACb,eAAe;AACjB;;AAEA;EACE,WAAW;EACX,WAAW;EACX,YAAY;AACd;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,sBAAsB;AACxB;AACA;EACE,wCAAwC;EACxC,6BAA6B;AAC/B;AACA;EACE,sBAAsB;EACtB,uBAAuB;AACzB;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,kBAAkB;EAClB,kBAAkB;EAClB,QAAQ;EACR,UAAU;EACV,cAAc;;EAEd,6BAA6B;AAC/B;AACA;EACE,WAAW;EACX,YAAY;EACZ,eAAe;AACjB;AACA;EACE,mBAAmB;EACnB,WAAW;AACb;;AAEA;EACE,UAAU;AACZ;;;AAGA;EACE,cAAc;EACd,aAAa;AACf;;AAEA;EACE,qBAAqB;EACrB,YAAY;EACZ,iBAAiB;EACjB,kBAAkB;AACpB;;AAEA;EACE,cAAc;AAChB",sourcesContent:[".main {\n  padding-bottom: 60px;\n}\n\n.sidebar {\n  display: flex;\n  position: fixed;\n  width: 180px;\n  flex-direction: column;\n  padding: 10px;\n  gap: 10px;\n}\n\n.macro {\n  width: 550px;\n  margin: 10px auto 40px;\n}\n.heading {\n  display: flex;\n  position: relative;\n  justify-content: space-between;\n  border-bottom: 2px solid var(--key-bg-base);\n  margin: 5px 0;\n}\n.heading h5 {\n  margin: 0;\n}\n.action {\n  cursor: pointer;\n  padding: 5px;\n  opacity: 0.6;\n}\n.action:hover {\n  opacity: 1;\n}\n.remove {\n  color: var(--delete);\n}\n\n.macroActions {\n  text-align: center;\n}\n.macroActions > * {\n  margin: 5px;\n}\n\n.macroBindings {\n  position: relative;\n  width: 450px;\n  /* border: 1px solid lightgray; */\n  margin: 0 auto;\n  padding: 5px;\n\n  display: flex;\n  flex-wrap: wrap;\n}\n\n.macroBindings > * {\n  margin: 5px;\n  width: 65px;\n  height: 65px;\n}\n\n.controlBinding {\n  width: 100%;\n  height: 30px;\n  box-sizing: border-box;\n}\n.controlBinding:hover {\n  background-color: var(--hover-selection);\n  color: var(--key-color-hover);\n}\n.controlBinding > :first-child {\n  width: 100% !important;\n  height: 100% !important;\n}\n\n.macroBindings [draggable] {\n  cursor: grab;\n}\n\n.actions {\n  visibility: hidden;\n  position: absolute;\n  top: 0px;\n  right: 0px;\n  font-size: 80%;\n\n  color: var(--key-color-hover);\n}\n.actions > * {\n  margin: 2px;\n  opacity: 0.5;\n  cursor: pointer;\n}\n.macroBindings :hover .actions {\n  visibility: visible;\n  z-index: 10;\n}\n\n.actions :hover {\n  opacity: 1;\n}\n\n\n.field {\n  margin: 10px 0;\n  display: flex;\n}\n\n.field label {\n  display: inline-block;\n  width: 120px;\n  text-align: right;\n  margin-right: 10px;\n}\n\n.betaDisclaimer {\n  font-size: 80%;\n}"],sourceRoot:""}]),a.locals={main:"kc8Au327pmIjKO7auLXT",sidebar:"B8FpRtVdxbvJjwZoVNB4",macro:"Us3Ihf0AoVbZvDulP74Q",heading:"OVI4IkVsVzyk0eIAn9NX",action:"QNlSO_GSGhRfUFRE_v8E",remove:"DvzBwGDH7HsnnIbqaeHi",macroActions:"mwhR_W7iqHq803xNBV1H",macroBindings:"TBgT7nB7JSSjnTpMQeXp",controlBinding:"YMJbsLvnEGObUy4Y_i6w",actions:"I5drc4dA5Kpshp3PPle1",field:"iD9DsKMZZ1dQxr04488w",betaDisclaimer:"quGO7XFPrHoYiqu22mwg"},n.Z=a},79577:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,"._Et43RIDBS31WGTsJW6Q {\n  margin: 20px 0 35px;\n}\n._Et43RIDBS31WGTsJW6Q h3 {\n  cursor: pointer;\n}\n._Et43RIDBS31WGTsJW6Q h3:hover {\n  color: royalblue;\n}\n\n.UD9L8GtxRyZNCl6a5dsA {\n  color: var(--key-color-base);\n  opacity: 0.7;\n}\n\n.sah4Bu1xq72L7DDemOzU {\n  padding-left: 16px;\n}\n\n.pSk7y6zU9J8U_IybbhZB .rhqw3NH8NqvbeV0idmJz {\n  transform: rotate(-90deg);\n  transition: 100ms;\n}\n\n.pSk7y6zU9J8U_IybbhZB .sah4Bu1xq72L7DDemOzU {\n  display: none;\n}\n","",{version:3,sources:["webpack://./src/Keyboard/Warnings/styles.module.css"],names:[],mappings:"AAAA;EACE,mBAAmB;AACrB;AACA;EACE,eAAe;AACjB;AACA;EACE,gBAAgB;AAClB;;AAEA;EACE,4BAA4B;EAC5B,YAAY;AACd;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,yBAAyB;EACzB,iBAAiB;AACnB;;AAEA;EACE,aAAa;AACf",sourcesContent:[".warningCategory {\n  margin: 20px 0 35px;\n}\n.warningCategory h3 {\n  cursor: pointer;\n}\n.warningCategory h3:hover {\n  color: royalblue;\n}\n\n.emptyCategory {\n  color: var(--key-color-base);\n  opacity: 0.7;\n}\n\n.warningDetails {\n  padding-left: 16px;\n}\n\n.collapsedCategory .caret {\n  transform: rotate(-90deg);\n  transition: 100ms;\n}\n\n.collapsedCategory .warningDetails {\n  display: none;\n}\n"],sourceRoot:""}]),a.locals={warningCategory:"_Et43RIDBS31WGTsJW6Q",emptyCategory:"UD9L8GtxRyZNCl6a5dsA",warningDetails:"sah4Bu1xq72L7DDemOzU",collapsedCategory:"pSk7y6zU9J8U_IybbhZB",caret:"rhqw3NH8NqvbeV0idmJz"},n.Z=a},87995:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,".D0BH39_6wwiclW8aKuoi {\n  display: inline-flex;\n  list-style-type: none;\n  margin: 0;\n  padding: 0;\n}\n.D0BH39_6wwiclW8aKuoi li {\n  cursor: pointer;\n  padding: 5px;\n  margin: 5px;\n  border-radius: 4px;\n  font-variant: small-caps;\n}\n.D0BH39_6wwiclW8aKuoi li.xwo6V7AWCmy8CDvuTwRg {\n  background-color: var(--selection);\n  color: white;\n  cursor: default;\n}\n\n.nVbskEoaGxWf96qEgtxz {\n  position: absolute;\n}\n.nVbskEoaGxWf96qEgtxz > * {\n  width: 100% !important;\n  height: 100% !important;\n}\n\n.Ae2s0eqIVhebTEcJGc3F {\n  position: relative\n}\n.Ae2s0eqIVhebTEcJGc3F::after {\n  content: 'beta';\n  background-color: red;\n  color: white;\n  font-size: 12px;\n  font-weight: bold;\n  padding: 1px 3px;\n  border-radius: 6px;\n  position: absolute;\n  top: 0;\n  right: 0;\n  transform: translate(60%, -60%) rotate(13deg);\n}\n.xwo6V7AWCmy8CDvuTwRg .Ae2s0eqIVhebTEcJGc3F::after {\n  background-color: white;\n  color: var(--selection);\n  border: 1px solid var(--selection);\n}\n.sQQ0qFjHptJbQ8qvuXGa {\n  color: var(--error-highlight);\n}\n.D0BH39_6wwiclW8aKuoi li.xwo6V7AWCmy8CDvuTwRg.sQQ0qFjHptJbQ8qvuXGa {\n  background-color: var(--error-highlight);\n  color: white;\n}","",{version:3,sources:["webpack://./src/Keyboard/styles.module.css"],names:[],mappings:"AAAA;EACE,oBAAoB;EACpB,qBAAqB;EACrB,SAAS;EACT,UAAU;AACZ;AACA;EACE,eAAe;EACf,YAAY;EACZ,WAAW;EACX,kBAAkB;EAClB,wBAAwB;AAC1B;AACA;EACE,kCAAkC;EAClC,YAAY;EACZ,eAAe;AACjB;;AAEA;EACE,kBAAkB;AACpB;AACA;EACE,sBAAsB;EACtB,uBAAuB;AACzB;;AAEA;EACE;AACF;AACA;EACE,eAAe;EACf,qBAAqB;EACrB,YAAY;EACZ,eAAe;EACf,iBAAiB;EACjB,gBAAgB;EAChB,kBAAkB;EAClB,kBAAkB;EAClB,MAAM;EACN,QAAQ;EACR,6CAA6C;AAC/C;AACA;EACE,uBAAuB;EACvB,uBAAuB;EACvB,kCAAkC;AACpC;AACA;EACE,6BAA6B;AAC/B;AACA;EACE,wCAAwC;EACxC,YAAY;AACd",sourcesContent:[".editorModeTabs {\n  display: inline-flex;\n  list-style-type: none;\n  margin: 0;\n  padding: 0;\n}\n.editorModeTabs li {\n  cursor: pointer;\n  padding: 5px;\n  margin: 5px;\n  border-radius: 4px;\n  font-variant: small-caps;\n}\n.editorModeTabs li.activeEditTab {\n  background-color: var(--selection);\n  color: white;\n  cursor: default;\n}\n\n.placer {\n  position: absolute;\n}\n.placer > * {\n  width: 100% !important;\n  height: 100% !important;\n}\n\n.beta {\n  position: relative\n}\n.beta::after {\n  content: 'beta';\n  background-color: red;\n  color: white;\n  font-size: 12px;\n  font-weight: bold;\n  padding: 1px 3px;\n  border-radius: 6px;\n  position: absolute;\n  top: 0;\n  right: 0;\n  transform: translate(60%, -60%) rotate(13deg);\n}\n.activeEditTab .beta::after {\n  background-color: white;\n  color: var(--selection);\n  border: 1px solid var(--selection);\n}\n.warningTab {\n  color: var(--error-highlight);\n}\n.editorModeTabs li.activeEditTab.warningTab {\n  background-color: var(--error-highlight);\n  color: white;\n}"],sourceRoot:""}]),a.locals={editorModeTabs:"D0BH39_6wwiclW8aKuoi",activeEditTab:"xwo6V7AWCmy8CDvuTwRg",placer:"nVbskEoaGxWf96qEgtxz",beta:"Ae2s0eqIVhebTEcJGc3F",warningTab:"sQQ0qFjHptJbQ8qvuXGa"},n.Z=a},33971:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,".QkewNzGagIbndi3rJpKm {\n  border: none;\n  cursor: pointer;\n  color: white;\n  background: #248;\n  border-radius: 100%;\n  width: 24px;\n  height: 24px;\n  line-height: 24px;\n  text-align: center;\n}\n.QkewNzGagIbndi3rJpKm:hover {\n  background: #48F;\n}","",{version:3,sources:["webpack://./src/Sources/Demo/style.module.css"],names:[],mappings:"AAAA;EACE,YAAY;EACZ,eAAe;EACf,YAAY;EACZ,gBAAgB;EAChB,mBAAmB;EACnB,WAAW;EACX,YAAY;EACZ,iBAAiB;EACjB,kBAAkB;AACpB;AACA;EACE,gBAAgB;AAClB",sourcesContent:[".help {\n  border: none;\n  cursor: pointer;\n  color: white;\n  background: #248;\n  border-radius: 100%;\n  width: 24px;\n  height: 24px;\n  line-height: 24px;\n  text-align: center;\n}\n.help:hover {\n  background: #48F;\n}"],sourceRoot:""}]),a.locals={help:"QkewNzGagIbndi3rJpKm"},n.Z=a},80047:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,"\n.yyHfal9pM4DzShMl4LAY {\n  display: inline-flex;\n  height: 30px;\n  border-radius: 5px;\n\n  font-size: 70%;\n  padding: 0 4px;\n\n  background-color: royalblue;\n  color: white;\n  text-decoration: none;\n}\n\n.yyHfal9pM4DzShMl4LAY code {\n  font-family: monospace;\n}\n\n.QvI5wo7_u6OeAc12ib0W {\n  width: 30px;\n  height: 30px;\n  line-height: 30px;\n  font-size: 200%;\n  text-align: center;\n}\n\n.eUw5NZqoPPF3BcyYDpJx {\n  /* color: var(--selection); */\n}\n\n.XjY4lN_lY3nSgHcw67bX {\n  /* color: brown; */\n}\n\n.Ap_OwCtp3j1Q29Phpw3V {\n  color: gold;\n  animation: WjBuPfls4V41d2sjbNFU 1s linear alternate infinite;\n}\n\n@keyframes WjBuPfls4V41d2sjbNFU {\n  from { opacity: 0.5; }\n  to { opacity: 1; }\n}\n","",{version:3,sources:["webpack://./src/Sources/Github/styles.module.css"],names:[],mappings:";AACA;EACE,oBAAoB;EACpB,YAAY;EACZ,kBAAkB;;EAElB,cAAc;EACd,cAAc;;EAEd,2BAA2B;EAC3B,YAAY;EACZ,qBAAqB;AACvB;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,iBAAiB;EACjB,eAAe;EACf,kBAAkB;AACpB;;AAEA;EACE,6BAA6B;AAC/B;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,WAAW;EACX,4DAA6C;AAC/C;;AAEA;EACE,OAAO,YAAY,EAAE;EACrB,KAAK,UAAU,EAAE;AACnB",sourcesContent:["\n.buildDetails {\n  display: inline-flex;\n  height: 30px;\n  border-radius: 5px;\n\n  font-size: 70%;\n  padding: 0 4px;\n\n  background-color: royalblue;\n  color: white;\n  text-decoration: none;\n}\n\n.buildDetails code {\n  font-family: monospace;\n}\n\n.buildStatus {\n  width: 30px;\n  height: 30px;\n  line-height: 30px;\n  font-size: 200%;\n  text-align: center;\n}\n\n.buildSuccess {\n  /* color: var(--selection); */\n}\n\n.buildFailed {\n  /* color: brown; */\n}\n\n.buildPending {\n  color: gold;\n  animation: pulse 1s linear alternate infinite;\n}\n\n@keyframes pulse {\n  from { opacity: 0.5; }\n  to { opacity: 1; }\n}\n"],sourceRoot:""}]),a.locals={buildDetails:"yyHfal9pM4DzShMl4LAY",buildStatus:"QvI5wo7_u6OeAc12ib0W",buildSuccess:"eUw5NZqoPPF3BcyYDpJx",buildFailed:"XjY4lN_lY3nSgHcw67bX",buildPending:"Ap_OwCtp3j1Q29Phpw3V",pulse:"WjBuPfls4V41d2sjbNFU"},n.Z=a},47881:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,".sP2kDRoTZElZUTNHq033 {\n  width: 300px;\n\tpadding: 10px;\n\tborder-radius: 4px;\n\tbackground: radial-gradient(\n\t\trgba(var(--bg-rgb), 1) 20%,\n\t\trgba(var(--bg-rgb), .6) 100%\n\t);\n}\n.sP2kDRoTZElZUTNHq033 input {\n\tdisplay: block;\n\twidth: 100%;\n\theight: 30px;\n\tline-height: 30px;\n\n\tfont-size: 120%;\n\tmargin: 0;\n\tpadding: 4px;\n\tborder: none;\n\tborder-radius: 4px;\n  box-sizing: border-box;\n}\nul.inAS9Qunkf3g5K3xz6o6 {\n\tposition: relative;\n\tfont-family: monospace;\n\tlist-style-position: inside;\n\tlist-style-type: none;\n\tmax-height: 300px;\n\toverflow: scroll;\n\tpadding: 4px;\n  margin: 4px 0;\n\tbackground: rgba(0, 0, 0, 0.75);\n\tborder-radius: 4px;\n}\n.inAS9Qunkf3g5K3xz6o6 li {\n\tcursor: pointer;\n\tcolor: white;\n\tpadding: 5px;\n}\n.inAS9Qunkf3g5K3xz6o6 li:hover, .inAS9Qunkf3g5K3xz6o6 li.BL7Cxrn_efblQXY3W1Sw {\n\tbackground: white;\n\tcolor: black;\n}\n.inAS9Qunkf3g5K3xz6o6 li b { color: red; }\n.inAS9Qunkf3g5K3xz6o6 li .uld0XaeoQaQJJwp0LT0X {\n\tfont-style: italic;\n\tfont-size: 90%;\n\tmargin: 0;\n\tcolor: gray;\n}\n\n.pqiZQublKXvmnT_ESDxQ {\n  font-size: 10px;\n}\n\n.pqiZQublKXvmnT_ESDxQ a {\n  color: var(--selection);\n  border-bottom: 1px dotted var(--selection);\n  cursor: pointer;\n}\n\n.ECUs4g2j1rekP4xxgQDr {\n  position: relative;\n}\n.ECUs4g2j1rekP4xxgQDr input {\n  padding: 4px 4px 4px 30px;\n}\n\n.xDUAgQZeBp0TZSOqCwHm {\n  position: absolute;\n\ttop: 50%;\n\tleft: 10px;\n\ttransform: translateY(-50%);\n\tpointer-events: none;\n}\n.eY5zRl49sESLjXmizMEP {\n  position: absolute;\n\ttop: 50%;\n\tright: 10px;\n\ttransform: translateY(-50%);\n\tcursor: pointer;\n}","",{version:3,sources:["webpack://./src/ValuePicker/style.module.css"],names:[],mappings:"AAAA;EACE,YAAY;CACb,aAAa;CACb,kBAAkB;CAClB;;;EAGC;AACF;AACA;CACC,cAAc;CACd,WAAW;CACX,YAAY;CACZ,iBAAiB;;CAEjB,eAAe;CACf,SAAS;CACT,YAAY;CACZ,YAAY;CACZ,kBAAkB;EACjB,sBAAsB;AACxB;AACA;CACC,kBAAkB;CAClB,sBAAsB;CACtB,2BAA2B;CAC3B,qBAAqB;CACrB,iBAAiB;CACjB,gBAAgB;CAChB,YAAY;EACX,aAAa;CACd,+BAA+B;CAC/B,kBAAkB;AACnB;AACA;CACC,eAAe;CACf,YAAY;CACZ,YAAY;AACb;AACA;CACC,iBAAiB;CACjB,YAAY;AACb;AACA,6BAAgB,UAAU,EAAE;AAC5B;CACC,kBAAkB;CAClB,cAAc;CACd,SAAS;CACT,WAAW;AACZ;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,uBAAuB;EACvB,0CAA0C;EAC1C,eAAe;AACjB;;AAEA;EACE,kBAAkB;AACpB;AACA;EACE,yBAAyB;AAC3B;;AAEA;EACE,kBAAkB;CACnB,QAAQ;CACR,UAAU;CACV,2BAA2B;CAC3B,oBAAoB;AACrB;AACA;EACE,kBAAkB;CACnB,QAAQ;CACR,WAAW;CACX,2BAA2B;CAC3B,eAAe;AAChB",sourcesContent:[".dialog {\n  width: 300px;\n\tpadding: 10px;\n\tborder-radius: 4px;\n\tbackground: radial-gradient(\n\t\trgba(var(--bg-rgb), 1) 20%,\n\t\trgba(var(--bg-rgb), .6) 100%\n\t);\n}\n.dialog input {\n\tdisplay: block;\n\twidth: 100%;\n\theight: 30px;\n\tline-height: 30px;\n\n\tfont-size: 120%;\n\tmargin: 0;\n\tpadding: 4px;\n\tborder: none;\n\tborder-radius: 4px;\n  box-sizing: border-box;\n}\nul.results {\n\tposition: relative;\n\tfont-family: monospace;\n\tlist-style-position: inside;\n\tlist-style-type: none;\n\tmax-height: 300px;\n\toverflow: scroll;\n\tpadding: 4px;\n  margin: 4px 0;\n\tbackground: rgba(0, 0, 0, 0.75);\n\tborder-radius: 4px;\n}\n.results li {\n\tcursor: pointer;\n\tcolor: white;\n\tpadding: 5px;\n}\n.results li:hover, .results li.highlighted {\n\tbackground: white;\n\tcolor: black;\n}\n.results li b { color: red; }\n.results li .description {\n\tfont-style: italic;\n\tfont-size: 90%;\n\tmargin: 0;\n\tcolor: gray;\n}\n\n.choices-counter {\n  font-size: 10px;\n}\n\n.choices-counter a {\n  color: var(--selection);\n  border-bottom: 1px dotted var(--selection);\n  cursor: pointer;\n}\n\n.searchWrapper {\n  position: relative;\n}\n.searchWrapper input {\n  padding: 4px 4px 4px 30px;\n}\n\n.searchIcon {\n  position: absolute;\n\ttop: 50%;\n\tleft: 10px;\n\ttransform: translateY(-50%);\n\tpointer-events: none;\n}\n.clearSearchIcon {\n  position: absolute;\n\ttop: 50%;\n\tright: 10px;\n\ttransform: translateY(-50%);\n\tcursor: pointer;\n}"],sourceRoot:""}]),a.locals={dialog:"sP2kDRoTZElZUTNHq033",results:"inAS9Qunkf3g5K3xz6o6",highlighted:"BL7Cxrn_efblQXY3W1Sw",description:"uld0XaeoQaQJJwp0LT0X","choices-counter":"pqiZQublKXvmnT_ESDxQ",searchWrapper:"ECUs4g2j1rekP4xxgQDr",searchIcon:"xDUAgQZeBp0TZSOqCwHm",clearSearchIcon:"eY5zRl49sESLjXmizMEP"},n.Z=a},2746:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,"\n._vWNIXMkemQax9rkCJQh {\n  display: inline-block;\n  position: absolute;\n  z-index: 100;\n  bottom: 5px;\n  left: 5px;\n}\n\n._vWNIXMkemQax9rkCJQh label {\n  font-size: 75%;\n  font-style: italic;\n  display: block;\n  padding: 0 10px;\n}\n\n.qiC2NrujE4ebqmHjzq0_ {\n  display: inline-block;\n  font-size: 110%;\n  font-style: italic;\n  background-color: var(--code-bg);\n  border-radius: 20px;\n  padding: 5px 10px;\n  text-decoration: none;\n\n  color: royalblue;\n}\n.qiC2NrujE4ebqmHjzq0_:hover {\n  background-color: royalblue;\n  color: white;\n}","",{version:3,sources:["webpack://./src/styles.module.css"],names:[],mappings:";AACA;EACE,qBAAqB;EACrB,kBAAkB;EAClB,YAAY;EACZ,WAAW;EACX,SAAS;AACX;;AAEA;EACE,cAAc;EACd,kBAAkB;EAClB,cAAc;EACd,eAAe;AACjB;;AAEA;EACE,qBAAqB;EACrB,eAAe;EACf,kBAAkB;EAClB,gCAAgC;EAChC,mBAAmB;EACnB,iBAAiB;EACjB,qBAAqB;;EAErB,gBAAgB;AAClB;AACA;EACE,2BAA2B;EAC3B,YAAY;AACd",sourcesContent:["\n.wrapper {\n  display: inline-block;\n  position: absolute;\n  z-index: 100;\n  bottom: 5px;\n  left: 5px;\n}\n\n.wrapper label {\n  font-size: 75%;\n  font-style: italic;\n  display: block;\n  padding: 0 10px;\n}\n\n.githubLink {\n  display: inline-block;\n  font-size: 110%;\n  font-style: italic;\n  background-color: var(--code-bg);\n  border-radius: 20px;\n  padding: 5px 10px;\n  text-decoration: none;\n\n  color: royalblue;\n}\n.githubLink:hover {\n  background-color: royalblue;\n  color: white;\n}"],sourceRoot:""}]),a.locals={wrapper:"_vWNIXMkemQax9rkCJQh",githubLink:"qiC2NrujE4ebqmHjzq0_"},n.Z=a},46700:function(e,n,t){var r={"./af":42786,"./af.js":42786,"./ar":30867,"./ar-dz":14130,"./ar-dz.js":14130,"./ar-kw":96135,"./ar-kw.js":96135,"./ar-ly":56440,"./ar-ly.js":56440,"./ar-ma":47702,"./ar-ma.js":47702,"./ar-sa":16040,"./ar-sa.js":16040,"./ar-tn":37100,"./ar-tn.js":37100,"./ar.js":30867,"./az":31083,"./az.js":31083,"./be":9808,"./be.js":9808,"./bg":68338,"./bg.js":68338,"./bm":67438,"./bm.js":67438,"./bn":8905,"./bn-bd":76225,"./bn-bd.js":76225,"./bn.js":8905,"./bo":11560,"./bo.js":11560,"./br":1278,"./br.js":1278,"./bs":80622,"./bs.js":80622,"./ca":2468,"./ca.js":2468,"./cs":5822,"./cs.js":5822,"./cv":50877,"./cv.js":50877,"./cy":47373,"./cy.js":47373,"./da":24780,"./da.js":24780,"./de":59740,"./de-at":60217,"./de-at.js":60217,"./de-ch":60894,"./de-ch.js":60894,"./de.js":59740,"./dv":5300,"./dv.js":5300,"./el":50837,"./el.js":50837,"./en-au":78348,"./en-au.js":78348,"./en-ca":77925,"./en-ca.js":77925,"./en-gb":22243,"./en-gb.js":22243,"./en-ie":46436,"./en-ie.js":46436,"./en-il":47207,"./en-il.js":47207,"./en-in":44175,"./en-in.js":44175,"./en-nz":76319,"./en-nz.js":76319,"./en-sg":31662,"./en-sg.js":31662,"./eo":92915,"./eo.js":92915,"./es":55655,"./es-do":55251,"./es-do.js":55251,"./es-mx":96112,"./es-mx.js":96112,"./es-us":71146,"./es-us.js":71146,"./es.js":55655,"./et":5603,"./et.js":5603,"./eu":77763,"./eu.js":77763,"./fa":76959,"./fa.js":76959,"./fi":11897,"./fi.js":11897,"./fil":42549,"./fil.js":42549,"./fo":94694,"./fo.js":94694,"./fr":94470,"./fr-ca":63049,"./fr-ca.js":63049,"./fr-ch":52330,"./fr-ch.js":52330,"./fr.js":94470,"./fy":5044,"./fy.js":5044,"./ga":29295,"./ga.js":29295,"./gd":2101,"./gd.js":2101,"./gl":38794,"./gl.js":38794,"./gom-deva":27884,"./gom-deva.js":27884,"./gom-latn":23168,"./gom-latn.js":23168,"./gu":95349,"./gu.js":95349,"./he":24206,"./he.js":24206,"./hi":30094,"./hi.js":30094,"./hr":30316,"./hr.js":30316,"./hu":22138,"./hu.js":22138,"./hy-am":11423,"./hy-am.js":11423,"./id":29218,"./id.js":29218,"./is":90135,"./is.js":90135,"./it":90626,"./it-ch":10150,"./it-ch.js":10150,"./it.js":90626,"./ja":39183,"./ja.js":39183,"./jv":24286,"./jv.js":24286,"./ka":12105,"./ka.js":12105,"./kk":47772,"./kk.js":47772,"./km":18758,"./km.js":18758,"./kn":79282,"./kn.js":79282,"./ko":33730,"./ko.js":33730,"./ku":1408,"./ku.js":1408,"./ky":33291,"./ky.js":33291,"./lb":36841,"./lb.js":36841,"./lo":55466,"./lo.js":55466,"./lt":57010,"./lt.js":57010,"./lv":37595,"./lv.js":37595,"./me":39861,"./me.js":39861,"./mi":35493,"./mi.js":35493,"./mk":95966,"./mk.js":95966,"./ml":87341,"./ml.js":87341,"./mn":5115,"./mn.js":5115,"./mr":10370,"./mr.js":10370,"./ms":9847,"./ms-my":41237,"./ms-my.js":41237,"./ms.js":9847,"./mt":72126,"./mt.js":72126,"./my":56165,"./my.js":56165,"./nb":64924,"./nb.js":64924,"./ne":16744,"./ne.js":16744,"./nl":93901,"./nl-be":59814,"./nl-be.js":59814,"./nl.js":93901,"./nn":83877,"./nn.js":83877,"./oc-lnc":92135,"./oc-lnc.js":92135,"./pa-in":15858,"./pa-in.js":15858,"./pl":64495,"./pl.js":64495,"./pt":89520,"./pt-br":57971,"./pt-br.js":57971,"./pt.js":89520,"./ro":96459,"./ro.js":96459,"./ru":21793,"./ru.js":21793,"./sd":40950,"./sd.js":40950,"./se":10490,"./se.js":10490,"./si":90124,"./si.js":90124,"./sk":64249,"./sk.js":64249,"./sl":14985,"./sl.js":14985,"./sq":51104,"./sq.js":51104,"./sr":49131,"./sr-cyrl":79915,"./sr-cyrl.js":79915,"./sr.js":49131,"./ss":95606,"./ss.js":95606,"./sv":98760,"./sv.js":98760,"./sw":91172,"./sw.js":91172,"./ta":27333,"./ta.js":27333,"./te":23110,"./te.js":23110,"./tet":52095,"./tet.js":52095,"./tg":27321,"./tg.js":27321,"./th":9041,"./th.js":9041,"./tk":19005,"./tk.js":19005,"./tl-ph":75768,"./tl-ph.js":75768,"./tlh":89444,"./tlh.js":89444,"./tr":72397,"./tr.js":72397,"./tzl":28254,"./tzl.js":28254,"./tzm":51106,"./tzm-latn":30699,"./tzm-latn.js":30699,"./tzm.js":51106,"./ug-cn":9288,"./ug-cn.js":9288,"./uk":67691,"./uk.js":67691,"./ur":13795,"./ur.js":13795,"./uz":6791,"./uz-latn":60588,"./uz-latn.js":60588,"./uz.js":6791,"./vi":65666,"./vi.js":65666,"./x-pseudo":14378,"./x-pseudo.js":14378,"./yo":75805,"./yo.js":75805,"./zh-cn":83839,"./zh-cn.js":83839,"./zh-hk":55726,"./zh-hk.js":55726,"./zh-mo":99807,"./zh-mo.js":99807,"./zh-tw":74152,"./zh-tw.js":74152};function o(e){var n=i(e);return t(n)}function i(e){if(!t.o(r,e)){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}return r[e]}o.keys=function(){return Object.keys(r)},o.resolve=i,e.exports=o,o.id=46700}},function(e){e.O(0,[712,216],(function(){return 4673,e(e.s=4673)})),e.O()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,