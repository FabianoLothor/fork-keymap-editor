/*! For license information please see main.9f6f2dbf78d4a0910041.js.LICENSE.txt */
(self.webpackChunkapp=self.webpackChunkapp||[]).push([[179],{89949:function(e,n,t){"use strict";var r=t(67294),o=t(20745),i=t(95998),a=t(93379),c=t.n(a),l=t(7795),s=t.n(l),u=t(90569),f=t.n(u),p=t(3565),d=t.n(p),y=t(19216),h=t.n(y),m=t(44589),b=t.n(m),A=t(51424),v={};v.styleTagTransform=b(),v.setAttributes=d(),v.insert=f().bind(null,"head"),v.domAPI=s(),v.insertStyleElement=h(),c()(A.Z,v),A.Z&&A.Z.locals&&A.Z.locals,t(56831);var g=t(39087),x={};x.styleTagTransform=b(),x.setAttributes=d(),x.insert=f().bind(null,"head"),x.domAPI=s(),x.insertStyleElement=h(),c()(g.Z,x),g.Z&&g.Z.locals&&g.Z.locals;var j=(0,r.createContext)({getSearchTargets:null}),C=(0,r.createContext)({settings:null,openSettingsDialog:null}),w=t(45697),E=t.n(w),O=t(85893);function k(e){return k="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},k(e)}var S=["name","className","collection"];function B(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function P(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==k(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==k(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===k(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}var I={brands:"fab",default:"fa",solid:"fas",round:"far"};function T(e){var n=e.name,t=e.className,r=e.collection,o=function(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}(e,S),i=I[r],a="fa-".concat(n);return(0,O.jsx)("span",function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?B(Object(t),!0).forEach((function(n){P(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):B(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}({className:[t,i,a].join(" ")},o))}T.propTypes={name:E().string.isRequired,className:E().string,collection:E().string},T.defaultProps={collection:"default",className:""};var L=T;function D(e){return D="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},D(e)}var R=["collection","icon","text","children","onClick"];function N(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function _(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?N(Object(t),!0).forEach((function(n){M(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):N(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function M(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==D(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==D(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===D(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Y(e){var n=e.collection,t=e.icon,r=e.text,o=e.children,i=e.onClick,a=function(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}(e,R);return(0,O.jsxs)("button",_(_({onClick:i},a),{},{children:[(0,O.jsx)(L,{collection:n,name:t})," ",r||o]}))}var q=t(96486),Z=t(63105),K=t.n(Z),U=t(27361),G=t.n(U),z=t(41609),W=t.n(z),F=t(24350),X=t.n(F),V=t(35161),Q=t.n(V),H=t(50361),J=t.n(H);function $(e){return e&&["1","on","yes","true"].includes(e.toString().toLowerCase())}var ee="https://zmk-keymap-editor.fly.dev",ne=$("true"),te=$("false"),re=$("true");function oe(e){return oe="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},oe(e)}function ie(){ie=function(){return e};var e={},n=Object.prototype,t=n.hasOwnProperty,r=Object.defineProperty||function(e,n,t){e[n]=t.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function l(e,n,t){return Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}),e[n]}try{l({},"")}catch(e){l=function(e,n,t){return e[n]=t}}function s(e,n,t,o){var i=n&&n.prototype instanceof p?n:p,a=Object.create(i.prototype),c=new E(o||[]);return r(a,"_invoke",{value:x(e,t,c)}),a}function u(e,n,t){try{return{type:"normal",arg:e.call(n,t)}}catch(e){return{type:"throw",arg:e}}}e.wrap=s;var f={};function p(){}function d(){}function y(){}var h={};l(h,i,(function(){return this}));var m=Object.getPrototypeOf,b=m&&m(m(O([])));b&&b!==n&&t.call(b,i)&&(h=b);var A=y.prototype=p.prototype=Object.create(h);function v(e){["next","throw","return"].forEach((function(n){l(e,n,(function(e){return this._invoke(n,e)}))}))}function g(e,n){function o(r,i,a,c){var l=u(e[r],e,i);if("throw"!==l.type){var s=l.arg,f=s.value;return f&&"object"==oe(f)&&t.call(f,"__await")?n.resolve(f.__await).then((function(e){o("next",e,a,c)}),(function(e){o("throw",e,a,c)})):n.resolve(f).then((function(e){s.value=e,a(s)}),(function(e){return o("throw",e,a,c)}))}c(l.arg)}var i;r(this,"_invoke",{value:function(e,t){function r(){return new n((function(n,r){o(e,t,n,r)}))}return i=i?i.then(r,r):r()}})}function x(e,n,t){var r="suspendedStart";return function(o,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw i;return{value:void 0,done:!0}}for(t.method=o,t.arg=i;;){var a=t.delegate;if(a){var c=j(a,t);if(c){if(c===f)continue;return c}}if("next"===t.method)t.sent=t._sent=t.arg;else if("throw"===t.method){if("suspendedStart"===r)throw r="completed",t.arg;t.dispatchException(t.arg)}else"return"===t.method&&t.abrupt("return",t.arg);r="executing";var l=u(e,n,t);if("normal"===l.type){if(r=t.done?"completed":"suspendedYield",l.arg===f)continue;return{value:l.arg,done:t.done}}"throw"===l.type&&(r="completed",t.method="throw",t.arg=l.arg)}}}function j(e,n){var t=n.method,r=e.iterator[t];if(void 0===r)return n.delegate=null,"throw"===t&&e.iterator.return&&(n.method="return",n.arg=void 0,j(e,n),"throw"===n.method)||"return"!==t&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+t+"' method")),f;var o=u(r,e.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,f;var i=o.arg;return i?i.done?(n[e.resultName]=i.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=void 0),n.delegate=null,f):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,f)}function C(e){var n={tryLoc:e[0]};1 in e&&(n.catchLoc=e[1]),2 in e&&(n.finallyLoc=e[2],n.afterLoc=e[3]),this.tryEntries.push(n)}function w(e){var n=e.completion||{};n.type="normal",delete n.arg,e.completion=n}function E(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(C,this),this.reset(!0)}function O(e){if(e){var n=e[i];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,o=function n(){for(;++r<e.length;)if(t.call(e,r))return n.value=e[r],n.done=!1,n;return n.value=void 0,n.done=!0,n};return o.next=o}}return{next:k}}function k(){return{value:void 0,done:!0}}return d.prototype=y,r(A,"constructor",{value:y,configurable:!0}),r(y,"constructor",{value:d,configurable:!0}),d.displayName=l(y,c,"GeneratorFunction"),e.isGeneratorFunction=function(e){var n="function"==typeof e&&e.constructor;return!!n&&(n===d||"GeneratorFunction"===(n.displayName||n.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,y):(e.__proto__=y,l(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},e.awrap=function(e){return{__await:e}},v(g.prototype),l(g.prototype,a,(function(){return this})),e.AsyncIterator=g,e.async=function(n,t,r,o,i){void 0===i&&(i=Promise);var a=new g(s(n,t,r,o),i);return e.isGeneratorFunction(t)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},v(A),l(A,c,"Generator"),l(A,i,(function(){return this})),l(A,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var n=Object(e),t=[];for(var r in n)t.push(r);return t.reverse(),function e(){for(;t.length;){var r=t.pop();if(r in n)return e.value=r,e.done=!1,e}return e.done=!0,e}},e.values=O,E.prototype={constructor:E,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(w),!e)for(var n in this)"t"===n.charAt(0)&&t.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function r(t,r){return a.type="throw",a.arg=e,n.next=t,r&&(n.method="next",n.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var c=t.call(i,"catchLoc"),l=t.call(i,"finallyLoc");if(c&&l){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(e,n){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&t.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=n&&n<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=n,i?(this.method="next",this.next=i.finallyLoc,f):this.complete(a)},complete:function(e,n){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&n&&(this.next=n),f},finish:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.finallyLoc===e)return this.complete(t.completion,t.afterLoc),w(t),f}},catch:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.tryLoc===e){var r=t.completion;if("throw"===r.type){var o=r.arg;w(t)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,t){return this.delegate={iterator:O(e),resultName:n,nextLoc:t},"next"===this.method&&(this.arg=void 0),f}},e}function ae(e,n,t,r,o,i,a){try{var c=e[i](a),l=c.value}catch(e){return void t(e)}c.done?n(l):Promise.resolve(l).then(r,o)}function ce(e){return function(){var n=this,t=arguments;return new Promise((function(r,o){var i=e.apply(n,t);function a(e){ae(i,r,o,a,c,"next",e)}function c(e){ae(i,r,o,a,c,"throw",e)}a(void 0)}))}}function le(){return se.apply(this,arguments)}function se(){return(se=ce(ie().mark((function e(){var n,r,o;return ie().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Promise.resolve().then(t.t.bind(t,95130,23));case 2:return n=e.sent,r=n.behaviorSchemas,o=n.behaviorBindings,e.abrupt("return",{behaviors:r,bindings:o});case 6:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function ue(){return(ue=ce(ie().mark((function e(){var n,r;return ie().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,t.e(712).then(t.t.bind(t,52779,23));case 2:return n=e.sent,r=n.keycodes,e.abrupt("return",r);case 5:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function fe(){return(fe=ce(ie().mark((function e(){var n,r;return ie().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,t.e(712).then(t.t.bind(t,52779,23));case 2:return n=e.sent,r=n.keycodeGlyphs,e.abrupt("return",r);case 5:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function pe(){return de.apply(this,arguments)}function de(){return(de=ce(ie().mark((function e(){var n;return ie().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,fetch("".concat(ee,"/v2/local/keyboards"));case 2:return n=e.sent,e.abrupt("return",n.json());case 4:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function ye(e){return he.apply(this,arguments)}function he(){return(he=ce(ie().mark((function e(n){var t,r,o,i;return ie().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t="v2/local/keyboards/".concat(encodeURIComponent(n)),r="".concat(ee,"/").concat(t),e.next=4,fetch(r);case 4:if((o=e.sent).ok){e.next=9;break}throw(i=new Error).response=o,i;case 9:return e.abrupt("return",o.json());case 10:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function me(e,n){return be.apply(this,arguments)}function be(){return be=ce(ie().mark((function e(n,t){var r,o,i;return ie().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r="v2/local/keyboards/".concat(encodeURIComponent(n),"/keymap"),o="".concat(ee,"/").concat(r),e.next=4,fetch(o,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});case 4:return i=e.sent,e.abrupt("return",i.json());case 6:case"end":return e.stop()}}),e)}))),be.apply(this,arguments)}function Ae(e,n){var t="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!t){if(Array.isArray(e)||(t=ve(e))||n&&e&&"number"==typeof e.length){t&&(e=t);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,c=!1;return{s:function(){t=t.call(e)},n:function(){var e=t.next();return a=e.done,e},e:function(e){c=!0,i=e},f:function(){try{a||null==t.return||t.return()}finally{if(c)throw i}}}}function ve(e,n){if(e){if("string"==typeof e)return ge(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?ge(e,n):void 0}}function ge(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function xe(e){return(n=e,function(e){if(Array.isArray(e))return ge(e)}(n)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(n)||ve(n)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()).sort((function(e,n){return e.length-n.length}))[0];var n}var je=/^(.+?)\((code)\)$/;function Ce(e){return e.reduce((function(e,n){var t,r=n.description,o=n.context,i=n.symbol,a=n.faIcon,c=n.names.filter((function(e){return!e.match(je)})),l=xe(c),s=n.names.map((function(e){return e.match(je)})).filter((function(e){return!!e}))[0],u={name:l,aliases:c,description:r,context:o,faIcon:a,symbol:i||l,params:[]},f=Ae(c);try{for(f.s();!(t=f.n()).done;){var p=t.value;e.push(Object.assign({},u,{code:p,isModifier:!!s}))}}catch(e){f.e(e)}finally{f.f()}return s&&e.push(Object.assign({},u,{code:s[1],params:s[2].split(",")})),e}),[])}function we(e){return we="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},we(e)}function Ee(){Ee=function(){return e};var e={},n=Object.prototype,t=n.hasOwnProperty,r=Object.defineProperty||function(e,n,t){e[n]=t.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function l(e,n,t){return Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}),e[n]}try{l({},"")}catch(e){l=function(e,n,t){return e[n]=t}}function s(e,n,t,o){var i=n&&n.prototype instanceof p?n:p,a=Object.create(i.prototype),c=new E(o||[]);return r(a,"_invoke",{value:x(e,t,c)}),a}function u(e,n,t){try{return{type:"normal",arg:e.call(n,t)}}catch(e){return{type:"throw",arg:e}}}e.wrap=s;var f={};function p(){}function d(){}function y(){}var h={};l(h,i,(function(){return this}));var m=Object.getPrototypeOf,b=m&&m(m(O([])));b&&b!==n&&t.call(b,i)&&(h=b);var A=y.prototype=p.prototype=Object.create(h);function v(e){["next","throw","return"].forEach((function(n){l(e,n,(function(e){return this._invoke(n,e)}))}))}function g(e,n){function o(r,i,a,c){var l=u(e[r],e,i);if("throw"!==l.type){var s=l.arg,f=s.value;return f&&"object"==we(f)&&t.call(f,"__await")?n.resolve(f.__await).then((function(e){o("next",e,a,c)}),(function(e){o("throw",e,a,c)})):n.resolve(f).then((function(e){s.value=e,a(s)}),(function(e){return o("throw",e,a,c)}))}c(l.arg)}var i;r(this,"_invoke",{value:function(e,t){function r(){return new n((function(n,r){o(e,t,n,r)}))}return i=i?i.then(r,r):r()}})}function x(e,n,t){var r="suspendedStart";return function(o,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw i;return{value:void 0,done:!0}}for(t.method=o,t.arg=i;;){var a=t.delegate;if(a){var c=j(a,t);if(c){if(c===f)continue;return c}}if("next"===t.method)t.sent=t._sent=t.arg;else if("throw"===t.method){if("suspendedStart"===r)throw r="completed",t.arg;t.dispatchException(t.arg)}else"return"===t.method&&t.abrupt("return",t.arg);r="executing";var l=u(e,n,t);if("normal"===l.type){if(r=t.done?"completed":"suspendedYield",l.arg===f)continue;return{value:l.arg,done:t.done}}"throw"===l.type&&(r="completed",t.method="throw",t.arg=l.arg)}}}function j(e,n){var t=n.method,r=e.iterator[t];if(void 0===r)return n.delegate=null,"throw"===t&&e.iterator.return&&(n.method="return",n.arg=void 0,j(e,n),"throw"===n.method)||"return"!==t&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+t+"' method")),f;var o=u(r,e.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,f;var i=o.arg;return i?i.done?(n[e.resultName]=i.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=void 0),n.delegate=null,f):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,f)}function C(e){var n={tryLoc:e[0]};1 in e&&(n.catchLoc=e[1]),2 in e&&(n.finallyLoc=e[2],n.afterLoc=e[3]),this.tryEntries.push(n)}function w(e){var n=e.completion||{};n.type="normal",delete n.arg,e.completion=n}function E(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(C,this),this.reset(!0)}function O(e){if(e){var n=e[i];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,o=function n(){for(;++r<e.length;)if(t.call(e,r))return n.value=e[r],n.done=!1,n;return n.value=void 0,n.done=!0,n};return o.next=o}}return{next:k}}function k(){return{value:void 0,done:!0}}return d.prototype=y,r(A,"constructor",{value:y,configurable:!0}),r(y,"constructor",{value:d,configurable:!0}),d.displayName=l(y,c,"GeneratorFunction"),e.isGeneratorFunction=function(e){var n="function"==typeof e&&e.constructor;return!!n&&(n===d||"GeneratorFunction"===(n.displayName||n.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,y):(e.__proto__=y,l(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},e.awrap=function(e){return{__await:e}},v(g.prototype),l(g.prototype,a,(function(){return this})),e.AsyncIterator=g,e.async=function(n,t,r,o,i){void 0===i&&(i=Promise);var a=new g(s(n,t,r,o),i);return e.isGeneratorFunction(t)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},v(A),l(A,c,"Generator"),l(A,i,(function(){return this})),l(A,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var n=Object(e),t=[];for(var r in n)t.push(r);return t.reverse(),function e(){for(;t.length;){var r=t.pop();if(r in n)return e.value=r,e.done=!1,e}return e.done=!0,e}},e.values=O,E.prototype={constructor:E,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(w),!e)for(var n in this)"t"===n.charAt(0)&&t.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function r(t,r){return a.type="throw",a.arg=e,n.next=t,r&&(n.method="next",n.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var c=t.call(i,"catchLoc"),l=t.call(i,"finallyLoc");if(c&&l){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(e,n){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&t.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=n&&n<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=n,i?(this.method="next",this.next=i.finallyLoc,f):this.complete(a)},complete:function(e,n){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&n&&(this.next=n),f},finish:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.finallyLoc===e)return this.complete(t.completion,t.afterLoc),w(t),f}},catch:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.tryLoc===e){var r=t.completion;if("throw"===r.type){var o=r.arg;w(t)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,t){return this.delegate={iterator:O(e),resultName:n,nextLoc:t},"next"===this.method&&(this.arg=void 0),f}},e}function Oe(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function ke(e,n,t,r,o,i,a){try{var c=e[i](a),l=c.value}catch(e){return void t(e)}c.done?n(l):Promise.resolve(l).then(r,o)}var Se=(0,r.createContext)({keycodes:[],behaviours:[],behaviors:{},behaviorBinds:[],glyphs:[]}),Be=function(e){return e.definitions};function Pe(e){var n=e.children,t=(0,i.v9)(Be),o=(0,i.I0)();if((0,r.useEffect)((function(){var e;(e=Ee().mark((function e(){var n,r,i,a,c,l,s;return Ee().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(null===t){e.next=2;break}return e.abrupt("return");case 2:return e.next=4,Promise.all([function(){return ue.apply(this,arguments)}().then(Ce),le(),function(){return fe.apply(this,arguments)}()]);case 4:n=e.sent,f=3,r=function(e){if(Array.isArray(e))return e}(u=n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(u,f)||function(e,n){if(e){if("string"==typeof e)return Oe(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Oe(e,n):void 0}}(u,f)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),i=r[0],a=r[1],c=r[2],l=J()(a.behaviors),s=J()(a.bindings),i.indexed=X()(i,"code"),s.indexed=X()(s,"code"),s.context={none:s.filter((function(e){return!e.context})),macros:K()(s,{context:"macros"})},s.byContext={none:X()(s.context.none,"code"),macros:X()(s.context.macros,"code")},o({type:"DEFINITIONS_SET",definitions:{keycodes:i,behaviours:s,behaviors:l,behaviorBinds:s,glyphs:c}});case 16:case"end":return e.stop()}var u,f}),e)})),function(){var n=this,t=arguments;return new Promise((function(r,o){var i=e.apply(n,t);function a(e){ke(i,r,o,a,c,"next",e)}function c(e){ke(i,r,o,a,c,"throw",e)}a(void 0)}))})()}),[t,o]),t)return(0,O.jsx)(Se.Provider,{value:t,children:n})}var Ie=["children"];function Te(e){return function(e){if(Array.isArray(e))return Le(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,n){if(e){if("string"==typeof e)return Le(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Le(e,n):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Le(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var De=function(e){var n=e.children,t=function(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}(e,Ie).keymap,o=(0,r.useContext)(Se),i=o.keycodes,a=o.behaviours,c=o.glyphs,l=(0,r.useContext)(C).settings,s=(0,r.useMemo)((function(){var e=window.navigator.platform.startsWith("Mac"),n=window.navigator.platform.startsWith("Win"),t=e?"mac":n&&"win";return function(e,n){return(0,q.compact)([e.basic,n.unicode&&e.unicode,"mac"===n.platform&&e.platforms.mac,"win"===n.platform&&e.platforms.win]).reduce((function(e,n){var t,r=Ae(n);try{for(r.s();!(t=r.n()).done;){var o=t.value,i=o.names.filter((function(e){return!e.match(je)})),a=xe(i);e[a]||(e[a]={}),e[a].symbol=e[a].symbol||o.symbol,e[a].faIcon=e[a].faIcon||o.faIcon}}catch(e){r.e(e)}finally{r.f()}return e}),{})}(c,{unicode:G()(l,"unicodeGlyphs",!0),platform:"auto"!==G()(l,"platformGlyphs","auto")?l.platformGlyphs:t})}),[c,l]),u=(0,r.useMemo)((function(){var e=[].concat(Te(a),Te((t.behaviors||[]).map((function(e){return{code:"&".concat(e.labels[0]),bind:"&".concat(e.labels[0]),name:e.name,description:'Custom behavior: "'.concat(e.properties.label.raw||e.name,'"'),params:e.params}}))),Te(t.macros.map((function(e){return{code:"&".concat(e.identifier),name:e.identifier,description:"Custom macro",params:[]}}))));return e.indexed=X()(e,"code"),e.context={none:e.filter((function(e){return!e.context})),macros:K()(e,{context:"macros"})},e.byContext={none:X()(e.context.none,"code"),macros:X()(e.context.macros,"code")},e}),[a,t.behaviors,t.macros]),f=(0,r.useMemo)((function(){return W()(t)?[]:t.layers.map((function(e,n){return{code:n,description:e.name||"Layer ".concat(n)}}))}),[t]),p=(0,r.useMemo)((function(){return{code:i.indexed,behaviours:u.indexed,behavioursByContext:u.byContext,layer:X()(f,"code")}}),[i,u,f]),d=(0,r.useMemo)((function(){return{behaviour:u,code:i}}),[u,i]),y=(0,r.useMemo)((function(){return function(e,n){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"none";return e.enum?e.enum.map((function(e){return{code:e}})):e.raw?[]:"command"===e?G()(p.behavioursByContext,[t,n,"commands"],[]):(d[e]||console.error("cannot find target for",e),"behaviour"===e?d.behaviour.context[t]:d[e])}}),[d,p]),h=(0,r.useMemo)((function(){return[].concat(Te(Q()(i,"code")),Te(Object.keys(t.defines||{})))}),[i,t.defines]);return(0,O.jsx)(j.Provider,{value:{getSearchTargets:y,mergedGlyphs:s,sources:p,identifiers:h},children:n})},Re=t(56281),Ne={};Ne.styleTagTransform=b(),Ne.setAttributes=d(),Ne.insert=f().bind(null,"head"),Ne.domAPI=s(),Ne.insertStyleElement=h(),c()(Re.Z,Ne);var _e=Re.Z&&Re.Z.locals?Re.Z.locals:void 0;function Me(e){return Me="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Me(e)}var Ye=["children","secondary","className"];function qe(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Ze(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?qe(Object(t),!0).forEach((function(n){Ke(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):qe(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Ke(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Me(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Me(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Me(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Ue(e){var n=e.children,t=e.secondary,r=e.className,o=function(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}(e,Ye);return(0,O.jsx)("button",Ze(Ze({className:[r,_e.action,t&&_e.secondary].join(" ")},o),{},{children:n}))}Ue.defaultProps={className:""};var Ge=Ue,ze=t(57557),We=t.n(ze),Fe=t(49502),Xe={};Xe.styleTagTransform=b(),Xe.setAttributes=d(),Xe.insert=f().bind(null,"head"),Xe.domAPI=s(),Xe.insertStyleElement=h(),c()(Fe.Z,Xe);var Ve=Fe.Z&&Fe.Z.locals?Fe.Z.locals:void 0;function Qe(e){return Qe="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Qe(e)}var He=["dismissText","classes","onDismiss","children"];function Je(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function $e(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Je(Object(t),!0).forEach((function(n){en(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Je(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function en(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Qe(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Qe(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Qe(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function nn(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function tn(e){var n,t=e.dismissText,r=void 0===t?"Ok":t,o=e.classes,i=void 0===o?[]:o,a=e.onDismiss,c=e.children,l=function(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}(e,He);return(0,O.jsxs)("div",$e($e({className:[Ve.dialog].concat((n=i,function(e){if(Array.isArray(e))return nn(e)}(n)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(n)||function(e,n){if(e){if("string"==typeof e)return nn(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?nn(e,n):void 0}}(n)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())).join(" ")},l),{},{children:[c,r&&(0,O.jsx)("button",{className:Ve.button,onClick:a,children:r})]}))}var rn=t(73935);function on(e){return on="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},on(e)}function an(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function cn(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?an(Object(t),!0).forEach((function(n){ln(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):an(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function ln(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==on(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==on(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===on(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}var sn={wrapper:{position:"absolute",top:"0",left:"0",width:"100vw",height:"100vh",backgroundColor:"rgba(104, 123, 162, 0.39)",backdropFilter:"blur(1px)",zIndex:"50",display:"flex",justifyContent:"center",alignItems:"center"},centerOnly:{background:"transparent",pointerEvents:"none"},content:{display:"block",pointerEvents:"all"}};function un(e){var n=e.onDismiss,t=e.centerOnly,o=void 0!==t&&t,i=e.children,a=(0,r.useRef)(),c=(0,r.useCallback)((function(e){n&&a.current&&e.target.contains(a.current)&&n()}),[a,n]),l=o?cn(cn({},sn.wrapper),sn.centerOnly):sn.wrapper;return rn.createPortal((0,O.jsx)("div",{onClick:c,style:l,children:(0,O.jsx)("div",{ref:a,style:sn.content,children:i})}),document.getElementById("modal-root"))}un.propTypes={onDismiss:E().func};var fn=un,pn=t(34288),dn={};dn.styleTagTransform=b(),dn.setAttributes=d(),dn.insert=f().bind(null,"head"),dn.domAPI=s(),dn.insertStyleElement=h(),c()(pn.Z,dn);var yn=pn.Z&&pn.Z.locals?pn.Z.locals:void 0;function hn(e){var n=e.property,t=e.schema;return(0,O.jsxs)(O.Fragment,{children:[(0,O.jsx)("span",{className:yn.propertyName,title:n,children:n}),t.deprecatedBy&&(0,O.jsx)("sub",{className:yn.propertyDeprecation,children:"(deprecated)"})]})}function mn(e){return function(e){if(Array.isArray(e))return bn(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,n){if(e){if("string"==typeof e)return bn(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?bn(e,n):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function bn(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var An=65,vn=5;function gn(e,n){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return{x:e.x*(An+vn),y:e.y*(An+vn),u:n.u*An+vn*(n.u-1),h:n.h*An+vn*(n.h-1),rx:(e.x-(t.x||e.x))*-(An+vn),ry:(e.y-(t.y||e.y))*-(An+vn),a:t.a||0}}function xn(e,n,t){var r=gn(e,n,t),o=r.x,i=r.y,a=r.u,c=r.h,l=r.a,s=r.rx,u=r.ry;return[{x:0,y:0},{x:a,y:0},{x:a,y:c},{x:0,y:c}].map((function(e){var n=e.x-s,t=e.y-u,r=Math.PI*l/180;return{x:s+n*Math.cos(r)-t*Math.sin(r),y:u+t*Math.cos(r)+n*Math.sin(r)}})).map((function(e){return{x:e.x+o,y:e.y+i}}))}function jn(e){return jn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},jn(e)}function Cn(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function wn(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==jn(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==jn(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===jn(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function En(e){return e.map((function(e){return function(e,n,t){var r=xn(e,n,t),o=Q()(r,"x"),i=Q()(r,"y");return{min:{x:Math.min.apply(Math,mn(o)),y:Math.min.apply(Math,mn(i))},max:{x:Math.max.apply(Math,mn(o)),y:Math.max.apply(Math,mn(i))}}}({x:e.x,y:e.y},{u:e.u||e.w||1,h:e.h||1},{x:e.rx,y:e.ry,a:e.r})})).reduce((function(e,n){var t=e.x,r=e.y,o=n.max;return{x:Math.max(t,o.x),y:Math.max(r,o.y)}}),{x:0,y:0})}function On(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},t=n.scale,r=void 0===t?1:t,o=n.overrides,i=void 0===o?{}:o,a=Array.isArray(e)?En(e):e;return function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Cn(Object(t),!0).forEach((function(n){wn(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Cn(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}({width:"".concat(a.x*r,"px"),height:"".concat(a.y*r,"px"),margin:"0 auto",padding:"0 40px 40px"},i)}var kn=t(78718),Sn=t.n(kn),Bn=t(87995),Pn={};Pn.styleTagTransform=b(),Pn.setAttributes=d(),Pn.insert=f().bind(null,"head"),Pn.domAPI=s(),Pn.insertStyleElement=h(),c()(Bn.Z,Pn);var In=Bn.Z&&Bn.Z.locals?Bn.Z.locals:void 0;function Tn(e){return Tn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Tn(e)}function Ln(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Dn(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Ln(Object(t),!0).forEach((function(n){Rn(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Ln(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Rn(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Tn(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Tn(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Tn(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}var Nn={x:E().number.isRequired,y:E().number.isRequired},_n={a:E().number,rx:E().number,ry:E().number},Mn={u:E().number,h:E().number},Yn=E().shape(Dn(Dn(Dn({},Nn),_n),Mn)),qn=E().arrayOf(Yn);function Zn(e){return Zn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Zn(e)}var Kn=["keyLayout","children"];function Un(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Gn(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Un(Object(t),!0).forEach((function(n){zn(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Un(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function zn(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Zn(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Zn(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Zn(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}var Wn=function(e){return Sn()(e,["x","y"])},Fn=function(e){return{x:e.rx,y:e.ry,a:e.r}},Xn=function(e){var n=e.w,t=void 0===n?1:n,r=e.u,o=void 0===r?t:r,i=e.h;return{u:o,h:void 0===i?1:i}};function Vn(e){var n=e.keyLayout,t=e.children,r=function(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}(e,Kn),o=Wn(n),i=Fn(n),a=Xn(n),c=function(e,n,t){var r=gn(e,n,t),o=r.x,i=r.y,a=r.u,c=r.h,l=r.a,s=r.rx,u=r.ry;return{top:"".concat(i,"px"),left:"".concat(o,"px"),width:"".concat(a,"px"),height:"".concat(c,"px"),transformOrigin:"".concat(s,"px ").concat(u,"px"),transform:"rotate(".concat(l||0,"deg)")}}(o,a,i);return(0,O.jsx)("div",Gn(Gn({className:In.placer,style:c,"data-u":a.u,"data-h":a.h},r),{},{children:t}))}Vn.propTypes={scale:E().number,keyLayout:Yn.isRequired},Vn.defaultProps={scale:1};var Qn=Vn;function Hn(e){var n=e.layout,t=e.renderKey,r=e.scale;return(0,O.jsx)("div",{style:{position:"relative",transform:"scale(".concat(r,")"),transformOrigin:0},children:n.map((function(e,n){return(0,O.jsx)(Qn,{keyLayout:e,children:t({index:n,keyLayout:e})},n)}))})}Hn.propTypes={layout:qn.isRequired,renderKey:E().func.isRequired,scale:E().number},Hn.defaultProps={scale:1};var Jn=Hn,$n=t(39693),et=t.n($n),nt=t(2),tt={};tt.styleTagTransform=b(),tt.setAttributes=d(),tt.insert=f().bind(null,"head"),tt.domAPI=s(),tt.insertStyleElement=h(),c()(nt.Z,tt);var rt=nt.Z&&nt.Z.locals?nt.Z.locals:void 0;function ot(e){return ot="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},ot(e)}var it=["children","selectable","themeClass","className"];function at(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function ct(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?at(Object(t),!0).forEach((function(n){lt(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):at(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function lt(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==ot(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==ot(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===ot(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}var st=function(e){var n=e.children,t=e.selectable,r=void 0===t||t,o=e.themeClass,i=void 0===o?void 0:o,a=e.className,c=void 0===a?"":a,l=function(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}(e,it),s=et()([rt.key,r&&rt.selectable,null!=i?i:rt.keyDefaultTheme,c]).join(" ");return(0,O.jsx)("div",ct(ct({className:s},l),{},{children:n}))},ut=t(74691),ft=t.n(ut),pt=t(56520),dt={};dt.styleTagTransform=b(),dt.setAttributes=d(),dt.insert=f().bind(null,"head"),dt.domAPI=s(),dt.insertStyleElement=h(),c()(pt.Z,dt);var yt=pt.Z&&pt.Z.locals?pt.Z.locals:void 0;function ht(e){return ht="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},ht(e)}function mt(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function bt(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?mt(Object(t),!0).forEach((function(n){At(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):mt(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function At(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==ht(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==ht(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===ht(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function vt(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(e,n)||function(e,n){if(e){if("string"==typeof e)return gt(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?gt(e,n):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function gt(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function xt(e){var n=e.onMouseDown,t=e.selecting,r=e.negate,o=e.rect,i=e.size,a=e.children;return(0,O.jsxs)("div",{onMouseDown:n,className:et()([yt.container,t&&yt.selecting]).join(" "),children:[a,t&&(0,O.jsx)("div",{className:et()([yt.overlay,r&&yt.negate]).join(" "),style:{position:"absolute",top:o[0][1]+"px",left:o[0][0]+"px",width:i[0]+"px",height:i[1]+"px"}})]})}function jt(e){var n=e.polygons,t=e.onSelect,o=vt((0,r.useState)({}),2),i=o[0],a=o[1],c=(0,r.useCallback)((function(e){var n=function(e){for(;(e=e.parentNode)&&("relative"!==e.style.position||!e.getBoundingClientRect().height););return e}(e.target).getBoundingClientRect(),t=e.clientX,r=e.clientY;e.preventDefault(),a({start:[t,r],intersecting:[],offset:[n.left,n.top],offsetRect:n})}),[a]),l=(0,r.useCallback)((function(e){i.selecting&&!e.repeat&&e.shiftKey&&a((function(e){return bt(bt({},e),{},{negate:!0})}))}),[i.selecting,a]),s=(0,r.useCallback)((function(e){!i.negate||e.repeat||e.shiftKey||a((function(e){return bt(bt({},e),{},{negate:!1})}))}),[i.negate,a]),u=(0,r.useCallback)((function(e){var t=i.start,r=i.offset,o=i.offsetRect;if(t){var c=e.shiftKey,l=e.altKey,s=e.clientX,u=e.clientY,f=vt(t,2),p=f[0],d=f[1],y=ft()(s,o.left,o.right),h=ft()(u,o.top,o.bottom),m=[[Math.min(y,p)-r[0],Math.min(h,d)-r[1]],[Math.max(y,p)-r[0],Math.max(h,d)-r[1]]],b=[Math.abs(y-p),Math.abs(h-d)];a((function(e){return bt(bt({},e),{},{negate:c||l,selecting:b[0]>3||b[1]>3,intersecting:Ct(m,n),rect:m,size:b})}))}}),[i,n,a]),f=(0,r.useCallback)((function(e){i.start&&(i.selecting&&t({negate:i.negate,intersecting:i.intersecting}),a({start:null,selecting:!1}))}),[t,i,a]);return(0,r.useEffect)((function(){return window.addEventListener("mouseup",f),window.addEventListener("mousemove",u),window.addEventListener("keydown",l),window.addEventListener("keyup",s),function(){window.removeEventListener("mouseup",f),window.removeEventListener("mousemove",u),window.removeEventListener("keydown",l),window.removeEventListener("keyup",s)}}),[f,u,l,s]),[bt(bt({},i),{},{onMouseDown:c,onMouseMove:u}),xt]}function Ct(e,n){return n.reduce((function(n,t,r){return t.some((function(n){var t=n.x,r=n.y;return e[0][0]<t&&t<e[1][0]&&e[0][1]<r&&r<e[1][1]}))&&n.push(r),n}),[])}var wt=t(49040),Et={};Et.styleTagTransform=b(),Et.setAttributes=d(),Et.insert=f().bind(null,"head"),Et.domAPI=s(),Et.insertStyleElement=h(),c()(wt.Z,Et);var Ot=wt.Z&&wt.Z.locals?wt.Z.locals:void 0,kt=t(528),St={};St.styleTagTransform=b(),St.setAttributes=d(),St.insert=f().bind(null,"head"),St.domAPI=s(),St.insertStyleElement=h(),c()(kt.Z,St);var Bt=kt.Z&&kt.Z.locals?kt.Z.locals:void 0;function Pt(e){var n=e.children,t=e.className,r=void 0===t?"":t,o=[Bt.tip,r].join(" ");return(0,O.jsxs)("div",{className:o,children:[(0,O.jsx)(L,{name:"hand-point-up"})," ",n]})}var It=(0,r.createContext)({layout:[],bindingCount:0,wrapperDimensions:{},wrapperStyle:{}});function Tt(e){var n=e.layout,t=e.children,o=(0,r.useMemo)((function(){return n.length}),[n.length]),i=(0,r.useMemo)((function(){return En(n)}),[n]),a=(0,r.useMemo)((function(){return On(i)}),[i]),c={layout:n,bindingCount:o,wrapperDimensions:i,wrapperStyle:a};return(0,O.jsx)(It.Provider,{value:c,children:t})}function Lt(e){return Lt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Lt(e)}function Dt(e){return function(e){if(Array.isArray(e))return Zt(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||qt(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Rt(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Nt(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Rt(Object(t),!0).forEach((function(n){_t(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Rt(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function _t(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Lt(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Lt(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Lt(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Mt(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(e,n)||qt(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Yt(e,n){var t="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!t){if(Array.isArray(e)||(t=qt(e))||n&&e&&"number"==typeof e.length){t&&(e=t);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,c=!1;return{s:function(){t=t.call(e)},n:function(){var e=t.next();return a=e.done,e},e:function(e){c=!0,i=e},f:function(){try{a||null==t.return||t.return()}finally{if(c)throw i}}}}function qt(e,n){if(e){if("string"==typeof e)return Zt(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Zt(e,n):void 0}}function Zt(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var Kt=.2,Ut=function(e){var n,t=function(e,n){return e.map((function(e){return xn({x:e.x,y:e.y},{u:e.u||e.w||1,h:e.h||1},{x:e.rx,y:e.ry,a:e.r})}))}(e),r=Yt(t);try{for(r.s();!(n=r.n()).done;){var o,i=Yt(n.value);try{for(i.s();!(o=i.n()).done;){var a=o.value;a.x*=Kt,a.y*=Kt}}catch(e){i.e(e)}finally{i.f()}}}catch(e){r.e(e)}finally{r.f()}return t};function Gt(e){var n,t,o,i,a,c,l,s=e.value,u=e.prompt,f=e.onUpdate,p=(0,r.useContext)(It),d=p.layout,y=p.wrapperDimensions,h=(0,r.useMemo)((function(){return Ut(d)}),[d]),m=(0,r.useMemo)((function(){return On(y,{scale:Kt,overrides:{position:"relative",padding:0,margin:0}})}),[y]),b=(n=Mt((0,r.useReducer)((function(e,n){switch(n){case"INCREMENT_MANUAL_SELECTION":return Nt(Nt({},e),{},{manualSelectionCount:e.manualSelectionCount+1});case"INCREMENT_MANUAL_DESELECTION":return Nt(Nt({},e),{},{manualDeSelectionCount:e.manualDeSelectionCount+1});case"TRACK_DRAG_SELECTION":return Nt(Nt({},e),{},{usedDragSelection:!0});case"TRACK_DRAG_DESELECTION":return Nt(Nt({},e),{},{usedDragDeSelection:!0});default:throw new Error("Unrecognized action type in ".concat(n))}}),{manualSelectionCount:0,manualDeSelectionCount:0,usedDragSelection:!1,usedDragDeSelection:!1}),2),t=n[0],o=n[1],i=(0,r.useCallback)((function(){return o("INCREMENT_MANUAL_SELECTION")}),[o]),a=(0,r.useCallback)((function(){return o("INCREMENT_MANUAL_DESELECTION")}),[o]),c=(0,r.useCallback)((function(){return o("TRACK_DRAG_SELECTION")}),[o]),l=(0,r.useCallback)((function(){return o("TRACK_DRAG_DESELECTION")}),[o]),{showSelectTip:!t.usedDragSelection&&t.manualSelectionCount>3,showDeSelectTip:!t.usedDragDeSelection&&t.manualDeSelectionCount>3,actions:{manualSelection:i,manualDeSelection:a,dragSelection:c,dragDeSelection:l}}),A=b.showSelectTip,v=b.showDeSelectTip,g=b.actions,x=(0,r.useCallback)((function(e){var n=e.negate,t=e.intersecting;n?g.dragDeSelection():g.dragSelection(),f(n?s.filter((function(e){return!t.includes(e)})):[].concat(Dt(s),Dt(t)))}),[s,f,g]),j=(0,r.useCallback)((function(e){var n=s.includes(e);n?g.manualDeSelection():g.manualSelection(),f(n?s.filter((function(n){return n!==e})):[].concat(Dt(s),[e]))}),[s,f,g]),C=Mt(jt({onSelect:x,polygons:h}),2),w=C[0],E=C[1],k=w.selecting?w.intersecting:[],S=s,B=w.negate?[]:k.filter((function(e){return!S.includes(e)})),P=w.negate?k.filter((function(e){return S.includes(e)})):[];return(0,O.jsx)("div",{style:m,children:(0,O.jsxs)(E,Nt(Nt({},w),{},{children:[(0,O.jsx)(Jn,{layout:d,bindings:[],scale:Kt,renderKey:function(e){var n=e.index;return(0,O.jsx)(st,{onClick:function(){return j(n)},themeClass:(0,q.compact)([Ot.key,S.includes(n)&&Ot.highlight,B.includes(n)&&Ot.previewAdd,P.includes(n)&&Ot.previewRemove]).join(" ")})}}),u&&(0,O.jsx)("prompt",{}),A&&(0,O.jsx)(Pt,{className:Ot.tip,children:"Drag to select a region"}),v&&(0,O.jsx)(Pt,{className:Ot.tip,children:"Shift+Drag to de-select a region"})]}))})}Gt.propTypes={onUpdate:E().func.isRequired,value:E().arrayOf(E().number).isRequired,prompt:E().node};var zt=Gt,Wt=t(27470),Ft={};Ft.styleTagTransform=b(),Ft.setAttributes=d(),Ft.insert=f().bind(null,"head"),Ft.domAPI=s(),Ft.insertStyleElement=h(),c()(Wt.Z,Ft);var Xt=Wt.Z&&Wt.Z.locals?Wt.Z.locals:void 0;function Vt(e){return Vt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Vt(e)}function Qt(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Ht(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Qt(Object(t),!0).forEach((function(n){Jt(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Qt(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Jt(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Vt(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Vt(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Vt(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function $t(e){var n=e.prop,t=e.schema,r=e.onUpdate;return(0,O.jsxs)(O.Fragment,{children:[(0,O.jsx)(L,{name:"code",title:"Raw property value"})," ",(0,O.jsx)("input",{required:null==t?void 0:t.required,value:null==n?void 0:n.raw,onChange:function(e){return r(Ht(Ht({},n),{},{raw:e.target.value,useRaw:!0}))}})]})}function er(e){var n=e.schema;return(0,O.jsx)("span",{className:[Xt.propertyValue,Xt.readonly].join(" "),children:n.const})}function nr(e){var n,t=e.prop,r=e.schema,o=e.onUpdate;return(0,O.jsx)("input",{type:"text",className:Xt.propertyValue,value:null!==(n=null==t?void 0:t.parsed)&&void 0!==n?n:"",placeholder:r.default&&"Default: ".concat(r.default),onChange:function(e){o(Ht(Ht({},t),{},{parsed:e.target.value,useRaw:!1}))}})}function tr(e){var n,t=e.prop,r=e.schema,o=e.onUpdate;return(0,O.jsx)("input",{type:"number",className:Xt.propertyValue,value:null!==(n=null==t?void 0:t.parsed)&&void 0!==n?n:"",placeholder:r.default&&"Default: ".concat(r.default),onChange:function(e){o(Ht(Ht({},t),{},{parsed:Number(e.target.value),useRaw:!1}))}})}function rr(e){var n=e.prop,t=e.onUpdate;return(0,O.jsx)("input",{type:"checkbox",className:Xt.propertyValue,checked:(null==n?void 0:n.parsed)||!1,onChange:function(e){t({parsed:!!e.target.checked,useRaw:!1})}})}var or=t(87360),ir=t.n(or),ar=function(e,n){var t=(n+(arguments.length>2&&void 0!==arguments[2]?arguments[2]:1))%e.length;return t<0?e.length+t:t},cr=t(47881),lr={};lr.styleTagTransform=b(),lr.setAttributes=d(),lr.insert=f().bind(null,"head"),lr.domAPI=s(),lr.insertStyleElement=h(),c()(cr.Z,lr);var sr=cr.Z&&cr.Z.locals?cr.Z.locals:void 0;function ur(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function fr(e){var n,t,o=e.results,i=e.onSelect,a=e.renderResult,c=(n=(0,r.useState)(0),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||function(e,n){if(e){if("string"==typeof e)return ur(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?ur(e,n):void 0}}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),l=c[0],s=c[1],u=(0,r.useRef)(null),f=(0,r.useCallback)((function(e,n){var t,r,i,a,c,f;if(0!==o.length)if(void 0!==n){var p=null!==l?ar(o,l,n):e,d='li[data-result-index="'.concat(p,'"]');r=null===(t=u.current)||void 0===t?void 0:t.querySelector(d),i=r.offsetParent.scrollTop,a=r.offsetParent.offsetHeight,c=r.offsetTop,f=c+r.scrollHeight,(c<i||f>i+a)&&r.scrollIntoView(!1),s(p)}else s(e);else s(null)}),[o,l,s]),p=(0,r.useCallback)((function(){f(0,1)}),[f]),d=(0,r.useCallback)((function(){f(o.length-1,-1)}),[f,o]),y=(0,r.useCallback)((function(e){i(o[l],e)}),[o,l,i]),h=(0,r.useCallback)((function(e){var n={ArrowDown:p,ArrowUp:d,Enter:y}[e.key];n&&(e.preventDefault(),e.stopPropagation(),n(e))}),[p,d,y]);return(0,r.useEffect)((function(){return document.body.addEventListener("keydown",h),function(){return document.body.removeEventListener("keydown",h)}}),[u,h]),(0,O.jsx)("ul",{className:sr.results,ref:u,children:o.map((function(e,n){return(0,O.jsx)("li",{className:l===n?sr.highlighted:"",title:e.description,"data-result-index":n,onClick:function(n){return i(e,n)},onDoubleClick:function(n){return i(e,n)},onMouseOver:function(){return f(n)},children:a(e,n)},n)}))})}fr.propTypes={results:E().array.isRequired,onSelect:E().func.isRequired,renderResult:E().func.isRequired};var pr=fr;function dr(e){return dr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},dr(e)}function yr(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function hr(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?yr(Object(t),!0).forEach((function(n){mr(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):yr(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function mr(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==dr(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==dr(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===dr(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function br(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function Ar(e){e&&(e.focus(),e.select())}var vr=function(e){var n,t,o=e.choices,i=e.searchKey,a=e.renderResults,c=e.initialQuery,l=!o.length||o.length>10,s=(n=(0,r.useState)(c),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||function(e,n){if(e){if("string"==typeof e)return br(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?br(e,n):void 0}}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),u=s[0],f=s[1],p=(0,r.useMemo)((function(){if(!u||!l)return o;var e={key:i,limit:30};return ir().go(u,o,e).map((function(e){return hr(hr({},e.obj),{},{search:e})}))}),[l,u,o,i]),d=(0,r.useCallback)((function(e){f(e.target.value)}),[f]);return(0,O.jsxs)(O.Fragment,{children:[l&&(0,O.jsxs)("div",{className:sr.searchWrapper,children:[(0,O.jsx)("input",{ref:Ar,type:"text",value:u,onChange:d}),(0,O.jsx)(L,{className:sr.searchIcon,name:"search"}),(0,O.jsx)(L,{className:sr.clearSearchIcon,name:"times",onClick:function(){return f("")}})]}),a(p)]})};vr.propTypes={choices:E().array.isRequired,searchKey:E().string.isRequired,initialQuery:E().string.isRequired,renderResults:E().func.isRequired},vr.defaultProps={initialQuery:""};var gr=vr;function xr(e){var n=e.choices,t=e.prompt,o=e.onSelect,i=(0,r.useMemo)((function(){return n.map((function(e){return{value:e}}))}),[n]),a=(0,r.useCallback)((function(e){var n=e.search?(0,O.jsx)("span",{dangerouslySetInnerHTML:{__html:ir().highlight(e.search)}}):(0,O.jsx)("span",{children:e.value});return(0,O.jsxs)(O.Fragment,{children:[n,e.description&&(0,O.jsx)("p",{className:sr.description,children:e.description})]})}),[]);return(0,O.jsxs)("div",{className:sr.dialog,children:[(0,O.jsx)("p",{children:t||"Select"}),(0,O.jsx)(gr,{choices:i,initialQuery:"",searchKey:"value",renderResults:function(e){return e&&(0,O.jsx)(pr,{results:e,onSelect:function(e){return o(e.value)},renderResult:a})}})]})}xr.propTypes={choices:E().arrayOf(E().stirng).isRequired,prompt:E().string,onSelect:E().func.isRequired};var jr=xr;function Cr(e){return Cr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Cr(e)}function wr(e){return function(e){if(Array.isArray(e))return Or(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||Er(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Er(e,n){if(e){if("string"==typeof e)return Or(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Or(e,n):void 0}}function Or(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function kr(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Sr(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?kr(Object(t),!0).forEach((function(n){Br(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):kr(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Br(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Cr(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Cr(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Cr(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Pr(e){var n=e.prop,t=void 0===n?{}:n,o=e.schema,i=e.onUpdate,a=o.enum,c=t.parsed,l=(0,r.useCallback)((function(e){i(Sr(Sr({},t),{},{parsed:a[e.target.value],useRaw:!1}))}),[t,a,i]);return(0,O.jsx)("select",{className:Xt.propertyValue,onChange:l,value:a.indexOf(c),children:a.map((function(e,n){return(0,O.jsx)("option",{value:n,children:e},n)}))})}function Ir(e){var n=e.prop,t=void 0===n?{}:n,o=e.schema,i=e.onUpdate,a=function(e){var n=(0,r.useContext)(Se);return(0,r.useMemo)((function(){if(!e.choices)return[];if(Array.isArray(e.choices))return e.choices;if(!e.choices.$source)throw new Error("Expected schema.choices.$source");var t=n[e.choices.$source];return e.choices.$key?Q()(t,e.choices.$key):t}),[n,e.choices])}(o),c=t.parsed,l=void 0===c?[]:c,s=(0,r.useCallback)((function(e){i(Sr(Sr({},t),{},{useRaw:!1,parsed:e}))}),[t,i]),u=a.length>20?Lr:Tr;return(0,O.jsx)(u,{selected:l,choices:a,onUpdate:s})}function Tr(e){var n=e.selected,t=e.choices,o=e.onUpdate,i=(0,r.useCallback)((function(e){o(n.includes(e)?n.filter((function(n){return n!==e})):[].concat(wr(n),[e]))}),[n,o]);return(0,O.jsx)("ol",{className:Xt.propertyMultiSelect,children:t.map((function(e,t){return(0,O.jsx)("li",{children:(0,O.jsxs)("label",{children:[(0,O.jsx)("input",{type:"checkbox",checked:n.includes(e),onChange:function(n){return i(e)}}),e]})},t)}))})}function Lr(e){var n,t,o=e.selected,i=e.choices,a=e.onUpdate,c=(n=(0,r.useState)(!1),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||Er(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),l=c[0],s=c[1],u=(0,r.useCallback)((function(e){a([].concat(wr(o),[e])),s(!1)}),[s,o,a]),f=(0,r.useCallback)((function(e){a(o.filter((function(n){return n!==e})))}),[o,a]);return(0,O.jsxs)(O.Fragment,{children:[(0,O.jsx)("ul",{className:Xt.propertyMultiSelectChips,children:o.map((function(e,n){return(0,O.jsx)("li",{children:(0,O.jsxs)("span",{className:Xt.behaviorBind,children:[e," ",(0,O.jsx)(L,{name:"times",className:Xt.phandleRemove,onClick:function(){return f(e)}})]})},n)}))}),(0,O.jsxs)(Ge,{secondary:!0,onClick:function(){return s(!0)},children:[(0,O.jsx)(L,{name:"plus"})," Add"]}),l&&(0,O.jsx)(fn,{onDismiss:function(){return s(!1)},children:(0,O.jsx)(jr,{choices:i,onSelect:u})})]})}function Dr(e){var n=(0,r.useContext)(j).getSearchTargets,t=e.param,o=e.prompt,i=e.onSelect,a=(0,r.useMemo)((function(){return n(t)}),[n,t]);return(0,O.jsxs)("div",{className:sr.dialog,children:[(0,O.jsx)("p",{children:o}),(0,O.jsx)(pr,{results:a,onSelect:i,renderResult:function(e){return e.code}})]})}Dr.propTypes={value:E().any.isRequired,param:E().object.isRequired,prompt:E().string.isRequired,onSelect:E().func.isRequired},Dr.defaultProps={value:""};var Rr=Dr,Nr=E().oneOfType([E().oneOf(["code","layer","command"]),E().shape({type:E().oneOf(["placeholder"])}),E().shape({enum:E().array,raw:E().bool,name:E().string.isRequired,type:E().string.isRequired})]),_r=E().arrayOf(Nr),Mr=E().oneOfType([E().string,E().number]),Yr=E().shape({params:_r,code:Mr.isRequired,description:E().string,symbol:E().string,faIcon:E().string}),qr={value:Mr,source:Yr};qr.params=E().arrayOf(E().shape(qr));var Zr=E().shape(qr),Kr=Zr;function Ur(e){var n=e.prompt,t=e.searchKey,o=e.node,i=e.param,a=e.behaviour,c=e.context,l=e.onSelect,s=(0,r.useContext)(j).getSearchTargets,u=(0,r.useCallback)((function(e){var n=e.search?(0,O.jsx)("span",{dangerouslySetInnerHTML:{__html:ir().highlight(e.search)}}):(0,O.jsx)("span",{children:e.code});return(0,O.jsxs)(O.Fragment,{children:[n,e.description&&(0,O.jsx)("p",{className:sr.description,children:e.description})]})}),[]),f=(0,r.useMemo)((function(){return s(i,a.code,c)}),[s,i,a,c]);return(0,O.jsxs)("div",{className:sr.dialog,children:[(0,O.jsx)("p",{children:n}),(0,O.jsx)(gr,{choices:f,initialQuery:o.value||"",searchKey:t,renderResults:function(e){return e&&(0,O.jsx)(pr,{results:e,onSelect:l,renderResult:u})}})]})}E().arrayOf(Zr),Ur.propTypes={node:Kr.isRequired,param:E().oneOfType([E().string,E().shape({enum:E().array,raw:E().bool,type:E().string})]).isRequired,prompt:E().string.isRequired,searchKey:E().string.isRequired,behaviour:E().object.isRequired,context:E().string.isRequired,onSelect:E().func.isRequired};var Gr=Ur,zr=t(93565);function Wr(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function Fr(e){var n,t,o=e.node,i=e.onSelect,a=(n=(0,r.useState)({h:Number(o.params[0].value),s:Number(o.params[1].value)/100,l:Number(o.params[2].value)/100}),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||function(e,n){if(e){if("string"==typeof e)return Wr(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Wr(e,n):void 0}}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),c=a[0],l=a[1],s=(0,r.useCallback)((function(e){var n=e.hsl;l(n)}),[l]),u=(0,r.useCallback)((function(){i([{value:Math.round(c.h)},{value:Math.round(100*c.s)},{value:Math.round(100*c.l)}])}),[c,i]);return(0,O.jsxs)("div",{children:[(0,O.jsx)("p",{children:"Select colour"}),(0,O.jsx)(zr.AI,{color:c,disableAlpha:!0,onChangeComplete:s}),(0,O.jsx)("p",{style:{textAlign:"center"},children:(0,O.jsx)(Ge,{onClick:u,children:"Confirm"})})]})}Fr.propTypes={value:E().any.isRequired,prompt:E().string.isRequired,param:E().oneOfType([E().shape({enum:E().array,raw:E().bool,type:E().string})]).isRequired,onSelect:E().func.isRequired},Fr.defaultProps={value:""};var Xr=Fr;function Vr(e,n){if(e){if("string"==typeof e)return Hr(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Hr(e,n):void 0}}function Qr(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}function Hr(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function Jr(e){return e.params.length>0?[e].concat(function(e){if(Array.isArray(e))return Hr(e)}(n=Jr(e.params[0]))||Qr(n)||Vr(n)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()):[e];var n}function $r(e){var n,t=function(e){if(Array.isArray(e))return e}(n=e)||Qr(n)||Vr(n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),r=t[0],o=t.slice(1);return{value:r,params:0===o.length?[]:[$r(o)]}}var eo=t(14409),no={};no.styleTagTransform=b(),no.setAttributes=d(),no.insert=f().bind(null,"head"),no.domAPI=s(),no.insertStyleElement=h(),c()(eo.Z,no);var to=eo.Z&&eo.Z.locals?eo.Z.locals:void 0;function ro(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var oo=["LSHFT","LALT","LCTRL","LGUI"],io=["RSHFT","RALT","RCTRL","RGUI"];function ao(e){var n=e.selected,t=e.row,r=e.onSelect;return(0,O.jsx)("ul",{className:to.modifiers,children:t.map((function(e,t){return(0,O.jsx)("li",{className:n.includes(e)?to.selected:"",onClick:function(){return r(e)},children:e},t)}))})}function co(e){var n=e.selected,t=e.onChange;function r(e){var r;t(n.includes(e)?n.filter((function(n){return n!==e})):[].concat(function(e){if(Array.isArray(e))return ro(e)}(r=n)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(r)||function(e,n){if(e){if("string"==typeof e)return ro(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?ro(e,n):void 0}}(r)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),[e]))}return(0,O.jsxs)(O.Fragment,{children:[(0,O.jsx)(ao,{row:oo,selected:n,onSelect:r}),(0,O.jsx)(ao,{row:io,selected:n,onSelect:r})]})}co.propTypes={selected:E().arrayOf(E().string)};var lo=co;function so(){return(0,O.jsx)("span",{children:"⦸"})}function uo(e){return e&&"(".concat(e.code,") ").concat(e.description)}function fo(e){var n,t=e&&((null==e?void 0:e.symbol)||(null==e||null===(n=e.code)||void 0===n?void 0:n.toString()));return(null==e?void 0:e.faIcon)&&(0,O.jsx)(L,{name:e.faIcon})||t||(0,O.jsx)(so,{})}function po(e){var n=e.node,t=e.onSelect,o=n.value,i=n.source,a=n._isPlaceholder,c=uo(i),l=(0,r.useCallback)((function(e){e.stopPropagation(),t({node:n})}),[n,t]);return(0,O.jsx)("span",{className:et()([rt.code,(void 0===o||a)&&rt.missingValue]).join(" "),title:c,onClick:l,children:fo(i)})}po.propTypes={node:Kr.isRequired,onSelect:E().func.isRequired};var yo=po;function ho(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var mo=function(e){var n,t=e.node,o=e.onSelect,i=(0,r.useCallback)((function(e){e.stopPropagation(),o({node:t,type:"tree"})}),[t,o]),a=(0,r.useMemo)((function(){return Q()(Jr(t),"source")}),[t]),c=(0,r.useMemo)((function(){return a.map(fo).map((function(e,n){return(0,O.jsx)(r.Fragment,{children:e},n)})).reduce((function(e,n){return 0===e.length?[n]:[].concat(function(e){if(Array.isArray(e))return ho(e)}(t=e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(t)||function(e,n){if(e){if("string"==typeof e)return ho(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?ho(e,n):void 0}}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),[" ",n]);var t}),[])}),[a]),l=(0,r.useMemo)((function(){return a.map(uo).join(" + ")}),[a]),s=void 0===(null===(n=t.source)||void 0===n?void 0:n.code)||void 0===t.value||t._isPlaceholder;return(0,O.jsx)("span",{className:et()([rt.code,s&&rt.missingValue]).join(" "),title:l,onClick:i,children:c})};function bo(e,n){var t=G()(e,"[0]",{}),r=X()(n.commands,"code");return[].concat(n.params||[],"command"===G()(n,"params[0]")?G()(r[t.value],"additionalParams",[]):[])}function Ao(e){return Ao="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Ao(e)}function vo(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function go(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?vo(Object(t),!0).forEach((function(n){xo(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):vo(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function xo(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Ao(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Ao(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Ao(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function jo(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(e,n)||function(e,n){if(e){if("string"==typeof e)return Co(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Co(e,n):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Co(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function wo(e){var n=[];return function e(t){var r=t.params||[];n.push(t),r.forEach(e)}(e),n}function Eo(e,n){var t=jo(e.params,1)[0],r=G()(t,"source.symbol",G()(t,"value","")),o=!G()(t,"source.faIcon")&&r.length>4,i=n.length>1,a=G()(t,"params",[]).length>0;return o||i||a}function Oo(e){var n={layer:"Select layer",mod:"Select modifier",behaviour:"Select behaviour",command:"Select command",keycode:"Select key code"};return e.name?"Select ".concat(e.name):n[e]||n.keycode}function ko(e,n,t){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"none",o=arguments.length>4?arguments[4]:void 0,i=e,a=G()(t.behavioursByContext[r],i,{}),c=bo(n,a),l=X()(a.commands,"code");function s(e,n){if(!e)return{value:void 0,slot:n,params:[]};var r=e.value,i=e.params,a=e._isPlaceholder,c=function(e,n){var r;return"command"===n?l[e]:n.raw||n.enum||"placeholder"===n.type?{code:e}:null==t||null===(r=t[n])||void 0===r?void 0:r[e]}(r,n);return{value:r,_isPlaceholder:a,slot:n,source:go(go({},c),{},{symbol:G()(o,[null==c?void 0:c.name,"symbol"],null==c?void 0:c.symbol),faIcon:G()(o,[null==c?void 0:c.name,"faIcon"],null==c?void 0:c.faIcon)}),params:G()(c,"params",[]).map((function(e,n){return s(i[n],e)}))}}return{value:e,slot:"behaviour",source:a,params:c.map((function(e,t){return s(n[t],e)}))}}function So(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(e,n)||Bo(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Bo(e,n){if(e){if("string"==typeof e)return Po(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Po(e,n):void 0}}function Po(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var Io={LSHFT:"LS",LCTRL:"LC",LALT:"LA",LGUI:"LG",RSHFT:"RS",RCTRL:"RC",RALT:"RA",RGUI:"RG"};function To(e){var n=e.search?(0,O.jsx)("span",{dangerouslySetInnerHTML:{__html:ir().highlight(e.search)}}):(0,O.jsx)("span",{children:e.code});return(0,O.jsxs)(O.Fragment,{children:[n,(0,O.jsx)("p",{className:sr.description,children:e.description})]})}function Lo(e){var n=e.node,t=e.onSelect,o=e.behaviour,i=(0,r.useContext)(j),a=i.getSearchTargets,c=i.sources,l=i.mergedGlyphs,s=(0,r.useMemo)((function(){return Q()(Jr(n),"source")}),[n]),u=1===s.length?[]:s.slice(0,-1),f=So((0,r.useState)(Q()(u,"name")),2),p=f[0],d=f[1],y=So((0,r.useState)(s.at(-1)),2),h=y[0],m=y[1],b=(0,r.useMemo)((function(){return a("code",o.code).filter((function(e){return 0===e.params.length}))}),[a,o]),A=ko("&kp",[{value:null==h?void 0:h.code,params:null==h?void 0:h.params}],c,void 0,l),v=(0,r.useCallback)((function(e,n){var r,o=n.map((function(e){return Io[e]})),i=$r(et()([].concat(function(e){if(Array.isArray(e))return Po(e)}(r=o)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(r)||Bo(r)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),[null==e?void 0:e.code])));t(i)}),[t]),g=(0,r.useCallback)((function(e,n){"dblclick"!==n.type?m(e):v(e,p)}),[v,p,m]);return(0,O.jsxs)("div",{className:sr.dialog,children:[(0,O.jsxs)("div",{style:{display:"flex",gap:"10px"},children:[(0,O.jsxs)("div",{children:[(0,O.jsx)("p",{children:"Keycode"}),(0,O.jsx)(st,{className:to.previewKeycode,selectable:!1,children:(0,O.jsx)(mo,{node:A.params[0],onSelect:function(){}})})]}),(0,O.jsxs)("div",{children:[(0,O.jsx)("p",{children:"Modifiers"}),(0,O.jsx)(lo,{selected:p,onChange:d})]})]}),(0,O.jsx)("p",{children:"Available Keycodes"}),(0,O.jsx)(gr,{choices:b,initialQuery:null==h?void 0:h.code,searchKey:"code",renderResults:function(e){return e&&(0,O.jsx)(pr,{results:e,onSelect:g,renderResult:To})}}),(0,O.jsx)(Pt,{className:to.quickCloseTip,children:"Double-click to select and close the dialog"}),(0,O.jsxs)("p",{style:{textAlign:"center"},children:[(0,O.jsx)(Ge,{onClick:function(){v(h,p)},children:"Confirm"}),(0,O.jsx)(Ge,{onClick:function(){t(n)},secondary:!0,children:"Cancel"})]})]})}Lo.propTypes={node:Kr.isRequired,param:E().oneOfType([E().string,E().shape({enum:E().array,raw:E().bool,type:E().string})]).isRequired,prompt:E().string.isRequired,searchKey:E().string.isRequired,behaviour:E().object.isRequired,context:E().string.isRequired,onSelect:E().func.isRequired};var Do=Lo;function Ro(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function No(e){e&&(e.focus(),e.select())}function _o(e){var n,t,o=e.value,i=e.param,a=e.onSelect,c=(n=(0,r.useState)(o),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||function(e,n){if(e){if("string"==typeof e)return Ro(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Ro(e,n):void 0}}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),l=c[0],s=c[1],u=(0,r.useCallback)((function(e){"Enter"===e.key&&a({code:l})}),[l,a]),f=(0,r.useCallback)((function(e){var n=e.target.value;"number"===i.type&&(n=Number(n),Number.isNaN(n))||s(n)}),[i,s]);return(0,O.jsxs)("div",{className:sr.dialog,children:[(0,O.jsx)("p",{children:"Enter raw value"}),(0,O.jsx)("input",{ref:No,type:"text",value:l,onChange:f,onKeyDown:u})]})}_o.propTypes={value:E().any.isRequired,prompt:E().string.isRequired,param:E().oneOfType([E().shape({enum:E().array,raw:E().bool,type:E().string})]).isRequired,onSelect:E().func.isRequired},_o.defaultProps={value:""};var Mo=_o,Yo=t(98913),qo=t.n(Yo),Zo=t(97168);function Ko(e,n){var t="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!t){if(Array.isArray(e)||(t=function(e,n){if(e){if("string"==typeof e)return Uo(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Uo(e,n):void 0}}(e))||n&&e&&"number"==typeof e.length){t&&(e=t);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,c=!1;return{s:function(){t=t.call(e)},n:function(){var e=t.next();return a=e.done,e},e:function(e){c=!0,i=e},f:function(){try{a||null==t.return||t.return()}finally{if(c)throw i}}}}function Uo(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var Go="&trans",zo=function(e){return e.keyboard.keymap.layers},Wo=(0,Zo.oM)({name:"layers",initialState:[],reducers:{createLayer:function(e,n){e.push({name:"Layer #".concat(e.length),bindings:qo()(n.payload.bindingCount,(function(){return function(){return{value:arguments.length>0&&void 0!==arguments[0]?arguments[0]:Go,params:[]}}()}))})},updateLayerMetadata:function(e,n){var t=n.payload.layerIndex;Object.assign(e[t],Sn()(n.payload,["name","label"]))},renameLayer:function(e,n){e[n.payload.index].name=n.payload.name},deleteLayer:function(e,n){e.splice(n.payload.index,1)},updateKeyBinding:function(e,n){e[n.payload.layerIndex].bindings[n.payload.bindIndex]=n.payload.binding},updateSensorBindings:function(e,n){e[n.payload.layerIndex].sensorBindings[n.payload.sensorIndex]=n.payload.bindings},rebindTransparentToKeyPress:function(e,n){var t,r=Ko(e[n.payload.layerIndex].bindings);try{for(r.s();!(t=r.n()).done;){var o=t.value;"&trans"===o.value&&(o.value="&kp",o.params=[])}}catch(e){r.e(e)}finally{r.f()}},rebindTransparentToNone:function(e,n){var t,r=Ko(e[n.payload.layerIndex].bindings);try{for(r.s();!(t=r.n()).done;){var o=t.value;"&trans"===o.value&&(o.value="&none",o.params=[])}}catch(e){r.e(e)}finally{r.f()}},rebindNoneToKeypress:function(e,n){var t,r=Ko(e[n.payload.layerIndex].bindings);try{for(r.s();!(t=r.n()).done;){var o=t.value;"&none"===o.value&&(o.value="&kp",o.params=[])}}catch(e){r.e(e)}finally{r.f()}},rebindNoneToTransparent:function(e,n){var t,r=Ko(e[n.payload.layerIndex].bindings);try{for(r.s();!(t=r.n()).done;){var o=t.value;"&none"===o.value&&(o.value="&trans",o.params=[])}}catch(e){r.e(e)}finally{r.f()}},rebindEmptyKeypressToTransparent:function(e,n){var t,r=Ko(e[n.payload.layerIndex].bindings);try{for(r.s();!(t=r.n()).done;){var o,i=t.value;"&kp"!==i.value||null!==(o=i.params[0])&&void 0!==o&&o.value||(i.value="&trans",i.params=[])}}catch(e){r.e(e)}finally{r.f()}},rebindEmptyKeypressToNone:function(e,n){var t,r=Ko(e[n.payload.layerIndex].bindings);try{for(r.s();!(t=r.n()).done;){var o,i=t.value;"&kp"!==i.value||null!==(o=i.params[0])&&void 0!==o&&o.value||(i.value="&none",i.params=[])}}catch(e){r.e(e)}finally{r.f()}}}}),Fo=Wo.actions,Xo=Fo.createLayer,Vo=Fo.renameLayer,Qo=Fo.deleteLayer,Ho=Fo.updateLayerMetadata,Jo=Fo.updateKeyBinding,$o=Fo.updateSensorBindings,ei=Fo.rebindTransparentToKeyPress,ni=Fo.rebindTransparentToNone,ti=Fo.rebindNoneToKeypress,ri=Fo.rebindNoneToTransparent,oi=Fo.rebindEmptyKeypressToTransparent,ii=Fo.rebindEmptyKeypressToNone,ai=Wo.reducer;function ci(e){var n=e.onSelect,t=(0,i.v9)(zo),o=(0,r.useMemo)((function(){return t.map((function(e,n){return{code:n,description:e.name||"Layer ".concat(n)}}))}),[t]);return(0,O.jsxs)("div",{className:sr.dialog,children:[(0,O.jsx)("p",{children:"Select layer"}),(0,O.jsx)(pr,{results:o,onSelect:n,renderResult:function(e){return(0,O.jsxs)(O.Fragment,{children:[e.code,e.description&&(0,O.jsx)("p",{className:sr.description,children:e.description})]})}})]})}ci.propTypes={value:E().string.isRequired,behaviour:E().object.isRequired,onSelect:E().func.isRequired},ci.defaultProps={value:""};var li=ci;function si(e){return si="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},si(e)}function ui(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function fi(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?ui(Object(t),!0).forEach((function(n){pi(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ui(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function pi(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==si(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==si(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===si(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function di(e){var n=e.node,t=e.type,o=e.onCancel,i=e.onSelect,a=(0,q.pick)(e,["node","value","prompt","param","node","behaviour","context","searchKey"]),c=(0,r.useMemo)((function(){var e;return"params"===t&&"hsb-color-picker"===(null===(e=n.source)||void 0===e?void 0:e.helper)?Xr:n.slot.raw||"placeholder"===n.slot.type?Mo:n.slot.enum?Rr:"code"===n.slot?Do:"layer"===n.slot?li:Gr}),[n,t]);return(0,O.jsx)(fn,{onDismiss:o,children:(0,O.jsx)(c,fi(fi({},a),{},{param:n.slot,onSelect:i}))})}di.propTypes={type:E().string.isRequired,node:Kr.isRequired,behaviour:E().object.isRequired,prompt:E().string.isRequired,searchKey:E().string.isRequired,searchThreshold:E().number,onCancel:E().func.isRequired,onSelect:E().func.isRequired},di.defaultProps={type:"value",value:"",freeForm:!1,searchThreshold:10};var yi=di;function hi(e){return function(e){if(Array.isArray(e))return mi(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,n){if(e){if("string"==typeof e)return mi(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?mi(e,n):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function mi(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var bi=function(e,n){return[].concat(hi(e.slice(0,n)),hi(e.slice(n+1)))},Ai=function(e,n,t){return[].concat(hi(e.slice(0,n)),[t],hi(e.slice(n+1)))};function vi(e){return vi="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},vi(e)}function gi(e){return function(e){if(Array.isArray(e))return Ei(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||wi(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function xi(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function ji(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?xi(Object(t),!0).forEach((function(n){Ci(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):xi(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Ci(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==vi(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==vi(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===vi(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function wi(e,n){if(e){if("string"==typeof e)return Ei(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Ei(e,n):void 0}}function Ei(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function Oi(e){var n,t,o=e.prop,i=void 0===o?{}:o,a=e.schema,c=void 0===a?{}:a,l=e.onUpdate,s=i.parsed,u=void 0===s?[]:s,f=c.length,p=(n=(0,r.useState)(null),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||wi(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),d=p[0],y=p[1],h=(0,r.useCallback)((function(){l(ji(ji({},i),{},{useRaw:!1,parsed:[].concat(gi(u),[""])})),y(u.length)}),[i,u,l,y]),m=(0,r.useCallback)((function(e){l(ji(ji({},i),{},{useRaw:!1,parsed:Ai(u,d,e.code)})),y(null)}),[i,u,d,l]),b=(0,r.useCallback)((function(e){l(ji(ji({},i),{},{useRaw:!1,parsed:bi(u,e)}))}),[i,u,l]);return(0,O.jsxs)("div",{children:[(0,O.jsx)("ol",{className:(0,q.compact)([Xt.propertyPhandleSelect,1===f&&Xt.propertyPhandleSingleton]).join(" "),children:u.map((function(e,n){return(0,O.jsx)("li",{children:(0,O.jsxs)("span",{className:Xt.behaviorBind,onClick:function(){return y(n)},children:[e,1!==f&&(0,O.jsx)(L,{name:"times",className:Xt.phandleRemove,onClick:function(e){e.stopPropagation(),b(n)}})]})},n)}))}),null!==d&&(0,O.jsx)(yi,{node:{value:u[d],params:[],slot:"behaviour"},type:"value",context:"none",behaviour:{code:u[d]},prompt:"Select Behavior",searchKey:"code",onSelect:m,onCancel:function(){return y(null)}}),f&&u.length<f&&(0,O.jsxs)(Ge,{secondary:!0,onClick:h,children:[(0,O.jsx)(L,{name:"plus"})," Add Behavior"]})]})}function ki(e){return ki="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},ki(e)}function Si(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Bi(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Si(Object(t),!0).forEach((function(n){Pi(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Si(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Pi(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==ki(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==ki(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===ki(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Ii(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var Ti={display:"inline-block",cursor:"pointer",verticalAlign:"text-top",border:"0.75px solid var(--key-color-base)",borderRadius:"3px"},Li={display:"flex",justifyContent:"center",alignItems:"center",width:"10px",height:"10px",margin:"1px",borderRadius:"2px"},Di=function(e){var n,t,o=e.node,i=e.onSelect,a=(n=o.params,t=3,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||function(e,n){if(e){if("string"==typeof e)return Ii(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Ii(e,n):void 0}}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),c=a[0],l=a[1],s=a[2],u=(0,r.useCallback)((function(){i({node:o,type:"params"})}),[o,i]),f=(0,r.useMemo)((function(){return[c,l,s].some((function(e){return void 0===e.value}))}),[c,l,s]),p="hsl(".concat(c.value,", ").concat(l.value,"%, ").concat(s.value,"%)");return(0,O.jsxs)(O.Fragment,{children:[(0,O.jsx)(yo,{node:o,onSelect:i}),f?(0,O.jsx)(yo,{node:{},onSelect:u}):(0,O.jsx)("div",{onClick:u,style:Ti,children:(0,O.jsx)("div",{className:f?rt.missingValue:null,style:Bi(Bi({},Li),{},{backgroundColor:p})})})]})};function Ri(e){return Ri="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Ri(e)}function Ni(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function _i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Ni(Object(t),!0).forEach((function(n){Mi(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Ni(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Mi(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Ri(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Ri(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Ri(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Yi(e){var n=e.node,t=e.onSelect;return(0,O.jsxs)(O.Fragment,{children:[(0,O.jsx)(yo,{node:n,onSelect:t}),G()(n,"source.params.length")>0?(0,O.jsx)(Zi,{slots:n.source.params,params:n.params,onSelect:t}):null]})}function qi(e){var n=e.node,t=e.onSelect,o=e.slot,i=(0,r.useMemo)((function(){var e;return"hsb-color-picker"===(null===(e=n.source)||void 0===e?void 0:e.helper)?Di:"code"===o?mo:Yi}),[n,o]);return(0,O.jsx)("span",{className:rt.param,children:(0,O.jsx)(i,{node:n,onSelect:t})})}function Zi(e){var n=e.slots,t=e.params,r=e.onSelect,o=e.root,i=e.wrapperProps;return(0,O.jsx)("span",_i(_i({className:rt.params,"data-is-root":!!o,"data-param-count":t.length},i),{},{children:n.map((function(e,n){return"placeholder"!==e.type&&(0,O.jsx)(qi,{slot:e,node:t[n],onSelect:r},n)}))}))}Zi.propTypes={slots:E().arrayOf(Nr).isRequired,params:E().arrayOf(Kr).isRequired,source:Yr,onSelect:E().func.isRequired};var Ki=Zi;function Ui(e,n){if(e){if("string"==typeof e)return Gi(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Gi(e,n):void 0}}function Gi(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function zi(e){var n,t,o,i,a,c,l=(0,r.useContext)(j),s=l.sources,u=l.mergedGlyphs,f=e.context,p=void 0===f?"none":f,d=e.hideBehaviour,y=e.value,h=e.params,m=e.onUpdate,b=(a=(0,r.useState)(null),c=2,function(e){if(Array.isArray(e))return e}(a)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(a,c)||Ui(a,c)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),A=b[0],v=b[1],g=y,x=G()(s.behavioursByContext[p],g,{}),C=bo(h,x),w=ko(y,h,s,p,u),E=wo(w),k=function(e){if(!e[0].source.code)return!0;var n,t=function(e,n){var t="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!t){if(Array.isArray(e)||(t=Ui(e))){t&&(e=t);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,c=!1;return{s:function(){t=t.call(e)},n:function(){var e=t.next();return a=e.done,e},e:function(e){c=!0,i=e},f:function(){try{a||null==t.return||t.return()}finally{if(c)throw i}}}}(e);try{for(t.s();!(n=t.n()).done;){var r,o=n.value;if(((null===(r=o.source)||void 0===r?void 0:r.params)||[]).length>o.params.length)return!0;if(o.params.some((function(e){return void 0===e.value||""===e.value||void 0===e.source})))return!0}}catch(e){t.e(e)}finally{t.f()}}(E);function S(e){var n=e.node,t=e.type;v({node:n,type:void 0===t?"value":t,nodeIndex:E.indexOf(n)})}return(0,O.jsxs)(O.Fragment,{children:[x&&!d?(0,O.jsx)("span",{className:(0,q.compact)([rt["behaviour-binding"],!x.code&&rt.missingValue]).join(" "),onClick:function(){return S({node:w})},children:x.code||"⦸"}):null,k&&(0,O.jsx)(L,{name:"warning",className:rt.missing,title:"Binding has missing value(s)"}),(0,O.jsx)(Ki,{root:!0,slots:C,params:w.params,onSelect:S,wrapperProps:{"data-simple":(n=w,t=jo(n.params,1)[0],o=G()(t,"source.symbol",G()(t,"source.code","")),i=!!G()(t,"source.faIcon")||1===o.length,1===n.params.length&&i),"data-long":Eo(w,C)}}),A&&(0,O.jsx)(yi,{node:A.node,type:A.type,behaviour:x,context:p,prompt:Oo(A.node.slot),searchKey:"code",onSelect:function(e){if("tree"===A.type)return function(e){var n=e.value,t=e.params,r=A.nodeIndex,o=J()(w),i=wo(o),a=i[r];a.value=n,a.params=t,delete a._isPlaceholder,i.forEach((function(e){delete e.source})),v(null),m(Sn()(o,["value","params"]))}(e);if("params"===A.type)return function(e){var n=A.nodeIndex,t=J()(w),r=wo(t);r[n].params=e,r.forEach((function(e){delete e.source})),v(null),m(Sn()(t,["value","params"]))}(e);var n=A.node,t=A.nodeIndex,r=J()(w),o=wo(r),i=o[t];if(n.slot.raw)"number"===n.slot.type&&(e.code=Number(e.code));else if("command"===n.slot){var a,c,l,s=(null===(a=i.source)||void 0===a||null===(c=a.additionalParams)||void 0===c?void 0:c.length)||0;if(((null===(l=e.additionalParams)||void 0===l?void 0:l.length)||0)<s){var u=o[0];u.params.splice(1,u.params.length-1),o.splice(2,o.length-1)}}i.value=e.code,delete i._isPlaceholder,i.params=((null==e?void 0:e.params)||[]).reduce((function(n,t,r){var o,a;return(null===(o=i.source)||void 0===o||null===(a=o.params)||void 0===a?void 0:a[r])===e.params[r]?n.push(i.params[r]):n.push({value:0,_isPlaceholder:!0}),n}),[]),o.forEach((function(e){delete e.source})),v(null),m(Sn()(r,["value","params","_isPlaceholder"]))},onCancel:function(){return v(null)}})]})}zi.propTypes={context:E().string,hideBehaviour:E().bool.isRequired,value:Mr.isRequired,params:E().arrayOf(Zr),onUpdate:E().func.isRequired},zi.defaultProps={hideBehaviour:!1};var Wi=zi;function Fi(e){return Fi="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Fi(e)}function Xi(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Vi(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Xi(Object(t),!0).forEach((function(n){Qi(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Xi(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Qi(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Fi(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Fi(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Fi(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Hi(e){var n=e.context,t=e.value,r=e.params,o=e.keyWrapperProps,i=void 0===o?{}:o,a=e.onUpdate;return(0,O.jsx)(st,Vi(Vi({},i),{},{children:(0,O.jsx)(Wi,{context:n,value:t,params:r,onUpdate:a})}))}Hi.propTypes={label:E().string,value:Mr.isRequired,params:E().arrayOf(Zr),onUpdate:E().func.isRequired};var Ji=Hi;function $i(e){return $i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},$i(e)}function ea(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function na(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function ta(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?na(Object(t),!0).forEach((function(n){ra(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):na(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function ra(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==$i(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==$i(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===$i(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function oa(e){var n=e.prop,t=void 0===n?{}:n,o=e.onUpdate,i=t.parsed,a=void 0===i?[]:i,c=(0,r.useCallback)((function(){var e;o(ta(ta({},t),{},{useRaw:!1,parsed:[].concat((e=a,function(e){if(Array.isArray(e))return ea(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,n){if(e){if("string"==typeof e)return ea(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?ea(e,n):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),[{value:"",params:[]}])}))}),[t,a,o]),l=(0,r.useCallback)((function(e,n){o(ta(ta({},t),{},{useRaw:!1,parsed:Ai(a,n,e)}))}),[t,a,o]),s=(0,r.useCallback)((function(e){o(ta(ta({},t),{},{useRaw:!1,parsed:bi(a,e)}))}),[t,a,o]);return(0,O.jsxs)(O.Fragment,{children:[(0,O.jsx)("ol",{className:Xt.propertyBindingsValue,children:a.map((function(e,n){return(0,O.jsx)("li",{children:(0,O.jsxs)(st,{children:[(0,O.jsx)(Ji,{context:"none",value:e.value,params:e.params,onUpdate:function(e){return l(e,n)}}),(0,O.jsx)("div",{className:Xt.actions,children:(0,O.jsx)(L,{name:"trash",className:Xt.deleteBind,onClick:function(e){e.stopPropagation(),s(n)}})})]})},n)}))}),(0,O.jsxs)(Ge,{secondary:!0,onClick:c,children:[(0,O.jsx)(L,{name:"plus"})," Add binding"]})]})}function ia(e){return ia="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},ia(e)}function aa(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function ca(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?aa(Object(t),!0).forEach((function(n){la(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):aa(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function la(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==ia(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==ia(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===ia(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function sa(e){var n=e.schema,t=void 0===n?{}:n,r=t.type;if("const"in t)return(0,O.jsx)(er,ca({},e));if("enum"in t)return(0,O.jsx)(Pr,ca({},e));if("key-position-picker"===t.helper){var o=e.prop,i=void 0===o?{}:o,a=e.onUpdate;return(0,O.jsx)(zt,{value:i.parsed||[],onUpdate:function(e){a(ca(ca({},i),{},{useRaw:!1,parsed:e}))}})}if(t.choices)return(0,O.jsx)(Ir,ca({},e));switch(r){case"string":return(0,O.jsx)(nr,ca({},e));case"int":return(0,O.jsx)(tr,ca({},e));case"boolean":return(0,O.jsx)(rr,ca({},e));case"phandle":case"phandles":return(0,O.jsx)(Oi,ca({},e));case"phandle-array":return(0,O.jsx)(oa,ca({},e));default:return(0,O.jsx)($t,ca({},e))}}sa.propTypes={schema:E().shape({type:E().oneOf(["string","boolean","int","array","phandle","phandles","phandle-array","integer-union"]),required:E().bool,description:E().string,default:E().any,const:E().any,helper:E().any}),prop:E().shape({parsed:E().any,raw:E().string}),onUpdate:E().func.isRequired};var ua=sa;function fa(e){return e.length>31?"maximum length: 31":e.match(/^[^a-zA-Z]/)?"first character must be a letter":e.match(/[^a-zA-Z0-9,._+-]/)?"valid characters: a-zA-Z0-9,._+-":void 0}var pa=fa;function da(e){return e.length>31?"maximum length: 31":e.match(/^[^a-zA-Z]/)?"first character must be a letter":e.match(/[^a-zA-Z0-9_]/)?"valid characters: a-zA-Z0-9_":void 0}var ya=t(33988),ha={};ha.styleTagTransform=b(),ha.setAttributes=d(),ha.insert=f().bind(null,"head"),ha.domAPI=s(),ha.insertStyleElement=h(),c()(ya.Z,ha);var ma=ya.Z&&ya.Z.locals?ya.Z.locals:void 0;function ba(e){return ba="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},ba(e)}var Aa=["validator","required","value"];function va(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function ga(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?va(Object(t),!0).forEach((function(n){xa(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):va(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function xa(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==ba(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==ba(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===ba(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function ja(e){var n=e.validator,t=e.required,r=void 0!==t&&t,o=e.value,i=void 0===o?"":o,a=function(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}(e,Aa),c=n(i)||!i&&r&&"cannot be empty";return(0,O.jsxs)("span",{className:ma.wrapper,children:[(0,O.jsx)("input",ga({type:"text",value:i},a)),c&&(0,O.jsx)("span",{className:ma.error,children:c})]})}function Ca(e){return Ca="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Ca(e)}function wa(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Ea(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?wa(Object(t),!0).forEach((function(n){Oa(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):wa(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Oa(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Ca(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Ca(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Ca(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function ka(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(e,n)||Sa(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Sa(e,n){if(e){if("string"==typeof e)return Ba(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Ba(e,n):void 0}}function Ba(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function Pa(e){var n=e.name,t=e.labels,r=ka(void 0===t?[]:t,1)[0],o=e.properties.label;return n.toLowerCase()===(r||"").toLowerCase()&&n.toLowerCase()===((null==o?void 0:o.parsed)||"").toLowerCase()}function Ia(e){var n=e.node;return(0,O.jsxs)("div",{children:[(0,O.jsx)("p",{children:(0,O.jsx)("code",{children:n.properties.compatible.parsed})}),(0,O.jsx)(Ta,Ea({},e))]})}function Ta(e){var n=e.node,t=e.onUpdate,o=ka((0,r.useState)(Pa(n)),2),i=o[0],a=o[1],c=ka((0,r.useState)(Pa(n)),2),l=c[0],s=c[1],u=function(e,n,t,o){var i=(0,r.useCallback)((function(t){n(Ea(Ea({},e),{},{name:t.target.value}))}),[e,n]),a=(0,r.useCallback)((function(r){var i,a=r.target.value,c=[a].concat(function(e){if(Array.isArray(e))return Ba(e)}(i=e.labels.slice(1))||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(i)||Sa(i)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),l=t?a:e.name,s=o?Ea(Ea({},e.properties),{},{label:{parsed:a.toUpperCase(),raw:'"'.concat(a.toUpperCase(),'"'),useRaw:!1}}):e.properties;n(Ea(Ea({},e),{},{name:l,labels:c,properties:s}))}),[e,n,t,o]);return[i,a,(0,r.useCallback)((function(t){return n(Ea(Ea({},e),{},{properties:Ea(Ea({},e.properties),{},{label:Ea(Ea({},e.properties.label),{},{parsed:t.target.value,useRaw:!1})})}))}),[e,n])]}(n,t,i,l),f=ka(u,3),p=f[0],d=f[1],y=f[2];return(0,O.jsx)("table",{children:(0,O.jsxs)("tbody",{children:[(0,O.jsxs)("tr",{children:[(0,O.jsx)("th",{children:"Bind"}),(0,O.jsx)("td",{children:(0,O.jsx)(ja,{type:"text",value:n.labels[0]||"",required:!0,validator:da,onChange:d})})]}),(0,O.jsxs)("tr",{children:[(0,O.jsx)("th",{children:"Node"}),(0,O.jsxs)("td",{children:[(0,O.jsx)(ja,{value:n.name,required:!0,readOnly:i,disabled:i,validator:fa,onChange:p}),(0,O.jsxs)("label",{title:"Set automatically using bind name",children:[(0,O.jsx)("input",{type:"checkbox",checked:i,onChange:function(e){return a(e.target.checked)}})," Automatic"]})]})]}),(0,O.jsxs)("tr",{children:[(0,O.jsx)("th",{children:"Label"}),(0,O.jsxs)("td",{children:[(0,O.jsx)(ja,{type:"text",value:n.properties.label.parsed||"",required:!0,readOnly:l,disabled:l,validator:function(){return null},onChange:y}),(0,O.jsxs)("label",{title:"Set automatically using bind name",children:[(0,O.jsx)("input",{type:"checkbox",checked:l,onChange:function(e){return s(e.target.checked)}})," Automatic"]})]})]})]})})}function La(e){return La="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},La(e)}function Da(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Ra(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Da(Object(t),!0).forEach((function(n){Na(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Da(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Na(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==La(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==La(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===La(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function _a(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var Ma=function(e){var n,t,o,i=e.node,a=e.onUpdate,c=e.onCancel,l=(0,r.useContext)(Se).behaviors,s=(t=(0,r.useState)(i),o=2,function(e){if(Array.isArray(e))return e}(t)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(t,o)||function(e,n){if(e){if("string"==typeof e)return _a(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?_a(e,n):void 0}}(t,o)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),u=s[0],f=s[1],p=l[null===(n=i.properties.compatible)||void 0===n?void 0:n.parsed],d=function(e){return function(n){f(Ra(Ra({},u),{},{properties:Ra(Ra({},u.properties),{},Na({},e,n))}))}},y=(0,r.useCallback)((function(){a(J()(u))}),[u,a]),h=(null==p?void 0:p.properties)||{},m=(p?Object.keys(h):Object.keys(u.properties)).filter((function(e){var n;return!("label"===e||null!==(n=h[e])&&void 0!==n&&n.deprecatedBy&&!u.properties[e])}));return(0,O.jsx)(fn,{onDismiss:c,children:(0,O.jsx)(tn,{dismissText:!1,children:(0,O.jsxs)("div",{style:{maxHeight:"80vh",overflow:"auto"},children:[(0,O.jsxs)("h2",{children:["Edit ",i.name," ",(0,O.jsxs)("code",{children:["(&",i.labels[0],")"]})]}),(0,O.jsx)(Ia,{node:u,onUpdate:f}),(0,O.jsx)("h3",{children:"Configuration"}),(0,O.jsxs)("table",{className:yn.editorForm,children:[(0,O.jsx)("thead",{children:(0,O.jsxs)("tr",{children:[(0,O.jsx)("th",{children:"Property"}),(0,O.jsx)("th",{children:"Value"}),(0,O.jsx)("th",{})]})}),(0,O.jsx)("tbody",{children:m.map((function(e,n){var t,r;return(0,O.jsxs)("tr",{children:[(0,O.jsx)("td",{className:yn.propertyName,children:e in h?(0,O.jsx)(hn,{property:e,schema:h[e]}):(0,O.jsx)("input",{value:e,onChange:(r=e,function(e){f(Ra(Ra({},u),{},{properties:Object.keys(u.properties).reduce((function(n,t){var o=u.properties[t];return t===r&&(t=e.target.value),n[t]=o,n}),{})}))})})}),(0,O.jsx)("td",{className:yn.propertyValue,children:(0,O.jsx)(ua,{name:e,prop:u.properties[e],schema:h[e],onUpdate:d(e)})}),(0,O.jsx)("td",{children:u.properties[e]&&!(null!==(t=h[e])&&void 0!==t&&t.required)&&(0,O.jsx)(L,{name:"trash-can",className:yn.action,onClick:function(){return function(e){f(Ra(Ra({},u),{},{properties:We()(u.properties,e)}))}(e)}})})]},n)}))})]}),(0,O.jsxs)("div",{style:{textAlign:"center"},children:[(0,O.jsx)(Ge,{onClick:y,children:"Okay"}),(0,O.jsx)(Ge,{onClick:c,secondary:!0,children:"Cancel"})]})]})})})},Ya=t(87617),qa={};qa.styleTagTransform=b(),qa.setAttributes=d(),qa.insert=f().bind(null,"head"),qa.domAPI=s(),qa.insertStyleElement=h(),c()(Ya.Z,qa);var Za=Ya.Z&&Ya.Z.locals?Ya.Z.locals:void 0;function Ka(e){return Ka="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Ka(e)}var Ua=["href","children","external","showExternal"];function Ga(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function za(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Ga(Object(t),!0).forEach((function(n){Wa(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Ga(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Wa(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Ka(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Ka(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Ka(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Fa(e){var n=e.href,t=e.children,r=e.external,o=e.showExternal,i=function(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}(e,Ua),a=Object.assign({href:n},i,r&&{rel:"noreferrer",target:"_blank"});return(0,O.jsxs)("a",za(za({},a),{},{children:[t,r&&o&&(0,O.jsx)(L,{className:Za.icon,name:"arrow-up-right-from-square"})]}))}Fa.propTypes={href:E().string.isRequired,children:E().oneOfType([E().arrayOf(E().node),E().node]).isRequired,external:E().bool.isRequired,showExternal:E().bool},Fa.defaultProps={external:!1,showExternal:!0};var Xa=Fa;function Va(e){var n=e.onDismiss,t=(0,O.jsx)(Xa,{external:!0,href:"https://github.com/nickcoutsos/keymap-editor/issues",children:"Keymap Editor Issues"});return(0,O.jsx)(fn,{onDismiss:n,children:(0,O.jsxs)(tn,{onDismiss:n,style:{maxHeight:"80vh",overflow:"scroll"},children:[(0,O.jsx)("h2",{children:"Behavior Editing Beta Test"}),(0,O.jsx)("p",{children:"Welcome to the behavior editing beta!"}),(0,O.jsx)("p",{children:"This feature has been a long time coming, and while it should enable a lot of advanced ZMK features through the app it is still a work in progress. Some features are still missing so the use experience is a little rough, and there may be errors as well. Some familiarity with ZMK behavior functionality is expected."}),(0,O.jsxs)("p",{children:["I've been using it for a while and it seems to be in a pretty workable state, but I can't catch everything, so it would mean a lot to me for you to share any feedback or issues on GitHub: ",t,"."]})]})})}function Qa(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var Ha=["zmk,behavior-hold-tap","zmk,behavior-mod-morph","zmk,behavior-tap-dance","zmk,behavior-sticky-key","zmk,behavior-caps-word"];function Ja(e){var n,t,o=e.onUpdate,i=e.onCancel,a=(n=(0,r.useState)(""),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||function(e,n){if(e){if("string"==typeof e)return Qa(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Qa(e,n):void 0}}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),c=a[0],l=a[1];return(0,O.jsx)(fn,{children:(0,O.jsxs)(tn,{dismissText:null,children:[(0,O.jsx)("h3",{children:"Add new behavior"}),(0,O.jsxs)("label",{children:["Type ",(0,O.jsxs)("select",{required:!0,value:c,onChange:function(e){return l(e.target.value)},children:[(0,O.jsx)("option",{value:"",disabled:!0,children:"Select a behavior type"}),Ha.map((function(e,n){return(0,O.jsx)("option",{value:e,children:e},n)}))]})]}),(0,O.jsxs)("div",{style:{textAlign:"center",margin:"10px"},children:[(0,O.jsx)(Ge,{disabled:!c,onClick:function(){return o(c)},children:"Create"}),(0,O.jsx)(Ge,{onClick:i,secondary:!0,children:"Cancel"})]})]})})}Ja.propTypes={onUpdate:E().func.isRequired,onCancel:E().func.isRequired};var $a=Ja,ec=t(95130);function nc(e){return nc="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},nc(e)}function tc(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function rc(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?tc(Object(t),!0).forEach((function(n){oc(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):tc(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function oc(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==nc(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==nc(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===nc(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function ic(e,n){var t=n.name,r=n.labels,o=n.label,i=ec.behaviorSchemas[e];return{name:t,labels:r,properties:rc({compatible:{raw:'"'.concat(e,'"'),parsed:e},label:{raw:'"'.concat(o,'"'),parsed:o}},Object.keys(i.properties).reduce((function(e,n){var t=i.properties[n];return function(e){return["phandle","phandles","phandle-array"].includes(e.type)}(t)&&t.length?e[n]={parsed:qo()(t.length,(function(){return"&none"}))}:"const"in t&&(e[n]={parsed:t.const,raw:"<".concat(t.const.toString(),">")}),e}),{}))}}var ac=t(62412),cc=function(e){return e.keyboard.keymap.behaviors},lc=(0,Zo.oM)({name:"behaviors",initialState:[],reducers:{addBehavior:function(e,n){e.push(n.payload.behavior)},updateBehavior:function(e,n){e[n.payload.behaviorIndex]=We()(n.payload.behavior,"params"),(0,ac.resolveBehaviorParams)(e)},deleteBehavior:function(e,n){e.splice(n.payload.behaviorIndex,1)}}}),sc=lc.actions,uc=sc.addBehavior,fc=sc.updateBehavior,pc=sc.deleteBehavior,dc=lc.reducer;function yc(e){return yc="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},yc(e)}function hc(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function mc(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?hc(Object(t),!0).forEach((function(n){bc(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):hc(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function bc(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==yc(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==yc(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===yc(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Ac(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(e,n)||function(e,n){if(e){if("string"==typeof e)return vc(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?vc(e,n):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function vc(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var gc=function(){var e=(0,i.v9)((function(e){return e.experimentalSettings})),n=Ac((0,r.useState)(null),2),t=n[0],o=n[1],a=Ac((0,r.useState)(!1),2),c=a[0],l=a[1],s=Ac((0,r.useState)(!1),2),u=s[0],f=s[1],p=(0,i.v9)(cc),d=(0,i.I0)(),y=(0,r.useCallback)((function(){l(!0)}),[l]),h=(0,r.useCallback)((function(e){l(!1),d(uc({behavior:ic(e,{name:"new_behavior",labels:["new_behavior"],label:"NEW_BEHAVIOR"})})),setTimeout((function(){return o(p.length)}))}),[p,d,l,o]),m=(0,r.useCallback)((function(e){o(e)}),[o]),b=(0,r.useCallback)((function(e){d(pc({behaviorIndex:e}))}),[d]),A=(0,r.useCallback)((function(e){e.stopPropagation(),f(!0)}),[f]),v=(0,r.useCallback)((function(){f(!1)}),[f]),g=(0,r.useCallback)((function(n){d({type:"SETTINGS_UPDATE",settings:mc(mc({},e),{},{enableBehaviorEditing:n})})}),[e,d]);return(0,O.jsxs)("div",{className:yn.main,children:[c&&(0,O.jsx)($a,{onUpdate:h,onCancel:function(){return l(!1)}}),null!==t&&(0,O.jsx)(Ma,{node:p[t],onCancel:function(){return o(null)},onUpdate:function(e){o(null),d(fc({behaviorIndex:t,behavior:e}))}}),u&&(0,O.jsx)(Va,{onDismiss:v}),(0,O.jsxs)("div",{className:yn.panel,children:[(0,O.jsxs)("label",{children:["Enable Beta",(0,O.jsx)("input",{type:"checkbox",checked:e.enableBehaviorEditing,onChange:function(e){return g(e.target.checked)}})]}),(0,O.jsxs)(Ge,{onClick:A,style:{backgroundColor:"orange"},children:[(0,O.jsx)(L,{name:"warning"})," Details"]}),(0,O.jsx)("h3",{children:"Custom Behaviors"}),(0,O.jsxs)("table",{style:{width:"100%"},children:[(0,O.jsx)("thead",{children:(0,O.jsxs)("tr",{children:[(0,O.jsx)("th",{children:"Binding"}),(0,O.jsx)("th",{children:"Compatible"}),(0,O.jsx)("th",{children:"Actions"})]})}),(0,O.jsx)("tbody",{children:p.map((function(n,t){return(0,O.jsxs)("tr",{children:[(0,O.jsx)("td",{children:(0,O.jsxs)("code",{children:["&",n.labels[0]]})}),(0,O.jsx)("td",{children:n.properties.compatible.raw}),(0,O.jsx)("td",{children:e.enableBehaviorEditing&&(0,O.jsxs)(O.Fragment,{children:[(0,O.jsx)(L,{className:yn.action,onClick:function(){return m(t)},name:"wrench"}),(0,O.jsx)(L,{className:yn.action,onClick:function(){return b(t)},name:"trash-can"})]})})]},t)}))})]}),(0,O.jsx)(Ge,{onClick:y,children:"Add New Behavior"})]})]})},xc=t(78207),jc={};jc.styleTagTransform=b(),jc.setAttributes=d(),jc.insert=f().bind(null,"head"),jc.domAPI=s(),jc.insertStyleElement=h(),c()(xc.Z,jc);var Cc=xc.Z&&xc.Z.locals?xc.Z.locals:void 0;function wc(){return(0,O.jsx)("p",{className:Cc.floatingMessage,children:"Click on a key to add it to the combo"})}function Ec(e){var n=e.keyPositions,t=e.onUpdate;return(0,O.jsxs)("div",{className:Cc.comboInputMap,children:[(0,O.jsx)(zt,{value:n,onUpdate:t}),n.length<2&&(0,O.jsx)(wc,{})]})}Ec.propTypes={onUpdate:E().func.isRequired,keyPositions:E().arrayOf(E().number).isRequired};var Oc=Ec,kc=t(86015),Sc={};Sc.styleTagTransform=b(),Sc.setAttributes=d(),Sc.insert=f().bind(null,"head"),Sc.domAPI=s(),Sc.insertStyleElement=h(),c()(kc.Z,Sc);var Bc=kc.Z&&kc.Z.locals?kc.Z.locals:void 0;function Pc(e){return function(n){n.stopPropagation(),e()}}function Ic(e){return function(n){e[n.key]&&e[n.key]()}}function Tc(e){return Tc="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Tc(e)}function Lc(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Dc(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Lc(Object(t),!0).forEach((function(n){Rc(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Lc(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Rc(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Tc(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Tc(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Tc(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Nc(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function _c(e){var n,t,o=e.value,i=e.validate,a=e.required,c=e.render,l=e.onUpdate,s=(0,r.useRef)(),u=(n=(0,r.useState)({value:o,editing:!1,attemptedEmpty:!1}),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||function(e,n){if(e){if("string"==typeof e)return Nc(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Nc(e,n):void 0}}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),f=u[0],p=u[1],d=f.attemptedEmpty?"cannot be empty":i&&i(f.value),y=(0,r.useCallback)((function(e){e&&(e.focus(),e.select())}),[]),h=(0,r.useCallback)((function(){p((function(e){return Dc(Dc({},e),{},{editing:!1})}))}),[p]),m=(0,r.useCallback)((function(e){s.current&&!s.current.contains(e.target)&&h()}),[s,h]);return(0,r.useEffect)((function(){return document.addEventListener("click",m),function(){return document.removeEventListener("click",m)}}),[m]),f.editing?(0,O.jsxs)("span",{className:Bc.container,ref:s,children:[(0,O.jsx)("input",{ref:y,value:f.value,onChange:function(e){return p(Dc(Dc({},f),{},{attemptedEmpty:!1,value:e.target.value}))},onKeyDown:Ic({Enter:function(){f.editing&&(""===f.value&&a?p(Dc(Dc({},f),{},{attemptedEmpty:!0})):(d||l(f.value),p(Dc(Dc({},f),{},{value:f.value,editing:!1}))))},Escape:h})}),d&&(0,O.jsx)("span",{className:Bc.error,children:d})]}):c((0,O.jsxs)(O.Fragment,{children:[(0,O.jsx)("span",{children:o}),(0,O.jsx)(L,{name:"pencil",className:Bc.edit,onClick:Pc((function(){return p(Dc(Dc({},f),{},{editing:!0}))}))})]}))}_c.propTypes={value:E().string.isRequired,validate:E().func,required:E().bool.isRequired,render:E().func.isRequired,onUpdate:E().func.isRequired},_c.defaultProps={required:!0};var Mc=_c;function Yc(e){return Yc="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Yc(e)}function qc(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Zc(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?qc(Object(t),!0).forEach((function(n){Kc(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):qc(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Kc(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Yc(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Yc(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Yc(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Uc(e,n){if(e){if("string"==typeof e)return Gc(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Gc(e,n):void 0}}function Gc(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function zc(e){var n=e.selected,t=e.options,r=e.onUpdate;return(0,O.jsx)("ul",{className:Cc.layerList,children:t.map((function(e,t){return(0,O.jsx)("li",{"data-selected":n.includes(t),onClick:function(){return e=t,void r(n.includes(e)?n.filter((function(n){return n!==e})):[].concat(function(e){if(Array.isArray(e))return Gc(e)}(o=n)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(o)||Uc(o)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),[e]));var e,o},children:e})}))})}var Wc=function(e){var n,t,o=e.combo,a=e.onUpdate,c=(0,i.v9)(zo),l=(n=(0,r.useState)(Sn()(o,["timeoutMs","slowRelease","layers"])),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||Uc(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),s=l[0],u=l[1],f=c.map((function(e){return e.name}));return(0,O.jsx)(fn,{children:(0,O.jsxs)(tn,{onDismiss:function(){a(s)},children:[(0,O.jsxs)("h2",{children:["Customize [",(0,O.jsx)("code",{children:o.identifier}),"]"]}),(0,O.jsxs)("div",{children:[(0,O.jsxs)("div",{className:Cc.field,children:[(0,O.jsx)("label",{htmlFor:"customize-combo-timeout",children:"Timeout (ms)"}),(0,O.jsx)("input",{id:"customize-combo-timeout",type:"number",placeholder:"Default",value:s.timeoutMs,onChange:function(e){return u((function(n){return Zc(Zc({},n),{},{timeoutMs:""===e.target.value?void 0:Number(e.target.value)})}))}})]}),(0,O.jsxs)("div",{className:Cc.field,children:[(0,O.jsx)("label",{htmlFor:"customize-combo-slow-release",children:"Slow Release"}),(0,O.jsx)("input",{id:"customize-combo-slow-release",type:"checkbox",checked:s.slowRelease,onChange:function(e){return u((function(n){return Zc(Zc({},n),{},{slowRelease:e.target.checked})}))}})]}),(0,O.jsxs)("div",{className:Cc.field,children:[(0,O.jsx)("label",{children:"Layers"}),(0,O.jsx)(zc,{selected:s.layers||[],options:f,onUpdate:function(e){return u((function(n){return Zc(Zc({},n),{},{layers:e})}))}})]})]})]})})},Fc=function(e){return e.keyboard.keymap.combos},Xc=(0,Zo.oM)({name:"combos",initialState:[],reducers:{updateComboBinding:function(e,n){e[n.payload.comboIndex].bindings=n.payload.bindings},updateComboKeypositions:function(e,n){e[n.payload.comboIndex].keyPositions=n.payload.keyPositions},createCombo:function(e){e.push({identifier:"new_combo",keyPositions:[],bindings:[{value:"&trans",params:[]}]})},renameCombo:function(e,n){e[n.payload.index].identifier=n.payload.name},deleteCombo:function(e,n){e.splice(n.payload.index,1)},customizeCombo:function(e,n){Object.assign(e[n.payload.index],n.payload.config)}}}),Vc=Xc.actions,Qc=Vc.updateComboBinding,Hc=Vc.updateComboKeypositions,Jc=Vc.createCombo,$c=Vc.renameCombo,el=Vc.deleteCombo,nl=Vc.customizeCombo,tl=Xc.reducer;function rl(e){return rl="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},rl(e)}function ol(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function il(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?ol(Object(t),!0).forEach((function(n){al(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ol(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function al(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==rl(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==rl(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===rl(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function cl(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function ll(e){var n,t,o=(0,r.useContext)(j).identifiers,a=(0,i.v9)(Fc),c=(0,i.I0)(),l=(n=(0,r.useState)(null),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||function(e,n){if(e){if("string"==typeof e)return cl(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?cl(e,n):void 0}}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),s=l[0],u=l[1];function f(e){return pa(e)||(o.includes(e)?'Cannot use existing identifier "'.concat(e,'"'):null)}return(0,O.jsxs)("div",{className:Cc.main,children:[null!==s&&(0,O.jsx)(Wc,{combo:a[s],onUpdate:function(e){return function(e,n){u(null),c(nl({index:e,config:n}))}(s,e)}}),(0,O.jsxs)("div",{className:Cc.sidebar,children:[(0,O.jsxs)(Xa,{external:!0,href:"https://zmk.dev/docs/features/combos",children:[(0,O.jsx)(L,{name:"book"})," ZMK Docs: Combos"]}),(0,O.jsx)(Ge,{onClick:function(){c(Jc())},children:"Add New Combo"})]}),(0,O.jsx)("div",{className:Cc.comboPanel,children:a.map((function(e,n){return(0,O.jsxs)("div",{className:Cc.combo,children:[(0,O.jsxs)("div",{className:Cc.heading,children:[(0,O.jsx)(Mc,{value:e.identifier,validate:f,render:function(e){return(0,O.jsx)("h5",{children:(0,O.jsx)("code",{children:e})})},onUpdate:function(e){return function(e,n){c($c({index:e,name:n}))}(n,e)}}),(0,O.jsxs)("div",{className:Cc.actions,children:[(0,O.jsx)(L,{name:"wrench",className:"".concat(Cc.action),onClick:function(){return u(n)}}),(0,O.jsx)(L,{name:"trash-can",className:"".concat(Cc.action," ").concat(Cc.remove),onClick:function(){c(el({index:n}))}})]})]}),(0,O.jsxs)("div",{className:Cc.detail,children:[(0,O.jsx)("div",{className:Cc.comboOutput,children:(0,O.jsx)(Ji,il(il({},e.bindings[0]),{},{onUpdate:function(e){!function(e,n){c(Qc({comboIndex:e,bindings:[n]}))}(n,e)}}))}),(0,O.jsx)(Oc,{keyPositions:e.keyPositions,onUpdate:function(e){return function(e,n){c(Hc({comboIndex:e,keyPositions:n}))}(n,e)}})]})]},n)}))})]})}ll.propTypes={};var sl=ll,ul=t(50335),fl={};fl.styleTagTransform=b(),fl.setAttributes=d(),fl.insert=f().bind(null,"head"),fl.domAPI=s(),fl.insertStyleElement=h(),c()(ul.Z,fl);var pl=ul.Z&&ul.Z.locals?ul.Z.locals:void 0;function dl(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(e,n)||function(e,n){if(e){if("string"==typeof e)return yl(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?yl(e,n):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function yl(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function hl(e){var n=e.activeLayer,t=e.onSelect,o=(0,r.useRef)(null),a=(0,i.I0)(),c=(0,r.useContext)(It).bindingCount,l=(0,i.v9)(zo),s=dl((0,r.useState)(!1),2),u=s[0],f=s[1],p=dl((0,r.useState)(""),2),d=p[0],y=p[1],h=(0,r.useCallback)((function(e){if(e===n)return y(l[n].name),void f(!0);f(!1),t(e)}),[l,n,y,f,t]),m=(0,r.useCallback)((function(){return a(Xo({bindingCount:c}))}),[a,c]),b=(0,r.useMemo)((function(){return function(e,n){window.confirm("Really delete layer: ".concat(n,"?"))&&a(Qo({index:e}))}}),[a]),A=(0,r.useCallback)((function(){if(u){var e=n,t=d;y(""),f(!1),a(Vo({index:e,name:t}))}}),[d,u,n,y,f,a]),v=(0,r.useCallback)((function(){u&&(y(""),f(!1))}),[u,y,f]),g=(0,r.useMemo)((function(){return function(e){o.current&&!o.current.contains(e.target)&&v()}}),[o,v]);(0,r.useEffect)((function(){return document.addEventListener("click",g),function(){return document.removeEventListener("click",g)}}),[g]);var x=(0,r.useCallback)((function(e){e&&(e.focus(),e.select())}),[]);return(0,O.jsx)("div",{className:pl.layerSelector,"data-renaming":u,ref:o,children:(0,O.jsxs)("ul",{children:[l.map((function(e,t){var r=e.name;return(0,O.jsxs)("li",{className:n===t?pl.active:"","data-layer":t,onClick:Pc((function(){return h(t)})),children:[(0,O.jsx)("span",{className:pl.index,children:t}),n===t&&u?(0,O.jsx)("input",{ref:x,className:pl.name,onChange:function(e){return y(e.target.value)},onKeyDown:Ic({Enter:A,Escape:v}),value:n===t&&u?d:r}):(0,O.jsxs)("span",{className:pl.name,children:[r,(0,O.jsx)(L,{name:"times-circle",className:pl.delete,onClick:Pc((function(){return b(t,r)}))})]})]},"layer-".concat(t))})),(0,O.jsxs)("li",{onClick:m,children:[(0,O.jsx)(L,{className:pl.index,name:"plus"}),(0,O.jsx)("span",{className:pl.name,children:"Add Layer"})]})]})})}hl.propTypes={activeLayer:E().number.isRequired,onSelect:E().func.isRequired};var ml=hl;function bl(e){var n=e.direction;return(0,O.jsx)("svg",{xmlns:"http://www.w3.org/2000/svg",width:"65px",height:"65px",viewBox:"0 0 65 65",style:{position:"absolute",top:"-10px",stroke:"var(--key-color-base)",strokeWidth:2,fill:"none",display:"block",width:"65px",height:"65px",pointerEvents:"none"},children:(0,O.jsx)("path",{style:{transform:"scaleX(".concat("cw"===n?-1:1,") rotate(-45deg)"),transformOrigin:"center center"},d:"M 63 31 A 30 30 45 0 0 32.5 2 M 37 -2 L 32.5 2 L 37 6"})})}function Al(e){var n=e.context,t=e.direction,r=e.params,o=e.onUpdate;return(0,O.jsxs)(st,{themeClass:rt.encoder,children:[(0,O.jsx)(bl,{direction:t}),(0,O.jsx)(Wi,{hideBehaviour:!0,context:n,value:"&kp",params:r,onUpdate:o})]})}Al.propTypes={params:E().arrayOf(Zr),onUpdate:E().func.isRequired};var vl=Al;function gl(e){return gl="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},gl(e)}function xl(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function jl(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Cl(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?jl(Object(t),!0).forEach((function(n){wl(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):jl(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function wl(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==gl(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==gl(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===gl(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}var El=function(e){var n=e.layer,t=e.sensors,r=(0,i.I0)(),o=(0,i.v9)(zo)[n].sensorBindings,a=void 0===o?[]:o;function c(e,t,o){var i=o.params[0],c=a[e]||{value:"&inc_dec_kp",params:[{value:"",params:[]},{value:"",params:[]}]};r($o({layerIndex:n,sensorIndex:e,bindings:Cl(Cl({},c),{},{params:Ai(c.params,t,i)})}))}return(0,O.jsxs)("div",{style:{margin:"0 0 30px"},children:[(0,O.jsx)("h3",{children:"Sensor bindings"}),(0,O.jsx)("div",{style:{display:"flex",flexDirection:"row",gap:"25px"},children:t.map((function(e,n){var t,r=e.label||e.identifier,o=function(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(e,n)||function(e,n){if(e){if("string"==typeof e)return xl(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?xl(e,n):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}((null===(t=a[n])||void 0===t?void 0:t.params)||[],2),i=o[0],l=o[1];return(0,O.jsxs)("div",{style:{display:"block"},children:[(0,O.jsx)("label",{style:{fontVariant:"small-caps",fontSize:"90%"},children:(0,O.jsx)("code",{children:r})}),(0,O.jsxs)("div",{style:{display:"flex",flexDirection:"row",gap:"5px",marginTop:"20px"},children:[(0,O.jsx)(vl,{direction:"ccw",params:[l],onUpdate:function(e){return c(n,1,e)}}),(0,O.jsx)(vl,{direction:"cw",params:[i],onUpdate:function(e){return c(n,0,e)}})]})]},n)}))})]})},Ol=t(56634),kl={};kl.styleTagTransform=b(),kl.setAttributes=d(),kl.insert=f().bind(null,"head"),kl.domAPI=s(),kl.insertStyleElement=h(),c()(Ol.Z,kl);var Sl=Ol.Z&&Ol.Z.locals?Ol.Z.locals:void 0;function Bl(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function Pl(e){var n,t,o=e.actions,i=(n=(0,r.useState)(!1),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||function(e,n){if(e){if("string"==typeof e)return Bl(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Bl(e,n):void 0}}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=i[0],c=i[1],l=(0,r.useRef)(),s=(0,r.useCallback)((function(e){l.current&&!l.current.contains(e.target)&&c(!1)}),[l,c]);return(0,r.useEffect)((function(){return document.body.addEventListener("click",s),function(){return document.body.removeEventListener("click",s)}}),[s]),(0,O.jsxs)("div",{ref:l,className:[Sl.menu,a&&Sl.open].join(" "),children:[(0,O.jsx)("p",{onClick:function(){return c(!a)},children:(0,O.jsx)(L,{name:"ellipsis"})}),(0,O.jsx)("ul",{children:o.map((function(e,n){return(0,O.jsx)("li",{onClick:function(){return function(e){c(!1),e()}(e.callback)},children:e.content},n)}))})]})}function Il(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function Tl(e){var n,t=e.activeLayer,o=e.additionalActions,a=void 0===o?[]:o,c=(0,i.I0)(),l=(0,r.useMemo)((function(){return{transparentToKeypress:function(){return c(ei({layerIndex:t}))},transparentToNone:function(){return c(ni({layerIndex:t}))},noneToKeypress:function(){return c(ti({layerIndex:t}))},noneToTransparent:function(){return c(ri({layerIndex:t}))},emptyKeypressToTransparent:function(){return c(oi({layerIndex:t}))},emptyKeypressToNone:function(){return c(ii({layerIndex:t}))}}}),[c,t]);return(0,O.jsx)(Pl,{actions:[].concat((n=a,function(e){if(Array.isArray(e))return Il(e)}(n)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(n)||function(e,n){if(e){if("string"==typeof e)return Il(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Il(e,n):void 0}}(n)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),[{callback:l.transparentToKeypress,content:(0,O.jsxs)(O.Fragment,{children:["Convert ",(0,O.jsx)("code",{children:"&trans"})," to ",(0,O.jsx)("code",{children:"&kp"})]})},{callback:l.transparentToNone,content:(0,O.jsxs)(O.Fragment,{children:["Convert ",(0,O.jsx)("code",{children:"&trans"})," to ",(0,O.jsx)("code",{children:"&none"})]})},{callback:l.noneToKeypress,content:(0,O.jsxs)(O.Fragment,{children:["Convert ",(0,O.jsx)("code",{children:"&none"})," to ",(0,O.jsx)("code",{children:"&kp"})]})},{callback:l.noneToTransparent,content:(0,O.jsxs)(O.Fragment,{children:["Convert ",(0,O.jsx)("code",{children:"&none"})," to ",(0,O.jsx)("code",{children:"&trans"})]})},{callback:l.emptyKeypressToTransparent,content:(0,O.jsxs)(O.Fragment,{children:["Convert ",(0,O.jsx)("code",{children:"&kp ⦸"})," to ",(0,O.jsx)("code",{children:"&trans"})]})},{callback:l.emptyKeypressToNone,content:(0,O.jsxs)(O.Fragment,{children:["Convert ",(0,O.jsx)("code",{children:"&kp ⦸"})," to ",(0,O.jsx)("code",{children:"&none"})]})}])})}Pl.propTypes={actions:E().arrayOf(E().shape({callback:E().func.isRequired,content:E().oneOfType([E().node,E().string]).isRequired})).isRequired},Tl.propTypes={activeLayer:E().number.isRequired,additionalActions:E().arrayOf(E().shape({callback:E().func.isRequired,content:E().oneOfType([E().node,E().string]).isRequired}))};var Ll=t(59500),Dl={};Dl.styleTagTransform=b(),Dl.setAttributes=d(),Dl.insert=f().bind(null,"head"),Dl.domAPI=s(),Dl.insertStyleElement=h(),c()(Ll.Z,Dl);var Rl=Ll.Z&&Ll.Z.locals?Ll.Z.locals:void 0;function Nl(e){return Nl="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Nl(e)}function _l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Ml(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?_l(Object(t),!0).forEach((function(n){Yl(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):_l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Yl(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Nl(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Nl(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Nl(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function ql(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var Zl=function(e){var n,t,o=e.activeLayer,a=e.onClose,c=(0,i.I0)(),l=(0,i.v9)(zo)[o],s=(n=(0,r.useState)(Sn()(l,["name","label"])),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||function(e,n){if(e){if("string"==typeof e)return ql(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?ql(e,n):void 0}}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),u=s[0],f=s[1];return(0,O.jsx)(fn,{onDismiss:a,children:(0,O.jsxs)(tn,{dismissText:"",children:[(0,O.jsxs)("h2",{children:["Customize Layer ",(0,O.jsx)("code",{children:l.name})]}),(0,O.jsxs)("div",{children:[(0,O.jsxs)("div",{className:Rl.field,children:[(0,O.jsx)("label",{htmlFor:"customize-layer-name",children:"Name"}),(0,O.jsx)(ja,{id:"customize-layer-name",placeholder:"Default",value:u.name,validator:fa,onChange:function(e){return f((function(n){return Ml(Ml({},n),{},{name:e.target.value})}))}})]}),(0,O.jsxs)("div",{className:Rl.field,children:[(0,O.jsx)("label",{htmlFor:"customize-layer-label",children:"Label"}),(0,O.jsx)("input",{id:"customize-layer-label",placeholder:"Default",value:u.label,onChange:function(e){return f((function(n){return Ml(Ml({},n),{},{label:e.target.value})}))}})]})]}),(0,O.jsxs)("div",{style:{textAlign:"center",gap:"5px"},children:[(0,O.jsx)(Ge,{onClick:function(){c(Ho(Ml({layerIndex:o},u))),a()},children:"OK"}),(0,O.jsx)(Ge,{onClick:a,secondary:!0,children:"Cancel"})]})]})})};function Kl(){var e=(0,i.I0)(),n=(0,r.useContext)(It).bindingCount;return(0,O.jsxs)("div",{style:{textAlign:"center"},children:[(0,O.jsx)("h3",{children:"No keymap layers defined"}),(0,O.jsx)(Ge,{onClick:function(){return e(Xo({bindingCount:n}))},children:"Add layer"})]})}function Ul(e){var n=e.layout,t=e.activeLayer,o=(0,i.I0)(),a=(0,i.v9)(zo)[t],c=(0,r.useCallback)((function(e,n){o(Jo({layerIndex:t,bindIndex:e,binding:n}))}),[o,t]);return(0,O.jsx)(Jn,{layout:n,bindings:a.bindings,renderKey:function(e){var n,t,r=e.index,o=e.keyLayout;return a.bindings[r]&&(0,O.jsx)(Ji,{label:o.label,value:null===(n=a.bindings[r])||void 0===n?void 0:n.value,params:null===(t=a.bindings[r])||void 0===t?void 0:t.params,onUpdate:function(e){return c(r,e)}})}})}var Gl=t(62029);function zl(e,n){if(e){if("string"==typeof e)return Wl(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Wl(e,n):void 0}}function Wl(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var Fl={keysHeld:[],keysHeldBeforeLastRelease:[]};function Xl(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(e,n)||function(e,n){if(e){if("string"==typeof e)return Vl(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Vl(e,n):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Vl(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var Ql={Alt:"ALT",Control:"CTRL",Shift:"SHFT",Meta:"GUI",ArrowUp:"UP",ArrowDown:"DOWN",ArrowLeft:"LEFT",ArrowRight:"RIGHT",Escape:"ESC",Tab:"TAB",Enter:"RET",Home:"HOME",End:"END",PageDown:"PG_DN",PageUp:"PG_UP",Backspace:"BSPC",Delete:"DEL"};function Hl(e,n){var t=arguments.length>2&&void 0!==arguments[2]&&arguments[2],o=(0,i.I0)(),a=Xl((0,r.useState)(t),2),c=a[0],l=a[1],s=Xl((0,r.useState)(0),2),u=s[0],f=s[1],p=(0,r.useCallback)((function(){u===n.length-1?(f(0),l(!1)):f(u+1)}),[u,f,n.length,l]),d=(0,r.useCallback)((function(n){var t=function(e){var n=function(e){return(0,q.compact)([e.altKey&&"LA",e.ctrlKey&&"LC",e.metaKey&&"LG",e.shiftKey&&"LS"])}(e),t=(0,Gl.mapCharacter)(e.key.toLowerCase())||function(e){var n=Ql[e.key],t=function(e){switch(e.location){case 1:return"L";case 2:return"R";default:return""}}(e);return n?{value:"&kp",params:[{value:t+n,params:[]}]}:null}(e);if(t)return{value:t.value,params:n.reduce((function(e,n){return[{value:n,params:e}]}),t.params)}}(n);t&&(o(Jo({layerIndex:e,bindIndex:u,binding:t})),p())}),[e,u,p,o]);!function(e,n){var t,o,i=(t=(0,r.useReducer)((function(e,n){switch(n.type){case"KEY_DOWN":return function(e,n){return{keysHeld:[].concat((t=e.keysHeld,function(e){if(Array.isArray(e))return Wl(e)}(t)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(t)||zl(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),[n.event.key]),keysHeldBeforeLastRelease:[]};var t}(e,n);case"KEY_UP":return function(e,n){return{keysHeld:[],keysHeldBeforeLastRelease:e.keysHeld.filter((function(e){return e!==n.event.key}))}}(e,n);case"RESET":return Fl;default:return e}}),Fl),o=2,function(e){if(Array.isArray(e))return e}(t)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(t,o)||zl(t,o)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=i[0],c=i[1],l=(0,r.useCallback)((function(e){e.repeat||(e.preventDefault(),c({type:"KEY_DOWN",event:e}))}),[c]),s=(0,r.useCallback)((function(e){a.keysHeldBeforeLastRelease.includes(e.key)||(e.preventDefault(),n(e),c({type:"KEY_UP",event:e}))}),[a.keysHeldBeforeLastRelease,n,c]);(0,r.useEffect)((function(){if(e)return document.body.addEventListener("keydown",l),document.body.addEventListener("keyup",s),function(){document.body.removeEventListener("keydown",l),document.body.removeEventListener("keyup",s)}}),[e,l,s])}(c,d);var y=(0,r.useCallback)((function(){l(!0)}),[l]),h=(0,r.useCallback)((function(){l(!1)}),[l]);return[{isActive:c,bindIndex:u},{startQuickAssignment:y,cancelQuickAssignment:h,setBindIndex:f}]}function Jl(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function $l(e){var n,t,o=e.layout,a=e.layerIndex,c=e.onClose,l=(0,i.v9)(zo)[a],s=(n=Hl(a,o,!0),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||function(e,n){if(e){if("string"==typeof e)return Jl(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Jl(e,n):void 0}}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),u=s[0],f=s[1],p=(0,r.useMemo)((function(){return On(o,{overrides:{minWidth:"400px"}})}),[o]);return(0,r.useEffect)((function(){u.isActive||c()}),[u.isActive,c]),(0,O.jsx)(fn,{onDismiss:c,children:(0,O.jsxs)(tn,{classes:[Rl.quickAssignDialog],dismissText:"",children:[(0,O.jsx)("h2",{children:"Quick-assign layer keybindings"}),(0,O.jsxs)("p",{children:["Press a key on your keyboard to set a ",(0,O.jsx)("code",{children:"&kp"})," binding at the highlighted position in your keymap."]}),(0,O.jsx)("div",{style:p,children:(0,O.jsx)(Jn,{layout:o,bindings:l.bindings,renderKey:function(e){var n,t,r=e.index,o=e.keyLayout;return l.bindings[r]&&(0,O.jsx)(Ji,{label:o.label,keyWrapperProps:{selectable:!1,onClick:function(){return f.setBindIndex(r)},className:et()([Rl.quickBindKey,u.bindIndex===r&&Rl.quickBindKeyHighlight]).join(" ")},value:null===(n=l.bindings[r])||void 0===n?void 0:n.value,params:null===(t=l.bindings[r])||void 0===t?void 0:t.params,onUpdate:function(e){}})}})}),(0,O.jsxs)("div",{style:{textAlign:"center"},children:[(0,O.jsx)(Pt,{children:"Click on a different key to jump ahead or correct a previous binding."}),(0,O.jsx)("p",{children:(0,O.jsx)(Ge,{onClick:c,children:"Done"})})]})]})})}function es(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(e,n)||function(e,n){if(e){if("string"==typeof e)return ns(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?ns(e,n):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ns(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var ts=function(e){var n=e.sensors,t=(0,i.v9)(zo),o=es((0,r.useState)(0),2),a=o[0],c=o[1],l=es((0,r.useState)(!1),2),s=l[0],u=l[1],f=es((0,r.useState)(!1),2),p=f[0],d=f[1],y=Math.max(0,Math.min(a,t.length-1)),h=(0,r.useContext)(It),m=h.layout,b=h.wrapperStyle,A=(0,r.useCallback)((function(){return u(!0)}),[u]),v=(0,r.useCallback)((function(){return d(!0)}),[d]),g=(0,r.useCallback)((function(){return d(!1)}),[d]),x=(0,r.useMemo)((function(){return[{callback:A,content:"Change Configuration"},{callback:v,content:(0,O.jsxs)(O.Fragment,{children:["Quick ",(0,O.jsx)("code",{children:"&kp"})," Assignment"]})}]}),[A,v]);if(0===t.length)return(0,O.jsx)(Kl,{});var j=b.width,C=b.height,w=b.margin,E=b.padding;return(0,O.jsxs)(O.Fragment,{children:[(0,O.jsx)(ml,{activeLayer:y,onSelect:c}),(0,O.jsxs)("div",{style:{margin:w,padding:E,width:"fit-content"},children:[(0,O.jsxs)("div",{style:{width:j,height:C},children:[(0,O.jsxs)("h3",{style:{position:"relative"},children:["Key Bindings ",(0,O.jsx)(Tl,{activeLayer:a,additionalActions:x})]}),(0,O.jsx)(Ul,{layout:m,activeLayer:y})]}),(0,O.jsx)("div",{className:Rl.sensors,"data-sensor-count":n.length,style:{},children:(0,O.jsx)(El,{sensors:n,layer:y})})]}),s&&(0,O.jsx)(Zl,{activeLayer:y,onClose:function(){return u(!1)}}),p&&(0,O.jsx)($l,{layout:m,layerIndex:y,onClose:g})]})};function rs(e){return["&macro_tap","&macro_press","&macro_release","&macro_tap_time","&macro_wait_time","&macro_pause_for_release"].includes(e.value)}var os=t(96201),is={};is.styleTagTransform=b(),is.setAttributes=d(),is.insert=f().bind(null,"head"),is.domAPI=s(),is.insertStyleElement=h(),c()(os.Z,is);var as=os.Z&&os.Z.locals?os.Z.locals:void 0,cs=t(18446),ls=t.n(cs),ss=t(35839),us={};us.styleTagTransform=b(),us.setAttributes=d(),us.insert=f().bind(null,"head"),us.domAPI=s(),us.insertStyleElement=h(),c()(ss.Z,us);var fs=ss.Z&&ss.Z.locals?ss.Z.locals:void 0,ps=["bindings","children","dragging","dragMode"],ds=["isDropping","control","classes"],ys=["bind"],hs=["bind"],ms=["row","isDropping"];function bs(e){return bs="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},bs(e)}function As(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(e,n)||vs(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function vs(e,n){if(e){if("string"==typeof e)return gs(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?gs(e,n):void 0}}function gs(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function xs(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}function js(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Cs(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?js(Object(t),!0).forEach((function(n){ws(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):js(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function ws(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==bs(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==bs(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===bs(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Es(e){var n=e.bindings,t=(e.children,e.dragging),o=e.dragMode,i=xs(e,ps),a=As((0,r.useState)([null,null]),2),c=a[0],l=a[1],s=(0,r.useMemo)((function(){return function(e){return e.reduce((function(e,n,t){var r=function(){return 0===e.at(-1).length};return(rs(n)&&!r()||!r()&&rs(e.at(-1)[0])||6===e.at(-1).length)&&e.push([]),e.at(-1).push(Cs(Cs({},n),{},{index:t})),e}),[[]])}(n)}),[n]);function u(e){console.log("enter",e),l((function(){return e}))}function f(e){return ls()(c,e)}function p(e){l((function(n){return console.log("leaving",e,"currently in",n),ls()(n,e)?[null,null]:n}))}function d(){console.log("handleDrop",c);var e=As(c,3),t=e[0],r=e[1],o=e[2],a=s[t][r].index,l=a<n.length-1?a+1:-1;i.onDrop(1===o?l:a)}return t&&(0,O.jsxs)("div",{className:[fs.dropTargets,t?fs.dragging:"","row"===o?fs.dropRowOnly:""].join(" "),children:[s.map((function(e,n){return(0,O.jsxs)(r.Fragment,{children:[(0,O.jsx)(Bs,{row:e,isDropping:f([n,0,-1]),onDragEnter:function(){return u([n,0,-1])},onDragLeave:function(){return p([n,0,-1])},onDrop:d}),e.map((function(t,o){return(0,O.jsxs)(r.Fragment,{children:[(0,O.jsx)(ks,{bind:t,isDropping:f([n,o,0]),onDragEnter:function(){return u([n,o,0])},onDragLeave:function(){return p([n,o,0])},onDrop:d}),(0,O.jsx)(Ss,{bind:t,isDropping:f([n,o,1]),onDragEnter:function(){return u([n,o,1])},onDragLeave:function(){return p([n,o,1])},onDrop:d,"data-extend":rs(t)||o!==e.length-1?0:Math.max(0,5-o)})]},o)}))]},n)})),(0,O.jsx)(Bs,{row:s.length-1,isDropping:f([s.length-1,s.at(-1).length-1,1]),onDragEnter:function(){return u([s.length-1,s.at(-1).length-1,1])},onDragLeave:function(){return p([s.length-1,s.at(-1).length-1,1])},onDrop:d})]})}function Os(e){var n,t=e.isDropping,r=e.control,o=void 0!==r&&r,i=e.classes,a=void 0===i?[]:i,c=xs(e,ds);return(0,O.jsx)("div",Cs({"data-is-control":o,className:[fs.dropTargetHalf,t?fs.droppable:""].concat((n=a,function(e){if(Array.isArray(e))return gs(e)}(n)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(n)||vs(n)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())).join(" ")},c))}function ks(e){var n=e.bind,t=xs(e,ys);return(0,O.jsx)(Os,Cs({control:rs(n)},t))}function Ss(e){var n=e.bind,t=xs(e,hs);return(0,O.jsx)(Os,Cs({control:rs(n),classes:[fs.secondHalf]},t))}function Bs(e){e.row;var n=e.isDropping,t=xs(e,ms);return(0,O.jsx)("div",Cs({"data-drop-mode":"row",className:[fs.dropTargetRow,n?fs.droppable:""].join(" ")},t))}function Ps(e,n){if(e){if("string"==typeof e)return Is(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Is(e,n):void 0}}function Is(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var Ts=function(e){return{value:"&kp",params:[{value:e,params:[]}]}},Ls=[{pattern:/[0-9]/,convert:function(e){return Ts("N".concat(e))}},{pattern:/[a-z]/,convert:function(e){return Ts(e.toUpperCase())}},{pattern:/[A-Z]/,convert:function(e){return{value:"&kp",params:[{value:"LS",params:[{value:e.toUpperCase(),params:[]}]}]}}}],Ds={"!":Ts("EXCL"),"@":Ts("AT"),"#":Ts("POUND"),$:Ts("DLLR"),"%":Ts("PRCNT"),"^":Ts("CARET"),"&":Ts("AMPS"),"*":Ts("STAR"),"(":Ts("LPAR"),")":Ts("RPAR"),"\n":Ts("RET")," ":Ts("SPACE"),"-":Ts("MINUS"),_:Ts("UNDER"),"=":Ts("EQUAL"),"+":Ts("PLUS"),"[":Ts("LBKT"),"]":Ts("LBRC"),"{":Ts("RBKT"),"}":Ts("RBRC"),"\\":Ts("BSLH"),"|":Ts("PIPE"),"":Ts("TILDE2"),";":Ts("SEMI"),":":Ts("COLON"),"'":Ts("SQT"),'"':Ts("DQT"),"`":Ts("GRAVE"),"~":Ts("TILDE"),",":Ts("COMMA"),"<":Ts("LT"),".":Ts("DOT"),">":Ts("GT"),"/":Ts("FSLH"),"?":Ts("QMARK")};var Rs=function(e){var n,t,o=e.onClose,i=(0,r.useContext)(j),a=i.sources,c=i.mergedGlyphs,l=(n=(0,r.useState)("Type something..."),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||Ps(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),s=l[0],u=l[1],f=(0,r.useMemo)((function(){return s.split("").reduce((function(e,n){var t=function(e){if(Ds[e])return Ds[e];var n,t=function(e,n){var t="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!t){if(Array.isArray(e)||(t=Ps(e))){t&&(e=t);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,c=!1;return{s:function(){t=t.call(e)},n:function(){var e=t.next();return a=e.done,e},e:function(e){c=!0,i=e},f:function(){try{a||null==t.return||t.return()}finally{if(c)throw i}}}}(Ls);try{for(t.s();!(n=t.n()).done;){var r=n.value,o=r.pattern,i=r.convert;if(e.match(o))return i(e)}}catch(e){t.e(e)}finally{t.f()}}(n);return t&&e.push(t),e}),[])}),[s]).map((function(e){return ko(e.value,e.params,a,void 0,c)})),p=(0,r.useCallback)((function(e){e&&(e.focus(),e.select())}),[]);return(0,O.jsx)(fn,{children:(0,O.jsxs)(tn,{dismissText:!1,children:[(0,O.jsx)("h2",{children:"Create Typing Sequence"}),(0,O.jsx)("p",{children:"Type a message to generate a sequence of bindings in the macro."}),(0,O.jsx)("textarea",{value:s,ref:p,style:{width:"100%",height:"6rem"},onChange:function(e){return u(e.target.value)}}),(0,O.jsx)("div",{className:as.macroBindings,children:f.map((function(e,n){return(0,O.jsx)(r.Fragment,{children:(0,O.jsx)(st,{selectable:!1,children:(0,O.jsx)(mo,{node:e.params[0],onSelect:function(){}})})},n)}))}),(0,O.jsxs)("div",{className:as.macroActions,children:[(0,O.jsx)(Ge,{onClick:function(){return o(f)},children:"Add to macro"}),(0,O.jsx)(Ge,{onClick:function(){return o([])},secondary:!0,children:"Cancel"})]})]})})},Ns=function(e){return e.keyboard.keymap.macros},_s=(0,Zo.oM)({name:"macros",initialState:[],reducers:{addMacro:function(e){e.push({identifier:"new_macro",label:"new_macro",bindings:[]})},renameMacro:function(e,n){e[n.payload.index].identifier=n.payload.name},deleteMacro:function(e,n){e.splice(n.payload.index,1)},addMacroControlBinding:function(e,n){e[n.payload.macroIndex].bindings.push({value:"&macro_press",params:[]})},addMacroKeyBinding:function(e,n){e[n.payload.macroIndex].bindings.push(n.payload.binding)},updateMacroBinding:function(e,n){e[n.payload.macroIndex].bindings[n.payload.bindIndex]=n.payload.binding},reorderMacroBinding:function(e,n){var t,r,o;e[n.payload.macroIndex].bindings=(t=e[n.payload.macroIndex].bindings,r=n.payload.bindIndex,-1===(o=n.payload.targetIndex)?[].concat(hi(t.filter((function(e,n){return n!==r}))),[t[r]]):t.reduce((function(e,n,i){return i===o&&e.push(t[r]),i!==r&&e.push(n),e}),[]))},deleteMacroBinding:function(e,n){e[n.payload.macroIndex].bindings.splice(n.payload.bindIndex,1)},customizeMacroOptions:function(e,n){Object.assign(e[n.payload.macroIndex],n.payload.options)}}}),Ms=_s.actions,Ys=Ms.addMacro,qs=Ms.renameMacro,Zs=Ms.deleteMacro,Ks=Ms.addMacroControlBinding,Us=Ms.addMacroKeyBinding,Gs=Ms.updateMacroBinding,zs=Ms.reorderMacroBinding,Ws=Ms.deleteMacroBinding,Fs=Ms.customizeMacroOptions,Xs=_s.reducer;function Vs(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(e,n)||Qs(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Qs(e,n){if(e){if("string"==typeof e)return Hs(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Hs(e,n):void 0}}function Hs(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function Js(e){var n=e.macroIndex,t=e.bindings,o=e.dispatch,i=Vs((0,r.useState)(null),2),a=i[0],c=i[1],l=Vs((0,r.useState)(!1),2),s=l[0],u=l[1];return(0,r.useEffect)((function(){function e(){c(null)}function n(e){e.stopPropagation(),e.preventDefault()}return document.body.addEventListener("drop",e),document.body.addEventListener("dragover",n),function(){document.body.removeEventListener("drop",e),document.body.removeEventListener("dragover",n)}}),[c]),(0,O.jsxs)(O.Fragment,{children:[(0,O.jsxs)("div",{className:as.macroBindings,children:[t.map((function(e,i){return(0,O.jsx)(r.Fragment,{children:(0,O.jsxs)(st,{"data-index":i,themeClass:rs(e)?as.controlBinding:"",draggable:!0,onDragStart:function(e){return function(e,n){if(e.dataTransfer.items.length)e.dataTransfer.clearData();else{var r=t[n];c({index:n,mode:rs(r)?"row":"col",isControlBinding:rs(r)})}}(e,i)},children:[(0,O.jsx)(Ji,{context:rs(e)?"macros":void 0,value:e.value,params:e.params,onUpdate:function(e){o(Gs({macroIndex:n,bindIndex:i,binding:e}))}}),(0,O.jsx)("div",{className:as.actions,children:(0,O.jsx)(L,{name:"trash",className:as.deleteBind,onClick:Pc((function(){return o(Ws({macroIndex:n,bindIndex:i}))}))})})]},i)},i)})),(0,O.jsx)(Es,{dragging:a,bindings:t,onDrop:function(e){o(zs({macroIndex:n,bindIndex:a.index,targetIndex:e})),c(null)}})]}),s&&(0,O.jsx)(Rs,{onClose:function(e){u(!1);var t,r=function(e,n){var t="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!t){if(Array.isArray(e)||(t=Qs(e))){t&&(e=t);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,c=!1;return{s:function(){t=t.call(e)},n:function(){var e=t.next();return a=e.done,e},e:function(e){c=!0,i=e},f:function(){try{a||null==t.return||t.return()}finally{if(c)throw i}}}}(e);try{for(r.s();!(t=r.n()).done;){var i=t.value;o(Us({macroIndex:n,binding:i}))}}catch(e){r.e(e)}finally{r.f()}}}),(0,O.jsxs)("div",{className:as.macroActions,children:[(0,O.jsx)(Ge,{onClick:function(){return o(Ks({macroIndex:n}))},children:"Add Control Binding"}),(0,O.jsx)(Ge,{onClick:function(){o(Us({binding:{value:"&kp",params:[]},macroIndex:n}))},children:"Add Key Binding"}),(0,O.jsx)(Ge,{onClick:function(){return u(!0)},children:"Add String Sequence"})]})]})}Js.propTypes={bindings:E().array.isRequired,macroIndex:E().number.isRequired,dispatch:E().func.isRequired};var $s=Js;function eu(e){return eu="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},eu(e)}function nu(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function tu(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?nu(Object(t),!0).forEach((function(n){ru(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):nu(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function ru(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==eu(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==eu(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===eu(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function ou(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var iu=function(e){var n,t,o=e.macro,i=e.onUpdate,a=(n=(0,r.useState)(Sn()(o,["label","waitMs","tapMs"])),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||function(e,n){if(e){if("string"==typeof e)return ou(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?ou(e,n):void 0}}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),c=a[0],l=a[1];return(0,O.jsx)(fn,{children:(0,O.jsxs)(tn,{onDismiss:function(){i(c)},children:[(0,O.jsxs)("h2",{children:["Customize [",(0,O.jsx)("code",{children:o.identifier}),"]"]}),(0,O.jsxs)("div",{children:[(0,O.jsxs)("div",{className:as.field,children:[(0,O.jsx)("label",{htmlFor:"customize-macro-label",children:"Label"}),(0,O.jsx)("input",{id:"customize-macro-label",value:c.label,onChange:function(e){return l((function(n){return tu(tu({},n),{},{label:e.target.value})}))}})]}),(0,O.jsxs)("div",{className:as.field,children:[(0,O.jsx)("label",{htmlFor:"customize-macro-wait",children:"Wait (ms)"}),(0,O.jsx)("input",{id:"customize-macro-wait",type:"number",placeholder:"Default",value:c.waitMs,onChange:function(e){return l((function(n){return tu(tu({},n),{},{waitMs:""===e.target.value?void 0:Number(e.target.value)})}))}})]}),(0,O.jsxs)("div",{className:as.field,children:[(0,O.jsx)("label",{htmlFor:"customize-macro-tap",children:"Tap (ms)"}),(0,O.jsx)("input",{id:"customize-macro-tap",type:"number",placeholder:"Default",value:c.tapMs,onChange:function(e){return l((function(n){return tu(tu({},n),{},{tapMs:""===e.target.value?void 0:Number(e.target.value)})}))}})]})]})]})})};function au(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function cu(e){var n,t,o=e.index,i=e.macro,a=e.dispatch,c=(n=(0,r.useState)(!1),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||function(e,n){if(e){if("string"==typeof e)return au(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?au(e,n):void 0}}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),l=c[0],s=c[1],u=(0,r.useContext)(j).identifiers;return(0,O.jsxs)("div",{className:as.macro,children:[l&&(0,O.jsx)(iu,{macro:i,onUpdate:function(e){s(!1),a(Fs({macroIndex:o,options:e}))}}),(0,O.jsxs)("div",{className:as.heading,children:[(0,O.jsx)(Mc,{value:i.identifier,validate:function(e){return da(e)||(u.includes(e)?'Cannot use existing identifier "'.concat(e,'"'):null)},render:function(e){return(0,O.jsx)("h5",{children:(0,O.jsx)("code",{children:e})})},onUpdate:function(e){return a(qs({index:o,name:e}))}}),(0,O.jsxs)("div",{children:[(0,O.jsx)(L,{name:"wrench",className:"".concat(as.action),onClick:function(){return s(!0)}}),(0,O.jsx)(L,{name:"trash-can",className:"".concat(as.action," ").concat(as.remove),onClick:function(){return a(Zs({index:o}))}})]})]}),(0,O.jsx)($s,{macroIndex:o,bindings:i.bindings,dispatch:a})]})}cu.propTypes={index:E().number.isRequired,macro:E().shape({identifier:E().string,bindings:E().array.isRequired}).isRequired,dispatch:E().func.isRequired};var lu=cu,su=function(){var e=(0,i.v9)(Ns),n=(0,i.I0)();return(0,O.jsxs)("div",{className:as.main,children:[(0,O.jsxs)("div",{className:as.sidebar,children:[(0,O.jsxs)(Xa,{external:!0,href:"https://zmk.dev/docs/behaviors/macros",children:[(0,O.jsx)(L,{name:"book"})," ZMK Docs: Macros"]}),(0,O.jsx)(Ge,{onClick:function(){return n(Ys())},children:"Add New Macro"})]}),e.map((function(e,t){return(0,O.jsx)(lu,{macro:e,index:t,dispatch:n},t)}))]})},uu={},fu=E().string.isRequired,pu=E().arrayOf(E().shape(uu));uu.value=fu,uu.params=pu;var du=E().shape(uu),yu=E().shape({identifier:E().string,index:E().number,bindings:E().arrayOf(du),keyPositions:E().arrayOf(E().number).isRequired}),hu=E().shape({index:E().number,name:E().string,identifier:E().string,bindings:E().arrayOf(du).isRequired,sensorBindings:E().arrayOf(du)}),mu=E().shape({layers:E().arrayOf(hu).isRequired,combos:E().arrayOf(yu)}),bu=t(7739),Au=t.n(bu);function vu(e){return e.every((function(e){return void 0===e.row&&void 0===e.col}))?["Layout in info.json has no row/col definitions. Generated keymap files will not be nicely formatted."]:[]}var gu=t(2024);function xu(e){return xu="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},xu(e)}function ju(e){return function(e){if(Array.isArray(e))return Cu(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,n){if(e){if("string"==typeof e)return Cu(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Cu(e,n):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Cu(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function wu(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Eu(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==xu(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==xu(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===xu(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Ou(e,n){var t=Au()(e,n);return Object.values(t).filter((function(e){return e.length>1}))}function ku(e){var n=e.layers.map((function(e,n){return{location:"Keymap - Layer #".concat(n," (").concat(e.name,")"),path:"keymap.layers[".concat(n,"]"),name:e.name}})),t=e.combos.map((function(e,n){return{location:"Combos - Combo #".concat(n," (").concat(e.identifier,")"),path:"combos[".concat(n,"].name"),name:e.identifier}})),r=e.macros.map((function(e,n){return{location:"Macros - Macro #".concat(n," (").concat(e.identifier,")"),path:"macros[".concat(n,"].name"),name:e.identifier}})),o=function(e){return e.map((function(e,n){return{location:"Behaviors - Behavior #".concat(n," (").concat(e.labels[0],") - Name"),path:"behaviors[".concat(n,"].name"),name:e.name}}))}(e.behaviors),i=[].concat(ju(Ou(n,"name")),ju(Ou(t,"name")),ju(Ou(r,"name")),ju(Ou(o,"name"))),a=[].concat(ju(n.filter((function(e){return gu.includes(e.name)}))),ju(t.filter((function(e){return gu.includes(e.name)}))),ju(r.filter((function(e){return gu.includes(e.name)}))),ju(o.filter((function(e){return gu.includes(e.name)}))));return{duplicates:i,redefined:a,passwordMacros:ju(r.filter((function(e){return n=e.name,[/(^|[\b_])pass(word)?([\b_]|$)/].some((function(e){return n.match(e)}));var n})))}}function Su(e){var n=Ou([].concat(e.layers.reduce((function(e,n,t){return n.label&&e.push({location:"Keymap - Layer #".concat(t," (").concat(n.name,")"),path:"keymap.layers[".concat(t,"].label"),label:n.label}),e}),[]),e.macros.reduce((function(e,n,t){return n.label&&e.push({location:"Macros - Macro #".concat(t," (").concat(n.identifier,") - Label"),path:"macros[".concat(t,"].label"),label:n.label}),e}),[]),function(e){return e.reduce((function(e,n,t){return n.label&&e.push({location:"Behaviors - Behavior #".concat(t," (").concat(n.labels[0],") - Label"),path:"behaviors[".concat(t,"].label"),label:n.properties.label.parsed}),e}),[])}(e.behaviors)),"label");return{duplicates:n}}function Bu(e){var n=Au()([].concat(e.macros.map((function(e,n){return{location:"Macros > Macro #".concat(n," (").concat(e.identifier,")"),path:"macros[".concat(n,"].name"),ref:e.identifier}})),function(e){return e.map((function(e,n){return{location:"Behaviors - Behavior #".concat(n," (").concat(e.labels[0],") - Bind"),path:"behaviors[".concat(n,"].bind"),ref:e.labels[0]}}))}(e.behaviors)),"ref");return{duplicates:Object.values(n).reduce((function(e,n){return n.length>1&&e.push(Q()(n,"path")),e}),[])}}var Pu=t(79577),Iu={};Iu.styleTagTransform=b(),Iu.setAttributes=d(),Iu.insert=f().bind(null,"head"),Iu.domAPI=s(),Iu.insertStyleElement=h(),c()(Pu.Z,Iu);var Tu=Pu.Z&&Pu.Z.locals?Pu.Z.locals:void 0;function Lu(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function Du(e){return e.location}function Ru(e){var n,t,o=e.name,i=e.explanation,a=e.warnings,c=e.renderWarning,l=void 0===c?Du:c,s=(n=(0,r.useState)(0===a.length),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||function(e,n){if(e){if("string"==typeof e)return Lu(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Lu(e,n):void 0}}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),u=s[0],f=s[1];return(0,O.jsxs)("div",{className:et()([Tu.warningCategory,0===a.length&&Tu.emptyCategory,u&&Tu.collapsedCategory]).join(" "),children:[(0,O.jsxs)("h3",{onClick:function(){return f(!u)},children:[(0,O.jsx)(L,{className:Tu.caret,name:"caret-down"})," "," ",o," ",(0,O.jsxs)("em",{children:["(",a.length," issues)"]})]}),(0,O.jsxs)("div",{className:Tu.warningDetails,children:[(0,O.jsx)("blockquote",{children:i}),a.length>0?(0,O.jsx)("ul",{children:a.map((function(e,n){return(0,O.jsx)("li",{children:l(e)},n)}))}):(0,O.jsx)("p",{children:"No problems"})]})]})}var Nu=(0,O.jsx)(Xa,{external:!0,href:"https://github.com/nickcoutsos/keymap-editor/issues",children:"issue"}),_u=function(e){var n=e.sanityChecks,t=n.nodeNames,r=n.nodeLabels,o=n.nodeReferences,i=n.layoutMissingPositions;return(0,O.jsxs)("div",{style:{maxWidth:"700px",margin:"0 auto",paddingBottom:"60px"},children:[(0,O.jsx)("h2",{children:"Warnings"}),(0,O.jsx)(Ru,{name:"Layout row/col positions",warnings:i,explanation:(0,O.jsxs)(O.Fragment,{children:[(0,O.jsx)("p",{children:(0,O.jsxs)("em",{children:["Your keyboard's layout metadata should include a ",(0,O.jsx)("code",{children:"row"}),"and ",(0,O.jsx)("code",{children:"col"})," property for each key in order to generate a readable keymap ",(0,O.jsx)("code",{children:"bindings"})," array."]})}),(0,O.jsxs)("p",{children:["For more information see ",(0,O.jsx)(Xa,{external:!0,href:"https://github.com/nickcoutsos/keymap-editor/wiki/Defining-keyboard-layouts",children:"Keymap Editor Wiki"}),"."]})]}),renderWarning:function(){}}),(0,O.jsx)(Ru,{name:"Duplicate node names",warnings:t.duplicates,explanation:(0,O.jsx)("p",{children:(0,O.jsx)("em",{children:"Node names must within the same section must be unique."})}),renderWarning:function(e){return(0,O.jsxs)(O.Fragment,{children:[(0,O.jsxs)("h4",{children:["Name ",(0,O.jsx)("code",{children:e[0].name})," re-used in:"]}),(0,O.jsx)("ul",{children:e.map((function(e,n){return(0,O.jsx)("li",{children:e.location},n)}))})]})}}),(0,O.jsx)(Ru,{name:"Re-definitions",warnings:t.redefined,explanation:(0,O.jsx)("p",{children:(0,O.jsx)("em",{children:"Node names cannot use existing ZMK identifiers."})})}),(0,O.jsx)(Ru,{name:"Macro Passwords",warnings:t.passwordMacros,explanation:(0,O.jsxs)(O.Fragment,{children:[(0,O.jsx)("p",{children:(0,O.jsx)("em",{children:"Using keyboard macros to enter passwords is a security risk and is strongly discouraged."})}),(0,O.jsx)("p",{children:"Recording passwords in your keyboard means that anyone with physical access to your keyboard would have access to credentials stored within it, whether they know to look for it or not. Also note that through this application you are recording keyboard configuration in a Git repository and storing credentials in a code repository is not considered a safe practice (even if the repository is private)."}),(0,O.jsxs)("p",{children:["Any macros listed here have names which seem to suggest that they are used for password entry. If that is the case I would encourage you to remove them and change the associated password(s) if needed. If this is a mistake feel free to create an ",Nu," to help me avoid false alarms in the future!"]})]})}),(0,O.jsx)(Ru,{name:"Duplicate labels",warnings:r.duplicates,explanation:(0,O.jsx)("p",{children:(0,O.jsx)("em",{children:"Label property values must be unique throughout the entire keymap."})}),renderWarning:function(e){return(0,O.jsxs)(O.Fragment,{children:[(0,O.jsxs)("h4",{children:["Name ",(0,O.jsx)("code",{children:e[0].label})," re-used in:"]}),(0,O.jsx)("ul",{children:e.map((function(e,n){return(0,O.jsx)("li",{children:e.location},n)}))})]})}}),(0,O.jsx)(Ru,{name:"Duplicate node references",warnings:o.duplicates,explanation:(0,O.jsx)("p",{children:(0,O.jsx)("em",{children:"Node references must be unique throughout the entire keymap."})}),renderWarning:function(e){return(0,O.jsxs)(O.Fragment,{children:[(0,O.jsxs)("h4",{children:["Reference ",(0,O.jsxs)("code",{children:["&",e[0].ref]})," re-used in:"]}),(0,O.jsx)("ul",{children:e.map((function(e,n){return(0,O.jsx)("li",{children:e.location},n)}))})]})}})]})};function Mu(e){return function(e){if(Array.isArray(e))return qu(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||Yu(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Yu(e,n){if(e){if("string"==typeof e)return qu(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?qu(e,n):void 0}}function qu(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function Zu(e){var n,t,o=e.text,i=e.tabs,a=e.defaultTab,c=e.children,l=(n=(0,r.useState)(a),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||Yu(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),s=l[0],u=l[1];return(0,O.jsxs)(O.Fragment,{children:[(0,O.jsx)("h3",{style:{display:"inline"},children:o}),(0,O.jsx)("ul",{className:In.editorModeTabs,children:i.map((function(e,n){var t=e.name,r=e.tabClasses,o=void 0===r?[]:r;return(0,O.jsx)("li",{onClick:function(){return u(n)},className:(0,q.compact)([s===n&&In.activeEditTab].concat(Mu(o))).join(" "),children:t},n)}))}),c[s]]})}var Ku=function(e){return e.keyboard.keymap};function Uu(e){var n=(0,i.v9)(Ku),t=(0,r.useContext)(It).layout,o=e.sensors,a=(0,r.useMemo)((function(){return function(e,n){return function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?wu(Object(t),!0).forEach((function(n){Eu(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):wu(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}({nodeNames:ku(e),nodeLabels:Su(e),nodeReferences:Bu(e)},function(e){return{layoutMissingPositions:vu(e)}}(n))}(n,t)}),[n,t]),c=(0,r.useMemo)((function(){var e=a.nodeNames,n=a.nodeLabels,t=a.nodeReferences,r=a.layoutMissingPositions;return e.duplicates.length+e.redefined.length+e.passwordMacros.length+n.duplicates.length+t.duplicates.length+r.length}),[a]),l=(0,q.compact)([{name:"layers",component:(0,O.jsx)(ts,{sensors:o})},{name:"combos",component:(0,O.jsx)(sl,{})},{name:"macros",component:(0,O.jsx)(su,{})},{name:(0,O.jsx)("span",{className:In.beta,children:"behaviors"}),component:(0,O.jsx)(gc,{})},c>0&&{name:"warnings (".concat(c,")"),tabClasses:[In.warningTab],component:(0,O.jsx)(_u,{sanityChecks:a})}]);return(0,O.jsx)(De,{keymap:n,children:(0,O.jsx)(Zu,{text:"Editor mode:",tabs:l,defaultTab:0,children:l.map((function(e,n){return(0,O.jsx)(r.Fragment,{children:e.component},n)}))})})}Uu.propTypes={keymap:mu};var Gu=Uu,zu=t(2746),Wu={};Wu.styleTagTransform=b(),Wu.setAttributes=d(),Wu.insert=f().bind(null,"head"),Wu.domAPI=s(),Wu.insertStyleElement=h(),c()(zu.Z,Wu);var Fu=zu.Z&&zu.Z.locals?zu.Z.locals:void 0,Xu="https://github.com/nickcoutsos/keymap-editor";function Vu(){return(0,O.jsxs)("div",{className:Fu.wrapper,children:[(0,O.jsx)("label",{children:"Need help? Open an issue:"}),(0,O.jsxs)("a",{className:Fu.githubLink,target:"_blank",rel:"noreferrer",href:Xu,children:[(0,O.jsx)(L,{collection:"brands",name:"github"}),"/nickcoutsos/keymap-editor"]})]})}function Qu(e){return Qu="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Qu(e)}function Hu(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Ju(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Hu(Object(t),!0).forEach((function(n){$u(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Hu(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function $u(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Qu(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Qu(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Qu(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}var ef={description:{fontStyle:"italic",fontSize:"90%"}};function nf(e){var n=e.settings,t=e.onUpdate,r=e.onClose;function o(e,r){t(Ju(Ju({},n),{},$u({},e,r)))}return(0,O.jsx)(fn,{onDismiss:r,children:(0,O.jsxs)(tn,{onDismiss:r,children:[(0,O.jsx)("h1",{children:"Settings"}),(0,O.jsx)("h2",{children:"Keycode glyphs"}),(0,O.jsx)("h3",{children:(0,O.jsxs)("label",{htmlFor:"enable-unicode-glyphs",children:[(0,O.jsx)("input",{id:"enable-unicode-glyphs",type:"checkbox",checked:n.unicodeGlyphs,onChange:function(e){return o("unicodeGlyphs",e.target.checked)}}),"Use Unicode Glyphs"]})}),(0,O.jsxs)("p",{style:ef.description,children:["Use unicode glyphs for visual representations of keycodes like ",(0,O.jsx)("code",{children:"Enter"})," (⮐), ",(0,O.jsx)("code",{children:"Right Arrow"})," (⏵), etc. You can disable this if the symbols don't render correctly."]}),(0,O.jsx)("h3",{children:(0,O.jsxs)("label",{htmlFor:"platform-specific-glyphs",children:["Platform specific glyphs",(0,O.jsxs)("select",{id:"platform-specific-glyphs",value:n.platformGlyphs||"auto",onChange:function(e){return o("platformGlyphs",e.target.value)},children:[(0,O.jsx)("option",{value:"auto",children:"Automatic"}),(0,O.jsx)("option",{value:"win",children:"Windows"}),(0,O.jsx)("option",{value:"mac",children:"macOS"})]})]})}),(0,O.jsxs)("p",{style:ef.description,children:["Render symbols specific to your platform. E.g., render left/right meta key as ",(0,O.jsx)(L,{name:"windows fa-brands"})," for Windows, or ⌘ for macOS."]})]})})}nf.propTypes={settings:E().object.isRequired,onUpdate:E().func.isRequired,onClose:E().func.isRequired},nf.defaultProps={settings:{}};var tf=nf,rf=t(92127),of={};of.styleTagTransform=b(),of.setAttributes=d(),of.insert=f().bind(null,"head"),of.domAPI=s(),of.insertStyleElement=h(),c()(rf.Z,of);var af=rf.Z&&rf.Z.locals?rf.Z.locals:void 0;function cf(e){return cf="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},cf(e)}var lf=["children"];function sf(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function uf(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?sf(Object(t),!0).forEach((function(n){ff(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):sf(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function ff(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==cf(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==cf(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===cf(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function pf(e){var n=e.children,t=function(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}(e,lf);return(0,O.jsxs)("div",uf(uf({},t),{},{className:af.spinner,children:[(0,O.jsx)("i",{className:"".concat(af.icon," fa fa-spinner")}),n]}))}var df=t(9669),yf=t.n(df),hf=t(26729),mf=t.n(hf);function bf(e){return bf="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},bf(e)}function Af(){Af=function(){return e};var e={},n=Object.prototype,t=n.hasOwnProperty,r=Object.defineProperty||function(e,n,t){e[n]=t.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function l(e,n,t){return Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}),e[n]}try{l({},"")}catch(e){l=function(e,n,t){return e[n]=t}}function s(e,n,t,o){var i=n&&n.prototype instanceof p?n:p,a=Object.create(i.prototype),c=new E(o||[]);return r(a,"_invoke",{value:x(e,t,c)}),a}function u(e,n,t){try{return{type:"normal",arg:e.call(n,t)}}catch(e){return{type:"throw",arg:e}}}e.wrap=s;var f={};function p(){}function d(){}function y(){}var h={};l(h,i,(function(){return this}));var m=Object.getPrototypeOf,b=m&&m(m(O([])));b&&b!==n&&t.call(b,i)&&(h=b);var A=y.prototype=p.prototype=Object.create(h);function v(e){["next","throw","return"].forEach((function(n){l(e,n,(function(e){return this._invoke(n,e)}))}))}function g(e,n){function o(r,i,a,c){var l=u(e[r],e,i);if("throw"!==l.type){var s=l.arg,f=s.value;return f&&"object"==bf(f)&&t.call(f,"__await")?n.resolve(f.__await).then((function(e){o("next",e,a,c)}),(function(e){o("throw",e,a,c)})):n.resolve(f).then((function(e){s.value=e,a(s)}),(function(e){return o("throw",e,a,c)}))}c(l.arg)}var i;r(this,"_invoke",{value:function(e,t){function r(){return new n((function(n,r){o(e,t,n,r)}))}return i=i?i.then(r,r):r()}})}function x(e,n,t){var r="suspendedStart";return function(o,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw i;return{value:void 0,done:!0}}for(t.method=o,t.arg=i;;){var a=t.delegate;if(a){var c=j(a,t);if(c){if(c===f)continue;return c}}if("next"===t.method)t.sent=t._sent=t.arg;else if("throw"===t.method){if("suspendedStart"===r)throw r="completed",t.arg;t.dispatchException(t.arg)}else"return"===t.method&&t.abrupt("return",t.arg);r="executing";var l=u(e,n,t);if("normal"===l.type){if(r=t.done?"completed":"suspendedYield",l.arg===f)continue;return{value:l.arg,done:t.done}}"throw"===l.type&&(r="completed",t.method="throw",t.arg=l.arg)}}}function j(e,n){var t=n.method,r=e.iterator[t];if(void 0===r)return n.delegate=null,"throw"===t&&e.iterator.return&&(n.method="return",n.arg=void 0,j(e,n),"throw"===n.method)||"return"!==t&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+t+"' method")),f;var o=u(r,e.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,f;var i=o.arg;return i?i.done?(n[e.resultName]=i.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=void 0),n.delegate=null,f):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,f)}function C(e){var n={tryLoc:e[0]};1 in e&&(n.catchLoc=e[1]),2 in e&&(n.finallyLoc=e[2],n.afterLoc=e[3]),this.tryEntries.push(n)}function w(e){var n=e.completion||{};n.type="normal",delete n.arg,e.completion=n}function E(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(C,this),this.reset(!0)}function O(e){if(e){var n=e[i];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,o=function n(){for(;++r<e.length;)if(t.call(e,r))return n.value=e[r],n.done=!1,n;return n.value=void 0,n.done=!0,n};return o.next=o}}return{next:k}}function k(){return{value:void 0,done:!0}}return d.prototype=y,r(A,"constructor",{value:y,configurable:!0}),r(y,"constructor",{value:d,configurable:!0}),d.displayName=l(y,c,"GeneratorFunction"),e.isGeneratorFunction=function(e){var n="function"==typeof e&&e.constructor;return!!n&&(n===d||"GeneratorFunction"===(n.displayName||n.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,y):(e.__proto__=y,l(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},e.awrap=function(e){return{__await:e}},v(g.prototype),l(g.prototype,a,(function(){return this})),e.AsyncIterator=g,e.async=function(n,t,r,o,i){void 0===i&&(i=Promise);var a=new g(s(n,t,r,o),i);return e.isGeneratorFunction(t)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},v(A),l(A,c,"Generator"),l(A,i,(function(){return this})),l(A,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var n=Object(e),t=[];for(var r in n)t.push(r);return t.reverse(),function e(){for(;t.length;){var r=t.pop();if(r in n)return e.value=r,e.done=!1,e}return e.done=!0,e}},e.values=O,E.prototype={constructor:E,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(w),!e)for(var n in this)"t"===n.charAt(0)&&t.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function r(t,r){return a.type="throw",a.arg=e,n.next=t,r&&(n.method="next",n.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var c=t.call(i,"catchLoc"),l=t.call(i,"finallyLoc");if(c&&l){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(e,n){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&t.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=n&&n<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=n,i?(this.method="next",this.next=i.finallyLoc,f):this.complete(a)},complete:function(e,n){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&n&&(this.next=n),f},finish:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.finallyLoc===e)return this.complete(t.completion,t.afterLoc),w(t),f}},catch:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.tryLoc===e){var r=t.completion;if("throw"===r.type){var o=r.arg;w(t)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,t){return this.delegate={iterator:O(e),resultName:n,nextLoc:t},"next"===this.method&&(this.arg=void 0),f}},e}function vf(e,n,t,r,o,i,a){try{var c=e[i](a),l=c.value}catch(e){return void t(e)}c.done?n(l):Promise.resolve(l).then(r,o)}function gf(e){return function(){var n=this,t=arguments;return new Promise((function(r,o){var i=e.apply(n,t);function a(e){vf(i,r,o,a,c,"next",e)}function c(e){vf(i,r,o,a,c,"throw",e)}a(void 0)}))}}function xf(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,Of(r.key),r)}}function jf(e,n){return jf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,n){return e.__proto__=n,e},jf(e,n)}function Cf(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function wf(e){return wf=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},wf(e)}function Ef(e,n,t){return(n=Of(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Of(e){var n=function(e,n){if("object"!==bf(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==bf(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===bf(n)?n:String(n)}var kf="".concat(ee.replace("http","ws"),"/github/events"),Sf=function(e){!function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),n&&jf(e,n)}(p,e);var n,t,r,o,i,a,c,l,s,u,f=(s=p,u=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,n=wf(s);if(u){var t=wf(this).constructor;e=Reflect.construct(n,arguments,t)}else e=n.apply(this,arguments);return function(e,n){if(n&&("object"===bf(n)||"function"==typeof n))return n;if(void 0!==n)throw new TypeError("Derived constructors may only return object or undefined");return Cf(e)}(this,e)});function p(){var e;!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,p);for(var n=arguments.length,t=new Array(n),r=0;r<n;r++)t[r]=arguments[r];return Ef(Cf(e=f.call.apply(f,[this].concat(t))),"token",null),Ef(Cf(e),"initializing",!1),Ef(Cf(e),"installations",null),Ef(Cf(e),"repositories",null),Ef(Cf(e),"repoInstallationMap",null),Ef(Cf(e),"features",null),Ef(Cf(e),"socket",null),e}return n=p,t=[{key:"_request",value:(l=gf(Af().mark((function e(n){var t;return Af().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return"string"==typeof n&&(n={url:n}),n.url.startsWith("/")&&(n.url="".concat(ee).concat(n.url)),n.headers=Object.assign({},n.headers),this.token&&!n.headers.Authorization&&(n.headers.Authorization="Bearer ".concat(this.token)),e.prev=4,e.next=7,yf()(n);case 7:return e.abrupt("return",e.sent);case 10:throw e.prev=10,e.t0=e.catch(4),401===(null===(t=e.t0.response)||void 0===t?void 0:t.status)&&(console.error("Authentication failed."),this.emit("authentication-failed",e.t0.response)),e.t0;case 14:case"end":return e.stop()}}),e,this,[[4,10]])}))),function(e){return l.apply(this,arguments)})},{key:"init",value:function(){var e=this;return this.initializing||(this.initializing=gf(Af().mark((function n(){var t,r,o,i,a,c;return Af().wrap((function(n){for(;;)switch(n.prev=n.next){case 0:if(e.initEvents(),t="".concat(ee,"/github/installation"),(r=new URLSearchParams(window.location.search)).get("setup_action")&&r.get("installation_id")&&e.beginLoginFlow(),!r.get("blocked")){n.next=7;break}return setTimeout((function(){return e.emit("blocked")})),n.abrupt("return");case 7:if(o=r.get("token"),!window.localStorage.auth_token&&o&&(window.history.replaceState({},null,window.location.pathname),window.localStorage.auth_token=o),!window.localStorage.auth_token){n.next=22;break}return e.token=window.localStorage.auth_token,n.next=13,e._request(t);case 13:i=n.sent,a=i.data,c=a.installations.filter((function(e){return e.suspended_at})),a.installations.length===c.length&&(console.warn("No GitHub app installation found for authenticated user."),e.emit("app-not-installed")),e.username=a.username,e.installations=a.installations,e.repositories=a.repositories,e.repoInstallationMap=a.repoInstallationMap,e.emit("authenticated");case 22:case"end":return n.stop()}}),n)})))()),this.initializing}},{key:"initEvents",value:function(){var e=this,n=[],t=function(t){e.socket.readyState!==window.WebSocket.OPEN?(n.push(t),console.log("buffering websocket message",{readyState:e.socket.readyState},t)):e.socket.send(t)};this.socket=new window.WebSocket(kf),this.socket.onopen=function(){console.log(new Date,"connected to console"),function(){for(var t;t=n.shift();)console.log("sending buffered websocket message",t),e.socket.send(t)}(),setInterval((function(){t(JSON.stringify({message:"ping"}))}),2e4)},this.socket.onclose=function(){return console.log(new Date,"disconnected from server")},this.socket.onerror=function(e){return console.error(new Date,e)},this.socket.onmessage=function(n){var t=JSON.parse(n.data);"workflow_run"===t.event&&e.emit("build-update",t.workflow_run)},this.on("authenticated",(function(){var n;null!==(n=e.installations)&&void 0!==n&&n.length&&(e.fetchAvailableFeatures(),t(JSON.stringify({message:"authorize",data:e.token})))}))}},{key:"beginLoginFlow",value:function(){window.localStorage.removeItem("auth_token"),window.location.href="".concat(ee,"/github/authorize")}},{key:"beginInstallAppFlow",value:function(){window.location.href="https://github.com/apps/".concat("keymap-editor","/installations/new")}},{key:"manageInstallationRepos",value:function(e){var n=this.installations.find((function(n){return n.id===e}));window.location.href=n.html_url}},{key:"isGitHubAuthorized",value:function(){return!!this.token}},{key:"isAppSuspendedForRepoSelection",value:function(){var e,n,t;return(null===(e=this.installations)||void 0===e?void 0:e.length)>0&&(null===(n=this.installations)||void 0===n?void 0:n.every((function(e){return e.suspended_at})))&&(null===(t=this.installations)||void 0===t?void 0:t.some((function(e){return"all"===e.repository_selection})))}},{key:"isAppInstalled",value:function(){var e,n;return(null===(e=this.installations)||void 0===e?void 0:e.length)&&(null===(n=this.repositories)||void 0===n?void 0:n.length)}},{key:"fetchRepoBranches",value:(c=gf(Af().mark((function e(n){var t,r,o,i;return Af().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=encodeURIComponent(this.repoInstallationMap[n.full_name]),r=encodeURIComponent(n.full_name),e.next=4,this._request("/github/installation/".concat(t,"/").concat(r,"/branches"));case 4:return o=e.sent,i=o.data,e.abrupt("return",i);case 7:case"end":return e.stop()}}),e,this)}))),function(e){return c.apply(this,arguments)})},{key:"fetchBranchKeyboards",value:(a=gf(Af().mark((function e(n,t){var r,o,i,a;return Af().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=encodeURIComponent(this.repoInstallationMap[n.full_name]),o=encodeURIComponent(n.full_name),e.next=4,this._request("/github/installation/".concat(r,"/").concat(o,"/keyboards/").concat(t));case 4:return i=e.sent,a=i.data,e.abrupt("return",a);case 7:case"end":return e.stop()}}),e,this)}))),function(e,n){return a.apply(this,arguments)})},{key:"fetchLayoutAndKeymap",value:(i=gf(Af().mark((function e(n,t){var r,o,i,a,c,l,s,u,f,p,d,y,h,m,b,A=arguments;return Af().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=(A.length>2&&void 0!==A[2]?A[2]:{}).keyboard,o=encodeURIComponent(this.repoInstallationMap[n]),i=encodeURIComponent(n),a=new URL("".concat(ee,"/github/keyboard-files/").concat(o,"/").concat(i)),c=new URLSearchParams,t&&c.set("branch",t),r&&c.set("keyboard",r),a.search=c.toString(),e.prev=8,e.next=11,this._request(a.toString());case 11:return l=e.sent,s=l.data,u=s.info.layouts,f=s.keymap,p=Object.keys(s.info.layouts)[0],d=f.chosen["zmk,matrix_transform"]?f.chosen["zmk,matrix_transform"].replace(/^&/,""):null,y=u[d]||u[p],h=y.layout,e.abrupt("return",{layoutMetadata:y,layout:h,keymap:f,keyboards:s.keyboards,default:s.defaultKeymap,sensors:s.sensors});case 21:throw e.prev=21,e.t0=e.catch(8),400===(null===(m=e.t0.response)||void 0===m?void 0:m.status)?(console.error("Failed to load keymap and layout from github",e.t0.response.data),this.emit("repo-validation-error",e.t0.response.data)):500===(null===(b=e.t0.response)||void 0===b?void 0:b.status)&&"LayoutGenerationError"===e.t0.response.data.name&&this.emit("layout-generation-failed",e.t0.response.data),e.t0;case 25:case"end":return e.stop()}}),e,this,[[8,21]])}))),function(e,n){return i.apply(this,arguments)})},{key:"fetchAvailableFeatures",value:(o=gf(Af().mark((function e(){var n,t;return Af().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(this.isGitHubAuthorized()){e.next=2;break}return e.abrupt("return",{betaFeatures:[]});case 2:return this.features||(this.features=this._request("".concat(ee,"/github/features"))),e.next=5,this.features;case 5:return n=e.sent,t=n.data,e.abrupt("return",t);case 8:case"end":return e.stop()}}),e,this)}))),function(){return o.apply(this,arguments)})},{key:"fetchBuildStatus",value:(r=gf(Af().mark((function e(n,t){var r,o,i,a,c;return Af().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=encodeURIComponent(this.repoInstallationMap[n]),o=encodeURIComponent(n),i=new URL("".concat(ee,"/github/latest-run/").concat(r,"/").concat(o,"/").concat(encodeURIComponent(t))),e.next=5,this._request(i.toString());case 5:return a=e.sent,c=a.data,e.abrupt("return",c);case 8:case"end":return e.stop()}}),e,this)}))),function(e,n){return r.apply(this,arguments)})},{key:"commitChanges",value:function(e,n,t,r){var o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{},i=o.message,a=void 0===i?null:i,c=o.experimentalSettings,l=void 0===c?{}:c,s=o.keyboard,u=encodeURIComponent(this.repoInstallationMap[e]),f=encodeURIComponent(e),p=new URL("".concat(ee,"/github/keyboard-files/").concat(u,"/").concat(f,"/").concat(encodeURIComponent(n))),d=l.enableBehaviorEditing,y=void 0!==d&&d,h=new URLSearchParams({enableBehaviorEditing:y});return s&&h.set("keyboard",s),p.search=h.toString(),this._request({url:p.toString(),method:"POST",headers:{"Content-Type":"application/json"},data:{keyboard:s,layout:t,keymap:r,message:a,enableBehaviorEditing:y}})}}],t&&xf(n.prototype,t),Object.defineProperty(n,"prototype",{writable:!1}),p}(mf()),Bf=new Sf,Pf=t(30381),If=t.n(Pf),Tf=t(80047),Lf={};Lf.styleTagTransform=b(),Lf.setAttributes=d(),Lf.insert=f().bind(null,"head"),Lf.domAPI=s(),Lf.insertStyleElement=h(),c()(Tf.Z,Lf);var Df=Tf.Z&&Tf.Z.locals?Tf.Z.locals:void 0;function Rf(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var Nf=["success"],_f=["action_required","cancelled","failure","skipped","stale","timed_out"];function Mf(e){var n,t,o=e.timestamp,i=(n=(0,r.useState)(If()(o).fromNow()),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||function(e,n){if(e){if("string"==typeof e)return Rf(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Rf(e,n):void 0}}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=i[0],c=i[1];return(0,r.useEffect)((function(){c(If()(o).fromNow());var e=setInterval((function(){c(If()(o).fromNow())}),6e4);return function(){return clearInterval(e)}}),[o,c]),(0,O.jsx)("span",{title:o.toISOString(),children:a})}function Yf(e){var n=e.latestRun,t=Nf.includes(n.conclusion)?(0,O.jsx)(L,{name:"check"}):_f.includes(n.conclusion)?(0,O.jsx)(L,{name:"xmark"}):(0,O.jsx)(pf,{});return(0,O.jsxs)(Xa,{href:n.html_url,className:Df.buildDetails,external:!0,showExternal:!1,children:[(0,O.jsxs)("span",{className:Df.buildSummary,children:["Firmware build (",(0,O.jsx)("code",{children:n.head_sha.slice(0,5)}),") ",t,(0,O.jsx)("br",{}),(0,O.jsx)(Mf,{timestamp:new Date(n.updated_at)})]}),(0,O.jsx)(L,{name:"file-arrow-down",className:[Df.buildStatus,Df.buildSuccess].join(" ")})]})}Yf.propTypes={latestRun:E().shape({id:E().number.isRequired,name:E().string.isRequired,head_sha:E().string.isRequired,status:E().oneOf(["completed","action_required","cancelled","failure","neutral","skipped","stale","success","timed_out","in_progress","queued","requested","waiting"]).isRequired,conclusion:E().oneOf([null,"action_required","cancelled","failure","neutral","success","skipped","stale","timed_out"]),created_at:E().string.isRequired,updated_at:E().string.isRequired})};var qf=Yf;function Zf(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function Kf(e){var n,t,o=e.onConfirm,i=e.onCancel,a=(n=(0,r.useState)(""),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||function(e,n){if(e){if("string"==typeof e)return Zf(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Zf(e,n):void 0}}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),c=a[0],l=a[1];return(0,O.jsx)(fn,{children:(0,O.jsxs)(tn,{dismissText:null,children:[(0,O.jsx)("h2",{children:"Commit keymap changes"}),(0,O.jsx)("textarea",{style:{width:"100%"},placeholder:"Message (optional)",value:c,onChange:function(e){l(e.target.value)}}),(0,O.jsxs)("p",{style:{textAlign:"center",gap:"10px"},children:[(0,O.jsx)(Ge,{onClick:function(){return o(c)},children:"Commit"}),(0,O.jsx)(Ge,{onClick:i,secondary:!0,children:"Cancel"})]})]})})}Kf.propTypes={onConfirm:E().func.isRequired,onCancel:E().func.isRequired};var Uf=Kf;function Gf(e){return Gf="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Gf(e)}function zf(){zf=function(){return e};var e={},n=Object.prototype,t=n.hasOwnProperty,r=Object.defineProperty||function(e,n,t){e[n]=t.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function l(e,n,t){return Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}),e[n]}try{l({},"")}catch(e){l=function(e,n,t){return e[n]=t}}function s(e,n,t,o){var i=n&&n.prototype instanceof p?n:p,a=Object.create(i.prototype),c=new E(o||[]);return r(a,"_invoke",{value:x(e,t,c)}),a}function u(e,n,t){try{return{type:"normal",arg:e.call(n,t)}}catch(e){return{type:"throw",arg:e}}}e.wrap=s;var f={};function p(){}function d(){}function y(){}var h={};l(h,i,(function(){return this}));var m=Object.getPrototypeOf,b=m&&m(m(O([])));b&&b!==n&&t.call(b,i)&&(h=b);var A=y.prototype=p.prototype=Object.create(h);function v(e){["next","throw","return"].forEach((function(n){l(e,n,(function(e){return this._invoke(n,e)}))}))}function g(e,n){function o(r,i,a,c){var l=u(e[r],e,i);if("throw"!==l.type){var s=l.arg,f=s.value;return f&&"object"==Gf(f)&&t.call(f,"__await")?n.resolve(f.__await).then((function(e){o("next",e,a,c)}),(function(e){o("throw",e,a,c)})):n.resolve(f).then((function(e){s.value=e,a(s)}),(function(e){return o("throw",e,a,c)}))}c(l.arg)}var i;r(this,"_invoke",{value:function(e,t){function r(){return new n((function(n,r){o(e,t,n,r)}))}return i=i?i.then(r,r):r()}})}function x(e,n,t){var r="suspendedStart";return function(o,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw i;return{value:void 0,done:!0}}for(t.method=o,t.arg=i;;){var a=t.delegate;if(a){var c=j(a,t);if(c){if(c===f)continue;return c}}if("next"===t.method)t.sent=t._sent=t.arg;else if("throw"===t.method){if("suspendedStart"===r)throw r="completed",t.arg;t.dispatchException(t.arg)}else"return"===t.method&&t.abrupt("return",t.arg);r="executing";var l=u(e,n,t);if("normal"===l.type){if(r=t.done?"completed":"suspendedYield",l.arg===f)continue;return{value:l.arg,done:t.done}}"throw"===l.type&&(r="completed",t.method="throw",t.arg=l.arg)}}}function j(e,n){var t=n.method,r=e.iterator[t];if(void 0===r)return n.delegate=null,"throw"===t&&e.iterator.return&&(n.method="return",n.arg=void 0,j(e,n),"throw"===n.method)||"return"!==t&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+t+"' method")),f;var o=u(r,e.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,f;var i=o.arg;return i?i.done?(n[e.resultName]=i.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=void 0),n.delegate=null,f):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,f)}function C(e){var n={tryLoc:e[0]};1 in e&&(n.catchLoc=e[1]),2 in e&&(n.finallyLoc=e[2],n.afterLoc=e[3]),this.tryEntries.push(n)}function w(e){var n=e.completion||{};n.type="normal",delete n.arg,e.completion=n}function E(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(C,this),this.reset(!0)}function O(e){if(e){var n=e[i];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,o=function n(){for(;++r<e.length;)if(t.call(e,r))return n.value=e[r],n.done=!1,n;return n.value=void 0,n.done=!0,n};return o.next=o}}return{next:k}}function k(){return{value:void 0,done:!0}}return d.prototype=y,r(A,"constructor",{value:y,configurable:!0}),r(y,"constructor",{value:d,configurable:!0}),d.displayName=l(y,c,"GeneratorFunction"),e.isGeneratorFunction=function(e){var n="function"==typeof e&&e.constructor;return!!n&&(n===d||"GeneratorFunction"===(n.displayName||n.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,y):(e.__proto__=y,l(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},e.awrap=function(e){return{__await:e}},v(g.prototype),l(g.prototype,a,(function(){return this})),e.AsyncIterator=g,e.async=function(n,t,r,o,i){void 0===i&&(i=Promise);var a=new g(s(n,t,r,o),i);return e.isGeneratorFunction(t)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},v(A),l(A,c,"Generator"),l(A,i,(function(){return this})),l(A,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var n=Object(e),t=[];for(var r in n)t.push(r);return t.reverse(),function e(){for(;t.length;){var r=t.pop();if(r in n)return e.value=r,e.done=!1,e}return e.done=!0,e}},e.values=O,E.prototype={constructor:E,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(w),!e)for(var n in this)"t"===n.charAt(0)&&t.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function r(t,r){return a.type="throw",a.arg=e,n.next=t,r&&(n.method="next",n.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var c=t.call(i,"catchLoc"),l=t.call(i,"finallyLoc");if(c&&l){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(e,n){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&t.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=n&&n<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=n,i?(this.method="next",this.next=i.finallyLoc,f):this.complete(a)},complete:function(e,n){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&n&&(this.next=n),f},finish:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.finallyLoc===e)return this.complete(t.completion,t.afterLoc),w(t),f}},catch:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.tryLoc===e){var r=t.completion;if("throw"===r.type){var o=r.arg;w(t)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,t){return this.delegate={iterator:O(e),resultName:n,nextLoc:t},"next"===this.method&&(this.arg=void 0),f}},e}function Wf(e,n,t,r,o,i,a){try{var c=e[i](a),l=c.value}catch(e){return void t(e)}c.done?n(l):Promise.resolve(l).then(r,o)}function Ff(e){return function(){var n=this,t=arguments;return new Promise((function(r,o){var i=e.apply(n,t);function a(e){Wf(i,r,o,a,c,"next",e)}function c(e){Wf(i,r,o,a,c,"throw",e)}a(void 0)}))}}var Xf=function(e){return e};function Vf(){var e=(0,i.I0)(),n=(0,i.v9)(Xf),t=n.source,o=n.sourceOther,a=n.keyboard,c=n._unmodifiedKeymap,l=n.saving,s=n.experimentalSettings,u=n.latestBuild,f=a&&!Object.is(a.keymap,c);function p(){return p=Ff(zf().mark((function t(){var r,i,a;return zf().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=o.keyboard,i=n.keyboard.keymap,t.prev=2,t.next=5,me(r,i);case 5:a=t.sent,e({type:"KEYMAP_SAVE_SUCCESS",keymap:a}),t.next=12;break;case 9:t.prev=9,t.t0=t.catch(2),e({type:"KEYMAP_SAVE_FAILURE"});case 12:case"end":return t.stop()}}),t,null,[[2,9]])}))),p.apply(this,arguments)}var d=(0,r.useCallback)((function(n){var t=o.github,r=t.repository,i=t.branch;Ff(zf().mark((function t(){var c,l,u,f;return zf().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return e({type:"COMMIT_DIALOG_CLOSE"}),e({type:"KEYMAP_SAVE_START"}),c=a.layout,l=a.keymap,t.prev=3,t.next=6,Bf.commitChanges(r,i,c,l,{message:n,experimentalSettings:s,keyboard:o.github.keyboard});case 6:u=t.sent,f=u.data,e({type:"KEYMAP_SAVE_SUCCESS",keymap:f}),t.next=14;break;case 11:t.prev=11,t.t0=t.catch(3),e({type:"KEYMAP_SAVE_FAILURE"});case 14:case"end":return t.stop()}}),t,null,[[3,11]])})))()}),[o,a,e,s]);return(0,O.jsxs)("div",{id:"actions",children:["local"===t&&(0,O.jsx)("button",{disabled:!f,onClick:function(){return p.apply(this,arguments)},children:"Save Local"}),"github"===t&&(0,O.jsxs)("button",{title:"Commit keymap changes to GitHub repository",disabled:!f,onClick:function(){e({type:"COMMIT_DIALOG_OPEN"})},children:[l?"Saving":"Commit Changes",l&&(0,O.jsx)(pf,{})]}),n.commitDialogOpen&&(0,O.jsx)(Uf,{onConfirm:d,onCancel:function(){return e({type:"COMMIT_DIALOG_CLOSE"})}}),u&&(0,O.jsx)(qf,{latestRun:u})]})}var Qf=t(13311),Hf=t.n(Qf),Jf=(0,O.jsx)(Xa,{external:!0,href:"https://github.com/nickcoutsos/keymap-editor/issue",children:"Keymap Editor Issues"}),$f=(0,O.jsx)(Xa,{external:!0,href:"https://github.com/nickcoutsos/keymap-editor/wiki/Defining-keyboard-layouts",children:"Keymap Editor Wiki: Defining keyboard layouts"}),ep=(0,O.jsx)(Xa,{external:!0,href:"https://nickcoutsos.github.io/keymap-layout-tools/",children:"Keymap Layout Tools - Helper"}),np=(0,O.jsx)(Xa,{external:!0,href:"https://discord.com/users/115507966555193345",children:"Discord - nickcoutsos#4351"}),tp=(0,O.jsxs)(O.Fragment,{children:[(0,O.jsx)("p",{children:"If you are looking for help in getting up and running or want a better understanding of the issue, please feel free to reach out to me:"}),(0,O.jsxs)("ul",{children:[(0,O.jsx)("li",{children:Jf}),(0,O.jsx)("li",{children:np})]})]}),rp=(0,O.jsxs)("p",{children:["For more information about how Keymap Editor layouts are defined, you can read ",$f,", and if you need an environment to quickly test changes to a layout try ",ep,"."]});function op(e){var n=e.onDismiss;return(0,O.jsx)(fn,{children:(0,O.jsxs)(tn,{onDismiss:n,children:[(0,O.jsx)("h2",{children:"Automatic Layout Generation Failed"}),(0,O.jsx)("p",{children:"No accompanying layout was found with your keymap file and the Keymap Editor was unable to generate one automatically for you."}),(0,O.jsx)("p",{children:"Something went wrong with the attempted automatic layout generation for your keyboard and there's no automatic way to recover, but if you want to reach out for assistance maybe we can work together to resolve any technical issues or else craft a manual layout for your keyboard."}),(0,O.jsxs)("p",{children:["Share your experience at ",Jf,"."]})]})})}op.propTypes={onDismiss:E().func.isRequired};var ip=op,ap=t(20256),cp=["children","style"],lp=["label"];function sp(e){return sp="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},sp(e)}function up(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}function fp(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function pp(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?fp(Object(t),!0).forEach((function(n){dp(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):fp(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function dp(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==sp(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==sp(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===sp(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function yp(e){var n=e.style,t=void 0===n?{}:n,r=e.children;return(0,O.jsx)("div",{style:pp(pp({},{height:"38px",lineHeight:"38px"}),t),children:r})}function hp(e){var n=e.children,t=e.style,r=void 0===t?{}:t,o=up(e,cp);return(0,O.jsx)(yp,{style:r,children:(0,O.jsx)("button",pp(pp({style:{height:"100%"}},o),{},{children:n}))})}var mp=window.matchMedia("(prefers-color-scheme: dark)"),bp=[0,5,10,20,30,40,50,60,70,80,90].reduce((function(e,n){return e["neutral".concat(n)]="hsl(0, 0%, ".concat(n,"%)"),e}),{});function Ap(e){var n=e.label,t=up(e,lp),r=(0,i.v9)((function(e){return e})).theme,o="dark"===r||"system"===r&&mp.matches;return(0,O.jsxs)("div",{style:{display:"inline-block",width:"auto"},children:[(0,O.jsx)("label",{style:{display:"block",width:"100%",fontSize:"120%",color:"var(--fg)"},children:n}),(0,O.jsx)(ap.ZP,pp({styles:{container:function(e,n){return pp(pp({},e),{},{display:"inline-block"})},menu:function(e){return pp(pp({},e),{},{width:"max-content",zIndex:10})}},theme:function(e){return pp(pp({},e),{},{colors:pp(pp({},e.colors),o?bp:{})})},isSearchable:!1},t))]})}function vp(e){return vp="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},vp(e)}function gp(){gp=function(){return e};var e={},n=Object.prototype,t=n.hasOwnProperty,r=Object.defineProperty||function(e,n,t){e[n]=t.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function l(e,n,t){return Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}),e[n]}try{l({},"")}catch(e){l=function(e,n,t){return e[n]=t}}function s(e,n,t,o){var i=n&&n.prototype instanceof p?n:p,a=Object.create(i.prototype),c=new E(o||[]);return r(a,"_invoke",{value:x(e,t,c)}),a}function u(e,n,t){try{return{type:"normal",arg:e.call(n,t)}}catch(e){return{type:"throw",arg:e}}}e.wrap=s;var f={};function p(){}function d(){}function y(){}var h={};l(h,i,(function(){return this}));var m=Object.getPrototypeOf,b=m&&m(m(O([])));b&&b!==n&&t.call(b,i)&&(h=b);var A=y.prototype=p.prototype=Object.create(h);function v(e){["next","throw","return"].forEach((function(n){l(e,n,(function(e){return this._invoke(n,e)}))}))}function g(e,n){function o(r,i,a,c){var l=u(e[r],e,i);if("throw"!==l.type){var s=l.arg,f=s.value;return f&&"object"==vp(f)&&t.call(f,"__await")?n.resolve(f.__await).then((function(e){o("next",e,a,c)}),(function(e){o("throw",e,a,c)})):n.resolve(f).then((function(e){s.value=e,a(s)}),(function(e){return o("throw",e,a,c)}))}c(l.arg)}var i;r(this,"_invoke",{value:function(e,t){function r(){return new n((function(n,r){o(e,t,n,r)}))}return i=i?i.then(r,r):r()}})}function x(e,n,t){var r="suspendedStart";return function(o,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw i;return{value:void 0,done:!0}}for(t.method=o,t.arg=i;;){var a=t.delegate;if(a){var c=j(a,t);if(c){if(c===f)continue;return c}}if("next"===t.method)t.sent=t._sent=t.arg;else if("throw"===t.method){if("suspendedStart"===r)throw r="completed",t.arg;t.dispatchException(t.arg)}else"return"===t.method&&t.abrupt("return",t.arg);r="executing";var l=u(e,n,t);if("normal"===l.type){if(r=t.done?"completed":"suspendedYield",l.arg===f)continue;return{value:l.arg,done:t.done}}"throw"===l.type&&(r="completed",t.method="throw",t.arg=l.arg)}}}function j(e,n){var t=n.method,r=e.iterator[t];if(void 0===r)return n.delegate=null,"throw"===t&&e.iterator.return&&(n.method="return",n.arg=void 0,j(e,n),"throw"===n.method)||"return"!==t&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+t+"' method")),f;var o=u(r,e.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,f;var i=o.arg;return i?i.done?(n[e.resultName]=i.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=void 0),n.delegate=null,f):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,f)}function C(e){var n={tryLoc:e[0]};1 in e&&(n.catchLoc=e[1]),2 in e&&(n.finallyLoc=e[2],n.afterLoc=e[3]),this.tryEntries.push(n)}function w(e){var n=e.completion||{};n.type="normal",delete n.arg,e.completion=n}function E(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(C,this),this.reset(!0)}function O(e){if(e){var n=e[i];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,o=function n(){for(;++r<e.length;)if(t.call(e,r))return n.value=e[r],n.done=!1,n;return n.value=void 0,n.done=!0,n};return o.next=o}}return{next:k}}function k(){return{value:void 0,done:!0}}return d.prototype=y,r(A,"constructor",{value:y,configurable:!0}),r(y,"constructor",{value:d,configurable:!0}),d.displayName=l(y,c,"GeneratorFunction"),e.isGeneratorFunction=function(e){var n="function"==typeof e&&e.constructor;return!!n&&(n===d||"GeneratorFunction"===(n.displayName||n.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,y):(e.__proto__=y,l(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},e.awrap=function(e){return{__await:e}},v(g.prototype),l(g.prototype,a,(function(){return this})),e.AsyncIterator=g,e.async=function(n,t,r,o,i){void 0===i&&(i=Promise);var a=new g(s(n,t,r,o),i);return e.isGeneratorFunction(t)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},v(A),l(A,c,"Generator"),l(A,i,(function(){return this})),l(A,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var n=Object(e),t=[];for(var r in n)t.push(r);return t.reverse(),function e(){for(;t.length;){var r=t.pop();if(r in n)return e.value=r,e.done=!1,e}return e.done=!0,e}},e.values=O,E.prototype={constructor:E,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(w),!e)for(var n in this)"t"===n.charAt(0)&&t.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function r(t,r){return a.type="throw",a.arg=e,n.next=t,r&&(n.method="next",n.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var c=t.call(i,"catchLoc"),l=t.call(i,"finallyLoc");if(c&&l){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(e,n){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&t.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=n&&n<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=n,i?(this.method="next",this.next=i.finallyLoc,f):this.complete(a)},complete:function(e,n){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&n&&(this.next=n),f},finish:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.finallyLoc===e)return this.complete(t.completion,t.afterLoc),w(t),f}},catch:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.tryLoc===e){var r=t.completion;if("throw"===r.type){var o=r.arg;w(t)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,t){return this.delegate={iterator:O(e),resultName:n,nextLoc:t},"next"===this.method&&(this.arg=void 0),f}},e}function xp(e,n,t,r,o,i,a){try{var c=e[i](a),l=c.value}catch(e){return void t(e)}c.done?n(l):Promise.resolve(l).then(r,o)}function jp(e){return function(){var n=this,t=arguments;return new Promise((function(r,o){var i=e.apply(n,t);function a(e){xp(i,r,o,a,c,"next",e)}function c(e){xp(i,r,o,a,c,"throw",e)}a(void 0)}))}}function Cp(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(e,n)||function(e,n){if(e){if("string"==typeof e)return wp(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?wp(e,n):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function wp(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var Ep=function(e){var n=e.onSelect,t=e.onError,o=Cp((0,r.useState)([]),2),i=o[0],a=o[1],c=Cp((0,r.useState)(null),2),l=c[0],s=c[1],u=(0,r.useMemo)((function(){return i.map((function(e){return{id:e,name:e}}))}),[i]);(0,r.useEffect)((function(){jp(gp().mark((function e(){var n,t,r;return gp().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,pe();case 2:n=e.sent,t=JSON.parse(localStorage.getItem("localSourceSelectedKeyboard")||"null"),r=n.includes(t)?t:n[0],a(n),s(r);case 7:case"end":return e.stop()}}),e)})))()}),[a,s]),(0,r.useEffect)((function(){jp(gp().mark((function e(){var r,o,i,a,c,s,u,f;return gp().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!l){e.next=25;break}return e.prev=1,e.next=4,ye(l);case 4:r=e.sent,o=r.info,i=r.keymap,a=r.sensors,c=o.layouts,s=i.chosen["zmk,matrix_transform"]?i.chosen["zmk,matrix_transform"].replace(/^&/,""):null,u=Object.keys(c)[0],f=c[s]||c[u],n({source:"local",keyboard:l,layoutMetadata:f,layout:f.layout,keymap:i,sensors:a}),e.next=25;break;case 15:if(e.prev=15,e.t0=e.catch(1),!e.t0.response){e.next=24;break}return e.next=20,e.t0.response.json();case 20:if("LayoutGenerationError"!==e.sent.name){e.next=24;break}return t({dialog:ip}),e.abrupt("return");case 24:throw e.t0;case 25:case"end":return e.stop()}}),e,null,[[1,15]])})))()}),[n,t,l]);var f=(0,r.useCallback)((function(e){var n=e.id;localStorage.setItem("localSourceSelectedKeyboard",JSON.stringify(n)),s(n)}),[s]),p=(0,q.find)(u,{id:l});return(0,O.jsx)(Ap,{label:"Keyboard",value:p,options:u,onChange:f,getOptionValue:function(e){return e.id},getOptionLabel:function(e){return e.name}})};function Op(e){return Op="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Op(e)}function kp(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Sp(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?kp(Object(t),!0).forEach((function(n){Bp(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):kp(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Bp(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Op(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Op(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Op(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Pp(e){var n=(0,O.jsx)(Xa,{href:"https://github.com/nickcoutsos/zmk-config-corne-demo",external:!0,children:"GitHub Repo"});return(0,O.jsx)(fn,{children:(0,O.jsxs)(tn,Sp(Sp({},e),{},{children:[(0,O.jsx)("h2",{children:"Keymap Editor Demo"}),(0,O.jsx)("p",{children:"Welcome! This demo keyboard is provided to let you experiment with the keymap editor before setting up your own repository."}),(0,O.jsx)("h3",{children:"Features"}),(0,O.jsxs)("ul",{children:[(0,O.jsxs)("li",{children:[(0,O.jsx)("strong",{children:"WYSIWYG Editing"}),". Just click on key and behaviour bindings to make changes, add or remove layers in the sidebar."]}),(0,O.jsxs)("li",{children:[(0,O.jsx)("strong",{children:"Keymap generation"}),". The editor can export keymap to ZMK's syntax (when running locally or integrated with GitHub), and will even attempt to format the ",(0,O.jsx)("code",{children:".keymap"})," file for better readability."]}),(0,O.jsxs)("li",{children:[(0,O.jsx)("strong",{children:"Devicetree parsing"}),". ",(0,O.jsx)("em",{children:"(Experimental!)"})," Read and write to your existing ZMK ",(0,O.jsx)("code",{children:".keymap"})," file so that you can still use ZMK features that the app doesn't support yet."]})]}),(0,O.jsx)("h3",{children:"What's next?"}),(0,O.jsxs)("p",{children:["If you like the editor, try integrating with your own GitHub hosted keyboard config. ",(0,O.jsx)(Xa,{href:"https://github.com/nickcoutsos/zmk-config-corne-demo/generate",external:!0,children:"Use it as a template"})," for your own, or just read through the ",n," for this keyboard to learn what to apply to your existing keyboard."]})]}))})}var Ip=t(33971),Tp={};Tp.styleTagTransform=b(),Tp.setAttributes=d(),Tp.insert=f().bind(null,"head"),Tp.domAPI=s(),Tp.insertStyleElement=h(),c()(Ip.Z,Tp);var Lp=Ip.Z&&Ip.Z.locals?Ip.Z.locals:void 0;function Dp(e){return Dp="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Dp(e)}function Rp(){Rp=function(){return e};var e={},n=Object.prototype,t=n.hasOwnProperty,r=Object.defineProperty||function(e,n,t){e[n]=t.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function l(e,n,t){return Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}),e[n]}try{l({},"")}catch(e){l=function(e,n,t){return e[n]=t}}function s(e,n,t,o){var i=n&&n.prototype instanceof p?n:p,a=Object.create(i.prototype),c=new E(o||[]);return r(a,"_invoke",{value:x(e,t,c)}),a}function u(e,n,t){try{return{type:"normal",arg:e.call(n,t)}}catch(e){return{type:"throw",arg:e}}}e.wrap=s;var f={};function p(){}function d(){}function y(){}var h={};l(h,i,(function(){return this}));var m=Object.getPrototypeOf,b=m&&m(m(O([])));b&&b!==n&&t.call(b,i)&&(h=b);var A=y.prototype=p.prototype=Object.create(h);function v(e){["next","throw","return"].forEach((function(n){l(e,n,(function(e){return this._invoke(n,e)}))}))}function g(e,n){function o(r,i,a,c){var l=u(e[r],e,i);if("throw"!==l.type){var s=l.arg,f=s.value;return f&&"object"==Dp(f)&&t.call(f,"__await")?n.resolve(f.__await).then((function(e){o("next",e,a,c)}),(function(e){o("throw",e,a,c)})):n.resolve(f).then((function(e){s.value=e,a(s)}),(function(e){return o("throw",e,a,c)}))}c(l.arg)}var i;r(this,"_invoke",{value:function(e,t){function r(){return new n((function(n,r){o(e,t,n,r)}))}return i=i?i.then(r,r):r()}})}function x(e,n,t){var r="suspendedStart";return function(o,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw i;return{value:void 0,done:!0}}for(t.method=o,t.arg=i;;){var a=t.delegate;if(a){var c=j(a,t);if(c){if(c===f)continue;return c}}if("next"===t.method)t.sent=t._sent=t.arg;else if("throw"===t.method){if("suspendedStart"===r)throw r="completed",t.arg;t.dispatchException(t.arg)}else"return"===t.method&&t.abrupt("return",t.arg);r="executing";var l=u(e,n,t);if("normal"===l.type){if(r=t.done?"completed":"suspendedYield",l.arg===f)continue;return{value:l.arg,done:t.done}}"throw"===l.type&&(r="completed",t.method="throw",t.arg=l.arg)}}}function j(e,n){var t=n.method,r=e.iterator[t];if(void 0===r)return n.delegate=null,"throw"===t&&e.iterator.return&&(n.method="return",n.arg=void 0,j(e,n),"throw"===n.method)||"return"!==t&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+t+"' method")),f;var o=u(r,e.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,f;var i=o.arg;return i?i.done?(n[e.resultName]=i.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=void 0),n.delegate=null,f):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,f)}function C(e){var n={tryLoc:e[0]};1 in e&&(n.catchLoc=e[1]),2 in e&&(n.finallyLoc=e[2],n.afterLoc=e[3]),this.tryEntries.push(n)}function w(e){var n=e.completion||{};n.type="normal",delete n.arg,e.completion=n}function E(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(C,this),this.reset(!0)}function O(e){if(e){var n=e[i];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,o=function n(){for(;++r<e.length;)if(t.call(e,r))return n.value=e[r],n.done=!1,n;return n.value=void 0,n.done=!0,n};return o.next=o}}return{next:k}}function k(){return{value:void 0,done:!0}}return d.prototype=y,r(A,"constructor",{value:y,configurable:!0}),r(y,"constructor",{value:d,configurable:!0}),d.displayName=l(y,c,"GeneratorFunction"),e.isGeneratorFunction=function(e){var n="function"==typeof e&&e.constructor;return!!n&&(n===d||"GeneratorFunction"===(n.displayName||n.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,y):(e.__proto__=y,l(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},e.awrap=function(e){return{__await:e}},v(g.prototype),l(g.prototype,a,(function(){return this})),e.AsyncIterator=g,e.async=function(n,t,r,o,i){void 0===i&&(i=Promise);var a=new g(s(n,t,r,o),i);return e.isGeneratorFunction(t)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},v(A),l(A,c,"Generator"),l(A,i,(function(){return this})),l(A,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var n=Object(e),t=[];for(var r in n)t.push(r);return t.reverse(),function e(){for(;t.length;){var r=t.pop();if(r in n)return e.value=r,e.done=!1,e}return e.done=!0,e}},e.values=O,E.prototype={constructor:E,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(w),!e)for(var n in this)"t"===n.charAt(0)&&t.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function r(t,r){return a.type="throw",a.arg=e,n.next=t,r&&(n.method="next",n.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var c=t.call(i,"catchLoc"),l=t.call(i,"finallyLoc");if(c&&l){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(e,n){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&t.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=n&&n<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=n,i?(this.method="next",this.next=i.finallyLoc,f):this.complete(a)},complete:function(e,n){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&n&&(this.next=n),f},finish:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.finallyLoc===e)return this.complete(t.completion,t.afterLoc),w(t),f}},catch:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.tryLoc===e){var r=t.completion;if("throw"===r.type){var o=r.arg;w(t)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,t){return this.delegate={iterator:O(e),resultName:n,nextLoc:t},"next"===this.method&&(this.arg=void 0),f}},e}function Np(e,n,t,r,o,i,a){try{var c=e[i](a),l=c.value}catch(e){return void t(e)}c.done?n(l):Promise.resolve(l).then(r,o)}function _p(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var Mp=function(e){var n,o,i=e.onSelect,a=(n=(0,r.useState)(!1),o=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,o)||function(e,n){if(e){if("string"==typeof e)return _p(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?_p(e,n):void 0}}(n,o)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),c=a[0],l=a[1];return(0,r.useEffect)((function(){var e;(e=Rp().mark((function e(){var n,r,o;return Rp().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,t.e(873).then(t.t.bind(t,18873,19));case 2:n=e.sent,r=n.layout,o=n.keymap,i({source:"demo",layout:r,keymap:o});case 6:case"end":return e.stop()}}),e)})),function(){var n=this,t=arguments;return new Promise((function(r,o){var i=e.apply(n,t);function a(e){Np(i,r,o,a,c,"next",e)}function c(e){Np(i,r,o,a,c,"throw",e)}a(void 0)}))})()}),[i]),(0,O.jsxs)(O.Fragment,{children:[(0,O.jsxs)(hp,{style:{background:"none",border:"none"},onClick:function(){return l(!0)},children:[(0,O.jsx)(L,{name:"info",className:Lp.help})," What is this?"]}),c&&(0,O.jsx)(Pp,{onDismiss:function(){return l(!1)}})]})},Yp=t(66379),qp=t.n(Yp),Zp={maxHeight:"300px",overflow:"auto",padding:"10px",fontFamily:"monospace",fontSize:"80%",backgroundColor:"rgb(239, 239, 239, 0.5)"},Kp={margin:"10px"};function Up(e){var n=e.onDismiss,t=e.title,r=e.errors,o=function(e){return"InfoValidationError"===e?"config/info.json":"KeymapValidationError"===e?"config/keymap.json":void 0}(t);return(0,O.jsx)(fn,{children:(0,O.jsxs)(tn,{onDismiss:n,children:[(0,O.jsx)("h2",{children:t}),o&&(0,O.jsxs)("p",{children:["Errors in the file ",(0,O.jsx)("code",{children:o}),"."]}),(0,O.jsx)("ul",{style:Zp,children:r.map((function(e,n){return(0,O.jsx)("li",{style:Kp,children:e},n)}))})]})})}var Gp="selectedGithubRepository",zp="selectedGithubBranch",Wp="selectedGithubKeyboard";function Fp(e,n){try{return JSON.parse(localStorage.getItem("".concat(Wp,":").concat(e,":").concat(n)))}catch(e){return null}}function Xp(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var Vp={blocked:!1,initialized:!1,selectedRepoId:null,selectedBranchName:null,selectedKeyboard:null,branches:[],keyboards:[],loading:!1,warningFlags:[]},Qp=(0,Zo.oM)({name:"github-picker",initialState:Vp,reducers:{clearSelection:function(e){e.warningFlags=[],e.loading=!1},integrationInitialized:function(e){var n,t=function(){try{return JSON.parse(localStorage.getItem(Gp))}catch(e){return null}}(),r=Bf.repositories||[];Hf()(r,{id:t})?n=t:r.length>0&&(n=r[0].id),e.initialized=!0,e.selectedRepoId=n},loadingBranchesList:function(e){e.loading=!0},loadedBranchesList:function(e,n){var t=e.selectedRepoId,r=n.payload.branches,o=Hf()(Bf.repositories,{id:t});e.branches=r,e.keyboard=null,e.keyboards=[],e.loading=!1;for(var i=Q()(r,"name"),a=o.default_branch,c=function(e){try{return JSON.parse(localStorage.getItem("".concat(zp,":").concat(e)))}catch(e){return null}}(t),l=0,s=[1===r.length?r[0].name:null,c,a];l<s.length;l++){var u=s[l];if(i.includes(u)){e.selectedBranchName=u,e.selectedKeyboard=Fp(t,u);break}}},loadingKeyboardsList:function(e){e.loading=!0},loadedKeyboardsList:function(e,n){var t=e.selectedRepoId,r=e.selectedBranchName,o=n.payload,i=o.keyboards,a=o.default;e.keyboards=i,e.loading=!1;for(var c=Fp(t,r),l=0,s=[1===i.length?i[0]:null,c,a];l<s.length;l++){var u=s[l];if(i.includes(u)){e.selectedKeyboard=u;break}}},selectedRepository:function(e,n){var t;e.selectedRepoId=n.payload.repository.id,e.selectedBranchName=null,e.selectedKeyboard=null,t=e.selectedRepoId,localStorage.setItem(Gp,JSON.stringify(t))},selectedBranch:function(e,n){var t,r;e.selectedBranchName=n.payload.name,e.selectedKeyboard=Fp(e.selectedRepoId,e.selectedBranchName),t=e.selectedRepoId,r=e.selectedBranchName,localStorage.setItem("".concat(zp,":").concat(t),JSON.stringify(r))},selectedKeyboard:function(e,n){var t,r,o;e.selectedKeyboard=n.payload.name,t=e.selectedRepoId,r=e.selectedBranchName,o=e.selectedKeyboard,localStorage.setItem("".concat(Wp,":").concat(t,":").concat(r),JSON.stringify(o))},keyboardLoading:function(e,n){e.loading=!0},keyboardLoadedSuccess:function(e,n){var t=n.payload.response.keymap;e.warningFlags=t.warningFlags||[],e.loading=!1}}});function Hp(){var e,n,t,o=(n=(0,r.useReducer)(Qp.reducer,Vp),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||function(e,n){if(e){if("string"==typeof e)return Xp(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Xp(e,n):void 0}}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=o[0],a=(e=o[1],(0,r.useMemo)((function(){return Object.keys(Qp.actions).reduce((function(n,t){return n[t]=function(){var n;return e((n=Qp.actions)[t].apply(n,arguments))},n}),{})}),[e]));return[i,a]}function Jp(e){var n=e.onDismiss,t=e.missingPath;return(0,O.jsx)(fn,{children:(0,O.jsxs)(tn,{onDismiss:n,children:[(0,O.jsx)("h2",{children:"Missing keyboard definition?"}),(0,O.jsxs)("p",{children:["Hi there! The repository you're trying to load from doesn't have a defined ",(0,O.jsx)("code",{children:t}),". Right now this application is expecting to look at that directory to discover keyboard definitions for experimental features like automatic layout generation."]}),(0,O.jsx)("p",{children:"Is it possible that the keyboard you're trying to edit relies on data from the ZMK or other repositories? Fetching from other repositories is not currently supported."}),(0,O.jsx)("p",{children:"I'm a humble developer and have only worked with configurations for my own handwired builds, so if you feel you're receiving this message in error then please consider opening an issue on this project's GitHub repository to let me know what I can do differently."})]})})}Jp.propTypes={onDismiss:E().func.isRequired,missingPath:E().string.isRequired};var $p=Jp;function ed(e){var n=e.installation,t="https://github.com/settings/installations/".concat(n.id);return(0,O.jsx)(fn,{children:(0,O.jsxs)(tn,{dismissText:null,children:[(0,O.jsx)("h2",{children:"App Disabled"}),(0,O.jsxs)("p",{children:["Hello there, your installation of the keymap editor's GitHub app is currently disabled. ",(0,O.jsx)("em",{children:"This is not a ban!"})]}),(0,O.jsxs)("p",{children:["When you installed this app for your GitHub account you installed it for ",(0,O.jsx)("em",{children:"all"})," of your repositories, and we need to do a little cleanup as we roll out some new features as it's very likely you will have other repositories unrelated to ZMK keyboard configurations."]}),(0,O.jsx)("h3",{children:"How to fix this"}),(0,O.jsxs)("p",{children:["If you're still interested in using the keymap editor (and I'd love for you to be able to) please go to your ",(0,O.jsx)(Xa,{href:t,children:"installation settings"})," on GitHub and select only the repositories you want to use with this tool. As soon as that's done you'll be sent back here and ready to go."]}),(0,O.jsx)("p",{children:"As always, if you're looking for clarification or further assistance please visit our GitHub repo and open an issue or start a discussion."})]})})}ed.propTypes={installation:E().shape({id:E().number.isRequired}).isRequired};var nd=ed;function td(e){var n=e.onDismiss;return(0,O.jsx)(fn,{children:(0,O.jsxs)(tn,{onDismiss:n,children:[(0,O.jsx)("h2",{children:"Is this a zmk-config repo?"}),(0,O.jsxs)("p",{children:["Hi there! The repository you're trying to load from doesn't have a defined ",(0,O.jsx)("code",{children:"config"})," directory. Right now this application is expecting to look at that directory to discover keymaps and other metadata."]}),tp]})})}td.propTypes={onDismiss:E().func.isRequired,otherRepoOrBranchAvailable:E().bool};var rd=td,od=function(){return(0,O.jsx)(fn,{children:(0,O.jsxs)(tn,{dismissText:null,children:[(0,O.jsx)("h2",{children:"GitHub Account Blocked"}),(0,O.jsx)("p",{children:"Hi, your access to this application has been disabled."}),(0,O.jsxs)("p",{children:["This could be an innocent mistake. Possibly you've misunderstood the intended purpose of this app, possibly I got carried away with some housekeeping. If you want more information or feel this was done in error, please reach out to ",(0,O.jsx)("em",{children:"nickcoutsos"})," on GitHub or Discord (you can find me on the ZMK server)."]})]})})};function id(e){var n=e.onDismiss;return(0,O.jsx)(fn,{children:(0,O.jsxs)(tn,{onDismiss:n,children:[(0,O.jsx)("h2",{children:"No Layout Available"}),(0,O.jsx)("p",{children:"Your keymap doesn't have an accompanying layout and we don't know enough about your keyboard to generate one for you automatically."}),(0,O.jsxs)("p",{children:["If you meant to include layout data, please make sure that its in the same directory as your keymap, like ",(0,O.jsx)("code",{children:"config/info.json"})," or ",(0,O.jsx)("code",{children:"config/<keyboard>.json"}),"."]}),rp,tp]})})}id.propTypes={onDismiss:E().func.isRequired};var ad=id;function cd(){return(0,O.jsx)(fn,{centerOnly:!0,children:(0,O.jsxs)(tn,{dismissText:null,style:{width:"400px"},children:[(0,O.jsx)("h2",{children:"Authenticate with GitHub"}),(0,O.jsx)("p",{children:"Please log-in to GitHub to continue."}),(0,O.jsx)(Y,{collection:"brands",icon:"github",text:"Login with GitHub",style:{display:"block",margin:"0 auto"},onClick:function(){return Bf.beginLoginFlow()}})]})})}cd.propTypes={};var ld=cd;function sd(){var e=Bf.username?"Welcome, ".concat(Bf.username,"!"):"Welcome!";return(0,O.jsx)(fn,{centerOnly:!0,children:(0,O.jsxs)(tn,{dismissText:null,children:[(0,O.jsx)("h2",{children:e}),(0,O.jsx)("p",{children:"To begin import your own keymaps, you'll need to grant the Keymap Editor app access to the relevant GitHub repositories. Please make sure to only select repositories that are set up for ZMK keyboard configurations."}),(0,O.jsxs)("p",{children:["This app requires read and write access to the repositories you select in order to write to arbitrary ",(0,O.jsx)("code",{children:".keymap"})," files. It also receives all build action events for the repository, which generates quite a bit of traffic. Selecting ",(0,O.jsx)("code",{children:"All repositories"})," for the app installation will lead to a suspension."]}),(0,O.jsx)(Y,{collection:"brands",icon:"github",text:"Add Repository",style:{display:"block",margin:"0 auto"},onClick:function(){return Bf.beginInstallAppFlow()}})]})})}sd.propTypes={};var ud=sd;function fd(e){var n=e.onDismiss;return(0,O.jsx)(fn,{children:(0,O.jsxs)(tn,{onDismiss:n,children:[(0,O.jsx)("h2",{children:"No Keymap Available"}),(0,O.jsxs)("p",{children:["We couldn't find a ",(0,O.jsx)("code",{children:".keymap"})," file in your ",(0,O.jsx)("code",{children:"config/"})," folder."]}),(0,O.jsxs)("p",{children:["Please ensure that any keymap(s) you wish to edit are placed in that directory even if an accompanying keyboard definition exists in your under the ",(0,O.jsx)("code",{children:"config/boards/..."})," directory."]}),(0,O.jsxs)("p",{children:["If you have any questions please feel free to reach out by creating an issue at ",Jf,"."]})]})})}fd.propTypes={onDismiss:E().func.isRequired};var pd=fd;function dd(e){var n=e.state,t=e.actions,r=e.choices,o=e.selections,i=r.repositories,a=r.repositoryChoices,c=r.branchChoices,l=r.keyboardChoices,s=o.selectedRepoChoice,u=o.selectedBranchChoice,f=o.selectedKeyboardChoice,p=n.branches,d=n.keyboards,y=n.loading;return(0,O.jsxs)(O.Fragment,{children:[(0,O.jsx)(Ap,{label:"Repository",value:s,options:a,onChange:function(e){var n=e.id;if("installation"!==e.type){var r=Hf()(i,{id:n});t.selectedRepository({repository:r})}else Bf.manageInstallationRepos(n)},getValue:function(e){return e.id},getOptionValue:function(e){return e.id},getOptionLabel:function(e){return e.full||e.name},formatOptionLabel:function(e,n){var t=n.context;return(0,O.jsx)(O.Fragment,{children:"value"===t?e.name:e.full||e.name})}}),p.length>1&&(0,O.jsx)(Ap,{label:"Branch",value:u,options:c,onChange:function(e){var n=e.id;return t.selectedBranch({name:n})},getOptionValue:function(e){return e.id},getOptionLabel:function(e){return e.name}}),d.length>1&&(0,O.jsx)(Ap,{label:"Keyboard",value:f,options:l,getOptionValue:function(e){return e.id},getOptionLabel:function(e){return e.name},onChange:function(e){var n=e.id;return t.selectedKeyboard({name:n})}}),y&&(0,O.jsx)(yp,{children:(0,O.jsx)(pf,{})})]})}function yd(e){return yd="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},yd(e)}function hd(){hd=function(){return e};var e={},n=Object.prototype,t=n.hasOwnProperty,r=Object.defineProperty||function(e,n,t){e[n]=t.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function l(e,n,t){return Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}),e[n]}try{l({},"")}catch(e){l=function(e,n,t){return e[n]=t}}function s(e,n,t,o){var i=n&&n.prototype instanceof p?n:p,a=Object.create(i.prototype),c=new E(o||[]);return r(a,"_invoke",{value:x(e,t,c)}),a}function u(e,n,t){try{return{type:"normal",arg:e.call(n,t)}}catch(e){return{type:"throw",arg:e}}}e.wrap=s;var f={};function p(){}function d(){}function y(){}var h={};l(h,i,(function(){return this}));var m=Object.getPrototypeOf,b=m&&m(m(O([])));b&&b!==n&&t.call(b,i)&&(h=b);var A=y.prototype=p.prototype=Object.create(h);function v(e){["next","throw","return"].forEach((function(n){l(e,n,(function(e){return this._invoke(n,e)}))}))}function g(e,n){function o(r,i,a,c){var l=u(e[r],e,i);if("throw"!==l.type){var s=l.arg,f=s.value;return f&&"object"==yd(f)&&t.call(f,"__await")?n.resolve(f.__await).then((function(e){o("next",e,a,c)}),(function(e){o("throw",e,a,c)})):n.resolve(f).then((function(e){s.value=e,a(s)}),(function(e){return o("throw",e,a,c)}))}c(l.arg)}var i;r(this,"_invoke",{value:function(e,t){function r(){return new n((function(n,r){o(e,t,n,r)}))}return i=i?i.then(r,r):r()}})}function x(e,n,t){var r="suspendedStart";return function(o,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw i;return{value:void 0,done:!0}}for(t.method=o,t.arg=i;;){var a=t.delegate;if(a){var c=j(a,t);if(c){if(c===f)continue;return c}}if("next"===t.method)t.sent=t._sent=t.arg;else if("throw"===t.method){if("suspendedStart"===r)throw r="completed",t.arg;t.dispatchException(t.arg)}else"return"===t.method&&t.abrupt("return",t.arg);r="executing";var l=u(e,n,t);if("normal"===l.type){if(r=t.done?"completed":"suspendedYield",l.arg===f)continue;return{value:l.arg,done:t.done}}"throw"===l.type&&(r="completed",t.method="throw",t.arg=l.arg)}}}function j(e,n){var t=n.method,r=e.iterator[t];if(void 0===r)return n.delegate=null,"throw"===t&&e.iterator.return&&(n.method="return",n.arg=void 0,j(e,n),"throw"===n.method)||"return"!==t&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+t+"' method")),f;var o=u(r,e.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,f;var i=o.arg;return i?i.done?(n[e.resultName]=i.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=void 0),n.delegate=null,f):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,f)}function C(e){var n={tryLoc:e[0]};1 in e&&(n.catchLoc=e[1]),2 in e&&(n.finallyLoc=e[2],n.afterLoc=e[3]),this.tryEntries.push(n)}function w(e){var n=e.completion||{};n.type="normal",delete n.arg,e.completion=n}function E(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(C,this),this.reset(!0)}function O(e){if(e){var n=e[i];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,o=function n(){for(;++r<e.length;)if(t.call(e,r))return n.value=e[r],n.done=!1,n;return n.value=void 0,n.done=!0,n};return o.next=o}}return{next:k}}function k(){return{value:void 0,done:!0}}return d.prototype=y,r(A,"constructor",{value:y,configurable:!0}),r(y,"constructor",{value:d,configurable:!0}),d.displayName=l(y,c,"GeneratorFunction"),e.isGeneratorFunction=function(e){var n="function"==typeof e&&e.constructor;return!!n&&(n===d||"GeneratorFunction"===(n.displayName||n.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,y):(e.__proto__=y,l(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},e.awrap=function(e){return{__await:e}},v(g.prototype),l(g.prototype,a,(function(){return this})),e.AsyncIterator=g,e.async=function(n,t,r,o,i){void 0===i&&(i=Promise);var a=new g(s(n,t,r,o),i);return e.isGeneratorFunction(t)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},v(A),l(A,c,"Generator"),l(A,i,(function(){return this})),l(A,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var n=Object(e),t=[];for(var r in n)t.push(r);return t.reverse(),function e(){for(;t.length;){var r=t.pop();if(r in n)return e.value=r,e.done=!1,e}return e.done=!0,e}},e.values=O,E.prototype={constructor:E,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(w),!e)for(var n in this)"t"===n.charAt(0)&&t.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function r(t,r){return a.type="throw",a.arg=e,n.next=t,r&&(n.method="next",n.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var c=t.call(i,"catchLoc"),l=t.call(i,"finallyLoc");if(c&&l){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(e,n){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&t.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=n&&n<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=n,i?(this.method="next",this.next=i.finallyLoc,f):this.complete(a)},complete:function(e,n){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&n&&(this.next=n),f},finish:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.finallyLoc===e)return this.complete(t.completion,t.afterLoc),w(t),f}},catch:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.tryLoc===e){var r=t.completion;if("throw"===r.type){var o=r.arg;w(t)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,t){return this.delegate={iterator:O(e),resultName:n,nextLoc:t},"next"===this.method&&(this.arg=void 0),f}},e}function md(e,n,t,r,o,i,a){try{var c=e[i](a),l=c.value}catch(e){return void t(e)}c.done?n(l):Promise.resolve(l).then(r,o)}function bd(e){return function(){var n=this,t=arguments;return new Promise((function(r,o){var i=e.apply(n,t);function a(e){md(i,r,o,a,c,"next",e)}function c(e){md(i,r,o,a,c,"throw",e)}a(void 0)}))}}function Ad(e){return function(e){if(Array.isArray(e))return vd(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,n){if(e){if("string"==typeof e)return vd(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?vd(e,n):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function vd(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function gd(e){return gd="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},gd(e)}function xd(){xd=function(){return e};var e={},n=Object.prototype,t=n.hasOwnProperty,r=Object.defineProperty||function(e,n,t){e[n]=t.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function l(e,n,t){return Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}),e[n]}try{l({},"")}catch(e){l=function(e,n,t){return e[n]=t}}function s(e,n,t,o){var i=n&&n.prototype instanceof p?n:p,a=Object.create(i.prototype),c=new E(o||[]);return r(a,"_invoke",{value:x(e,t,c)}),a}function u(e,n,t){try{return{type:"normal",arg:e.call(n,t)}}catch(e){return{type:"throw",arg:e}}}e.wrap=s;var f={};function p(){}function d(){}function y(){}var h={};l(h,i,(function(){return this}));var m=Object.getPrototypeOf,b=m&&m(m(O([])));b&&b!==n&&t.call(b,i)&&(h=b);var A=y.prototype=p.prototype=Object.create(h);function v(e){["next","throw","return"].forEach((function(n){l(e,n,(function(e){return this._invoke(n,e)}))}))}function g(e,n){function o(r,i,a,c){var l=u(e[r],e,i);if("throw"!==l.type){var s=l.arg,f=s.value;return f&&"object"==gd(f)&&t.call(f,"__await")?n.resolve(f.__await).then((function(e){o("next",e,a,c)}),(function(e){o("throw",e,a,c)})):n.resolve(f).then((function(e){s.value=e,a(s)}),(function(e){return o("throw",e,a,c)}))}c(l.arg)}var i;r(this,"_invoke",{value:function(e,t){function r(){return new n((function(n,r){o(e,t,n,r)}))}return i=i?i.then(r,r):r()}})}function x(e,n,t){var r="suspendedStart";return function(o,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw i;return{value:void 0,done:!0}}for(t.method=o,t.arg=i;;){var a=t.delegate;if(a){var c=j(a,t);if(c){if(c===f)continue;return c}}if("next"===t.method)t.sent=t._sent=t.arg;else if("throw"===t.method){if("suspendedStart"===r)throw r="completed",t.arg;t.dispatchException(t.arg)}else"return"===t.method&&t.abrupt("return",t.arg);r="executing";var l=u(e,n,t);if("normal"===l.type){if(r=t.done?"completed":"suspendedYield",l.arg===f)continue;return{value:l.arg,done:t.done}}"throw"===l.type&&(r="completed",t.method="throw",t.arg=l.arg)}}}function j(e,n){var t=n.method,r=e.iterator[t];if(void 0===r)return n.delegate=null,"throw"===t&&e.iterator.return&&(n.method="return",n.arg=void 0,j(e,n),"throw"===n.method)||"return"!==t&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+t+"' method")),f;var o=u(r,e.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,f;var i=o.arg;return i?i.done?(n[e.resultName]=i.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=void 0),n.delegate=null,f):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,f)}function C(e){var n={tryLoc:e[0]};1 in e&&(n.catchLoc=e[1]),2 in e&&(n.finallyLoc=e[2],n.afterLoc=e[3]),this.tryEntries.push(n)}function w(e){var n=e.completion||{};n.type="normal",delete n.arg,e.completion=n}function E(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(C,this),this.reset(!0)}function O(e){if(e){var n=e[i];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,o=function n(){for(;++r<e.length;)if(t.call(e,r))return n.value=e[r],n.done=!1,n;return n.value=void 0,n.done=!0,n};return o.next=o}}return{next:k}}function k(){return{value:void 0,done:!0}}return d.prototype=y,r(A,"constructor",{value:y,configurable:!0}),r(y,"constructor",{value:d,configurable:!0}),d.displayName=l(y,c,"GeneratorFunction"),e.isGeneratorFunction=function(e){var n="function"==typeof e&&e.constructor;return!!n&&(n===d||"GeneratorFunction"===(n.displayName||n.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,y):(e.__proto__=y,l(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},e.awrap=function(e){return{__await:e}},v(g.prototype),l(g.prototype,a,(function(){return this})),e.AsyncIterator=g,e.async=function(n,t,r,o,i){void 0===i&&(i=Promise);var a=new g(s(n,t,r,o),i);return e.isGeneratorFunction(t)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},v(A),l(A,c,"Generator"),l(A,i,(function(){return this})),l(A,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var n=Object(e),t=[];for(var r in n)t.push(r);return t.reverse(),function e(){for(;t.length;){var r=t.pop();if(r in n)return e.value=r,e.done=!1,e}return e.done=!0,e}},e.values=O,E.prototype={constructor:E,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(w),!e)for(var n in this)"t"===n.charAt(0)&&t.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function r(t,r){return a.type="throw",a.arg=e,n.next=t,r&&(n.method="next",n.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var c=t.call(i,"catchLoc"),l=t.call(i,"finallyLoc");if(c&&l){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(e,n){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&t.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=n&&n<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=n,i?(this.method="next",this.next=i.finallyLoc,f):this.complete(a)},complete:function(e,n){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&n&&(this.next=n),f},finish:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.finallyLoc===e)return this.complete(t.completion,t.afterLoc),w(t),f}},catch:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.tryLoc===e){var r=t.completion;if("throw"===r.type){var o=r.arg;w(t)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,t){return this.delegate={iterator:O(e),resultName:n,nextLoc:t},"next"===this.method&&(this.arg=void 0),f}},e}function jd(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Cd(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?jd(Object(t),!0).forEach((function(n){wd(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):jd(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function wd(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==gd(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==gd(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===gd(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Ed(e,n,t,r,o,i,a){try{var c=e[i](a),l=c.value}catch(e){return void t(e)}c.done?n(l):Promise.resolve(l).then(r,o)}function Od(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(e,n)||function(e,n){if(e){if("string"==typeof e)return kd(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?kd(e,n):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function kd(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var Sd=function(e){return qp()(e,{name:"MissingRepoFile",path:"config"})},Bd=function(e){return qp()(e,{name:"MissingRepoFile",intent:"directory-structure"})},Pd=function(e){return qp()(e,{name:"MissingRepoFile",path:"config/info.json"})||qp()(e,{name:"MissingRepoFile",intent:"metadata"})},Id=function(e){return"MissingRepoFile"===(null==e?void 0:e.name)&&(null==e?void 0:e.path.match(/config\/boards\/[^/]+\/[^/]+\/[^/]+?\..*$/))};function Td(e){var n=Od(Hp(),2),t=n[0],o=n[1],i=function(e,n){var t=e.branches,o=e.keyboards,i=e.selectedRepoId,a=e.selectedBranchName,c=e.selectedKeyboard,l=(Bf.repositories||[]).map((function(e){return{id:e.id,name:e.name,full:e.full_name}})),s=(Bf.installations||[]).map((function(e){return{id:e.id,type:"installation",name:"[Manage available repos for ".concat(e.account.login,"...]")}})),u=(0,r.useMemo)((function(){return[].concat(Ad(l),Ad(s))}),[l,s]),f=(0,r.useMemo)((function(){return t.map((function(e){return{id:e.name,name:e.name}}))}),[t]),p=(0,r.useMemo)((function(){return o.map((function(e){return{id:e,name:e}}))}),[o]),d=(0,r.useMemo)((function(){return Hf()(l,{id:i})}),[l,i]),y=(0,r.useMemo)((function(){return Hf()(f,{id:a})}),[f,a]),h=(0,r.useMemo)((function(){return Hf()(p,{id:c})}),[p,c]);return(0,r.useEffect)((function(){i&&bd(hd().mark((function e(){var t,r;return hd().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n.loadingBranchesList(),t=Hf()(Bf.repositories,{id:i}),e.next=4,Bf.fetchRepoBranches(t);case 4:r=e.sent,n.loadedBranchesList({branches:r});case 6:case"end":return e.stop()}}),e)})))()}),[i,n]),(0,r.useEffect)((function(){i&&a&&bd(hd().mark((function e(){var t,r;return hd().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n.loadingKeyboardsList(),t=Hf()(Bf.repositories,{id:i}),e.next=4,Bf.fetchBranchKeyboards(t,a);case 4:r=e.sent,n.loadedKeyboardsList(r);case 6:case"end":return e.stop()}}),e)})))()}),[i,a,n]),[{repositories:l,repositoryChoices:u,branchChoices:f,keyboardChoices:p},{selectedRepoChoice:d,selectedBranchChoice:y,selectedKeyboardChoice:h}]}(t,o),a=Od(i,2),c=a[0],l=a[1],s=t.initialized,u=t.selectedRepoId,f=t.selectedBranchName,p=t.selectedKeyboard,d=t.loading,y=e.onSelect,h=e.onError;(0,r.useEffect)((function(){var e=function(){return Bf.beginLoginFlow()},n=function(){o.clearSelection(),h({dialog:od})},t=function(){o.clearSelection(),h({dialog:ip})},r=function(e){var n=Up;Sd(e)&&(n=rd),Id(e)&&(n=$p),Pd(e)&&(n=ad),Bd(e)&&(n=pd),o.clearSelection(),h({dialog:n,dialogProps:{title:e.name,errors:e.errors}})};return Bf.init().then(o.integrationInitialized),Bf.on("authentication-failed",e),Bf.on("blocked",n),Bf.on("repo-validation-error",r),Bf.on("layout-generation-failed",t),function(){Bf.off("authentication-failed",e),Bf.off("blocked",n),Bf.off("repo-validation-error",r),Bf.off("layout-generation-failed",t)}}),[o,h]);var m=(0,r.useCallback)(function(){var e,n=(e=xd().mark((function e(n,t,r){var i,a,c,l;return xd().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return a=Bf.repositories,c=null===(i=Hf()(a,{id:n}))||void 0===i?void 0:i.full_name,o.keyboardLoading(),e.next=5,Bf.fetchLayoutAndKeymap(c,t,{keyboard:r});case 5:l=e.sent,o.keyboardLoadedSuccess({response:l}),y(Cd({github:{repository:c,branch:t,keyboard:r}},l));case 8:case"end":return e.stop()}}),e)})),function(){var n=this,t=arguments;return new Promise((function(r,o){var i=e.apply(n,t);function a(e){Ed(i,r,o,a,c,"next",e)}function c(e){Ed(i,r,o,a,c,"throw",e)}a(void 0)}))});return function(e,t,r){return n.apply(this,arguments)}}(),[o,y]),b=(0,r.useCallback)((function(){return m(u,f,p)}),[m,u,f,p]);return(0,r.useEffect)((function(){u&&f&&m(u,f,p)}),[u,f,p,m]),s?t.blocked?(0,O.jsx)(od,{}):Bf.isGitHubAuthorized()?Bf.isAppInstalled()?Bf.isAppSuspendedForRepoSelection()?(0,O.jsx)(nd,{installation:Bf.installations[0]}):(0,O.jsxs)(O.Fragment,{children:[(0,O.jsx)(dd,{state:t,actions:o,choices:c,selections:l}),f&&!d&&(0,O.jsx)(hp,{onClick:b,children:(0,O.jsx)(L,{name:"sync"})})]}):(0,O.jsx)(ud,{}):(0,O.jsx)(ld,{}):null}Td.propTypes={expanded:E().bool.isRequired,onExpand:E().func.isRequired,onError:E().func.isRequired,onSelect:E().func.isRequired};var Ld=Td,Dd=et()([re&&{id:"demo",name:"Demo Keyboard"},te&&{id:"local",name:"Local"},ne&&{id:"github",name:"GitHub"}]),Rd=localStorage.getItem("selectedSource"),Nd=(1===Dd.length?Dd[0].id:null)||(Dd.find((function(e){return e.id===Rd}))?Rd:Dd[0].id);function _d(e){var n=e.onDismiss;return(0,O.jsx)(fn,{children:(0,O.jsxs)(tn,{onDismiss:n,children:[(0,O.jsx)("h2",{children:"Could not parse keymap"}),(0,O.jsx)("p",{children:"It looks like some bindings in your keymap are using custom pre-processor macros which isn't supported by the Keymap Editor. These macros make it difficult both to resolve bindings to behaviors and parameters, as well as to generate modified keymap code that is consistent with your original intentions."}),(0,O.jsx)("p",{children:"Please either continue editing your keymap by hand with these helpers or if you would like to use this editor, rewrite the keymap to use ZMK's syntax directly."}),tp]})})}_d.propTypes={onDismiss:E().func.isRequired};var Md=_d;function Yd(e){var n=e.onDismiss;return(0,O.jsx)(fn,{children:(0,O.jsxs)(tn,{onDismiss:n,children:[(0,O.jsx)("h2",{children:"Could not parse keymap"}),(0,O.jsx)("p",{children:"Something went wrong while trying to parse your keymap. It's hard to say what exactly, because I wasn't expecting this."}),(0,O.jsx)("p",{children:"A common occurrence here is keymaps using a variety of pre-processor macros to define layers/combos/etc."}),tp]})})}Yd.propTypes={onDismiss:E().func.isRequired};var qd=Yd;function Zd(e){var n=e.onDismiss;return(0,O.jsx)(fn,{children:(0,O.jsxs)(tn,{onDismiss:n,children:[(0,O.jsx)("h2",{children:"Could not parse Miryoku keymap"}),(0,O.jsx)("p",{children:"It looks like your keyboard is built using Miryoku to manage the configuration and keymap. Parsing and editing keymaps that use this syntax is unsupported by the Keymap Editor."}),(0,O.jsx)("p",{children:"Please either continue editing your keymap by hand with these helpers or if you would like to use this editor, rewrite the keymap to use ZMK's syntax directly."})]})})}Zd.propTypes={onDismiss:E().func.isRequired};var Kd=Zd;function Ud(e){var n=e.onDismiss;return(0,O.jsx)(fn,{children:(0,O.jsxs)(tn,{onDismiss:n,children:[(0,O.jsx)("h2",{children:"Could not parse keymap"}),(0,O.jsx)("p",{children:"Missing devicetree root node."}),(0,O.jsx)("p",{children:"The keymap editor was unable to find a devicetree root node in your keymap. This means that either something is wrong with the parser or something is wrong with your keymap's syntax."}),(0,O.jsxs)("p",{children:["If you've been using the keymap editor succesfully up to now it's possible that it has introduced an error in the keymap file. Please reach out for support at ",Jf,"."]})]})})}Ud.propTypes={onDismiss:E().func.isRequired};var Gd=Ud;function zd(e){var n=e.onDismiss;return(0,O.jsx)(fn,{children:(0,O.jsxs)(tn,{onDismiss:n,children:[(0,O.jsx)("h2",{children:"Could not parse keymap"}),(0,O.jsxs)("p",{children:["Detected use of ",(0,O.jsx)("code",{children:"zmk-nodefree-config"})]}),(0,O.jsx)("p",{children:"It looks like your keymap is built using helper functions from the zmk-nodefree-config library to replace devicetree syntax. Parsing and editing keymaps that use this syntax is unsupported by the Keymap Editor."}),(0,O.jsx)("p",{children:"Please either continue editing your keymap by hand with these helpers or if you would like to use this editor, rewrite the keymap to use ZMK's syntax directly."})]})})}zd.propTypes={onDismiss:E().func.isRequired};var Wd=zd;function Fd(e){return Fd="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Fd(e)}function Xd(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Vd(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Xd(Object(t),!0).forEach((function(n){Qd(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Xd(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Qd(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Fd(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Fd(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Fd(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Hd(e){return(0,O.jsx)(fn,{children:(0,O.jsxs)(tn,Vd(Vd({},e),{},{children:[(0,O.jsx)("h2",{children:"This layout was Auto-Generated"}),(0,O.jsx)("p",{children:"Hi there! There wasn't a layout definition to accompany your keymap file, so the keymap editor tried to generate one automatically in a last-ditch effort to help you get into the app."}),(0,O.jsxs)("p",{children:["This layout definition was (or will be) saved when you first save keymap changes with the keymap editor, so remember that if there are any tweaks you'd like to make to improve it you can do so by editing the ",(0,O.jsx)("code",{children:"info.json"})," file."]}),rp]}))})}Hd.propTypes={};var Jd=Hd;function $d(e){return $d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},$d(e)}function ey(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function ny(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?ey(Object(t),!0).forEach((function(n){ty(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ey(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function ty(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==$d(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==$d(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===$d(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function ry(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(e,n)||function(e,n){if(e){if("string"==typeof e)return oy(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?oy(e,n):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function oy(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function iy(e){var n,t,o,i=e.onSelect,a=(0,r.useRef)(),c=ry((0,r.useState)(Nd),2),l=c[0],s=c[1],u=ry((0,r.useState)({autoGenerated:!1}),2),f=u[0].autoGenerated,p=u[1],d=ry((0,r.useState)(null),2),y=d[0],h=d[1],m=(0,r.useCallback)((function(){return h(null)}),[h]),b=(!0,t=(n=ry((0,r.useState)(true),2))[0],o=n[1],[t,(0,r.useCallback)((function(){return o(!0)}),[o]),(0,r.useCallback)((function(){return o(!1)}),[o]),(0,r.useCallback)((function(){return o((function(e){return!e}))}),[o])]),A=ry(b,3),v=A[0],g=A[1],x=A[2],j=(0,r.useCallback)((function(){h({component:Jd,onClose:m})}),[h,m]);!function(e,n){var t=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];(0,r.useEffect)((function(){if(t){var r=function(t){var r=document.body.contains(t.target),o=e.current.contains(t.target);r&&!o&&n()};return document.body.addEventListener("click",r),function(){return document.body.removeEventListener("click",r)}}}),[e,t,n])}(a,x,v&&"github"===l);var C=(0,r.useCallback)((function(e){var n=e.keymap.warningFlags,t=void 0===n?[]:n,r=(e.layoutMetadata||{}).autoGenerated,o=void 0!==r&&r,a=function(e){switch(e[0]){case"USING_ZMK_NODEFREE_MACROS":return Wd;case"USING_MIRYOKU_DTSI":return Kd;case"USING_NON_ZMK_MACRO":return Md;case"KEYMAP_PARSING_FAILED":return qd;case"MISSING_ROOT_NODE":return Gd;default:return null}}(t);if(a)return h({component:a,onClose:m}),void i({source:l,keyboard:null});p({autoGenerated:o}),i(ny({source:l},e))}),[i,l,h,m]),w=(0,r.useCallback)((function(e){var n=e.dialog,t=e.dialogProps;h({component:n,dialogProps:t,onClose:m}),i({source:l,keyboard:null})}),[h,m,i,l]);(0,r.useEffect)((function(){localStorage.setItem("selectedSource",l)}),[l]);var E=Hf()(Dd,{id:l});return(0,O.jsxs)("div",{ref:a,style:{display:"flex",flexDirection:"row",alignItems:"end",gap:"5px",margin:"5px"},children:[(0,O.jsx)(Ap,{label:"Source",value:E,options:Dd,getOptionLabel:function(e){return e.name},getOptionValue:function(e){return e.id},onChange:function(e){var n=e.id;return s(n)}}),(null==y?void 0:y.component)&&(0,O.jsx)(y.component,ny(ny({},y.dialogProps||{}),{},{onDismiss:y.onClose})),"local"===l&&(0,O.jsx)(Ep,{onError:w,onSelect:C}),"demo"===l&&(0,O.jsx)(Mp,{onSelect:C}),"github"===l&&(0,O.jsx)(Ld,{expanded:v,onSelect:C,onError:w,onExpand:g}),f&&(0,O.jsxs)(hp,{onClick:j,children:[(0,O.jsx)(L,{name:"warning"})," Layout wrong?"]})]})}iy.propTypes={onSelect:E().func.isRequired};var ay=iy,cy=t(70401),ly=t.n(cy),sy=t(14084),uy={};uy.styleTagTransform=b(),uy.setAttributes=d(),uy.insert=f().bind(null,"head"),uy.domAPI=s(),uy.insertStyleElement=h(),c()(sy.Z,uy);var fy=sy.Z&&sy.Z.locals?sy.Z.locals:void 0;function py(e){return py="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},py(e)}function dy(){dy=function(){return e};var e={},n=Object.prototype,t=n.hasOwnProperty,r=Object.defineProperty||function(e,n,t){e[n]=t.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function l(e,n,t){return Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}),e[n]}try{l({},"")}catch(e){l=function(e,n,t){return e[n]=t}}function s(e,n,t,o){var i=n&&n.prototype instanceof p?n:p,a=Object.create(i.prototype),c=new E(o||[]);return r(a,"_invoke",{value:x(e,t,c)}),a}function u(e,n,t){try{return{type:"normal",arg:e.call(n,t)}}catch(e){return{type:"throw",arg:e}}}e.wrap=s;var f={};function p(){}function d(){}function y(){}var h={};l(h,i,(function(){return this}));var m=Object.getPrototypeOf,b=m&&m(m(O([])));b&&b!==n&&t.call(b,i)&&(h=b);var A=y.prototype=p.prototype=Object.create(h);function v(e){["next","throw","return"].forEach((function(n){l(e,n,(function(e){return this._invoke(n,e)}))}))}function g(e,n){function o(r,i,a,c){var l=u(e[r],e,i);if("throw"!==l.type){var s=l.arg,f=s.value;return f&&"object"==py(f)&&t.call(f,"__await")?n.resolve(f.__await).then((function(e){o("next",e,a,c)}),(function(e){o("throw",e,a,c)})):n.resolve(f).then((function(e){s.value=e,a(s)}),(function(e){return o("throw",e,a,c)}))}c(l.arg)}var i;r(this,"_invoke",{value:function(e,t){function r(){return new n((function(n,r){o(e,t,n,r)}))}return i=i?i.then(r,r):r()}})}function x(e,n,t){var r="suspendedStart";return function(o,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw i;return{value:void 0,done:!0}}for(t.method=o,t.arg=i;;){var a=t.delegate;if(a){var c=j(a,t);if(c){if(c===f)continue;return c}}if("next"===t.method)t.sent=t._sent=t.arg;else if("throw"===t.method){if("suspendedStart"===r)throw r="completed",t.arg;t.dispatchException(t.arg)}else"return"===t.method&&t.abrupt("return",t.arg);r="executing";var l=u(e,n,t);if("normal"===l.type){if(r=t.done?"completed":"suspendedYield",l.arg===f)continue;return{value:l.arg,done:t.done}}"throw"===l.type&&(r="completed",t.method="throw",t.arg=l.arg)}}}function j(e,n){var t=n.method,r=e.iterator[t];if(void 0===r)return n.delegate=null,"throw"===t&&e.iterator.return&&(n.method="return",n.arg=void 0,j(e,n),"throw"===n.method)||"return"!==t&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+t+"' method")),f;var o=u(r,e.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,f;var i=o.arg;return i?i.done?(n[e.resultName]=i.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=void 0),n.delegate=null,f):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,f)}function C(e){var n={tryLoc:e[0]};1 in e&&(n.catchLoc=e[1]),2 in e&&(n.finallyLoc=e[2],n.afterLoc=e[3]),this.tryEntries.push(n)}function w(e){var n=e.completion||{};n.type="normal",delete n.arg,e.completion=n}function E(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(C,this),this.reset(!0)}function O(e){if(e){var n=e[i];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,o=function n(){for(;++r<e.length;)if(t.call(e,r))return n.value=e[r],n.done=!1,n;return n.value=void 0,n.done=!0,n};return o.next=o}}return{next:k}}function k(){return{value:void 0,done:!0}}return d.prototype=y,r(A,"constructor",{value:y,configurable:!0}),r(y,"constructor",{value:d,configurable:!0}),d.displayName=l(y,c,"GeneratorFunction"),e.isGeneratorFunction=function(e){var n="function"==typeof e&&e.constructor;return!!n&&(n===d||"GeneratorFunction"===(n.displayName||n.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,y):(e.__proto__=y,l(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},e.awrap=function(e){return{__await:e}},v(g.prototype),l(g.prototype,a,(function(){return this})),e.AsyncIterator=g,e.async=function(n,t,r,o,i){void 0===i&&(i=Promise);var a=new g(s(n,t,r,o),i);return e.isGeneratorFunction(t)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},v(A),l(A,c,"Generator"),l(A,i,(function(){return this})),l(A,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var n=Object(e),t=[];for(var r in n)t.push(r);return t.reverse(),function e(){for(;t.length;){var r=t.pop();if(r in n)return e.value=r,e.done=!1,e}return e.done=!0,e}},e.values=O,E.prototype={constructor:E,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(w),!e)for(var n in this)"t"===n.charAt(0)&&t.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function r(t,r){return a.type="throw",a.arg=e,n.next=t,r&&(n.method="next",n.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var c=t.call(i,"catchLoc"),l=t.call(i,"finallyLoc");if(c&&l){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(e,n){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&t.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=n&&n<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=n,i?(this.method="next",this.next=i.finallyLoc,f):this.complete(a)},complete:function(e,n){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&n&&(this.next=n),f},finish:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.finallyLoc===e)return this.complete(t.completion,t.afterLoc),w(t),f}},catch:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.tryLoc===e){var r=t.completion;if("throw"===r.type){var o=r.arg;w(t)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,t){return this.delegate={iterator:O(e),resultName:n,nextLoc:t},"next"===this.method&&(this.arg=void 0),f}},e}function yy(e,n,t,r,o,i,a){try{var c=e[i](a),l=c.value}catch(e){return void t(e)}c.done?n(l):Promise.resolve(l).then(r,o)}function hy(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(e,n)||function(e,n){if(e){if("string"==typeof e)return my(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?my(e,n):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function my(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function by(e){return"  ".concat(e.fileName,":").concat(e.lineNumber,":").concat(e.columnNumber)}var Ay=(0,O.jsx)(Xa,{external:!0,href:"https://github.com/nickcoutsos/keymap-editor/issues/new",children:"new issue"});function vy(e){var n=e.error,t=hy((0,r.useState)([]),2),o=t[0],i=t[1],a=hy((0,r.useState)(""),2),c=a[0],l=a[1],s=hy((0,r.useState)(!1),2),u=s[0],f=s[1];return(0,r.useEffect)((function(){function e(){var t;return t=dy().mark((function e(){return dy().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.t0=i,e.next=3,ly().fromError(n);case 3:e.t1=e.sent,(0,e.t0)(e.t1);case 5:case"end":return e.stop()}}),e)})),e=function(){var e=this,n=arguments;return new Promise((function(r,o){var i=t.apply(e,n);function a(e){yy(i,r,o,a,c,"next",e)}function c(e){yy(i,r,o,a,c,"throw",e)}a(void 0)}))},e.apply(this,arguments)}!function(){e.apply(this,arguments)}()}),[i,n]),(0,r.useEffect)((function(){l(function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];return"\n".concat(e.name,"\n\n").concat(e.message,"\n\n").concat(n.map(by).join("\n"),"\n").trim()}(n,o))}),[n,o]),(0,r.useEffect)((function(){u&&setTimeout((function(){f(!1)}),3e3)}),[u,f]),(0,O.jsx)(fn,{children:(0,O.jsxs)(tn,{dismissText:!1,style:{maxWidth:"700px"},children:[(0,O.jsx)("h2",{children:"Unexpected error"}),(0,O.jsxs)("p",{children:["Something unexpected happened and the keymap editor app cannot recover. Please consider taking a moment to open a ",Ay,"with the details below to help me investigate and improve the app."]}),(0,O.jsxs)("div",{className:fy.stackTrace,children:[(0,O.jsx)("pre",{children:c}),(0,O.jsx)(Y,{icon:"copy",title:"Copy error text",className:fy.button,onClick:function(){var e="".concat("```","\n").concat(c,"\n").concat("```");navigator.clipboard.writeText(e).then((function(){return f(!0)}))}}),u&&(0,O.jsx)("div",{className:fy.copyMessage,children:"Copied!"})]})]})})}vy.propTypes={error:E().instanceOf(Error).isRequired};var gy=vy;function xy(e){return xy="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},xy(e)}function jy(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,(void 0,o=function(e,n){if("object"!==xy(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==xy(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(r.key),"symbol"===xy(o)?o:String(o)),r)}var o}function Cy(e,n){return Cy=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,n){return e.__proto__=n,e},Cy(e,n)}function wy(e){return wy=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},wy(e)}var Ey=function(e){!function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),n&&Cy(e,n)}(c,e);var n,t,r,o,i,a=(o=c,i=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,n=wy(o);if(i){var t=wy(this).constructor;e=Reflect.construct(n,arguments,t)}else e=n.apply(this,arguments);return function(e,n){if(n&&("object"===xy(n)||"function"==typeof n))return n;if(void 0!==n)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(this,e)});function c(e){var n;return function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,c),(n=a.call(this,e)).state={error:null},n}return n=c,r=[{key:"getDerivedStateFromError",value:function(e){return{error:e}}}],(t=[{key:"render",value:function(){var e=this.props.children,n=this.state.error;return n?(0,O.jsx)(gy,{error:n}):e}}])&&jy(n.prototype,t),r&&jy(n,r),Object.defineProperty(n,"prototype",{writable:!1}),c}(r.Component);function Oy(e){var n=e.onDismiss;return(0,O.jsx)(fn,{children:(0,O.jsxs)(tn,{onDismiss:n,children:[(0,O.jsx)("h2",{children:"Failed to save keymap changes"}),(0,O.jsx)("p",{children:"Sorry, an unexpected error occurred while trying to save your keymap."}),(0,O.jsx)("p",{children:"Please try again or raise an issue if the problem persists and I'll try to work it out with you. Seriously I can only get this right if I know what's wrong, and in some cases that comes down to people using this editor in more advanced ways than I myself have."}),(0,O.jsx)("p",{children:Jf})]})})}Oy.propTypes={onDismiss:E().func.isRequired};var ky=Oy;function Sy(e){return Sy="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Sy(e)}var By=["source","layout","keymap","sensors"];function Py(){Py=function(){return e};var e={},n=Object.prototype,t=n.hasOwnProperty,r=Object.defineProperty||function(e,n,t){e[n]=t.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function l(e,n,t){return Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}),e[n]}try{l({},"")}catch(e){l=function(e,n,t){return e[n]=t}}function s(e,n,t,o){var i=n&&n.prototype instanceof p?n:p,a=Object.create(i.prototype),c=new E(o||[]);return r(a,"_invoke",{value:x(e,t,c)}),a}function u(e,n,t){try{return{type:"normal",arg:e.call(n,t)}}catch(e){return{type:"throw",arg:e}}}e.wrap=s;var f={};function p(){}function d(){}function y(){}var h={};l(h,i,(function(){return this}));var m=Object.getPrototypeOf,b=m&&m(m(O([])));b&&b!==n&&t.call(b,i)&&(h=b);var A=y.prototype=p.prototype=Object.create(h);function v(e){["next","throw","return"].forEach((function(n){l(e,n,(function(e){return this._invoke(n,e)}))}))}function g(e,n){function o(r,i,a,c){var l=u(e[r],e,i);if("throw"!==l.type){var s=l.arg,f=s.value;return f&&"object"==Sy(f)&&t.call(f,"__await")?n.resolve(f.__await).then((function(e){o("next",e,a,c)}),(function(e){o("throw",e,a,c)})):n.resolve(f).then((function(e){s.value=e,a(s)}),(function(e){return o("throw",e,a,c)}))}c(l.arg)}var i;r(this,"_invoke",{value:function(e,t){function r(){return new n((function(n,r){o(e,t,n,r)}))}return i=i?i.then(r,r):r()}})}function x(e,n,t){var r="suspendedStart";return function(o,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw i;return{value:void 0,done:!0}}for(t.method=o,t.arg=i;;){var a=t.delegate;if(a){var c=j(a,t);if(c){if(c===f)continue;return c}}if("next"===t.method)t.sent=t._sent=t.arg;else if("throw"===t.method){if("suspendedStart"===r)throw r="completed",t.arg;t.dispatchException(t.arg)}else"return"===t.method&&t.abrupt("return",t.arg);r="executing";var l=u(e,n,t);if("normal"===l.type){if(r=t.done?"completed":"suspendedYield",l.arg===f)continue;return{value:l.arg,done:t.done}}"throw"===l.type&&(r="completed",t.method="throw",t.arg=l.arg)}}}function j(e,n){var t=n.method,r=e.iterator[t];if(void 0===r)return n.delegate=null,"throw"===t&&e.iterator.return&&(n.method="return",n.arg=void 0,j(e,n),"throw"===n.method)||"return"!==t&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+t+"' method")),f;var o=u(r,e.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,f;var i=o.arg;return i?i.done?(n[e.resultName]=i.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=void 0),n.delegate=null,f):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,f)}function C(e){var n={tryLoc:e[0]};1 in e&&(n.catchLoc=e[1]),2 in e&&(n.finallyLoc=e[2],n.afterLoc=e[3]),this.tryEntries.push(n)}function w(e){var n=e.completion||{};n.type="normal",delete n.arg,e.completion=n}function E(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(C,this),this.reset(!0)}function O(e){if(e){var n=e[i];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,o=function n(){for(;++r<e.length;)if(t.call(e,r))return n.value=e[r],n.done=!1,n;return n.value=void 0,n.done=!0,n};return o.next=o}}return{next:k}}function k(){return{value:void 0,done:!0}}return d.prototype=y,r(A,"constructor",{value:y,configurable:!0}),r(y,"constructor",{value:d,configurable:!0}),d.displayName=l(y,c,"GeneratorFunction"),e.isGeneratorFunction=function(e){var n="function"==typeof e&&e.constructor;return!!n&&(n===d||"GeneratorFunction"===(n.displayName||n.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,y):(e.__proto__=y,l(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},e.awrap=function(e){return{__await:e}},v(g.prototype),l(g.prototype,a,(function(){return this})),e.AsyncIterator=g,e.async=function(n,t,r,o,i){void 0===i&&(i=Promise);var a=new g(s(n,t,r,o),i);return e.isGeneratorFunction(t)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},v(A),l(A,c,"Generator"),l(A,i,(function(){return this})),l(A,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var n=Object(e),t=[];for(var r in n)t.push(r);return t.reverse(),function e(){for(;t.length;){var r=t.pop();if(r in n)return e.value=r,e.done=!1,e}return e.done=!0,e}},e.values=O,E.prototype={constructor:E,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(w),!e)for(var n in this)"t"===n.charAt(0)&&t.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function r(t,r){return a.type="throw",a.arg=e,n.next=t,r&&(n.method="next",n.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var c=t.call(i,"catchLoc"),l=t.call(i,"finallyLoc");if(c&&l){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(e,n){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&t.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=n&&n<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=n,i?(this.method="next",this.next=i.finallyLoc,f):this.complete(a)},complete:function(e,n){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&n&&(this.next=n),f},finish:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.finallyLoc===e)return this.complete(t.completion,t.afterLoc),w(t),f}},catch:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.tryLoc===e){var r=t.completion;if("throw"===r.type){var o=r.arg;w(t)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,t){return this.delegate={iterator:O(e),resultName:n,nextLoc:t},"next"===this.method&&(this.arg=void 0),f}},e}function Iy(e,n,t,r,o,i,a){try{var c=e[i](a),l=c.value}catch(e){return void t(e)}c.done?n(l):Promise.resolve(l).then(r,o)}var Ty=function(){var e=(0,i.v9)((function(e){return e})),n=(0,i.I0)(),t=e.sourceOther,o=e.keyboard,a=e.saveError,c=e.theme,l=e.settingsVisible,s=e.experimentalSettings;(0,r.useEffect)((function(){var e;if(null!=t&&t.github)return(e=Py().mark((function e(){var n,o,i;return Py().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=t.github,o=n.repository,i=n.branch,e.t0=r,e.next=4,Bf.fetchBuildStatus(o,i);case 4:e.t1=e.sent,(0,e.t0)(e.t1);case 6:case"end":return e.stop()}}),e)})),function(){var n=this,t=arguments;return new Promise((function(r,o){var i=e.apply(n,t);function a(e){Iy(i,r,o,a,c,"next",e)}function c(e){Iy(i,r,o,a,c,"throw",e)}a(void 0)}))})(),Bf.on("build-update",r),function(){return Bf.off("build-update",r)};function r(e){e.head_branch===t.github.branch&&n({type:"GITHUB_BUILD_UPDATE",build:e})}n({type:"GITHUB_BUILD_UPDATE",build:null})}),[t,n]);var u=(0,r.useCallback)((function(e){var t=e.source,r=e.layout,o=e.keymap,i=e.sensors,a=void 0===i?[]:i,c=function(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}(e,By);n(o?{type:"SELECT_KEYBOARD",source:t,sourceOther:c,layout:r,keymap:o,sensors:a}:{type:"CLEAR_KEYBOARD_SELECTION"})}),[n]),f=(0,r.useCallback)((function(e){n({type:"SETTINGS_UPDATE",settings:e})}),[n]),p=(0,r.useCallback)((function(){return n({type:"SETTINGS_OPEN"})}),[n]);return(0,O.jsxs)(O.Fragment,{children:[(0,O.jsx)(Ey,{children:(0,O.jsxs)(C.Provider,{value:{settings:s,openSettingsDialog:p},children:[(0,O.jsx)(ay,{onSelect:u}),(0,O.jsxs)("div",{id:"settings-bar",children:[(0,O.jsx)(Y,{id:"light-mode",title:"Toggle theme",icon:{light:"sun",dark:"moon",system:"circle-half-stroke"}[c]||"circle-half-stroke",onClick:function(){return n({type:"CYCLE_THEME"})}}),(0,O.jsx)(Y,{id:"settings-button",icon:"cog",onClick:p}),l&&(0,O.jsx)(tf,{settings:s,onUpdate:f,onClose:function(){return n({type:"SETTINGS_CLOSE"})}})]}),(0,O.jsx)(Vf,{}),(0,O.jsxs)(Pe,{children:[o&&(0,O.jsx)(Tt,{layout:o.layout,children:(0,O.jsx)(Gu,{keymap:o.keymap,sensors:o.sensors})}),a&&(0,O.jsx)(ky,{onDismiss:function(){return n({type:"CLEAR_SAVE_ERROR"})}})]})]})}),(0,O.jsx)(Vu,{})]})};function Ly(e){return Ly="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Ly(e)}function Dy(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Ry(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Dy(Object(t),!0).forEach((function(n){Ny(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Dy(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Ny(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Ly(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Ly(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Ly(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function _y(){var e=JSON.parse(localStorage.getItem("experimental-settings")||"{}");return{definitions:null,source:null,sourceOther:null,keyboard:null,_unmodifiedKeymap:null,saving:null,saveError:null,settingsVisible:null,commitDialogOpen:!1,theme:JSON.parse(localStorage.getItem("theme")),experimentalSettings:{unicodeGlyphs:G()(e,"unicodeGlyphs",!0),platformGlyphs:G()(e,"platformGlyphs","auto"),enableBehaviorEditing:G()(e,"enableBehaviorEditing",!1)},latestBuild:null}}var My=_y();var Yy=t(14890);function qy(e){return qy="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},qy(e)}function Zy(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Ky(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Zy(Object(t),!0).forEach((function(n){Uy(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Zy(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Uy(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==qy(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==qy(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===qy(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}var Gy=(0,Yy.UY)({layout:function(){return arguments.length>0&&void 0!==arguments[0]?arguments[0]:[]},sensors:function(){return arguments.length>0&&void 0!==arguments[0]?arguments[0]:[]},keymap:(0,Yy.UY)({warningFlags:function(){return arguments.length>0&&void 0!==arguments[0]?arguments[0]:[]},defines:function(){return arguments.length>0&&void 0!==arguments[0]?arguments[0]:[]},chosen:function(){return arguments.length>0&&void 0!==arguments[0]?arguments[0]:{}},behaviors:dc,combos:tl,layers:ai,macros:Xs})}),zy=(0,Zo.xC)({reducer:function(e,n){var t=function(e,n){var t=n.type,r=e.keyboard;switch(t){case"INITIALIZE":return _y();case"DEFINITIONS_SET":return Ry(Ry({},e),{},{definitions:n.definitions});case"CLEAR_KEYBOARD_SELECTION":return Ry(Ry({},e),{},{keyboard:null});case"SELECT_KEYBOARD":return Ry(Ry({},e),{},{source:n.source,sourceOther:n.sourceOther,keyboard:Ry(Ry({},r),Sn()(n,["layout","keymap","sensors"])),_unmodifiedKeymap:n.keymap});case"COMMIT_DIALOG_OPEN":return Ry(Ry({},e),{},{commitDialogOpen:!0});case"COMMIT_DIALOG_CLOSE":return Ry(Ry({},e),{},{commitDialogOpen:!1});case"GITHUB_BUILD_UPDATE":return Ry(Ry({},e),{},{latestBuild:n.build});case"KEYMAP_SAVE_START":return Ry(Ry({},e),{},{saving:!0,saveError:!1});case"KEYMAP_SAVE_SUCCESS":return Ry(Ry({},e),{},{saving:!1,unsaved:!1,keyboard:Ry(Ry({},e.keyboard),{},{keymap:n.keymap||e.keyboard.keymap}),_unmodifiedKeymap:n.keymap||e.keyboard.keymap});case"KEYMAP_SAVE_FAILURE":return Ry(Ry({},e),{},{saving:!1,saveError:!0});case"CLEAR_SAVE_ERROR":return Ry(Ry({},e),{},{saveError:null});case"SETTINGS_OPEN":return Ry(Ry({},e),{},{settingsVisible:!0});case"SETTINGS_CLOSE":return Ry(Ry({},e),{},{settingsVisible:!1});case"SETTINGS_UPDATE":return localStorage.setItem("experimental-settings",JSON.stringify(n.settings)),Ry(Ry({},e),{},{experimentalSettings:n.settings});case"CYCLE_THEME":return function(e,n){var t=["light","dark","system"],r=t.indexOf(e.theme),o=t.at((r+1)%t.length);return localStorage.setItem("theme",'"'.concat(o,'"')),document.body.dataset.theme=o,Ry(Ry({},e),{},{theme:o})}(e);default:return e}}(e,n);return Ky(Ky({},t),{},{keyboard:t.keyboard&&Ky(Ky({},t.keyboard),Gy(t.keyboard,n))})},preloadedState:My});document.body.dataset.theme=My.theme,o.createRoot(document.getElementById("app-root")).render((0,O.jsx)(r.StrictMode,{children:(0,O.jsx)(i.zt,{store:zy,children:(0,O.jsx)(Ty,{})})}))},39087:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,':root {\n  --bg: white;\n  --bg-rgb: 255,255,255;\n  --fg: black;\n\t--dark-red: #910e0e;\n\t--dark-blue: #6d99c6;\n  --error-highlight: rgb(179, 60, 60);\n  --selection: rgb(60, 179, 113);\n  --hover-selection: rgba(60, 179, 113, 0.85);\n  --delete: rgb(179, 60, 72);\n  --delete-faint: rgba(179, 60, 72, 0.6);\n  --link: royalblue;\n  --link-hover: #6d99c6;\n  --key-bg-base: #f2f2f2;\n  --key-bg-hover: white;\n  --key-bg-highlight: sandybrown;\n  --key-color-base: #6f6f6f;\n  --key-color-extreme: #313131;\n  --key-color-hover: white;\n  --code-bg: rgba(0, 0, 0, 0.15);\n}\nhtml {\n  font-family: sans-serif;\n}\nhtml, body {\n\twidth: 100vw;\n\theight: 100vh;\n\toverflow: auto;\n\tpadding: 0;\n\tmargin: 0;\n  background-color: var(--bg);\n  color: var(--fg);\n\n  transition: 300ms ease-in-out;\n  transition-property: color, background-color, border-color;\n}\n\nh1, h2, h3, h4, h5, h6 {\n  font-family: Quicksand, avenir, sans-serif;\n}\n\nbody[data-theme="dark"] {\n  color-scheme: dark;\n  --bg: #123;\n  --bg-rgb: 17,34,51;\n  --fg: white;\n  --key-bg-base: #1c2c3b;\n  --key-color-base: #b7b7b7;\n  --key-color-extreme: #e7e7e7;\n}\n@media (prefers-color-scheme: dark) {\n  body[data-theme="system"] {\n    color-scheme: dark;\n    --bg: #123;\n    --bg-rgb: 17,34,51;\n    --fg: white;\n    --key-bg-base: #1c2c3b;\n    --key-color-base: #b7b7b7;\n    --key-color-extreme: #e7e7e7;\n  }\n}\n\nh3 {\n  margin-bottom: 10px;\n}\n\na { color: var(--link) }\na:hover { color: var(--link-hover) }\n\ncode {\n  background-color: var(--code-bg);\n  border-radius: 2px;\n  padding: .15em .3em .05em;\n}\n\n#actions {\n\tposition: absolute;\n  display: flex;\n\tbottom: 5px;\n\tright: 5px;\n  gap: 4px;\n}\n\n#actions button {\n  display: inline-block;\n  cursor: pointer;\n  background-color: var(--hover-selection);\n  color: white;\n\n  font-size: 16px;\n  border: none;\n  border-radius: 5px;\n  padding: 0 5px;\n\n  height: 30px;\n  line-height: 30px;\n  vertical-align: middle;\n}\n\n#actions button[disabled] {\n  filter: saturate(20%);\n  opacity: .5;\n  cursor: not-allowed;\n}\n\n#settings-bar {\n  position: absolute;\n  top: 10px;\n  right: 10px;\n}\n\n#settings-bar button {\n  background: none;\n  color: var(--fg);\n  border: none;\n}\n#settings-bar button:hover {\n  cursor: pointer;\n  color: royalblue;\n}\n\n.fa-delete-right::before {\n  content: \'\\f55a\';\n  transform-origin: center;\n  transform: rotateZ(180deg);\n  display: inline-block;\n}\n',"",{version:3,sources:["webpack://./src/App.css"],names:[],mappings:"AAAA;EACE,WAAW;EACX,qBAAqB;EACrB,WAAW;CACZ,mBAAmB;CACnB,oBAAoB;EACnB,mCAAmC;EACnC,8BAA8B;EAC9B,2CAA2C;EAC3C,0BAA0B;EAC1B,sCAAsC;EACtC,iBAAiB;EACjB,qBAAqB;EACrB,sBAAsB;EACtB,qBAAqB;EACrB,8BAA8B;EAC9B,yBAAyB;EACzB,4BAA4B;EAC5B,wBAAwB;EACxB,8BAA8B;AAChC;AACA;EACE,uBAAuB;AACzB;AACA;CACC,YAAY;CACZ,aAAa;CACb,cAAc;CACd,UAAU;CACV,SAAS;EACR,2BAA2B;EAC3B,gBAAgB;;EAEhB,6BAA6B;EAC7B,0DAA0D;AAC5D;;AAEA;EACE,0CAA0C;AAC5C;;AAEA;EACE,kBAAkB;EAClB,UAAU;EACV,kBAAkB;EAClB,WAAW;EACX,sBAAsB;EACtB,yBAAyB;EACzB,4BAA4B;AAC9B;AACA;EACE;IACE,kBAAkB;IAClB,UAAU;IACV,kBAAkB;IAClB,WAAW;IACX,sBAAsB;IACtB,yBAAyB;IACzB,4BAA4B;EAC9B;AACF;;AAEA;EACE,mBAAmB;AACrB;;AAEA,IAAI,mBAAmB;AACvB,UAAU,yBAAyB;;AAEnC;EACE,gCAAgC;EAChC,kBAAkB;EAClB,yBAAyB;AAC3B;;AAEA;CACC,kBAAkB;EACjB,aAAa;CACd,WAAW;CACX,UAAU;EACT,QAAQ;AACV;;AAEA;EACE,qBAAqB;EACrB,eAAe;EACf,wCAAwC;EACxC,YAAY;;EAEZ,eAAe;EACf,YAAY;EACZ,kBAAkB;EAClB,cAAc;;EAEd,YAAY;EACZ,iBAAiB;EACjB,sBAAsB;AACxB;;AAEA;EACE,qBAAqB;EACrB,WAAW;EACX,mBAAmB;AACrB;;AAEA;EACE,kBAAkB;EAClB,SAAS;EACT,WAAW;AACb;;AAEA;EACE,gBAAgB;EAChB,gBAAgB;EAChB,YAAY;AACd;AACA;EACE,eAAe;EACf,gBAAgB;AAClB;;AAEA;EACE,gBAAgB;EAChB,wBAAwB;EACxB,0BAA0B;EAC1B,qBAAqB;AACvB",sourcesContent:[':root {\n  --bg: white;\n  --bg-rgb: 255,255,255;\n  --fg: black;\n\t--dark-red: #910e0e;\n\t--dark-blue: #6d99c6;\n  --error-highlight: rgb(179, 60, 60);\n  --selection: rgb(60, 179, 113);\n  --hover-selection: rgba(60, 179, 113, 0.85);\n  --delete: rgb(179, 60, 72);\n  --delete-faint: rgba(179, 60, 72, 0.6);\n  --link: royalblue;\n  --link-hover: #6d99c6;\n  --key-bg-base: #f2f2f2;\n  --key-bg-hover: white;\n  --key-bg-highlight: sandybrown;\n  --key-color-base: #6f6f6f;\n  --key-color-extreme: #313131;\n  --key-color-hover: white;\n  --code-bg: rgba(0, 0, 0, 0.15);\n}\nhtml {\n  font-family: sans-serif;\n}\nhtml, body {\n\twidth: 100vw;\n\theight: 100vh;\n\toverflow: auto;\n\tpadding: 0;\n\tmargin: 0;\n  background-color: var(--bg);\n  color: var(--fg);\n\n  transition: 300ms ease-in-out;\n  transition-property: color, background-color, border-color;\n}\n\nh1, h2, h3, h4, h5, h6 {\n  font-family: Quicksand, avenir, sans-serif;\n}\n\nbody[data-theme="dark"] {\n  color-scheme: dark;\n  --bg: #123;\n  --bg-rgb: 17,34,51;\n  --fg: white;\n  --key-bg-base: #1c2c3b;\n  --key-color-base: #b7b7b7;\n  --key-color-extreme: #e7e7e7;\n}\n@media (prefers-color-scheme: dark) {\n  body[data-theme="system"] {\n    color-scheme: dark;\n    --bg: #123;\n    --bg-rgb: 17,34,51;\n    --fg: white;\n    --key-bg-base: #1c2c3b;\n    --key-color-base: #b7b7b7;\n    --key-color-extreme: #e7e7e7;\n  }\n}\n\nh3 {\n  margin-bottom: 10px;\n}\n\na { color: var(--link) }\na:hover { color: var(--link-hover) }\n\ncode {\n  background-color: var(--code-bg);\n  border-radius: 2px;\n  padding: .15em .3em .05em;\n}\n\n#actions {\n\tposition: absolute;\n  display: flex;\n\tbottom: 5px;\n\tright: 5px;\n  gap: 4px;\n}\n\n#actions button {\n  display: inline-block;\n  cursor: pointer;\n  background-color: var(--hover-selection);\n  color: white;\n\n  font-size: 16px;\n  border: none;\n  border-radius: 5px;\n  padding: 0 5px;\n\n  height: 30px;\n  line-height: 30px;\n  vertical-align: middle;\n}\n\n#actions button[disabled] {\n  filter: saturate(20%);\n  opacity: .5;\n  cursor: not-allowed;\n}\n\n#settings-bar {\n  position: absolute;\n  top: 10px;\n  right: 10px;\n}\n\n#settings-bar button {\n  background: none;\n  color: var(--fg);\n  border: none;\n}\n#settings-bar button:hover {\n  cursor: pointer;\n  color: royalblue;\n}\n\n.fa-delete-right::before {\n  content: \'\\f55a\';\n  transform-origin: center;\n  transform: rotateZ(180deg);\n  display: inline-block;\n}\n'],sourceRoot:""}]),n.Z=a},51424:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,"body {\n  margin: 0;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\ncode {\n  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n    monospace;\n}\n","",{version:3,sources:["webpack://./src/index.css"],names:[],mappings:"AAAA;EACE,SAAS;EACT,mCAAmC;EACnC,kCAAkC;AACpC;;AAEA;EACE;aACW;AACb",sourcesContent:["body {\n  margin: 0;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\ncode {\n  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n    monospace;\n}\n"],sourceRoot:""}]),n.Z=a},56281:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,"button.pi2Ig8c3Fdh4H2Jpxdo7 {\n  display: inline-block;\n  cursor: pointer;\n  background-color: var(--hover-selection);\n  color: white;\n\n  font-size: 16px;\n  border: none;\n  border-radius: 5px;\n  padding: 0 5px;\n\n  height: 30px;\n  line-height: 30px;\n  vertical-align: middle;\n}\n\nbutton.Ctpu4E2dZYJ6g8CUGFOF {\n  color: var(--fg);\n  background-color: transparent;\n}\n\nbutton.pi2Ig8c3Fdh4H2Jpxdo7[disabled] {\n  filter: saturate(20%);\n  opacity: .5;\n  cursor: not-allowed;\n}\n","",{version:3,sources:["webpack://./src/Common/action-button.module.css"],names:[],mappings:"AAAA;EACE,qBAAqB;EACrB,eAAe;EACf,wCAAwC;EACxC,YAAY;;EAEZ,eAAe;EACf,YAAY;EACZ,kBAAkB;EAClB,cAAc;;EAEd,YAAY;EACZ,iBAAiB;EACjB,sBAAsB;AACxB;;AAEA;EACE,gBAAgB;EAChB,6BAA6B;AAC/B;;AAEA;EACE,qBAAqB;EACrB,WAAW;EACX,mBAAmB;AACrB",sourcesContent:["button.action {\n  display: inline-block;\n  cursor: pointer;\n  background-color: var(--hover-selection);\n  color: white;\n\n  font-size: 16px;\n  border: none;\n  border-radius: 5px;\n  padding: 0 5px;\n\n  height: 30px;\n  line-height: 30px;\n  vertical-align: middle;\n}\n\nbutton.secondary {\n  color: var(--fg);\n  background-color: transparent;\n}\n\nbutton.action[disabled] {\n  filter: saturate(20%);\n  opacity: .5;\n  cursor: not-allowed;\n}\n"],sourceRoot:""}]),a.locals={action:"pi2Ig8c3Fdh4H2Jpxdo7",secondary:"Ctpu4E2dZYJ6g8CUGFOF"},n.Z=a},56634:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,".jThiLc5_BrUyl71v3rKn {\n  display: inline-block;\n  position: absolute;\n  z-index: 5;\n  font-size: 70%;\n  background: var(--bg);\n  padding: 5px 10px;\n  margin-left: 10px;\n\n  border-radius: 4px;\n}\n\n.jThiLc5_BrUyl71v3rKn p {\n  display: inline-block;\n  cursor: pointer;\n  margin: 0;\n}\n\n.jThiLc5_BrUyl71v3rKn ul {\n  display: none;\n}\n.jThiLc5_BrUyl71v3rKn.xG2GKlsc07jLEb2aMC6H {\n  box-shadow: 2px 2px 5px 0px rgba(0, 0, 0, 0.5);\n}\n.jThiLc5_BrUyl71v3rKn.xG2GKlsc07jLEb2aMC6H ul {\n  display: block;\n  padding: 0;\n  margin: 0;\n  list-style-type: none;\n}\n\n.jThiLc5_BrUyl71v3rKn li {\n  cursor: pointer;\n  margin: 2px 0;\n  line-height: 20px;\n  padding: 0 5px;\n  border-radius: 10px;\n}\n\n.jThiLc5_BrUyl71v3rKn li:hover {\n  background-color: var(--hover-selection);\n  color: white;\n}\n","",{version:3,sources:["webpack://./src/Common/action-menu.module.css"],names:[],mappings:"AAAA;EACE,qBAAqB;EACrB,kBAAkB;EAClB,UAAU;EACV,cAAc;EACd,qBAAqB;EACrB,iBAAiB;EACjB,iBAAiB;;EAEjB,kBAAkB;AACpB;;AAEA;EACE,qBAAqB;EACrB,eAAe;EACf,SAAS;AACX;;AAEA;EACE,aAAa;AACf;AACA;EACE,8CAA8C;AAChD;AACA;EACE,cAAc;EACd,UAAU;EACV,SAAS;EACT,qBAAqB;AACvB;;AAEA;EACE,eAAe;EACf,aAAa;EACb,iBAAiB;EACjB,cAAc;EACd,mBAAmB;AACrB;;AAEA;EACE,wCAAwC;EACxC,YAAY;AACd",sourcesContent:[".menu {\n  display: inline-block;\n  position: absolute;\n  z-index: 5;\n  font-size: 70%;\n  background: var(--bg);\n  padding: 5px 10px;\n  margin-left: 10px;\n\n  border-radius: 4px;\n}\n\n.menu p {\n  display: inline-block;\n  cursor: pointer;\n  margin: 0;\n}\n\n.menu ul {\n  display: none;\n}\n.menu.open {\n  box-shadow: 2px 2px 5px 0px rgba(0, 0, 0, 0.5);\n}\n.menu.open ul {\n  display: block;\n  padding: 0;\n  margin: 0;\n  list-style-type: none;\n}\n\n.menu li {\n  cursor: pointer;\n  margin: 2px 0;\n  line-height: 20px;\n  padding: 0 5px;\n  border-radius: 10px;\n}\n\n.menu li:hover {\n  background-color: var(--hover-selection);\n  color: white;\n}\n"],sourceRoot:""}]),a.locals={menu:"jThiLc5_BrUyl71v3rKn",open:"xG2GKlsc07jLEb2aMC6H"},n.Z=a},49502:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,".ZpdcqlK42OntJos3eGw0 {\n  background-color: var(--bg);\n  padding: 20px 40px;\n  margin: 40px;\n  max-width: 500px;\n  box-shadow: 0px 10px 25px rgba(0, 0, 0, 0.4);\n  border-radius: 2px;\n}\n\n.ZpdcqlK42OntJos3eGw0 p, .ZpdcqlK42OntJos3eGw0 ul {\n  font-family: sans-serif;\n  line-height: 1.3rem;\n}\n\n.Mywg1Gw3bKMc9Kd9qcEO {\n  display: block;\n  margin: 0 auto;\n}\n","",{version:3,sources:["webpack://./src/Common/dialog-box.module.css"],names:[],mappings:"AAAA;EACE,2BAA2B;EAC3B,kBAAkB;EAClB,YAAY;EACZ,gBAAgB;EAChB,4CAA4C;EAC5C,kBAAkB;AACpB;;AAEA;EACE,uBAAuB;EACvB,mBAAmB;AACrB;;AAEA;EACE,cAAc;EACd,cAAc;AAChB",sourcesContent:[".dialog {\n  background-color: var(--bg);\n  padding: 20px 40px;\n  margin: 40px;\n  max-width: 500px;\n  box-shadow: 0px 10px 25px rgba(0, 0, 0, 0.4);\n  border-radius: 2px;\n}\n\n.dialog p, .dialog ul {\n  font-family: sans-serif;\n  line-height: 1.3rem;\n}\n\n.button {\n  display: block;\n  margin: 0 auto;\n}\n"],sourceRoot:""}]),a.locals={dialog:"ZpdcqlK42OntJos3eGw0",button:"Mywg1Gw3bKMc9Kd9qcEO"},n.Z=a},86015:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,".ho3CuFFjX1VFNZJiAyVs {\n  position: relative;\n}\n\n.u9J3v5ZrIbuVICzNBkRw {\n  padding: 5px;\n  cursor: pointer;\n  opacity: 0.5;\n  color: var(--key-color-base);\n}\n.u9J3v5ZrIbuVICzNBkRw:hover {\n  opacity: 1;\n}\n\n.wmqWaOx7XyKADh7Kv4RZ {\n  position: absolute;\n  z-index: 10;\n  bottom: 0;\n  left: 50%;\n  transform: translate(-50%, 100%);\n  max-width: 250px;\n  width: 100%;\n\n  border-radius: 4px;\n  padding: 3px 5px;\n\n  color: white;\n  background-color: var(--error-highlight);\n  font-size: 85%;\n  font-family: sans-serif;\n\n  opacity: 0.9;\n}\n.wmqWaOx7XyKADh7Kv4RZ::before {\n  position: absolute;\n  display: block;\n  content: ' ';\n  z-index: -1;\n\n  left: 50%;\n  width: 10px;\n  height: 10px;\n\n  background-color: var(--error-highlight);\n  transform: translate(-50%, -7px) rotate(45deg);\n}\n","",{version:3,sources:["webpack://./src/Common/editablefield.module.css"],names:[],mappings:"AAAA;EACE,kBAAkB;AACpB;;AAEA;EACE,YAAY;EACZ,eAAe;EACf,YAAY;EACZ,4BAA4B;AAC9B;AACA;EACE,UAAU;AACZ;;AAEA;EACE,kBAAkB;EAClB,WAAW;EACX,SAAS;EACT,SAAS;EACT,gCAAgC;EAChC,gBAAgB;EAChB,WAAW;;EAEX,kBAAkB;EAClB,gBAAgB;;EAEhB,YAAY;EACZ,wCAAwC;EACxC,cAAc;EACd,uBAAuB;;EAEvB,YAAY;AACd;AACA;EACE,kBAAkB;EAClB,cAAc;EACd,YAAY;EACZ,WAAW;;EAEX,SAAS;EACT,WAAW;EACX,YAAY;;EAEZ,wCAAwC;EACxC,8CAA8C;AAChD",sourcesContent:[".container {\n  position: relative;\n}\n\n.edit {\n  padding: 5px;\n  cursor: pointer;\n  opacity: 0.5;\n  color: var(--key-color-base);\n}\n.edit:hover {\n  opacity: 1;\n}\n\n.error {\n  position: absolute;\n  z-index: 10;\n  bottom: 0;\n  left: 50%;\n  transform: translate(-50%, 100%);\n  max-width: 250px;\n  width: 100%;\n\n  border-radius: 4px;\n  padding: 3px 5px;\n\n  color: white;\n  background-color: var(--error-highlight);\n  font-size: 85%;\n  font-family: sans-serif;\n\n  opacity: 0.9;\n}\n.error::before {\n  position: absolute;\n  display: block;\n  content: ' ';\n  z-index: -1;\n\n  left: 50%;\n  width: 10px;\n  height: 10px;\n\n  background-color: var(--error-highlight);\n  transform: translate(-50%, -7px) rotate(45deg);\n}\n"],sourceRoot:""}]),a.locals={container:"ho3CuFFjX1VFNZJiAyVs",edit:"u9J3v5ZrIbuVICzNBkRw",error:"wmqWaOx7XyKADh7Kv4RZ"},n.Z=a},33988:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,".OaJISbD1WCmb03at77EG {\n  position: relative;\n}\n\n.MUN9De8dUvbPGH9cEDoQ {\n  position: absolute;\n  z-index: 10;\n  bottom: 0;\n  left: 50%;\n  transform: translate(-50%, 100%);\n  max-width: 250px;\n  width: 100%;\n\n  border-radius: 4px;\n  padding: 3px 5px;\n\n  color: white;\n  background-color: var(--error-highlight);\n  font-size: 85%;\n  font-family: sans-serif;\n\n  opacity: 0.9;\n}\n.MUN9De8dUvbPGH9cEDoQ::before {\n  position: absolute;\n  display: block;\n  content: ' ';\n  z-index: -1;\n\n  left: 50%;\n  width: 10px;\n  height: 10px;\n\n  background-color: var(--error-highlight);\n  transform: translate(-50%, -7px) rotate(45deg);\n}\n","",{version:3,sources:["webpack://./src/Common/input.module.css"],names:[],mappings:"AAAA;EACE,kBAAkB;AACpB;;AAEA;EACE,kBAAkB;EAClB,WAAW;EACX,SAAS;EACT,SAAS;EACT,gCAAgC;EAChC,gBAAgB;EAChB,WAAW;;EAEX,kBAAkB;EAClB,gBAAgB;;EAEhB,YAAY;EACZ,wCAAwC;EACxC,cAAc;EACd,uBAAuB;;EAEvB,YAAY;AACd;AACA;EACE,kBAAkB;EAClB,cAAc;EACd,YAAY;EACZ,WAAW;;EAEX,SAAS;EACT,WAAW;EACX,YAAY;;EAEZ,wCAAwC;EACxC,8CAA8C;AAChD",sourcesContent:[".wrapper {\n  position: relative;\n}\n\n.error {\n  position: absolute;\n  z-index: 10;\n  bottom: 0;\n  left: 50%;\n  transform: translate(-50%, 100%);\n  max-width: 250px;\n  width: 100%;\n\n  border-radius: 4px;\n  padding: 3px 5px;\n\n  color: white;\n  background-color: var(--error-highlight);\n  font-size: 85%;\n  font-family: sans-serif;\n\n  opacity: 0.9;\n}\n.error::before {\n  position: absolute;\n  display: block;\n  content: ' ';\n  z-index: -1;\n\n  left: 50%;\n  width: 10px;\n  height: 10px;\n\n  background-color: var(--error-highlight);\n  transform: translate(-50%, -7px) rotate(45deg);\n}\n"],sourceRoot:""}]),a.locals={wrapper:"OaJISbD1WCmb03at77EG",error:"MUN9De8dUvbPGH9cEDoQ"},n.Z=a},87617:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,".J2R67AQeCK_aC1DKFCMJ {\n  margin: 4px;\n}","",{version:3,sources:["webpack://./src/Common/link.module.css"],names:[],mappings:"AAAA;EACE,WAAW;AACb",sourcesContent:[".icon {\n  margin: 4px;\n}"],sourceRoot:""}]),a.locals={icon:"J2R67AQeCK_aC1DKFCMJ"},n.Z=a},92127:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,".FMkASzwt_oMscZdObpDQ {\n  display: inline-block;\n  text-align: center;\n}\n.TNF6aRMBPANvZifB27ZK {\n  display: inline-block;\n  animation: GGCs7iiBiwDCnT80cyTh 1s linear infinite;\n}\n\n@keyframes GGCs7iiBiwDCnT80cyTh {\n  from { transform: rotate(0deg); }\n  to { transform: rotate(360deg); }\n}","",{version:3,sources:["webpack://./src/Common/spinner.module.css"],names:[],mappings:"AAAA;EACE,qBAAqB;EACrB,kBAAkB;AACpB;AACA;EACE,qBAAqB;EACrB,kDAAkC;AACpC;;AAEA;EACE,OAAO,uBAAuB,EAAE;EAChC,KAAK,yBAAyB,EAAE;AAClC",sourcesContent:[".spinner {\n  display: inline-block;\n  text-align: center;\n}\n.icon {\n  display: inline-block;\n  animation: spin 1s linear infinite;\n}\n\n@keyframes spin {\n  from { transform: rotate(0deg); }\n  to { transform: rotate(360deg); }\n}"],sourceRoot:""}]),a.locals={spinner:"FMkASzwt_oMscZdObpDQ",icon:"TNF6aRMBPANvZifB27ZK",spin:"GGCs7iiBiwDCnT80cyTh"},n.Z=a},528:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,".sq9i7hQeTeeKuarmO8oA {\n  display: inline-block;\n  font-size: 70%;\n  background: rgba(0, 0, 0, 0.5);\n  color: white;\n  padding: 4px;\n  border-radius: 4px;\n}\n","",{version:3,sources:["webpack://./src/Common/tip.module.css"],names:[],mappings:"AAAA;EACE,qBAAqB;EACrB,cAAc;EACd,8BAA8B;EAC9B,YAAY;EACZ,YAAY;EACZ,kBAAkB;AACpB",sourcesContent:[".tip {\n  display: inline-block;\n  font-size: 70%;\n  background: rgba(0, 0, 0, 0.5);\n  color: white;\n  padding: 4px;\n  border-radius: 4px;\n}\n"],sourceRoot:""}]),a.locals={tip:"sq9i7hQeTeeKuarmO8oA"},n.Z=a},14084:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,".Q5veln3l3laVkuNPs5dQ {\n  position: relative;\n}\n\n.Q5veln3l3laVkuNPs5dQ pre {\n  white-space: pre;\n  background-color: var(--code-bg);\n  color: var(--key-color-base);\n  padding: 10px;\n  max-height: 320px;\n  overflow: scroll;\n}\n\n.dqzgBwJ1Rq0XgMqeAKe7 {\n  position: absolute;\n  top: 15px;\n  right: 15px;\n  padding: 4px 7px;\n  color: var(--key-color-base);\n  background-color: var(--key-bg-base);\n  border: 1px solid var(--key-color-base);\n  border-radius: 3px;\n}\n.dqzgBwJ1Rq0XgMqeAKe7:hover {\n  cursor: pointer;\n  background-color: var(--selection);\n  border: var(--selection);\n  color: white;\n}\n\n.YV2lKA9hbJpP4Vs4udw8 {\n  position: absolute;\n  top: 5px;\n  right: 0px;\n  background-color: var(--selection);\n  color: white;\n  padding: 10px;\n  border-radius: 2px;\n  cursor: none;\n}\n","",{version:3,sources:["webpack://./src/Dialogs/unexpected-error.module.css"],names:[],mappings:"AAAA;EACE,kBAAkB;AACpB;;AAEA;EACE,gBAAgB;EAChB,gCAAgC;EAChC,4BAA4B;EAC5B,aAAa;EACb,iBAAiB;EACjB,gBAAgB;AAClB;;AAEA;EACE,kBAAkB;EAClB,SAAS;EACT,WAAW;EACX,gBAAgB;EAChB,4BAA4B;EAC5B,oCAAoC;EACpC,uCAAuC;EACvC,kBAAkB;AACpB;AACA;EACE,eAAe;EACf,kCAAkC;EAClC,wBAAwB;EACxB,YAAY;AACd;;AAEA;EACE,kBAAkB;EAClB,QAAQ;EACR,UAAU;EACV,kCAAkC;EAClC,YAAY;EACZ,aAAa;EACb,kBAAkB;EAClB,YAAY;AACd",sourcesContent:[".stackTrace {\n  position: relative;\n}\n\n.stackTrace pre {\n  white-space: pre;\n  background-color: var(--code-bg);\n  color: var(--key-color-base);\n  padding: 10px;\n  max-height: 320px;\n  overflow: scroll;\n}\n\n.button {\n  position: absolute;\n  top: 15px;\n  right: 15px;\n  padding: 4px 7px;\n  color: var(--key-color-base);\n  background-color: var(--key-bg-base);\n  border: 1px solid var(--key-color-base);\n  border-radius: 3px;\n}\n.button:hover {\n  cursor: pointer;\n  background-color: var(--selection);\n  border: var(--selection);\n  color: white;\n}\n\n.copyMessage {\n  position: absolute;\n  top: 5px;\n  right: 0px;\n  background-color: var(--selection);\n  color: white;\n  padding: 10px;\n  border-radius: 2px;\n  cursor: none;\n}\n"],sourceRoot:""}]),a.locals={stackTrace:"Q5veln3l3laVkuNPs5dQ",button:"dqzgBwJ1Rq0XgMqeAKe7",copyMessage:"YV2lKA9hbJpP4Vs4udw8"},n.Z=a},14409:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,".xCOOsvxL5qQ3kR8ri91A {\n  box-shadow: 0 4px 10px 0px rgba(0, 0, 0, 0.5);\n}\n\n.u4uW9U2E0DfbUM9vP9pf {\n  text-align: center;\n  padding: 0;\n  margin: 0;\n}\n\n.u4uW9U2E0DfbUM9vP9pf li {\n  display: inline-block;\n  font-family: monospace;\n  font-size: 120%;\n  margin: 4px 2px;\n  padding: 4px 4px;\n  border-radius: 2px;\n  cursor: pointer;\n\n  background-color: rgba(0, 0, 0, .5);\n  opacity: 0.5;\n  color: white;\n}\n\n.u4uW9U2E0DfbUM9vP9pf li.YcHSun3PLo8dCb9qIZtc {\n  opacity: 1;\n  background-color: var(--selection);\n  color: white;\n}\n\n.u4uW9U2E0DfbUM9vP9pf li:hover {\n  opacity: 1;\n  background-color: var(--hover-selection);\n}\n\n.d3hMEDpEkH8H7YLG_NjI {\n  width: 100%;\n  box-sizing: border-box;\n  text-align: center;\n}\n","",{version:3,sources:["webpack://./src/EnhancedPickers/Keycode/styles.module.css"],names:[],mappings:"AAAA;EACE,6CAA6C;AAC/C;;AAEA;EACE,kBAAkB;EAClB,UAAU;EACV,SAAS;AACX;;AAEA;EACE,qBAAqB;EACrB,sBAAsB;EACtB,eAAe;EACf,eAAe;EACf,gBAAgB;EAChB,kBAAkB;EAClB,eAAe;;EAEf,mCAAmC;EACnC,YAAY;EACZ,YAAY;AACd;;AAEA;EACE,UAAU;EACV,kCAAkC;EAClC,YAAY;AACd;;AAEA;EACE,UAAU;EACV,wCAAwC;AAC1C;;AAEA;EACE,WAAW;EACX,sBAAsB;EACtB,kBAAkB;AACpB",sourcesContent:[".previewKeycode {\n  box-shadow: 0 4px 10px 0px rgba(0, 0, 0, 0.5);\n}\n\n.modifiers {\n  text-align: center;\n  padding: 0;\n  margin: 0;\n}\n\n.modifiers li {\n  display: inline-block;\n  font-family: monospace;\n  font-size: 120%;\n  margin: 4px 2px;\n  padding: 4px 4px;\n  border-radius: 2px;\n  cursor: pointer;\n\n  background-color: rgba(0, 0, 0, .5);\n  opacity: 0.5;\n  color: white;\n}\n\n.modifiers li.selected {\n  opacity: 1;\n  background-color: var(--selection);\n  color: white;\n}\n\n.modifiers li:hover {\n  opacity: 1;\n  background-color: var(--hover-selection);\n}\n\n.quickCloseTip {\n  width: 100%;\n  box-sizing: border-box;\n  text-align: center;\n}\n"],sourceRoot:""}]),a.locals={previewKeycode:"xCOOsvxL5qQ3kR8ri91A",modifiers:"u4uW9U2E0DfbUM9vP9pf",selected:"YcHSun3PLo8dCb9qIZtc",quickCloseTip:"d3hMEDpEkH8H7YLG_NjI"},n.Z=a},27470:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,'.S3t60CK1JCROFIrRlm4j [readonly] {\n  cursor: not-allowed;\n  color: gray;\n  outline: gray;\n}\n\ninput.S3t60CK1JCROFIrRlm4j[type="text"],\ninput.S3t60CK1JCROFIrRlm4j[type="number"],\nselect.S3t60CK1JCROFIrRlm4j {\n  width: 100%;\n}\n\nol.MedG7SPG2ge2h7j2yqrJ {\n  list-style-type: none;\n  margin-top: 0;\n  padding: 0;\n}\n.V50Bekt6td9yQOSiDGdx {\n  list-style-type: none;\n  margin: 0;\n  padding: 0;\n}\n.V50Bekt6td9yQOSiDGdx li {\n  display: inline-block;\n  line-height: 2rem;\n}\nol.QNg3v6_eJoK7_qV0_y9n {\n  margin: 0;\n}\nol.QNg3v6_eJoK7_qV0_y9n li {\n  line-height: 2rem;\n}\nol.u65C3Uji7covMUn996dR {\n  list-style-type: none;\n  padding: 0;\n}\n.xp5u4Uo4X2fxxX9KwwXu {\n  cursor: pointer;\n  margin: 2px;\n  padding: 5px;\n  font-family: monospace;\n  border-radius: 1rem;\n  background-color: var(--key-bg-base);\n}\n.xp5u4Uo4X2fxxX9KwwXu:hover {\n  background-color: var(--hover-selection);\n  color: white;\n}\n\n.gpFGP00LCwlGjK6yrGWw {\n  vertical-align: text-bottom;\n  margin: 0 2px;\n}\n.gpFGP00LCwlGjK6yrGWw:hover {\n  color: black;\n}\n\n.gsAzkKxnfzTcp5ApwmWS {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n  list-style-type: none;\n  padding: 0;\n  margin: 0;\n}\n\n/* Copied from MacroEditor :( */\n.KrcWDYfRVRfvRhpsBFxs {\n  visibility: hidden;\n  position: absolute;\n  top: 0px;\n  right: 0px;\n  font-size: 80%;\n\n  color: var(--key-color-hover);\n}\n.KrcWDYfRVRfvRhpsBFxs > * {\n  margin: 2px;\n  opacity: 0.5;\n  cursor: pointer;\n}\n.gsAzkKxnfzTcp5ApwmWS li :hover .KrcWDYfRVRfvRhpsBFxs {\n  visibility: visible;\n  z-index: 10;\n}\n\n.KrcWDYfRVRfvRhpsBFxs :hover {\n  opacity: 1;\n}\n',"",{version:3,sources:["webpack://./src/Keyboard/Behaviors/PropertyValue/styles.module.css"],names:[],mappings:"AAAA;EACE,mBAAmB;EACnB,WAAW;EACX,aAAa;AACf;;AAEA;;;EAGE,WAAW;AACb;;AAEA;EACE,qBAAqB;EACrB,aAAa;EACb,UAAU;AACZ;AACA;EACE,qBAAqB;EACrB,SAAS;EACT,UAAU;AACZ;AACA;EACE,qBAAqB;EACrB,iBAAiB;AACnB;AACA;EACE,SAAS;AACX;AACA;EACE,iBAAiB;AACnB;AACA;EACE,qBAAqB;EACrB,UAAU;AACZ;AACA;EACE,eAAe;EACf,WAAW;EACX,YAAY;EACZ,sBAAsB;EACtB,mBAAmB;EACnB,oCAAoC;AACtC;AACA;EACE,wCAAwC;EACxC,YAAY;AACd;;AAEA;EACE,2BAA2B;EAC3B,aAAa;AACf;AACA;EACE,YAAY;AACd;;AAEA;EACE,aAAa;EACb,eAAe;EACf,SAAS;EACT,qBAAqB;EACrB,UAAU;EACV,SAAS;AACX;;AAEA,+BAA+B;AAC/B;EACE,kBAAkB;EAClB,kBAAkB;EAClB,QAAQ;EACR,UAAU;EACV,cAAc;;EAEd,6BAA6B;AAC/B;AACA;EACE,WAAW;EACX,YAAY;EACZ,eAAe;AACjB;AACA;EACE,mBAAmB;EACnB,WAAW;AACb;;AAEA;EACE,UAAU;AACZ",sourcesContent:['.propertyValue [readonly] {\n  cursor: not-allowed;\n  color: gray;\n  outline: gray;\n}\n\ninput.propertyValue[type="text"],\ninput.propertyValue[type="number"],\nselect.propertyValue {\n  width: 100%;\n}\n\nol.propertyMultiSelect {\n  list-style-type: none;\n  margin-top: 0;\n  padding: 0;\n}\n.propertyMultiSelectChips {\n  list-style-type: none;\n  margin: 0;\n  padding: 0;\n}\n.propertyMultiSelectChips li {\n  display: inline-block;\n  line-height: 2rem;\n}\nol.propertyPhandleSelect {\n  margin: 0;\n}\nol.propertyPhandleSelect li {\n  line-height: 2rem;\n}\nol.propertyPhandleSingleton {\n  list-style-type: none;\n  padding: 0;\n}\n.behaviorBind {\n  cursor: pointer;\n  margin: 2px;\n  padding: 5px;\n  font-family: monospace;\n  border-radius: 1rem;\n  background-color: var(--key-bg-base);\n}\n.behaviorBind:hover {\n  background-color: var(--hover-selection);\n  color: white;\n}\n\n.phandleRemove {\n  vertical-align: text-bottom;\n  margin: 0 2px;\n}\n.phandleRemove:hover {\n  color: black;\n}\n\n.propertyBindingsValue {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n  list-style-type: none;\n  padding: 0;\n  margin: 0;\n}\n\n/* Copied from MacroEditor :( */\n.actions {\n  visibility: hidden;\n  position: absolute;\n  top: 0px;\n  right: 0px;\n  font-size: 80%;\n\n  color: var(--key-color-hover);\n}\n.actions > * {\n  margin: 2px;\n  opacity: 0.5;\n  cursor: pointer;\n}\n.propertyBindingsValue li :hover .actions {\n  visibility: visible;\n  z-index: 10;\n}\n\n.actions :hover {\n  opacity: 1;\n}\n'],sourceRoot:""}]),a.locals={propertyValue:"S3t60CK1JCROFIrRlm4j",propertyMultiSelect:"MedG7SPG2ge2h7j2yqrJ",propertyMultiSelectChips:"V50Bekt6td9yQOSiDGdx",propertyPhandleSelect:"QNg3v6_eJoK7_qV0_y9n",propertyPhandleSingleton:"u65C3Uji7covMUn996dR",behaviorBind:"xp5u4Uo4X2fxxX9KwwXu",phandleRemove:"gpFGP00LCwlGjK6yrGWw",propertyBindingsValue:"gsAzkKxnfzTcp5ApwmWS",actions:"KrcWDYfRVRfvRhpsBFxs"},n.Z=a},34288:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,".kcj881bnLDph62EcKelj {\n  padding-bottom: 60px;\n}\n\n.GeuMxQtBvZYr0nOURDHd {\n  display: flex;\n  width: 190px;\n  flex-direction: column;\n  padding: 10px;\n  gap: 10px;\n  position: fixed;\n}\n\n.NqlHG1MKBiOUUFAed3CM {\n  max-width: 700px;\n  margin: 0 auto;\n  padding-bottom: 60px;\n}\n\n.NqlHG1MKBiOUUFAed3CM table {\n  border-spacing: 0;\n}\n.NqlHG1MKBiOUUFAed3CM table thead {\n  text-align: left;\n}\n\n.NqlHG1MKBiOUUFAed3CM table tbody tr td {\n  padding: 10px;\n  margin: 0;\n}\n.NqlHG1MKBiOUUFAed3CM table tbody tr:nth-child(even) {\n  background-color: var(--key-bg-base);\n}\n\n.Q3_rmo3XiEVg8qfXgKX_ {\n  cursor: pointer;\n  padding: 5px;\n  opacity: 0.6;\n}\n.Q3_rmo3XiEVg8qfXgKX_:hover {\n  opacity: 1;\n}\n\ntable.czOKx_t_EDF44pilzyzA { max-height: 80vh; }\ntable.czOKx_t_EDF44pilzyzA th { text-align: left }\ntable.czOKx_t_EDF44pilzyzA input { font-family: monospace }\ntable.czOKx_t_EDF44pilzyzA td {\n  padding: 4px;\n  vertical-align: top;\n}\ntable.czOKx_t_EDF44pilzyzA .s8rWNi6e8BZ7yQubfDws {\n  font-family: monospace;\n}\n.Bux6GxjreGZZkcXqx6kv {\n  display: block;\n  font-style: italic;\n}\n","",{version:3,sources:["webpack://./src/Keyboard/Behaviors/styles.module.css"],names:[],mappings:"AAAA;EACE,oBAAoB;AACtB;;AAEA;EACE,aAAa;EACb,YAAY;EACZ,sBAAsB;EACtB,aAAa;EACb,SAAS;EACT,eAAe;AACjB;;AAEA;EACE,gBAAgB;EAChB,cAAc;EACd,oBAAoB;AACtB;;AAEA;EACE,iBAAiB;AACnB;AACA;EACE,gBAAgB;AAClB;;AAEA;EACE,aAAa;EACb,SAAS;AACX;AACA;EACE,oCAAoC;AACtC;;AAEA;EACE,eAAe;EACf,YAAY;EACZ,YAAY;AACd;AACA;EACE,UAAU;AACZ;;AAEA,6BAAmB,gBAAgB,EAAE;AACrC,gCAAsB,iBAAiB;AACvC,mCAAyB,uBAAuB;AAChD;EACE,YAAY;EACZ,mBAAmB;AACrB;AACA;EACE,sBAAsB;AACxB;AACA;EACE,cAAc;EACd,kBAAkB;AACpB",sourcesContent:[".main {\n  padding-bottom: 60px;\n}\n\n.sidebar {\n  display: flex;\n  width: 190px;\n  flex-direction: column;\n  padding: 10px;\n  gap: 10px;\n  position: fixed;\n}\n\n.panel {\n  max-width: 700px;\n  margin: 0 auto;\n  padding-bottom: 60px;\n}\n\n.panel table {\n  border-spacing: 0;\n}\n.panel table thead {\n  text-align: left;\n}\n\n.panel table tbody tr td {\n  padding: 10px;\n  margin: 0;\n}\n.panel table tbody tr:nth-child(even) {\n  background-color: var(--key-bg-base);\n}\n\n.action {\n  cursor: pointer;\n  padding: 5px;\n  opacity: 0.6;\n}\n.action:hover {\n  opacity: 1;\n}\n\ntable.editorForm { max-height: 80vh; }\ntable.editorForm th { text-align: left }\ntable.editorForm input { font-family: monospace }\ntable.editorForm td {\n  padding: 4px;\n  vertical-align: top;\n}\ntable.editorForm .propertyName {\n  font-family: monospace;\n}\n.propertyDeprecation {\n  display: block;\n  font-style: italic;\n}\n"],sourceRoot:""}]),a.locals={main:"kcj881bnLDph62EcKelj",sidebar:"GeuMxQtBvZYr0nOURDHd",panel:"NqlHG1MKBiOUUFAed3CM",action:"Q3_rmo3XiEVg8qfXgKX_",editorForm:"czOKx_t_EDF44pilzyzA",propertyName:"s8rWNi6e8BZ7yQubfDws",propertyDeprecation:"Bux6GxjreGZZkcXqx6kv"},n.Z=a},78207:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,'.pwXbGORsYKqyOPBm9_dW {\n  padding-bottom: 60px;\n}\n\n.QgFDXNybKD_XN66M_WpJ {\n  display: flex;\n  width: 190px;\n  flex-direction: column;\n  padding: 10px;\n  gap: 10px;\n  position: fixed;\n}\n\n.Gy0KZGCgOeVminAfggFQ {\n  cursor: pointer;\n  background-color: var(--key-bg-base);\n}\n.Gy0KZGCgOeVminAfggFQ:hover {\n  border: 4px solid var(--selection);\n  box-sizing: border-box;\n}\n\n.Ld9cVdtpS_DpbEifyX9Y {\n  background-color: var(--selection);\n}\n.Ld9cVdtpS_DpbEifyX9Y:hover {\n  background-color: var(--hover-selection);\n}\n\n.mqpJ7uHAMKxvORoOIPFK {\n  max-width: 450px;\n  margin: 0 auto;\n  padding-bottom: 60px;\n}\n\n.BVucwy4AZCyl7GyivzMn {\n  display: flex;\n  justify-content: space-between;\n  border-bottom: 2px solid var(--key-bg-base);\n  margin: 5px 0;\n}\n\n.U6g0njWjBrtb_I3XhAeV {\n  cursor: pointer;\n  padding: 5px;\n  opacity: 0.6;\n}\n.U6g0njWjBrtb_I3XhAeV:hover {\n  opacity: 1;\n}\n\n.CROhsBLtunQ2BbfWdkQw {\n  margin: 10px 0 40px;\n}\n\n.CROhsBLtunQ2BbfWdkQw .MhA4fXXuaZ1iPvv05w4m {\n  display: flex;\n  justify-content: space-evenly;\n  align-items: center;\n}\n\n.CROhsBLtunQ2BbfWdkQw h5 {\n  margin: 0;\n}\n\n.vujYcgQjiN4BGp37FMUH {\n  color: var(--key-color-base);\n}\n\n.uh2yPWyfEOZtgXo2_KtU {\n  color: var(--delete);\n}\n\n.NAB1EN6_pcYIy5Db9XnC {\n  display: none !important;\n}\n.NAB1EN6_pcYIy5Db9XnC:hover {\n  color: white;\n  cursor: pointer;\n}\n.kYn8brsFgEaf61oQyv4d:hover .NAB1EN6_pcYIy5Db9XnC {\n  display: flex !important;\n  position: absolute;\n  right: -48px;\n  transform: scale(0.5);\n}\n\n.NGxnhfSJaJ9FNu3hlBfc.NAB1EN6_pcYIy5Db9XnC,\n.NGxnhfSJaJ9FNu3hlBfc.GXgG_IaQTricqThqzsKe > * {\n  background-color: sandybrown;\n  color: white;\n}\n.NGxnhfSJaJ9FNu3hlBfc.NAB1EN6_pcYIy5Db9XnC {\n  display: flex;\n}\n\n.fljdvcebOv1gbKZpf0vW {\n  margin: 10px 0;\n  display: flex;\n}\n\n.fljdvcebOv1gbKZpf0vW label {\n  display: inline-block;\n  width: 120px;\n  text-align: right;\n  margin-right: 10px;\n}\n\n.bnN6JCit0RcjdQiqzw8w {\n  list-style-type: none;\n  margin: 0;\n  padding: 0;\n}\n.bnN6JCit0RcjdQiqzw8w li {\n  cursor: pointer;\n  display: inline-block;\n  padding: 5px 10px;\n  margin: 5px;\n  border-radius: 30px;\n  background-color: var(--key-bg-base);\n}\n.bnN6JCit0RcjdQiqzw8w li[data-selected="true"] {\n  background-color: var(--selection);\n  color: var(--key-color-hover);\n}\n.bnN6JCit0RcjdQiqzw8w li:hover {\n  background-color: var(--hover-selection);\n  color: var(--key-color-hover);\n}\n\n.NpLEYrC32KQ4rUx9hUFJ {\n  background-color: var(--key-bg-base);\n  border-radius: 30px;\n  color: var(--key-color-base);\n  font-size: 80%;\n  text-align: center;\n  padding: 5px;\n  position: absolute;\n  bottom: -40px;\n  left: 50%;\n  transform: translate(-50%, 0);\n  width: 110%;\n\n  pointer-events: none;\n  transition: opacity ease-in-out .5s;\n}\n\n.l2gtE1XKS63R5TM5unip { position: relative }\n.l2gtE1XKS63R5TM5unip:hover .NpLEYrC32KQ4rUx9hUFJ { opacity: 0.25 }\n',"",{version:3,sources:["webpack://./src/Keyboard/Combos/styles.module.css"],names:[],mappings:"AAAA;EACE,oBAAoB;AACtB;;AAEA;EACE,aAAa;EACb,YAAY;EACZ,sBAAsB;EACtB,aAAa;EACb,SAAS;EACT,eAAe;AACjB;;AAEA;EACE,eAAe;EACf,oCAAoC;AACtC;AACA;EACE,kCAAkC;EAClC,sBAAsB;AACxB;;AAEA;EACE,kCAAkC;AACpC;AACA;EACE,wCAAwC;AAC1C;;AAEA;EACE,gBAAgB;EAChB,cAAc;EACd,oBAAoB;AACtB;;AAEA;EACE,aAAa;EACb,8BAA8B;EAC9B,2CAA2C;EAC3C,aAAa;AACf;;AAEA;EACE,eAAe;EACf,YAAY;EACZ,YAAY;AACd;AACA;EACE,UAAU;AACZ;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,6BAA6B;EAC7B,mBAAmB;AACrB;;AAEA;EACE,SAAS;AACX;;AAEA;EACE,4BAA4B;AAC9B;;AAEA;EACE,oBAAoB;AACtB;;AAEA;EACE,wBAAwB;AAC1B;AACA;EACE,YAAY;EACZ,eAAe;AACjB;AACA;EACE,wBAAwB;EACxB,kBAAkB;EAClB,YAAY;EACZ,qBAAqB;AACvB;;AAEA;;EAEE,4BAA4B;EAC5B,YAAY;AACd;AACA;EACE,aAAa;AACf;;AAEA;EACE,cAAc;EACd,aAAa;AACf;;AAEA;EACE,qBAAqB;EACrB,YAAY;EACZ,iBAAiB;EACjB,kBAAkB;AACpB;;AAEA;EACE,qBAAqB;EACrB,SAAS;EACT,UAAU;AACZ;AACA;EACE,eAAe;EACf,qBAAqB;EACrB,iBAAiB;EACjB,WAAW;EACX,mBAAmB;EACnB,oCAAoC;AACtC;AACA;EACE,kCAAkC;EAClC,6BAA6B;AAC/B;AACA;EACE,wCAAwC;EACxC,6BAA6B;AAC/B;;AAEA;EACE,oCAAoC;EACpC,mBAAmB;EACnB,4BAA4B;EAC5B,cAAc;EACd,kBAAkB;EAClB,YAAY;EACZ,kBAAkB;EAClB,aAAa;EACb,SAAS;EACT,6BAA6B;EAC7B,WAAW;;EAEX,oBAAoB;EACpB,mCAAmC;AACrC;;AAEA,wBAAiB,mBAAmB;AACpC,oDAAwC,cAAc",sourcesContent:['.main {\n  padding-bottom: 60px;\n}\n\n.sidebar {\n  display: flex;\n  width: 190px;\n  flex-direction: column;\n  padding: 10px;\n  gap: 10px;\n  position: fixed;\n}\n\n.selectable {\n  cursor: pointer;\n  background-color: var(--key-bg-base);\n}\n.selectable:hover {\n  border: 4px solid var(--selection);\n  box-sizing: border-box;\n}\n\n.highlight {\n  background-color: var(--selection);\n}\n.highlight:hover {\n  background-color: var(--hover-selection);\n}\n\n.comboPanel {\n  max-width: 450px;\n  margin: 0 auto;\n  padding-bottom: 60px;\n}\n\n.heading {\n  display: flex;\n  justify-content: space-between;\n  border-bottom: 2px solid var(--key-bg-base);\n  margin: 5px 0;\n}\n\n.action {\n  cursor: pointer;\n  padding: 5px;\n  opacity: 0.6;\n}\n.action:hover {\n  opacity: 1;\n}\n\n.combo {\n  margin: 10px 0 40px;\n}\n\n.combo .detail {\n  display: flex;\n  justify-content: space-evenly;\n  align-items: center;\n}\n\n.combo h5 {\n  margin: 0;\n}\n\n.edit {\n  color: var(--key-color-base);\n}\n\n.remove {\n  color: var(--delete);\n}\n\n.addComboInput {\n  display: none !important;\n}\n.addComboInput:hover {\n  color: white;\n  cursor: pointer;\n}\n.comboInputList:hover .addComboInput {\n  display: flex !important;\n  position: absolute;\n  right: -48px;\n  transform: scale(0.5);\n}\n\n.active.addComboInput,\n.active.comboInput > * {\n  background-color: sandybrown;\n  color: white;\n}\n.active.addComboInput {\n  display: flex;\n}\n\n.field {\n  margin: 10px 0;\n  display: flex;\n}\n\n.field label {\n  display: inline-block;\n  width: 120px;\n  text-align: right;\n  margin-right: 10px;\n}\n\n.layerList {\n  list-style-type: none;\n  margin: 0;\n  padding: 0;\n}\n.layerList li {\n  cursor: pointer;\n  display: inline-block;\n  padding: 5px 10px;\n  margin: 5px;\n  border-radius: 30px;\n  background-color: var(--key-bg-base);\n}\n.layerList li[data-selected="true"] {\n  background-color: var(--selection);\n  color: var(--key-color-hover);\n}\n.layerList li:hover {\n  background-color: var(--hover-selection);\n  color: var(--key-color-hover);\n}\n\n.floatingMessage {\n  background-color: var(--key-bg-base);\n  border-radius: 30px;\n  color: var(--key-color-base);\n  font-size: 80%;\n  text-align: center;\n  padding: 5px;\n  position: absolute;\n  bottom: -40px;\n  left: 50%;\n  transform: translate(-50%, 0);\n  width: 110%;\n\n  pointer-events: none;\n  transition: opacity ease-in-out .5s;\n}\n\n.comboInputMap { position: relative }\n.comboInputMap:hover .floatingMessage { opacity: 0.25 }\n'],sourceRoot:""}]),a.locals={main:"pwXbGORsYKqyOPBm9_dW",sidebar:"QgFDXNybKD_XN66M_WpJ",selectable:"Gy0KZGCgOeVminAfggFQ",highlight:"Ld9cVdtpS_DpbEifyX9Y",comboPanel:"mqpJ7uHAMKxvORoOIPFK",heading:"BVucwy4AZCyl7GyivzMn",action:"U6g0njWjBrtb_I3XhAeV",combo:"CROhsBLtunQ2BbfWdkQw",detail:"MhA4fXXuaZ1iPvv05w4m",edit:"vujYcgQjiN4BGp37FMUH",remove:"uh2yPWyfEOZtgXo2_KtU",addComboInput:"NAB1EN6_pcYIy5Db9XnC",comboInputList:"kYn8brsFgEaf61oQyv4d",active:"NGxnhfSJaJ9FNu3hlBfc",comboInput:"GXgG_IaQTricqThqzsKe",field:"fljdvcebOv1gbKZpf0vW",layerList:"bnN6JCit0RcjdQiqzw8w",floatingMessage:"NpLEYrC32KQ4rUx9hUFJ",comboInputMap:"l2gtE1XKS63R5TM5unip"},n.Z=a},56520:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,".eEWh1kMxq0qwtAjWodL_ {\n  width: 100%;\n  height: 100%;\n  margin: 0;\n  padding: 0;\n}\n\n.eEWh1kMxq0qwtAjWodL_.Me2iewShkkUWEmhCKAJV {\n  cursor: crosshair;\n}\n\n.wou_rpm0nvB8wxB153cE {\n  position: absolute;\n  background-color: rgba(150, 255, 150, 0.1);\n  border: 3px dotted rgba(150, 255, 150, 0.7);\n  pointer-events: none;\n  box-sizing: border-box;\n}\n\n.wou_rpm0nvB8wxB153cE.fM8xQCv4KykkW5ssxgEg {\n  background-color: rgba(120, 120, 120, 0.1);\n  border-color: rgba(120, 120, 120, 0.25);\n}\n","",{version:3,sources:["webpack://./src/Keyboard/Common/dragSelector.module.css"],names:[],mappings:"AAAA;EACE,WAAW;EACX,YAAY;EACZ,SAAS;EACT,UAAU;AACZ;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,kBAAkB;EAClB,0CAA0C;EAC1C,2CAA2C;EAC3C,oBAAoB;EACpB,sBAAsB;AACxB;;AAEA;EACE,0CAA0C;EAC1C,uCAAuC;AACzC",sourcesContent:[".container {\n  width: 100%;\n  height: 100%;\n  margin: 0;\n  padding: 0;\n}\n\n.container.selecting {\n  cursor: crosshair;\n}\n\n.overlay {\n  position: absolute;\n  background-color: rgba(150, 255, 150, 0.1);\n  border: 3px dotted rgba(150, 255, 150, 0.7);\n  pointer-events: none;\n  box-sizing: border-box;\n}\n\n.overlay.negate {\n  background-color: rgba(120, 120, 120, 0.1);\n  border-color: rgba(120, 120, 120, 0.25);\n}\n"],sourceRoot:""}]),a.locals={container:"eEWh1kMxq0qwtAjWodL_",selecting:"Me2iewShkkUWEmhCKAJV",overlay:"wou_rpm0nvB8wxB153cE",negate:"fM8xQCv4KykkW5ssxgEg"},n.Z=a},49040:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,".lD5TsvdIbEAHNdmhfnlb {\n  background-color: var(--key-bg-base);\n}\n.yk89E4zK9zlO69OXhKn5:hover {\n  cursor: pointer;\n  border: 4px solid var(--selection);\n  box-sizing: border-box;\n}\n\n.pzTvsxKjpy6MqcFhxh9j {\n  background-color: var(--selection);\n}\n.pzTvsxKjpy6MqcFhxh9j:hover {\n  background-color: var(--hover-selection);\n}\n\n.r_Sdklnj57CE2ZjnBDw6 {\n  background-color: var(--hover-selection);\n  filter: brightness(135%);\n}\n\n.Ich9T1nSzHs1a84insfp {\n  background-color: var(--hover-selection);\n  filter: brightness(75%);\n}\n\n._3U1zi1J1sXT41AzpAA1j {\n  position: absolute;\n  bottom: 0;\n  right: 50%;\n  transform: translate(50%, 100%);\n}\n","",{version:3,sources:["webpack://./src/Keyboard/Common/keyPositionSelectorStyles.module.css"],names:[],mappings:"AAAA;EACE,oCAAoC;AACtC;AACA;EACE,eAAe;EACf,kCAAkC;EAClC,sBAAsB;AACxB;;AAEA;EACE,kCAAkC;AACpC;AACA;EACE,wCAAwC;AAC1C;;AAEA;EACE,wCAAwC;EACxC,wBAAwB;AAC1B;;AAEA;EACE,wCAAwC;EACxC,uBAAuB;AACzB;;AAEA;EACE,kBAAkB;EAClB,SAAS;EACT,UAAU;EACV,+BAA+B;AACjC",sourcesContent:[".key {\n  background-color: var(--key-bg-base);\n}\n.selectable:hover {\n  cursor: pointer;\n  border: 4px solid var(--selection);\n  box-sizing: border-box;\n}\n\n.highlight {\n  background-color: var(--selection);\n}\n.highlight:hover {\n  background-color: var(--hover-selection);\n}\n\n.previewAdd {\n  background-color: var(--hover-selection);\n  filter: brightness(135%);\n}\n\n.previewRemove {\n  background-color: var(--hover-selection);\n  filter: brightness(75%);\n}\n\n.tip {\n  position: absolute;\n  bottom: 0;\n  right: 50%;\n  transform: translate(50%, 100%);\n}\n"],sourceRoot:""}]),a.locals={key:"lD5TsvdIbEAHNdmhfnlb",selectable:"yk89E4zK9zlO69OXhKn5",highlight:"pzTvsxKjpy6MqcFhxh9j",previewAdd:"r_Sdklnj57CE2ZjnBDw6",previewRemove:"Ich9T1nSzHs1a84insfp",tip:"_3U1zi1J1sXT41AzpAA1j"},n.Z=a},2:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,'.CoLZlKR1WcMrFd9XhDMC {\n\tposition: relative;\n\tdisplay: flex;\n\tjustify-content: center;\n\talign-items: center;\n\n\tfont-family: Quicksand, avenir, sans-serif;\n\n\t/* TODO: remove this once I have a wrapper with size defaults */\n\twidth: 65px;\n\theight: 65px;\n\n\tfont-size: 110%;\n\tborder-radius: 5px;\n}\n\n.CoLZlKR1WcMrFd9XhDMC.CT4uGhwl8sY0LwT3p39g:not(:hover) .UNzQquWsoIanOpIN0Q9L {\n\ttext-decoration: underline wavy var(--error-highlight);\n\ttext-underline-offset: 4px;\n\tcolor: var(--error-highlight);\n\tfont-weight: bold;\n}\n\n.Y5EVt8b0BaXNd9uLxhfh {\n\tposition: absolute;\n\tleft: 2px;\n\tbottom: 2px;\n\tfont-size: 80%;\n\n\tanimation: sYr3l9y03JxO_2AP73jr ease-in-out 1s alternate-reverse;\n}\n.Y5EVt8b0BaXNd9uLxhfh.CT4uGhwl8sY0LwT3p39g:hover {\n\tcolor: rgb(255, 225, 0);\n}\n\n@keyframes sYr3l9y03JxO_2AP73jr {\n\t0% { color: var(--key-color-base) }\n\t100% { color: var(--key-color-extreme) }\n}\n\n\n.CoLZlKR1WcMrFd9XhDMC.CT4uGhwl8sY0LwT3p39g:hover .DejZXCvvhJILPbs9Q8ht,\n.CoLZlKR1WcMrFd9XhDMC.CT4uGhwl8sY0LwT3p39g:hover .GliE4Ybwli9X6TNTjD1_ {\n\tborder-bottom-left-radius: 0;\n\tborder-bottom-right-radius: 0;\n\ttext-decoration: underline dotted white 2px;\n\ttext-underline-offset: 4px;\n}\n\n\n.huQDP3GbTLThbVIP8wFp {\n\tcolor: var(--key-color-base);\n\tbackground-color: var(--key-bg-base);\n}\n\n.PpMmKpJfEi37Ldw7AeBT {\n\tborder-radius: 100%;\n\tbackground-color: var(--key-bg-base);\n\tcolor: var(--key-color-base);\n}\n\n.k2EIh8YlFvp9sBuklSxx {\n\tposition: absolute;\n\ttop: 0;\n\tleft: 50%;\n\ttransform: translateX(-50%);\n\tfont-size: 50%;\n}\n\n.CT4uGhwl8sY0LwT3p39g:hover, .PpMmKpJfEi37Ldw7AeBT.CT4uGhwl8sY0LwT3p39g:hover {\n\tbackground-color: var(--hover-selection);\n\ttransition: 200ms;\n\tz-index: 1;\n}\n.CoLZlKR1WcMrFd9XhDMC.CT4uGhwl8sY0LwT3p39g:hover .DejZXCvvhJILPbs9Q8ht, .CoLZlKR1WcMrFd9XhDMC.CT4uGhwl8sY0LwT3p39g:hover .GliE4Ybwli9X6TNTjD1_ {\n\tcolor: var(--key-color-hover);\n}\n.CoLZlKR1WcMrFd9XhDMC > .DejZXCvvhJILPbs9Q8ht {\n\tpadding: 5px;\n}\n\n[data-simple="true"] { font-size: 140%; }\n[data-long="true"] { font-size: 60%; }\n\n.ApHDJFJGYUaGTgzMeIKZ:not([data-is-root="true"])::before { content: \'(\'; opacity: 0.4; font-weight: bold; margin: 2px; }\n.ApHDJFJGYUaGTgzMeIKZ:not([data-is-root="true"])::after { content: \')\'; opacity: 0.4; font-weight: bold; margin: 2px; }\n.ApHDJFJGYUaGTgzMeIKZ:not([data-is-root="true"]) .mLz637Atn0jZXey6Rx4v:not(:last-child)::after { content: \',\'; }\n\n.DejZXCvvhJILPbs9Q8ht {\n\tcursor: default;\n\tpadding: 0px 4px;\n\tmargin-left: -2px;\n\tmargin-right: -2px;\n}\n\n.CT4uGhwl8sY0LwT3p39g .DejZXCvvhJILPbs9Q8ht {\n\tcursor: pointer;\n\tdisplay: inline-block;\n\tbox-sizing: content-box;\n\tmin-width: 0.5em;\n\ttext-align: center;\n\tborder-radius: 4px;\n}\n.CT4uGhwl8sY0LwT3p39g .DejZXCvvhJILPbs9Q8ht:hover {\n\tbackground-color: white !important;\n\tcolor: var(--hover-selection) !important;\n\tborder-radius: 4px !important;\n}\n\n.DejZXCvvhJILPbs9Q8ht * {\n\tpointer-events: none;\n}\n\n.GliE4Ybwli9X6TNTjD1_ {\n  position: absolute;\n  top: 0;\n  left: 0;\n  font-size: 10px;\n  padding: 2px;\n  opacity: 0.65;\n}\n\n.GliE4Ybwli9X6TNTjD1_:hover {\n  cursor: pointer;\n  color: var(--hover-selection) !important;\n  background-color: var(--key-bg-hover);\n  border-radius: 5px 0;\n  opacity: 1;\n}\n',"",{version:3,sources:["webpack://./src/Keyboard/Keys/styles.module.css"],names:[],mappings:"AAAA;CACC,kBAAkB;CAClB,aAAa;CACb,uBAAuB;CACvB,mBAAmB;;CAEnB,0CAA0C;;CAE1C,+DAA+D;CAC/D,WAAW;CACX,YAAY;;CAEZ,eAAe;CACf,kBAAkB;AACnB;;AAEA;CACC,sDAAsD;CACtD,0BAA0B;CAC1B,6BAA6B;CAC7B,iBAAiB;AAClB;;AAEA;CACC,kBAAkB;CAClB,SAAS;CACT,WAAW;CACX,cAAc;;CAEd,gEAAiD;AAClD;AACA;CACC,uBAAuB;AACxB;;AAEA;CACC,KAAK,6BAA6B;CAClC,OAAO,gCAAgC;AACxC;;;AAGA;;CAEC,4BAA4B;CAC5B,6BAA6B;CAC7B,2CAA2C;CAC3C,0BAA0B;AAC3B;;;AAGA;CACC,4BAA4B;CAC5B,oCAAoC;AACrC;;AAEA;CACC,mBAAmB;CACnB,oCAAoC;CACpC,4BAA4B;AAC7B;;AAEA;CACC,kBAAkB;CAClB,MAAM;CACN,SAAS;CACT,2BAA2B;CAC3B,cAAc;AACf;;AAEA;CACC,wCAAwC;CACxC,iBAAiB;CACjB,UAAU;AACX;AACA;CACC,6BAA6B;AAC9B;AACA;CACC,YAAY;AACb;;AAEA,uBAAuB,eAAe,EAAE;AACxC,qBAAqB,cAAc,EAAE;;AAErC,2DAA6C,YAAY,EAAE,YAAY,EAAE,iBAAiB,EAAE,WAAW,EAAE;AACzG,0DAA4C,YAAY,EAAE,YAAY,EAAE,iBAAiB,EAAE,WAAW,EAAE;AACxG,iGAAoE,YAAY,EAAE;;AAElF;CACC,eAAe;CACf,gBAAgB;CAChB,iBAAiB;CACjB,kBAAkB;AACnB;;AAEA;CACC,eAAe;CACf,qBAAqB;CACrB,uBAAuB;CACvB,gBAAgB;CAChB,kBAAkB;CAClB,kBAAkB;AACnB;AACA;CACC,kCAAkC;CAClC,wCAAwC;CACxC,6BAA6B;AAC9B;;AAEA;CACC,oBAAoB;AACrB;;AAEA;EACE,kBAAkB;EAClB,MAAM;EACN,OAAO;EACP,eAAe;EACf,YAAY;EACZ,aAAa;AACf;;AAEA;EACE,eAAe;EACf,wCAAwC;EACxC,qCAAqC;EACrC,oBAAoB;EACpB,UAAU;AACZ",sourcesContent:['.key {\n\tposition: relative;\n\tdisplay: flex;\n\tjustify-content: center;\n\talign-items: center;\n\n\tfont-family: Quicksand, avenir, sans-serif;\n\n\t/* TODO: remove this once I have a wrapper with size defaults */\n\twidth: 65px;\n\theight: 65px;\n\n\tfont-size: 110%;\n\tborder-radius: 5px;\n}\n\n.key.selectable:not(:hover) .missingValue {\n\ttext-decoration: underline wavy var(--error-highlight);\n\ttext-underline-offset: 4px;\n\tcolor: var(--error-highlight);\n\tfont-weight: bold;\n}\n\n.missing {\n\tposition: absolute;\n\tleft: 2px;\n\tbottom: 2px;\n\tfont-size: 80%;\n\n\tanimation: pulse ease-in-out 1s alternate-reverse;\n}\n.missing.selectable:hover {\n\tcolor: rgb(255, 225, 0);\n}\n\n@keyframes pulse {\n\t0% { color: var(--key-color-base) }\n\t100% { color: var(--key-color-extreme) }\n}\n\n\n.key.selectable:hover .code,\n.key.selectable:hover .behaviour-binding {\n\tborder-bottom-left-radius: 0;\n\tborder-bottom-right-radius: 0;\n\ttext-decoration: underline dotted white 2px;\n\ttext-underline-offset: 4px;\n}\n\n\n.keyDefaultTheme {\n\tcolor: var(--key-color-base);\n\tbackground-color: var(--key-bg-base);\n}\n\n.encoder {\n\tborder-radius: 100%;\n\tbackground-color: var(--key-bg-base);\n\tcolor: var(--key-color-base);\n}\n\n.encoderDirection {\n\tposition: absolute;\n\ttop: 0;\n\tleft: 50%;\n\ttransform: translateX(-50%);\n\tfont-size: 50%;\n}\n\n.selectable:hover, .encoder.selectable:hover {\n\tbackground-color: var(--hover-selection);\n\ttransition: 200ms;\n\tz-index: 1;\n}\n.key.selectable:hover .code, .key.selectable:hover .behaviour-binding {\n\tcolor: var(--key-color-hover);\n}\n.key > .code {\n\tpadding: 5px;\n}\n\n[data-simple="true"] { font-size: 140%; }\n[data-long="true"] { font-size: 60%; }\n\n.params:not([data-is-root="true"])::before { content: \'(\'; opacity: 0.4; font-weight: bold; margin: 2px; }\n.params:not([data-is-root="true"])::after { content: \')\'; opacity: 0.4; font-weight: bold; margin: 2px; }\n.params:not([data-is-root="true"]) .param:not(:last-child)::after { content: \',\'; }\n\n.code {\n\tcursor: default;\n\tpadding: 0px 4px;\n\tmargin-left: -2px;\n\tmargin-right: -2px;\n}\n\n.selectable .code {\n\tcursor: pointer;\n\tdisplay: inline-block;\n\tbox-sizing: content-box;\n\tmin-width: 0.5em;\n\ttext-align: center;\n\tborder-radius: 4px;\n}\n.selectable .code:hover {\n\tbackground-color: white !important;\n\tcolor: var(--hover-selection) !important;\n\tborder-radius: 4px !important;\n}\n\n.code * {\n\tpointer-events: none;\n}\n\n.behaviour-binding {\n  position: absolute;\n  top: 0;\n  left: 0;\n  font-size: 10px;\n  padding: 2px;\n  opacity: 0.65;\n}\n\n.behaviour-binding:hover {\n  cursor: pointer;\n  color: var(--hover-selection) !important;\n  background-color: var(--key-bg-hover);\n  border-radius: 5px 0;\n  opacity: 1;\n}\n'],sourceRoot:""}]),a.locals={key:"CoLZlKR1WcMrFd9XhDMC",selectable:"CT4uGhwl8sY0LwT3p39g",missingValue:"UNzQquWsoIanOpIN0Q9L",missing:"Y5EVt8b0BaXNd9uLxhfh",pulse:"sYr3l9y03JxO_2AP73jr",code:"DejZXCvvhJILPbs9Q8ht","behaviour-binding":"GliE4Ybwli9X6TNTjD1_",keyDefaultTheme:"huQDP3GbTLThbVIP8wFp",encoder:"PpMmKpJfEi37Ldw7AeBT",encoderDirection:"k2EIh8YlFvp9sBuklSxx",params:"ApHDJFJGYUaGTgzMeIKZ",param:"mLz637Atn0jZXey6Rx4v"},n.Z=a},50335:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,'.m8ytsfY_MWY9AIiiT3KI {\n  position: absolute;\n  pointer-events: none;\n  z-index: 2;\n}\n.m8ytsfY_MWY9AIiiT3KI > * {\n  pointer-events: all;\n}\n\n.m8ytsfY_MWY9AIiiT3KI ul {\n  display: flex;\n  flex-direction: column;\n  list-style-type: none;\n  gap: 4px;\n  margin: 0;\n  padding: 0;\n}\n.m8ytsfY_MWY9AIiiT3KI li {\n  cursor: pointer;\n  position: relative;\n  background-color: rgba(201, 201, 201, 0.5);\n  color: darkgray;\n  border-radius: 15px;\n  height: 30px;\n  padding: 0px;\n  margin: 0 2px;\n  width: max-content;\n}\n.m8ytsfY_MWY9AIiiT3KI li:hover {\n  background-color: rgba(60, 179, 113, 0.85);\n  color: white;\n  padding-right: 35px;\n}\n.m8ytsfY_MWY9AIiiT3KI li.rzXVahzmmEOXmjXi8olg {\n  background-color: rgb(60, 179, 113);\n  color: white;\n}\n\n.m8ytsfY_MWY9AIiiT3KI li * {\n  display: inline-block;\n}\n.m8ytsfY_MWY9AIiiT3KI li .L_GJEqnFbay_ZzM0Yh7B {\n  overflow: auto;\n  width: 30px;\n  height: 30px;\n  line-height: 30px;\n  text-align: center;\n}\n.m8ytsfY_MWY9AIiiT3KI li .fkZZwegREyu_Wk9Pw6s7 {\n  overflow: hidden;\n  width: 0;\n  height: 30px;\n  line-height: 30px;\n  padding: 0;\n  font-variant: small-caps;\n}\n\n.m8ytsfY_MWY9AIiiT3KI ul li:hover .fkZZwegREyu_Wk9Pw6s7,\n.m8ytsfY_MWY9AIiiT3KI[data-renaming="true"] li.rzXVahzmmEOXmjXi8olg .fkZZwegREyu_Wk9Pw6s7 {\n  transition: .15s ease-in;\n  width: auto;\n  padding: 0 0 0 10px;\n}\n\n.m8ytsfY_MWY9AIiiT3KI button {\n  width: 30px;\n  height: 30px;\n  line-height: 30px;\n  padding: 0;\n  text-align: center;\n  border-radius: 15px;\n}\n\n.m8ytsfY_MWY9AIiiT3KI input.fkZZwegREyu_Wk9Pw6s7 {\n  vertical-align: top;\n  width: 100px;\n  border: none;\n  outline: none;\n  background: transparent;\n  color: white;\n}\n\n.m8ytsfY_MWY9AIiiT3KI .NbFgZxnyAF9EIjx8ncPM {\n  cursor: pointer;\n  position: absolute;\n  right: 10px;\n  visibility: hidden;\n\n  height: 30px;\n  line-height: 30px;\n}\n.m8ytsfY_MWY9AIiiT3KI li:hover .NbFgZxnyAF9EIjx8ncPM {\n  visibility: visible;\n}\n\n.m8ytsfY_MWY9AIiiT3KI li.rzXVahzmmEOXmjXi8olg .fkZZwegREyu_Wk9Pw6s7 {\n  cursor: text;\n}\n',"",{version:3,sources:["webpack://./src/Keyboard/Layers/layer-selector.module.css"],names:[],mappings:"AAAA;EACE,kBAAkB;EAClB,oBAAoB;EACpB,UAAU;AACZ;AACA;EACE,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,qBAAqB;EACrB,QAAQ;EACR,SAAS;EACT,UAAU;AACZ;AACA;EACE,eAAe;EACf,kBAAkB;EAClB,0CAA0C;EAC1C,eAAe;EACf,mBAAmB;EACnB,YAAY;EACZ,YAAY;EACZ,aAAa;EACb,kBAAkB;AACpB;AACA;EACE,0CAA0C;EAC1C,YAAY;EACZ,mBAAmB;AACrB;AACA;EACE,mCAAmC;EACnC,YAAY;AACd;;AAEA;EACE,qBAAqB;AACvB;AACA;EACE,cAAc;EACd,WAAW;EACX,YAAY;EACZ,iBAAiB;EACjB,kBAAkB;AACpB;AACA;EACE,gBAAgB;EAChB,QAAQ;EACR,YAAY;EACZ,iBAAiB;EACjB,UAAU;EACV,wBAAwB;AAC1B;;AAEA;;EAEE,wBAAwB;EACxB,WAAW;EACX,mBAAmB;AACrB;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,iBAAiB;EACjB,UAAU;EACV,kBAAkB;EAClB,mBAAmB;AACrB;;AAEA;EACE,mBAAmB;EACnB,YAAY;EACZ,YAAY;EACZ,aAAa;EACb,uBAAuB;EACvB,YAAY;AACd;;AAEA;EACE,eAAe;EACf,kBAAkB;EAClB,WAAW;EACX,kBAAkB;;EAElB,YAAY;EACZ,iBAAiB;AACnB;AACA;EACE,mBAAmB;AACrB;;AAEA;EACE,YAAY;AACd",sourcesContent:['.layerSelector {\n  position: absolute;\n  pointer-events: none;\n  z-index: 2;\n}\n.layerSelector > * {\n  pointer-events: all;\n}\n\n.layerSelector ul {\n  display: flex;\n  flex-direction: column;\n  list-style-type: none;\n  gap: 4px;\n  margin: 0;\n  padding: 0;\n}\n.layerSelector li {\n  cursor: pointer;\n  position: relative;\n  background-color: rgba(201, 201, 201, 0.5);\n  color: darkgray;\n  border-radius: 15px;\n  height: 30px;\n  padding: 0px;\n  margin: 0 2px;\n  width: max-content;\n}\n.layerSelector li:hover {\n  background-color: rgba(60, 179, 113, 0.85);\n  color: white;\n  padding-right: 35px;\n}\n.layerSelector li.active {\n  background-color: rgb(60, 179, 113);\n  color: white;\n}\n\n.layerSelector li * {\n  display: inline-block;\n}\n.layerSelector li .index {\n  overflow: auto;\n  width: 30px;\n  height: 30px;\n  line-height: 30px;\n  text-align: center;\n}\n.layerSelector li .name {\n  overflow: hidden;\n  width: 0;\n  height: 30px;\n  line-height: 30px;\n  padding: 0;\n  font-variant: small-caps;\n}\n\n.layerSelector ul li:hover .name,\n.layerSelector[data-renaming="true"] li.active .name {\n  transition: .15s ease-in;\n  width: auto;\n  padding: 0 0 0 10px;\n}\n\n.layerSelector button {\n  width: 30px;\n  height: 30px;\n  line-height: 30px;\n  padding: 0;\n  text-align: center;\n  border-radius: 15px;\n}\n\n.layerSelector input.name {\n  vertical-align: top;\n  width: 100px;\n  border: none;\n  outline: none;\n  background: transparent;\n  color: white;\n}\n\n.layerSelector .delete {\n  cursor: pointer;\n  position: absolute;\n  right: 10px;\n  visibility: hidden;\n\n  height: 30px;\n  line-height: 30px;\n}\n.layerSelector li:hover .delete {\n  visibility: visible;\n}\n\n.layerSelector li.active .name {\n  cursor: text;\n}\n'],sourceRoot:""}]),a.locals={layerSelector:"m8ytsfY_MWY9AIiiT3KI",active:"rzXVahzmmEOXmjXi8olg",index:"L_GJEqnFbay_ZzM0Yh7B",name:"fkZZwegREyu_Wk9Pw6s7",delete:"NbFgZxnyAF9EIjx8ncPM"},n.Z=a},59500:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,'.EwvVNY6vlf7HwYmXTbzi {\n  margin: 10px 0;\n  display: flex;\n}\n\n.EwvVNY6vlf7HwYmXTbzi label {\n  display: inline-block;\n  width: 120px;\n  text-align: right;\n  margin-right: 10px;\n}\n\n.uhiC_7TzN7eCNbm5C6a8[data-sensor-count="0"] {\n  display: none;\n}\n\n.raNkhxmGTqtKQI9X2gVA:not(.y7y6ypMwmSafQKgt7oBw) {\n  cursor: pointer;\n}\n.raNkhxmGTqtKQI9X2gVA > * {\n  pointer-events: none;\n}\n.raNkhxmGTqtKQI9X2gVA:hover, .y7y6ypMwmSafQKgt7oBw {\n  color: var(--key-color-hover);\n  background-color: var(--selection);\n}\n.raNkhxmGTqtKQI9X2gVA:hover {\n  background-color: var(--hover-selection);\n}\n\n.sahMSNIG_94Hn9tEEZ8q {\n  max-width: 80vw;\n  overflow-x: scroll;\n}',"",{version:3,sources:["webpack://./src/Keyboard/Layers/style.module.css"],names:[],mappings:"AAAA;EACE,cAAc;EACd,aAAa;AACf;;AAEA;EACE,qBAAqB;EACrB,YAAY;EACZ,iBAAiB;EACjB,kBAAkB;AACpB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,eAAe;AACjB;AACA;EACE,oBAAoB;AACtB;AACA;EACE,6BAA6B;EAC7B,kCAAkC;AACpC;AACA;EACE,wCAAwC;AAC1C;;AAEA;EACE,eAAe;EACf,kBAAkB;AACpB",sourcesContent:['.field {\n  margin: 10px 0;\n  display: flex;\n}\n\n.field label {\n  display: inline-block;\n  width: 120px;\n  text-align: right;\n  margin-right: 10px;\n}\n\n.sensors[data-sensor-count="0"] {\n  display: none;\n}\n\n.quickBindKey:not(.quickBindKeyHighlight) {\n  cursor: pointer;\n}\n.quickBindKey > * {\n  pointer-events: none;\n}\n.quickBindKey:hover, .quickBindKeyHighlight {\n  color: var(--key-color-hover);\n  background-color: var(--selection);\n}\n.quickBindKey:hover {\n  background-color: var(--hover-selection);\n}\n\n.quickAssignDialog {\n  max-width: 80vw;\n  overflow-x: scroll;\n}'],sourceRoot:""}]),a.locals={field:"EwvVNY6vlf7HwYmXTbzi",sensors:"uhiC_7TzN7eCNbm5C6a8",quickBindKey:"raNkhxmGTqtKQI9X2gVA",quickBindKeyHighlight:"y7y6ypMwmSafQKgt7oBw",quickAssignDialog:"sahMSNIG_94Hn9tEEZ8q"},n.Z=a},35839:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,'\n.O8SEfqE2Ewc3b7c7mY_N {\n  position:absolute;\n  top: -5px;\n  left: 0px;\n  width: 100%;\n  /* border: 1px solid red; */\n  /* padding: 5px; */\n  /* opacity: 0.5; */\n  display: flex;\n  flex-wrap: wrap;\n}\n\n.s9O56LWZBKHctVZ4a6fa {\n  position: relative;\n  width: 37.5px;\n  height: 65px;\n  margin: 0;\n}\n\n.s9O56LWZBKHctVZ4a6fa[data-is-control="true"] {\n  width: 450px;\n  height: 15px;\n}\n\n.NNwZmurJWlIfvb3BWlNX {\n  position: relative;\n  width: 450px;\n  height: 10px;\n}\n.NNwZmurJWlIfvb3BWlNX.wVYVfDVsCKFNjQcGKIVI::after {\n  content: \'\';\n  display: block;\n  position: absolute;\n  top: 50%;\n  transform: translate(0, -50%);\n  width: 450px;\n  height: 4px;\n  background-color: var(--selection);\n}\n.MDfy6RcGBlm8W_ChRhyP[data-extend="1"] { width: calc(37.5px + 1 * 75px); }\n.MDfy6RcGBlm8W_ChRhyP[data-extend="2"] { width: calc(37.5px + 2 * 75px); }\n.MDfy6RcGBlm8W_ChRhyP[data-extend="3"] { width: calc(37.5px + 3 * 75px); }\n.MDfy6RcGBlm8W_ChRhyP[data-extend="4"] { width: calc(37.5px + 4 * 75px); }\n.MDfy6RcGBlm8W_ChRhyP[data-extend="5"] { width: calc(37.5px + 5 * 75px); }\n\n/* .dropTargetHalf {\n  background-color: blue;\n  opacity: 0.25;\n}\n.dropTargetHalf.secondHalf {\n  background-color: red;\n}\n.dropTargetRow {\n  background-color: purple;\n  opacity: 0.25;\n} */\n\n.wVYVfDVsCKFNjQcGKIVI.s9O56LWZBKHctVZ4a6fa:not(.MDfy6RcGBlm8W_ChRhyP):not([data-is-control="true"])::before,\n.wVYVfDVsCKFNjQcGKIVI.MDfy6RcGBlm8W_ChRhyP:not([data-is-control="true"])::after {\n  content: \'\';\n  display: block;\n  height: 65px;\n  width: 4px;\n  border-radius: 4px;\n  background-color: var(--selection);\n}\n\n.AuFB9WiCynP_oONYhOvq .wVYVfDVsCKFNjQcGKIVI:not([data-drop-mode="row"])::before,\n.AuFB9WiCynP_oONYhOvq .wVYVfDVsCKFNjQcGKIVI:not([data-drop-mode="row"])::after {\n   visibility: hidden;\n }\n\n.s9O56LWZBKHctVZ4a6fa:not(.MDfy6RcGBlm8W_ChRhyP):not([data-is-control="true"])::before {\n  transform: translate(-50%, 0);\n}\n.MDfy6RcGBlm8W_ChRhyP:not([data-is-control="true"])::after {\n  position: absolute;\n  left: 32.5px;\n  transform: translate(50%, 0);\n}\n',"",{version:3,sources:["webpack://./src/Keyboard/Macros/drag-and-drop.module.css"],names:[],mappings:";AACA;EACE,iBAAiB;EACjB,SAAS;EACT,SAAS;EACT,WAAW;EACX,2BAA2B;EAC3B,kBAAkB;EAClB,kBAAkB;EAClB,aAAa;EACb,eAAe;AACjB;;AAEA;EACE,kBAAkB;EAClB,aAAa;EACb,YAAY;EACZ,SAAS;AACX;;AAEA;EACE,YAAY;EACZ,YAAY;AACd;;AAEA;EACE,kBAAkB;EAClB,YAAY;EACZ,YAAY;AACd;AACA;EACE,WAAW;EACX,cAAc;EACd,kBAAkB;EAClB,QAAQ;EACR,6BAA6B;EAC7B,YAAY;EACZ,WAAW;EACX,kCAAkC;AACpC;AACA,yCAA+B,8BAA8B,EAAE;AAC/D,yCAA+B,8BAA8B,EAAE;AAC/D,yCAA+B,8BAA8B,EAAE;AAC/D,yCAA+B,8BAA8B,EAAE;AAC/D,yCAA+B,8BAA8B,EAAE;;AAE/D;;;;;;;;;;GAUG;;AAEH;;EAEE,WAAW;EACX,cAAc;EACd,YAAY;EACZ,UAAU;EACV,kBAAkB;EAClB,kCAAkC;AACpC;;AAEA;;GAEG,kBAAkB;CACpB;;AAED;EACE,6BAA6B;AAC/B;AACA;EACE,kBAAkB;EAClB,YAAY;EACZ,4BAA4B;AAC9B",sourcesContent:['\n.dropTargets {\n  position:absolute;\n  top: -5px;\n  left: 0px;\n  width: 100%;\n  /* border: 1px solid red; */\n  /* padding: 5px; */\n  /* opacity: 0.5; */\n  display: flex;\n  flex-wrap: wrap;\n}\n\n.dropTargetHalf {\n  position: relative;\n  width: 37.5px;\n  height: 65px;\n  margin: 0;\n}\n\n.dropTargetHalf[data-is-control="true"] {\n  width: 450px;\n  height: 15px;\n}\n\n.dropTargetRow {\n  position: relative;\n  width: 450px;\n  height: 10px;\n}\n.dropTargetRow.droppable::after {\n  content: \'\';\n  display: block;\n  position: absolute;\n  top: 50%;\n  transform: translate(0, -50%);\n  width: 450px;\n  height: 4px;\n  background-color: var(--selection);\n}\n.secondHalf[data-extend="1"] { width: calc(37.5px + 1 * 75px); }\n.secondHalf[data-extend="2"] { width: calc(37.5px + 2 * 75px); }\n.secondHalf[data-extend="3"] { width: calc(37.5px + 3 * 75px); }\n.secondHalf[data-extend="4"] { width: calc(37.5px + 4 * 75px); }\n.secondHalf[data-extend="5"] { width: calc(37.5px + 5 * 75px); }\n\n/* .dropTargetHalf {\n  background-color: blue;\n  opacity: 0.25;\n}\n.dropTargetHalf.secondHalf {\n  background-color: red;\n}\n.dropTargetRow {\n  background-color: purple;\n  opacity: 0.25;\n} */\n\n.droppable.dropTargetHalf:not(.secondHalf):not([data-is-control="true"])::before,\n.droppable.secondHalf:not([data-is-control="true"])::after {\n  content: \'\';\n  display: block;\n  height: 65px;\n  width: 4px;\n  border-radius: 4px;\n  background-color: var(--selection);\n}\n\n.dropRowOnly .droppable:not([data-drop-mode="row"])::before,\n.dropRowOnly .droppable:not([data-drop-mode="row"])::after {\n   visibility: hidden;\n }\n\n.dropTargetHalf:not(.secondHalf):not([data-is-control="true"])::before {\n  transform: translate(-50%, 0);\n}\n.secondHalf:not([data-is-control="true"])::after {\n  position: absolute;\n  left: 32.5px;\n  transform: translate(50%, 0);\n}\n'],sourceRoot:""}]),a.locals={dropTargets:"O8SEfqE2Ewc3b7c7mY_N",dropTargetHalf:"s9O56LWZBKHctVZ4a6fa",dropTargetRow:"NNwZmurJWlIfvb3BWlNX",droppable:"wVYVfDVsCKFNjQcGKIVI",secondHalf:"MDfy6RcGBlm8W_ChRhyP",dropRowOnly:"AuFB9WiCynP_oONYhOvq"},n.Z=a},96201:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,".kc8Au327pmIjKO7auLXT {\n  padding-bottom: 60px;\n}\n\n.B8FpRtVdxbvJjwZoVNB4 {\n  display: flex;\n  position: fixed;\n  width: 180px;\n  flex-direction: column;\n  padding: 10px;\n  gap: 10px;\n}\n\n.Us3Ihf0AoVbZvDulP74Q {\n  width: 550px;\n  margin: 10px auto 40px;\n}\n.OVI4IkVsVzyk0eIAn9NX {\n  display: flex;\n  position: relative;\n  justify-content: space-between;\n  border-bottom: 2px solid var(--key-bg-base);\n  margin: 5px 0;\n}\n.OVI4IkVsVzyk0eIAn9NX h5 {\n  margin: 0;\n}\n.QNlSO_GSGhRfUFRE_v8E {\n  cursor: pointer;\n  padding: 5px;\n  opacity: 0.6;\n}\n.QNlSO_GSGhRfUFRE_v8E:hover {\n  opacity: 1;\n}\n.DvzBwGDH7HsnnIbqaeHi {\n  color: var(--delete);\n}\n\n.mwhR_W7iqHq803xNBV1H {\n  text-align: center;\n}\n.mwhR_W7iqHq803xNBV1H > * {\n  margin: 5px;\n}\n\n.TBgT7nB7JSSjnTpMQeXp {\n  position: relative;\n  width: 450px;\n  /* border: 1px solid lightgray; */\n  margin: 0 auto;\n  padding: 5px;\n\n  display: flex;\n  flex-wrap: wrap;\n}\n\n.TBgT7nB7JSSjnTpMQeXp > * {\n  margin: 5px;\n  width: 65px;\n  height: 65px;\n}\n\n.YMJbsLvnEGObUy4Y_i6w {\n  width: 100%;\n  height: 30px;\n  box-sizing: border-box;\n}\n.YMJbsLvnEGObUy4Y_i6w:hover {\n  background-color: var(--hover-selection);\n  color: var(--key-color-hover);\n}\n.YMJbsLvnEGObUy4Y_i6w > :first-child {\n  width: 100% !important;\n  height: 100% !important;\n}\n\n.TBgT7nB7JSSjnTpMQeXp [draggable] {\n  cursor: grab;\n}\n\n.I5drc4dA5Kpshp3PPle1 {\n  visibility: hidden;\n  position: absolute;\n  top: 0px;\n  right: 0px;\n  font-size: 80%;\n\n  color: var(--key-color-hover);\n}\n.I5drc4dA5Kpshp3PPle1 > * {\n  margin: 2px;\n  opacity: 0.5;\n  cursor: pointer;\n}\n.TBgT7nB7JSSjnTpMQeXp :hover .I5drc4dA5Kpshp3PPle1 {\n  visibility: visible;\n  z-index: 10;\n}\n\n.I5drc4dA5Kpshp3PPle1 :hover {\n  opacity: 1;\n}\n\n\n.iD9DsKMZZ1dQxr04488w {\n  margin: 10px 0;\n  display: flex;\n}\n\n.iD9DsKMZZ1dQxr04488w label {\n  display: inline-block;\n  width: 120px;\n  text-align: right;\n  margin-right: 10px;\n}\n\n.quGO7XFPrHoYiqu22mwg {\n  font-size: 80%;\n}","",{version:3,sources:["webpack://./src/Keyboard/Macros/styles.module.css"],names:[],mappings:"AAAA;EACE,oBAAoB;AACtB;;AAEA;EACE,aAAa;EACb,eAAe;EACf,YAAY;EACZ,sBAAsB;EACtB,aAAa;EACb,SAAS;AACX;;AAEA;EACE,YAAY;EACZ,sBAAsB;AACxB;AACA;EACE,aAAa;EACb,kBAAkB;EAClB,8BAA8B;EAC9B,2CAA2C;EAC3C,aAAa;AACf;AACA;EACE,SAAS;AACX;AACA;EACE,eAAe;EACf,YAAY;EACZ,YAAY;AACd;AACA;EACE,UAAU;AACZ;AACA;EACE,oBAAoB;AACtB;;AAEA;EACE,kBAAkB;AACpB;AACA;EACE,WAAW;AACb;;AAEA;EACE,kBAAkB;EAClB,YAAY;EACZ,iCAAiC;EACjC,cAAc;EACd,YAAY;;EAEZ,aAAa;EACb,eAAe;AACjB;;AAEA;EACE,WAAW;EACX,WAAW;EACX,YAAY;AACd;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,sBAAsB;AACxB;AACA;EACE,wCAAwC;EACxC,6BAA6B;AAC/B;AACA;EACE,sBAAsB;EACtB,uBAAuB;AACzB;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,kBAAkB;EAClB,kBAAkB;EAClB,QAAQ;EACR,UAAU;EACV,cAAc;;EAEd,6BAA6B;AAC/B;AACA;EACE,WAAW;EACX,YAAY;EACZ,eAAe;AACjB;AACA;EACE,mBAAmB;EACnB,WAAW;AACb;;AAEA;EACE,UAAU;AACZ;;;AAGA;EACE,cAAc;EACd,aAAa;AACf;;AAEA;EACE,qBAAqB;EACrB,YAAY;EACZ,iBAAiB;EACjB,kBAAkB;AACpB;;AAEA;EACE,cAAc;AAChB",sourcesContent:[".main {\n  padding-bottom: 60px;\n}\n\n.sidebar {\n  display: flex;\n  position: fixed;\n  width: 180px;\n  flex-direction: column;\n  padding: 10px;\n  gap: 10px;\n}\n\n.macro {\n  width: 550px;\n  margin: 10px auto 40px;\n}\n.heading {\n  display: flex;\n  position: relative;\n  justify-content: space-between;\n  border-bottom: 2px solid var(--key-bg-base);\n  margin: 5px 0;\n}\n.heading h5 {\n  margin: 0;\n}\n.action {\n  cursor: pointer;\n  padding: 5px;\n  opacity: 0.6;\n}\n.action:hover {\n  opacity: 1;\n}\n.remove {\n  color: var(--delete);\n}\n\n.macroActions {\n  text-align: center;\n}\n.macroActions > * {\n  margin: 5px;\n}\n\n.macroBindings {\n  position: relative;\n  width: 450px;\n  /* border: 1px solid lightgray; */\n  margin: 0 auto;\n  padding: 5px;\n\n  display: flex;\n  flex-wrap: wrap;\n}\n\n.macroBindings > * {\n  margin: 5px;\n  width: 65px;\n  height: 65px;\n}\n\n.controlBinding {\n  width: 100%;\n  height: 30px;\n  box-sizing: border-box;\n}\n.controlBinding:hover {\n  background-color: var(--hover-selection);\n  color: var(--key-color-hover);\n}\n.controlBinding > :first-child {\n  width: 100% !important;\n  height: 100% !important;\n}\n\n.macroBindings [draggable] {\n  cursor: grab;\n}\n\n.actions {\n  visibility: hidden;\n  position: absolute;\n  top: 0px;\n  right: 0px;\n  font-size: 80%;\n\n  color: var(--key-color-hover);\n}\n.actions > * {\n  margin: 2px;\n  opacity: 0.5;\n  cursor: pointer;\n}\n.macroBindings :hover .actions {\n  visibility: visible;\n  z-index: 10;\n}\n\n.actions :hover {\n  opacity: 1;\n}\n\n\n.field {\n  margin: 10px 0;\n  display: flex;\n}\n\n.field label {\n  display: inline-block;\n  width: 120px;\n  text-align: right;\n  margin-right: 10px;\n}\n\n.betaDisclaimer {\n  font-size: 80%;\n}"],sourceRoot:""}]),a.locals={main:"kc8Au327pmIjKO7auLXT",sidebar:"B8FpRtVdxbvJjwZoVNB4",macro:"Us3Ihf0AoVbZvDulP74Q",heading:"OVI4IkVsVzyk0eIAn9NX",action:"QNlSO_GSGhRfUFRE_v8E",remove:"DvzBwGDH7HsnnIbqaeHi",macroActions:"mwhR_W7iqHq803xNBV1H",macroBindings:"TBgT7nB7JSSjnTpMQeXp",controlBinding:"YMJbsLvnEGObUy4Y_i6w",actions:"I5drc4dA5Kpshp3PPle1",field:"iD9DsKMZZ1dQxr04488w",betaDisclaimer:"quGO7XFPrHoYiqu22mwg"},n.Z=a},79577:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,"._Et43RIDBS31WGTsJW6Q {\n  margin: 20px 0 35px;\n}\n._Et43RIDBS31WGTsJW6Q h3 {\n  cursor: pointer;\n}\n._Et43RIDBS31WGTsJW6Q h3:hover {\n  color: royalblue;\n}\n\n.UD9L8GtxRyZNCl6a5dsA {\n  color: var(--key-color-base);\n  opacity: 0.7;\n}\n\n.sah4Bu1xq72L7DDemOzU {\n  padding-left: 16px;\n}\n\n.pSk7y6zU9J8U_IybbhZB .rhqw3NH8NqvbeV0idmJz {\n  transform: rotate(-90deg);\n  transition: 100ms;\n}\n\n.pSk7y6zU9J8U_IybbhZB .sah4Bu1xq72L7DDemOzU {\n  display: none;\n}\n","",{version:3,sources:["webpack://./src/Keyboard/Warnings/styles.module.css"],names:[],mappings:"AAAA;EACE,mBAAmB;AACrB;AACA;EACE,eAAe;AACjB;AACA;EACE,gBAAgB;AAClB;;AAEA;EACE,4BAA4B;EAC5B,YAAY;AACd;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,yBAAyB;EACzB,iBAAiB;AACnB;;AAEA;EACE,aAAa;AACf",sourcesContent:[".warningCategory {\n  margin: 20px 0 35px;\n}\n.warningCategory h3 {\n  cursor: pointer;\n}\n.warningCategory h3:hover {\n  color: royalblue;\n}\n\n.emptyCategory {\n  color: var(--key-color-base);\n  opacity: 0.7;\n}\n\n.warningDetails {\n  padding-left: 16px;\n}\n\n.collapsedCategory .caret {\n  transform: rotate(-90deg);\n  transition: 100ms;\n}\n\n.collapsedCategory .warningDetails {\n  display: none;\n}\n"],sourceRoot:""}]),a.locals={warningCategory:"_Et43RIDBS31WGTsJW6Q",emptyCategory:"UD9L8GtxRyZNCl6a5dsA",warningDetails:"sah4Bu1xq72L7DDemOzU",collapsedCategory:"pSk7y6zU9J8U_IybbhZB",caret:"rhqw3NH8NqvbeV0idmJz"},n.Z=a},87995:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,".D0BH39_6wwiclW8aKuoi {\n  display: inline-flex;\n  list-style-type: none;\n  margin: 0;\n  padding: 0;\n}\n.D0BH39_6wwiclW8aKuoi li {\n  cursor: pointer;\n  padding: 5px;\n  margin: 5px;\n  border-radius: 4px;\n  font-variant: small-caps;\n}\n.D0BH39_6wwiclW8aKuoi li.xwo6V7AWCmy8CDvuTwRg {\n  background-color: var(--selection);\n  color: white;\n  cursor: default;\n}\n\n.nVbskEoaGxWf96qEgtxz {\n  position: absolute;\n}\n.nVbskEoaGxWf96qEgtxz > * {\n  width: 100% !important;\n  height: 100% !important;\n}\n\n.Ae2s0eqIVhebTEcJGc3F {\n  position: relative\n}\n.Ae2s0eqIVhebTEcJGc3F::after {\n  content: 'beta';\n  background-color: red;\n  color: white;\n  font-size: 12px;\n  font-weight: bold;\n  padding: 1px 3px;\n  border-radius: 6px;\n  position: absolute;\n  top: 0;\n  right: 0;\n  transform: translate(60%, -60%) rotate(13deg);\n}\n.xwo6V7AWCmy8CDvuTwRg .Ae2s0eqIVhebTEcJGc3F::after {\n  background-color: white;\n  color: var(--selection);\n  border: 1px solid var(--selection);\n}\n.sQQ0qFjHptJbQ8qvuXGa {\n  color: var(--error-highlight);\n}\n.D0BH39_6wwiclW8aKuoi li.xwo6V7AWCmy8CDvuTwRg.sQQ0qFjHptJbQ8qvuXGa {\n  background-color: var(--error-highlight);\n  color: white;\n}","",{version:3,sources:["webpack://./src/Keyboard/styles.module.css"],names:[],mappings:"AAAA;EACE,oBAAoB;EACpB,qBAAqB;EACrB,SAAS;EACT,UAAU;AACZ;AACA;EACE,eAAe;EACf,YAAY;EACZ,WAAW;EACX,kBAAkB;EAClB,wBAAwB;AAC1B;AACA;EACE,kCAAkC;EAClC,YAAY;EACZ,eAAe;AACjB;;AAEA;EACE,kBAAkB;AACpB;AACA;EACE,sBAAsB;EACtB,uBAAuB;AACzB;;AAEA;EACE;AACF;AACA;EACE,eAAe;EACf,qBAAqB;EACrB,YAAY;EACZ,eAAe;EACf,iBAAiB;EACjB,gBAAgB;EAChB,kBAAkB;EAClB,kBAAkB;EAClB,MAAM;EACN,QAAQ;EACR,6CAA6C;AAC/C;AACA;EACE,uBAAuB;EACvB,uBAAuB;EACvB,kCAAkC;AACpC;AACA;EACE,6BAA6B;AAC/B;AACA;EACE,wCAAwC;EACxC,YAAY;AACd",sourcesContent:[".editorModeTabs {\n  display: inline-flex;\n  list-style-type: none;\n  margin: 0;\n  padding: 0;\n}\n.editorModeTabs li {\n  cursor: pointer;\n  padding: 5px;\n  margin: 5px;\n  border-radius: 4px;\n  font-variant: small-caps;\n}\n.editorModeTabs li.activeEditTab {\n  background-color: var(--selection);\n  color: white;\n  cursor: default;\n}\n\n.placer {\n  position: absolute;\n}\n.placer > * {\n  width: 100% !important;\n  height: 100% !important;\n}\n\n.beta {\n  position: relative\n}\n.beta::after {\n  content: 'beta';\n  background-color: red;\n  color: white;\n  font-size: 12px;\n  font-weight: bold;\n  padding: 1px 3px;\n  border-radius: 6px;\n  position: absolute;\n  top: 0;\n  right: 0;\n  transform: translate(60%, -60%) rotate(13deg);\n}\n.activeEditTab .beta::after {\n  background-color: white;\n  color: var(--selection);\n  border: 1px solid var(--selection);\n}\n.warningTab {\n  color: var(--error-highlight);\n}\n.editorModeTabs li.activeEditTab.warningTab {\n  background-color: var(--error-highlight);\n  color: white;\n}"],sourceRoot:""}]),a.locals={editorModeTabs:"D0BH39_6wwiclW8aKuoi",activeEditTab:"xwo6V7AWCmy8CDvuTwRg",placer:"nVbskEoaGxWf96qEgtxz",beta:"Ae2s0eqIVhebTEcJGc3F",warningTab:"sQQ0qFjHptJbQ8qvuXGa"},n.Z=a},33971:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,".QkewNzGagIbndi3rJpKm {\n  border: none;\n  cursor: pointer;\n  color: white;\n  background: #248;\n  border-radius: 100%;\n  width: 24px;\n  height: 24px;\n  line-height: 24px;\n  text-align: center;\n}\n.QkewNzGagIbndi3rJpKm:hover {\n  background: #48F;\n}","",{version:3,sources:["webpack://./src/Sources/Demo/style.module.css"],names:[],mappings:"AAAA;EACE,YAAY;EACZ,eAAe;EACf,YAAY;EACZ,gBAAgB;EAChB,mBAAmB;EACnB,WAAW;EACX,YAAY;EACZ,iBAAiB;EACjB,kBAAkB;AACpB;AACA;EACE,gBAAgB;AAClB",sourcesContent:[".help {\n  border: none;\n  cursor: pointer;\n  color: white;\n  background: #248;\n  border-radius: 100%;\n  width: 24px;\n  height: 24px;\n  line-height: 24px;\n  text-align: center;\n}\n.help:hover {\n  background: #48F;\n}"],sourceRoot:""}]),a.locals={help:"QkewNzGagIbndi3rJpKm"},n.Z=a},80047:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,".z8z3GXuYqlepCz4tRPZj {\n  cursor: pointer;\n  display: flex;\n  box-sizing: border-box;\n  border: 1px solid hsl(0, 0%, 80%);\n  border-radius: 4px;\n  gap: 5px;\n  height: 38px;\n  padding: 0 8px;\n\n  /* color: hsl(0, 0%, 20%); */\n}\n\n.yyHfal9pM4DzShMl4LAY {\n  display: inline-flex;\n  height: 30px;\n  border-radius: 5px;\n  align-items: center;\n\n  font-size: 70%;\n  padding: 0 4px;\n\n  background-color: royalblue;\n  color: white;\n  text-decoration: none;\n}\n\n.ukdycT4tarWVlV3PC6Rr {\n  display: flex;\n  height: 38px;\n  gap: 4px;\n}\n\n.ukdycT4tarWVlV3PC6Rr button,\n.ukdycT4tarWVlV3PC6Rr .yyHfal9pM4DzShMl4LAY {\n  height: 38px;\n}\n\n.yyHfal9pM4DzShMl4LAY code {\n  font-family: monospace;\n}\n\n.QvI5wo7_u6OeAc12ib0W {\n  width: 30px;\n  height: 30px;\n  line-height: 30px;\n  font-size: 200%;\n  text-align: center;\n}\n\n.eUw5NZqoPPF3BcyYDpJx {\n  /* color: var(--selection); */\n}\n\n.XjY4lN_lY3nSgHcw67bX {\n  /* color: brown; */\n}\n\n.Ap_OwCtp3j1Q29Phpw3V {\n  color: gold;\n  animation: WjBuPfls4V41d2sjbNFU 1s linear alternate infinite;\n}\n\n@keyframes WjBuPfls4V41d2sjbNFU {\n  from { opacity: 0.5; }\n  to { opacity: 1; }\n}\n","",{version:3,sources:["webpack://./src/Sources/Github/styles.module.css"],names:[],mappings:"AAAA;EACE,eAAe;EACf,aAAa;EACb,sBAAsB;EACtB,iCAAiC;EACjC,kBAAkB;EAClB,QAAQ;EACR,YAAY;EACZ,cAAc;;EAEd,4BAA4B;AAC9B;;AAEA;EACE,oBAAoB;EACpB,YAAY;EACZ,kBAAkB;EAClB,mBAAmB;;EAEnB,cAAc;EACd,cAAc;;EAEd,2BAA2B;EAC3B,YAAY;EACZ,qBAAqB;AACvB;;AAEA;EACE,aAAa;EACb,YAAY;EACZ,QAAQ;AACV;;AAEA;;EAEE,YAAY;AACd;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,iBAAiB;EACjB,eAAe;EACf,kBAAkB;AACpB;;AAEA;EACE,6BAA6B;AAC/B;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,WAAW;EACX,4DAA6C;AAC/C;;AAEA;EACE,OAAO,YAAY,EAAE;EACrB,KAAK,UAAU,EAAE;AACnB",sourcesContent:[".compactWrapper {\n  cursor: pointer;\n  display: flex;\n  box-sizing: border-box;\n  border: 1px solid hsl(0, 0%, 80%);\n  border-radius: 4px;\n  gap: 5px;\n  height: 38px;\n  padding: 0 8px;\n\n  /* color: hsl(0, 0%, 20%); */\n}\n\n.buildDetails {\n  display: inline-flex;\n  height: 30px;\n  border-radius: 5px;\n  align-items: center;\n\n  font-size: 70%;\n  padding: 0 4px;\n\n  background-color: royalblue;\n  color: white;\n  text-decoration: none;\n}\n\n.pickerActions {\n  display: flex;\n  height: 38px;\n  gap: 4px;\n}\n\n.pickerActions button,\n.pickerActions .buildDetails {\n  height: 38px;\n}\n\n.buildDetails code {\n  font-family: monospace;\n}\n\n.buildStatus {\n  width: 30px;\n  height: 30px;\n  line-height: 30px;\n  font-size: 200%;\n  text-align: center;\n}\n\n.buildSuccess {\n  /* color: var(--selection); */\n}\n\n.buildFailed {\n  /* color: brown; */\n}\n\n.buildPending {\n  color: gold;\n  animation: pulse 1s linear alternate infinite;\n}\n\n@keyframes pulse {\n  from { opacity: 0.5; }\n  to { opacity: 1; }\n}\n"],sourceRoot:""}]),a.locals={compactWrapper:"z8z3GXuYqlepCz4tRPZj",buildDetails:"yyHfal9pM4DzShMl4LAY",pickerActions:"ukdycT4tarWVlV3PC6Rr",buildStatus:"QvI5wo7_u6OeAc12ib0W",buildSuccess:"eUw5NZqoPPF3BcyYDpJx",buildFailed:"XjY4lN_lY3nSgHcw67bX",buildPending:"Ap_OwCtp3j1Q29Phpw3V",pulse:"WjBuPfls4V41d2sjbNFU"},n.Z=a},47881:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,".sP2kDRoTZElZUTNHq033 {\n  width: 300px;\n\tpadding: 10px;\n\tborder-radius: 4px;\n\tbackground: radial-gradient(\n\t\trgba(var(--bg-rgb), 1) 20%,\n\t\trgba(var(--bg-rgb), .6) 100%\n\t);\n}\n.sP2kDRoTZElZUTNHq033 input {\n\tdisplay: block;\n\twidth: 100%;\n\theight: 30px;\n\tline-height: 30px;\n\n\tfont-size: 120%;\n\tmargin: 0;\n\tpadding: 4px;\n\tborder: none;\n\tborder-radius: 4px;\n  box-sizing: border-box;\n}\nul.inAS9Qunkf3g5K3xz6o6 {\n\tposition: relative;\n\tfont-family: monospace;\n\tlist-style-position: inside;\n\tlist-style-type: none;\n\tmax-height: 300px;\n\toverflow: scroll;\n\tpadding: 4px;\n  margin: 4px 0;\n\tbackground: rgba(0, 0, 0, 0.75);\n\tborder-radius: 4px;\n}\n.inAS9Qunkf3g5K3xz6o6 li {\n\tcursor: pointer;\n\tcolor: white;\n\tpadding: 5px;\n}\n.inAS9Qunkf3g5K3xz6o6 li:hover, .inAS9Qunkf3g5K3xz6o6 li.BL7Cxrn_efblQXY3W1Sw {\n\tbackground: white;\n\tcolor: black;\n}\n.inAS9Qunkf3g5K3xz6o6 li b { color: red; }\n.inAS9Qunkf3g5K3xz6o6 li .uld0XaeoQaQJJwp0LT0X {\n\tfont-style: italic;\n\tfont-size: 90%;\n\tmargin: 0;\n\tcolor: gray;\n}\n\n.pqiZQublKXvmnT_ESDxQ {\n  font-size: 10px;\n}\n\n.pqiZQublKXvmnT_ESDxQ a {\n  color: var(--selection);\n  border-bottom: 1px dotted var(--selection);\n  cursor: pointer;\n}\n\n.ECUs4g2j1rekP4xxgQDr {\n  position: relative;\n}\n.ECUs4g2j1rekP4xxgQDr input {\n  padding: 4px 4px 4px 30px;\n}\n\n.xDUAgQZeBp0TZSOqCwHm {\n  position: absolute;\n\ttop: 50%;\n\tleft: 10px;\n\ttransform: translateY(-50%);\n\tpointer-events: none;\n}\n.eY5zRl49sESLjXmizMEP {\n  position: absolute;\n\ttop: 50%;\n\tright: 10px;\n\ttransform: translateY(-50%);\n\tcursor: pointer;\n}","",{version:3,sources:["webpack://./src/ValuePicker/style.module.css"],names:[],mappings:"AAAA;EACE,YAAY;CACb,aAAa;CACb,kBAAkB;CAClB;;;EAGC;AACF;AACA;CACC,cAAc;CACd,WAAW;CACX,YAAY;CACZ,iBAAiB;;CAEjB,eAAe;CACf,SAAS;CACT,YAAY;CACZ,YAAY;CACZ,kBAAkB;EACjB,sBAAsB;AACxB;AACA;CACC,kBAAkB;CAClB,sBAAsB;CACtB,2BAA2B;CAC3B,qBAAqB;CACrB,iBAAiB;CACjB,gBAAgB;CAChB,YAAY;EACX,aAAa;CACd,+BAA+B;CAC/B,kBAAkB;AACnB;AACA;CACC,eAAe;CACf,YAAY;CACZ,YAAY;AACb;AACA;CACC,iBAAiB;CACjB,YAAY;AACb;AACA,6BAAgB,UAAU,EAAE;AAC5B;CACC,kBAAkB;CAClB,cAAc;CACd,SAAS;CACT,WAAW;AACZ;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,uBAAuB;EACvB,0CAA0C;EAC1C,eAAe;AACjB;;AAEA;EACE,kBAAkB;AACpB;AACA;EACE,yBAAyB;AAC3B;;AAEA;EACE,kBAAkB;CACnB,QAAQ;CACR,UAAU;CACV,2BAA2B;CAC3B,oBAAoB;AACrB;AACA;EACE,kBAAkB;CACnB,QAAQ;CACR,WAAW;CACX,2BAA2B;CAC3B,eAAe;AAChB",sourcesContent:[".dialog {\n  width: 300px;\n\tpadding: 10px;\n\tborder-radius: 4px;\n\tbackground: radial-gradient(\n\t\trgba(var(--bg-rgb), 1) 20%,\n\t\trgba(var(--bg-rgb), .6) 100%\n\t);\n}\n.dialog input {\n\tdisplay: block;\n\twidth: 100%;\n\theight: 30px;\n\tline-height: 30px;\n\n\tfont-size: 120%;\n\tmargin: 0;\n\tpadding: 4px;\n\tborder: none;\n\tborder-radius: 4px;\n  box-sizing: border-box;\n}\nul.results {\n\tposition: relative;\n\tfont-family: monospace;\n\tlist-style-position: inside;\n\tlist-style-type: none;\n\tmax-height: 300px;\n\toverflow: scroll;\n\tpadding: 4px;\n  margin: 4px 0;\n\tbackground: rgba(0, 0, 0, 0.75);\n\tborder-radius: 4px;\n}\n.results li {\n\tcursor: pointer;\n\tcolor: white;\n\tpadding: 5px;\n}\n.results li:hover, .results li.highlighted {\n\tbackground: white;\n\tcolor: black;\n}\n.results li b { color: red; }\n.results li .description {\n\tfont-style: italic;\n\tfont-size: 90%;\n\tmargin: 0;\n\tcolor: gray;\n}\n\n.choices-counter {\n  font-size: 10px;\n}\n\n.choices-counter a {\n  color: var(--selection);\n  border-bottom: 1px dotted var(--selection);\n  cursor: pointer;\n}\n\n.searchWrapper {\n  position: relative;\n}\n.searchWrapper input {\n  padding: 4px 4px 4px 30px;\n}\n\n.searchIcon {\n  position: absolute;\n\ttop: 50%;\n\tleft: 10px;\n\ttransform: translateY(-50%);\n\tpointer-events: none;\n}\n.clearSearchIcon {\n  position: absolute;\n\ttop: 50%;\n\tright: 10px;\n\ttransform: translateY(-50%);\n\tcursor: pointer;\n}"],sourceRoot:""}]),a.locals={dialog:"sP2kDRoTZElZUTNHq033",results:"inAS9Qunkf3g5K3xz6o6",highlighted:"BL7Cxrn_efblQXY3W1Sw",description:"uld0XaeoQaQJJwp0LT0X","choices-counter":"pqiZQublKXvmnT_ESDxQ",searchWrapper:"ECUs4g2j1rekP4xxgQDr",searchIcon:"xDUAgQZeBp0TZSOqCwHm",clearSearchIcon:"eY5zRl49sESLjXmizMEP"},n.Z=a},2746:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,"\n._vWNIXMkemQax9rkCJQh {\n  display: inline-block;\n  position: absolute;\n  z-index: 100;\n  bottom: 5px;\n  left: 5px;\n}\n\n._vWNIXMkemQax9rkCJQh label {\n  font-size: 75%;\n  font-style: italic;\n  display: block;\n  padding: 0 10px;\n}\n\n.qiC2NrujE4ebqmHjzq0_ {\n  display: inline-block;\n  font-size: 110%;\n  font-style: italic;\n  background-color: var(--code-bg);\n  border-radius: 20px;\n  padding: 5px 10px;\n  text-decoration: none;\n\n  color: royalblue;\n}\n.qiC2NrujE4ebqmHjzq0_:hover {\n  background-color: royalblue;\n  color: white;\n}","",{version:3,sources:["webpack://./src/styles.module.css"],names:[],mappings:";AACA;EACE,qBAAqB;EACrB,kBAAkB;EAClB,YAAY;EACZ,WAAW;EACX,SAAS;AACX;;AAEA;EACE,cAAc;EACd,kBAAkB;EAClB,cAAc;EACd,eAAe;AACjB;;AAEA;EACE,qBAAqB;EACrB,eAAe;EACf,kBAAkB;EAClB,gCAAgC;EAChC,mBAAmB;EACnB,iBAAiB;EACjB,qBAAqB;;EAErB,gBAAgB;AAClB;AACA;EACE,2BAA2B;EAC3B,YAAY;AACd",sourcesContent:["\n.wrapper {\n  display: inline-block;\n  position: absolute;\n  z-index: 100;\n  bottom: 5px;\n  left: 5px;\n}\n\n.wrapper label {\n  font-size: 75%;\n  font-style: italic;\n  display: block;\n  padding: 0 10px;\n}\n\n.githubLink {\n  display: inline-block;\n  font-size: 110%;\n  font-style: italic;\n  background-color: var(--code-bg);\n  border-radius: 20px;\n  padding: 5px 10px;\n  text-decoration: none;\n\n  color: royalblue;\n}\n.githubLink:hover {\n  background-color: royalblue;\n  color: white;\n}"],sourceRoot:""}]),a.locals={wrapper:"_vWNIXMkemQax9rkCJQh",githubLink:"qiC2NrujE4ebqmHjzq0_"},n.Z=a},46700:function(e,n,t){var r={"./af":42786,"./af.js":42786,"./ar":30867,"./ar-dz":14130,"./ar-dz.js":14130,"./ar-kw":96135,"./ar-kw.js":96135,"./ar-ly":56440,"./ar-ly.js":56440,"./ar-ma":47702,"./ar-ma.js":47702,"./ar-sa":16040,"./ar-sa.js":16040,"./ar-tn":37100,"./ar-tn.js":37100,"./ar.js":30867,"./az":31083,"./az.js":31083,"./be":9808,"./be.js":9808,"./bg":68338,"./bg.js":68338,"./bm":67438,"./bm.js":67438,"./bn":8905,"./bn-bd":76225,"./bn-bd.js":76225,"./bn.js":8905,"./bo":11560,"./bo.js":11560,"./br":1278,"./br.js":1278,"./bs":80622,"./bs.js":80622,"./ca":2468,"./ca.js":2468,"./cs":5822,"./cs.js":5822,"./cv":50877,"./cv.js":50877,"./cy":47373,"./cy.js":47373,"./da":24780,"./da.js":24780,"./de":59740,"./de-at":60217,"./de-at.js":60217,"./de-ch":60894,"./de-ch.js":60894,"./de.js":59740,"./dv":5300,"./dv.js":5300,"./el":50837,"./el.js":50837,"./en-au":78348,"./en-au.js":78348,"./en-ca":77925,"./en-ca.js":77925,"./en-gb":22243,"./en-gb.js":22243,"./en-ie":46436,"./en-ie.js":46436,"./en-il":47207,"./en-il.js":47207,"./en-in":44175,"./en-in.js":44175,"./en-nz":76319,"./en-nz.js":76319,"./en-sg":31662,"./en-sg.js":31662,"./eo":92915,"./eo.js":92915,"./es":55655,"./es-do":55251,"./es-do.js":55251,"./es-mx":96112,"./es-mx.js":96112,"./es-us":71146,"./es-us.js":71146,"./es.js":55655,"./et":5603,"./et.js":5603,"./eu":77763,"./eu.js":77763,"./fa":76959,"./fa.js":76959,"./fi":11897,"./fi.js":11897,"./fil":42549,"./fil.js":42549,"./fo":94694,"./fo.js":94694,"./fr":94470,"./fr-ca":63049,"./fr-ca.js":63049,"./fr-ch":52330,"./fr-ch.js":52330,"./fr.js":94470,"./fy":5044,"./fy.js":5044,"./ga":29295,"./ga.js":29295,"./gd":2101,"./gd.js":2101,"./gl":38794,"./gl.js":38794,"./gom-deva":27884,"./gom-deva.js":27884,"./gom-latn":23168,"./gom-latn.js":23168,"./gu":95349,"./gu.js":95349,"./he":24206,"./he.js":24206,"./hi":30094,"./hi.js":30094,"./hr":30316,"./hr.js":30316,"./hu":22138,"./hu.js":22138,"./hy-am":11423,"./hy-am.js":11423,"./id":29218,"./id.js":29218,"./is":90135,"./is.js":90135,"./it":90626,"./it-ch":10150,"./it-ch.js":10150,"./it.js":90626,"./ja":39183,"./ja.js":39183,"./jv":24286,"./jv.js":24286,"./ka":12105,"./ka.js":12105,"./kk":47772,"./kk.js":47772,"./km":18758,"./km.js":18758,"./kn":79282,"./kn.js":79282,"./ko":33730,"./ko.js":33730,"./ku":1408,"./ku.js":1408,"./ky":33291,"./ky.js":33291,"./lb":36841,"./lb.js":36841,"./lo":55466,"./lo.js":55466,"./lt":57010,"./lt.js":57010,"./lv":37595,"./lv.js":37595,"./me":39861,"./me.js":39861,"./mi":35493,"./mi.js":35493,"./mk":95966,"./mk.js":95966,"./ml":87341,"./ml.js":87341,"./mn":5115,"./mn.js":5115,"./mr":10370,"./mr.js":10370,"./ms":9847,"./ms-my":41237,"./ms-my.js":41237,"./ms.js":9847,"./mt":72126,"./mt.js":72126,"./my":56165,"./my.js":56165,"./nb":64924,"./nb.js":64924,"./ne":16744,"./ne.js":16744,"./nl":93901,"./nl-be":59814,"./nl-be.js":59814,"./nl.js":93901,"./nn":83877,"./nn.js":83877,"./oc-lnc":92135,"./oc-lnc.js":92135,"./pa-in":15858,"./pa-in.js":15858,"./pl":64495,"./pl.js":64495,"./pt":89520,"./pt-br":57971,"./pt-br.js":57971,"./pt.js":89520,"./ro":96459,"./ro.js":96459,"./ru":21793,"./ru.js":21793,"./sd":40950,"./sd.js":40950,"./se":10490,"./se.js":10490,"./si":90124,"./si.js":90124,"./sk":64249,"./sk.js":64249,"./sl":14985,"./sl.js":14985,"./sq":51104,"./sq.js":51104,"./sr":49131,"./sr-cyrl":79915,"./sr-cyrl.js":79915,"./sr.js":49131,"./ss":95606,"./ss.js":95606,"./sv":98760,"./sv.js":98760,"./sw":91172,"./sw.js":91172,"./ta":27333,"./ta.js":27333,"./te":23110,"./te.js":23110,"./tet":52095,"./tet.js":52095,"./tg":27321,"./tg.js":27321,"./th":9041,"./th.js":9041,"./tk":19005,"./tk.js":19005,"./tl-ph":75768,"./tl-ph.js":75768,"./tlh":89444,"./tlh.js":89444,"./tr":72397,"./tr.js":72397,"./tzl":28254,"./tzl.js":28254,"./tzm":51106,"./tzm-latn":30699,"./tzm-latn.js":30699,"./tzm.js":51106,"./ug-cn":9288,"./ug-cn.js":9288,"./uk":67691,"./uk.js":67691,"./ur":13795,"./ur.js":13795,"./uz":6791,"./uz-latn":60588,"./uz-latn.js":60588,"./uz.js":6791,"./vi":65666,"./vi.js":65666,"./x-pseudo":14378,"./x-pseudo.js":14378,"./yo":75805,"./yo.js":75805,"./zh-cn":83839,"./zh-cn.js":83839,"./zh-hk":55726,"./zh-hk.js":55726,"./zh-mo":99807,"./zh-mo.js":99807,"./zh-tw":74152,"./zh-tw.js":74152};function o(e){var n=i(e);return t(n)}function i(e){if(!t.o(r,e)){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}return r[e]}o.keys=function(){return Object.keys(r)},o.resolve=i,e.exports=o,o.id=46700}},function(e){e.O(0,[712,216],(function(){return 89949,e(e.s=89949)})),e.O()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LE1BQ1gsT0FBUSxNQUNSLFVBQVcsTUFDWCxPQUFRLE1BQ1IsVUFBVyxNQUNYLE9BQVEsTUFDUixVQUFXLE1BQ1gsT0FBUSxNQUNSLFVBQVcsTUFDWCxPQUFRLE1BQ1IsVUFBVyxNQUNYLE9BQVEsTUFDUixVQUFXLE1BQ1gsT0FBUSxNQUNSLFVBQVcsTUFDWCxPQUFRLEtBQ1IsVUFBVyxLQUNYLE9BQVEsTUFDUixVQUFXLE1BQ1gsT0FBUSxNQUNSLFVBQVcsTUFDWCxPQUFRLE1BQ1IsVUFBVyxNQUNYLE9BQVEsTUFDUixVQUFXLE1BQ1gsT0FBUSxNQUNSLFVBQVcsTUFDWCxPQUFRLE1BQ1IsVUFBVyxNQUNYLE9BQVEsTUFDUixVQUFXLE1BQ1gsT0FBUSxNQUNSLFVBQVcsTUFDWCxPQUFRLE1BQ1IsVUFBVyxNQUNYLE9BQVEsS0FDUixVQUFXLEtBQ1gsT0FBUSxNQUNSLFVBQVcsTUFDWCxPQUFRLEtBQ1IsVUFBVyxNQUNYLGFBQWMsTUFDZCxVQUFXLEtBQ1gsT0FBUSxNQUNSLFVBQVcsTUFDWCxPQUFRLE1BQ1IsVUFBVyxNQUNYLE9BQVEsTUFDUixVQUFXLE1BQ1gsT0FBUSxNQUNSLFVBQVcsTUFDWCxPQUFRLE1BQ1IsVUFBVyxNQUNYLGFBQWMsTUFDZCxVQUFXLE1BQ1gsT0FBUSxNQUNSLFVBQVcsTUFDWCxXQUFZLE1BQ1osY0FBZSxNQUNmLFVBQVcsTUFDWCxhQUFjLE1BQ2QsT0FBUSxNQUNSLFVBQVcsTUFDWCxPQUFRLE1BQ1IsVUFBVyxNQUNYLGFBQWMsTUFDZCxVQUFXLE1BQ1gsT0FBUSxNQUNSLFVBQVcsTUFDWCxPQUFRLE1BQ1IsVUFBVyxNQUNYLE9BQVEsTUFDUixVQUFXLE1BQ1gsT0FBUSxNQUNSLFVBQVcsTUFDWCxPQUFRLE1BQ1IsVUFBVyxNQUNYLE9BQVEsTUFDUixVQUFXLE1BQ1gsT0FBUSxNQUNSLFVBQVcsTUFDWCxPQUFRLE1BQ1IsVUFBVyxNQUNYLE9BQVEsTUFDUixZQUFhLE1BQ2IsZUFBZ0IsTUFDaEIsVUFBVyxNQUNYLE9BQVEsTUFDUixVQUFXLE1BQ1gsT0FBUSxNQUNSLFVBQVcsTUFDWCxPQUFRLE1BQ1IsVUFBVyxNQUNYLE9BQVEsTUFDUixVQUFXLE1BQ1gsT0FBUSxNQUNSLFVBQVcsTUFDWCxRQUFTLE1BQ1QsV0FBWSxNQUNaLE9BQVEsTUFDUixVQUFXLE1BQ1gsT0FBUSxLQUNSLFVBQVcsS0FDWCxPQUFRLE1BQ1IsVUFBVyxNQUNYLFVBQVcsTUFDWCxhQUFjLE1BQ2QsUUFBUyxNQUNULFdBQVksTUFDWixPQUFRLE1BQ1IsVUFBVyxNQUNYLFFBQVMsTUFDVCxXQUFZLE1BQ1osUUFBUyxNQUNULGFBQWMsTUFDZCxnQkFBaUIsTUFDakIsV0FBWSxNQUNaLFVBQVcsS0FDWCxhQUFjLEtBQ2QsT0FBUSxNQUNSLFVBQVcsTUFDWCxPQUFRLE1BQ1IsVUFBVyxNQUNYLE9BQVEsS0FDUixZQUFhLE1BQ2IsZUFBZ0IsTUFDaEIsVUFBVyxLQUNYLE9BQVEsTUFDUixVQUFXLE1BQ1gsYUFBYyxNQUNkLGdCQUFpQixNQUNqQixPQUFRLE1BQ1IsVUFBVyxNQUNYLFVBQVcsTUFDWCxhQUFjLE1BQ2QsVUFBVyxNQUNYLGFBQWMsTUFDZCxVQUFXLE1BQ1gsYUFBYyxNQUNkLFVBQVcsTUFDWCxhQUFjLE9BSWYsU0FBUzZuQyxFQUFlQyxHQUN2QixJQUFJemlCLEVBQUswaUIsRUFBc0JELEdBQy9CLE9BQU9FLEVBQW9CM2lCLEVBQzVCLENBQ0EsU0FBUzBpQixFQUFzQkQsR0FDOUIsSUFBSUUsRUFBb0JDLEVBQUVqb0MsRUFBSzhuQyxHQUFNLENBQ3BDLElBQUlqaEMsRUFBSSxJQUFJdkksTUFBTSx1QkFBeUJ3cEMsRUFBTSxLQUVqRCxNQURBamhDLEVBQUV6RyxLQUFPLG1CQUNIeUcsQ0FDUCxDQUNBLE9BQU83RyxFQUFJOG5DLEVBQ1osQ0FDQUQsRUFBZTlpQyxLQUFPLFdBQ3JCLE9BQU96RSxPQUFPeUUsS0FBSy9FLEVBQ3BCLEVBQ0E2bkMsRUFBZUssUUFBVUgsRUFDekJKLEVBQU9RLFFBQVVOLEVBQ2pCQSxFQUFleGlCLEdBQUsiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXguY3NzP2NmZTQiLCJ3ZWJwYWNrOi8vLy4vc3JjL0FwcC5jc3M/ZDljZCIsIndlYnBhY2s6Ly8vLi9zcmMvcHJvdmlkZXJzLmpzIiwid2VicGFjazovLy8uL3NyYy9Db21tb24vSWNvbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvQ29tbW9uL0ljb25CdXR0b24uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbmZpZy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBpLmpzIiwid2VicGFjazovLy8uL3NyYy9rZXljb2Rlcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvQ29udGV4dHMvRGVmaW5pdGlvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0tleWJvYXJkL0NvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0NvbW1vbi9hY3Rpb24tYnV0dG9uLm1vZHVsZS5jc3M/ZWQ4MyIsIndlYnBhY2s6Ly8vLi9zcmMvQ29tbW9uL0FjdGlvbkJ1dHRvbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvQ29tbW9uL2RpYWxvZy1ib3gubW9kdWxlLmNzcz9iZWU2Iiwid2VicGFjazovLy8uL3NyYy9Db21tb24vRGlhbG9nQm94LmpzIiwid2VicGFjazovLy8uL3NyYy9Db21tb24vTW9kYWwuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0tleWJvYXJkL0JlaGF2aW9ycy9zdHlsZXMubW9kdWxlLmNzcz80NjExIiwid2VicGFjazovLy8uL3NyYy9LZXlib2FyZC9CZWhhdmlvcnMvUHJvcGVydHlOYW1lLmpzIiwid2VicGFjazovLy8uL3NyYy9rZXktdW5pdHMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0tleWJvYXJkL3V0aWwuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0tleWJvYXJkL3N0eWxlcy5tb2R1bGUuY3NzPzc1ZGEiLCJ3ZWJwYWNrOi8vLy4vc3JjL0tleWJvYXJkL2xheW91dFByb3BUeXBlcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvS2V5Ym9hcmQvS2V5UGxhY2VyLmpzIiwid2VicGFjazovLy8uL3NyYy9LZXlib2FyZC9LZXlib2FyZExheW91dC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvS2V5Ym9hcmQvS2V5cy9zdHlsZXMubW9kdWxlLmNzcz9iZjljIiwid2VicGFjazovLy8uL3NyYy9LZXlib2FyZC9LZXlzL0tleVdyYXBwZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0tleWJvYXJkL0NvbW1vbi9kcmFnU2VsZWN0b3IubW9kdWxlLmNzcz8xYzZmIiwid2VicGFjazovLy8uL3NyYy9LZXlib2FyZC9Db21tb24vRHJhZ1NlbGVjdG9yLmpzIiwid2VicGFjazovLy8uL3NyYy9LZXlib2FyZC9Db21tb24va2V5UG9zaXRpb25TZWxlY3RvclN0eWxlcy5tb2R1bGUuY3NzP2Q1NGQiLCJ3ZWJwYWNrOi8vLy4vc3JjL0NvbW1vbi90aXAubW9kdWxlLmNzcz80Zjc2Iiwid2VicGFjazovLy8uL3NyYy9Db21tb24vVGlwLmpzIiwid2VicGFjazovLy8uL3NyYy9Db250ZXh0cy9MYXlvdXQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0tleWJvYXJkL0NvbW1vbi9LZXlQb3NpdGlvblNlbGVjdG9yLmpzIiwid2VicGFjazovLy8uL3NyYy9LZXlib2FyZC9CZWhhdmlvcnMvUHJvcGVydHlWYWx1ZS9zdHlsZXMubW9kdWxlLmNzcz85YzdkIiwid2VicGFjazovLy8uL3NyYy9LZXlib2FyZC9CZWhhdmlvcnMvUHJvcGVydHlWYWx1ZS9zaW1wbGUtdHlwZXMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1ZhbHVlUGlja2VyL3V0aWwuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1ZhbHVlUGlja2VyL3N0eWxlLm1vZHVsZS5jc3M/MGZmZiIsIndlYnBhY2s6Ly8vLi9zcmMvVmFsdWVQaWNrZXIvUmVzdWx0TGlzdC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvVmFsdWVQaWNrZXIvU2VhcmNoRmlsdGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9WYWx1ZVBpY2tlci9DaG9pY2VzUGlja2VyLmpzIiwid2VicGFjazovLy8uL3NyYy9LZXlib2FyZC9CZWhhdmlvcnMvUHJvcGVydHlWYWx1ZS9jb2xsZWN0aW9uLXR5cGVzLmpzIiwid2VicGFjazovLy8uL3NyYy9WYWx1ZVBpY2tlci9FbnVtUGlja2VyLmpzIiwid2VicGFjazovLy8uL3NyYy9LZXlib2FyZC9CaW5kaW5nL2JpbmRQcm9wVHlwZXMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1ZhbHVlUGlja2VyL0dlbmVyaWNQaWNrZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0VuaGFuY2VkUGlja2Vycy9SR0IvSHVlU2F0VmFsUGlja2VyLmpzIiwid2VicGFjazovLy8uL3NyYy9FbmhhbmNlZFBpY2tlcnMvS2V5Y29kZS9oZWxwZXJzLmpzIiwid2VicGFjazovLy8uL3NyYy9FbmhhbmNlZFBpY2tlcnMvS2V5Y29kZS9zdHlsZXMubW9kdWxlLmNzcz9kMmJhIiwid2VicGFjazovLy8uL3NyYy9FbmhhbmNlZFBpY2tlcnMvS2V5Y29kZS9Nb2RpZmllcnNQaWNrZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0tleWJvYXJkL0JpbmRpbmcvQmluZFZhbHVlLmpzIiwid2VicGFjazovLy8uL3NyYy9FbmhhbmNlZFBpY2tlcnMvS2V5Y29kZS9LZXljb2RlQmluZE5vZGUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2tleW1hcC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvS2V5Ym9hcmQvQmluZGluZy91dGlsLmpzIiwid2VicGFjazovLy8uL3NyYy9FbmhhbmNlZFBpY2tlcnMvS2V5Y29kZS9LZXljb2RlUGlja2VyLmpzIiwid2VicGFjazovLy8uL3NyYy9WYWx1ZVBpY2tlci9SYXdWYWx1ZVBpY2tlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvS2V5Ym9hcmQvTGF5ZXJzL2xheWVyc1NsaWNlLmpzIiwid2VicGFjazovLy8uL3NyYy9WYWx1ZVBpY2tlci9MYXllclBpY2tlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvVmFsdWVQaWNrZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3JlZHVjZXItdXRpbC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvS2V5Ym9hcmQvQmVoYXZpb3JzL1Byb3BlcnR5VmFsdWUvQmVoYXZpb3JzUHJvcGVydHlWYWx1ZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvRW5oYW5jZWRQaWNrZXJzL1JHQi9IdWVTYXRWYWxCaW5kTm9kZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvS2V5Ym9hcmQvQmluZGluZy9CaW5kUGFyYW1saXN0LmpzIiwid2VicGFjazovLy8uL3NyYy9LZXlib2FyZC9CaW5kaW5nL0JpbmRpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0tleWJvYXJkL0tleXMvS2V5LmpzIiwid2VicGFjazovLy8uL3NyYy9LZXlib2FyZC9CZWhhdmlvcnMvUHJvcGVydHlWYWx1ZS9CaW5kaW5nc1Byb3BlcnR5VmFsdWUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0tleWJvYXJkL0JlaGF2aW9ycy9Qcm9wZXJ0eVZhbHVlL1Byb3BlcnR5VmFsdWUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0tleWJvYXJkL0JlaGF2aW9ycy9Qcm9wZXJ0eVZhbHVlL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9LZXlib2FyZC92YWxpZGF0b3JzLmpzIiwid2VicGFjazovLy8uL3NyYy9Db21tb24vaW5wdXQubW9kdWxlLmNzcz84MzQ3Iiwid2VicGFjazovLy8uL3NyYy9Db21tb24vSW5wdXQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0tleWJvYXJkL0JlaGF2aW9ycy9CZWhhdmlvckhlYWRlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvS2V5Ym9hcmQvQmVoYXZpb3JzL0JlaGF2aW9yRWRpdG9yLmpzIiwid2VicGFjazovLy8uL3NyYy9Db21tb24vbGluay5tb2R1bGUuY3NzP2RmNGUiLCJ3ZWJwYWNrOi8vLy4vc3JjL0NvbW1vbi9MaW5rLmpzIiwid2VicGFjazovLy8uL3NyYy9LZXlib2FyZC9CZWhhdmlvcnMvQmV0YU5vdGljZURpYWxvZy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvS2V5Ym9hcmQvQmVoYXZpb3JzL05ld0JlaGF2aW9yTW9kYWwuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0tleWJvYXJkL0JlaGF2aW9ycy9jcmVhdGUtYmVoYXZpb3IuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0tleWJvYXJkL0JlaGF2aW9ycy9iZWhhdmlvcnNTbGljZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvS2V5Ym9hcmQvQmVoYXZpb3JzL0JlaGF2aW9ycy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvS2V5Ym9hcmQvQ29tYm9zL3N0eWxlcy5tb2R1bGUuY3NzP2Y3NjUiLCJ3ZWJwYWNrOi8vLy4vc3JjL0tleWJvYXJkL0NvbWJvcy9Db21ib0lucHV0TWFwLmpzIiwid2VicGFjazovLy8uL3NyYy9Db21tb24vZWRpdGFibGVmaWVsZC5tb2R1bGUuY3NzPzg2YTUiLCJ3ZWJwYWNrOi8vLy4vc3JjL2V2ZW50LXV0aWwuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0NvbW1vbi9FZGl0YWJsZUZpZWxkLmpzIiwid2VicGFjazovLy8uL3NyYy9LZXlib2FyZC9Db21ib3MvQ29uZmlnTW9kYWwuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0tleWJvYXJkL0NvbWJvcy9jb21ib3NTbGljZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvS2V5Ym9hcmQvQ29tYm9zL0NvbWJvRWRpdG9yLmpzIiwid2VicGFjazovLy8uL3NyYy9LZXlib2FyZC9MYXllcnMvbGF5ZXItc2VsZWN0b3IubW9kdWxlLmNzcz81Y2VhIiwid2VicGFjazovLy8uL3NyYy9LZXlib2FyZC9MYXllcnMvTGF5ZXJTZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvS2V5Ym9hcmQvRW5jb2RlckJpbmRpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0tleWJvYXJkL0xheWVycy9TZW5zb3JCaW5kaW5ncy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvQ29tbW9uL2FjdGlvbi1tZW51Lm1vZHVsZS5jc3M/OGM1MiIsIndlYnBhY2s6Ly8vLi9zcmMvQ29tbW9uL0FjdGlvbk1lbnUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0tleWJvYXJkL0xheWVycy9MYXllckFjdGlvbnNNZW51LmpzIiwid2VicGFjazovLy8uL3NyYy9LZXlib2FyZC9MYXllcnMvc3R5bGUubW9kdWxlLmNzcz8yMDBkIiwid2VicGFjazovLy8uL3NyYy9LZXlib2FyZC9MYXllcnMvQ29uZmlnTW9kYWwuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0tleWJvYXJkL0xheWVycy9Qcm9tcHRGb3JGaXJzdExheWVyLmpzIiwid2VicGFjazovLy8uL3NyYy9LZXlib2FyZC9MYXllcnMvTGF5ZXJCaW5kaW5ncy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvS2V5Ym9hcmQvTGF5ZXJzL3VzZS1rZXktaGFuZGxlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvS2V5Ym9hcmQvTGF5ZXJzL3F1aWNrLWFzc2lnbm1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0tleWJvYXJkL0xheWVycy9RdWlja0Fzc2lnbk1vZGFsLmpzIiwid2VicGFjazovLy8uL3NyYy9LZXlib2FyZC9MYXllcnMvTGF5ZXJFZGl0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0tleWJvYXJkL01hY3Jvcy91dGlsLmpzIiwid2VicGFjazovLy8uL3NyYy9LZXlib2FyZC9NYWNyb3Mvc3R5bGVzLm1vZHVsZS5jc3M/ZWY4ZSIsIndlYnBhY2s6Ly8vLi9zcmMvS2V5Ym9hcmQvTWFjcm9zL2RyYWctYW5kLWRyb3AubW9kdWxlLmNzcz9mZGQ4Iiwid2VicGFjazovLy8uL3NyYy9LZXlib2FyZC9NYWNyb3MvRHJhZ0FuZERyb3AuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0tleWJvYXJkL01hY3Jvcy9TZXF1ZW5jZU1vZGFsLmpzIiwid2VicGFjazovLy8uL3NyYy9LZXlib2FyZC9NYWNyb3MvbWFjcm9zU2xpY2UuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0tleWJvYXJkL01hY3Jvcy9NYWNyb0JpbmRzLmpzIiwid2VicGFjazovLy8uL3NyYy9LZXlib2FyZC9NYWNyb3MvQ29uZmlnTW9kYWwuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0tleWJvYXJkL01hY3Jvcy9NYWNyby5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvS2V5Ym9hcmQvTWFjcm9zL01hY3JvRWRpdG9yLmpzIiwid2VicGFjazovLy8uL3NyYy9LZXlib2FyZC9iaW5kaW5nUHJvcFR5cGVzLmpzIiwid2VicGFjazovLy8uL3NyYy9LZXlib2FyZC9Db21ib3MvY29tYm9Qcm9wVHlwZXMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0tleWJvYXJkL2tleW1hcFByb3BUeXBlcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvS2V5Ym9hcmQvV2FybmluZ3Mvc2FuaXR5LWNoZWNrcy1sYXlvdXQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0tleWJvYXJkL1dhcm5pbmdzL3Nhbml0eS1jaGVja3MuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0tleWJvYXJkL1dhcm5pbmdzL3N0eWxlcy5tb2R1bGUuY3NzPzcwYzUiLCJ3ZWJwYWNrOi8vLy4vc3JjL0tleWJvYXJkL1dhcm5pbmdzL1dhcm5pbmdzLmpzIiwid2VicGFjazovLy8uL3NyYy9LZXlib2FyZC9LZXlib2FyZC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc3R5bGVzLm1vZHVsZS5jc3M/Zjc5YyIsIndlYnBhY2s6Ly8vLi9zcmMvR2l0SHViTGluay5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvRGlhbG9ncy9TZXR0aW5ncy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvQ29tbW9uL3NwaW5uZXIubW9kdWxlLmNzcz83ZTUxIiwid2VicGFjazovLy8uL3NyYy9Db21tb24vU3Bpbm5lci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvU291cmNlcy9HaXRodWIvYXBpLmpzIiwid2VicGFjazovLy8uL3NyYy9Tb3VyY2VzL0dpdGh1Yi9zdHlsZXMubW9kdWxlLmNzcz81MjljIiwid2VicGFjazovLy8uL3NyYy9Tb3VyY2VzL0dpdGh1Yi9CdWlsZExpbmsuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1NvdXJjZXMvR2l0aHViL0RpYWxvZ3MvQ29tbWl0LmpzIiwid2VicGFjazovLy8uL3NyYy9Tb3VyY2VzL1NvdXJjZUFjdGlvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0RpYWxvZ3Mvc3VwcG9ydC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvRGlhbG9ncy9MYXlvdXRHZW5lcmF0aW9uRXJyb3IuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1NvdXJjZXMvQ29udHJvbHMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1NvdXJjZXMvTG9jYWwvUGlja2VyLmpzIiwid2VicGFjazovLy8uL3NyYy9Tb3VyY2VzL0RlbW8vRGlhbG9ncy9EZW1vSGVscERpYWxvZy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvU291cmNlcy9EZW1vL3N0eWxlLm1vZHVsZS5jc3M/ZmY3ZiIsIndlYnBhY2s6Ly8vLi9zcmMvU291cmNlcy9EZW1vL1BpY2tlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvU291cmNlcy9HaXRodWIvVmFsaWRhdGlvbkVycm9ycy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvU291cmNlcy9HaXRodWIvc3RvcmFnZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvU291cmNlcy9HaXRodWIvc3RvcmUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0RpYWxvZ3MvU3VnZ2VzdFJlbW90ZVJlcG8uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0RpYWxvZ3MvU3VnZ2VzdFJlcG9TZWxlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0RpYWxvZ3MvU3VnZ2VzdFdyb25nUmVwby5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvRGlhbG9ncy9CbG9ja2VkLmpzIiwid2VicGFjazovLy8uL3NyYy9EaWFsb2dzL01pc3NpbmdMYXlvdXQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1NvdXJjZXMvR2l0aHViL0RpYWxvZ3MvTG9naW4uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1NvdXJjZXMvR2l0aHViL0RpYWxvZ3MvSW5zdGFsbC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvRGlhbG9ncy9NaXNzaW5nS2V5bWFwcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvU291cmNlcy9HaXRodWIvR2l0SHViRXhwYW5kZWRQaWNrZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1NvdXJjZXMvR2l0aHViL3JlcG9zaXRvcnktb3B0aW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvU291cmNlcy9HaXRodWIvUGlja2VyLmpzIiwid2VicGFjazovLy8uL3NyYy9Tb3VyY2VzL3NvdXJjZXMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0RpYWxvZ3MvS2V5bWFwQmluZGluZ3NVc2VQcmVwcm9jZXNzb3JNYWNyb3MuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0RpYWxvZ3MvS2V5bWFwUGFyc2luZ0ZhaWxlZC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvRGlhbG9ncy9LZXltYXBVc2luZ01pcnlva3UuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0RpYWxvZ3MvTWlzc2luZ1Jvb3ROb2RlLmpzIiwid2VicGFjazovLy8uL3NyYy9EaWFsb2dzL1pta05vZGVmcmVlQ29uZmlnLmpzIiwid2VicGFjazovLy8uL3NyYy9EaWFsb2dzL1N1Z2dlc3RBdXRvTGF5b3V0VHdlYWsuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1NvdXJjZXMvU291cmNlUGlja2VyLmpzIiwid2VicGFjazovLy8uL3NyYy9Tb3VyY2VzL2Vycm9ycy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvRGlhbG9ncy91bmV4cGVjdGVkLWVycm9yLm1vZHVsZS5jc3M/OTRjNyIsIndlYnBhY2s6Ly8vLi9zcmMvRGlhbG9ncy9VbmV4cGVjdGVkRXJyb3IuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0Vycm9yQm91bmRhcnkuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0RpYWxvZ3MvS2V5bWFwU2F2ZUZhaWxlZC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvQXBwLmpzIiwid2VicGFjazovLy8uL3NyYy9hcHBSZWR1Y2VyLmpzIiwid2VicGFjazovLy8uL3NyYy9zdG9yZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0FwcC5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvQ29tbW9uL2FjdGlvbi1idXR0b24ubW9kdWxlLmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvQ29tbW9uL2FjdGlvbi1tZW51Lm1vZHVsZS5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL0NvbW1vbi9kaWFsb2ctYm94Lm1vZHVsZS5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL0NvbW1vbi9lZGl0YWJsZWZpZWxkLm1vZHVsZS5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL0NvbW1vbi9pbnB1dC5tb2R1bGUuY3NzIiwid2VicGFjazovLy8uL3NyYy9Db21tb24vbGluay5tb2R1bGUuY3NzIiwid2VicGFjazovLy8uL3NyYy9Db21tb24vc3Bpbm5lci5tb2R1bGUuY3NzIiwid2VicGFjazovLy8uL3NyYy9Db21tb24vdGlwLm1vZHVsZS5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL0RpYWxvZ3MvdW5leHBlY3RlZC1lcnJvci5tb2R1bGUuY3NzIiwid2VicGFjazovLy8uL3NyYy9FbmhhbmNlZFBpY2tlcnMvS2V5Y29kZS9zdHlsZXMubW9kdWxlLmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvS2V5Ym9hcmQvQmVoYXZpb3JzL1Byb3BlcnR5VmFsdWUvc3R5bGVzLm1vZHVsZS5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL0tleWJvYXJkL0JlaGF2aW9ycy9zdHlsZXMubW9kdWxlLmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvS2V5Ym9hcmQvQ29tYm9zL3N0eWxlcy5tb2R1bGUuY3NzIiwid2VicGFjazovLy8uL3NyYy9LZXlib2FyZC9Db21tb24vZHJhZ1NlbGVjdG9yLm1vZHVsZS5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL0tleWJvYXJkL0NvbW1vbi9rZXlQb3NpdGlvblNlbGVjdG9yU3R5bGVzLm1vZHVsZS5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL0tleWJvYXJkL0tleXMvc3R5bGVzLm1vZHVsZS5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL0tleWJvYXJkL0xheWVycy9sYXllci1zZWxlY3Rvci5tb2R1bGUuY3NzIiwid2VicGFjazovLy8uL3NyYy9LZXlib2FyZC9MYXllcnMvc3R5bGUubW9kdWxlLmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvS2V5Ym9hcmQvTWFjcm9zL2RyYWctYW5kLWRyb3AubW9kdWxlLmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvS2V5Ym9hcmQvTWFjcm9zL3N0eWxlcy5tb2R1bGUuY3NzIiwid2VicGFjazovLy8uL3NyYy9LZXlib2FyZC9XYXJuaW5ncy9zdHlsZXMubW9kdWxlLmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvS2V5Ym9hcmQvc3R5bGVzLm1vZHVsZS5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL1NvdXJjZXMvRGVtby9zdHlsZS5tb2R1bGUuY3NzIiwid2VicGFjazovLy8uL3NyYy9Tb3VyY2VzL0dpdGh1Yi9zdHlsZXMubW9kdWxlLmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvVmFsdWVQaWNrZXIvc3R5bGUubW9kdWxlLmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvc3R5bGVzLm1vZHVsZS5jc3MiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvIHN5bmMgXlxcLlxcLy4qJCJdLCJzb3VyY2VzQ29udGVudCI6WyJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vaW5kZXguY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9pbmRleC5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vQXBwLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vQXBwLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCB7IGNyZWF0ZUNvbnRleHQgfSBmcm9tICdyZWFjdCdcblxuZXhwb3J0IGNvbnN0IFNlYXJjaENvbnRleHQgPSBjcmVhdGVDb250ZXh0KHtcbiAgZ2V0U2VhcmNoVGFyZ2V0czogbnVsbFxufSlcblxuZXhwb3J0IGNvbnN0IFNldHRpbmdzQ29udGV4dCA9IGNyZWF0ZUNvbnRleHQoe1xuICBzZXR0aW5nczogbnVsbCxcbiAgb3BlblNldHRpbmdzRGlhbG9nOiBudWxsXG59KVxuIiwiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJ1xuXG5jb25zdCBmYUNvbGxlY3Rpb25zID0ge1xuICBicmFuZHM6ICdmYWInLFxuICBkZWZhdWx0OiAnZmEnLFxuICBzb2xpZDogJ2ZhcycsXG4gIHJvdW5kOiAnZmFyJ1xufVxuXG5mdW5jdGlvbiBJY29uIChwcm9wcykge1xuICBjb25zdCB7IG5hbWUsIGNsYXNzTmFtZSwgY29sbGVjdGlvbiwgLi4uaWNvblByb3BzIH0gPSBwcm9wc1xuICBjb25zdCBncm91cENsYXNzID0gZmFDb2xsZWN0aW9uc1tjb2xsZWN0aW9uXVxuICBjb25zdCBpY29uQ2xhc3MgPSBgZmEtJHtuYW1lfWBcblxuICByZXR1cm4gKFxuICAgIDxzcGFuXG4gICAgICBjbGFzc05hbWU9e1tjbGFzc05hbWUsIGdyb3VwQ2xhc3MsIGljb25DbGFzc10uam9pbignICcpfVxuICAgICAgey4uLmljb25Qcm9wc31cbiAgICAvPlxuICApXG59XG5cbkljb24ucHJvcFR5cGVzID0ge1xuICBuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgY29sbGVjdGlvbjogUHJvcFR5cGVzLnN0cmluZ1xufVxuXG5JY29uLmRlZmF1bHRQcm9wcyA9IHtcbiAgY29sbGVjdGlvbjogJ2RlZmF1bHQnLFxuICBjbGFzc05hbWU6ICcnXG59XG5cbmV4cG9ydCBkZWZhdWx0IEljb25cbiIsImltcG9ydCBJY29uIGZyb20gJy4vSWNvbidcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gSWNvbkJ1dHRvbiAoeyBjb2xsZWN0aW9uLCBpY29uLCB0ZXh0LCBjaGlsZHJlbiwgb25DbGljaywgLi4ucmVzdCB9KSB7XG4gIHJldHVybiAoXG4gICAgPGJ1dHRvbiBvbkNsaWNrPXtvbkNsaWNrfSB7Li4ucmVzdH0+XG4gICAgICA8SWNvbiBjb2xsZWN0aW9uPXtjb2xsZWN0aW9ufSBuYW1lPXtpY29ufSAvPiB7dGV4dCB8fCBjaGlsZHJlbn1cbiAgICA8L2J1dHRvbj5cbiAgKVxufVxuIiwiZnVuY3Rpb24gcGFyc2VCb29sZWFuICh2YWwpIHtcbiAgcmV0dXJuIHZhbCAmJiBbJzEnLCAnb24nLCAneWVzJywgJ3RydWUnXS5pbmNsdWRlcyh2YWwudG9TdHJpbmcoKS50b0xvd2VyQ2FzZSgpKVxufVxuXG5leHBvcnQgY29uc3QgYXBpQmFzZVVybCA9IHByb2Nlc3MuZW52LkFQSV9CQVNFX1VSTFxuZXhwb3J0IGNvbnN0IGFwcEJhc2VVcmwgPSBwcm9jZXNzLmVudi5BUFBfQkFTRV9VUkxcbmV4cG9ydCBjb25zdCBnaXRodWJBcHBOYW1lID0gcHJvY2Vzcy5lbnYuR0lUSFVCX0FQUF9OQU1FXG5leHBvcnQgY29uc3QgZW5hYmxlR2l0SHViID0gcGFyc2VCb29sZWFuKHByb2Nlc3MuZW52LkVOQUJMRV9HSVRIVUIpXG5leHBvcnQgY29uc3QgZW5hYmxlTG9jYWwgPSBwYXJzZUJvb2xlYW4ocHJvY2Vzcy5lbnYuRU5BQkxFX0xPQ0FMKVxuZXhwb3J0IGNvbnN0IGVuYWJsZURlbW8gPSBwYXJzZUJvb2xlYW4ocHJvY2Vzcy5lbnYuRU5BQkxFX0RFTU8pXG4iLCJpbXBvcnQgKiBhcyBjb25maWcgZnJvbSAnLi9jb25maWcnXG5cbmV4cG9ydCBmdW5jdGlvbiBoZWFsdGhjaGVjayAoKSB7XG4gIHJldHVybiBmZXRjaChgJHtjb25maWcuYXBpQmFzZVVybH0vaGVhbHRoYClcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGxvYWRCZWhhdmlvdXJCaW5kaW5ncyAoKSB7XG4gIGNvbnN0IHsgYmVoYXZpb3JTY2hlbWFzLCBiZWhhdmlvckJpbmRpbmdzIH0gPSBhd2FpdCBpbXBvcnQoJ3ptay1kYXRhL2JlaGF2aW9ycycpXG4gIHJldHVybiB7XG4gICAgYmVoYXZpb3JzOiBiZWhhdmlvclNjaGVtYXMsXG4gICAgYmluZGluZ3M6IGJlaGF2aW9yQmluZGluZ3NcbiAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbG9hZEtleWNvZGVzICgpIHtcbiAgY29uc3QgeyBrZXljb2RlcyB9ID0gYXdhaXQgaW1wb3J0KCd6bWstZGF0YS9rZXljb2RlcycpXG4gIHJldHVybiBrZXljb2Rlc1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbG9hZEtleWNvZGVHbHlwaHMgKCkge1xuICBjb25zdCB7IGtleWNvZGVHbHlwaHMgfSA9IGF3YWl0IGltcG9ydCgnem1rLWRhdGEva2V5Y29kZXMnKVxuICByZXR1cm4ga2V5Y29kZUdseXBoc1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbG9hZEF2YWlsYWJsZUtleWJvYXJkcyAoKSB7XG4gIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYCR7Y29uZmlnLmFwaUJhc2VVcmx9L3YyL2xvY2FsL2tleWJvYXJkc2ApXG4gIHJldHVybiByZXNwb25zZS5qc29uKClcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGxvYWRLZXlib2FyZEZpbGVzIChrZXlib2FyZCkge1xuICBjb25zdCBwYXRoID0gYHYyL2xvY2FsL2tleWJvYXJkcy8ke2VuY29kZVVSSUNvbXBvbmVudChrZXlib2FyZCl9YFxuICBjb25zdCB1cmwgPSBgJHtjb25maWcuYXBpQmFzZVVybH0vJHtwYXRofWBcbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCh1cmwpXG5cbiAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgIGNvbnN0IGVyciA9IG5ldyBFcnJvcigpXG4gICAgZXJyLnJlc3BvbnNlID0gcmVzcG9uc2VcbiAgICB0aHJvdyBlcnJcbiAgfVxuICByZXR1cm4gcmVzcG9uc2UuanNvbigpXG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB1cGRhdGVLZXltYXAgKGtleWJvYXJkLCBrZXltYXApIHtcbiAgY29uc3QgcGF0aCA9IGB2Mi9sb2NhbC9rZXlib2FyZHMvJHtlbmNvZGVVUklDb21wb25lbnQoa2V5Ym9hcmQpfS9rZXltYXBgXG4gIGNvbnN0IHVybCA9IGAke2NvbmZpZy5hcGlCYXNlVXJsfS8ke3BhdGh9YFxuXG4gIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2godXJsLCB7XG4gICAgbWV0aG9kOiAnUFVUJyxcbiAgICBoZWFkZXJzOiB7ICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicgfSxcbiAgICBib2R5OiBKU09OLnN0cmluZ2lmeShrZXltYXApXG4gIH0pXG5cbiAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbG9hZEtleWJvYXJkICgpIHtcbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHtjb25maWcuYXBpQmFzZVVybH0va2V5Ym9hcmRgKVxuICBjb25zdCB7IGluZm8sIGtleW1hcCB9ID0gYXdhaXQgcmVzcG9uc2UuanNvbigpXG4gIGNvbnN0IGRlZmF1bHRMYXlvdXQgPSAoXG4gICAgaW5mby5sYXlvdXRzLmRlZmF1bHQgfHxcbiAgICBpbmZvLmxheW91dHNbT2JqZWN0LmtleXMoaW5mby5sYXlvdXRzKVswXV1cbiAgKVxuXG4gIHJldHVybiB7XG4gICAgbGF5b3V0OiBkZWZhdWx0TGF5b3V0LmxheW91dCxcbiAgICBrZXltYXAsXG4gICAgc2Vuc29yczogaW5mby5zZW5zb3JzXG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxvYWRLZXltYXAgKCkge1xuICBjb25zdCB1cmwgPSBuZXcgVVJMKGAke2NvbmZpZy5hcGlCYXNlVXJsfS9rZXltYXBgKVxuICByZXR1cm4gZmV0Y2godXJsKVxuICAgIC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLmpzb24oKSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxvYWRMYXlvdXQgKCkge1xuICByZXR1cm4gZmV0Y2goYCR7Y29uZmlnLmFwaUJhc2VVcmx9L2xheW91dGApXG4gICAgLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UuanNvbigpKVxufVxuIiwiaW1wb3J0IHsgY29tcGFjdCB9IGZyb20gJ2xvZGFzaCdcblxuaW1wb3J0ICogYXMgYXBpIGZyb20gJy4vYXBpJ1xuXG5leHBvcnQgZnVuY3Rpb24gbG9hZEtleWNvZGVzICgpIHtcbiAgcmV0dXJuIGFwaS5sb2FkS2V5Y29kZXMoKS50aGVuKG5vcm1hbGl6ZVpta0tleWNvZGVzKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gbG9hZEtleWNvZGVHbHlwaHMgKCkge1xuICByZXR1cm4gYXBpLmxvYWRLZXljb2RlR2x5cGhzKClcbn1cblxuZnVuY3Rpb24gc2hvcnRlc3RBbGlhcyAoYWxpYXNlcykge1xuICByZXR1cm4gWy4uLmFsaWFzZXNdXG4gICAgLnNvcnQoKGEsIGIpID0+IGEubGVuZ3RoIC0gYi5sZW5ndGgpWzBdXG59XG5cbmNvbnN0IGZuUGF0dGVybiA9IC9eKC4rPylcXCgoY29kZSlcXCkkL1xuXG5mdW5jdGlvbiBub3JtYWxpemVabWtLZXljb2RlcyAoa2V5Y29kZXMpIHtcbiAgcmV0dXJuIGtleWNvZGVzLnJlZHVjZSgoa2V5Y29kZXMsIGtleWNvZGUpID0+IHtcbiAgICBjb25zdCB7IGRlc2NyaXB0aW9uLCBjb250ZXh0LCBzeW1ib2wsIGZhSWNvbiB9ID0ga2V5Y29kZVxuICAgIGNvbnN0IGFsaWFzZXMgPSBrZXljb2RlLm5hbWVzLmZpbHRlcihuYW1lID0+ICFuYW1lLm1hdGNoKGZuUGF0dGVybikpXG4gICAgY29uc3QgbmFtZSA9IHNob3J0ZXN0QWxpYXMoYWxpYXNlcylcbiAgICBjb25zdCBmbkNvZGUgPSBrZXljb2RlLm5hbWVzLm1hcChuYW1lID0+IG5hbWUubWF0Y2goZm5QYXR0ZXJuKSkuZmlsdGVyKHYgPT4gISF2KVswXVxuICAgIGNvbnN0IGJhc2UgPSB7XG4gICAgICBuYW1lLFxuICAgICAgYWxpYXNlcyxcbiAgICAgIGRlc2NyaXB0aW9uLFxuICAgICAgY29udGV4dCxcbiAgICAgIGZhSWNvbixcbiAgICAgIHN5bWJvbDogc3ltYm9sIHx8IG5hbWUsXG4gICAgICBwYXJhbXM6IFtdXG4gICAgfVxuXG4gICAgZm9yIChjb25zdCBjb2RlIG9mIGFsaWFzZXMpIHtcbiAgICAgIGtleWNvZGVzLnB1c2goT2JqZWN0LmFzc2lnbih7fSwgYmFzZSwge1xuICAgICAgICBjb2RlLFxuICAgICAgICBpc01vZGlmaWVyOiAhIWZuQ29kZVxuICAgICAgfSkpXG4gICAgfVxuXG4gICAgaWYgKGZuQ29kZSkge1xuICAgICAga2V5Y29kZXMucHVzaChPYmplY3QuYXNzaWduKHt9LCBiYXNlLCB7XG4gICAgICAgIGNvZGU6IGZuQ29kZVsxXSxcbiAgICAgICAgcGFyYW1zOiBmbkNvZGVbMl0uc3BsaXQoJywnKVxuICAgICAgfSkpXG4gICAgfVxuXG4gICAgcmV0dXJuIGtleWNvZGVzXG4gIH0sIFtdKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0TWVyZ2VkR2x5cGhzIChnbHlwaHMsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIGNvbXBhY3QoW1xuICAgIGdseXBocy5iYXNpYyxcbiAgICBvcHRpb25zLnVuaWNvZGUgJiYgZ2x5cGhzLnVuaWNvZGUsXG4gICAgb3B0aW9ucy5wbGF0Zm9ybSA9PT0gJ21hYycgJiYgZ2x5cGhzLnBsYXRmb3Jtcy5tYWMsXG4gICAgb3B0aW9ucy5wbGF0Zm9ybSA9PT0gJ3dpbicgJiYgZ2x5cGhzLnBsYXRmb3Jtcy53aW5cbiAgXSkucmVkdWNlKChnbHlwaHMsIGNvbGxlY3Rpb24pID0+IHtcbiAgICBmb3IgKGNvbnN0IG92ZXJsYXkgb2YgY29sbGVjdGlvbikge1xuICAgICAgY29uc3QgYWxpYXNlcyA9IG92ZXJsYXkubmFtZXMuZmlsdGVyKG5hbWUgPT4gIW5hbWUubWF0Y2goZm5QYXR0ZXJuKSlcbiAgICAgIGNvbnN0IG5hbWUgPSBzaG9ydGVzdEFsaWFzKGFsaWFzZXMpXG5cbiAgICAgIGlmICghZ2x5cGhzW25hbWVdKSB7XG4gICAgICAgIGdseXBoc1tuYW1lXSA9IHt9XG4gICAgICB9XG5cbiAgICAgIGdseXBoc1tuYW1lXS5zeW1ib2wgPSBnbHlwaHNbbmFtZV0uc3ltYm9sIHx8IG92ZXJsYXkuc3ltYm9sXG4gICAgICBnbHlwaHNbbmFtZV0uZmFJY29uID0gZ2x5cGhzW25hbWVdLmZhSWNvbiB8fCBvdmVybGF5LmZhSWNvblxuICAgIH1cbiAgICByZXR1cm4gZ2x5cGhzXG4gIH0sIHt9KVxufVxuIiwiaW1wb3J0IGNsb25lRGVlcCBmcm9tICdsb2Rhc2gvY2xvbmVEZWVwJ1xuaW1wb3J0IGZpbHRlciBmcm9tICdsb2Rhc2gvZmlsdGVyJ1xuaW1wb3J0IGtleUJ5IGZyb20gJ2xvZGFzaC9rZXlCeSdcbmltcG9ydCB7IGNyZWF0ZUNvbnRleHQsIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgdXNlRGlzcGF0Y2gsIHVzZVNlbGVjdG9yIH0gZnJvbSAncmVhY3QtcmVkdXgnXG5cbi8vIFRPRE86IHByb2JhYmx5IGltcG9ydCB0aGVzZSBkaXJlY3RseSBmcm9tIHptay1kYXRhP1xuaW1wb3J0IHsgbG9hZEJlaGF2aW91ckJpbmRpbmdzIH0gZnJvbSAnLi4vYXBpJ1xuaW1wb3J0IHsgbG9hZEtleWNvZGVHbHlwaHMsIGxvYWRLZXljb2RlcyB9IGZyb20gJy4uL2tleWNvZGVzJ1xuXG5leHBvcnQgY29uc3QgRGVmaW5pdGlvbnNDb250ZXh0ID0gY3JlYXRlQ29udGV4dCh7XG4gIGtleWNvZGVzOiBbXSxcbiAgYmVoYXZpb3VyczogW10sXG4gIGJlaGF2aW9yczoge30sXG4gIGJlaGF2aW9yQmluZHM6IFtdLFxuICBnbHlwaHM6IFtdXG59KVxuXG4vLyBUT0RPOiBJIGJldCB0aGlzIGRvZXNuJ3QgbmVlZCB0byBiZSBpbiB0aGUgYXBwIHN0YXRlIGF0IGFsbFxuY29uc3Qgc2VsZWN0RGVmaW5pdGlvbnMgPSBzdGF0ZSA9PiBzdGF0ZS5kZWZpbml0aW9uc1xuXG5leHBvcnQgZnVuY3Rpb24gRGVmaW5pdGlvbnNDb250ZXh0UHJvdmlkZXIgKHsgY2hpbGRyZW4gfSkge1xuICBjb25zdCBkZWZpbml0aW9ucyA9IHVzZVNlbGVjdG9yKHNlbGVjdERlZmluaXRpb25zKVxuICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKClcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIChhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoZGVmaW5pdGlvbnMgIT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IFtrZXljb2RlcywgYmVoYXZpb3JzLCBnbHlwaHNdID0gYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgICAgICBsb2FkS2V5Y29kZXMoKSxcbiAgICAgICAgbG9hZEJlaGF2aW91ckJpbmRpbmdzKCksXG4gICAgICAgIGxvYWRLZXljb2RlR2x5cGhzKClcbiAgICAgIF0pXG5cbiAgICAgIC8vIFRPRE86IHVwZGF0ZSByZWZlcmVuY2VzIHRvIGJldHRlciB1bmRlcnN0YW5kIHRoZSBkaWZmZXJlbmNlIGJldHdlZW5cbiAgICAgIC8vIFwiYmVoYXZpb3JzXCIgKGUuZy4gaG9sZCB0YXApIGFuZCB0aGUgXCJiZWhhdmlvciBiaW5kaW5nc1wiIHRoYXQgaW1wbGVtZW50XG4gICAgICAvLyB0aGVtIChlLmcuICZsdCBhbmQgJm10KVxuICAgICAgY29uc3Qgc2NoZW1hcyA9IGNsb25lRGVlcChiZWhhdmlvcnMuYmVoYXZpb3JzKVxuICAgICAgY29uc3QgYmVoYXZpb3VycyA9IGNsb25lRGVlcChiZWhhdmlvcnMuYmluZGluZ3MpXG5cbiAgICAgIGtleWNvZGVzLmluZGV4ZWQgPSBrZXlCeShrZXljb2RlcywgJ2NvZGUnKVxuICAgICAgYmVoYXZpb3Vycy5pbmRleGVkID0ga2V5QnkoYmVoYXZpb3VycywgJ2NvZGUnKVxuICAgICAgYmVoYXZpb3Vycy5jb250ZXh0ID0ge1xuICAgICAgICBub25lOiBiZWhhdmlvdXJzLmZpbHRlcigoeyBjb250ZXh0IH0pID0+ICFjb250ZXh0KSxcbiAgICAgICAgbWFjcm9zOiBmaWx0ZXIoYmVoYXZpb3VycywgeyBjb250ZXh0OiAnbWFjcm9zJyB9KVxuICAgICAgfVxuICAgICAgYmVoYXZpb3Vycy5ieUNvbnRleHQgPSB7XG4gICAgICAgIG5vbmU6IGtleUJ5KGJlaGF2aW91cnMuY29udGV4dC5ub25lLCAnY29kZScpLFxuICAgICAgICBtYWNyb3M6IGtleUJ5KGJlaGF2aW91cnMuY29udGV4dC5tYWNyb3MsICdjb2RlJylcbiAgICAgIH1cblxuICAgICAgZGlzcGF0Y2goe1xuICAgICAgICB0eXBlOiAnREVGSU5JVElPTlNfU0VUJyxcbiAgICAgICAgZGVmaW5pdGlvbnM6IHtcbiAgICAgICAgICBrZXljb2RlcyxcbiAgICAgICAgICBiZWhhdmlvdXJzLFxuICAgICAgICAgIGJlaGF2aW9yczogc2NoZW1hcyxcbiAgICAgICAgICBiZWhhdmlvckJpbmRzOiBiZWhhdmlvdXJzLFxuICAgICAgICAgIGdseXBoc1xuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0pKClcbiAgfSwgW2RlZmluaXRpb25zLCBkaXNwYXRjaF0pXG5cbiAgLy8gVE9ETzogc2hvdyBhIHNwaW5uZXIgTUFZQkVcbiAgaWYgKCFkZWZpbml0aW9ucykge1xuICAgIHJldHVyblxuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8RGVmaW5pdGlvbnNDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXtkZWZpbml0aW9uc30+XG4gICAgICB7Y2hpbGRyZW59XG4gICAgPC9EZWZpbml0aW9uc0NvbnRleHQuUHJvdmlkZXI+XG4gIClcbn1cbiIsImltcG9ydCBmaWx0ZXIgZnJvbSAnbG9kYXNoL2ZpbHRlcidcbmltcG9ydCBnZXQgZnJvbSAnbG9kYXNoL2dldCdcbmltcG9ydCBpc0VtcHR5IGZyb20gJ2xvZGFzaC9pc0VtcHR5J1xuaW1wb3J0IGtleUJ5IGZyb20gJ2xvZGFzaC9rZXlCeSdcbmltcG9ydCBtYXAgZnJvbSAnbG9kYXNoL21hcCdcbmltcG9ydCB7IHVzZUNvbnRleHQsIHVzZU1lbW8gfSBmcm9tICdyZWFjdCdcblxuaW1wb3J0IHsgRGVmaW5pdGlvbnNDb250ZXh0IH0gZnJvbSAnLi4vQ29udGV4dHMvRGVmaW5pdGlvbnMnXG5pbXBvcnQgeyBTZWFyY2hDb250ZXh0LCBTZXR0aW5nc0NvbnRleHQgfSBmcm9tICcuLi9wcm92aWRlcnMnXG5pbXBvcnQgeyBnZXRNZXJnZWRHbHlwaHMgfSBmcm9tICcuLi9rZXljb2RlcydcblxuZnVuY3Rpb24gQ29udGV4dCAoeyBjaGlsZHJlbiwgLi4ucHJvcHMgfSkge1xuICBjb25zdCB7IGtleW1hcCB9ID0gcHJvcHNcbiAgY29uc3QgeyBrZXljb2RlcywgYmVoYXZpb3VycywgZ2x5cGhzIH0gPSB1c2VDb250ZXh0KERlZmluaXRpb25zQ29udGV4dClcbiAgY29uc3QgeyBzZXR0aW5ncyB9ID0gdXNlQ29udGV4dChTZXR0aW5nc0NvbnRleHQpXG5cbiAgY29uc3QgbWVyZ2VkR2x5cGhzID0gdXNlTWVtbygoKSA9PiB7XG4gICAgY29uc3QgaXNNYWMgPSB3aW5kb3cubmF2aWdhdG9yLnBsYXRmb3JtLnN0YXJ0c1dpdGgoJ01hYycpXG4gICAgY29uc3QgaXNXaW4gPSB3aW5kb3cubmF2aWdhdG9yLnBsYXRmb3JtLnN0YXJ0c1dpdGgoJ1dpbicpXG4gICAgY29uc3QgcGxhdGZvcm0gPSAoaXNNYWMgJiYgJ21hYycpIHx8IChpc1dpbiAmJiAnd2luJylcblxuICAgIHJldHVybiBnZXRNZXJnZWRHbHlwaHMoZ2x5cGhzLCB7XG4gICAgICB1bmljb2RlOiBnZXQoc2V0dGluZ3MsICd1bmljb2RlR2x5cGhzJywgdHJ1ZSksXG4gICAgICBwbGF0Zm9ybTogZ2V0KHNldHRpbmdzLCAncGxhdGZvcm1HbHlwaHMnLCAnYXV0bycpICE9PSAnYXV0bydcbiAgICAgICAgPyBzZXR0aW5ncy5wbGF0Zm9ybUdseXBoc1xuICAgICAgICA6IHBsYXRmb3JtXG4gICAgfSlcbiAgfSwgW2dseXBocywgc2V0dGluZ3NdKVxuXG4gIGNvbnN0IGV4dGVuZGVkQmVoYXZpb3VycyA9IHVzZU1lbW8oKCkgPT4ge1xuICAgIGNvbnN0IGZ1bGxMaXN0ID0gW1xuICAgICAgLi4uYmVoYXZpb3VycyxcbiAgICAgIC4uLihrZXltYXAuYmVoYXZpb3JzIHx8IFtdKS5tYXAoYmVoYXZpb3IgPT4gKHtcbiAgICAgICAgY29kZTogYCYke2JlaGF2aW9yLmxhYmVsc1swXX1gLFxuICAgICAgICBiaW5kOiBgJiR7YmVoYXZpb3IubGFiZWxzWzBdfWAsXG4gICAgICAgIG5hbWU6IGJlaGF2aW9yLm5hbWUsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgQ3VzdG9tIGJlaGF2aW9yOiBcIiR7YmVoYXZpb3IucHJvcGVydGllcy5sYWJlbC5yYXcgfHwgYmVoYXZpb3IubmFtZX1cImAsXG4gICAgICAgIHBhcmFtczogYmVoYXZpb3IucGFyYW1zXG4gICAgICB9KSksXG4gICAgICAuLi5rZXltYXAubWFjcm9zLm1hcChtYWNybyA9PiAoe1xuICAgICAgICBjb2RlOiBgJiR7bWFjcm8uaWRlbnRpZmllcn1gLFxuICAgICAgICBuYW1lOiBtYWNyby5pZGVudGlmaWVyLFxuICAgICAgICBkZXNjcmlwdGlvbjogJ0N1c3RvbSBtYWNybycsXG4gICAgICAgIHBhcmFtczogW11cbiAgICAgIH0pKVxuICAgIF1cblxuICAgIC8vIFRPRE86IGF0IHRoaXMgcG9pbnQgd2UncmUganVzdCBkdXBsaWNhdGluZyB3b3JrIHRoYXQgd2FzIGRvbmUgYXQgYSBoaWdoZXJcbiAgICAvLyBsZXZlbC4gSXQgc3RpbGwgbmVlZHMgdG8gaGFwcGVuIGhlcmUgYmVjYXVzZSBvZiB0aGUgZXh0ZW5kZWQgbGlzdCBvZlxuICAgIC8vIGtleWJvYXJkLXNwZWNpZmljIGJlaGF2aW91cnMsIHNvIHRoZSBBcHAgY2FuIGp1c3QgcGFzcyB0aGUgbGlzdCB3aXRob3V0XG4gICAgLy8gZG9pbmcgaXRzIG93biBpbmRleGluZy5cbiAgICBmdWxsTGlzdC5pbmRleGVkID0ga2V5QnkoZnVsbExpc3QsICdjb2RlJylcbiAgICBmdWxsTGlzdC5jb250ZXh0ID0ge1xuICAgICAgbm9uZTogZnVsbExpc3QuZmlsdGVyKCh7IGNvbnRleHQgfSkgPT4gIWNvbnRleHQpLFxuICAgICAgbWFjcm9zOiBmaWx0ZXIoZnVsbExpc3QsIHsgY29udGV4dDogJ21hY3JvcycgfSlcbiAgICB9XG4gICAgZnVsbExpc3QuYnlDb250ZXh0ID0ge1xuICAgICAgbm9uZToga2V5QnkoZnVsbExpc3QuY29udGV4dC5ub25lLCAnY29kZScpLFxuICAgICAgbWFjcm9zOiBrZXlCeShmdWxsTGlzdC5jb250ZXh0Lm1hY3JvcywgJ2NvZGUnKVxuICAgIH1cblxuICAgIHJldHVybiBmdWxsTGlzdFxuICB9LCBbYmVoYXZpb3Vycywga2V5bWFwLmJlaGF2aW9ycywga2V5bWFwLm1hY3Jvc10pXG5cbiAgY29uc3QgYXZhaWxhYmxlTGF5ZXJzID0gdXNlTWVtbygoKSA9PiBpc0VtcHR5KGtleW1hcClcbiAgICA/IFtdXG4gICAgOiAoXG4gICAgICAgIGtleW1hcC5sYXllcnMubWFwKChsYXllciwgaSkgPT4gKHtcbiAgICAgICAgICBjb2RlOiBpLFxuICAgICAgICAgIGRlc2NyaXB0aW9uOiBsYXllci5uYW1lIHx8IGBMYXllciAke2l9YFxuICAgICAgICB9KSlcbiAgICAgICksIFtrZXltYXBdKVxuXG4gIC8vIEV4dGVuZCBaTUsgZGVmaW5pdGlvbnMgKGtleWNvZGVzIGFuZCBiZWhhdmlvdXJzKSB3aXRoIGFkZGl0aW9uYWxcbiAgLy8gZGVmaW5pdGlvbnMgc3BlY2lmaWMgdG8gdGhpcyBrZXlib2FyZC4gVGhpcyBpbmNsdWRlcyBhIGxpc3Qgb2YgbGF5ZXJzIGZvclxuICAvLyBsYXllci1yZWxhdGVkIGJlaGF2aW91cnMgYW5kIGluIHRoZSBmdXR1cmUgY2FuIGluY2x1ZGUgY3VzdG9tIGJlaGF2aW91cnNcbiAgLy8gZGVmaW5lZCBpbiB0aGUga2V5bWFwIGFuZCBwb3RlbnRpYWxseSBwcmVwcm9jZXNzb3IgZGVmaW5pdGlvbnMgZm9yIHBzdWVkb1xuICAvLyBsYXllciBuYW1lcyBvciBhbGlhc2VkIGtleSBjb2Rlcy5cbiAgY29uc3Qgc291cmNlcyA9IHVzZU1lbW8oKCkgPT4gKHtcbiAgICBjb2RlOiBrZXljb2Rlcy5pbmRleGVkLFxuICAgIGJlaGF2aW91cnM6IGV4dGVuZGVkQmVoYXZpb3Vycy5pbmRleGVkLFxuICAgIGJlaGF2aW91cnNCeUNvbnRleHQ6IGV4dGVuZGVkQmVoYXZpb3Vycy5ieUNvbnRleHQsXG4gICAgbGF5ZXI6IGtleUJ5KGF2YWlsYWJsZUxheWVycywgJ2NvZGUnKVxuICB9KSwgW2tleWNvZGVzLCBleHRlbmRlZEJlaGF2aW91cnMsIGF2YWlsYWJsZUxheWVyc10pXG5cbiAgY29uc3Qgc2VhcmNoVGFyZ2V0cyA9IHVzZU1lbW8oKCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICBiZWhhdmlvdXI6IGV4dGVuZGVkQmVoYXZpb3VycyxcbiAgICAgIGNvZGU6IGtleWNvZGVzXG4gICAgfVxuICB9LCBbZXh0ZW5kZWRCZWhhdmlvdXJzLCBrZXljb2Rlc10pXG5cbiAgY29uc3QgZ2V0U2VhcmNoVGFyZ2V0cyA9IHVzZU1lbW8oKCkgPT4gZnVuY3Rpb24gKHBhcmFtLCBiZWhhdmlvdXIsIGNvbnRleHQgPSAnbm9uZScpIHtcbiAgICAvLyBTcGVjaWFsIGNhc2UgZm9yIGJlaGF2aW91ciBjb21tYW5kcyB3aGljaCBjYW4gZHluYW1pY2FsbHkgYWRkIGFub3RoZXJcbiAgICAvLyBwYXJhbWV0ZXIgdGhhdCBpc24ndCBkZWZpbmVkIGF0IHRoZSByb290IGxldmVsIG9mIHRoZSBiZWhhdmlvdXIuXG4gICAgLy8gQ3VycmVudGx5IHRoaXMgaXMganVzdCBgJmJ0IEJUX1NFTGAgYW5kIGlzIG9ubHkgcmVwcmVzZW50ZWQgYXMgYW4gZW51bS5cbiAgICBpZiAocGFyYW0uZW51bSkge1xuICAgICAgcmV0dXJuIHBhcmFtLmVudW0ubWFwKHYgPT4gKHsgY29kZTogdiB9KSlcbiAgICB9XG5cbiAgICBpZiAocGFyYW0ucmF3KSB7XG4gICAgICByZXR1cm4gW11cbiAgICB9XG5cbiAgICBpZiAocGFyYW0gPT09ICdjb21tYW5kJykge1xuICAgICAgcmV0dXJuIGdldChzb3VyY2VzLmJlaGF2aW91cnNCeUNvbnRleHQsIFtjb250ZXh0LCBiZWhhdmlvdXIsICdjb21tYW5kcyddLCBbXSlcbiAgICB9XG5cbiAgICBpZiAoIXNlYXJjaFRhcmdldHNbcGFyYW1dKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdjYW5ub3QgZmluZCB0YXJnZXQgZm9yJywgcGFyYW0pXG4gICAgfVxuXG4gICAgaWYgKHBhcmFtID09PSAnYmVoYXZpb3VyJykge1xuICAgICAgcmV0dXJuIHNlYXJjaFRhcmdldHMuYmVoYXZpb3VyLmNvbnRleHRbY29udGV4dF1cbiAgICB9XG5cbiAgICByZXR1cm4gc2VhcmNoVGFyZ2V0c1twYXJhbV1cbiAgfSwgW3NlYXJjaFRhcmdldHMsIHNvdXJjZXNdKVxuXG4gIGNvbnN0IGlkZW50aWZpZXJzID0gdXNlTWVtbygoKSA9PiB7XG4gICAgcmV0dXJuIFtcbiAgICAgIC4uLm1hcChrZXljb2RlcywgJ2NvZGUnKSxcbiAgICAgIC4uLk9iamVjdC5rZXlzKGtleW1hcC5kZWZpbmVzIHx8IHt9KVxuICAgIF1cbiAgfSwgW2tleWNvZGVzLCBrZXltYXAuZGVmaW5lc10pXG5cbiAgcmV0dXJuIChcbiAgICA8U2VhcmNoQ29udGV4dC5Qcm92aWRlciB2YWx1ZT17eyBnZXRTZWFyY2hUYXJnZXRzLCBtZXJnZWRHbHlwaHMsIHNvdXJjZXMsIGlkZW50aWZpZXJzIH19PlxuICAgICAge2NoaWxkcmVufVxuICAgIDwvU2VhcmNoQ29udGV4dC5Qcm92aWRlcj5cbiAgKVxufVxuXG5leHBvcnQgZGVmYXVsdCBDb250ZXh0XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzJdLnVzZVsxXSEuL2FjdGlvbi1idXR0b24ubW9kdWxlLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzJdLnVzZVsxXSEuL2FjdGlvbi1idXR0b24ubW9kdWxlLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCBzdHlsZXMgZnJvbSAnLi9hY3Rpb24tYnV0dG9uLm1vZHVsZS5jc3MnXG5cbmZ1bmN0aW9uIEFjdGlvbkJ1dHRvbiAoeyBjaGlsZHJlbiwgc2Vjb25kYXJ5LCBjbGFzc05hbWUsIC4uLnByb3BzIH0pIHtcbiAgcmV0dXJuIChcbiAgICA8YnV0dG9uXG4gICAgICBjbGFzc05hbWU9e1tcbiAgICAgICAgY2xhc3NOYW1lLFxuICAgICAgICBzdHlsZXMuYWN0aW9uLFxuICAgICAgICBzZWNvbmRhcnkgJiYgc3R5bGVzLnNlY29uZGFyeVxuICAgICAgXS5qb2luKCcgJyl9XG4gICAgICB7Li4ucHJvcHN9XG4gICAgPlxuICAgICAge2NoaWxkcmVufVxuICAgIDwvYnV0dG9uPlxuICApXG59XG5cbkFjdGlvbkJ1dHRvbi5kZWZhdWx0UHJvcHMgPSB7XG4gIGNsYXNzTmFtZTogJydcbn1cblxuZXhwb3J0IGRlZmF1bHQgQWN0aW9uQnV0dG9uXG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzJdLnVzZVsxXSEuL2RpYWxvZy1ib3gubW9kdWxlLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzJdLnVzZVsxXSEuL2RpYWxvZy1ib3gubW9kdWxlLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCBzdHlsZXMgZnJvbSAnLi9kaWFsb2ctYm94Lm1vZHVsZS5jc3MnXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIERpYWxvZ0JveCAocHJvcHMpIHtcbiAgY29uc3QgeyBkaXNtaXNzVGV4dCA9ICdPaycsIGNsYXNzZXMgPSBbXSwgb25EaXNtaXNzLCBjaGlsZHJlbiwgLi4ucmVzdCB9ID0gcHJvcHNcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPXtbc3R5bGVzLmRpYWxvZywgLi4uY2xhc3Nlc10uam9pbignICcpfSB7Li4ucmVzdH0+XG4gICAgICB7Y2hpbGRyZW59XG4gICAgICB7ZGlzbWlzc1RleHQgJiYgKFxuICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT17c3R5bGVzLmJ1dHRvbn0gb25DbGljaz17b25EaXNtaXNzfT5cbiAgICAgICAgICB7ZGlzbWlzc1RleHR9XG4gICAgICAgIDwvYnV0dG9uPlxuICAgICAgKX1cbiAgICA8L2Rpdj5cbiAgKVxufVxuIiwiaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSdcbmltcG9ydCB7IHVzZUNhbGxiYWNrLCB1c2VSZWYgfSBmcm9tICdyZWFjdCdcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcydcblxuY29uc3Qgc3R5bGVzID0ge1xuICB3cmFwcGVyOiB7XG4gICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgdG9wOiAnMCcsXG4gICAgbGVmdDogJzAnLFxuICAgIHdpZHRoOiAnMTAwdncnLFxuICAgIGhlaWdodDogJzEwMHZoJyxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICdyZ2JhKDEwNCwgMTIzLCAxNjIsIDAuMzkpJyxcbiAgICBiYWNrZHJvcEZpbHRlcjogJ2JsdXIoMXB4KScsXG4gICAgekluZGV4OiAnNTAnLFxuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gICAgYWxpZ25JdGVtczogJ2NlbnRlcidcbiAgfSxcbiAgY2VudGVyT25seToge1xuICAgIGJhY2tncm91bmQ6ICd0cmFuc3BhcmVudCcsXG4gICAgcG9pbnRlckV2ZW50czogJ25vbmUnXG4gIH0sXG4gIGNvbnRlbnQ6IHtcbiAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgIHBvaW50ZXJFdmVudHM6ICdhbGwnXG4gIH1cbn1cblxuZnVuY3Rpb24gTW9kYWwgKHsgb25EaXNtaXNzLCBjZW50ZXJPbmx5ID0gZmFsc2UsIGNoaWxkcmVuIH0pIHtcbiAgY29uc3QgY29udGVudCA9IHVzZVJlZigpXG4gIGNvbnN0IGhhbmRsZUNsaWNrID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gKGUpIHtcbiAgICBpZiAob25EaXNtaXNzICYmIGNvbnRlbnQuY3VycmVudCAmJiBlLnRhcmdldC5jb250YWlucyhjb250ZW50LmN1cnJlbnQpKSB7XG4gICAgICBvbkRpc21pc3MoKVxuICAgIH1cbiAgfSwgW2NvbnRlbnQsIG9uRGlzbWlzc10pXG5cbiAgY29uc3Qgc3R5bGUgPSBjZW50ZXJPbmx5XG4gICAgPyB7IC4uLnN0eWxlcy53cmFwcGVyLCAuLi5zdHlsZXMuY2VudGVyT25seSB9XG4gICAgOiBzdHlsZXMud3JhcHBlclxuXG4gIHJldHVybiBSZWFjdERPTS5jcmVhdGVQb3J0YWwoXG4gICAgPGRpdiBvbkNsaWNrPXtoYW5kbGVDbGlja30gc3R5bGU9e3N0eWxlfT5cbiAgICAgIDxkaXYgcmVmPXtjb250ZW50fSBzdHlsZT17c3R5bGVzLmNvbnRlbnR9PlxuICAgICAgICB7Y2hpbGRyZW59XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj4sXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21vZGFsLXJvb3QnKVxuICApXG59XG5cbk1vZGFsLnByb3BUeXBlcyA9IHtcbiAgb25EaXNtaXNzOiBQcm9wVHlwZXMuZnVuY1xufVxuXG5leHBvcnQgZGVmYXVsdCBNb2RhbFxuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1syXS51c2VbMV0hLi9zdHlsZXMubW9kdWxlLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzJdLnVzZVsxXSEuL3N0eWxlcy5tb2R1bGUuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IHN0eWxlcyBmcm9tICcuL3N0eWxlcy5tb2R1bGUuY3NzJ1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBQcm9wZXJ0eU5hbWUgKHsgcHJvcGVydHksIHNjaGVtYSB9KSB7XG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIDxzcGFuIGNsYXNzTmFtZT17c3R5bGVzLnByb3BlcnR5TmFtZX0gdGl0bGU9e3Byb3BlcnR5fT5cbiAgICAgICAge3Byb3BlcnR5fVxuICAgICAgPC9zcGFuPlxuICAgICAge3NjaGVtYS5kZXByZWNhdGVkQnkgJiYgKFxuICAgICAgICA8c3ViIGNsYXNzTmFtZT17c3R5bGVzLnByb3BlcnR5RGVwcmVjYXRpb259PlxuICAgICAgICAgIChkZXByZWNhdGVkKVxuICAgICAgICA8L3N1Yj5cbiAgICAgICl9XG4gICAgPC8+XG4gIClcbn1cbiIsImltcG9ydCBtYXAgZnJvbSAnbG9kYXNoL21hcCdcblxuY29uc3QgREVGQVVMVF9TSVpFID0gNjVcbmNvbnN0IERFRkFVTFRfUEFERElORyA9IDVcblxuZXhwb3J0IGZ1bmN0aW9uIGdldENvbXB1dGVkUGFyYW1zIChwb3NpdGlvbiwgc2l6ZSwgcm90YXRpb24gPSB7fSkge1xuICByZXR1cm4ge1xuICAgIHg6IHBvc2l0aW9uLnggKiAoREVGQVVMVF9TSVpFICsgREVGQVVMVF9QQURESU5HKSxcbiAgICB5OiBwb3NpdGlvbi55ICogKERFRkFVTFRfU0laRSArIERFRkFVTFRfUEFERElORyksXG4gICAgdTogc2l6ZS51ICogREVGQVVMVF9TSVpFICsgREVGQVVMVF9QQURESU5HICogKHNpemUudSAtIDEpLFxuICAgIGg6IHNpemUuaCAqIERFRkFVTFRfU0laRSArIERFRkFVTFRfUEFERElORyAqIChzaXplLmggLSAxKSxcbiAgICByeDogKHBvc2l0aW9uLnggLSAocm90YXRpb24ueCB8fCBwb3NpdGlvbi54KSkgKiAtKERFRkFVTFRfU0laRSArIERFRkFVTFRfUEFERElORyksXG4gICAgcnk6IChwb3NpdGlvbi55IC0gKHJvdGF0aW9uLnkgfHwgcG9zaXRpb24ueSkpICogLShERUZBVUxUX1NJWkUgKyBERUZBVUxUX1BBRERJTkcpLFxuICAgIGE6IHJvdGF0aW9uLmEgfHwgMFxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRLZXlTdHlsZXMgKHBvc2l0aW9uLCBzaXplLCByb3RhdGlvbikge1xuICBjb25zdCB7IHgsIHksIHUsIGgsIGEsIHJ4LCByeSB9ID0gZ2V0Q29tcHV0ZWRQYXJhbXMocG9zaXRpb24sIHNpemUsIHJvdGF0aW9uKVxuXG4gIHJldHVybiB7XG4gICAgdG9wOiBgJHt5fXB4YCxcbiAgICBsZWZ0OiBgJHt4fXB4YCxcbiAgICB3aWR0aDogYCR7dX1weGAsXG4gICAgaGVpZ2h0OiBgJHtofXB4YCxcbiAgICB0cmFuc2Zvcm1PcmlnaW46IGAke3J4fXB4ICR7cnl9cHhgLFxuICAgIHRyYW5zZm9ybTogYHJvdGF0ZSgke2EgfHwgMH1kZWcpYFxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2Zvcm1LZXlQb2x5Z29uIChwb3NpdGlvbiwgc2l6ZSwgcm90YXRpb24pIHtcbiAgY29uc3QgeyB4LCB5LCB1LCBoLCBhLCByeCwgcnkgfSA9IGdldENvbXB1dGVkUGFyYW1zKHBvc2l0aW9uLCBzaXplLCByb3RhdGlvbilcblxuICBjb25zdCBwb2ludHMgPSBbXG4gICAgeyB4OiAwLCB5OiAwIH0sXG4gICAgeyB4OiB1LCB5OiAwIH0sXG4gICAgeyB4OiB1LCB5OiBoIH0sXG4gICAgeyB4OiAwLCB5OiBoIH1cbiAgXVxuXG4gIGZ1bmN0aW9uIHRyYW5zbGF0ZSAocG9pbnQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgeDogcG9pbnQueCArIHgsXG4gICAgICB5OiBwb2ludC55ICsgeVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJvdGF0ZSAocG9pbnQpIHtcbiAgICBjb25zdCB4ID0gcG9pbnQueCAtIHJ4XG4gICAgY29uc3QgeSA9IHBvaW50LnkgLSByeVxuICAgIGNvbnN0IGFuZ2xlID0gTWF0aC5QSSAqIGEgLyAxODBcblxuICAgIHJldHVybiB7XG4gICAgICB4OiByeCArIHggKiBNYXRoLmNvcyhhbmdsZSkgLSB5ICogTWF0aC5zaW4oYW5nbGUpLFxuICAgICAgeTogcnkgKyB5ICogTWF0aC5jb3MoYW5nbGUpICsgeCAqIE1hdGguc2luKGFuZ2xlKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBwb2ludHMubWFwKHJvdGF0ZSkubWFwKHRyYW5zbGF0ZSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEtleUJvdW5kaW5nQm94IChwb3NpdGlvbiwgc2l6ZSwgcm90YXRpb24pIHtcbiAgY29uc3QgdHJhbnNmb3JtZWQgPSB0cmFuc2Zvcm1LZXlQb2x5Z29uKHBvc2l0aW9uLCBzaXplLCByb3RhdGlvbilcbiAgY29uc3QgeFZhbHVlcyA9IG1hcCh0cmFuc2Zvcm1lZCwgJ3gnKVxuICBjb25zdCB5VmFsdWVzID0gbWFwKHRyYW5zZm9ybWVkLCAneScpXG4gIGNvbnN0IG1pbiA9IHtcbiAgICB4OiBNYXRoLm1pbiguLi54VmFsdWVzKSxcbiAgICB5OiBNYXRoLm1pbiguLi55VmFsdWVzKVxuICB9XG4gIGNvbnN0IG1heCA9IHtcbiAgICB4OiBNYXRoLm1heCguLi54VmFsdWVzKSxcbiAgICB5OiBNYXRoLm1heCguLi55VmFsdWVzKVxuICB9XG5cbiAgcmV0dXJuIHsgbWluLCBtYXggfVxufVxuIiwiaW1wb3J0IHsgdHJhbnNmb3JtS2V5UG9seWdvbiwgZ2V0S2V5Qm91bmRpbmdCb3ggfSBmcm9tICcuLi9rZXktdW5pdHMnXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRMYXlvdXRQb2x5Z29ucyAobGF5b3V0LCB7IHNjYWxlID0gMSB9KSB7XG4gIHJldHVybiBsYXlvdXQubWFwKGtleSA9PiB0cmFuc2Zvcm1LZXlQb2x5Z29uKFxuICAgIHsgeDoga2V5LngsIHk6IGtleS55IH0sXG4gICAgeyB1OiBrZXkudSB8fCBrZXkudyB8fCAxLCBoOiBrZXkuaCB8fCAxIH0sXG4gICAgeyB4OiBrZXkucngsIHk6IGtleS5yeSwgYToga2V5LnIgfVxuICApKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0V3JhcHBlckRpbWVuc2lvbnMgKGxheW91dCkge1xuICByZXR1cm4gbGF5b3V0Lm1hcChrZXkgPT4gZ2V0S2V5Qm91bmRpbmdCb3goXG4gICAgeyB4OiBrZXkueCwgeToga2V5LnkgfSxcbiAgICB7IHU6IGtleS51IHx8IGtleS53IHx8IDEsIGg6IGtleS5oIHx8IDEgfSxcbiAgICB7IHg6IGtleS5yeCwgeToga2V5LnJ5LCBhOiBrZXkuciB9XG4gICkpLnJlZHVjZSgoeyB4LCB5IH0sIHsgbWF4IH0pID0+ICh7XG4gICAgeDogTWF0aC5tYXgoeCwgbWF4LngpLFxuICAgIHk6IE1hdGgubWF4KHksIG1heC55KVxuICB9KSwgeyB4OiAwLCB5OiAwIH0pXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRXcmFwcGVyU3R5bGUgKGxheW91dE9yQkJveCwgeyBzY2FsZSA9IDEsIG92ZXJyaWRlcyA9IHt9IH0gPSB7fSkge1xuICBjb25zdCBiYm94ID0gQXJyYXkuaXNBcnJheShsYXlvdXRPckJCb3gpXG4gICAgPyBnZXRXcmFwcGVyRGltZW5zaW9ucyhsYXlvdXRPckJCb3gpXG4gICAgOiBsYXlvdXRPckJCb3hcblxuICByZXR1cm4ge1xuICAgIHdpZHRoOiBgJHtiYm94LnggKiBzY2FsZX1weGAsXG4gICAgaGVpZ2h0OiBgJHtiYm94LnkgKiBzY2FsZX1weGAsXG4gICAgbWFyZ2luOiAnMCBhdXRvJyxcbiAgICBwYWRkaW5nOiAnMCA0MHB4IDQwcHgnLFxuICAgIC4uLm92ZXJyaWRlc1xuICB9XG59XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzJdLnVzZVsxXSEuL3N0eWxlcy5tb2R1bGUuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMl0udXNlWzFdIS4vc3R5bGVzLm1vZHVsZS5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnXG5cbmV4cG9ydCBjb25zdCBwb3NpdGlvbiA9IHtcbiAgeDogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxuICB5OiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWRcbn1cblxuZXhwb3J0IGNvbnN0IHJvdGF0aW9uID0ge1xuICBhOiBQcm9wVHlwZXMubnVtYmVyLFxuICByeDogUHJvcFR5cGVzLm51bWJlcixcbiAgcnk6IFByb3BUeXBlcy5udW1iZXJcbn1cblxuZXhwb3J0IGNvbnN0IGRpbWVuc2lvbnMgPSB7XG4gIHU6IFByb3BUeXBlcy5udW1iZXIsXG4gIGg6IFByb3BUeXBlcy5udW1iZXJcbn1cblxuZXhwb3J0IGNvbnN0IGtleUxheW91dCA9IFByb3BUeXBlcy5zaGFwZSh7XG4gIC4uLnBvc2l0aW9uLFxuICAuLi5yb3RhdGlvbixcbiAgLi4uZGltZW5zaW9uc1xufSlcblxuZXhwb3J0IGNvbnN0IGxheW91dCA9IFByb3BUeXBlcy5hcnJheU9mKFxuICBrZXlMYXlvdXRcbilcbiIsImltcG9ydCBwaWNrIGZyb20gJ2xvZGFzaC9waWNrJ1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJ1xuXG5pbXBvcnQgeyBnZXRLZXlTdHlsZXMgfSBmcm9tICcuLi9rZXktdW5pdHMnXG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vc3R5bGVzLm1vZHVsZS5jc3MnXG5pbXBvcnQgKiBhcyBsYXlvdXRQcm9wVHlwZXMgZnJvbSAnLi9sYXlvdXRQcm9wVHlwZXMnXG5cbmNvbnN0IGdldFBvc2l0aW9uID0ga2V5TGF5b3V0ID0+IHBpY2soa2V5TGF5b3V0LCBbJ3gnLCAneSddKVxuY29uc3QgZ2V0Um90YXRpb24gPSBrZXlMYXlvdXQgPT4ge1xuICBjb25zdCB7IHJ4LCByeSwgciB9ID0ga2V5TGF5b3V0XG4gIHJldHVybiB7IHg6IHJ4LCB5OiByeSwgYTogciB9XG59XG5jb25zdCBnZXRTaXplID0ga2V5TGF5b3V0ID0+IHtcbiAgY29uc3QgeyB3ID0gMSwgdSA9IHcsIGggPSAxIH0gPSBrZXlMYXlvdXRcbiAgcmV0dXJuIHsgdSwgaCB9XG59XG5cbmZ1bmN0aW9uIFBsYWNlciAocHJvcHMpIHtcbiAgY29uc3QgeyBrZXlMYXlvdXQsIGNoaWxkcmVuLCAuLi5yZXN0IH0gPSBwcm9wc1xuICBjb25zdCBwb3NpdGlvbiA9IGdldFBvc2l0aW9uKGtleUxheW91dClcbiAgY29uc3Qgcm90YXRpb24gPSBnZXRSb3RhdGlvbihrZXlMYXlvdXQpXG4gIGNvbnN0IHNpemUgPSBnZXRTaXplKGtleUxheW91dClcbiAgY29uc3QgcG9zaXRpb25pbmdTdHlsZSA9IGdldEtleVN0eWxlcyhwb3NpdGlvbiwgc2l6ZSwgcm90YXRpb24pXG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2XG4gICAgICBjbGFzc05hbWU9e3N0eWxlcy5wbGFjZXJ9XG4gICAgICBzdHlsZT17cG9zaXRpb25pbmdTdHlsZX1cbiAgICAgIGRhdGEtdT17c2l6ZS51fVxuICAgICAgZGF0YS1oPXtzaXplLmh9XG4gICAgICB7Li4ucmVzdH1cbiAgICA+XG4gICAgICB7Y2hpbGRyZW59XG4gICAgPC9kaXY+XG4gIClcbn1cblxuUGxhY2VyLnByb3BUeXBlcyA9IHtcbiAgc2NhbGU6IFByb3BUeXBlcy5udW1iZXIsXG4gIGtleUxheW91dDogbGF5b3V0UHJvcFR5cGVzLmtleUxheW91dC5pc1JlcXVpcmVkXG59XG5cblBsYWNlci5kZWZhdWx0UHJvcHMgPSB7XG4gIHNjYWxlOiAxXG59XG5cbmV4cG9ydCBkZWZhdWx0IFBsYWNlclxuIiwiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJ1xuXG5pbXBvcnQgUGxhY2VyIGZyb20gJy4vS2V5UGxhY2VyJ1xuaW1wb3J0ICogYXMgbGF5b3V0UHJvcFR5cGVzIGZyb20gJy4vbGF5b3V0UHJvcFR5cGVzJ1xuXG5mdW5jdGlvbiBLZXlib2FyZExheW91dCAocHJvcHMpIHtcbiAgY29uc3QgeyBsYXlvdXQsIHJlbmRlcktleSwgc2NhbGUgfSA9IHByb3BzXG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IHN0eWxlPXt7XG4gICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgIHRyYW5zZm9ybTogYHNjYWxlKCR7c2NhbGV9KWAsXG4gICAgICB0cmFuc2Zvcm1PcmlnaW46IDBcbiAgICB9fT5cbiAgICAgIHtsYXlvdXQubWFwKChrZXlMYXlvdXQsIGluZGV4KSA9PiAoXG4gICAgICAgIDxQbGFjZXIga2V5PXtpbmRleH0ga2V5TGF5b3V0PXtrZXlMYXlvdXR9PlxuICAgICAgICAgIHtyZW5kZXJLZXkoeyBpbmRleCwga2V5TGF5b3V0IH0pfVxuICAgICAgICA8L1BsYWNlcj5cbiAgICAgICkpfVxuICAgIDwvZGl2PlxuICApXG59XG5cbktleWJvYXJkTGF5b3V0LnByb3BUeXBlcyA9IHtcbiAgbGF5b3V0OiBsYXlvdXRQcm9wVHlwZXMubGF5b3V0LmlzUmVxdWlyZWQsXG4gIHJlbmRlcktleTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgc2NhbGU6IFByb3BUeXBlcy5udW1iZXJcbn1cblxuS2V5Ym9hcmRMYXlvdXQuZGVmYXVsdFByb3BzID0ge1xuICBzY2FsZTogMVxufVxuXG5leHBvcnQgZGVmYXVsdCBLZXlib2FyZExheW91dFxuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1syXS51c2VbMV0hLi9zdHlsZXMubW9kdWxlLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzJdLnVzZVsxXSEuL3N0eWxlcy5tb2R1bGUuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IGNvbXBhY3QgZnJvbSAnbG9kYXNoL2NvbXBhY3QnXG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vc3R5bGVzLm1vZHVsZS5jc3MnXG5cbmZ1bmN0aW9uIEtleVdyYXBwZXIgKHByb3BzKSB7XG4gIGNvbnN0IHtcbiAgICBjaGlsZHJlbixcbiAgICBzZWxlY3RhYmxlID0gdHJ1ZSxcbiAgICB0aGVtZUNsYXNzID0gdW5kZWZpbmVkLFxuICAgIGNsYXNzTmFtZSA9ICcnLFxuICAgIC4uLnJlc3RcbiAgfSA9IHByb3BzXG5cbiAgY29uc3QgY2xhc3NlcyA9IGNvbXBhY3QoW1xuICAgIHN0eWxlcy5rZXksXG4gICAgc2VsZWN0YWJsZSAmJiBzdHlsZXMuc2VsZWN0YWJsZSxcbiAgICB0aGVtZUNsYXNzID8/IHN0eWxlcy5rZXlEZWZhdWx0VGhlbWUsXG4gICAgY2xhc3NOYW1lXG4gIF0pLmpvaW4oJyAnKVxuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9e2NsYXNzZXN9IHsuLi5yZXN0fT5cbiAgICAgIHtjaGlsZHJlbn1cbiAgICA8L2Rpdj5cbiAgKVxufVxuXG5leHBvcnQgZGVmYXVsdCBLZXlXcmFwcGVyXG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzJdLnVzZVsxXSEuL2RyYWdTZWxlY3Rvci5tb2R1bGUuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMl0udXNlWzFdIS4vZHJhZ1NlbGVjdG9yLm1vZHVsZS5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgY2xhbXAgZnJvbSAnbG9kYXNoL2NsYW1wJ1xuaW1wb3J0IGNvbXBhY3QgZnJvbSAnbG9kYXNoL2NvbXBhY3QnXG5pbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlU3RhdGUsIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0J1xuXG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vZHJhZ1NlbGVjdG9yLm1vZHVsZS5jc3MnXG5cbmZ1bmN0aW9uIERyYWdTZWxlY3RDb250YWluZXIgKHByb3BzKSB7XG4gIGNvbnN0IHsgb25Nb3VzZURvd24gfSA9IHByb3BzXG4gIGNvbnN0IHsgc2VsZWN0aW5nLCBuZWdhdGUsIHJlY3QsIHNpemUgfSA9IHByb3BzXG4gIGNvbnN0IHsgY2hpbGRyZW4gfSA9IHByb3BzXG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2XG4gICAgICBvbk1vdXNlRG93bj17b25Nb3VzZURvd259XG4gICAgICBjbGFzc05hbWU9e2NvbXBhY3QoW1xuICAgICAgICBzdHlsZXMuY29udGFpbmVyLFxuICAgICAgICBzZWxlY3RpbmcgJiYgc3R5bGVzLnNlbGVjdGluZ1xuICAgICAgXSkuam9pbignICcpfVxuICAgID5cbiAgICAgIHtjaGlsZHJlbn1cbiAgICAgIHtzZWxlY3RpbmcgJiYgKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17Y29tcGFjdChbXG4gICAgICAgICAgc3R5bGVzLm92ZXJsYXksXG4gICAgICAgICAgbmVnYXRlICYmIHN0eWxlcy5uZWdhdGVcbiAgICAgICAgXSkuam9pbignICcpfSBzdHlsZT17e1xuICAgICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICAgIHRvcDogcmVjdFswXVsxXSArICdweCcsXG4gICAgICAgICAgbGVmdDogcmVjdFswXVswXSArICdweCcsXG4gICAgICAgICAgd2lkdGg6IHNpemVbMF0gKyAncHgnLFxuICAgICAgICAgIGhlaWdodDogc2l6ZVsxXSArICdweCdcbiAgICAgICAgfX0gLz5cbiAgICAgICl9XG4gICAgPC9kaXY+XG4gIClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVzZURyYWdTZWxlY3RvciAoeyBwb2x5Z29ucywgb25TZWxlY3QgfSkge1xuICBjb25zdCBbc3RhdGUsIHNldFN0YXRlXSA9IHVzZVN0YXRlKHt9KVxuXG4gIGNvbnN0IGhhbmRsZU1vdXNlRG93biA9IHVzZUNhbGxiYWNrKGV2ZW50ID0+IHtcbiAgICBjb25zdCBvZmZzZXRFbGVtZW50ID0gZ2V0UmVsYXRpdmVBbmNlc3RvcihldmVudC50YXJnZXQpXG4gICAgY29uc3QgcmVjdCA9IG9mZnNldEVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcbiAgICBjb25zdCB7IGNsaWVudFg6IHgsIGNsaWVudFk6IHkgfSA9IGV2ZW50XG5cbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgc2V0U3RhdGUoe1xuICAgICAgc3RhcnQ6IFt4LCB5XSxcbiAgICAgIGludGVyc2VjdGluZzogW10sXG4gICAgICBvZmZzZXQ6IFtyZWN0LmxlZnQsIHJlY3QudG9wXSxcbiAgICAgIG9mZnNldFJlY3Q6IHJlY3RcbiAgICB9KVxuICB9LCBbc2V0U3RhdGVdKVxuXG4gIGNvbnN0IGhhbmRsZUtleURvd24gPSB1c2VDYWxsYmFjayhldmVudCA9PiB7XG4gICAgaWYgKCFzdGF0ZS5zZWxlY3RpbmcgfHwgZXZlbnQucmVwZWF0IHx8ICFldmVudC5zaGlmdEtleSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgc2V0U3RhdGUoc3RhdGUgPT4gKHsgLi4uc3RhdGUsIG5lZ2F0ZTogdHJ1ZSB9KSlcbiAgfSwgW3N0YXRlLnNlbGVjdGluZywgc2V0U3RhdGVdKVxuXG4gIGNvbnN0IGhhbmRsZUtleVVwID0gdXNlQ2FsbGJhY2soZXZlbnQgPT4ge1xuICAgIGlmICghc3RhdGUubmVnYXRlIHx8IGV2ZW50LnJlcGVhdCB8fCBldmVudC5zaGlmdEtleSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgc2V0U3RhdGUoc3RhdGUgPT4gKHsgLi4uc3RhdGUsIG5lZ2F0ZTogZmFsc2UgfSkpXG4gIH0sIFtzdGF0ZS5uZWdhdGUsIHNldFN0YXRlXSlcblxuICBjb25zdCBoYW5kbGVNb3VzZU1vdmUgPSB1c2VDYWxsYmFjayhldmVudCA9PiB7XG4gICAgY29uc3QgeyBzdGFydCwgb2Zmc2V0LCBvZmZzZXRSZWN0IH0gPSBzdGF0ZVxuICAgIGlmICghc3RhcnQpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IHsgc2hpZnRLZXksIGFsdEtleSwgY2xpZW50WCwgY2xpZW50WSB9ID0gZXZlbnRcbiAgICBjb25zdCBbeDAsIHkwXSA9IHN0YXJ0XG5cbiAgICBjb25zdCB4ID0gY2xhbXAoY2xpZW50WCwgb2Zmc2V0UmVjdC5sZWZ0LCBvZmZzZXRSZWN0LnJpZ2h0KVxuICAgIGNvbnN0IHkgPSBjbGFtcChjbGllbnRZLCBvZmZzZXRSZWN0LnRvcCwgb2Zmc2V0UmVjdC5ib3R0b20pXG5cbiAgICBjb25zdCByZWN0ID0gW1xuICAgICAgW01hdGgubWluKHgsIHgwKSAtIG9mZnNldFswXSwgTWF0aC5taW4oeSwgeTApIC0gb2Zmc2V0WzFdXSxcbiAgICAgIFtNYXRoLm1heCh4LCB4MCkgLSBvZmZzZXRbMF0sIE1hdGgubWF4KHksIHkwKSAtIG9mZnNldFsxXV1cbiAgICBdXG4gICAgY29uc3Qgc2l6ZSA9IFtcbiAgICAgIE1hdGguYWJzKHggLSB4MCksXG4gICAgICBNYXRoLmFicyh5IC0geTApXG4gICAgXVxuXG4gICAgc2V0U3RhdGUoc3RhdGUgPT4gKHtcbiAgICAgIC4uLnN0YXRlLFxuICAgICAgbmVnYXRlOiBzaGlmdEtleSB8fCBhbHRLZXksXG4gICAgICBzZWxlY3Rpbmc6IHNpemVbMF0gPiAzIHx8IHNpemVbMV0gPiAzLFxuICAgICAgaW50ZXJzZWN0aW5nOiBnZXRJbnRlcnNlY3RpbmdQb2x5Z29ucyhyZWN0LCBwb2x5Z29ucyksXG4gICAgICByZWN0LFxuICAgICAgc2l6ZVxuICAgIH0pKVxuICB9LCBbc3RhdGUsIHBvbHlnb25zLCBzZXRTdGF0ZV0pXG5cbiAgY29uc3QgaGFuZGxlTW91c2VVcCA9IHVzZUNhbGxiYWNrKGV2ZW50ID0+IHtcbiAgICBpZiAoc3RhdGUuc3RhcnQpIHtcbiAgICAgIGlmIChzdGF0ZS5zZWxlY3RpbmcpIHtcbiAgICAgICAgb25TZWxlY3Qoe1xuICAgICAgICAgIG5lZ2F0ZTogc3RhdGUubmVnYXRlLFxuICAgICAgICAgIGludGVyc2VjdGluZzogc3RhdGUuaW50ZXJzZWN0aW5nXG4gICAgICAgIH0pXG4gICAgICB9XG5cbiAgICAgIHNldFN0YXRlKHsgc3RhcnQ6IG51bGwsIHNlbGVjdGluZzogZmFsc2UgfSlcbiAgICB9XG4gIH0sIFtvblNlbGVjdCwgc3RhdGUsIHNldFN0YXRlXSlcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgaGFuZGxlTW91c2VVcClcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgaGFuZGxlTW91c2VNb3ZlKVxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgaGFuZGxlS2V5RG93bilcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCBoYW5kbGVLZXlVcClcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBoYW5kbGVNb3VzZVVwKVxuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIGhhbmRsZU1vdXNlTW92ZSlcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgaGFuZGxlS2V5RG93bilcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXl1cCcsIGhhbmRsZUtleVVwKVxuICAgIH1cbiAgfSwgW2hhbmRsZU1vdXNlVXAsIGhhbmRsZU1vdXNlTW92ZSwgaGFuZGxlS2V5RG93biwgaGFuZGxlS2V5VXBdKVxuXG4gIHJldHVybiBbe1xuICAgIC4uLnN0YXRlLFxuICAgIG9uTW91c2VEb3duOiBoYW5kbGVNb3VzZURvd24sXG4gICAgb25Nb3VzZU1vdmU6IGhhbmRsZU1vdXNlTW92ZVxuICB9LCBEcmFnU2VsZWN0Q29udGFpbmVyXVxufVxuXG5mdW5jdGlvbiBnZXRSZWxhdGl2ZUFuY2VzdG9yIChlbGVtZW50KSB7XG4gIC8vIFRoaXMgaXNuJ3QgZ3JlYXQuIEl0ZXJhdGluZyB0aHJvdWdoIGFuY2VzdG9ycyBpcyBub3QgaWRlYWwsIGhhdmluZyB0byBjaGVja1xuICAvLyB0aGUgaGVpZ2h0IG9mIHRoZSBib3VuZGluZyBjbGllbnQgcmVjdCBiZWNhdXNlIEkga25vdyB0aGF0IG9uZSBvZiB0aGVtIGlzXG4gIC8vIG5vdCBnb2luZyB0byBnaXZlIG1lIHRoZSBkZXNpcmVkIHJlc3VsdCBpcyB3b3JzZS4gVGhpcyBpcyBsZXNzIGFwcHJvcHJpYXRlXG4gIC8vIHRoYW4gdXNpbmcgYSByZWYsIGJ1dCBJIGRvbid0IGxpa2UgcGFzc2luZyBpdCBiYWNrIGZyb20gdGhlIGhvb2sgYXMgaXRzXG4gIC8vIFwiY29udGV4dFwiIGluIG9yZGVyIHRvIHBhc3MgaXQgdG8gdGhlIHJlbmRlcmVkIGNvbXBvbmVudC5cbiAgLy8gTW9zdCBsaWtlbHkgdGhpcyB3aG9sZSBjb21wb25lbnQgc2hvdWxkIGJlIGEgd3JhcHBlciBvZiB0aGUgcGxhY2VkIGtleXMgYW5kXG4gIC8vIHVzaW5nIGNsb25lRWxlbWVudCBvciBzb21ldGhpbmcsIEkgZG9uJ3Qga25vdy5cbiAgd2hpbGUgKFxuICAgIChlbGVtZW50ID0gZWxlbWVudC5wYXJlbnROb2RlKSAmJlxuICAgIChlbGVtZW50LnN0eWxlLnBvc2l0aW9uICE9PSAncmVsYXRpdmUnIHx8ICFlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodClcbiAgKTtcblxuICByZXR1cm4gZWxlbWVudFxufVxuXG5mdW5jdGlvbiBnZXRJbnRlcnNlY3RpbmdQb2x5Z29ucyAocmVjdCwgcG9seWdvbnMpIHtcbiAgcmV0dXJuIHBvbHlnb25zLnJlZHVjZSgoYWNjLCBwb2ludHMsIGkpID0+IHtcbiAgICBpZiAocG9pbnRzLnNvbWUoKHsgeCwgeSB9KSA9PiAoXG4gICAgICByZWN0WzBdWzBdIDwgeCAmJiB4IDwgcmVjdFsxXVswXSAmJlxuICAgICAgcmVjdFswXVsxXSA8IHkgJiYgeSA8IHJlY3RbMV1bMV1cbiAgICApKSkge1xuICAgICAgYWNjLnB1c2goaSlcbiAgICB9XG4gICAgcmV0dXJuIGFjY1xuICB9LCBbXSlcbn1cbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMl0udXNlWzFdIS4va2V5UG9zaXRpb25TZWxlY3RvclN0eWxlcy5tb2R1bGUuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMl0udXNlWzFdIS4va2V5UG9zaXRpb25TZWxlY3RvclN0eWxlcy5tb2R1bGUuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1syXS51c2VbMV0hLi90aXAubW9kdWxlLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzJdLnVzZVsxXSEuL3RpcC5tb2R1bGUuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IEljb24gZnJvbSAnLi9JY29uJ1xuaW1wb3J0IHN0eWxlcyBmcm9tICcuL3RpcC5tb2R1bGUuY3NzJ1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBUaXAgKHsgY2hpbGRyZW4sIGNsYXNzTmFtZSA9ICcnIH0pIHtcbiAgY29uc3QgY2xhc3NOYW1lcyA9IFtzdHlsZXMudGlwLCBjbGFzc05hbWVdLmpvaW4oJyAnKVxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPXtjbGFzc05hbWVzfT5cbiAgICAgIDxJY29uIG5hbWU9XCJoYW5kLXBvaW50LXVwXCIgLz4ge2NoaWxkcmVufVxuICAgIDwvZGl2PlxuICApXG59XG4iLCJpbXBvcnQgeyBjcmVhdGVDb250ZXh0LCB1c2VNZW1vIH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBnZXRXcmFwcGVyRGltZW5zaW9ucywgZ2V0V3JhcHBlclN0eWxlIH0gZnJvbSAnLi4vS2V5Ym9hcmQvdXRpbCdcblxuZXhwb3J0IGNvbnN0IExheW91dENvbnRleHQgPSBjcmVhdGVDb250ZXh0KHtcbiAgbGF5b3V0OiBbXSxcbiAgYmluZGluZ0NvdW50OiAwLFxuICB3cmFwcGVyRGltZW5zaW9uczoge30sXG4gIHdyYXBwZXJTdHlsZToge31cbn0pXG5cbmV4cG9ydCBmdW5jdGlvbiBMYXlvdXRDb250ZXh0UHJvdmlkZXIgKHsgbGF5b3V0LCBjaGlsZHJlbiB9KSB7XG4gIGNvbnN0IGJpbmRpbmdDb3VudCA9IHVzZU1lbW8oKCkgPT4gbGF5b3V0Lmxlbmd0aCwgW2xheW91dC5sZW5ndGhdKVxuICBjb25zdCB3cmFwcGVyRGltZW5zaW9ucyA9IHVzZU1lbW8oKCkgPT4gZ2V0V3JhcHBlckRpbWVuc2lvbnMobGF5b3V0KSwgW2xheW91dF0pXG4gIGNvbnN0IHdyYXBwZXJTdHlsZSA9IHVzZU1lbW8oKCkgPT4gZ2V0V3JhcHBlclN0eWxlKHdyYXBwZXJEaW1lbnNpb25zKSwgW3dyYXBwZXJEaW1lbnNpb25zXSlcblxuICBjb25zdCBjb250ZXh0ID0ge1xuICAgIGxheW91dCxcbiAgICBiaW5kaW5nQ291bnQsXG4gICAgd3JhcHBlckRpbWVuc2lvbnMsXG4gICAgd3JhcHBlclN0eWxlXG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxMYXlvdXRDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXtjb250ZXh0fT5cbiAgICAgIHtjaGlsZHJlbn1cbiAgICA8L0xheW91dENvbnRleHQuUHJvdmlkZXI+XG4gIClcbn1cbiIsImltcG9ydCB7IHVzZUNhbGxiYWNrLCB1c2VDb250ZXh0LCB1c2VNZW1vLCB1c2VSZWR1Y2VyIH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnXG5cbmltcG9ydCB7IGdldExheW91dFBvbHlnb25zLCBnZXRXcmFwcGVyU3R5bGUgfSBmcm9tICcuLi91dGlsJ1xuaW1wb3J0IEtleWJvYXJkTGF5b3V0IGZyb20gJy4uL0tleWJvYXJkTGF5b3V0J1xuaW1wb3J0IEtleVdyYXBwZXIgZnJvbSAnLi4vS2V5cy9LZXlXcmFwcGVyJ1xuXG5pbXBvcnQgeyB1c2VEcmFnU2VsZWN0b3IgfSBmcm9tICcuL0RyYWdTZWxlY3RvcidcbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9rZXlQb3NpdGlvblNlbGVjdG9yU3R5bGVzLm1vZHVsZS5jc3MnXG5pbXBvcnQgeyBjb21wYWN0IH0gZnJvbSAnbG9kYXNoJ1xuaW1wb3J0IFRpcCBmcm9tICcuLi8uLi9Db21tb24vVGlwJ1xuaW1wb3J0IHsgTGF5b3V0Q29udGV4dCB9IGZyb20gJy4uLy4uL0NvbnRleHRzL0xheW91dCdcblxuY29uc3QgbGF5b3V0U2NhbGUgPSAwLjJcbmNvbnN0IGdldFBvbHlnb25zID0gbGF5b3V0ID0+IHtcbiAgY29uc3QgcG9seWdvbnMgPSBnZXRMYXlvdXRQb2x5Z29ucyhsYXlvdXQsIHsgc2NhbGU6IGxheW91dFNjYWxlIH0pXG4gIGZvciAoY29uc3QgcG9seWdvbiBvZiBwb2x5Z29ucykge1xuICAgIGZvciAoY29uc3QgcG9pbnQgb2YgcG9seWdvbikge1xuICAgICAgcG9pbnQueCAqPSBsYXlvdXRTY2FsZVxuICAgICAgcG9pbnQueSAqPSBsYXlvdXRTY2FsZVxuICAgIH1cbiAgfVxuICByZXR1cm4gcG9seWdvbnNcbn1cblxuZnVuY3Rpb24gdXNlVXNhZ2VNZXRyaWNzICgpIHtcbiAgY29uc3QgW3N0YXRlLCBkaXNwYXRjaF0gPSB1c2VSZWR1Y2VyKChzdGF0ZSwgYWN0aW9uKSA9PiB7XG4gICAgc3dpdGNoIChhY3Rpb24pIHtcbiAgICAgIGNhc2UgJ0lOQ1JFTUVOVF9NQU5VQUxfU0VMRUNUSU9OJzpcbiAgICAgICAgcmV0dXJuIHsgLi4uc3RhdGUsIG1hbnVhbFNlbGVjdGlvbkNvdW50OiBzdGF0ZS5tYW51YWxTZWxlY3Rpb25Db3VudCArIDEgfVxuICAgICAgY2FzZSAnSU5DUkVNRU5UX01BTlVBTF9ERVNFTEVDVElPTic6XG4gICAgICAgIHJldHVybiB7IC4uLnN0YXRlLCBtYW51YWxEZVNlbGVjdGlvbkNvdW50OiBzdGF0ZS5tYW51YWxEZVNlbGVjdGlvbkNvdW50ICsgMSB9XG4gICAgICBjYXNlICdUUkFDS19EUkFHX1NFTEVDVElPTic6XG4gICAgICAgIHJldHVybiB7IC4uLnN0YXRlLCB1c2VkRHJhZ1NlbGVjdGlvbjogdHJ1ZSB9XG4gICAgICBjYXNlICdUUkFDS19EUkFHX0RFU0VMRUNUSU9OJzpcbiAgICAgICAgcmV0dXJuIHsgLi4uc3RhdGUsIHVzZWREcmFnRGVTZWxlY3Rpb246IHRydWUgfVxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbnJlY29nbml6ZWQgYWN0aW9uIHR5cGUgaW4gJHthY3Rpb259YClcbiAgICB9XG4gIH0sIHtcbiAgICBtYW51YWxTZWxlY3Rpb25Db3VudDogMCxcbiAgICBtYW51YWxEZVNlbGVjdGlvbkNvdW50OiAwLFxuICAgIHVzZWREcmFnU2VsZWN0aW9uOiBmYWxzZSxcbiAgICB1c2VkRHJhZ0RlU2VsZWN0aW9uOiBmYWxzZVxuICB9KVxuXG4gIGNvbnN0IG1hbnVhbFNlbGVjdGlvbiA9IHVzZUNhbGxiYWNrKCgpID0+IGRpc3BhdGNoKCdJTkNSRU1FTlRfTUFOVUFMX1NFTEVDVElPTicpLCBbZGlzcGF0Y2hdKVxuICBjb25zdCBtYW51YWxEZVNlbGVjdGlvbiA9IHVzZUNhbGxiYWNrKCgpID0+IGRpc3BhdGNoKCdJTkNSRU1FTlRfTUFOVUFMX0RFU0VMRUNUSU9OJyksIFtkaXNwYXRjaF0pXG4gIGNvbnN0IGRyYWdTZWxlY3Rpb24gPSB1c2VDYWxsYmFjaygoKSA9PiBkaXNwYXRjaCgnVFJBQ0tfRFJBR19TRUxFQ1RJT04nKSwgW2Rpc3BhdGNoXSlcbiAgY29uc3QgZHJhZ0RlU2VsZWN0aW9uID0gdXNlQ2FsbGJhY2soKCkgPT4gZGlzcGF0Y2goJ1RSQUNLX0RSQUdfREVTRUxFQ1RJT04nKSwgW2Rpc3BhdGNoXSlcblxuICByZXR1cm4ge1xuICAgIHNob3dTZWxlY3RUaXA6ICFzdGF0ZS51c2VkRHJhZ1NlbGVjdGlvbiAmJiBzdGF0ZS5tYW51YWxTZWxlY3Rpb25Db3VudCA+IDMsXG4gICAgc2hvd0RlU2VsZWN0VGlwOiAhc3RhdGUudXNlZERyYWdEZVNlbGVjdGlvbiAmJiBzdGF0ZS5tYW51YWxEZVNlbGVjdGlvbkNvdW50ID4gMyxcbiAgICBhY3Rpb25zOiB7XG4gICAgICBtYW51YWxTZWxlY3Rpb24sXG4gICAgICBtYW51YWxEZVNlbGVjdGlvbixcbiAgICAgIGRyYWdTZWxlY3Rpb24sXG4gICAgICBkcmFnRGVTZWxlY3Rpb25cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gS2V5UG9zaXRpb25TZWxlY3RvciAoeyB2YWx1ZSwgcHJvbXB0LCBvblVwZGF0ZSB9KSB7XG4gIGNvbnN0IHsgbGF5b3V0LCB3cmFwcGVyRGltZW5zaW9ucyB9ID0gdXNlQ29udGV4dChMYXlvdXRDb250ZXh0KVxuICBjb25zdCBrZXlQb2x5Z29ucyA9IHVzZU1lbW8oKCkgPT4gZ2V0UG9seWdvbnMobGF5b3V0KSwgW2xheW91dF0pXG4gIGNvbnN0IHdyYXBwZXJTdHlsZSA9IHVzZU1lbW8oKCkgPT4gZ2V0V3JhcHBlclN0eWxlKHdyYXBwZXJEaW1lbnNpb25zLCB7XG4gICAgc2NhbGU6IGxheW91dFNjYWxlLFxuICAgIG92ZXJyaWRlczoge1xuICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICBwYWRkaW5nOiAwLFxuICAgICAgbWFyZ2luOiAwXG4gICAgfVxuICB9KSwgW3dyYXBwZXJEaW1lbnNpb25zXSlcblxuICBjb25zdCB7XG4gICAgc2hvd1NlbGVjdFRpcCxcbiAgICBzaG93RGVTZWxlY3RUaXAsXG4gICAgYWN0aW9uczogc2VsZWN0aW9uQWN0aW9uc1xuICB9ID0gdXNlVXNhZ2VNZXRyaWNzKClcblxuICBjb25zdCBoYW5kbGVEcmFnU2VsZWN0ID0gdXNlQ2FsbGJhY2soKHsgbmVnYXRlLCBpbnRlcnNlY3RpbmcgfSkgPT4ge1xuICAgIG5lZ2F0ZSA/IHNlbGVjdGlvbkFjdGlvbnMuZHJhZ0RlU2VsZWN0aW9uKCkgOiBzZWxlY3Rpb25BY3Rpb25zLmRyYWdTZWxlY3Rpb24oKVxuICAgIG9uVXBkYXRlKFxuICAgICAgbmVnYXRlXG4gICAgICAgID8gdmFsdWUuZmlsdGVyKGkgPT4gIWludGVyc2VjdGluZy5pbmNsdWRlcyhpKSlcbiAgICAgICAgOiBbLi4udmFsdWUsIC4uLmludGVyc2VjdGluZ11cbiAgICApXG4gIH0sIFt2YWx1ZSwgb25VcGRhdGUsIHNlbGVjdGlvbkFjdGlvbnNdKVxuXG4gIGNvbnN0IGhhbmRsZVNlbGVjdEtleSA9IHVzZUNhbGxiYWNrKGluZGV4ID0+IHtcbiAgICBjb25zdCBpc1NlbGVjdGVkID0gdmFsdWUuaW5jbHVkZXMoaW5kZXgpXG4gICAgaXNTZWxlY3RlZCA/IHNlbGVjdGlvbkFjdGlvbnMubWFudWFsRGVTZWxlY3Rpb24oKSA6IHNlbGVjdGlvbkFjdGlvbnMubWFudWFsU2VsZWN0aW9uKClcblxuICAgIG9uVXBkYXRlKFxuICAgICAgaXNTZWxlY3RlZFxuICAgICAgICA/IHZhbHVlLmZpbHRlcihrZXlQb3NpdGlvbiA9PiBrZXlQb3NpdGlvbiAhPT0gaW5kZXgpXG4gICAgICAgIDogWy4uLnZhbHVlLCBpbmRleF1cbiAgICApXG4gIH0sIFt2YWx1ZSwgb25VcGRhdGUsIHNlbGVjdGlvbkFjdGlvbnNdKVxuXG4gIGNvbnN0IFtkcmFnUHJvcHMsIERyYWdTZWxlY3RDb250YWluZXJdID0gdXNlRHJhZ1NlbGVjdG9yKHtcbiAgICBvblNlbGVjdDogaGFuZGxlRHJhZ1NlbGVjdCxcbiAgICBwb2x5Z29uczoga2V5UG9seWdvbnNcbiAgfSlcblxuICBjb25zdCBpbnRlcnNlY3RpbmcgPSBkcmFnUHJvcHMuc2VsZWN0aW5nXG4gICAgPyBkcmFnUHJvcHMuaW50ZXJzZWN0aW5nXG4gICAgOiBbXVxuXG4gIGNvbnN0IHNlbGVjdGVkSW5kaWNlcyA9IHZhbHVlXG4gIGNvbnN0IHByZXZpZXdBZGRpbmdJbmRpY2VzID0gZHJhZ1Byb3BzLm5lZ2F0ZSA/IFtdIDogaW50ZXJzZWN0aW5nLmZpbHRlcihpbmRleCA9PiAhc2VsZWN0ZWRJbmRpY2VzLmluY2x1ZGVzKGluZGV4KSlcbiAgY29uc3QgcHJldmlld1JlbW92aW5nSW5kaWNlcyA9IGRyYWdQcm9wcy5uZWdhdGUgPyBpbnRlcnNlY3RpbmcuZmlsdGVyKGluZGV4ID0+IHNlbGVjdGVkSW5kaWNlcy5pbmNsdWRlcyhpbmRleCkpIDogW11cblxuICByZXR1cm4gKFxuICAgIDxkaXYgc3R5bGU9e3dyYXBwZXJTdHlsZX0+XG4gICAgICA8RHJhZ1NlbGVjdENvbnRhaW5lciB7Li4uZHJhZ1Byb3BzfT5cbiAgICAgICAgPEtleWJvYXJkTGF5b3V0XG4gICAgICAgICAgbGF5b3V0PXtsYXlvdXR9XG4gICAgICAgICAgYmluZGluZ3M9e1tdfVxuICAgICAgICAgIHNjYWxlPXtsYXlvdXRTY2FsZX1cbiAgICAgICAgICByZW5kZXJLZXk9eyh7IGluZGV4IH0pID0+IChcbiAgICAgICAgICAgIDxLZXlXcmFwcGVyXG4gICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IGhhbmRsZVNlbGVjdEtleShpbmRleCl9XG4gICAgICAgICAgICAgIHRoZW1lQ2xhc3M9e2NvbXBhY3QoW1xuICAgICAgICAgICAgICAgIHN0eWxlcy5rZXksXG4gICAgICAgICAgICAgICAgc2VsZWN0ZWRJbmRpY2VzLmluY2x1ZGVzKGluZGV4KSAmJiBzdHlsZXMuaGlnaGxpZ2h0LFxuICAgICAgICAgICAgICAgIHByZXZpZXdBZGRpbmdJbmRpY2VzLmluY2x1ZGVzKGluZGV4KSAmJiBzdHlsZXMucHJldmlld0FkZCxcbiAgICAgICAgICAgICAgICBwcmV2aWV3UmVtb3ZpbmdJbmRpY2VzLmluY2x1ZGVzKGluZGV4KSAmJiBzdHlsZXMucHJldmlld1JlbW92ZVxuICAgICAgICAgICAgICBdKS5qb2luKCcgJyl9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICl9XG4gICAgICAgIC8+XG4gICAgICAgIHtwcm9tcHQgJiYgPHByb21wdCAvPn1cbiAgICAgICAge3Nob3dTZWxlY3RUaXAgJiYgPFRpcCBjbGFzc05hbWU9e3N0eWxlcy50aXB9PkRyYWcgdG8gc2VsZWN0IGEgcmVnaW9uPC9UaXA+fVxuICAgICAgICB7c2hvd0RlU2VsZWN0VGlwICYmIDxUaXAgY2xhc3NOYW1lPXtzdHlsZXMudGlwfT5TaGlmdCtEcmFnIHRvIGRlLXNlbGVjdCBhIHJlZ2lvbjwvVGlwPn1cbiAgICAgIDwvRHJhZ1NlbGVjdENvbnRhaW5lcj5cbiAgICA8L2Rpdj5cbiAgKVxufVxuXG5LZXlQb3NpdGlvblNlbGVjdG9yLnByb3BUeXBlcyA9IHtcbiAgb25VcGRhdGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIHZhbHVlOiBQcm9wVHlwZXMuYXJyYXlPZihcbiAgICBQcm9wVHlwZXMubnVtYmVyXG4gICkuaXNSZXF1aXJlZCxcbiAgcHJvbXB0OiBQcm9wVHlwZXMubm9kZVxufVxuXG5leHBvcnQgZGVmYXVsdCBLZXlQb3NpdGlvblNlbGVjdG9yXG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzJdLnVzZVsxXSEuL3N0eWxlcy5tb2R1bGUuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMl0udXNlWzFdIS4vc3R5bGVzLm1vZHVsZS5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgSWNvbiBmcm9tICcuLi8uLi8uLi9Db21tb24vSWNvbidcbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9zdHlsZXMubW9kdWxlLmNzcydcblxuZXhwb3J0IGZ1bmN0aW9uIFJhd1Byb3BlcnR5VmFsdWUgKHsgcHJvcCwgc2NoZW1hLCBvblVwZGF0ZSB9KSB7XG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIDxJY29uIG5hbWU9XCJjb2RlXCIgdGl0bGU9XCJSYXcgcHJvcGVydHkgdmFsdWVcIiAvPiA8aW5wdXRcbiAgICAgICAgcmVxdWlyZWQ9e3NjaGVtYT8ucmVxdWlyZWR9XG4gICAgICAgIHZhbHVlPXtwcm9wPy5yYXd9XG4gICAgICAgIG9uQ2hhbmdlPXtlID0+IG9uVXBkYXRlKHtcbiAgICAgICAgICAuLi5wcm9wLFxuICAgICAgICAgIHJhdzogZS50YXJnZXQudmFsdWUsXG4gICAgICAgICAgdXNlUmF3OiB0cnVlXG4gICAgICAgIH0pfVxuICAgICAgLz5cbiAgICA8Lz5cbiAgKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gQ29uc3RQcm9wZXJ0eVZhbHVlICh7IHNjaGVtYSB9KSB7XG4gIHJldHVybiAoXG4gICAgPHNwYW4gY2xhc3NOYW1lPXtbXG4gICAgICBzdHlsZXMucHJvcGVydHlWYWx1ZSxcbiAgICAgIHN0eWxlcy5yZWFkb25seVxuICAgIF0uam9pbignICcpfT5cbiAgICAgIHtzY2hlbWEuY29uc3R9XG4gICAgPC9zcGFuPlxuICApXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBTdHJpbmdQcm9wZXJ0eVZhbHVlICh7IHByb3AsIHNjaGVtYSwgb25VcGRhdGUgfSkge1xuICByZXR1cm4gKFxuICAgIDxpbnB1dFxuICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgY2xhc3NOYW1lPXtzdHlsZXMucHJvcGVydHlWYWx1ZX1cbiAgICAgIHZhbHVlPXtwcm9wPy5wYXJzZWQgPz8gJyd9XG4gICAgICBwbGFjZWhvbGRlcj17c2NoZW1hLmRlZmF1bHQgJiYgYERlZmF1bHQ6ICR7c2NoZW1hLmRlZmF1bHR9YH1cbiAgICAgIG9uQ2hhbmdlPXtlID0+IHtcbiAgICAgICAgb25VcGRhdGUoe1xuICAgICAgICAgIC4uLnByb3AsXG4gICAgICAgICAgcGFyc2VkOiBlLnRhcmdldC52YWx1ZSxcbiAgICAgICAgICB1c2VSYXc6IGZhbHNlXG4gICAgICAgIH0pXG4gICAgICB9fVxuICAgIC8+XG4gIClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEludGVnZXJQcm9wZXJ0eVZhbHVlICh7IHByb3AsIHNjaGVtYSwgb25VcGRhdGUgfSkge1xuICByZXR1cm4gKFxuICAgIDxpbnB1dFxuICAgICAgdHlwZT1cIm51bWJlclwiXG4gICAgICBjbGFzc05hbWU9e3N0eWxlcy5wcm9wZXJ0eVZhbHVlfVxuICAgICAgdmFsdWU9e3Byb3A/LnBhcnNlZCA/PyAnJ31cbiAgICAgIHBsYWNlaG9sZGVyPXtzY2hlbWEuZGVmYXVsdCAmJiBgRGVmYXVsdDogJHtzY2hlbWEuZGVmYXVsdH1gfVxuICAgICAgb25DaGFuZ2U9e2UgPT4ge1xuICAgICAgICBvblVwZGF0ZSh7XG4gICAgICAgICAgLi4ucHJvcCxcbiAgICAgICAgICBwYXJzZWQ6IE51bWJlcihlLnRhcmdldC52YWx1ZSksXG4gICAgICAgICAgdXNlUmF3OiBmYWxzZVxuICAgICAgICB9KVxuICAgICAgfX1cbiAgICAvPlxuICApXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBCb29sZWFuUHJvcGVydHlWYWx1ZSAoeyBwcm9wLCBvblVwZGF0ZSB9KSB7XG4gIHJldHVybiAoXG4gICAgPGlucHV0XG4gICAgICB0eXBlPVwiY2hlY2tib3hcIlxuICAgICAgY2xhc3NOYW1lPXtzdHlsZXMucHJvcGVydHlWYWx1ZX1cbiAgICAgIGNoZWNrZWQ9e3Byb3A/LnBhcnNlZCB8fCBmYWxzZX1cbiAgICAgIG9uQ2hhbmdlPXtlID0+IHtcbiAgICAgICAgb25VcGRhdGUoe1xuICAgICAgICAgIHBhcnNlZDogISFlLnRhcmdldC5jaGVja2VkLFxuICAgICAgICAgIHVzZVJhdzogZmFsc2VcbiAgICAgICAgfSlcbiAgICAgIH19XG4gICAgLz5cbiAgKVxufVxuIiwiXG5leHBvcnQgY29uc3QgY3ljbGUgPSAoYXJyYXksIGluZGV4LCBzdGVwID0gMSkgPT4ge1xuICBjb25zdCBuZXh0ID0gKGluZGV4ICsgc3RlcCkgJSBhcnJheS5sZW5ndGhcbiAgcmV0dXJuIG5leHQgPCAwID8gYXJyYXkubGVuZ3RoICsgbmV4dCA6IG5leHRcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNjcm9sbEludG9WaWV3SWZOZWVkZWQgKGVsZW1lbnQsIGFsaWduVG9Ub3ApIHtcbiAgY29uc3Qgc2Nyb2xsID0gZWxlbWVudC5vZmZzZXRQYXJlbnQuc2Nyb2xsVG9wXG4gIGNvbnN0IGhlaWdodCA9IGVsZW1lbnQub2Zmc2V0UGFyZW50Lm9mZnNldEhlaWdodFxuICBjb25zdCB0b3AgPSBlbGVtZW50Lm9mZnNldFRvcFxuICBjb25zdCBib3R0b20gPSB0b3AgKyBlbGVtZW50LnNjcm9sbEhlaWdodFxuXG4gIGlmICh0b3AgPCBzY3JvbGwgfHwgYm90dG9tID4gc2Nyb2xsICsgaGVpZ2h0KSB7XG4gICAgZWxlbWVudC5zY3JvbGxJbnRvVmlldyhhbGlnblRvVG9wKVxuICB9XG59XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzJdLnVzZVsxXSEuL3N0eWxlLm1vZHVsZS5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1syXS51c2VbMV0hLi9zdHlsZS5tb2R1bGUuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJ1xuaW1wb3J0IHsgdXNlQ2FsbGJhY2ssIHVzZUVmZmVjdCwgdXNlUmVmLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0J1xuXG5pbXBvcnQgeyBjeWNsZSwgc2Nyb2xsSW50b1ZpZXdJZk5lZWRlZCB9IGZyb20gJy4vdXRpbCdcbmltcG9ydCBzdHlsZSBmcm9tICcuL3N0eWxlLm1vZHVsZS5jc3MnXG5cbmZ1bmN0aW9uIFJlc3VsdExpc3QgKHsgcmVzdWx0cywgb25TZWxlY3QsIHJlbmRlclJlc3VsdCB9KSB7XG4gIGNvbnN0IFtjdXJzb3JJbmRleCwgc2V0Q3Vyc29ySW5kZXhdID0gdXNlU3RhdGUoMClcbiAgY29uc3QgbGlzdFJlZiA9IHVzZVJlZihudWxsKVxuXG4gIGNvbnN0IG1vdmVDdXJzb3IgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoaW5pdGlhbCwgb2Zmc2V0KSB7XG4gICAgaWYgKHJlc3VsdHMubGVuZ3RoID09PSAwKSB7XG4gICAgICBzZXRDdXJzb3JJbmRleChudWxsKVxuICAgICAgcmV0dXJuXG4gICAgfSBlbHNlIGlmIChvZmZzZXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgc2V0Q3Vyc29ySW5kZXgoaW5pdGlhbClcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IG5leHQgPSBjdXJzb3JJbmRleCAhPT0gbnVsbFxuICAgICAgPyBjeWNsZShyZXN1bHRzLCBjdXJzb3JJbmRleCwgb2Zmc2V0KVxuICAgICAgOiBpbml0aWFsXG5cbiAgICBjb25zdCBzZWxlY3RvciA9IGBsaVtkYXRhLXJlc3VsdC1pbmRleD1cIiR7bmV4dH1cIl1gXG4gICAgY29uc3QgZWxlbWVudCA9IGxpc3RSZWYuY3VycmVudD8ucXVlcnlTZWxlY3RvcihzZWxlY3RvcilcblxuICAgIHNjcm9sbEludG9WaWV3SWZOZWVkZWQoZWxlbWVudCwgZmFsc2UpXG4gICAgc2V0Q3Vyc29ySW5kZXgobmV4dClcbiAgfSwgW3Jlc3VsdHMsIGN1cnNvckluZGV4LCBzZXRDdXJzb3JJbmRleF0pXG5cbiAgY29uc3QgaGFuZGxlSGlnaGxpZ2h0TmV4dCA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICBtb3ZlQ3Vyc29yKDAsIDEpXG4gIH0sIFttb3ZlQ3Vyc29yXSlcblxuICBjb25zdCBoYW5kbGVIaWdodGlnaHRQcmV2ID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgIG1vdmVDdXJzb3IocmVzdWx0cy5sZW5ndGggLSAxLCAtMSlcbiAgfSwgW21vdmVDdXJzb3IsIHJlc3VsdHNdKVxuXG4gIGNvbnN0IGhhbmRsZVNlbGVjdEFjdGl2ZSA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uIChldmVudCkge1xuICAgIG9uU2VsZWN0KHJlc3VsdHNbY3Vyc29ySW5kZXhdLCBldmVudClcbiAgfSwgW3Jlc3VsdHMsIGN1cnNvckluZGV4LCBvblNlbGVjdF0pXG5cbiAgY29uc3QgaGFuZGxlS2V5RG93biA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uIChldmVudCkge1xuICAgIGNvbnN0IG1hcHBpbmcgPSB7XG4gICAgICBBcnJvd0Rvd246IGhhbmRsZUhpZ2hsaWdodE5leHQsXG4gICAgICBBcnJvd1VwOiBoYW5kbGVIaWdodGlnaHRQcmV2LFxuICAgICAgRW50ZXI6IGhhbmRsZVNlbGVjdEFjdGl2ZVxuICAgIH1cblxuICAgIGNvbnN0IGFjdGlvbiA9IG1hcHBpbmdbZXZlbnQua2V5XVxuICAgIGlmIChhY3Rpb24pIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpXG4gICAgICBhY3Rpb24oZXZlbnQpXG4gICAgfVxuICB9LCBbXG4gICAgaGFuZGxlSGlnaGxpZ2h0TmV4dCxcbiAgICBoYW5kbGVIaWdodGlnaHRQcmV2LFxuICAgIGhhbmRsZVNlbGVjdEFjdGl2ZVxuICBdKVxuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgaGFuZGxlS2V5RG93bilcbiAgICByZXR1cm4gKCkgPT4gZG9jdW1lbnQuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgaGFuZGxlS2V5RG93bilcbiAgfSwgW2xpc3RSZWYsIGhhbmRsZUtleURvd25dKVxuXG4gIHJldHVybiAoXG4gICAgPHVsIGNsYXNzTmFtZT17c3R5bGUucmVzdWx0c30gcmVmPXtsaXN0UmVmfT5cbiAgICAgIHtyZXN1bHRzLm1hcCgocmVzdWx0LCBpKSA9PiAoXG4gICAgICAgIDxsaVxuICAgICAgICAgIGtleT17aX1cbiAgICAgICAgICBjbGFzc05hbWU9e2N1cnNvckluZGV4ID09PSBpID8gc3R5bGUuaGlnaGxpZ2h0ZWQgOiAnJ31cbiAgICAgICAgICB0aXRsZT17cmVzdWx0LmRlc2NyaXB0aW9ufVxuICAgICAgICAgIGRhdGEtcmVzdWx0LWluZGV4PXtpfVxuICAgICAgICAgIG9uQ2xpY2s9e2V2ZW50ID0+IG9uU2VsZWN0KHJlc3VsdCwgZXZlbnQpfVxuICAgICAgICAgIG9uRG91YmxlQ2xpY2s9e2V2ZW50ID0+IG9uU2VsZWN0KHJlc3VsdCwgZXZlbnQpfVxuICAgICAgICAgIG9uTW91c2VPdmVyPXsoKSA9PiBtb3ZlQ3Vyc29yKGkpfVxuICAgICAgICA+XG4gICAgICAgICAge3JlbmRlclJlc3VsdChyZXN1bHQsIGkpfVxuICAgICAgICA8L2xpPlxuICAgICAgKSl9XG4gICAgPC91bD5cbiAgKVxufVxuXG5SZXN1bHRMaXN0LnByb3BUeXBlcyA9IHtcbiAgcmVzdWx0czogUHJvcFR5cGVzLmFycmF5LmlzUmVxdWlyZWQsXG4gIG9uU2VsZWN0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICByZW5kZXJSZXN1bHQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbn1cblxuZXhwb3J0IGRlZmF1bHQgUmVzdWx0TGlzdFxuIiwiaW1wb3J0IGZ1enp5c29ydCBmcm9tICdmdXp6eXNvcnQnXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnXG5pbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlTWVtbywgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCdcblxuaW1wb3J0IEljb24gZnJvbSAnLi4vQ29tbW9uL0ljb24nXG5pbXBvcnQgc3R5bGUgZnJvbSAnLi9zdHlsZS5tb2R1bGUuY3NzJ1xuXG5jb25zdCBzZWFyY2hUaHJlc2hvbGQgPSAxMFxuXG5mdW5jdGlvbiBmb2N1c0lucHV0IChub2RlKSB7XG4gIGlmIChub2RlKSB7XG4gICAgbm9kZS5mb2N1cygpXG4gICAgbm9kZS5zZWxlY3QoKVxuICB9XG59XG5cbmNvbnN0IFNlYXJjaEZpbHRlciA9ICh7IGNob2ljZXMsIHNlYXJjaEtleSwgcmVuZGVyUmVzdWx0cywgaW5pdGlhbFF1ZXJ5IH0pID0+IHtcbiAgY29uc3QgdXNlU2VhcmNoID0gIWNob2ljZXMubGVuZ3RoIHx8IGNob2ljZXMubGVuZ3RoID4gc2VhcmNoVGhyZXNob2xkXG4gIGNvbnN0IFtxdWVyeSwgc2V0UXVlcnldID0gdXNlU3RhdGUoaW5pdGlhbFF1ZXJ5KVxuICBjb25zdCByZXN1bHRzID0gdXNlTWVtbygoKSA9PiB7XG4gICAgaWYgKCFxdWVyeSB8fCAhdXNlU2VhcmNoKSB7XG4gICAgICByZXR1cm4gY2hvaWNlc1xuICAgIH1cblxuICAgIGNvbnN0IG9wdGlvbnMgPSB7IGtleTogc2VhcmNoS2V5LCBsaW1pdDogMzAgfVxuICAgIGNvbnN0IGZpbHRlcmVkID0gZnV6enlzb3J0LmdvKHF1ZXJ5LCBjaG9pY2VzLCBvcHRpb25zKVxuICAgIHJldHVybiBmaWx0ZXJlZC5tYXAocmVzdWx0ID0+ICh7XG4gICAgICAuLi5yZXN1bHQub2JqLFxuICAgICAgc2VhcmNoOiByZXN1bHRcbiAgICB9KSlcbiAgfSwgW3VzZVNlYXJjaCwgcXVlcnksIGNob2ljZXMsIHNlYXJjaEtleV0pXG5cbiAgY29uc3QgaGFuZGxlS2V5UHJlc3MgPSB1c2VDYWxsYmFjayhldmVudCA9PiB7XG4gICAgc2V0UXVlcnkoZXZlbnQudGFyZ2V0LnZhbHVlKVxuICB9LCBbc2V0UXVlcnldKVxuXG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIHt1c2VTZWFyY2ggJiYgKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGUuc2VhcmNoV3JhcHBlcn0+XG4gICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICByZWY9e2ZvY3VzSW5wdXR9XG4gICAgICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgICB2YWx1ZT17cXVlcnl9XG4gICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlS2V5UHJlc3N9XG4gICAgICAgICAgLz5cbiAgICAgICAgICA8SWNvbiBjbGFzc05hbWU9e3N0eWxlLnNlYXJjaEljb259IG5hbWU9XCJzZWFyY2hcIiAvPlxuICAgICAgICAgIDxJY29uXG4gICAgICAgICAgICBjbGFzc05hbWU9e3N0eWxlLmNsZWFyU2VhcmNoSWNvbn1cbiAgICAgICAgICAgIG5hbWU9XCJ0aW1lc1wiXG4gICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBzZXRRdWVyeSgnJyl9XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICApfVxuICAgICAge3JlbmRlclJlc3VsdHMocmVzdWx0cyl9XG4gICAgPC8+XG4gIClcbn1cblxuU2VhcmNoRmlsdGVyLnByb3BUeXBlcyA9IHtcbiAgY2hvaWNlczogUHJvcFR5cGVzLmFycmF5LmlzUmVxdWlyZWQsXG4gIHNlYXJjaEtleTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICBpbml0aWFsUXVlcnk6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgcmVuZGVyUmVzdWx0czogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxufVxuXG5TZWFyY2hGaWx0ZXIuZGVmYXVsdFByb3BzID0ge1xuICBpbml0aWFsUXVlcnk6ICcnXG59XG5cbmV4cG9ydCBkZWZhdWx0IFNlYXJjaEZpbHRlclxuIiwiaW1wb3J0IGZ1enp5c29ydCBmcm9tICdmdXp6eXNvcnQnXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnXG5pbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlTWVtbyB9IGZyb20gJ3JlYWN0J1xuXG5pbXBvcnQgUmVzdWx0TGlzdCBmcm9tICcuL1Jlc3VsdExpc3QnXG5pbXBvcnQgU2VhcmNoRmlsdGVyIGZyb20gJy4vU2VhcmNoRmlsdGVyJ1xuaW1wb3J0IHN0eWxlIGZyb20gJy4vc3R5bGUubW9kdWxlLmNzcydcblxuZnVuY3Rpb24gQ2hvaWNlc1BpY2tlciAocHJvcHMpIHtcbiAgY29uc3QgeyBjaG9pY2VzLCBwcm9tcHQsIG9uU2VsZWN0IH0gPSBwcm9wc1xuICBjb25zdCBmb3JtYXR0ZWRDaG9pY2VzID0gdXNlTWVtbygoKSA9PiB7XG4gICAgcmV0dXJuIGNob2ljZXMubWFwKHZhbHVlID0+ICh7IHZhbHVlIH0pKVxuICB9LCBbY2hvaWNlc10pXG5cbiAgY29uc3QgcmVuZGVyU2VhcmNoUmVzdWx0ID0gdXNlQ2FsbGJhY2socmVzdWx0ID0+IHtcbiAgICBjb25zdCB0aXRsZSA9IHJlc3VsdC5zZWFyY2hcbiAgICAgID8gKFxuICAgICAgPHNwYW4gZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e3tcbiAgICAgICAgX19odG1sOiBmdXp6eXNvcnQuaGlnaGxpZ2h0KHJlc3VsdC5zZWFyY2gpXG4gICAgICB9fSAvPlxuICAgICAgICApXG4gICAgICA6IChcbiAgICAgIDxzcGFuPlxuICAgICAgICB7cmVzdWx0LnZhbHVlfVxuICAgICAgPC9zcGFuPlxuICAgICAgICApXG5cbiAgICByZXR1cm4gKFxuICAgICAgPD5cbiAgICAgICAge3RpdGxlfVxuICAgICAgICB7cmVzdWx0LmRlc2NyaXB0aW9uICYmIDxwIGNsYXNzTmFtZT17c3R5bGUuZGVzY3JpcHRpb259PntyZXN1bHQuZGVzY3JpcHRpb259PC9wPn1cbiAgICAgIDwvPlxuICAgIClcbiAgfSwgW10pXG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGUuZGlhbG9nfT5cbiAgICAgIDxwPntwcm9tcHQgfHwgJ1NlbGVjdCd9PC9wPlxuICAgICAgPFNlYXJjaEZpbHRlclxuICAgICAgICBjaG9pY2VzPXtmb3JtYXR0ZWRDaG9pY2VzfVxuICAgICAgICBpbml0aWFsUXVlcnk9XCJcIlxuICAgICAgICBzZWFyY2hLZXk9XCJ2YWx1ZVwiXG4gICAgICAgIHJlbmRlclJlc3VsdHM9e3Jlc3VsdHMgPT4gcmVzdWx0cyAmJiAoXG4gICAgICAgICAgPFJlc3VsdExpc3RcbiAgICAgICAgICAgIHJlc3VsdHM9e3Jlc3VsdHN9XG4gICAgICAgICAgICBvblNlbGVjdD17Y2hvaWNlID0+IG9uU2VsZWN0KGNob2ljZS52YWx1ZSl9XG4gICAgICAgICAgICByZW5kZXJSZXN1bHQ9e3JlbmRlclNlYXJjaFJlc3VsdH1cbiAgICAgICAgICAvPlxuICAgICAgICApfVxuICAgICAgLz5cbiAgICA8L2Rpdj5cbiAgKVxufVxuXG5DaG9pY2VzUGlja2VyLnByb3BUeXBlcyA9IHtcbiAgY2hvaWNlczogUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnN0aXJuZykuaXNSZXF1aXJlZCxcbiAgcHJvbXB0OiBQcm9wVHlwZXMuc3RyaW5nLFxuICBvblNlbGVjdDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxufVxuXG5leHBvcnQgZGVmYXVsdCBDaG9pY2VzUGlja2VyXG4iLCJpbXBvcnQgbWFwIGZyb20gJ2xvZGFzaC9tYXAnXG5pbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlQ29udGV4dCwgdXNlTWVtbywgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCdcbmltcG9ydCBBY3Rpb25CdXR0b24gZnJvbSAnLi4vLi4vLi4vQ29tbW9uL0FjdGlvbkJ1dHRvbidcbmltcG9ydCBJY29uIGZyb20gJy4uLy4uLy4uL0NvbW1vbi9JY29uJ1xuaW1wb3J0IE1vZGFsIGZyb20gJy4uLy4uLy4uL0NvbW1vbi9Nb2RhbCdcblxuaW1wb3J0IHsgRGVmaW5pdGlvbnNDb250ZXh0IH0gZnJvbSAnLi4vLi4vLi4vQ29udGV4dHMvRGVmaW5pdGlvbnMnXG5pbXBvcnQgQ2hvaWNlc1BpY2tlciBmcm9tICcuLi8uLi8uLi9WYWx1ZVBpY2tlci9DaG9pY2VzUGlja2VyJ1xuXG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vc3R5bGVzLm1vZHVsZS5jc3MnXG5cbmZ1bmN0aW9uIHVzZVNjaGVtYUNob2ljZXMgKHNjaGVtYSkge1xuICBjb25zdCBkZWZpbml0aW9ucyA9IHVzZUNvbnRleHQoRGVmaW5pdGlvbnNDb250ZXh0KVxuICByZXR1cm4gdXNlTWVtbygoKSA9PiB7XG4gICAgaWYgKCFzY2hlbWEuY2hvaWNlcykge1xuICAgICAgcmV0dXJuIFtdXG4gICAgfVxuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoc2NoZW1hLmNob2ljZXMpKSB7XG4gICAgICByZXR1cm4gc2NoZW1hLmNob2ljZXNcbiAgICB9XG5cbiAgICBpZiAoIXNjaGVtYS5jaG9pY2VzLiRzb3VyY2UpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgc2NoZW1hLmNob2ljZXMuJHNvdXJjZScpXG4gICAgfVxuXG4gICAgY29uc3Qgc291cmNlID0gZGVmaW5pdGlvbnNbc2NoZW1hLmNob2ljZXMuJHNvdXJjZV1cbiAgICBpZiAoc2NoZW1hLmNob2ljZXMuJGtleSkge1xuICAgICAgcmV0dXJuIG1hcChzb3VyY2UsIHNjaGVtYS5jaG9pY2VzLiRrZXkpXG4gICAgfVxuXG4gICAgcmV0dXJuIHNvdXJjZVxuICB9LCBbZGVmaW5pdGlvbnMsIHNjaGVtYS5jaG9pY2VzXSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEVudW1Qcm9wZXJ0eVZhbHVlICh7IHByb3AgPSB7fSwgc2NoZW1hLCBvblVwZGF0ZSB9KSB7XG4gIGNvbnN0IGNob2ljZXMgPSBzY2hlbWEuZW51bVxuICBjb25zdCB2YWx1ZSA9IHByb3AucGFyc2VkXG4gIGNvbnN0IGhhbmRsZUNoYW5nZSA9IHVzZUNhbGxiYWNrKGV2ZW50ID0+IHtcbiAgICBvblVwZGF0ZSh7XG4gICAgICAuLi5wcm9wLFxuICAgICAgcGFyc2VkOiBjaG9pY2VzW2V2ZW50LnRhcmdldC52YWx1ZV0sXG4gICAgICB1c2VSYXc6IGZhbHNlXG4gICAgfSlcbiAgfSwgW3Byb3AsIGNob2ljZXMsIG9uVXBkYXRlXSlcblxuICByZXR1cm4gKFxuICAgIDxzZWxlY3QgY2xhc3NOYW1lPXtzdHlsZXMucHJvcGVydHlWYWx1ZX0gb25DaGFuZ2U9e2hhbmRsZUNoYW5nZX0gdmFsdWU9e2Nob2ljZXMuaW5kZXhPZih2YWx1ZSl9PlxuICAgICAge2Nob2ljZXMubWFwKChuYW1lLCBpKSA9PiAoXG4gICAgICAgIDxvcHRpb24ga2V5PXtpfSB2YWx1ZT17aX0+e25hbWV9PC9vcHRpb24+XG4gICAgICApKX1cbiAgICA8L3NlbGVjdD5cbiAgKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gTXVsdGlTZWxlY3RQcm9wZXJ0eVZhbHVlICh7IHByb3AgPSB7fSwgc2NoZW1hLCBvblVwZGF0ZSB9KSB7XG4gIGNvbnN0IGNob2ljZXMgPSB1c2VTY2hlbWFDaG9pY2VzKHNjaGVtYSlcbiAgY29uc3QgeyBwYXJzZWQ6IHNlbGVjdGVkID0gW10gfSA9IHByb3BcbiAgY29uc3QgaGFuZGxlQ2hhbmdlID0gdXNlQ2FsbGJhY2soc2VsZWN0ZWQgPT4ge1xuICAgIG9uVXBkYXRlKHsgLi4ucHJvcCwgdXNlUmF3OiBmYWxzZSwgcGFyc2VkOiBzZWxlY3RlZCB9KVxuICB9LCBbcHJvcCwgb25VcGRhdGVdKVxuXG4gIGNvbnN0IE11bHRpU2VsZWN0ID0gY2hvaWNlcy5sZW5ndGggPiAyMFxuICAgID8gTXVsdGlTZWxlY3RDaGlwc1xuICAgIDogTXVsdGlTZWxlY3RDaGVja2JveGVzXG5cbiAgcmV0dXJuIChcbiAgICA8TXVsdGlTZWxlY3RcbiAgICAgIHNlbGVjdGVkPXtzZWxlY3RlZH1cbiAgICAgIGNob2ljZXM9e2Nob2ljZXN9XG4gICAgICBvblVwZGF0ZT17aGFuZGxlQ2hhbmdlfVxuICAgIC8+XG4gIClcbn1cblxuZnVuY3Rpb24gTXVsdGlTZWxlY3RDaGVja2JveGVzICh7IHNlbGVjdGVkLCBjaG9pY2VzLCBvblVwZGF0ZSB9KSB7XG4gIGNvbnN0IGhhbmRsZUNoYW5nZSA9IHVzZUNhbGxiYWNrKGNob2ljZSA9PiB7XG4gICAgb25VcGRhdGUoXG4gICAgICBzZWxlY3RlZC5pbmNsdWRlcyhjaG9pY2UpXG4gICAgICAgID8gc2VsZWN0ZWQuZmlsdGVyKHYgPT4gdiAhPT0gY2hvaWNlKVxuICAgICAgICA6IFsuLi5zZWxlY3RlZCwgY2hvaWNlXVxuICAgIClcbiAgfSwgW3NlbGVjdGVkLCBvblVwZGF0ZV0pXG5cbiAgcmV0dXJuIChcbiAgICA8b2wgY2xhc3NOYW1lPXtzdHlsZXMucHJvcGVydHlNdWx0aVNlbGVjdH0+XG4gICAgICB7Y2hvaWNlcy5tYXAoKGNob2ljZSwgaSkgPT4gKFxuICAgICAgICA8bGkga2V5PXtpfT5cbiAgICAgICAgICA8bGFiZWw+XG4gICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgdHlwZT1cImNoZWNrYm94XCJcbiAgICAgICAgICAgICAgY2hlY2tlZD17c2VsZWN0ZWQuaW5jbHVkZXMoY2hvaWNlKX1cbiAgICAgICAgICAgICAgb25DaGFuZ2U9e2UgPT4gaGFuZGxlQ2hhbmdlKGNob2ljZSl9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAge2Nob2ljZX1cbiAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICA8L2xpPlxuICAgICAgKSl9XG4gICAgPC9vbD5cbiAgKVxufVxuXG5mdW5jdGlvbiBNdWx0aVNlbGVjdENoaXBzICh7IHNlbGVjdGVkLCBjaG9pY2VzLCBvblVwZGF0ZSB9KSB7XG4gIGNvbnN0IFthZGRpbmcsIHNldEFkZGluZ10gPSB1c2VTdGF0ZShmYWxzZSlcbiAgY29uc3QgYWRkQ2hvaWNlID0gdXNlQ2FsbGJhY2soY2hvaWNlID0+IHtcbiAgICBvblVwZGF0ZShbLi4uc2VsZWN0ZWQsIGNob2ljZV0pXG4gICAgc2V0QWRkaW5nKGZhbHNlKVxuICB9LCBbc2V0QWRkaW5nLCBzZWxlY3RlZCwgb25VcGRhdGVdKVxuICBjb25zdCByZW1vdmUgPSB1c2VDYWxsYmFjayhjaG9pY2UgPT4ge1xuICAgIG9uVXBkYXRlKHNlbGVjdGVkLmZpbHRlcih2YWx1ZSA9PiB2YWx1ZSAhPT0gY2hvaWNlKSlcbiAgfSwgW3NlbGVjdGVkLCBvblVwZGF0ZV0pXG5cbiAgLy8gVE9ETzogbWFrZSB0aGVzZSBDU1MgY2xhc3NlcyBtb3JlIGdlbmVyaWMgaWYgSSB3YW50IHRvIHNoYXJlIHRoZW0gYmV0d2VlblxuICAvLyB1bnJlbGF0ZWQgY29tcG9uZW50cy4gKG9yIHJlZmFjdG9yIHRoZSBlbGVtZW50cyB0aGVtc2VsdmVzKVxuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8dWwgY2xhc3NOYW1lPXtzdHlsZXMucHJvcGVydHlNdWx0aVNlbGVjdENoaXBzfT5cbiAgICAgICAge3NlbGVjdGVkLm1hcCgoY2hvaWNlLCBpKSA9PiAoXG4gICAgICAgICAgPGxpIGtleT17aX0+XG4gICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9e3N0eWxlcy5iZWhhdmlvckJpbmR9PlxuICAgICAgICAgICAgICB7Y2hvaWNlfSB7KFxuICAgICAgICAgICAgICAgIDxJY29uXG4gICAgICAgICAgICAgICAgICBuYW1lPVwidGltZXNcIlxuICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtzdHlsZXMucGhhbmRsZVJlbW92ZX1cbiAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHJlbW92ZShjaG9pY2UpfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgPC9saT5cbiAgICAgICAgKSl9XG4gICAgICA8L3VsPlxuICAgICAgPEFjdGlvbkJ1dHRvbiBzZWNvbmRhcnkgb25DbGljaz17KCkgPT4gc2V0QWRkaW5nKHRydWUpfT5cbiAgICAgICAgPEljb24gbmFtZT1cInBsdXNcIiAvPiBBZGRcbiAgICAgIDwvQWN0aW9uQnV0dG9uPlxuICAgICAge2FkZGluZyAmJiAoXG4gICAgICAgIDxNb2RhbCBvbkRpc21pc3M9eygpID0+IHNldEFkZGluZyhmYWxzZSl9PlxuICAgICAgICAgIDxDaG9pY2VzUGlja2VyXG4gICAgICAgICAgICBjaG9pY2VzPXtjaG9pY2VzfVxuICAgICAgICAgICAgb25TZWxlY3Q9e2FkZENob2ljZX1cbiAgICAgICAgICAvPlxuICAgICAgICA8L01vZGFsPlxuICAgICAgKX1cbiAgICA8Lz5cbiAgKVxufVxuIiwiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJ1xuaW1wb3J0IHsgdXNlQ29udGV4dCwgdXNlTWVtbyB9IGZyb20gJ3JlYWN0J1xuXG5pbXBvcnQgeyBTZWFyY2hDb250ZXh0IH0gZnJvbSAnLi4vcHJvdmlkZXJzJ1xuaW1wb3J0IFJlc3VsdExpc3QgZnJvbSAnLi9SZXN1bHRMaXN0J1xuaW1wb3J0IHN0eWxlIGZyb20gJy4vc3R5bGUubW9kdWxlLmNzcydcblxuZnVuY3Rpb24gRW51bVBpY2tlciAocHJvcHMpIHtcbiAgY29uc3QgeyBnZXRTZWFyY2hUYXJnZXRzIH0gPSB1c2VDb250ZXh0KFNlYXJjaENvbnRleHQpXG4gIGNvbnN0IHsgcGFyYW0sIHByb21wdCwgb25TZWxlY3QgfSA9IHByb3BzXG5cbiAgY29uc3QgY2hvaWNlcyA9IHVzZU1lbW8oKCkgPT4gKFxuICAgIGdldFNlYXJjaFRhcmdldHMocGFyYW0pXG4gICksIFtnZXRTZWFyY2hUYXJnZXRzLCBwYXJhbV0pXG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGUuZGlhbG9nfT5cbiAgICAgIDxwPntwcm9tcHR9PC9wPlxuICAgICAgPFJlc3VsdExpc3RcbiAgICAgICAgcmVzdWx0cz17Y2hvaWNlc31cbiAgICAgICAgb25TZWxlY3Q9e29uU2VsZWN0fVxuICAgICAgICByZW5kZXJSZXN1bHQ9e3Jlc3VsdCA9PiByZXN1bHQuY29kZX1cbiAgICAgIC8+XG4gICAgPC9kaXY+XG4gIClcbn1cblxuRW51bVBpY2tlci5wcm9wVHlwZXMgPSB7XG4gIHZhbHVlOiBQcm9wVHlwZXMuYW55LmlzUmVxdWlyZWQsXG4gIHBhcmFtOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gIHByb21wdDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICBvblNlbGVjdDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxufVxuXG5FbnVtUGlja2VyLmRlZmF1bHRQcm9wcyA9IHtcbiAgdmFsdWU6ICcnXG59XG5cbmV4cG9ydCBkZWZhdWx0IEVudW1QaWNrZXJcbiIsImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcydcblxuZXhwb3J0IGNvbnN0IHBhcmFtID0gUHJvcFR5cGVzLm9uZU9mVHlwZShbXG4gIFByb3BUeXBlcy5vbmVPZihbJ2NvZGUnLCAnbGF5ZXInLCAnY29tbWFuZCddKSxcbiAgUHJvcFR5cGVzLnNoYXBlKHsgdHlwZTogUHJvcFR5cGVzLm9uZU9mKFsncGxhY2Vob2xkZXInXSkgfSksXG4gIFByb3BUeXBlcy5zaGFwZSh7XG4gICAgZW51bTogUHJvcFR5cGVzLmFycmF5LFxuICAgIHJhdzogUHJvcFR5cGVzLmJvb2wsXG4gICAgbmFtZTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgIHR5cGU6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZFxuICB9KVxuXSlcblxuZXhwb3J0IGNvbnN0IHBhcmFtcyA9IFByb3BUeXBlcy5hcnJheU9mKHBhcmFtKVxuZXhwb3J0IGNvbnN0IHZhbHVlID0gUHJvcFR5cGVzLm9uZU9mVHlwZShbXG4gIFByb3BUeXBlcy5zdHJpbmcsXG4gIFByb3BUeXBlcy5udW1iZXJcbl0pXG5leHBvcnQgY29uc3Qgc291cmNlID0gUHJvcFR5cGVzLnNoYXBlKHtcbiAgcGFyYW1zLFxuICBjb2RlOiB2YWx1ZS5pc1JlcXVpcmVkLFxuICBkZXNjcmlwdGlvbjogUHJvcFR5cGVzLnN0cmluZyxcbiAgc3ltYm9sOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBmYUljb246IFByb3BUeXBlcy5zdHJpbmdcbn0pXG5cbmNvbnN0IG5vZGVTaGFwZSA9IHsgdmFsdWUsIHNvdXJjZSB9XG5ub2RlU2hhcGUucGFyYW1zID0gUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnNoYXBlKG5vZGVTaGFwZSkpXG5cbmV4cG9ydCBjb25zdCBub2RlID0gUHJvcFR5cGVzLnNoYXBlKG5vZGVTaGFwZSlcblxuZXhwb3J0IGNvbnN0IGJpbmROb2RlID0gbm9kZVxuXG5leHBvcnQgY29uc3QgaW5kZXggPSBQcm9wVHlwZXMuYXJyYXlPZihub2RlKVxuIiwiaW1wb3J0IGZ1enp5c29ydCBmcm9tICdmdXp6eXNvcnQnXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnXG5pbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlQ29udGV4dCwgdXNlTWVtbyB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgYmluZE5vZGUgfSBmcm9tICcuLi9LZXlib2FyZC9CaW5kaW5nL2JpbmRQcm9wVHlwZXMnXG5cbmltcG9ydCB7IFNlYXJjaENvbnRleHQgfSBmcm9tICcuLi9wcm92aWRlcnMnXG5pbXBvcnQgUmVzdWx0TGlzdCBmcm9tICcuL1Jlc3VsdExpc3QnXG5pbXBvcnQgU2VhcmNoRmlsdGVyIGZyb20gJy4vU2VhcmNoRmlsdGVyJ1xuaW1wb3J0IHN0eWxlIGZyb20gJy4vc3R5bGUubW9kdWxlLmNzcydcblxuZnVuY3Rpb24gR2VuZXJpY1BpY2tlciAocHJvcHMpIHtcbiAgY29uc3QgeyBwcm9tcHQsIHNlYXJjaEtleSwgbm9kZSwgcGFyYW0sIGJlaGF2aW91ciwgY29udGV4dCwgb25TZWxlY3QgfSA9IHByb3BzXG5cbiAgY29uc3QgeyBnZXRTZWFyY2hUYXJnZXRzIH0gPSB1c2VDb250ZXh0KFNlYXJjaENvbnRleHQpXG4gIGNvbnN0IHJlbmRlclNlYXJjaFJlc3VsdCA9IHVzZUNhbGxiYWNrKHJlc3VsdCA9PiB7XG4gICAgY29uc3QgdGl0bGUgPSByZXN1bHQuc2VhcmNoXG4gICAgICA/IChcbiAgICAgIDxzcGFuIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7XG4gICAgICAgIF9faHRtbDogZnV6enlzb3J0LmhpZ2hsaWdodChyZXN1bHQuc2VhcmNoKVxuICAgICAgfX0gLz5cbiAgICAgICAgKVxuICAgICAgOiAoXG4gICAgICA8c3Bhbj5cbiAgICAgICAge3Jlc3VsdC5jb2RlfVxuICAgICAgPC9zcGFuPlxuICAgICAgICApXG5cbiAgICByZXR1cm4gKFxuICAgICAgPD5cbiAgICAgICAge3RpdGxlfVxuICAgICAgICB7cmVzdWx0LmRlc2NyaXB0aW9uICYmIDxwIGNsYXNzTmFtZT17c3R5bGUuZGVzY3JpcHRpb259PntyZXN1bHQuZGVzY3JpcHRpb259PC9wPn1cbiAgICAgIDwvPlxuICAgIClcbiAgfSwgW10pXG5cbiAgY29uc3QgY2hvaWNlcyA9IHVzZU1lbW8oKCkgPT4ge1xuICAgIHJldHVybiBnZXRTZWFyY2hUYXJnZXRzKHBhcmFtLCBiZWhhdmlvdXIuY29kZSwgY29udGV4dClcbiAgfSwgW2dldFNlYXJjaFRhcmdldHMsIHBhcmFtLCBiZWhhdmlvdXIsIGNvbnRleHRdKVxuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlLmRpYWxvZ30+XG4gICAgICA8cD57cHJvbXB0fTwvcD5cbiAgICAgIDxTZWFyY2hGaWx0ZXJcbiAgICAgICAgY2hvaWNlcz17Y2hvaWNlc31cbiAgICAgICAgaW5pdGlhbFF1ZXJ5PXtub2RlLnZhbHVlIHx8ICcnfVxuICAgICAgICBzZWFyY2hLZXk9e3NlYXJjaEtleX1cbiAgICAgICAgcmVuZGVyUmVzdWx0cz17cmVzdWx0cyA9PiByZXN1bHRzICYmIChcbiAgICAgICAgICA8UmVzdWx0TGlzdFxuICAgICAgICAgICAgcmVzdWx0cz17cmVzdWx0c31cbiAgICAgICAgICAgIG9uU2VsZWN0PXtvblNlbGVjdH1cbiAgICAgICAgICAgIHJlbmRlclJlc3VsdD17cmVuZGVyU2VhcmNoUmVzdWx0fVxuICAgICAgICAgIC8+XG4gICAgICAgICl9XG4gICAgICAvPlxuICAgIDwvZGl2PlxuICApXG59XG5cbkdlbmVyaWNQaWNrZXIucHJvcFR5cGVzID0ge1xuICBub2RlOiBiaW5kTm9kZS5pc1JlcXVpcmVkLFxuICBwYXJhbTogUHJvcFR5cGVzLm9uZU9mVHlwZShbXG4gICAgUHJvcFR5cGVzLnN0cmluZyxcbiAgICBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgZW51bTogUHJvcFR5cGVzLmFycmF5LFxuICAgICAgcmF3OiBQcm9wVHlwZXMuYm9vbCxcbiAgICAgIHR5cGU6IFByb3BUeXBlcy5zdHJpbmdcbiAgICB9KVxuICBdKS5pc1JlcXVpcmVkLFxuICBwcm9tcHQ6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgc2VhcmNoS2V5OiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIGJlaGF2aW91cjogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICBjb250ZXh0OiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIG9uU2VsZWN0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG59XG5cbmV4cG9ydCBkZWZhdWx0IEdlbmVyaWNQaWNrZXJcbiIsImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcydcbmltcG9ydCB7IHVzZUNhbGxiYWNrLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgQ2hyb21lUGlja2VyIH0gZnJvbSAncmVhY3QtY29sb3InXG5pbXBvcnQgQWN0aW9uQnV0dG9uIGZyb20gJy4uLy4uL0NvbW1vbi9BY3Rpb25CdXR0b24nXG5cbmZ1bmN0aW9uIEhTQlBpY2tlciAocHJvcHMpIHtcbiAgY29uc3QgeyBub2RlLCBvblNlbGVjdCB9ID0gcHJvcHNcbiAgY29uc3QgW2hzbCwgc2V0SHNsXSA9IHVzZVN0YXRlKHtcbiAgICBoOiBOdW1iZXIobm9kZS5wYXJhbXNbMF0udmFsdWUpLFxuICAgIHM6IE51bWJlcihub2RlLnBhcmFtc1sxXS52YWx1ZSkgLyAxMDAsXG4gICAgbDogTnVtYmVyKG5vZGUucGFyYW1zWzJdLnZhbHVlKSAvIDEwMFxuICB9KVxuXG4gIGNvbnN0IGhhbmRsZUNoYW5nZSA9IHVzZUNhbGxiYWNrKCh7IGhzbCB9KSA9PiB7XG4gICAgc2V0SHNsKGhzbClcbiAgfSwgW3NldEhzbF0pXG5cbiAgY29uc3QgaGFuZGxlQ29uZmlybSA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBvblNlbGVjdChbXG4gICAgICB7IHZhbHVlOiBNYXRoLnJvdW5kKGhzbC5oKSB9LFxuICAgICAgeyB2YWx1ZTogTWF0aC5yb3VuZChoc2wucyAqIDEwMCkgfSxcbiAgICAgIHsgdmFsdWU6IE1hdGgucm91bmQoaHNsLmwgKiAxMDApIH1cbiAgICBdKVxuICB9LCBbaHNsLCBvblNlbGVjdF0pXG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2PlxuICAgICAgPHA+U2VsZWN0IGNvbG91cjwvcD5cbiAgICAgIDxDaHJvbWVQaWNrZXJcbiAgICAgICAgY29sb3I9e2hzbH1cbiAgICAgICAgZGlzYWJsZUFscGhhPXt0cnVlfVxuICAgICAgICBvbkNoYW5nZUNvbXBsZXRlPXtoYW5kbGVDaGFuZ2V9XG4gICAgICAvPlxuICAgICAgPHAgc3R5bGU9e3sgdGV4dEFsaWduOiAnY2VudGVyJyB9fT5cbiAgICAgICAgPEFjdGlvbkJ1dHRvbiBvbkNsaWNrPXtoYW5kbGVDb25maXJtfT5Db25maXJtPC9BY3Rpb25CdXR0b24+XG4gICAgICA8L3A+XG4gICAgPC9kaXY+XG4gIClcbn1cblxuSFNCUGlja2VyLnByb3BUeXBlcyA9IHtcbiAgdmFsdWU6IFByb3BUeXBlcy5hbnkuaXNSZXF1aXJlZCxcbiAgcHJvbXB0OiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIHBhcmFtOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtcbiAgICBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgZW51bTogUHJvcFR5cGVzLmFycmF5LFxuICAgICAgcmF3OiBQcm9wVHlwZXMuYm9vbCxcbiAgICAgIHR5cGU6IFByb3BUeXBlcy5zdHJpbmdcbiAgICB9KVxuICBdKS5pc1JlcXVpcmVkLFxuICBvblNlbGVjdDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxufVxuXG5IU0JQaWNrZXIuZGVmYXVsdFByb3BzID0ge1xuICB2YWx1ZTogJydcbn1cblxuZXhwb3J0IGRlZmF1bHQgSFNCUGlja2VyXG4iLCIvLyBgY29kZWAgdmFsdWVzIG1heSBiZSBcInRyZWVzXCIgaW4gdGVybXMgb2Ygc3RydWN0dXJlLCBidXQgdGhpcyBpcyBvbmx5XG4vLyBiZWNhdXNlIG9mIFwibW9kaWZpZXIgbWFjcm9zXCIgKGUuZy4gYExTKEEpYCkgd2hpY2ggbWF5IGJlIG5lc3RlZCByZWN1cnNpdmVseVxuLy8gYnV0IGVhY2ggbGV2ZWwgb2YgdGhlIHRyZWUgaGFzIGF0IG1vc3Qgb25lIGNoaWxkLiBUaGlzIG1lYW5zIHRoZSBkZWVwZXN0XG4vLyBub2RlIGlzIG91ciBhY3R1YWwga2V5Y29kZSBhbmQgZXZlcnl0aGluZyBhYm92ZSB0aGF0IGlzIGEgbW9kaWZpZXIuXG5leHBvcnQgZnVuY3Rpb24gdHJlZVRvU2VxdWVuY2UgKHRyZWUpIHtcbiAgcmV0dXJuIHRyZWUucGFyYW1zLmxlbmd0aCA+IDBcbiAgICA/IFt0cmVlLCAuLi50cmVlVG9TZXF1ZW5jZSh0cmVlLnBhcmFtc1swXSldXG4gICAgOiBbdHJlZV1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNlcXVlbmNlVG9UcmVlIChbdmFsdWUsIC4uLnNlcV0pIHtcbiAgY29uc3QgcGFyYW1zID0gc2VxLmxlbmd0aCA9PT0gMCA/IFtdIDogW3NlcXVlbmNlVG9UcmVlKHNlcSldXG4gIHJldHVybiB7IHZhbHVlLCBwYXJhbXMgfVxufVxuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1syXS51c2VbMV0hLi9zdHlsZXMubW9kdWxlLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzJdLnVzZVsxXSEuL3N0eWxlcy5tb2R1bGUuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJ1xuaW1wb3J0IHN0eWxlIGZyb20gJy4vc3R5bGVzLm1vZHVsZS5jc3MnXG5cbmNvbnN0IGxlZnRNb2RpZmllcnMgPSBbJ0xTSEZUJywgJ0xBTFQnLCAnTENUUkwnLCAnTEdVSSddXG5jb25zdCByaWdodE1vZGlmaWVycyA9IFsnUlNIRlQnLCAnUkFMVCcsICdSQ1RSTCcsICdSR1VJJ11cblxuZnVuY3Rpb24gTW9kaWZpZXJzUm93ICh7IHNlbGVjdGVkLCByb3csIG9uU2VsZWN0IH0pIHtcbiAgcmV0dXJuIChcbiAgICA8dWwgY2xhc3NOYW1lPXtzdHlsZS5tb2RpZmllcnN9PlxuICAgICAge3Jvdy5tYXAoKG1vZCwgaSkgPT4gKFxuICAgICAgICA8bGlcbiAgICAgICAgICBrZXk9e2l9XG4gICAgICAgICAgY2xhc3NOYW1lPXtzZWxlY3RlZC5pbmNsdWRlcyhtb2QpID8gc3R5bGUuc2VsZWN0ZWQgOiAnJ31cbiAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBvblNlbGVjdChtb2QpfVxuICAgICAgICA+e21vZH08L2xpPlxuICAgICAgKSl9XG4gICAgPC91bD5cbiAgKVxufVxuXG5mdW5jdGlvbiBNb2RpZmllcnNQaWNrZXIgKHsgc2VsZWN0ZWQsIG9uQ2hhbmdlIH0pIHtcbiAgZnVuY3Rpb24gaGFuZGxlU2VsZWN0aW9uIChtb2RpZmllcikge1xuICAgIG9uQ2hhbmdlKFxuICAgICAgc2VsZWN0ZWQuaW5jbHVkZXMobW9kaWZpZXIpXG4gICAgICAgID8gc2VsZWN0ZWQuZmlsdGVyKG1vZCA9PiBtb2QgIT09IG1vZGlmaWVyKVxuICAgICAgICA6IFsuLi5zZWxlY3RlZCwgbW9kaWZpZXJdXG4gICAgKVxuICB9XG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIDxNb2RpZmllcnNSb3cgcm93PXtsZWZ0TW9kaWZpZXJzfSBzZWxlY3RlZD17c2VsZWN0ZWR9IG9uU2VsZWN0PXtoYW5kbGVTZWxlY3Rpb259IC8+XG4gICAgICA8TW9kaWZpZXJzUm93IHJvdz17cmlnaHRNb2RpZmllcnN9IHNlbGVjdGVkPXtzZWxlY3RlZH0gb25TZWxlY3Q9e2hhbmRsZVNlbGVjdGlvbn0gLz5cbiAgICA8Lz5cbiAgKVxufVxuXG5Nb2RpZmllcnNQaWNrZXIucHJvcFR5cGVzID0ge1xuICBzZWxlY3RlZDogUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnN0cmluZylcbn1cblxuZXhwb3J0IGRlZmF1bHQgTW9kaWZpZXJzUGlja2VyXG4iLCJpbXBvcnQgY29tcGFjdCBmcm9tICdsb2Rhc2gvY29tcGFjdCdcbmltcG9ydCB7IHVzZUNhbGxiYWNrIH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnXG5cbmltcG9ydCAqIGFzIGJpbmRQcm9wVHlwZXMgZnJvbSAnLi9iaW5kUHJvcFR5cGVzJ1xuaW1wb3J0IHN0eWxlcyBmcm9tICcuLi9LZXlzL3N0eWxlcy5tb2R1bGUuY3NzJ1xuaW1wb3J0IEljb24gZnJvbSAnLi4vLi4vQ29tbW9uL0ljb24nXG5cbmV4cG9ydCBmdW5jdGlvbiBOdWxsS2V5ICgpIHtcbiAgcmV0dXJuIDxzcGFuPuKmuDwvc3Bhbj5cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFNvdXJjZVRpdGxlIChzb3VyY2UpIHtcbiAgcmV0dXJuIHNvdXJjZSAmJiBgKCR7c291cmNlLmNvZGV9KSAke3NvdXJjZS5kZXNjcmlwdGlvbn1gXG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW5kZXJTb3VyY2UgKHNvdXJjZSkge1xuICBjb25zdCB0ZXh0ID0gc291cmNlICYmIChzb3VyY2U/LnN5bWJvbCB8fCBzb3VyY2U/LmNvZGU/LnRvU3RyaW5nKCkpXG4gIGNvbnN0IGljb24gPSBzb3VyY2U/LmZhSWNvbiAmJiA8SWNvbiBuYW1lPXtzb3VyY2UuZmFJY29ufSAvPlxuICByZXR1cm4gaWNvbiB8fCB0ZXh0IHx8IDxOdWxsS2V5IC8+XG59XG5cbmZ1bmN0aW9uIEJpbmRWYWx1ZSAocHJvcHMpIHtcbiAgY29uc3QgeyBub2RlLCBvblNlbGVjdCB9ID0gcHJvcHNcbiAgY29uc3QgeyB2YWx1ZSwgc291cmNlLCBfaXNQbGFjZWhvbGRlciB9ID0gbm9kZVxuICBjb25zdCB0aXRsZSA9IGdldFNvdXJjZVRpdGxlKHNvdXJjZSlcblxuICBjb25zdCBoYW5kbGVDbGljayA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uIChldmVudCkge1xuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpXG4gICAgb25TZWxlY3QoeyBub2RlIH0pXG4gIH0sIFtub2RlLCBvblNlbGVjdF0pXG5cbiAgcmV0dXJuIChcbiAgICA8c3BhblxuICAgICAgY2xhc3NOYW1lPXtjb21wYWN0KFtcbiAgICAgICAgc3R5bGVzLmNvZGUsXG4gICAgICAgICh2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IF9pc1BsYWNlaG9sZGVyKSAmJiBzdHlsZXMubWlzc2luZ1ZhbHVlXG4gICAgICBdKS5qb2luKCcgJyl9XG4gICAgICB0aXRsZT17dGl0bGV9XG4gICAgICBvbkNsaWNrPXtoYW5kbGVDbGlja31cbiAgICA+XG4gICAgICB7cmVuZGVyU291cmNlKHNvdXJjZSl9XG4gICAgPC9zcGFuPlxuICApXG59XG5cbkJpbmRWYWx1ZS5wcm9wVHlwZXMgPSB7XG4gIG5vZGU6IGJpbmRQcm9wVHlwZXMuYmluZE5vZGUuaXNSZXF1aXJlZCxcbiAgb25TZWxlY3Q6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbn1cblxuZXhwb3J0IGRlZmF1bHQgQmluZFZhbHVlXG4iLCJpbXBvcnQgeyBGcmFnbWVudCwgdXNlQ2FsbGJhY2ssIHVzZU1lbW8gfSBmcm9tICdyZWFjdCdcbmltcG9ydCBjb21wYWN0IGZyb20gJ2xvZGFzaC9jb21wYWN0J1xuaW1wb3J0IG1hcCBmcm9tICdsb2Rhc2gvbWFwJ1xuXG5pbXBvcnQgeyBnZXRTb3VyY2VUaXRsZSwgcmVuZGVyU291cmNlIH0gZnJvbSAnLi4vLi4vS2V5Ym9hcmQvQmluZGluZy9CaW5kVmFsdWUnXG5pbXBvcnQgc3R5bGVzIGZyb20gJy4uLy4uL0tleWJvYXJkL0tleXMvc3R5bGVzLm1vZHVsZS5jc3MnXG5pbXBvcnQgeyB0cmVlVG9TZXF1ZW5jZSB9IGZyb20gJy4vaGVscGVycydcblxuZnVuY3Rpb24gS2V5Y29kZUJpbmROb2RlICh7IG5vZGUsIG9uU2VsZWN0IH0pIHtcbiAgY29uc3QgaGFuZGxlQ2xpY2sgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKVxuICAgIG9uU2VsZWN0KHsgbm9kZSwgdHlwZTogJ3RyZWUnIH0pXG4gIH0sIFtub2RlLCBvblNlbGVjdF0pXG5cbiAgY29uc3QgY29kZXMgPSB1c2VNZW1vKCgpID0+IG1hcCh0cmVlVG9TZXF1ZW5jZShub2RlKSwgJ3NvdXJjZScpLCBbbm9kZV0pXG4gIGNvbnN0IGNvZGVMYWJlbHMgPSB1c2VNZW1vKCgpID0+IChcbiAgICBjb2Rlcy5tYXAocmVuZGVyU291cmNlKVxuICAgICAgLm1hcCgobGFiZWwsIGkpID0+IDxGcmFnbWVudCBrZXk9e2l9PntsYWJlbH08L0ZyYWdtZW50PilcbiAgICAgIC5yZWR1Y2UoKGxhYmVscywgbGFiZWwpID0+IChcbiAgICAgICAgbGFiZWxzLmxlbmd0aCA9PT0gMFxuICAgICAgICAgID8gW2xhYmVsXVxuICAgICAgICAgIDogWy4uLmxhYmVscywgJyAnLCBsYWJlbF1cbiAgICAgICksIFtdKVxuICApLCBbY29kZXNdKVxuICBjb25zdCB0aXRsZSA9IHVzZU1lbW8oKCkgPT4gKFxuICAgIGNvZGVzLm1hcChnZXRTb3VyY2VUaXRsZSkuam9pbignICsgJylcbiAgKSwgW2NvZGVzXSlcblxuICBjb25zdCBtaXNzaW5nID0gKFxuICAgIG5vZGUuc291cmNlPy5jb2RlID09PSB1bmRlZmluZWQgfHxcbiAgICBub2RlLnZhbHVlID09PSB1bmRlZmluZWQgfHxcbiAgICBub2RlLl9pc1BsYWNlaG9sZGVyXG4gIClcblxuICByZXR1cm4gKFxuICAgIDxzcGFuXG4gICAgICBjbGFzc05hbWU9e2NvbXBhY3QoW1xuICAgICAgICBzdHlsZXMuY29kZSxcbiAgICAgICAgbWlzc2luZyAmJiBzdHlsZXMubWlzc2luZ1ZhbHVlXG4gICAgICBdKS5qb2luKCcgJyl9XG4gICAgICB0aXRsZT17dGl0bGV9XG4gICAgICBvbkNsaWNrPXtoYW5kbGVDbGlja31cbiAgICA+XG4gICAgICB7Y29kZUxhYmVsc31cbiAgICA8L3NwYW4+XG4gIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgS2V5Y29kZUJpbmROb2RlXG4iLCJpbXBvcnQgZ2V0IGZyb20gJ2xvZGFzaC9nZXQnXG5pbXBvcnQga2V5QnkgZnJvbSAnbG9kYXNoL2tleUJ5J1xuZXhwb3J0IHsgbG9hZEtleW1hcCB9IGZyb20gJy4vYXBpJ1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0QmVoYXZpb3VyUGFyYW1zIChwYXJzZWRQYXJhbXMsIGJlaGF2aW91cikge1xuICBjb25zdCBmaXJzdFBhcnNlZFBhcmFtID0gZ2V0KHBhcnNlZFBhcmFtcywgJ1swXScsIHt9KVxuICBjb25zdCBjb21tYW5kcyA9IGtleUJ5KGJlaGF2aW91ci5jb21tYW5kcywgJ2NvZGUnKVxuICByZXR1cm4gW10uY29uY2F0KFxuICAgIGJlaGF2aW91ci5wYXJhbXMgfHwgW10sXG4gICAgZ2V0KGJlaGF2aW91ciwgJ3BhcmFtc1swXScpID09PSAnY29tbWFuZCdcbiAgICAgID8gZ2V0KGNvbW1hbmRzW2ZpcnN0UGFyc2VkUGFyYW0udmFsdWVdLCAnYWRkaXRpb25hbFBhcmFtcycsIFtdKVxuICAgICAgOiBbXVxuICApXG59XG4iLCJpbXBvcnQgZ2V0IGZyb20gJ2xvZGFzaC9nZXQnXG5pbXBvcnQga2V5QnkgZnJvbSAnbG9kYXNoL2tleUJ5J1xuXG5pbXBvcnQgeyBnZXRCZWhhdmlvdXJQYXJhbXMgfSBmcm9tICcuLi8uLi9rZXltYXAnXG5cbmV4cG9ydCBmdW5jdGlvbiBtYWtlSW5kZXggKHRyZWUpIHtcbiAgY29uc3QgaW5kZXggPSBbXVxuICA7KGZ1bmN0aW9uIHRyYXZlcnNlICh0cmVlKSB7XG4gICAgY29uc3QgcGFyYW1zID0gdHJlZS5wYXJhbXMgfHwgW11cbiAgICBpbmRleC5wdXNoKHRyZWUpXG4gICAgcGFyYW1zLmZvckVhY2godHJhdmVyc2UpXG4gIH0pKHRyZWUpXG5cbiAgcmV0dXJuIGluZGV4XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1NpbXBsZSAobm9ybWFsaXplZCkge1xuICBjb25zdCBbZmlyc3RdID0gbm9ybWFsaXplZC5wYXJhbXNcbiAgY29uc3Qgc3ltYm9sID0gZ2V0KGZpcnN0LCAnc291cmNlLnN5bWJvbCcsIGdldChmaXJzdCwgJ3NvdXJjZS5jb2RlJywgJycpKVxuICBjb25zdCBoYXNJY29uID0gISFnZXQoZmlyc3QsICdzb3VyY2UuZmFJY29uJylcbiAgY29uc3Qgc2hvcnRTeW1ib2wgPSBoYXNJY29uIHx8IHN5bWJvbC5sZW5ndGggPT09IDFcbiAgY29uc3Qgc2luZ2xlUGFyYW0gPSBub3JtYWxpemVkLnBhcmFtcy5sZW5ndGggPT09IDFcbiAgcmV0dXJuIHNpbmdsZVBhcmFtICYmIHNob3J0U3ltYm9sXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0NvbXBsZXggKG5vcm1hbGl6ZWQsIGJlaGF2aW91clBhcmFtcykge1xuICBjb25zdCBbZmlyc3RdID0gbm9ybWFsaXplZC5wYXJhbXNcbiAgY29uc3Qgc3ltYm9sID0gZ2V0KGZpcnN0LCAnc291cmNlLnN5bWJvbCcsIGdldChmaXJzdCwgJ3ZhbHVlJywgJycpKVxuICBjb25zdCBoYXNJY29uID0gISFnZXQoZmlyc3QsICdzb3VyY2UuZmFJY29uJylcbiAgY29uc3QgaXNMb25nU3ltYm9sID0gIWhhc0ljb24gJiYgc3ltYm9sLmxlbmd0aCA+IDRcbiAgY29uc3QgaXNNdWx0aVBhcmFtID0gYmVoYXZpb3VyUGFyYW1zLmxlbmd0aCA+IDFcbiAgY29uc3QgaXNOZXN0ZWRQYXJhbSA9IGdldChmaXJzdCwgJ3BhcmFtcycsIFtdKS5sZW5ndGggPiAwXG5cbiAgcmV0dXJuIGlzTG9uZ1N5bWJvbCB8fCBpc011bHRpUGFyYW0gfHwgaXNOZXN0ZWRQYXJhbVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlUHJvbXB0TWVzc2FnZSAocGFyYW0pIHtcbiAgY29uc3QgcHJvbXB0TWFwcGluZyA9IHtcbiAgICBsYXllcjogJ1NlbGVjdCBsYXllcicsXG4gICAgbW9kOiAnU2VsZWN0IG1vZGlmaWVyJyxcbiAgICBiZWhhdmlvdXI6ICdTZWxlY3QgYmVoYXZpb3VyJyxcbiAgICBjb21tYW5kOiAnU2VsZWN0IGNvbW1hbmQnLFxuICAgIGtleWNvZGU6ICdTZWxlY3Qga2V5IGNvZGUnXG4gIH1cblxuICBpZiAocGFyYW0ubmFtZSkge1xuICAgIHJldHVybiBgU2VsZWN0ICR7cGFyYW0ubmFtZX1gXG4gIH1cblxuICByZXR1cm4gKFxuICAgIHByb21wdE1hcHBpbmdbcGFyYW1dIHx8XG4gICAgcHJvbXB0TWFwcGluZy5rZXljb2RlXG4gIClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGh5ZHJhdGVUcmVlICh2YWx1ZSwgcGFyYW1zLCBzb3VyY2VzLCBjb250ZXh0ID0gJ25vbmUnLCBtZXJnZWRHbHlwaHMpIHtcbiAgY29uc3QgYmluZCA9IHZhbHVlXG4gIGNvbnN0IGJlaGF2aW91ciA9IGdldChzb3VyY2VzLmJlaGF2aW91cnNCeUNvbnRleHRbY29udGV4dF0sIGJpbmQsIHt9KVxuICBjb25zdCBiZWhhdmlvdXJQYXJhbXMgPSBnZXRCZWhhdmlvdXJQYXJhbXMocGFyYW1zLCBiZWhhdmlvdXIpXG4gIGNvbnN0IGNvbW1hbmRzID0ga2V5QnkoYmVoYXZpb3VyLmNvbW1hbmRzLCAnY29kZScpXG5cbiAgZnVuY3Rpb24gZ2V0U291cmNlVmFsdWUgKHZhbHVlLCBhcykge1xuICAgIGlmIChhcyA9PT0gJ2NvbW1hbmQnKSByZXR1cm4gY29tbWFuZHNbdmFsdWVdXG4gICAgaWYgKGFzLnJhdyB8fCBhcy5lbnVtKSByZXR1cm4geyBjb2RlOiB2YWx1ZSB9XG4gICAgLy8gVE9ETzogU2hvdWxkbid0IG5lZWQgdG8gcmVuZGVyIHBsYWNlaG9sZGVyXG4gICAgaWYgKGFzLnR5cGUgPT09ICdwbGFjZWhvbGRlcicpIHJldHVybiB7IGNvZGU6IHZhbHVlIH1cbiAgICByZXR1cm4gc291cmNlcz8uW2FzXT8uW3ZhbHVlXVxuICB9XG5cbiAgZnVuY3Rpb24gaHlkcmF0ZU5vZGUgKG5vZGUsIHNsb3QpIHtcbiAgICBpZiAoIW5vZGUpIHtcbiAgICAgIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIHNsb3QsIHBhcmFtczogW10gfVxuICAgIH1cbiAgICBjb25zdCB7IHZhbHVlLCBwYXJhbXMsIF9pc1BsYWNlaG9sZGVyIH0gPSBub2RlXG4gICAgY29uc3Qgc291cmNlID0gZ2V0U291cmNlVmFsdWUodmFsdWUsIHNsb3QpXG5cbiAgICByZXR1cm4ge1xuICAgICAgdmFsdWUsXG4gICAgICBfaXNQbGFjZWhvbGRlcixcbiAgICAgIHNsb3QsXG4gICAgICBzb3VyY2U6IHtcbiAgICAgICAgLi4uc291cmNlLFxuICAgICAgICBzeW1ib2w6IGdldChtZXJnZWRHbHlwaHMsIFtzb3VyY2U/Lm5hbWUsICdzeW1ib2wnXSwgc291cmNlPy5zeW1ib2wpLFxuICAgICAgICBmYUljb246IGdldChtZXJnZWRHbHlwaHMsIFtzb3VyY2U/Lm5hbWUsICdmYUljb24nXSwgc291cmNlPy5mYUljb24pXG4gICAgICB9LFxuICAgICAgcGFyYW1zOiBnZXQoc291cmNlLCAncGFyYW1zJywgW10pLm1hcCgoc2xvdCwgaSkgPT4gKFxuICAgICAgICBoeWRyYXRlTm9kZShwYXJhbXNbaV0sIHNsb3QpXG4gICAgICApKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgdmFsdWUsXG4gICAgc2xvdDogJ2JlaGF2aW91cicsXG4gICAgc291cmNlOiBiZWhhdmlvdXIsXG4gICAgcGFyYW1zOiBiZWhhdmlvdXJQYXJhbXMubWFwKChzbG90LCBpKSA9PiAoXG4gICAgICBoeWRyYXRlTm9kZShwYXJhbXNbaV0sIHNsb3QpXG4gICAgKSlcbiAgfVxufVxuIiwiaW1wb3J0IGZ1enp5c29ydCBmcm9tICdmdXp6eXNvcnQnXG5pbXBvcnQgY29tcGFjdCBmcm9tICdsb2Rhc2gvY29tcGFjdCdcbmltcG9ydCBtYXAgZnJvbSAnbG9kYXNoL21hcCdcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcydcbmltcG9ydCB7IHVzZUNhbGxiYWNrLCB1c2VDb250ZXh0LCB1c2VNZW1vLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0J1xuXG5pbXBvcnQgeyB0cmVlVG9TZXF1ZW5jZSwgc2VxdWVuY2VUb1RyZWUgfSBmcm9tICcuL2hlbHBlcnMnXG5pbXBvcnQgeyBTZWFyY2hDb250ZXh0IH0gZnJvbSAnLi4vLi4vcHJvdmlkZXJzJ1xuaW1wb3J0IHsgYmluZE5vZGUgfSBmcm9tICcuLi8uLi9LZXlib2FyZC9CaW5kaW5nL2JpbmRQcm9wVHlwZXMnXG5cbmltcG9ydCBSZXN1bHRMaXN0IGZyb20gJy4uLy4uL1ZhbHVlUGlja2VyL1Jlc3VsdExpc3QnXG5pbXBvcnQgcmVzdWx0TGlzdFN0eWxlIGZyb20gJy4uLy4uL1ZhbHVlUGlja2VyL3N0eWxlLm1vZHVsZS5jc3MnXG5pbXBvcnQgU2VhcmNoRmlsdGVyIGZyb20gJy4uLy4uL1ZhbHVlUGlja2VyL1NlYXJjaEZpbHRlcidcbmltcG9ydCBNb2RpZmllcnNQaWNrZXIgZnJvbSAnLi9Nb2RpZmllcnNQaWNrZXInXG5pbXBvcnQgS2V5Y29kZUJpbmROb2RlIGZyb20gJy4vS2V5Y29kZUJpbmROb2RlJ1xuaW1wb3J0IHsgaHlkcmF0ZVRyZWUgfSBmcm9tICcuLi8uLi9LZXlib2FyZC9CaW5kaW5nL3V0aWwnXG5pbXBvcnQgS2V5V3JhcHBlciBmcm9tICcuLi8uLi9LZXlib2FyZC9LZXlzL0tleVdyYXBwZXInXG5pbXBvcnQgQWN0aW9uQnV0dG9uIGZyb20gJy4uLy4uL0NvbW1vbi9BY3Rpb25CdXR0b24nXG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vc3R5bGVzLm1vZHVsZS5jc3MnXG5pbXBvcnQgVGlwIGZyb20gJy4uLy4uL0NvbW1vbi9UaXAnXG5cbmNvbnN0IG1vZGlmaWVyc01hcCA9IHtcbiAgTFNIRlQ6ICdMUycsXG4gIExDVFJMOiAnTEMnLFxuICBMQUxUOiAnTEEnLFxuICBMR1VJOiAnTEcnLFxuICBSU0hGVDogJ1JTJyxcbiAgUkNUUkw6ICdSQycsXG4gIFJBTFQ6ICdSQScsXG4gIFJHVUk6ICdSRydcbn1cblxuZnVuY3Rpb24gcmVuZGVyU2VhcmNoUmVzdWx0IChyZXN1bHQpIHtcbiAgY29uc3QgdGl0bGUgPSByZXN1bHQuc2VhcmNoXG4gICAgPyA8c3BhbiBkYW5nZXJvdXNseVNldElubmVySFRNTD17eyBfX2h0bWw6IGZ1enp5c29ydC5oaWdobGlnaHQocmVzdWx0LnNlYXJjaCkgfX0gLz5cbiAgICA6IDxzcGFuPntyZXN1bHQuY29kZX08L3NwYW4+XG5cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAge3RpdGxlfVxuICAgICAgPHAgY2xhc3NOYW1lPXtyZXN1bHRMaXN0U3R5bGUuZGVzY3JpcHRpb259PntyZXN1bHQuZGVzY3JpcHRpb259PC9wPlxuICAgIDwvPlxuICApXG59XG5cbmZ1bmN0aW9uIEtleWNvZGVQaWNrZXIgKHsgbm9kZSwgb25TZWxlY3QsIGJlaGF2aW91ciB9KSB7XG4gIGNvbnN0IHsgZ2V0U2VhcmNoVGFyZ2V0cywgc291cmNlcywgbWVyZ2VkR2x5cGhzIH0gPSB1c2VDb250ZXh0KFNlYXJjaENvbnRleHQpXG5cbiAgY29uc3QgY29kZXMgPSB1c2VNZW1vKCgpID0+IG1hcCh0cmVlVG9TZXF1ZW5jZShub2RlKSwgJ3NvdXJjZScpLCBbbm9kZV0pXG4gIGNvbnN0IGluaXRpYWxNb2RpZmllcnMgPSBjb2Rlcy5sZW5ndGggPT09IDEgPyBbXSA6IGNvZGVzLnNsaWNlKDAsIC0xKVxuICBjb25zdCBbc2VsZWN0ZWRNb2RpZmllcnMsIHNldFNlbGVjdGVkTW9kaWZpZXJzXSA9IHVzZVN0YXRlKG1hcChpbml0aWFsTW9kaWZpZXJzLCAnbmFtZScpKVxuICBjb25zdCBbc2VsZWN0ZWRLZXljb2RlLCBzZXRTZWxlY3RlZEtleWNvZGVdID0gdXNlU3RhdGUoY29kZXMuYXQoLTEpKVxuXG4gIGNvbnN0IGNob2ljZXMgPSB1c2VNZW1vKCgpID0+IHtcbiAgICAvLyBiaXQgb2YgYSBoYWNrOyB3ZSBjYW4ndCB1c2UgdGhlIHNlYXJjaCBwaWNrZXIgdG8gc2VsZWN0IHRoZSBcImZ1bmN0aW9uXCJcbiAgICAvLyB2ZXJzaW9uIG9mIG1vZGlmaWVyIGtleWNvZGVzIGJlY2F1c2UgdGhleSB3b24ndCBlbmQgdXAgaW4gdGhlIG1vZGlmaWVyc1xuICAgIC8vIGxpc3QgYW5kIHdlIGFyZW4ndCBhbGxvd2luZyBmb3IgcG9wdWxhdGlvbiBvZiB0aGVpciBwYXJhbWV0ZXJzLlxuICAgIC8vIFRPRE86IG9uY2UgdGhpcyBwaWNrZXIgYmVjb21lcyB0aGUgXCJzdGFuZGFyZFwiIHRoZSBmdW5jdGlvbiBtYWNyb3Mgc2hvdWxkXG4gICAgLy8gbm90IGJlIHRyZWF0ZWQgYXMga2V5Y29kZXMuXG4gICAgY29uc3QgY29kZXMgPSBnZXRTZWFyY2hUYXJnZXRzKCdjb2RlJywgYmVoYXZpb3VyLmNvZGUpXG4gICAgcmV0dXJuIGNvZGVzLmZpbHRlcihjb2RlID0+IGNvZGUucGFyYW1zLmxlbmd0aCA9PT0gMClcbiAgfSwgW2dldFNlYXJjaFRhcmdldHMsIGJlaGF2aW91cl0pXG5cbiAgLy8gaGF2ZSB0byBoeWRyYXRlIHRvIGdldCBtZXJnZWQgZ2x5cGhzXG4gIC8vIGhhcmRjb2RpbmcgaXNuJ3QgZ3JlYXQgYnV0IGl0J3MgdGhlIGtleWNvZGUgcGlja2VyIHNvIG1heWJlICcma3AnIGlzIHJlYXNvbmFibGVcbiAgY29uc3QgaHlkcmF0ZWQgPSBoeWRyYXRlVHJlZShcbiAgICAnJmtwJyxcbiAgICBbeyB2YWx1ZTogc2VsZWN0ZWRLZXljb2RlPy5jb2RlLCBwYXJhbXM6IHNlbGVjdGVkS2V5Y29kZT8ucGFyYW1zIH1dLFxuICAgIHNvdXJjZXMsXG4gICAgdW5kZWZpbmVkLFxuICAgIG1lcmdlZEdseXBoc1xuICApXG5cbiAgY29uc3Qgc2VsZWN0ID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gKGtleWNvZGUsIG1vZGlmaWVycykge1xuICAgIGNvbnN0IG1vZGlmaWVyRnVuY3Rpb25zID0gbW9kaWZpZXJzLm1hcChtb2QgPT4gbW9kaWZpZXJzTWFwW21vZF0pXG4gICAgY29uc3QgdHJlZSA9IHNlcXVlbmNlVG9UcmVlKGNvbXBhY3QoWy4uLm1vZGlmaWVyRnVuY3Rpb25zLCBrZXljb2RlPy5jb2RlXSkpXG5cbiAgICBvblNlbGVjdCh0cmVlKVxuICB9LCBbb25TZWxlY3RdKVxuXG4gIGNvbnN0IGhhbmRsZVNlbGVjdEtleWNvZGUgPSB1c2VDYWxsYmFjaygocmVzdWx0LCBldmVudCkgPT4ge1xuICAgIGlmIChldmVudC50eXBlID09PSAnZGJsY2xpY2snKSB7XG4gICAgICBzZWxlY3QocmVzdWx0LCBzZWxlY3RlZE1vZGlmaWVycylcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHNldFNlbGVjdGVkS2V5Y29kZShyZXN1bHQpXG4gIH0sIFtzZWxlY3QsIHNlbGVjdGVkTW9kaWZpZXJzLCBzZXRTZWxlY3RlZEtleWNvZGVdKVxuXG4gIGZ1bmN0aW9uIGhhbmRsZUNvbmZpcm0gKCkge1xuICAgIHNlbGVjdChzZWxlY3RlZEtleWNvZGUsIHNlbGVjdGVkTW9kaWZpZXJzKVxuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlQ2FuY2VsICgpIHtcbiAgICBvblNlbGVjdChub2RlKVxuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT17cmVzdWx0TGlzdFN0eWxlLmRpYWxvZ30+XG4gICAgICA8ZGl2IHN0eWxlPXt7IGRpc3BsYXk6ICdmbGV4JywgZ2FwOiAnMTBweCcgfX0+XG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgPHA+S2V5Y29kZTwvcD5cbiAgICAgICAgICA8S2V5V3JhcHBlciBjbGFzc05hbWU9e3N0eWxlcy5wcmV2aWV3S2V5Y29kZX0gc2VsZWN0YWJsZT17ZmFsc2V9PlxuICAgICAgICAgICAgPEtleWNvZGVCaW5kTm9kZVxuICAgICAgICAgICAgICBub2RlPXtoeWRyYXRlZC5wYXJhbXNbMF19XG4gICAgICAgICAgICAgIG9uU2VsZWN0PXsoKSA9PiB7fX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9LZXlXcmFwcGVyPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdj5cbiAgICAgICAgICA8cD5Nb2RpZmllcnM8L3A+XG4gICAgICAgICAgPE1vZGlmaWVyc1BpY2tlclxuICAgICAgICAgICAgc2VsZWN0ZWQ9e3NlbGVjdGVkTW9kaWZpZXJzfVxuICAgICAgICAgICAgb25DaGFuZ2U9e3NldFNlbGVjdGVkTW9kaWZpZXJzfVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8cD5BdmFpbGFibGUgS2V5Y29kZXM8L3A+XG4gICAgICA8U2VhcmNoRmlsdGVyXG4gICAgICAgIGNob2ljZXM9e2Nob2ljZXN9XG4gICAgICAgIGluaXRpYWxRdWVyeT17c2VsZWN0ZWRLZXljb2RlPy5jb2RlfVxuICAgICAgICBzZWFyY2hLZXk9XCJjb2RlXCJcbiAgICAgICAgcmVuZGVyUmVzdWx0cz17cmVzdWx0cyA9PiByZXN1bHRzICYmIChcbiAgICAgICAgICA8UmVzdWx0TGlzdFxuICAgICAgICAgICAgcmVzdWx0cz17cmVzdWx0c31cbiAgICAgICAgICAgIG9uU2VsZWN0PXtoYW5kbGVTZWxlY3RLZXljb2RlfVxuICAgICAgICAgICAgcmVuZGVyUmVzdWx0PXtyZW5kZXJTZWFyY2hSZXN1bHR9XG4gICAgICAgICAgLz5cbiAgICAgICAgKX1cbiAgICAgIC8+XG4gICAgICA8VGlwIGNsYXNzTmFtZT17c3R5bGVzLnF1aWNrQ2xvc2VUaXB9PlxuICAgICAgICBEb3VibGUtY2xpY2sgdG8gc2VsZWN0IGFuZCBjbG9zZSB0aGUgZGlhbG9nXG4gICAgICA8L1RpcD5cbiAgICAgIDxwIHN0eWxlPXt7IHRleHRBbGlnbjogJ2NlbnRlcicgfX0+XG4gICAgICAgIDxBY3Rpb25CdXR0b24gb25DbGljaz17aGFuZGxlQ29uZmlybX0+Q29uZmlybTwvQWN0aW9uQnV0dG9uPlxuICAgICAgICA8QWN0aW9uQnV0dG9uIG9uQ2xpY2s9e2hhbmRsZUNhbmNlbH0gc2Vjb25kYXJ5PkNhbmNlbDwvQWN0aW9uQnV0dG9uPlxuICAgICAgPC9wPlxuICAgIDwvZGl2PlxuICApXG59XG5cbktleWNvZGVQaWNrZXIucHJvcFR5cGVzID0ge1xuICBub2RlOiBiaW5kTm9kZS5pc1JlcXVpcmVkLFxuICBwYXJhbTogUHJvcFR5cGVzLm9uZU9mVHlwZShbXG4gICAgUHJvcFR5cGVzLnN0cmluZyxcbiAgICBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgZW51bTogUHJvcFR5cGVzLmFycmF5LFxuICAgICAgcmF3OiBQcm9wVHlwZXMuYm9vbCxcbiAgICAgIHR5cGU6IFByb3BUeXBlcy5zdHJpbmdcbiAgICB9KVxuICBdKS5pc1JlcXVpcmVkLFxuICBwcm9tcHQ6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgc2VhcmNoS2V5OiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIGJlaGF2aW91cjogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICBjb250ZXh0OiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIG9uU2VsZWN0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG59XG5cbmV4cG9ydCBkZWZhdWx0IEtleWNvZGVQaWNrZXJcbiIsImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcydcbmltcG9ydCB7IHVzZUNhbGxiYWNrLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0J1xuXG5pbXBvcnQgc3R5bGUgZnJvbSAnLi9zdHlsZS5tb2R1bGUuY3NzJ1xuXG5mdW5jdGlvbiBmb2N1c0lucHV0IChub2RlKSB7XG4gIGlmIChub2RlKSB7XG4gICAgbm9kZS5mb2N1cygpXG4gICAgbm9kZS5zZWxlY3QoKVxuICB9XG59XG5cbmZ1bmN0aW9uIFJhd1ZhbHVlUGlja2VyIChwcm9wcykge1xuICBjb25zdCB7IHZhbHVlOiBpbml0aWFsVmFsdWUsIHBhcmFtLCBvblNlbGVjdCB9ID0gcHJvcHNcbiAgY29uc3QgW3ZhbHVlLCBzZXRWYWx1ZV0gPSB1c2VTdGF0ZShpbml0aWFsVmFsdWUpXG5cbiAgY29uc3QgaGFuZGxlS2V5RG93biA9IHVzZUNhbGxiYWNrKGV2ZW50ID0+IHtcbiAgICBpZiAoZXZlbnQua2V5ID09PSAnRW50ZXInKSB7XG4gICAgICBvblNlbGVjdCh7IGNvZGU6IHZhbHVlIH0pXG4gICAgfVxuICB9LCBbdmFsdWUsIG9uU2VsZWN0XSlcblxuICBjb25zdCBoYW5kbGVLZXlQcmVzcyA9IHVzZUNhbGxiYWNrKGV2ZW50ID0+IHtcbiAgICBsZXQgdmFsdWUgPSBldmVudC50YXJnZXQudmFsdWVcblxuICAgIGlmIChwYXJhbS50eXBlID09PSAnbnVtYmVyJykge1xuICAgICAgdmFsdWUgPSBOdW1iZXIodmFsdWUpXG4gICAgICBpZiAoTnVtYmVyLmlzTmFOKHZhbHVlKSkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICB9XG5cbiAgICBzZXRWYWx1ZSh2YWx1ZSlcbiAgfSwgW3BhcmFtLCBzZXRWYWx1ZV0pXG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGUuZGlhbG9nfT5cbiAgICAgIDxwPkVudGVyIHJhdyB2YWx1ZTwvcD5cbiAgICAgIDxpbnB1dFxuICAgICAgICByZWY9e2ZvY3VzSW5wdXR9XG4gICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgdmFsdWU9e3ZhbHVlfVxuICAgICAgICBvbkNoYW5nZT17aGFuZGxlS2V5UHJlc3N9XG4gICAgICAgIG9uS2V5RG93bj17aGFuZGxlS2V5RG93bn1cbiAgICAgIC8+XG4gICAgPC9kaXY+XG4gIClcbn1cblxuUmF3VmFsdWVQaWNrZXIucHJvcFR5cGVzID0ge1xuICB2YWx1ZTogUHJvcFR5cGVzLmFueS5pc1JlcXVpcmVkLFxuICBwcm9tcHQ6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgcGFyYW06IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xuICAgIFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICBlbnVtOiBQcm9wVHlwZXMuYXJyYXksXG4gICAgICByYXc6IFByb3BUeXBlcy5ib29sLFxuICAgICAgdHlwZTogUHJvcFR5cGVzLnN0cmluZ1xuICAgIH0pXG4gIF0pLmlzUmVxdWlyZWQsXG4gIG9uU2VsZWN0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG59XG5cblJhd1ZhbHVlUGlja2VyLmRlZmF1bHRQcm9wcyA9IHtcbiAgdmFsdWU6ICcnXG59XG5cbmV4cG9ydCBkZWZhdWx0IFJhd1ZhbHVlUGlja2VyXG4iLCJpbXBvcnQgcGljayBmcm9tICdsb2Rhc2gvcGljaydcbmltcG9ydCB0aW1lcyBmcm9tICdsb2Rhc2gvdGltZXMnXG5pbXBvcnQgeyBjcmVhdGVTbGljZSB9IGZyb20gJ0ByZWR1eGpzL3Rvb2xraXQnXG5cbmNvbnN0IERFRkFVTFRfQklORF9CRUhBVklPVVIgPSAnJnRyYW5zJ1xuY29uc3QgY3JlYXRlRW1wdHlCaW5kaW5nID0gKHZhbHVlID0gREVGQVVMVF9CSU5EX0JFSEFWSU9VUikgPT4gKHtcbiAgdmFsdWUsIHBhcmFtczogW11cbn0pXG5cbmV4cG9ydCBjb25zdCBzZWxlY3RMYXllcnMgPSBzdGF0ZSA9PiBzdGF0ZS5rZXlib2FyZC5rZXltYXAubGF5ZXJzXG5cbmNvbnN0IGxheWVyc1NsaWNlID0gY3JlYXRlU2xpY2Uoe1xuICBuYW1lOiAnbGF5ZXJzJyxcbiAgaW5pdGlhbFN0YXRlOiBbXSxcbiAgcmVkdWNlcnM6IHtcbiAgICBjcmVhdGVMYXllciAoc3RhdGUsIGFjdGlvbikge1xuICAgICAgc3RhdGUucHVzaCh7XG4gICAgICAgIG5hbWU6IGBMYXllciAjJHtzdGF0ZS5sZW5ndGh9YCxcbiAgICAgICAgYmluZGluZ3M6IHRpbWVzKGFjdGlvbi5wYXlsb2FkLmJpbmRpbmdDb3VudCwgKCkgPT4gY3JlYXRlRW1wdHlCaW5kaW5nKCkpXG4gICAgICB9KVxuICAgIH0sXG4gICAgdXBkYXRlTGF5ZXJNZXRhZGF0YSAoc3RhdGUsIGFjdGlvbikge1xuICAgICAgY29uc3QgeyBsYXllckluZGV4IH0gPSBhY3Rpb24ucGF5bG9hZFxuICAgICAgT2JqZWN0LmFzc2lnbihzdGF0ZVtsYXllckluZGV4XSwgcGljayhhY3Rpb24ucGF5bG9hZCwgWyduYW1lJywgJ2xhYmVsJ10pKVxuICAgIH0sXG4gICAgcmVuYW1lTGF5ZXIgKHN0YXRlLCBhY3Rpb24pIHtcbiAgICAgIHN0YXRlW2FjdGlvbi5wYXlsb2FkLmluZGV4XS5uYW1lID0gYWN0aW9uLnBheWxvYWQubmFtZVxuICAgIH0sXG4gICAgZGVsZXRlTGF5ZXIgKHN0YXRlLCBhY3Rpb24pIHtcbiAgICAgIHN0YXRlLnNwbGljZShhY3Rpb24ucGF5bG9hZC5pbmRleCwgMSlcbiAgICB9LFxuICAgIHVwZGF0ZUtleUJpbmRpbmcgKHN0YXRlLCBhY3Rpb24pIHtcbiAgICAgIHN0YXRlW2FjdGlvbi5wYXlsb2FkLmxheWVySW5kZXhdLmJpbmRpbmdzW2FjdGlvbi5wYXlsb2FkLmJpbmRJbmRleF0gPSBhY3Rpb24ucGF5bG9hZC5iaW5kaW5nXG4gICAgfSxcbiAgICB1cGRhdGVTZW5zb3JCaW5kaW5ncyAoc3RhdGUsIGFjdGlvbikge1xuICAgICAgc3RhdGVbYWN0aW9uLnBheWxvYWQubGF5ZXJJbmRleF0uc2Vuc29yQmluZGluZ3NbYWN0aW9uLnBheWxvYWQuc2Vuc29ySW5kZXhdID0gYWN0aW9uLnBheWxvYWQuYmluZGluZ3NcbiAgICB9LFxuICAgIHJlYmluZFRyYW5zcGFyZW50VG9LZXlQcmVzcyAoc3RhdGUsIGFjdGlvbikge1xuICAgICAgZm9yIChjb25zdCBiaW5kaW5nIG9mIHN0YXRlW2FjdGlvbi5wYXlsb2FkLmxheWVySW5kZXhdLmJpbmRpbmdzKSB7XG4gICAgICAgIGlmIChiaW5kaW5nLnZhbHVlID09PSAnJnRyYW5zJykge1xuICAgICAgICAgIGJpbmRpbmcudmFsdWUgPSAnJmtwJ1xuICAgICAgICAgIGJpbmRpbmcucGFyYW1zID0gW11cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgcmViaW5kVHJhbnNwYXJlbnRUb05vbmUgKHN0YXRlLCBhY3Rpb24pIHtcbiAgICAgIGZvciAoY29uc3QgYmluZGluZyBvZiBzdGF0ZVthY3Rpb24ucGF5bG9hZC5sYXllckluZGV4XS5iaW5kaW5ncykge1xuICAgICAgICBpZiAoYmluZGluZy52YWx1ZSA9PT0gJyZ0cmFucycpIHtcbiAgICAgICAgICBiaW5kaW5nLnZhbHVlID0gJyZub25lJ1xuICAgICAgICAgIGJpbmRpbmcucGFyYW1zID0gW11cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgcmViaW5kTm9uZVRvS2V5cHJlc3MgKHN0YXRlLCBhY3Rpb24pIHtcbiAgICAgIGZvciAoY29uc3QgYmluZGluZyBvZiBzdGF0ZVthY3Rpb24ucGF5bG9hZC5sYXllckluZGV4XS5iaW5kaW5ncykge1xuICAgICAgICBpZiAoYmluZGluZy52YWx1ZSA9PT0gJyZub25lJykge1xuICAgICAgICAgIGJpbmRpbmcudmFsdWUgPSAnJmtwJ1xuICAgICAgICAgIGJpbmRpbmcucGFyYW1zID0gW11cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgcmViaW5kTm9uZVRvVHJhbnNwYXJlbnQgKHN0YXRlLCBhY3Rpb24pIHtcbiAgICAgIGZvciAoY29uc3QgYmluZGluZyBvZiBzdGF0ZVthY3Rpb24ucGF5bG9hZC5sYXllckluZGV4XS5iaW5kaW5ncykge1xuICAgICAgICBpZiAoYmluZGluZy52YWx1ZSA9PT0gJyZub25lJykge1xuICAgICAgICAgIGJpbmRpbmcudmFsdWUgPSAnJnRyYW5zJ1xuICAgICAgICAgIGJpbmRpbmcucGFyYW1zID0gW11cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgcmViaW5kRW1wdHlLZXlwcmVzc1RvVHJhbnNwYXJlbnQgKHN0YXRlLCBhY3Rpb24pIHtcbiAgICAgIGZvciAoY29uc3QgYmluZGluZyBvZiBzdGF0ZVthY3Rpb24ucGF5bG9hZC5sYXllckluZGV4XS5iaW5kaW5ncykge1xuICAgICAgICBpZiAoYmluZGluZy52YWx1ZSA9PT0gJyZrcCcgJiYgIWJpbmRpbmcucGFyYW1zWzBdPy52YWx1ZSkge1xuICAgICAgICAgIGJpbmRpbmcudmFsdWUgPSAnJnRyYW5zJ1xuICAgICAgICAgIGJpbmRpbmcucGFyYW1zID0gW11cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgcmViaW5kRW1wdHlLZXlwcmVzc1RvTm9uZSAoc3RhdGUsIGFjdGlvbikge1xuICAgICAgZm9yIChjb25zdCBiaW5kaW5nIG9mIHN0YXRlW2FjdGlvbi5wYXlsb2FkLmxheWVySW5kZXhdLmJpbmRpbmdzKSB7XG4gICAgICAgIGlmIChiaW5kaW5nLnZhbHVlID09PSAnJmtwJyAmJiAhYmluZGluZy5wYXJhbXNbMF0/LnZhbHVlKSB7XG4gICAgICAgICAgYmluZGluZy52YWx1ZSA9ICcmbm9uZSdcbiAgICAgICAgICBiaW5kaW5nLnBhcmFtcyA9IFtdXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn0pXG5cbmV4cG9ydCBjb25zdCB7XG4gIGNyZWF0ZUxheWVyLFxuICByZW5hbWVMYXllcixcbiAgZGVsZXRlTGF5ZXIsXG4gIHVwZGF0ZUxheWVyTWV0YWRhdGEsXG4gIHVwZGF0ZUtleUJpbmRpbmcsXG4gIHVwZGF0ZVNlbnNvckJpbmRpbmdzLFxuICByZWJpbmRUcmFuc3BhcmVudFRvS2V5UHJlc3MsXG4gIHJlYmluZFRyYW5zcGFyZW50VG9Ob25lLFxuICByZWJpbmROb25lVG9LZXlwcmVzcyxcbiAgcmViaW5kTm9uZVRvVHJhbnNwYXJlbnQsXG4gIHJlYmluZEVtcHR5S2V5cHJlc3NUb1RyYW5zcGFyZW50LFxuICByZWJpbmRFbXB0eUtleXByZXNzVG9Ob25lXG59ID0gbGF5ZXJzU2xpY2UuYWN0aW9uc1xuXG5leHBvcnQgZGVmYXVsdCBsYXllcnNTbGljZS5yZWR1Y2VyXG4iLCJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnXG5pbXBvcnQgeyB1c2VNZW1vIH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgeyB1c2VTZWxlY3RvciB9IGZyb20gJ3JlYWN0LXJlZHV4J1xuXG5pbXBvcnQgeyBzZWxlY3RMYXllcnMgfSBmcm9tICcuLi9LZXlib2FyZC9MYXllcnMvbGF5ZXJzU2xpY2UnXG5pbXBvcnQgUmVzdWx0TGlzdCBmcm9tICcuL1Jlc3VsdExpc3QnXG5pbXBvcnQgc3R5bGUgZnJvbSAnLi9zdHlsZS5tb2R1bGUuY3NzJ1xuXG5mdW5jdGlvbiBMYXllclBpY2tlciAoeyBvblNlbGVjdCB9KSB7XG4gIGNvbnN0IGxheWVycyA9IHVzZVNlbGVjdG9yKHNlbGVjdExheWVycylcbiAgY29uc3QgY2hvaWNlcyA9IHVzZU1lbW8oKCkgPT4gbGF5ZXJzLm1hcCgobGF5ZXIsIGkpID0+ICh7XG4gICAgY29kZTogaSxcbiAgICBkZXNjcmlwdGlvbjogbGF5ZXIubmFtZSB8fCBgTGF5ZXIgJHtpfWBcbiAgfSkpLCBbbGF5ZXJzXSlcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZS5kaWFsb2d9PlxuICAgICAgPHA+U2VsZWN0IGxheWVyPC9wPlxuICAgICAgPFJlc3VsdExpc3RcbiAgICAgICAgcmVzdWx0cz17Y2hvaWNlc31cbiAgICAgICAgb25TZWxlY3Q9e29uU2VsZWN0fVxuICAgICAgICByZW5kZXJSZXN1bHQ9e3Jlc3VsdCA9PiAoXG4gICAgICAgICAgPD5cbiAgICAgICAgICAgIHtyZXN1bHQuY29kZX1cbiAgICAgICAgICAgIHtyZXN1bHQuZGVzY3JpcHRpb24gJiYgPHAgY2xhc3NOYW1lPXtzdHlsZS5kZXNjcmlwdGlvbn0+e3Jlc3VsdC5kZXNjcmlwdGlvbn08L3A+fVxuICAgICAgICAgIDwvPlxuICAgICAgICApfVxuICAgICAgLz5cbiAgICA8L2Rpdj5cbiAgKVxufVxuXG5MYXllclBpY2tlci5wcm9wVHlwZXMgPSB7XG4gIHZhbHVlOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIGJlaGF2aW91cjogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICBvblNlbGVjdDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxufVxuXG5MYXllclBpY2tlci5kZWZhdWx0UHJvcHMgPSB7XG4gIHZhbHVlOiAnJ1xufVxuXG5leHBvcnQgZGVmYXVsdCBMYXllclBpY2tlclxuIiwiaW1wb3J0IHsgcGljayB9IGZyb20gJ2xvZGFzaCdcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcydcbmltcG9ydCB7IHVzZU1lbW8gfSBmcm9tICdyZWFjdCdcblxuaW1wb3J0IE1vZGFsIGZyb20gJy4uL0NvbW1vbi9Nb2RhbCdcbmltcG9ydCBFbnVtUGlja2VyIGZyb20gJy4vRW51bVBpY2tlcidcbmltcG9ydCB7IGJpbmROb2RlIH0gZnJvbSAnLi4vS2V5Ym9hcmQvQmluZGluZy9iaW5kUHJvcFR5cGVzJ1xuXG5pbXBvcnQgR2VuZXJpY1BpY2tlciBmcm9tICcuL0dlbmVyaWNQaWNrZXInXG5pbXBvcnQgSHVlU2F0VmFsUGlja2VyIGZyb20gJy4uL0VuaGFuY2VkUGlja2Vycy9SR0IvSHVlU2F0VmFsUGlja2VyJ1xuaW1wb3J0IEtleWNvZGVQaWNrZXIgZnJvbSAnLi4vRW5oYW5jZWRQaWNrZXJzL0tleWNvZGUvS2V5Y29kZVBpY2tlcidcbmltcG9ydCBSYXdWYWx1ZVBpY2tlciBmcm9tICcuL1Jhd1ZhbHVlUGlja2VyJ1xuaW1wb3J0IExheWVyUGlja2VyIGZyb20gJy4vTGF5ZXJQaWNrZXInXG5cbmZ1bmN0aW9uIFZhbHVlUGlja2VyIChwcm9wcykge1xuICBjb25zdCB7IG5vZGUsIHR5cGUsIG9uQ2FuY2VsLCBvblNlbGVjdCB9ID0gcHJvcHNcbiAgY29uc3QgcGlja2VyUHJvcHMgPSBwaWNrKHByb3BzLCBbXG4gICAgJ25vZGUnLCAndmFsdWUnLCAncHJvbXB0JywgJ3BhcmFtJywgJ25vZGUnLCAnYmVoYXZpb3VyJywgJ2NvbnRleHQnLCAnc2VhcmNoS2V5J1xuICBdKVxuXG4gIGNvbnN0IFBpY2tlckNvbXBvbmVudCA9IHVzZU1lbW8oKCkgPT4ge1xuICAgIC8vIFRPRE86IGFsbG93IGNvbXBvbmVudHMgdG8gcmVnaXN0ZXIgaGVscGVyc1xuICAgIGlmICh0eXBlID09PSAncGFyYW1zJyAmJiBub2RlLnNvdXJjZT8uaGVscGVyID09PSAnaHNiLWNvbG9yLXBpY2tlcicpIHJldHVybiBIdWVTYXRWYWxQaWNrZXJcbiAgICBpZiAobm9kZS5zbG90LnJhdykgcmV0dXJuIFJhd1ZhbHVlUGlja2VyXG4gICAgLy8gVE9ETzogU2hvdWxkbid0IG5lZWQgdG8gcmVuZGVyIHBsYWNlaG9sZGVyXG4gICAgaWYgKG5vZGUuc2xvdC50eXBlID09PSAncGxhY2Vob2xkZXInKSByZXR1cm4gUmF3VmFsdWVQaWNrZXJcbiAgICBpZiAobm9kZS5zbG90LmVudW0pIHJldHVybiBFbnVtUGlja2VyXG4gICAgaWYgKG5vZGUuc2xvdCA9PT0gJ2NvZGUnKSByZXR1cm4gS2V5Y29kZVBpY2tlclxuICAgIGlmIChub2RlLnNsb3QgPT09ICdsYXllcicpIHJldHVybiBMYXllclBpY2tlclxuICAgIHJldHVybiBHZW5lcmljUGlja2VyXG4gIH0sIFtub2RlLCB0eXBlXSlcblxuICByZXR1cm4gKFxuICAgIDxNb2RhbCBvbkRpc21pc3M9e29uQ2FuY2VsfT5cbiAgICAgIDxQaWNrZXJDb21wb25lbnRcbiAgICAgICAgey4uLnBpY2tlclByb3BzfVxuICAgICAgICBwYXJhbT17bm9kZS5zbG90fVxuICAgICAgICBvblNlbGVjdD17b25TZWxlY3R9XG4gICAgICAvPlxuICAgIDwvTW9kYWw+XG4gIClcbn1cblxuVmFsdWVQaWNrZXIucHJvcFR5cGVzID0ge1xuICB0eXBlOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIG5vZGU6IGJpbmROb2RlLmlzUmVxdWlyZWQsXG4gIGJlaGF2aW91cjogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICBwcm9tcHQ6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgc2VhcmNoS2V5OiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIHNlYXJjaFRocmVzaG9sZDogUHJvcFR5cGVzLm51bWJlcixcbiAgb25DYW5jZWw6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIG9uU2VsZWN0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG59XG5cblZhbHVlUGlja2VyLmRlZmF1bHRQcm9wcyA9IHtcbiAgdHlwZTogJ3ZhbHVlJyxcbiAgdmFsdWU6ICcnLFxuICBmcmVlRm9ybTogZmFsc2UsXG4gIHNlYXJjaFRocmVzaG9sZDogMTBcbn1cblxuZXhwb3J0IGRlZmF1bHQgVmFsdWVQaWNrZXJcbiIsIlxuZXhwb3J0IGNvbnN0IHdpdGhvdXRJbmRleCA9IChhcnJheSwgaW5kZXgpID0+IFtcbiAgLi4uYXJyYXkuc2xpY2UoMCwgaW5kZXgpLFxuICAuLi5hcnJheS5zbGljZShpbmRleCArIDEpXG5dXG5cbmV4cG9ydCBjb25zdCByZXBsYWNlSW5kZXggPSAoYXJyYXksIGluZGV4LCB2YWx1ZSkgPT4gW1xuICAuLi5hcnJheS5zbGljZSgwLCBpbmRleCksXG4gIHZhbHVlLFxuICAuLi5hcnJheS5zbGljZShpbmRleCArIDEpXG5dXG5cbmV4cG9ydCBmdW5jdGlvbiByZXBvc2l0aW9uRWxlbWVudCAoYXJyYXksIGluZGV4LCB0YXJnZXQpIHtcbiAgaWYgKHRhcmdldCA9PT0gLTEpIHtcbiAgICByZXR1cm4gWy4uLmFycmF5LmZpbHRlcigoXywgaSkgPT4gaSAhPT0gaW5kZXgpLCBhcnJheVtpbmRleF1dXG4gIH1cblxuICBjb25zdCByZW9yZGVyZWQgPSBhcnJheS5yZWR1Y2UoKGFyciwgdmFsLCBpKSA9PiB7XG4gICAgaWYgKGkgPT09IHRhcmdldCkgYXJyLnB1c2goYXJyYXlbaW5kZXhdKVxuICAgIGlmIChpICE9PSBpbmRleCkgYXJyLnB1c2godmFsKVxuICAgIHJldHVybiBhcnJcbiAgfSwgW10pXG5cbiAgcmV0dXJuIHJlb3JkZXJlZFxufVxuIiwiaW1wb3J0IHsgdXNlQ2FsbGJhY2ssIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnXG5cbmltcG9ydCBJY29uIGZyb20gJy4uLy4uLy4uL0NvbW1vbi9JY29uJ1xuaW1wb3J0IFZhbHVlUGlja2VyIGZyb20gJy4uLy4uLy4uL1ZhbHVlUGlja2VyJ1xuaW1wb3J0IHsgcmVwbGFjZUluZGV4LCB3aXRob3V0SW5kZXggfSBmcm9tICcuLi8uLi8uLi9yZWR1Y2VyLXV0aWwnXG5cbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9zdHlsZXMubW9kdWxlLmNzcydcbmltcG9ydCBBY3Rpb25CdXR0b24gZnJvbSAnLi4vLi4vLi4vQ29tbW9uL0FjdGlvbkJ1dHRvbidcbmltcG9ydCB7IGNvbXBhY3QgfSBmcm9tICdsb2Rhc2gnXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEJlaGF2aW9yc3NQcm9wZXJ0eVZhbHVlICh7IHByb3AgPSB7fSwgc2NoZW1hID0ge30sIG9uVXBkYXRlIH0pIHtcbiAgY29uc3QgeyBwYXJzZWQ6IHNlbGVjdGlvbiA9IFtdIH0gPSBwcm9wXG4gIGNvbnN0IHsgbGVuZ3RoIH0gPSBzY2hlbWFcbiAgY29uc3QgW2VkaXRpbmcsIHNldEVkaXRpbmddID0gdXNlU3RhdGUobnVsbClcblxuICBjb25zdCBpbnNlcnRQaGFuZGxlID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIG9uVXBkYXRlKHtcbiAgICAgIC4uLnByb3AsXG4gICAgICB1c2VSYXc6IGZhbHNlLFxuICAgICAgcGFyc2VkOiBbLi4uc2VsZWN0aW9uLCAnJ11cbiAgICB9KVxuXG4gICAgc2V0RWRpdGluZyhzZWxlY3Rpb24ubGVuZ3RoKVxuICB9LCBbcHJvcCwgc2VsZWN0aW9uLCBvblVwZGF0ZSwgc2V0RWRpdGluZ10pXG5cbiAgY29uc3QgdXBkYXRlUGhhbmRsZSA9IHVzZUNhbGxiYWNrKGJlaGF2aW9yID0+IHtcbiAgICBvblVwZGF0ZSh7XG4gICAgICAuLi5wcm9wLFxuICAgICAgdXNlUmF3OiBmYWxzZSxcbiAgICAgIHBhcnNlZDogcmVwbGFjZUluZGV4KHNlbGVjdGlvbiwgZWRpdGluZywgYmVoYXZpb3IuY29kZSlcbiAgICB9KVxuXG4gICAgc2V0RWRpdGluZyhudWxsKVxuICB9LCBbcHJvcCwgc2VsZWN0aW9uLCBlZGl0aW5nLCBvblVwZGF0ZV0pXG5cbiAgY29uc3QgcmVtb3ZlUGhhbmRsZSA9IHVzZUNhbGxiYWNrKGluZGV4ID0+IHtcbiAgICBvblVwZGF0ZSh7XG4gICAgICAuLi5wcm9wLFxuICAgICAgdXNlUmF3OiBmYWxzZSxcbiAgICAgIHBhcnNlZDogd2l0aG91dEluZGV4KHNlbGVjdGlvbiwgaW5kZXgpXG4gICAgfSlcbiAgfSwgW3Byb3AsIHNlbGVjdGlvbiwgb25VcGRhdGVdKVxuXG4gIHJldHVybiAoXG4gICAgPGRpdj5cbiAgICAgIDxvbCBjbGFzc05hbWU9e2NvbXBhY3QoW1xuICAgICAgICBzdHlsZXMucHJvcGVydHlQaGFuZGxlU2VsZWN0LFxuICAgICAgICBsZW5ndGggPT09IDEgJiYgc3R5bGVzLnByb3BlcnR5UGhhbmRsZVNpbmdsZXRvblxuICAgICAgXSkuam9pbignICcpfT5cbiAgICAgICAge3NlbGVjdGlvbi5tYXAoKHBoYW5kbGUsIGkpID0+IChcbiAgICAgICAgICA8bGkga2V5PXtpfT5cbiAgICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICAgIGNsYXNzTmFtZT17c3R5bGVzLmJlaGF2aW9yQmluZH1cbiAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gc2V0RWRpdGluZyhpKX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAge3BoYW5kbGV9XG4gICAgICAgICAgICAgIHtsZW5ndGggIT09IDEgJiYgKFxuICAgICAgICAgICAgICAgIDxJY29uXG4gICAgICAgICAgICAgICAgICBuYW1lPVwidGltZXNcIlxuICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtzdHlsZXMucGhhbmRsZVJlbW92ZX1cbiAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e2V2ZW50ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKClcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlUGhhbmRsZShpKVxuICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgIDwvbGk+XG4gICAgICAgICkpfVxuICAgICAgPC9vbD5cbiAgICAgIHtlZGl0aW5nICE9PSBudWxsICYmIChcbiAgICAgICAgPFZhbHVlUGlja2VyXG4gICAgICAgICAgbm9kZT17eyB2YWx1ZTogc2VsZWN0aW9uW2VkaXRpbmddLCBwYXJhbXM6IFtdLCBzbG90OiAnYmVoYXZpb3VyJyB9fVxuICAgICAgICAgIHR5cGU9XCJ2YWx1ZVwiXG4gICAgICAgICAgY29udGV4dD1cIm5vbmVcIlxuICAgICAgICAgIGJlaGF2aW91cj17eyBjb2RlOiBzZWxlY3Rpb25bZWRpdGluZ10gfX1cbiAgICAgICAgICBwcm9tcHQ9XCJTZWxlY3QgQmVoYXZpb3JcIlxuICAgICAgICAgIHNlYXJjaEtleT1cImNvZGVcIlxuICAgICAgICAgIG9uU2VsZWN0PXt1cGRhdGVQaGFuZGxlfVxuICAgICAgICAgIG9uQ2FuY2VsPXsoKSA9PiBzZXRFZGl0aW5nKG51bGwpfVxuICAgICAgICAvPlxuICAgICAgKX1cbiAgICAgIHtsZW5ndGggJiYgc2VsZWN0aW9uLmxlbmd0aCA8IGxlbmd0aCAmJiAoXG4gICAgICAgIDxBY3Rpb25CdXR0b24gc2Vjb25kYXJ5IG9uQ2xpY2s9e2luc2VydFBoYW5kbGV9PlxuICAgICAgICAgIDxJY29uIG5hbWU9XCJwbHVzXCIgLz4gQWRkIEJlaGF2aW9yXG4gICAgICAgIDwvQWN0aW9uQnV0dG9uPlxuICAgICAgKX1cbiAgICA8L2Rpdj5cbiAgKVxufVxuIiwiaW1wb3J0IHsgdXNlQ2FsbGJhY2ssIHVzZU1lbW8gfSBmcm9tICdyZWFjdCdcblxuaW1wb3J0IEJpbmRWYWx1ZSBmcm9tICcuLi8uLi9LZXlib2FyZC9CaW5kaW5nL0JpbmRWYWx1ZSdcbmltcG9ydCBzdHlsZXMgZnJvbSAnLi4vLi4vS2V5Ym9hcmQvS2V5cy9zdHlsZXMubW9kdWxlLmNzcydcblxuY29uc3Qgb3V0ZXJTdHlsZSA9IHtcbiAgZGlzcGxheTogJ2lubGluZS1ibG9jaycsXG4gIGN1cnNvcjogJ3BvaW50ZXInLFxuICB2ZXJ0aWNhbEFsaWduOiAndGV4dC10b3AnLFxuICBib3JkZXI6ICcwLjc1cHggc29saWQgdmFyKC0ta2V5LWNvbG9yLWJhc2UpJyxcbiAgYm9yZGVyUmFkaXVzOiAnM3B4J1xufVxuY29uc3QgaW5uZXJTdHlsZSA9IHtcbiAgZGlzcGxheTogJ2ZsZXgnLFxuICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICB3aWR0aDogJzEwcHgnLFxuICBoZWlnaHQ6ICcxMHB4JyxcbiAgbWFyZ2luOiAnMXB4JyxcbiAgYm9yZGVyUmFkaXVzOiAnMnB4J1xufVxuXG5mdW5jdGlvbiBIdWVTYXRWYWxCaW5kTm9kZSAoeyBub2RlLCBvblNlbGVjdCB9KSB7XG4gIGNvbnN0IHsgcGFyYW1zOiBbaCwgcywgYl0gfSA9IG5vZGVcblxuICBjb25zdCBoYW5kbGVTZWxlY3RQYXJhbXMgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgb25TZWxlY3QoeyBub2RlLCB0eXBlOiAncGFyYW1zJyB9KVxuICB9LCBbbm9kZSwgb25TZWxlY3RdKVxuXG4gIGNvbnN0IGlzRW1wdHkgPSB1c2VNZW1vKCgpID0+IChcbiAgICBbaCwgcywgYl0uc29tZSh2ID0+IHYudmFsdWUgPT09IHVuZGVmaW5lZClcbiAgKSwgW2gsIHMsIGJdKVxuXG4gIGNvbnN0IGJhY2tncm91bmRDb2xvciA9IGBoc2woJHtoLnZhbHVlfSwgJHtzLnZhbHVlfSUsICR7Yi52YWx1ZX0lKWBcblxuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8QmluZFZhbHVlIG5vZGU9e25vZGV9IG9uU2VsZWN0PXtvblNlbGVjdH0gLz5cbiAgICAgIHshaXNFbXB0eVxuICAgICAgICA/IChcbiAgICAgICAgPGRpdiBvbkNsaWNrPXtoYW5kbGVTZWxlY3RQYXJhbXN9IHN0eWxlPXtvdXRlclN0eWxlfT5cbiAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICBjbGFzc05hbWU9e2lzRW1wdHkgPyBzdHlsZXMubWlzc2luZ1ZhbHVlIDogbnVsbH1cbiAgICAgICAgICAgIHN0eWxlPXt7IC4uLmlubmVyU3R5bGUsIGJhY2tncm91bmRDb2xvciB9fVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICAgIClcbiAgICAgICAgOiA8QmluZFZhbHVlIG5vZGU9e3t9fSBvblNlbGVjdD17aGFuZGxlU2VsZWN0UGFyYW1zfSAvPn1cbiAgICA8Lz5cbiAgKVxufVxuXG5leHBvcnQgZGVmYXVsdCBIdWVTYXRWYWxCaW5kTm9kZVxuIiwiaW1wb3J0IGdldCBmcm9tICdsb2Rhc2gvZ2V0J1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJ1xuaW1wb3J0IHsgdXNlTWVtbyB9IGZyb20gJ3JlYWN0J1xuXG5pbXBvcnQgKiBhcyBiaW5kUHJvcFR5cGVzIGZyb20gJy4vYmluZFByb3BUeXBlcydcbmltcG9ydCBCaW5kVmFsdWUgZnJvbSAnLi9CaW5kVmFsdWUnXG5pbXBvcnQgS2V5Y29kZUJpbmROb2RlIGZyb20gJy4uLy4uL0VuaGFuY2VkUGlja2Vycy9LZXljb2RlL0tleWNvZGVCaW5kTm9kZSdcbmltcG9ydCBIdWVTYXRWYWxCaW5kTm9kZSBmcm9tICcuLi8uLi9FbmhhbmNlZFBpY2tlcnMvUkdCL0h1ZVNhdFZhbEJpbmROb2RlJ1xuXG5pbXBvcnQgc3R5bGVzIGZyb20gJy4uL0tleXMvc3R5bGVzLm1vZHVsZS5jc3MnXG5cbmZ1bmN0aW9uIEdlbmVyaWNCaW5kTm9kZSAoeyBub2RlLCBvblNlbGVjdCB9KSB7XG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIDxCaW5kVmFsdWVcbiAgICAgICAgbm9kZT17bm9kZX1cbiAgICAgICAgb25TZWxlY3Q9e29uU2VsZWN0fVxuICAgICAgLz5cbiAgICAgIHtnZXQobm9kZSwgJ3NvdXJjZS5wYXJhbXMubGVuZ3RoJykgPiAwXG4gICAgICAgID8gKFxuICAgICAgICAgICAgPEJpbmRQYXJhbWxpc3RcbiAgICAgICAgICAgICAgc2xvdHM9e25vZGUuc291cmNlLnBhcmFtc31cbiAgICAgICAgICAgICAgcGFyYW1zPXtub2RlLnBhcmFtc31cbiAgICAgICAgICAgICAgb25TZWxlY3Q9e29uU2VsZWN0fVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICApXG4gICAgICAgIDogbnVsbH1cbiAgICA8Lz5cbiAgKVxufVxuXG5mdW5jdGlvbiBCaW5kUGFyYW0gKHByb3BzKSB7XG4gIGNvbnN0IHsgbm9kZSwgb25TZWxlY3QsIHNsb3QgfSA9IHByb3BzXG4gIGNvbnN0IEJpbmRDb21wb25lbnQgPSB1c2VNZW1vKCgpID0+IHtcbiAgICAvLyBUT0RPOiBhbGxvdyBjb21wb25lbnRzIHRvIHJlZ2lzdGVyIGhlbHBlcnNcbiAgICBpZiAobm9kZS5zb3VyY2U/LmhlbHBlciA9PT0gJ2hzYi1jb2xvci1waWNrZXInKSByZXR1cm4gSHVlU2F0VmFsQmluZE5vZGVcbiAgICBpZiAoc2xvdCA9PT0gJ2NvZGUnKSByZXR1cm4gS2V5Y29kZUJpbmROb2RlXG4gICAgcmV0dXJuIEdlbmVyaWNCaW5kTm9kZVxuICB9LCBbbm9kZSwgc2xvdF0pXG5cbiAgcmV0dXJuIChcbiAgICA8c3BhbiBjbGFzc05hbWU9e3N0eWxlcy5wYXJhbX0+XG4gICAgICA8QmluZENvbXBvbmVudCBub2RlPXtub2RlfSBvblNlbGVjdD17b25TZWxlY3R9IC8+XG4gICAgPC9zcGFuPlxuICApXG59XG5cbmZ1bmN0aW9uIEJpbmRQYXJhbWxpc3QgKHByb3BzKSB7XG4gIGNvbnN0IHsgc2xvdHMsIHBhcmFtcywgb25TZWxlY3QsIHJvb3QsIHdyYXBwZXJQcm9wcyB9ID0gcHJvcHNcbiAgcmV0dXJuIChcbiAgICA8c3BhblxuICAgICAgY2xhc3NOYW1lPXtzdHlsZXMucGFyYW1zfVxuICAgICAgZGF0YS1pcy1yb290PXshIXJvb3R9XG4gICAgICBkYXRhLXBhcmFtLWNvdW50PXtwYXJhbXMubGVuZ3RofVxuICAgICAgey4uLndyYXBwZXJQcm9wc31cbiAgICA+XG4gICAgICB7c2xvdHMubWFwKChzbG90LCBpKSA9PiBzbG90LnR5cGUgIT09ICdwbGFjZWhvbGRlcicgJiYgKFxuICAgICAgICA8QmluZFBhcmFtXG4gICAgICAgICAga2V5PXtpfVxuICAgICAgICAgIHNsb3Q9e3Nsb3R9XG4gICAgICAgICAgbm9kZT17cGFyYW1zW2ldfVxuICAgICAgICAgIG9uU2VsZWN0PXtvblNlbGVjdH1cbiAgICAgICAgLz5cbiAgICAgICkpfVxuICAgIDwvc3Bhbj5cbiAgKVxufVxuXG5CaW5kUGFyYW1saXN0LnByb3BUeXBlcyA9IHtcbiAgc2xvdHM6IFByb3BUeXBlcy5hcnJheU9mKGJpbmRQcm9wVHlwZXMucGFyYW0pLmlzUmVxdWlyZWQsXG4gIHBhcmFtczogUHJvcFR5cGVzLmFycmF5T2YoYmluZFByb3BUeXBlcy5iaW5kTm9kZSkuaXNSZXF1aXJlZCxcbiAgc291cmNlOiBiaW5kUHJvcFR5cGVzLnNvdXJjZSxcbiAgb25TZWxlY3Q6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbn1cblxuZXhwb3J0IGRlZmF1bHQgQmluZFBhcmFtbGlzdFxuIiwiaW1wb3J0IGNsb25lRGVlcCBmcm9tICdsb2Rhc2gvY2xvbmVEZWVwJ1xuaW1wb3J0IGdldCBmcm9tICdsb2Rhc2gvZ2V0J1xuaW1wb3J0IHBpY2sgZnJvbSAnbG9kYXNoL3BpY2snXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnXG5pbXBvcnQgeyB1c2VDb250ZXh0LCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0J1xuXG5pbXBvcnQgeyBTZWFyY2hDb250ZXh0IH0gZnJvbSAnLi4vLi4vcHJvdmlkZXJzJ1xuaW1wb3J0IHsgZ2V0QmVoYXZpb3VyUGFyYW1zIH0gZnJvbSAnLi4vLi4va2V5bWFwJ1xuXG5pbXBvcnQgQmluZFBhcmFtbGlzdCBmcm9tICcuL0JpbmRQYXJhbWxpc3QnXG5pbXBvcnQgKiBhcyBiaW5kUHJvcFR5cGVzIGZyb20gJy4vYmluZFByb3BUeXBlcydcbmltcG9ydCB7XG4gIGNyZWF0ZVByb21wdE1lc3NhZ2UsXG4gIGh5ZHJhdGVUcmVlLFxuICBpc1NpbXBsZSxcbiAgaXNDb21wbGV4LFxuICBtYWtlSW5kZXhcbn0gZnJvbSAnLi91dGlsJ1xuaW1wb3J0IHN0eWxlcyBmcm9tICcuLi9LZXlzL3N0eWxlcy5tb2R1bGUuY3NzJ1xuXG5pbXBvcnQgSWNvbiBmcm9tICcuLi8uLi9Db21tb24vSWNvbidcbmltcG9ydCBWYWx1ZVBpY2tlciBmcm9tICcuLi8uLi9WYWx1ZVBpY2tlcidcbmltcG9ydCB7IGNvbXBhY3QgfSBmcm9tICdsb2Rhc2gnXG5cbmZ1bmN0aW9uIGhhc0Vycm9ycyAoaW5kZXgpIHtcbiAgLy8gVGhlIGZpcnN0IHZhbHVlIGluIHRoZSBsaXN0IGlzIHRoZSBiZWhhdmlvdXIuIElmIGl0IGRvZXNuJ3QgaGF2ZSBhIHNvdXJjZVxuICAvLyB0aGF0IG1lYW5zIHRoYXQgd2UgZG9uJ3QgaGF2ZSBkZXRhaWxzIGFib3V0IHdoYXQgaXQgaXMuXG4gIGlmICghaW5kZXhbMF0uc291cmNlLmNvZGUpIHtcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgZm9yIChjb25zdCB2YWx1ZSBvZiBpbmRleCkge1xuICAgIGlmICgodmFsdWUuc291cmNlPy5wYXJhbXMgfHwgW10pLmxlbmd0aCA+IHZhbHVlLnBhcmFtcy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICAgIGlmICh2YWx1ZS5wYXJhbXMuc29tZSh2ID0+IHYudmFsdWUgPT09IHVuZGVmaW5lZCB8fCB2LnZhbHVlID09PSAnJyB8fCB2LnNvdXJjZSA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gQmluZGluZyAocHJvcHMpIHtcbiAgY29uc3QgeyBzb3VyY2VzLCBtZXJnZWRHbHlwaHMgfSA9IHVzZUNvbnRleHQoU2VhcmNoQ29udGV4dClcbiAgY29uc3QgeyBjb250ZXh0ID0gJ25vbmUnLCBoaWRlQmVoYXZpb3VyLCB2YWx1ZSwgcGFyYW1zLCBvblVwZGF0ZSB9ID0gcHJvcHNcbiAgY29uc3QgW2VkaXRpbmcsIHNldEVkaXRpbmddID0gdXNlU3RhdGUobnVsbClcblxuICBjb25zdCBiaW5kID0gdmFsdWVcbiAgY29uc3QgYmVoYXZpb3VyID0gZ2V0KHNvdXJjZXMuYmVoYXZpb3Vyc0J5Q29udGV4dFtjb250ZXh0XSwgYmluZCwge30pXG4gIGNvbnN0IGJlaGF2aW91clBhcmFtcyA9IGdldEJlaGF2aW91clBhcmFtcyhwYXJhbXMsIGJlaGF2aW91cilcblxuICBjb25zdCBiaW5kVHJlZSA9IGh5ZHJhdGVUcmVlKHZhbHVlLCBwYXJhbXMsIHNvdXJjZXMsIGNvbnRleHQsIG1lcmdlZEdseXBocylcblxuICBjb25zdCBpbmRleCA9IG1ha2VJbmRleChiaW5kVHJlZSlcbiAgY29uc3QgZXJyb3JzID0gaGFzRXJyb3JzKGluZGV4KVxuXG4gIGZ1bmN0aW9uIGhhbmRsZVNlbGVjdE5vZGUgKHsgbm9kZSwgdHlwZSA9ICd2YWx1ZScgfSkge1xuICAgIHNldEVkaXRpbmcoeyBub2RlLCB0eXBlLCBub2RlSW5kZXg6IGluZGV4LmluZGV4T2Yobm9kZSkgfSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZVNlbGVjdFZhbHVlIChzb3VyY2UpIHtcbiAgICBpZiAoZWRpdGluZy50eXBlID09PSAndHJlZScpIHtcbiAgICAgIHJldHVybiBoYW5kbGVTZWxlY3RUcmVlKHNvdXJjZSlcbiAgICB9XG5cbiAgICBpZiAoZWRpdGluZy50eXBlID09PSAncGFyYW1zJykge1xuICAgICAgcmV0dXJuIGhhbmRsZVNlbGVjdFBhcmFtcyhzb3VyY2UpIC8vIHVnaFxuICAgIH1cblxuICAgIGNvbnN0IHsgbm9kZSwgbm9kZUluZGV4IH0gPSBlZGl0aW5nXG4gICAgY29uc3QgdXBkYXRlZCA9IGNsb25lRGVlcChiaW5kVHJlZSlcbiAgICBjb25zdCBpbmRleCA9IG1ha2VJbmRleCh1cGRhdGVkKVxuICAgIGNvbnN0IHRhcmdldE5vZGUgPSBpbmRleFtub2RlSW5kZXhdXG5cbiAgICAvLyBBdHRlbXB0IHRvIGNhc3QgcmF3IGlucHV0cyB0byBub24tc3RyaW5nIHR5cGUgaWYgc3VjaCBhIHR5cGUgaXMgZGVmaW5lZFxuICAgIC8vIGFuZCBJJ3ZlIHNwZWNpZmljYWxseSBhY2NvdW50ZWQgZm9yIGNhc3RpbmcgdG8gdGhhdCB0eXBlIGhlcmUuXG4gICAgLy8gTm8gZXJyb3IgaGFuZGxpbmcgeWV0LCBzby4uLlxuICAgIGlmIChub2RlLnNsb3QucmF3KSB7XG4gICAgICBpZiAobm9kZS5zbG90LnR5cGUgPT09ICdudW1iZXInKSB7XG4gICAgICAgIHNvdXJjZS5jb2RlID0gTnVtYmVyKHNvdXJjZS5jb2RlKVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAobm9kZS5zbG90ID09PSAnY29tbWFuZCcpIHtcbiAgICAgIGNvbnN0IG9sZEFkZGl0aW9uYWxQYXJhbXMgPSB0YXJnZXROb2RlLnNvdXJjZT8uYWRkaXRpb25hbFBhcmFtcz8ubGVuZ3RoIHx8IDBcbiAgICAgIGNvbnN0IG5ld0FkZGl0aW9uYWxQYXJhbXMgPSBzb3VyY2UuYWRkaXRpb25hbFBhcmFtcz8ubGVuZ3RoIHx8IDBcbiAgICAgIC8vIFdoZW4gc3dpdGNoaW5nIGZyb20gYSBjb21tYW5kIHBhcmFtZXRlciB0aGF0IGhhcyBhZGRpdGlvbmFsUGFyYW1zIHRvXG4gICAgICAvLyBhbm90aGVyIGNvbW1hbmQgcGFyYW1ldGVyIHRoYXQgaGFzIGZld2VyIChvciBub25lKSwgdGhlIHNlbGVjdGVkIHZhbHVlc1xuICAgICAgLy8gYXJlIHN0aWxsIHByZXNlbnQgaW4gdGhlIHRyZWUgYnV0IGFyZW4ndCByZW5kZXJlZC4gVGhlcmVmb3JlIGl0J3Mgc3RpbGxcbiAgICAgIC8vIHBvc3NpYmxlIGZvciB0aGUgdW51c2VkIHZhbHVlcyB0byBiZSBzYXZlZCB3aGVuIHRoZSBrZXltYXAgaXMgd3JpdHRlbi5cbiAgICAgIC8vIFRoaXMgdGVjaG5pY2FsbHkgZG9lc24ndCBjYXVzZSBlcnJvcnMgYmVjYXVzZSBiZWhhdmlvdXJzIGFyZSB3cml0dGVuIHRvXG4gICAgICAvLyBpZ25vcmUgdGhlc2UgdmFsdWVzLCBidXQgaXQgY2FuIGJlIGNvbmZ1c2luZy5cbiAgICAgIC8vIFRPRE86IGxvb2sgaW50byBhY3R1YWxseSBtYWtpbmcgc3VyZSB0aGF0IHdlIGFyZW4ndCBzZW5kaW5nIHRoZXNlXG4gICAgICAvLyBwaGFudG9tIHZhbHVlcyB3aGVuIHN1Ym1pdHRpbmcga2V5bWFwIHN0YXRlLlxuICAgICAgaWYgKG5ld0FkZGl0aW9uYWxQYXJhbXMgPCBvbGRBZGRpdGlvbmFsUGFyYW1zKSB7XG4gICAgICAgIC8vIHRlY2huaWNhbGx5IHRoaXMgY291bGQgYmUgYW55d2hlcmUgaW4gdGhlIHRyZWUgYnV0IGxldHMgYXNzdW1lIGZvclxuICAgICAgICAvLyBjb252ZW5pZW5jZSB0aGF0IHN3aXRjaGluZyBhIFwiY29tbWFuZFwiIHBhcmFtIGNhbiBvbmx5IGhhcHBlbiB0byB0aGVcbiAgICAgICAgLy8gZmlyc3QgY2hpbGQgb2YgdGhlIGJlaGF2aW91ciBiaW5kLlxuICAgICAgICBjb25zdCB0cmVlID0gaW5kZXhbMF1cbiAgICAgICAgdHJlZS5wYXJhbXMuc3BsaWNlKDEsIHRyZWUucGFyYW1zLmxlbmd0aCAtIDEpXG4gICAgICAgIGluZGV4LnNwbGljZSgyLCBpbmRleC5sZW5ndGggLSAxKVxuICAgICAgfVxuICAgIH1cblxuICAgIHRhcmdldE5vZGUudmFsdWUgPSBzb3VyY2UuY29kZVxuICAgIGRlbGV0ZSB0YXJnZXROb2RlLl9pc1BsYWNlaG9sZGVyXG5cbiAgICAvLyBDbGVhciBwYXJhbWV0ZXJzIGlmIHRoZSBuZXcgc291cmNlIHBhcmFtcyBsaXN0IGRvZXNuJ3QgbWF0Y2ggdGhlIG9sZCBvbmUuXG4gICAgLy8gVE9ETzogaW5zdGVhZCBvZiBhIHJlZHVjZSBhbmQgaXRlcmF0aW5nIHRocm91Z2ggdGhlIGVudGlyZSBhcnJheSBpbiBhbGxcbiAgICAvLyBjYXNlcywgdGhpcyBjb3VsZCBsb29rIGZvciB0aGUgZmlyc3QgaW5kZXggd2hlcmUgYm90aCBwYXJhbXMgbGlzdHMgZG9uJ3RcbiAgICAvLyBtYXRjaCBhbmQgdGhlbiBzcGxpY2UgdGFyZ2V0Tm9kZS5wYXJhbXMgZnJvbSB0aGVyZVxuICAgIHRhcmdldE5vZGUucGFyYW1zID0gKHNvdXJjZT8ucGFyYW1zIHx8IFtdKS5yZWR1Y2UoKHBhcmFtcywgcCwgaSkgPT4ge1xuICAgICAgaWYgKHRhcmdldE5vZGUuc291cmNlPy5wYXJhbXM/LltpXSA9PT0gc291cmNlLnBhcmFtc1tpXSkge1xuICAgICAgICBwYXJhbXMucHVzaCh0YXJnZXROb2RlLnBhcmFtc1tpXSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcmFtcy5wdXNoKHsgdmFsdWU6IDAsIF9pc1BsYWNlaG9sZGVyOiB0cnVlIH0pXG4gICAgICB9XG4gICAgICByZXR1cm4gcGFyYW1zXG4gICAgfSwgW10pXG5cbiAgICBpbmRleC5mb3JFYWNoKG5vZGUgPT4ge1xuICAgICAgZGVsZXRlIG5vZGUuc291cmNlXG4gICAgfSlcblxuICAgIHNldEVkaXRpbmcobnVsbClcbiAgICBvblVwZGF0ZShwaWNrKHVwZGF0ZWQsIFsndmFsdWUnLCAncGFyYW1zJywgJ19pc1BsYWNlaG9sZGVyJ10pKVxuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlU2VsZWN0VHJlZSAoeyB2YWx1ZSwgcGFyYW1zIH0pIHtcbiAgICBjb25zdCB7IG5vZGVJbmRleCB9ID0gZWRpdGluZ1xuICAgIGNvbnN0IHVwZGF0ZWQgPSBjbG9uZURlZXAoYmluZFRyZWUpXG4gICAgY29uc3QgaW5kZXggPSBtYWtlSW5kZXgodXBkYXRlZClcbiAgICBjb25zdCB0YXJnZXROb2RlID0gaW5kZXhbbm9kZUluZGV4XVxuXG4gICAgLy8gQXNzdW1lIHRoZXNlIGFyZSBhbGwgZmluZT9cbiAgICB0YXJnZXROb2RlLnZhbHVlID0gdmFsdWVcbiAgICB0YXJnZXROb2RlLnBhcmFtcyA9IHBhcmFtc1xuICAgIGRlbGV0ZSB0YXJnZXROb2RlLl9pc1BsYWNlaG9sZGVyXG5cbiAgICBpbmRleC5mb3JFYWNoKG5vZGUgPT4ge1xuICAgICAgZGVsZXRlIG5vZGUuc291cmNlXG4gICAgfSlcblxuICAgIHNldEVkaXRpbmcobnVsbClcbiAgICBvblVwZGF0ZShwaWNrKHVwZGF0ZWQsIFsndmFsdWUnLCAncGFyYW1zJ10pKVxuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlU2VsZWN0UGFyYW1zIChwYXJhbXMpIHtcbiAgICBjb25zdCB7IG5vZGVJbmRleCB9ID0gZWRpdGluZ1xuICAgIGNvbnN0IHVwZGF0ZWQgPSBjbG9uZURlZXAoYmluZFRyZWUpXG4gICAgY29uc3QgaW5kZXggPSBtYWtlSW5kZXgodXBkYXRlZClcbiAgICBjb25zdCB0YXJnZXROb2RlID0gaW5kZXhbbm9kZUluZGV4XVxuXG4gICAgLy8gQXNzdW1lIHRoZXNlIGFyZSBhbGwgZmluZT9cbiAgICB0YXJnZXROb2RlLnBhcmFtcyA9IHBhcmFtc1xuXG4gICAgaW5kZXguZm9yRWFjaChub2RlID0+IHtcbiAgICAgIGRlbGV0ZSBub2RlLnNvdXJjZVxuICAgIH0pXG5cbiAgICBzZXRFZGl0aW5nKG51bGwpXG4gICAgb25VcGRhdGUocGljayh1cGRhdGVkLCBbJ3ZhbHVlJywgJ3BhcmFtcyddKSlcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIHtiZWhhdmlvdXIgJiYgIWhpZGVCZWhhdmlvdXJcbiAgICAgICAgPyAoXG4gICAgICAgIDxzcGFuXG4gICAgICAgICAgY2xhc3NOYW1lPXtjb21wYWN0KFtcbiAgICAgICAgICAgIHN0eWxlc1snYmVoYXZpb3VyLWJpbmRpbmcnXSxcbiAgICAgICAgICAgICFiZWhhdmlvdXIuY29kZSAmJiBzdHlsZXMubWlzc2luZ1ZhbHVlXG4gICAgICAgICAgXSkuam9pbignICcpfVxuICAgICAgICAgIG9uQ2xpY2s9eygpID0+IGhhbmRsZVNlbGVjdE5vZGUoeyBub2RlOiBiaW5kVHJlZSB9KX1cbiAgICAgICAgPlxuICAgICAgICAgIHtiZWhhdmlvdXIuY29kZSB8fCAn4qa4J31cbiAgICAgICAgPC9zcGFuPlxuICAgICAgICAgIClcbiAgICAgICAgOiBudWxsfVxuICAgICAge2Vycm9ycyAmJiAoXG4gICAgICAgIDxJY29uXG4gICAgICAgICAgbmFtZT1cIndhcm5pbmdcIlxuICAgICAgICAgIGNsYXNzTmFtZT17c3R5bGVzLm1pc3Npbmd9XG4gICAgICAgICAgdGl0bGU9XCJCaW5kaW5nIGhhcyBtaXNzaW5nIHZhbHVlKHMpXCJcbiAgICAgICAgLz5cbiAgICAgICl9XG4gICAgICA8QmluZFBhcmFtbGlzdFxuICAgICAgICByb290PXt0cnVlfVxuICAgICAgICBzbG90cz17YmVoYXZpb3VyUGFyYW1zfVxuICAgICAgICBwYXJhbXM9e2JpbmRUcmVlLnBhcmFtc31cbiAgICAgICAgb25TZWxlY3Q9e2hhbmRsZVNlbGVjdE5vZGV9XG4gICAgICAgIHdyYXBwZXJQcm9wcz17e1xuICAgICAgICAgICdkYXRhLXNpbXBsZSc6IGlzU2ltcGxlKGJpbmRUcmVlKSxcbiAgICAgICAgICAnZGF0YS1sb25nJzogaXNDb21wbGV4KGJpbmRUcmVlLCBiZWhhdmlvdXJQYXJhbXMpXG4gICAgICAgIH19XG4gICAgICAvPlxuICAgICAge2VkaXRpbmcgJiYgKFxuICAgICAgICA8VmFsdWVQaWNrZXJcbiAgICAgICAgICBub2RlPXtlZGl0aW5nLm5vZGV9XG4gICAgICAgICAgdHlwZT17ZWRpdGluZy50eXBlfVxuICAgICAgICAgIGJlaGF2aW91cj17YmVoYXZpb3VyfVxuICAgICAgICAgIGNvbnRleHQ9e2NvbnRleHR9XG4gICAgICAgICAgcHJvbXB0PXtjcmVhdGVQcm9tcHRNZXNzYWdlKGVkaXRpbmcubm9kZS5zbG90KX1cbiAgICAgICAgICBzZWFyY2hLZXk9XCJjb2RlXCJcbiAgICAgICAgICBvblNlbGVjdD17aGFuZGxlU2VsZWN0VmFsdWV9XG4gICAgICAgICAgb25DYW5jZWw9eygpID0+IHNldEVkaXRpbmcobnVsbCl9XG4gICAgICAgIC8+XG4gICAgICApfVxuICAgIDwvPlxuICApXG59XG5cbkJpbmRpbmcucHJvcFR5cGVzID0ge1xuICBjb250ZXh0OiBQcm9wVHlwZXMuc3RyaW5nLFxuICBoaWRlQmVoYXZpb3VyOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLFxuICB2YWx1ZTogYmluZFByb3BUeXBlcy52YWx1ZS5pc1JlcXVpcmVkLFxuICBwYXJhbXM6IFByb3BUeXBlcy5hcnJheU9mKGJpbmRQcm9wVHlwZXMubm9kZSksXG4gIG9uVXBkYXRlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG59XG5cbkJpbmRpbmcuZGVmYXVsdFByb3BzID0ge1xuICBoaWRlQmVoYXZpb3VyOiBmYWxzZVxufVxuXG5leHBvcnQgZGVmYXVsdCBCaW5kaW5nXG4iLCJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnXG5cbmltcG9ydCBLZXlXcmFwcGVyIGZyb20gJy4vS2V5V3JhcHBlcidcblxuaW1wb3J0IEJpbmRpbmcgZnJvbSAnLi4vQmluZGluZy9CaW5kaW5nJ1xuaW1wb3J0ICogYXMgYmluZFByb3BUeXBlcyBmcm9tICcuLi9CaW5kaW5nL2JpbmRQcm9wVHlwZXMnXG5cbmZ1bmN0aW9uIEtleSAocHJvcHMpIHtcbiAgY29uc3QgeyBjb250ZXh0LCB2YWx1ZSwgcGFyYW1zLCBrZXlXcmFwcGVyUHJvcHMgPSB7fSwgb25VcGRhdGUgfSA9IHByb3BzXG5cbiAgcmV0dXJuIChcbiAgICA8S2V5V3JhcHBlciB7Li4ua2V5V3JhcHBlclByb3BzfT5cbiAgICAgIDxCaW5kaW5nXG4gICAgICAgIGNvbnRleHQ9e2NvbnRleHR9XG4gICAgICAgIHZhbHVlPXt2YWx1ZX1cbiAgICAgICAgcGFyYW1zPXtwYXJhbXN9XG4gICAgICAgIG9uVXBkYXRlPXtvblVwZGF0ZX1cbiAgICAgIC8+XG4gICAgPC9LZXlXcmFwcGVyPlxuICApXG59XG5cbktleS5wcm9wVHlwZXMgPSB7XG4gIGxhYmVsOiBQcm9wVHlwZXMuc3RyaW5nLFxuICB2YWx1ZTogYmluZFByb3BUeXBlcy52YWx1ZS5pc1JlcXVpcmVkLFxuICBwYXJhbXM6IFByb3BUeXBlcy5hcnJheU9mKGJpbmRQcm9wVHlwZXMubm9kZSksXG4gIG9uVXBkYXRlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG59XG5cbmV4cG9ydCBkZWZhdWx0IEtleVxuIiwiaW1wb3J0IHsgdXNlQ2FsbGJhY2sgfSBmcm9tICdyZWFjdCdcbmltcG9ydCBBY3Rpb25CdXR0b24gZnJvbSAnLi4vLi4vLi4vQ29tbW9uL0FjdGlvbkJ1dHRvbidcbmltcG9ydCBJY29uIGZyb20gJy4uLy4uLy4uL0NvbW1vbi9JY29uJ1xuaW1wb3J0IHsgcmVwbGFjZUluZGV4LCB3aXRob3V0SW5kZXggfSBmcm9tICcuLi8uLi8uLi9yZWR1Y2VyLXV0aWwnXG5cbmltcG9ydCBLZXkgZnJvbSAnLi4vLi4vS2V5cy9LZXknXG5pbXBvcnQgS2V5V3JhcHBlciBmcm9tICcuLi8uLi9LZXlzL0tleVdyYXBwZXInXG5cbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9zdHlsZXMubW9kdWxlLmNzcydcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gQmluZGluZ3NQcm9wZXJ0eVZhbHVlICh7IHByb3AgPSB7fSwgb25VcGRhdGUgfSkge1xuICBjb25zdCB7IHBhcnNlZDogc2VsZWN0aW9uID0gW10gfSA9IHByb3BcblxuICBjb25zdCBpbnNlcnRCaW5kaW5nID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIG9uVXBkYXRlKHtcbiAgICAgIC4uLnByb3AsXG4gICAgICB1c2VSYXc6IGZhbHNlLFxuICAgICAgcGFyc2VkOiBbLi4uc2VsZWN0aW9uLCB7IHZhbHVlOiAnJywgcGFyYW1zOiBbXSB9XVxuICAgIH0pXG4gIH0sIFtwcm9wLCBzZWxlY3Rpb24sIG9uVXBkYXRlXSlcblxuICBjb25zdCB1cGRhdGVCaW5kaW5nID0gdXNlQ2FsbGJhY2soKGJpbmRpbmcsIGkpID0+IHtcbiAgICBvblVwZGF0ZSh7XG4gICAgICAuLi5wcm9wLFxuICAgICAgdXNlUmF3OiBmYWxzZSxcbiAgICAgIHBhcnNlZDogcmVwbGFjZUluZGV4KHNlbGVjdGlvbiwgaSwgYmluZGluZylcbiAgICB9KVxuICB9LCBbcHJvcCwgc2VsZWN0aW9uLCBvblVwZGF0ZV0pXG5cbiAgY29uc3QgcmVtb3ZlQmluZGluZyA9IHVzZUNhbGxiYWNrKGluZGV4ID0+IHtcbiAgICBvblVwZGF0ZSh7XG4gICAgICAuLi5wcm9wLFxuICAgICAgdXNlUmF3OiBmYWxzZSxcbiAgICAgIHBhcnNlZDogd2l0aG91dEluZGV4KHNlbGVjdGlvbiwgaW5kZXgpXG4gICAgfSlcbiAgfSwgW3Byb3AsIHNlbGVjdGlvbiwgb25VcGRhdGVdKVxuXG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIDxvbCBjbGFzc05hbWU9e3N0eWxlcy5wcm9wZXJ0eUJpbmRpbmdzVmFsdWV9PlxuICAgICAgICB7c2VsZWN0aW9uLm1hcCgoYmluZGluZywgaSkgPT4gKFxuICAgICAgICAgIDxsaSBrZXk9e2l9PlxuICAgICAgICAgICAgPEtleVdyYXBwZXI+XG4gICAgICAgICAgICAgIDxLZXlcbiAgICAgICAgICAgICAgICBjb250ZXh0PVwibm9uZVwiXG4gICAgICAgICAgICAgICAgdmFsdWU9e2JpbmRpbmcudmFsdWV9XG4gICAgICAgICAgICAgICAgcGFyYW1zPXtiaW5kaW5nLnBhcmFtc31cbiAgICAgICAgICAgICAgICBvblVwZGF0ZT17YmluZGluZyA9PiB1cGRhdGVCaW5kaW5nKGJpbmRpbmcsIGkpfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLmFjdGlvbnN9PlxuICAgICAgICAgICAgICAgIDxJY29uXG4gICAgICAgICAgICAgICAgICBuYW1lPVwidHJhc2hcIlxuICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtzdHlsZXMuZGVsZXRlQmluZH1cbiAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e2UgPT4ge1xuICAgICAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpXG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZUJpbmRpbmcoaSlcbiAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L0tleVdyYXBwZXI+XG4gICAgICAgICAgPC9saT5cbiAgICAgICAgKSl9XG4gICAgICA8L29sPlxuICAgICAgPEFjdGlvbkJ1dHRvbiBzZWNvbmRhcnkgb25DbGljaz17aW5zZXJ0QmluZGluZ30+XG4gICAgICAgIDxJY29uIG5hbWU9XCJwbHVzXCIgLz4gQWRkIGJpbmRpbmdcbiAgICAgIDwvQWN0aW9uQnV0dG9uPlxuICAgIDwvPlxuICApXG59XG4iLCJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnXG5cbmltcG9ydCBLZXlQb3NpdGlvblNlbGVjdG9yIGZyb20gJy4uLy4uL0NvbW1vbi9LZXlQb3NpdGlvblNlbGVjdG9yJ1xuaW1wb3J0IHtcbiAgUmF3UHJvcGVydHlWYWx1ZSxcbiAgQ29uc3RQcm9wZXJ0eVZhbHVlLFxuICBTdHJpbmdQcm9wZXJ0eVZhbHVlLFxuICBJbnRlZ2VyUHJvcGVydHlWYWx1ZSxcbiAgQm9vbGVhblByb3BlcnR5VmFsdWVcbn0gZnJvbSAnLi9zaW1wbGUtdHlwZXMnXG5pbXBvcnQge1xuICBFbnVtUHJvcGVydHlWYWx1ZSxcbiAgTXVsdGlTZWxlY3RQcm9wZXJ0eVZhbHVlXG59IGZyb20gJy4vY29sbGVjdGlvbi10eXBlcydcbmltcG9ydCBCZWhhdmlvcnNQcm9wZXJ0eVZhbHVlIGZyb20gJy4vQmVoYXZpb3JzUHJvcGVydHlWYWx1ZSdcbmltcG9ydCBCaW5kaW5nc1Byb3BlcnR5VmFsdWUgZnJvbSAnLi9CaW5kaW5nc1Byb3BlcnR5VmFsdWUnXG5cbmZ1bmN0aW9uIFByb3BlcnR5VmFsdWUgKHByb3BzKSB7XG4gIGNvbnN0IHsgc2NoZW1hID0ge30gfSA9IHByb3BzXG4gIGNvbnN0IHsgdHlwZSB9ID0gc2NoZW1hXG4gIGlmICgnY29uc3QnIGluIHNjaGVtYSkge1xuICAgIHJldHVybiA8Q29uc3RQcm9wZXJ0eVZhbHVlIHsuLi5wcm9wc30gLz5cbiAgfVxuXG4gIGlmICgnZW51bScgaW4gc2NoZW1hKSB7XG4gICAgcmV0dXJuIDxFbnVtUHJvcGVydHlWYWx1ZSB7Li4ucHJvcHN9IC8+XG4gIH1cblxuICBpZiAoc2NoZW1hLmhlbHBlciA9PT0gJ2tleS1wb3NpdGlvbi1waWNrZXInKSB7XG4gICAgY29uc3QgeyBwcm9wID0ge30sIG9uVXBkYXRlIH0gPSBwcm9wc1xuICAgIHJldHVybiAoXG4gICAgICA8S2V5UG9zaXRpb25TZWxlY3RvclxuICAgICAgICB2YWx1ZT17cHJvcC5wYXJzZWQgfHwgW119XG4gICAgICAgIG9uVXBkYXRlPXt2YWx1ZSA9PiB7XG4gICAgICAgICAgb25VcGRhdGUoe1xuICAgICAgICAgICAgLi4ucHJvcCxcbiAgICAgICAgICAgIHVzZVJhdzogZmFsc2UsXG4gICAgICAgICAgICBwYXJzZWQ6IHZhbHVlXG4gICAgICAgICAgfSlcbiAgICAgICAgfX1cbiAgICAgIC8+XG4gICAgKVxuICB9XG5cbiAgaWYgKHNjaGVtYS5jaG9pY2VzKSB7XG4gICAgcmV0dXJuIDxNdWx0aVNlbGVjdFByb3BlcnR5VmFsdWUgey4uLnByb3BzfSAvPlxuICB9XG5cbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgIHJldHVybiA8U3RyaW5nUHJvcGVydHlWYWx1ZSB7Li4ucHJvcHN9IC8+XG4gICAgY2FzZSAnaW50JzpcbiAgICAgIHJldHVybiA8SW50ZWdlclByb3BlcnR5VmFsdWUgey4uLnByb3BzfSAvPlxuICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAgcmV0dXJuIDxCb29sZWFuUHJvcGVydHlWYWx1ZSB7Li4ucHJvcHN9IC8+XG4gICAgY2FzZSAncGhhbmRsZSc6XG4gICAgY2FzZSAncGhhbmRsZXMnOlxuICAgICAgcmV0dXJuIDxCZWhhdmlvcnNQcm9wZXJ0eVZhbHVlIHsuLi5wcm9wc30gLz5cbiAgICBjYXNlICdwaGFuZGxlLWFycmF5JzpcbiAgICAgIHJldHVybiA8QmluZGluZ3NQcm9wZXJ0eVZhbHVlIHsuLi5wcm9wc30gLz5cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIDxSYXdQcm9wZXJ0eVZhbHVlIHsuLi5wcm9wc30gLz5cbiAgfVxufVxuXG5Qcm9wZXJ0eVZhbHVlLnByb3BUeXBlcyA9IHtcbiAgc2NoZW1hOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIHR5cGU6IFByb3BUeXBlcy5vbmVPZihbXG4gICAgICAnc3RyaW5nJyxcbiAgICAgICdib29sZWFuJyxcbiAgICAgICdpbnQnLFxuICAgICAgJ2FycmF5JyxcbiAgICAgICdwaGFuZGxlJyxcbiAgICAgICdwaGFuZGxlcycsXG4gICAgICAncGhhbmRsZS1hcnJheScsXG5cbiAgICAgICdpbnRlZ2VyLXVuaW9uJ1xuICAgIF0pLFxuICAgIHJlcXVpcmVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBkZXNjcmlwdGlvbjogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBkZWZhdWx0OiBQcm9wVHlwZXMuYW55LFxuICAgIGNvbnN0OiBQcm9wVHlwZXMuYW55LFxuICAgIGhlbHBlcjogUHJvcFR5cGVzLmFueVxuICB9KSxcbiAgcHJvcDogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBwYXJzZWQ6IFByb3BUeXBlcy5hbnksXG4gICAgcmF3OiBQcm9wVHlwZXMuc3RyaW5nXG4gIH0pLFxuICBvblVwZGF0ZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxufVxuXG5leHBvcnQgZGVmYXVsdCBQcm9wZXJ0eVZhbHVlXG4iLCJpbXBvcnQgUHJvcGVydHlWYWx1ZSBmcm9tICcuL1Byb3BlcnR5VmFsdWUnXG5cbmV4cG9ydCBkZWZhdWx0IFByb3BlcnR5VmFsdWVcbiIsIlxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlRGV2aWNldHJlZU5vZGVOYW1lICh2YWx1ZSkge1xuICBpZiAodmFsdWUubGVuZ3RoID4gMzEpIHtcbiAgICByZXR1cm4gJ21heGltdW0gbGVuZ3RoOiAzMSdcbiAgfSBlbHNlIGlmICh2YWx1ZS5tYXRjaCgvXlteYS16QS1aXS8pKSB7XG4gICAgcmV0dXJuICdmaXJzdCBjaGFyYWN0ZXIgbXVzdCBiZSBhIGxldHRlcidcbiAgfSBlbHNlIGlmICh2YWx1ZS5tYXRjaCgvW15hLXpBLVowLTksLl8rLV0vKSkge1xuICAgIHJldHVybiAndmFsaWQgY2hhcmFjdGVyczogYS16QS1aMC05LC5fKy0nXG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IHZhbGlkYXRlRGV2aWNldHJlZUlkZW50aWZpZXIgPSB2YWxpZGF0ZURldmljZXRyZWVOb2RlTmFtZVxuXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVEZXZpY2V0cmVlTGFiZWwgKHZhbHVlKSB7XG4gIGlmICh2YWx1ZS5sZW5ndGggPiAzMSkge1xuICAgIHJldHVybiAnbWF4aW11bSBsZW5ndGg6IDMxJ1xuICB9IGVsc2UgaWYgKHZhbHVlLm1hdGNoKC9eW15hLXpBLVpdLykpIHtcbiAgICByZXR1cm4gJ2ZpcnN0IGNoYXJhY3RlciBtdXN0IGJlIGEgbGV0dGVyJ1xuICB9IGVsc2UgaWYgKHZhbHVlLm1hdGNoKC9bXmEtekEtWjAtOV9dLykpIHtcbiAgICByZXR1cm4gJ3ZhbGlkIGNoYXJhY3RlcnM6IGEtekEtWjAtOV8nXG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlRGV2aWNldHJlZVJlZmVyZW5jZSAodmFsdWUpIHtcbiAgaWYgKHZhbHVlLmxlbmd0aCA+IDMxKSB7XG4gICAgcmV0dXJuICdtYXhpbXVtIGxlbmd0aDogMzEnXG4gIH0gZWxzZSBpZiAodmFsdWUubWF0Y2goL15bXiZdLykpIHtcbiAgICByZXR1cm4gJ211c3Qgc3RhcnQgd2l0aCBcIiZcIidcbiAgfSBlbHNlIGlmICh2YWx1ZS5tYXRjaCgvXiZbXmEtekEtWl0vKSkge1xuICAgIHJldHVybiAnZmlyc3QgY2hhcmFjdGVyIG11c3QgYmUgYSBsZXR0ZXInXG4gIH0gZWxzZSBpZiAodmFsdWUuc2xpY2UoMSkubWF0Y2goL1teYS16QS1aMC05X10vKSkge1xuICAgIHJldHVybiAndmFsaWQgY2hhcmFjdGVyczogYS16QS1aMC05XydcbiAgfVxufVxuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1syXS51c2VbMV0hLi9pbnB1dC5tb2R1bGUuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMl0udXNlWzFdIS4vaW5wdXQubW9kdWxlLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCBzdHlsZXMgZnJvbSAnLi9pbnB1dC5tb2R1bGUuY3NzJ1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBJbnB1dCAoeyB2YWxpZGF0b3IsIHJlcXVpcmVkID0gZmFsc2UsIHZhbHVlID0gJycsIC4uLnJlc3QgfSkge1xuICBjb25zdCBlcnJvciA9IHZhbGlkYXRvcih2YWx1ZSkgfHwgKCF2YWx1ZSAmJiByZXF1aXJlZCAmJiAnY2Fubm90IGJlIGVtcHR5JylcblxuICByZXR1cm4gKFxuICAgIDxzcGFuIGNsYXNzTmFtZT17c3R5bGVzLndyYXBwZXJ9PlxuICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgdmFsdWU9e3ZhbHVlfSB7Li4ucmVzdH0gLz5cbiAgICAgIHtlcnJvciAmJiA8c3BhbiBjbGFzc05hbWU9e3N0eWxlcy5lcnJvcn0+e2Vycm9yfTwvc3Bhbj59XG4gICAgPC9zcGFuPlxuICApXG59XG4iLCJpbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCdcblxuaW1wb3J0IHtcbiAgdmFsaWRhdGVEZXZpY2V0cmVlTGFiZWwsXG4gIHZhbGlkYXRlRGV2aWNldHJlZU5vZGVOYW1lXG59IGZyb20gJy4uL3ZhbGlkYXRvcnMnXG5pbXBvcnQgSW5wdXQgZnJvbSAnLi4vLi4vQ29tbW9uL0lucHV0J1xuXG4vLyBUT0RPOiBicmVhayB0aGlzIGFwYXJ0IHRvIG1hdGNoIGluZGl2aWR1YWwgdG9nZ2xlc1xuZnVuY3Rpb24gaXNDb21iaW5lZCAobm9kZSkge1xuICBjb25zdCB7IG5hbWUgfSA9IG5vZGVcbiAgY29uc3QgeyBsYWJlbHM6IFtub2RlTGFiZWxdID0gW10gfSA9IG5vZGVcbiAgY29uc3QgeyBsYWJlbDogbGFiZWxQcm9wIH0gPSBub2RlLnByb3BlcnRpZXNcblxuICByZXR1cm4gKFxuICAgIG5hbWUudG9Mb3dlckNhc2UoKSA9PT0gKG5vZGVMYWJlbCB8fCAnJykudG9Mb3dlckNhc2UoKSAmJlxuICAgIG5hbWUudG9Mb3dlckNhc2UoKSA9PT0gKGxhYmVsUHJvcD8ucGFyc2VkIHx8ICcnKS50b0xvd2VyQ2FzZSgpXG4gIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gQmVoYXZpb3JIZWFkZXIgKHByb3BzKSB7XG4gIGNvbnN0IHsgbm9kZSB9ID0gcHJvcHNcblxuICByZXR1cm4gKFxuICAgIDxkaXY+XG4gICAgICA8cD48Y29kZT57bm9kZS5wcm9wZXJ0aWVzLmNvbXBhdGlibGUucGFyc2VkfTwvY29kZT48L3A+XG4gICAgICA8QmVoYXZpb3JJZGVudGlmaWVycyB7Li4ucHJvcHN9IC8+XG4gICAgPC9kaXY+XG4gIClcbn1cblxuZnVuY3Rpb24gQmVoYXZpb3JJZGVudGlmaWVycyAoeyBub2RlLCBvblVwZGF0ZSB9KSB7XG4gIC8vIFRPRE86IHRyaWdnZXIgdmFsdWUgdXBkYXRlcyB3aGVuIHRvZ2dsaW5nXG4gIGNvbnN0IFtuYW1lRnJvbUJpbmQsIHNldE5hbWVGcm9tQmluZF0gPSB1c2VTdGF0ZShpc0NvbWJpbmVkKG5vZGUpKVxuICBjb25zdCBbbGFiZWxGcm9tQmluZCwgc2V0TGFiZWxGcm9tQmluZF0gPSB1c2VTdGF0ZShpc0NvbWJpbmVkKG5vZGUpKVxuICBjb25zdCBbXG4gICAgaGFuZGxlVXBkYXRlTm9kZU5hbWUsXG4gICAgaGFuZGxlVXBkYXRlTm9kZUxhYmVsLFxuICAgIGhhbmRsZVVwZGF0ZUxhYmVsUHJvcGVydHlcbiAgXSA9IHVzZUlkZW50aWZpZXJVcGRhdGVycyhub2RlLCBvblVwZGF0ZSwgbmFtZUZyb21CaW5kLCBsYWJlbEZyb21CaW5kKVxuXG4gIHJldHVybiAoXG4gICAgPHRhYmxlPlxuICAgICAgPHRib2R5PlxuICAgICAgICA8dHI+XG4gICAgICAgICAgPHRoPkJpbmQ8L3RoPlxuICAgICAgICAgIDx0ZD5cbiAgICAgICAgICAgIDxJbnB1dFxuICAgICAgICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgICAgIHZhbHVlPXtub2RlLmxhYmVsc1swXSB8fCAnJ31cbiAgICAgICAgICAgICAgcmVxdWlyZWQ9e3RydWV9XG4gICAgICAgICAgICAgIHZhbGlkYXRvcj17dmFsaWRhdGVEZXZpY2V0cmVlTGFiZWx9XG4gICAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVVcGRhdGVOb2RlTGFiZWx9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvdGQ+XG4gICAgICAgIDwvdHI+XG4gICAgICAgIDx0cj5cbiAgICAgICAgICA8dGg+Tm9kZTwvdGg+XG4gICAgICAgICAgPHRkPlxuICAgICAgICAgICAgPElucHV0XG4gICAgICAgICAgICAgIHZhbHVlPXtub2RlLm5hbWV9XG4gICAgICAgICAgICAgIHJlcXVpcmVkPXt0cnVlfVxuICAgICAgICAgICAgICByZWFkT25seT17bmFtZUZyb21CaW5kfVxuICAgICAgICAgICAgICBkaXNhYmxlZD17bmFtZUZyb21CaW5kfVxuICAgICAgICAgICAgICB2YWxpZGF0b3I9e3ZhbGlkYXRlRGV2aWNldHJlZU5vZGVOYW1lfVxuICAgICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlVXBkYXRlTm9kZU5hbWV9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPGxhYmVsIHRpdGxlPVwiU2V0IGF1dG9tYXRpY2FsbHkgdXNpbmcgYmluZCBuYW1lXCI+XG4gICAgICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgICAgIHR5cGU9XCJjaGVja2JveFwiXG4gICAgICAgICAgICAgICAgY2hlY2tlZD17bmFtZUZyb21CaW5kfVxuICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtlID0+IHNldE5hbWVGcm9tQmluZChlLnRhcmdldC5jaGVja2VkKX1cbiAgICAgICAgICAgICAgLz4gQXV0b21hdGljXG4gICAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgIDwvdGQ+XG4gICAgICAgIDwvdHI+XG4gICAgICAgIDx0cj5cbiAgICAgICAgICA8dGg+TGFiZWw8L3RoPlxuICAgICAgICAgIDx0ZD5cbiAgICAgICAgICAgIDxJbnB1dFxuICAgICAgICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgICAgIHZhbHVlPXtub2RlLnByb3BlcnRpZXMubGFiZWwucGFyc2VkIHx8ICcnfVxuICAgICAgICAgICAgICByZXF1aXJlZD17dHJ1ZX1cbiAgICAgICAgICAgICAgcmVhZE9ubHk9e2xhYmVsRnJvbUJpbmR9XG4gICAgICAgICAgICAgIGRpc2FibGVkPXtsYWJlbEZyb21CaW5kfVxuICAgICAgICAgICAgICB2YWxpZGF0b3I9eygpID0+IG51bGx9XG4gICAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVVcGRhdGVMYWJlbFByb3BlcnR5fVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxsYWJlbCB0aXRsZT1cIlNldCBhdXRvbWF0aWNhbGx5IHVzaW5nIGJpbmQgbmFtZVwiPlxuICAgICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgICB0eXBlPVwiY2hlY2tib3hcIlxuICAgICAgICAgICAgICAgIGNoZWNrZWQ9e2xhYmVsRnJvbUJpbmR9XG4gICAgICAgICAgICAgICAgb25DaGFuZ2U9e2UgPT4gc2V0TGFiZWxGcm9tQmluZChlLnRhcmdldC5jaGVja2VkKX1cbiAgICAgICAgICAgICAgLz4gQXV0b21hdGljXG4gICAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgIDwvdGQ+XG4gICAgICAgIDwvdHI+XG4gICAgICA8L3Rib2R5PlxuICAgIDwvdGFibGU+XG4gIClcbn1cblxuZnVuY3Rpb24gdXNlSWRlbnRpZmllclVwZGF0ZXJzIChub2RlLCBvblVwZGF0ZSwgbmFtZUZyb21CaW5kLCBsYWJlbEZyb21CaW5kKSB7XG4gIGNvbnN0IGhhbmRsZVVwZGF0ZU5vZGVOYW1lID0gdXNlQ2FsbGJhY2soZSA9PiB7XG4gICAgb25VcGRhdGUoeyAuLi5ub2RlLCBuYW1lOiBlLnRhcmdldC52YWx1ZSB9KVxuICB9LCBbbm9kZSwgb25VcGRhdGVdKVxuXG4gIGNvbnN0IGhhbmRsZVVwZGF0ZU5vZGVMYWJlbCA9IHVzZUNhbGxiYWNrKGUgPT4ge1xuICAgIGNvbnN0IHsgdmFsdWUgfSA9IGUudGFyZ2V0XG4gICAgY29uc3QgbGFiZWxzID0gW3ZhbHVlLCAuLi5ub2RlLmxhYmVscy5zbGljZSgxKV1cbiAgICBjb25zdCBuYW1lID0gbmFtZUZyb21CaW5kID8gdmFsdWUgOiBub2RlLm5hbWVcbiAgICBjb25zdCBwcm9wZXJ0aWVzID0gbGFiZWxGcm9tQmluZFxuICAgICAgPyB7XG4gICAgICAgICAgLi4ubm9kZS5wcm9wZXJ0aWVzLFxuICAgICAgICAgIGxhYmVsOiB7XG4gICAgICAgICAgICBwYXJzZWQ6IHZhbHVlLnRvVXBwZXJDYXNlKCksXG4gICAgICAgICAgICByYXc6IGBcIiR7dmFsdWUudG9VcHBlckNhc2UoKX1cImAsXG4gICAgICAgICAgICB1c2VSYXc6IGZhbHNlXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICA6IG5vZGUucHJvcGVydGllc1xuXG4gICAgb25VcGRhdGUoeyAuLi5ub2RlLCBuYW1lLCBsYWJlbHMsIHByb3BlcnRpZXMgfSlcbiAgfSwgW25vZGUsIG9uVXBkYXRlLCBuYW1lRnJvbUJpbmQsIGxhYmVsRnJvbUJpbmRdKVxuXG4gIGNvbnN0IGhhbmRsZVVwZGF0ZUxhYmVsUHJvcGVydHkgPSB1c2VDYWxsYmFjayhlID0+IG9uVXBkYXRlKHtcbiAgICAuLi5ub2RlLFxuICAgIHByb3BlcnRpZXM6IHtcbiAgICAgIC4uLm5vZGUucHJvcGVydGllcyxcbiAgICAgIGxhYmVsOiB7XG4gICAgICAgIC4uLm5vZGUucHJvcGVydGllcy5sYWJlbCxcbiAgICAgICAgcGFyc2VkOiBlLnRhcmdldC52YWx1ZSxcbiAgICAgICAgdXNlUmF3OiBmYWxzZVxuICAgICAgfVxuICAgIH1cbiAgfSksIFtub2RlLCBvblVwZGF0ZV0pXG5cbiAgcmV0dXJuIFtcbiAgICBoYW5kbGVVcGRhdGVOb2RlTmFtZSxcbiAgICBoYW5kbGVVcGRhdGVOb2RlTGFiZWwsXG4gICAgaGFuZGxlVXBkYXRlTGFiZWxQcm9wZXJ0eVxuICBdXG59XG4iLCJpbXBvcnQgY2xvbmVEZWVwIGZyb20gJ2xvZGFzaC9jbG9uZURlZXAnXG5pbXBvcnQgb21pdCBmcm9tICdsb2Rhc2gvb21pdCdcbmltcG9ydCB7IHVzZUNhbGxiYWNrLCB1c2VDb250ZXh0LCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0J1xuXG5pbXBvcnQgQWN0aW9uQnV0dG9uIGZyb20gJy4uLy4uL0NvbW1vbi9BY3Rpb25CdXR0b24nXG5pbXBvcnQgRGlhbG9nQm94IGZyb20gJy4uLy4uL0NvbW1vbi9EaWFsb2dCb3gnXG5pbXBvcnQgTW9kYWwgZnJvbSAnLi4vLi4vQ29tbW9uL01vZGFsJ1xuaW1wb3J0IHsgRGVmaW5pdGlvbnNDb250ZXh0IH0gZnJvbSAnLi4vLi4vQ29udGV4dHMvRGVmaW5pdGlvbnMnXG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vc3R5bGVzLm1vZHVsZS5jc3MnXG5pbXBvcnQgUHJvcGVydHlOYW1lIGZyb20gJy4vUHJvcGVydHlOYW1lJ1xuaW1wb3J0IFByb3BlcnR5VmFsdWUgZnJvbSAnLi9Qcm9wZXJ0eVZhbHVlJ1xuaW1wb3J0IEljb24gZnJvbSAnLi4vLi4vQ29tbW9uL0ljb24nXG5pbXBvcnQgQmVoYXZpb3JIZWFkZXIgZnJvbSAnLi9CZWhhdmlvckhlYWRlcidcblxuZnVuY3Rpb24gQmVoYXZpb3JFZGl0b3IgKHsgbm9kZSwgb25VcGRhdGUsIG9uQ2FuY2VsIH0pIHtcbiAgY29uc3QgeyBiZWhhdmlvcnM6IHNjaGVtYXMgfSA9IHVzZUNvbnRleHQoRGVmaW5pdGlvbnNDb250ZXh0KVxuICBjb25zdCBbcGVuZGluZ0NoYW5nZXMsIHNldFBlbmRpbmdDaGFuZ2VzXSA9IHVzZVN0YXRlKG5vZGUpXG4gIGNvbnN0IHNjaGVtYSA9IHNjaGVtYXNbbm9kZS5wcm9wZXJ0aWVzLmNvbXBhdGlibGU/LnBhcnNlZF1cblxuICBjb25zdCBoYW5kbGVQcm9wTmFtZUNoYW5nZSA9IHByb3AgPT4gZXZlbnQgPT4ge1xuICAgIHNldFBlbmRpbmdDaGFuZ2VzKHtcbiAgICAgIC4uLnBlbmRpbmdDaGFuZ2VzLFxuICAgICAgcHJvcGVydGllczogT2JqZWN0LmtleXMocGVuZGluZ0NoYW5nZXMucHJvcGVydGllcykucmVkdWNlKChhY2MsIGtleSkgPT4ge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHBlbmRpbmdDaGFuZ2VzLnByb3BlcnRpZXNba2V5XVxuICAgICAgICBpZiAoa2V5ID09PSBwcm9wKSB7XG4gICAgICAgICAga2V5ID0gZXZlbnQudGFyZ2V0LnZhbHVlXG4gICAgICAgIH1cblxuICAgICAgICBhY2Nba2V5XSA9IHZhbHVlXG4gICAgICAgIHJldHVybiBhY2NcbiAgICAgIH0sIHt9KVxuICAgIH0pXG4gIH1cblxuICBjb25zdCBoYW5kbGVQcm9wVmFsdWVDaGFuZ2UgPSBuYW1lID0+IHZhbHVlID0+IHtcbiAgICBzZXRQZW5kaW5nQ2hhbmdlcyh7XG4gICAgICAuLi5wZW5kaW5nQ2hhbmdlcyxcbiAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgLi4ucGVuZGluZ0NoYW5nZXMucHJvcGVydGllcyxcbiAgICAgICAgW25hbWVdOiB2YWx1ZVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBjb25zdCBoYW5kbGVEZWxldGVQcm9wID0gbmFtZSA9PiB7XG4gICAgc2V0UGVuZGluZ0NoYW5nZXMoe1xuICAgICAgLi4ucGVuZGluZ0NoYW5nZXMsXG4gICAgICBwcm9wZXJ0aWVzOiBvbWl0KHBlbmRpbmdDaGFuZ2VzLnByb3BlcnRpZXMsIG5hbWUpXG4gICAgfSlcbiAgfVxuXG4gIGNvbnN0IGNvbmZpcm0gPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgb25VcGRhdGUoY2xvbmVEZWVwKHBlbmRpbmdDaGFuZ2VzKSlcbiAgfSwgW3BlbmRpbmdDaGFuZ2VzLCBvblVwZGF0ZV0pXG5cbiAgY29uc3Qgc2NoZW1hUHJvcHMgPSBzY2hlbWE/LnByb3BlcnRpZXMgfHwge31cbiAgY29uc3QgcHJvcGVydGllc0xpc3QgPSAoXG4gICAgc2NoZW1hXG4gICAgICA/IE9iamVjdC5rZXlzKHNjaGVtYVByb3BzKVxuICAgICAgOiBPYmplY3Qua2V5cyhwZW5kaW5nQ2hhbmdlcy5wcm9wZXJ0aWVzKVxuICApLmZpbHRlcihwcm9wZXJ0eSA9PiB7XG4gICAgcmV0dXJuIHByb3BlcnR5ICE9PSAnbGFiZWwnICYmIChcbiAgICAgICFzY2hlbWFQcm9wc1twcm9wZXJ0eV0/LmRlcHJlY2F0ZWRCeSB8fFxuICAgICAgISFwZW5kaW5nQ2hhbmdlcy5wcm9wZXJ0aWVzW3Byb3BlcnR5XVxuICAgIClcbiAgfSlcblxuICByZXR1cm4gKFxuICAgIDxNb2RhbCBvbkRpc21pc3M9e29uQ2FuY2VsfT5cbiAgICAgIDxEaWFsb2dCb3ggZGlzbWlzc1RleHQ9e2ZhbHNlfT5cbiAgICAgICAgPGRpdiBzdHlsZT17eyBtYXhIZWlnaHQ6ICc4MHZoJywgb3ZlcmZsb3c6ICdhdXRvJyB9fT5cbiAgICAgICAgICA8aDI+RWRpdCB7bm9kZS5uYW1lfSA8Y29kZT4oJmFtcDt7bm9kZS5sYWJlbHNbMF19KTwvY29kZT48L2gyPlxuICAgICAgICAgIDxCZWhhdmlvckhlYWRlclxuICAgICAgICAgICAgbm9kZT17cGVuZGluZ0NoYW5nZXN9XG4gICAgICAgICAgICBvblVwZGF0ZT17c2V0UGVuZGluZ0NoYW5nZXN9XG4gICAgICAgICAgLz5cblxuICAgICAgICAgIDxoMz5Db25maWd1cmF0aW9uPC9oMz5cbiAgICAgICAgICA8dGFibGUgY2xhc3NOYW1lPXtzdHlsZXMuZWRpdG9yRm9ybX0+XG4gICAgICAgICAgICA8dGhlYWQ+XG4gICAgICAgICAgICAgIDx0cj5cbiAgICAgICAgICAgICAgICA8dGg+UHJvcGVydHk8L3RoPlxuICAgICAgICAgICAgICAgIDx0aD5WYWx1ZTwvdGg+XG4gICAgICAgICAgICAgICAgPHRoPjwvdGg+XG4gICAgICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgICA8L3RoZWFkPlxuICAgICAgICAgICAgPHRib2R5PlxuICAgICAgICAgICAgICB7cHJvcGVydGllc0xpc3QubWFwKChuYW1lLCBpKSA9PiAoXG4gICAgICAgICAgICAgICAgPHRyIGtleT17aX0+XG4gICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPXtzdHlsZXMucHJvcGVydHlOYW1lfT5cbiAgICAgICAgICAgICAgICAgICAge25hbWUgaW4gc2NoZW1hUHJvcHNcbiAgICAgICAgICAgICAgICAgICAgICA/IChcbiAgICAgICAgICAgICAgICAgICAgICA8UHJvcGVydHlOYW1lIHByb3BlcnR5PXtuYW1lfSBzY2hlbWE9e3NjaGVtYVByb3BzW25hbWVdfSAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgIDogKFxuICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB2YWx1ZT17bmFtZX0gb25DaGFuZ2U9e2hhbmRsZVByb3BOYW1lQ2hhbmdlKG5hbWUpfSAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgICAgIDwvdGQ+XG4gICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPXtzdHlsZXMucHJvcGVydHlWYWx1ZX0+XG4gICAgICAgICAgICAgICAgICAgIDxQcm9wZXJ0eVZhbHVlXG4gICAgICAgICAgICAgICAgICAgICAgbmFtZT17bmFtZX1cbiAgICAgICAgICAgICAgICAgICAgICBwcm9wPXtwZW5kaW5nQ2hhbmdlcy5wcm9wZXJ0aWVzW25hbWVdfVxuICAgICAgICAgICAgICAgICAgICAgIHNjaGVtYT17c2NoZW1hUHJvcHNbbmFtZV19XG4gICAgICAgICAgICAgICAgICAgICAgb25VcGRhdGU9e2hhbmRsZVByb3BWYWx1ZUNoYW5nZShuYW1lKX1cbiAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgIDwvdGQ+XG4gICAgICAgICAgICAgICAgICA8dGQ+XG4gICAgICAgICAgICAgICAgICAgIHsocGVuZGluZ0NoYW5nZXMucHJvcGVydGllc1tuYW1lXSAmJiAhc2NoZW1hUHJvcHNbbmFtZV0/LnJlcXVpcmVkKSAmJiAoXG4gICAgICAgICAgICAgICAgICAgICAgPEljb25cbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9XCJ0cmFzaC1jYW5cIlxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtzdHlsZXMuYWN0aW9ufVxuICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gaGFuZGxlRGVsZXRlUHJvcChuYW1lKX1cbiAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgICAgPC90ZD5cbiAgICAgICAgICAgICAgICA8L3RyPlxuICAgICAgICAgICAgICApKX1cbiAgICAgICAgICAgIDwvdGJvZHk+XG4gICAgICAgICAgPC90YWJsZT5cbiAgICAgICAgICA8ZGl2IHN0eWxlPXt7IHRleHRBbGlnbjogJ2NlbnRlcicgfX0+XG4gICAgICAgICAgICA8QWN0aW9uQnV0dG9uIG9uQ2xpY2s9e2NvbmZpcm19Pk9rYXk8L0FjdGlvbkJ1dHRvbj5cbiAgICAgICAgICAgIDxBY3Rpb25CdXR0b24gb25DbGljaz17b25DYW5jZWx9IHNlY29uZGFyeT5DYW5jZWw8L0FjdGlvbkJ1dHRvbj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L0RpYWxvZ0JveD5cbiAgICA8L01vZGFsPlxuICApXG59XG5cbmV4cG9ydCBkZWZhdWx0IEJlaGF2aW9yRWRpdG9yXG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzJdLnVzZVsxXSEuL2xpbmsubW9kdWxlLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzJdLnVzZVsxXSEuL2xpbmsubW9kdWxlLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcydcblxuaW1wb3J0IEljb24gZnJvbSAnLi9JY29uJ1xuaW1wb3J0IHN0eWxlcyBmcm9tICcuL2xpbmsubW9kdWxlLmNzcydcblxuZnVuY3Rpb24gTGluayAocHJvcHMpIHtcbiAgY29uc3QgeyBocmVmLCBjaGlsZHJlbiwgZXh0ZXJuYWwsIHNob3dFeHRlcm5hbCwgLi4ucmVzdCB9ID0gcHJvcHNcbiAgY29uc3QgcHJvcGVydGllcyA9IE9iamVjdC5hc3NpZ24oeyBocmVmIH0sIHJlc3QsIGV4dGVybmFsICYmIHtcbiAgICByZWw6ICdub3JlZmVycmVyJyxcbiAgICB0YXJnZXQ6ICdfYmxhbmsnXG4gIH0pXG5cbiAgcmV0dXJuIChcbiAgICA8YSB7Li4ucHJvcGVydGllc30+XG4gICAgICB7Y2hpbGRyZW59XG4gICAgICB7ZXh0ZXJuYWwgJiYgc2hvd0V4dGVybmFsICYmIChcbiAgICAgICAgPEljb25cbiAgICAgICAgICBjbGFzc05hbWU9e3N0eWxlcy5pY29ufVxuICAgICAgICAgIG5hbWU9XCJhcnJvdy11cC1yaWdodC1mcm9tLXNxdWFyZVwiXG4gICAgICAgIC8+XG4gICAgICApfVxuICAgIDwvYT5cbiAgKVxufVxuXG5MaW5rLnByb3BUeXBlcyA9IHtcbiAgaHJlZjogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICBjaGlsZHJlbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbXG4gICAgUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm5vZGUpLFxuICAgIFByb3BUeXBlcy5ub2RlXG4gIF0pLmlzUmVxdWlyZWQsXG4gIGV4dGVybmFsOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLFxuICBzaG93RXh0ZXJuYWw6IFByb3BUeXBlcy5ib29sXG59XG5cbkxpbmsuZGVmYXVsdFByb3BzID0ge1xuICBleHRlcm5hbDogZmFsc2UsXG4gIHNob3dFeHRlcm5hbDogdHJ1ZVxufVxuXG5leHBvcnQgZGVmYXVsdCBMaW5rXG4iLCJpbXBvcnQgRGlhbG9nQm94IGZyb20gJy4uLy4uL0NvbW1vbi9EaWFsb2dCb3gnXG5pbXBvcnQgTGluayBmcm9tICcuLi8uLi9Db21tb24vTGluaydcbmltcG9ydCBNb2RhbCBmcm9tICcuLi8uLi9Db21tb24vTW9kYWwnXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEJldGFOb3RpY2VEaWFsb2cgKHsgb25EaXNtaXNzIH0pIHtcbiAgY29uc3QgaXNzdWVzTGluayA9IChcbiAgICA8TGluayBleHRlcm5hbCBocmVmPVwiaHR0cHM6Ly9naXRodWIuY29tL25pY2tjb3V0c29zL2tleW1hcC1lZGl0b3IvaXNzdWVzXCI+XG4gICAgICBLZXltYXAgRWRpdG9yIElzc3Vlc1xuICAgIDwvTGluaz5cbiAgKVxuXG4gIHJldHVybiAoXG4gICAgPE1vZGFsIG9uRGlzbWlzcz17b25EaXNtaXNzfT5cbiAgICAgIDxEaWFsb2dCb3ggb25EaXNtaXNzPXtvbkRpc21pc3N9IHN0eWxlPXt7IG1heEhlaWdodDogJzgwdmgnLCBvdmVyZmxvdzogJ3Njcm9sbCcgfX0+XG4gICAgICAgIDxoMj5CZWhhdmlvciBFZGl0aW5nIEJldGEgVGVzdDwvaDI+XG4gICAgICAgIDxwPldlbGNvbWUgdG8gdGhlIGJlaGF2aW9yIGVkaXRpbmcgYmV0YSE8L3A+XG5cbiAgICAgICAgPHA+XG4gICAgICAgICAgVGhpcyBmZWF0dXJlIGhhcyBiZWVuIGEgbG9uZyB0aW1lIGNvbWluZywgYW5kIHdoaWxlIGl0IHNob3VsZCBlbmFibGUgYVxuICAgICAgICAgIGxvdCBvZiBhZHZhbmNlZCBaTUsgZmVhdHVyZXMgdGhyb3VnaCB0aGUgYXBwIGl0IGlzIHN0aWxsIGEgd29yayBpblxuICAgICAgICAgIHByb2dyZXNzLiBTb21lIGZlYXR1cmVzIGFyZSBzdGlsbCBtaXNzaW5nIHNvIHRoZSB1c2UgZXhwZXJpZW5jZSBpcyBhXG4gICAgICAgICAgbGl0dGxlIHJvdWdoLCBhbmQgdGhlcmUgbWF5IGJlIGVycm9ycyBhcyB3ZWxsLiBTb21lIGZhbWlsaWFyaXR5IHdpdGhcbiAgICAgICAgICBaTUsgYmVoYXZpb3IgZnVuY3Rpb25hbGl0eSBpcyBleHBlY3RlZC5cbiAgICAgICAgPC9wPlxuXG4gICAgICAgIDxwPlxuICAgICAgICAgIEkndmUgYmVlbiB1c2luZyBpdCBmb3IgYSB3aGlsZSBhbmQgaXQgc2VlbXMgdG8gYmUgaW4gYSBwcmV0dHkgd29ya2FibGVcbiAgICAgICAgICBzdGF0ZSwgYnV0IEkgY2FuJ3QgY2F0Y2ggZXZlcnl0aGluZywgc28gaXQgd291bGQgbWVhbiBhIGxvdCB0byBtZSBmb3JcbiAgICAgICAgICB5b3UgdG8gc2hhcmUgYW55IGZlZWRiYWNrIG9yIGlzc3VlcyBvbiBHaXRIdWI6IHtpc3N1ZXNMaW5rfS5cbiAgICAgICAgPC9wPlxuICAgICAgPC9EaWFsb2dCb3g+XG4gICAgPC9Nb2RhbD5cbiAgKVxufVxuIiwiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJ1xuaW1wb3J0IHsgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCdcbmltcG9ydCBBY3Rpb25CdXR0b24gZnJvbSAnLi4vLi4vQ29tbW9uL0FjdGlvbkJ1dHRvbidcblxuaW1wb3J0IERpYWxvZ0JveCBmcm9tICcuLi8uLi9Db21tb24vRGlhbG9nQm94J1xuaW1wb3J0IE1vZGFsIGZyb20gJy4uLy4uL0NvbW1vbi9Nb2RhbCdcblxuY29uc3Qga25vd25CZWhhdmlvclR5cGVzID0gW1xuICAnem1rLGJlaGF2aW9yLWhvbGQtdGFwJyxcbiAgJ3ptayxiZWhhdmlvci1tb2QtbW9ycGgnLFxuICAnem1rLGJlaGF2aW9yLXRhcC1kYW5jZScsXG4gICd6bWssYmVoYXZpb3Itc3RpY2t5LWtleScsXG4gICd6bWssYmVoYXZpb3ItY2Fwcy13b3JkJ1xuXVxuXG5mdW5jdGlvbiBOZXdCZWhhdmlvck1vZGFsICh7IG9uVXBkYXRlLCBvbkNhbmNlbCB9KSB7XG4gIGNvbnN0IFtwZW5kaW5nU2VsZWN0aW9uLCBzZXRQZW5kaW5nU2VsZWN0aW9uXSA9IHVzZVN0YXRlKCcnKVxuICByZXR1cm4gKFxuICAgIDxNb2RhbD5cbiAgICAgIDxEaWFsb2dCb3ggZGlzbWlzc1RleHQ9e251bGx9PlxuICAgICAgICA8aDM+QWRkIG5ldyBiZWhhdmlvcjwvaDM+XG4gICAgICAgIDxsYWJlbD5cbiAgICAgICAgICBUeXBlIDxzZWxlY3RcbiAgICAgICAgICAgIHJlcXVpcmVkXG4gICAgICAgICAgICB2YWx1ZT17cGVuZGluZ1NlbGVjdGlvbn1cbiAgICAgICAgICAgIG9uQ2hhbmdlPXtlID0+IHNldFBlbmRpbmdTZWxlY3Rpb24oZS50YXJnZXQudmFsdWUpfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJcIiBkaXNhYmxlZD5TZWxlY3QgYSBiZWhhdmlvciB0eXBlPC9vcHRpb24+XG4gICAgICAgICAgICB7a25vd25CZWhhdmlvclR5cGVzLm1hcCgodHlwZSwgaSkgPT4gKFxuICAgICAgICAgICAgICA8b3B0aW9uIGtleT17aX0gdmFsdWU9e3R5cGV9Pnt0eXBlfTwvb3B0aW9uPlxuICAgICAgICAgICAgKSl9XG4gICAgICAgICAgPC9zZWxlY3Q+XG4gICAgICAgIDwvbGFiZWw+XG4gICAgICAgIDxkaXYgc3R5bGU9e3sgdGV4dEFsaWduOiAnY2VudGVyJywgbWFyZ2luOiAnMTBweCcgfX0+XG4gICAgICAgICAgPEFjdGlvbkJ1dHRvblxuICAgICAgICAgICAgZGlzYWJsZWQ9eyFwZW5kaW5nU2VsZWN0aW9ufVxuICAgICAgICAgICAgb25DbGljaz17KCkgPT4gb25VcGRhdGUocGVuZGluZ1NlbGVjdGlvbil9XG4gICAgICAgICAgPlxuICAgICAgICAgICAgQ3JlYXRlXG4gICAgICAgICAgPC9BY3Rpb25CdXR0b24+XG4gICAgICAgICAgPEFjdGlvbkJ1dHRvbiBvbkNsaWNrPXtvbkNhbmNlbH0gc2Vjb25kYXJ5PkNhbmNlbDwvQWN0aW9uQnV0dG9uPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvRGlhbG9nQm94PlxuICAgIDwvTW9kYWw+XG4gIClcbn1cblxuTmV3QmVoYXZpb3JNb2RhbC5wcm9wVHlwZXMgPSB7XG4gIG9uVXBkYXRlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBvbkNhbmNlbDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxufVxuXG5leHBvcnQgZGVmYXVsdCBOZXdCZWhhdmlvck1vZGFsXG4iLCJpbXBvcnQgdGltZXMgZnJvbSAnbG9kYXNoL3RpbWVzJ1xuaW1wb3J0IHsgYmVoYXZpb3JTY2hlbWFzIH0gZnJvbSAnem1rLWRhdGEvYmVoYXZpb3JzJ1xuXG5mdW5jdGlvbiBpc0JpbmRpbmdUeXBlIChwcm9wU2NoZW1hKSB7XG4gIHJldHVybiBbJ3BoYW5kbGUnLCAncGhhbmRsZXMnLCAncGhhbmRsZS1hcnJheSddLmluY2x1ZGVzKHByb3BTY2hlbWEudHlwZSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUJlaGF2aW9yIChjb21wYXRpYmxlLCB7IG5hbWUsIGxhYmVscywgbGFiZWwgfSkge1xuICBjb25zdCBzY2hlbWEgPSBiZWhhdmlvclNjaGVtYXNbY29tcGF0aWJsZV1cbiAgcmV0dXJuIHtcbiAgICBuYW1lLFxuICAgIGxhYmVscyxcbiAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICBjb21wYXRpYmxlOiB7XG4gICAgICAgIHJhdzogYFwiJHtjb21wYXRpYmxlfVwiYCxcbiAgICAgICAgcGFyc2VkOiBjb21wYXRpYmxlXG4gICAgICB9LFxuICAgICAgbGFiZWw6IHtcbiAgICAgICAgcmF3OiBgXCIke2xhYmVsfVwiYCxcbiAgICAgICAgcGFyc2VkOiBsYWJlbFxuICAgICAgfSxcbiAgICAgIC4uLk9iamVjdC5rZXlzKHNjaGVtYS5wcm9wZXJ0aWVzKS5yZWR1Y2UoKHByb3BzLCBwcm9wKSA9PiB7XG4gICAgICAgIGNvbnN0IHByb3BTY2hlbWEgPSBzY2hlbWEucHJvcGVydGllc1twcm9wXVxuICAgICAgICBpZiAoaXNCaW5kaW5nVHlwZShwcm9wU2NoZW1hKSAmJiBwcm9wU2NoZW1hLmxlbmd0aCkge1xuICAgICAgICAgIHByb3BzW3Byb3BdID0ge1xuICAgICAgICAgICAgcGFyc2VkOiB0aW1lcyhwcm9wU2NoZW1hLmxlbmd0aCwgKCkgPT4gJyZub25lJylcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoJ2NvbnN0JyBpbiBwcm9wU2NoZW1hKSB7XG4gICAgICAgICAgcHJvcHNbcHJvcF0gPSB7XG4gICAgICAgICAgICBwYXJzZWQ6IHByb3BTY2hlbWEuY29uc3QsXG4gICAgICAgICAgICAvLyB0aGlzIGlzbid0IHJpZ2h0IGJ1dCBjb252ZW5pZW50bHkgb25seSBhZmZlY3RzICNiaW5kaW5nLWNlbGxzXG4gICAgICAgICAgICAvLyB3aGljaCBpcyBhbiBpbnRlZ2VyIGFuZCB3aGljaCB3ZSBuZXZlciBuZWVkIHRvIHVzZSBhcyBhIHJhdyB2YWx1ZVxuICAgICAgICAgICAgcmF3OiBgPCR7cHJvcFNjaGVtYS5jb25zdC50b1N0cmluZygpfT5gXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHByb3BzXG4gICAgICB9LCB7fSlcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCBvbWl0IGZyb20gJ2xvZGFzaC9vbWl0J1xuaW1wb3J0IHsgY3JlYXRlU2xpY2UgfSBmcm9tICdAcmVkdXhqcy90b29sa2l0J1xuaW1wb3J0IHsgcmVzb2x2ZUJlaGF2aW9yUGFyYW1zIH0gZnJvbSAnem1rLWRhdGEvcGFyYW1ldGVycydcblxuZXhwb3J0IGNvbnN0IHNlbGVjdEJlaGF2aW9ycyA9IHN0YXRlID0+IHN0YXRlLmtleWJvYXJkLmtleW1hcC5iZWhhdmlvcnNcblxuY29uc3QgYmVoYXZpb3JzU2xpY2UgPSBjcmVhdGVTbGljZSh7XG4gIG5hbWU6ICdiZWhhdmlvcnMnLFxuICBpbml0aWFsU3RhdGU6IFtdLFxuICByZWR1Y2Vyczoge1xuICAgIGFkZEJlaGF2aW9yIChzdGF0ZSwgYWN0aW9uKSB7XG4gICAgICBzdGF0ZS5wdXNoKGFjdGlvbi5wYXlsb2FkLmJlaGF2aW9yKVxuICAgIH0sXG4gICAgdXBkYXRlQmVoYXZpb3IgKHN0YXRlLCBhY3Rpb24pIHtcbiAgICAgIHN0YXRlW2FjdGlvbi5wYXlsb2FkLmJlaGF2aW9ySW5kZXhdID0gb21pdChhY3Rpb24ucGF5bG9hZC5iZWhhdmlvciwgJ3BhcmFtcycpXG4gICAgICByZXNvbHZlQmVoYXZpb3JQYXJhbXMoc3RhdGUpXG4gICAgfSxcbiAgICBkZWxldGVCZWhhdmlvciAoc3RhdGUsIGFjdGlvbikge1xuICAgICAgc3RhdGUuc3BsaWNlKGFjdGlvbi5wYXlsb2FkLmJlaGF2aW9ySW5kZXgsIDEpXG4gICAgfVxuICB9XG59KVxuXG5leHBvcnQgY29uc3Qge1xuICBhZGRCZWhhdmlvcixcbiAgdXBkYXRlQmVoYXZpb3IsXG4gIGRlbGV0ZUJlaGF2aW9yXG59ID0gYmVoYXZpb3JzU2xpY2UuYWN0aW9uc1xuXG5leHBvcnQgZGVmYXVsdCBiZWhhdmlvcnNTbGljZS5yZWR1Y2VyXG4iLCJpbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCdcbmltcG9ydCB7IHVzZURpc3BhdGNoLCB1c2VTZWxlY3RvciB9IGZyb20gJ3JlYWN0LXJlZHV4J1xuXG5pbXBvcnQgQWN0aW9uQnV0dG9uIGZyb20gJy4uLy4uL0NvbW1vbi9BY3Rpb25CdXR0b24nXG5pbXBvcnQgSWNvbiBmcm9tICcuLi8uLi9Db21tb24vSWNvbidcbmltcG9ydCBCZWhhdmlvckVkaXRvciBmcm9tICcuL0JlaGF2aW9yRWRpdG9yJ1xuaW1wb3J0IEJldGFOb3RpY2VEaWFsb2cgZnJvbSAnLi9CZXRhTm90aWNlRGlhbG9nJ1xuaW1wb3J0IE5ld0JlaGF2aW9yTW9kYWwgZnJvbSAnLi9OZXdCZWhhdmlvck1vZGFsJ1xuaW1wb3J0IHN0eWxlcyBmcm9tICcuL3N0eWxlcy5tb2R1bGUuY3NzJ1xuaW1wb3J0IHsgY3JlYXRlQmVoYXZpb3IgfSBmcm9tICcuL2NyZWF0ZS1iZWhhdmlvcidcbmltcG9ydCB7XG4gIHNlbGVjdEJlaGF2aW9ycyxcbiAgYWRkQmVoYXZpb3IsXG4gIGRlbGV0ZUJlaGF2aW9yLFxuICB1cGRhdGVCZWhhdmlvclxufSBmcm9tICcuL2JlaGF2aW9yc1NsaWNlJ1xuXG5mdW5jdGlvbiBCZWhhdmlvcnMgKCkge1xuICBjb25zdCBleHBlcmltZW50YWxTZXR0aW5ncyA9IHVzZVNlbGVjdG9yKHN0YXRlID0+IHN0YXRlLmV4cGVyaW1lbnRhbFNldHRpbmdzKVxuXG4gIGNvbnN0IFtlZGl0aW5nLCBzZXRFZGl0aW5nXSA9IHVzZVN0YXRlKG51bGwpXG4gIGNvbnN0IFtjcmVhdGluZywgc2V0Q3JlYXRpbmddID0gdXNlU3RhdGUoZmFsc2UpXG4gIGNvbnN0IFtiZXRhRGlzY2xhaW1lclZpc2libGUsIHNldEJldGFEaXNjbGFpbWVyVmlzaWJsZV0gPSB1c2VTdGF0ZShmYWxzZSlcbiAgY29uc3QgYmVoYXZpb3JzID0gdXNlU2VsZWN0b3Ioc2VsZWN0QmVoYXZpb3JzKVxuICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKClcblxuICBjb25zdCBoYW5kbGVBZGQgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgc2V0Q3JlYXRpbmcodHJ1ZSlcbiAgfSwgW3NldENyZWF0aW5nXSlcblxuICBjb25zdCBoYW5kbGVBZGRQZW5kaW5nID0gdXNlQ2FsbGJhY2soY29tcGF0aWJsZSA9PiB7XG4gICAgc2V0Q3JlYXRpbmcoZmFsc2UpXG4gICAgZGlzcGF0Y2goYWRkQmVoYXZpb3Ioe1xuICAgICAgYmVoYXZpb3I6IGNyZWF0ZUJlaGF2aW9yKGNvbXBhdGlibGUsIHtcbiAgICAgICAgbmFtZTogJ25ld19iZWhhdmlvcicsXG4gICAgICAgIGxhYmVsczogWyduZXdfYmVoYXZpb3InXSxcbiAgICAgICAgbGFiZWw6ICdORVdfQkVIQVZJT1InXG4gICAgICB9KVxuICAgIH0pKVxuXG4gICAgc2V0VGltZW91dCgoKSA9PiBzZXRFZGl0aW5nKGJlaGF2aW9ycy5sZW5ndGgpKVxuICB9LCBbYmVoYXZpb3JzLCBkaXNwYXRjaCwgc2V0Q3JlYXRpbmcsIHNldEVkaXRpbmddKVxuXG4gIGNvbnN0IGhhbmRsZUVkaXQgPSB1c2VDYWxsYmFjayhpbmRleCA9PiB7XG4gICAgc2V0RWRpdGluZyhpbmRleClcbiAgfSwgW3NldEVkaXRpbmddKVxuXG4gIGNvbnN0IGhhbmRsZURlbGV0ZSA9IHVzZUNhbGxiYWNrKChpbmRleCkgPT4ge1xuICAgIGRpc3BhdGNoKGRlbGV0ZUJlaGF2aW9yKHsgYmVoYXZpb3JJbmRleDogaW5kZXggfSkpXG4gIH0sIFtkaXNwYXRjaF0pXG5cbiAgY29uc3Qgc2hvd0JldGFEaWFsb2cgPSB1c2VDYWxsYmFjayhldmVudCA9PiB7XG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKClcbiAgICBzZXRCZXRhRGlzY2xhaW1lclZpc2libGUodHJ1ZSlcbiAgfSwgW3NldEJldGFEaXNjbGFpbWVyVmlzaWJsZV0pXG5cbiAgY29uc3QgaGlkZUJldGFEaWFsb2cgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgc2V0QmV0YURpc2NsYWltZXJWaXNpYmxlKGZhbHNlKVxuICB9LCBbc2V0QmV0YURpc2NsYWltZXJWaXNpYmxlXSlcblxuICBjb25zdCB0b2dnbGVCZXRhID0gdXNlQ2FsbGJhY2soZW5hYmxlQmVoYXZpb3JFZGl0aW5nID0+IHtcbiAgICBkaXNwYXRjaCh7XG4gICAgICB0eXBlOiAnU0VUVElOR1NfVVBEQVRFJyxcbiAgICAgIHNldHRpbmdzOiB7XG4gICAgICAgIC4uLmV4cGVyaW1lbnRhbFNldHRpbmdzLFxuICAgICAgICBlbmFibGVCZWhhdmlvckVkaXRpbmdcbiAgICAgIH1cbiAgICB9KVxuICB9LCBbZXhwZXJpbWVudGFsU2V0dGluZ3MsIGRpc3BhdGNoXSlcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMubWFpbn0+XG5cbiAgICAgIHtjcmVhdGluZyAmJiAoXG4gICAgICAgIDxOZXdCZWhhdmlvck1vZGFsXG4gICAgICAgICAgb25VcGRhdGU9e2hhbmRsZUFkZFBlbmRpbmd9XG4gICAgICAgICAgb25DYW5jZWw9eygpID0+IHNldENyZWF0aW5nKGZhbHNlKX1cbiAgICAgICAgLz5cbiAgICAgICl9XG5cbiAgICAgIHtlZGl0aW5nICE9PSBudWxsICYmIChcbiAgICAgICAgPEJlaGF2aW9yRWRpdG9yXG4gICAgICAgICAgbm9kZT17YmVoYXZpb3JzW2VkaXRpbmddfVxuICAgICAgICAgIG9uQ2FuY2VsPXsoKSA9PiBzZXRFZGl0aW5nKG51bGwpfVxuICAgICAgICAgIG9uVXBkYXRlPXtiZWhhdmlvciA9PiB7XG4gICAgICAgICAgICBzZXRFZGl0aW5nKG51bGwpXG4gICAgICAgICAgICBkaXNwYXRjaCh1cGRhdGVCZWhhdmlvcih7XG4gICAgICAgICAgICAgIGJlaGF2aW9ySW5kZXg6IGVkaXRpbmcsXG4gICAgICAgICAgICAgIGJlaGF2aW9yXG4gICAgICAgICAgICB9KSlcbiAgICAgICAgICB9fVxuICAgICAgICAvPlxuICAgICAgKX1cblxuICAgICAge2JldGFEaXNjbGFpbWVyVmlzaWJsZSAmJiAoXG4gICAgICAgIDxCZXRhTm90aWNlRGlhbG9nIG9uRGlzbWlzcz17aGlkZUJldGFEaWFsb2d9IC8+XG4gICAgICApfVxuXG4gICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLnBhbmVsfT5cbiAgICAgICAgPGxhYmVsPlxuICAgICAgICAgIEVuYWJsZSBCZXRhXG4gICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICB0eXBlPVwiY2hlY2tib3hcIlxuICAgICAgICAgICAgY2hlY2tlZD17ZXhwZXJpbWVudGFsU2V0dGluZ3MuZW5hYmxlQmVoYXZpb3JFZGl0aW5nfVxuICAgICAgICAgICAgb25DaGFuZ2U9e2UgPT4gdG9nZ2xlQmV0YShlLnRhcmdldC5jaGVja2VkKX1cbiAgICAgICAgICAvPlxuICAgICAgICA8L2xhYmVsPlxuXG4gICAgICAgIDxBY3Rpb25CdXR0b24gb25DbGljaz17c2hvd0JldGFEaWFsb2d9IHN0eWxlPXt7IGJhY2tncm91bmRDb2xvcjogJ29yYW5nZScgfX0+XG4gICAgICAgICAgPEljb24gbmFtZT1cIndhcm5pbmdcIiAvPiBEZXRhaWxzXG4gICAgICAgIDwvQWN0aW9uQnV0dG9uPlxuXG4gICAgICAgIDxoMz5DdXN0b20gQmVoYXZpb3JzPC9oMz5cbiAgICAgICAgPHRhYmxlIHN0eWxlPXt7IHdpZHRoOiAnMTAwJScgfX0+XG4gICAgICAgICAgPHRoZWFkPlxuICAgICAgICAgICAgPHRyPlxuICAgICAgICAgICAgICA8dGg+QmluZGluZzwvdGg+XG4gICAgICAgICAgICAgIDx0aD5Db21wYXRpYmxlPC90aD5cbiAgICAgICAgICAgICAgPHRoPkFjdGlvbnM8L3RoPlxuICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICA8L3RoZWFkPlxuICAgICAgICAgIDx0Ym9keT5cbiAgICAgICAgICAgIHtiZWhhdmlvcnMubWFwKChiZWhhdmlvciwgaSkgPT4gKFxuICAgICAgICAgICAgICA8dHIga2V5PXtpfT5cbiAgICAgICAgICAgICAgICA8dGQ+PGNvZGU+JmFtcDt7YmVoYXZpb3IubGFiZWxzWzBdfTwvY29kZT48L3RkPlxuICAgICAgICAgICAgICAgIDx0ZD57YmVoYXZpb3IucHJvcGVydGllcy5jb21wYXRpYmxlLnJhd308L3RkPlxuICAgICAgICAgICAgICAgIDx0ZD5cbiAgICAgICAgICAgICAgICAgIHtleHBlcmltZW50YWxTZXR0aW5ncy5lbmFibGVCZWhhdmlvckVkaXRpbmcgJiYgKFxuICAgICAgICAgICAgICAgICAgICA8PlxuICAgICAgICAgICAgICAgICAgICAgIDxJY29uIGNsYXNzTmFtZT17c3R5bGVzLmFjdGlvbn0gb25DbGljaz17KCkgPT4gaGFuZGxlRWRpdChpKX0gbmFtZT1cIndyZW5jaFwiIC8+XG4gICAgICAgICAgICAgICAgICAgICAgPEljb24gY2xhc3NOYW1lPXtzdHlsZXMuYWN0aW9ufSBvbkNsaWNrPXsoKSA9PiBoYW5kbGVEZWxldGUoaSl9IG5hbWU9XCJ0cmFzaC1jYW5cIiAvPlxuICAgICAgICAgICAgICAgICAgICA8Lz5cbiAgICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgPC90ZD5cbiAgICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgICkpfVxuICAgICAgICAgIDwvdGJvZHk+XG4gICAgICAgIDwvdGFibGU+XG5cbiAgICAgICAgPEFjdGlvbkJ1dHRvbiBvbkNsaWNrPXtoYW5kbGVBZGR9PlxuICAgICAgICAgIEFkZCBOZXcgQmVoYXZpb3JcbiAgICAgICAgPC9BY3Rpb25CdXR0b24+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKVxufVxuXG5leHBvcnQgZGVmYXVsdCBCZWhhdmlvcnNcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMl0udXNlWzFdIS4vc3R5bGVzLm1vZHVsZS5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1syXS51c2VbMV0hLi9zdHlsZXMubW9kdWxlLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcydcblxuaW1wb3J0IHN0eWxlcyBmcm9tICcuL3N0eWxlcy5tb2R1bGUuY3NzJ1xuaW1wb3J0IEtleVBvc2l0aW9uU2VsZWN0b3IgZnJvbSAnLi4vQ29tbW9uL0tleVBvc2l0aW9uU2VsZWN0b3InXG5cbmZ1bmN0aW9uIFNlbGVjdEtleUNUQSAoKSB7XG4gIHJldHVybiAoXG4gICAgPHAgY2xhc3NOYW1lPXtzdHlsZXMuZmxvYXRpbmdNZXNzYWdlfT5cbiAgICAgIENsaWNrIG9uIGEga2V5IHRvIGFkZCBpdCB0byB0aGUgY29tYm9cbiAgICA8L3A+XG4gIClcbn1cblxuZnVuY3Rpb24gQ29tYm9JbnB1dE1hcCAoeyBrZXlQb3NpdGlvbnMsIG9uVXBkYXRlIH0pIHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLmNvbWJvSW5wdXRNYXB9PlxuICAgICAgPEtleVBvc2l0aW9uU2VsZWN0b3JcbiAgICAgICAgdmFsdWU9e2tleVBvc2l0aW9uc31cbiAgICAgICAgb25VcGRhdGU9e29uVXBkYXRlfVxuICAgICAgLz5cbiAgICAgIHtrZXlQb3NpdGlvbnMubGVuZ3RoIDwgMiAmJiA8U2VsZWN0S2V5Q1RBIC8+fVxuICAgIDwvZGl2PlxuICApXG59XG5cbkNvbWJvSW5wdXRNYXAucHJvcFR5cGVzID0ge1xuICBvblVwZGF0ZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAga2V5UG9zaXRpb25zOiBQcm9wVHlwZXMuYXJyYXlPZihcbiAgICBQcm9wVHlwZXMubnVtYmVyXG4gICkuaXNSZXF1aXJlZFxufVxuXG5leHBvcnQgZGVmYXVsdCBDb21ib0lucHV0TWFwXG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzJdLnVzZVsxXSEuL2VkaXRhYmxlZmllbGQubW9kdWxlLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzJdLnVzZVsxXSEuL2VkaXRhYmxlZmllbGQubW9kdWxlLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsIlxuZXhwb3J0IGZ1bmN0aW9uIHN0b3AgKGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKVxuICAgIGZuKClcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gb25LZXkgKG1hcHBpbmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChldmVudCkge1xuICAgIGlmIChtYXBwaW5nW2V2ZW50LmtleV0pIHtcbiAgICAgIG1hcHBpbmdbZXZlbnQua2V5XSgpXG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlRWZmZWN0LCB1c2VSZWYsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnXG5cbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9lZGl0YWJsZWZpZWxkLm1vZHVsZS5jc3MnXG5pbXBvcnQgSWNvbiBmcm9tICcuL0ljb24nXG5pbXBvcnQgeyBzdG9wLCBvbktleSB9IGZyb20gJy4uL2V2ZW50LXV0aWwnXG5cbmZ1bmN0aW9uIEVkaXRhYmxlRmllbGQgKHsgdmFsdWUsIHZhbGlkYXRlLCByZXF1aXJlZCwgcmVuZGVyLCBvblVwZGF0ZSB9KSB7XG4gIGNvbnN0IHJlZiA9IHVzZVJlZigpXG4gIGNvbnN0IFtzdGF0ZSwgc2V0U3RhdGVdID0gdXNlU3RhdGUoe1xuICAgIHZhbHVlLFxuICAgIGVkaXRpbmc6IGZhbHNlLFxuICAgIGF0dGVtcHRlZEVtcHR5OiBmYWxzZVxuICB9KVxuXG4gIGNvbnN0IGVycm9yID0gc3RhdGUuYXR0ZW1wdGVkRW1wdHlcbiAgICA/ICdjYW5ub3QgYmUgZW1wdHknXG4gICAgOiAodmFsaWRhdGUgJiYgdmFsaWRhdGUoc3RhdGUudmFsdWUpKVxuXG4gIGNvbnN0IGZvY3VzSW5wdXQgPSB1c2VDYWxsYmFjayhub2RlID0+IHtcbiAgICBpZiAobm9kZSkge1xuICAgICAgbm9kZS5mb2N1cygpXG4gICAgICBub2RlLnNlbGVjdCgpXG4gICAgfVxuICB9LCBbXSlcblxuICBmdW5jdGlvbiBmaW5pc2hFZGl0aW5nICgpIHtcbiAgICBpZiAoIXN0YXRlLmVkaXRpbmcpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGlmIChzdGF0ZS52YWx1ZSA9PT0gJycgJiYgcmVxdWlyZWQpIHtcbiAgICAgIHNldFN0YXRlKHsgLi4uc3RhdGUsIGF0dGVtcHRlZEVtcHR5OiB0cnVlIH0pXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpZiAoIWVycm9yKSB7XG4gICAgICBvblVwZGF0ZShzdGF0ZS52YWx1ZSlcbiAgICB9XG5cbiAgICBzZXRTdGF0ZSh7IC4uLnN0YXRlLCB2YWx1ZTogc3RhdGUudmFsdWUsIGVkaXRpbmc6IGZhbHNlIH0pXG4gIH1cblxuICBjb25zdCBjYW5jZWxFZGl0aW5nID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIHNldFN0YXRlKHN0YXRlID0+ICh7IC4uLnN0YXRlLCBlZGl0aW5nOiBmYWxzZSB9KSlcbiAgfSwgW3NldFN0YXRlXSlcblxuICBjb25zdCBoYW5kbGVDbGlja091dHNpZGUgPSB1c2VDYWxsYmFjayhldmVudCA9PiB7XG4gICAgY29uc3QgY2xpY2tlZE91dHNpZGUgPSByZWYuY3VycmVudCAmJiAhcmVmLmN1cnJlbnQuY29udGFpbnMoZXZlbnQudGFyZ2V0KVxuICAgIGlmICghY2xpY2tlZE91dHNpZGUpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNhbmNlbEVkaXRpbmcoKVxuICB9LCBbcmVmLCBjYW5jZWxFZGl0aW5nXSlcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgaGFuZGxlQ2xpY2tPdXRzaWRlKVxuICAgIHJldHVybiAoKSA9PiBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIGhhbmRsZUNsaWNrT3V0c2lkZSlcbiAgfSwgW2hhbmRsZUNsaWNrT3V0c2lkZV0pXG5cbiAgaWYgKHN0YXRlLmVkaXRpbmcpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPHNwYW4gY2xhc3NOYW1lPXtzdHlsZXMuY29udGFpbmVyfSByZWY9e3JlZn0+XG4gICAgICAgIDxpbnB1dFxuICAgICAgICAgIHJlZj17Zm9jdXNJbnB1dH1cbiAgICAgICAgICB2YWx1ZT17c3RhdGUudmFsdWV9XG4gICAgICAgICAgb25DaGFuZ2U9e2UgPT4gc2V0U3RhdGUoe1xuICAgICAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgICAgICBhdHRlbXB0ZWRFbXB0eTogZmFsc2UsXG4gICAgICAgICAgICB2YWx1ZTogZS50YXJnZXQudmFsdWVcbiAgICAgICAgICB9KX1cbiAgICAgICAgICBvbktleURvd249e29uS2V5KHtcbiAgICAgICAgICAgIEVudGVyOiBmaW5pc2hFZGl0aW5nLFxuICAgICAgICAgICAgRXNjYXBlOiBjYW5jZWxFZGl0aW5nXG4gICAgICAgICAgfSl9XG4gICAgICAgIC8+XG4gICAgICAgIHtlcnJvciAmJiA8c3BhbiBjbGFzc05hbWU9e3N0eWxlcy5lcnJvcn0+e2Vycm9yfTwvc3Bhbj59XG4gICAgICA8L3NwYW4+XG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIHJlbmRlcihcbiAgICA8PlxuICAgICAgPHNwYW4+e3ZhbHVlfTwvc3Bhbj5cbiAgICAgIDxJY29uXG4gICAgICAgIG5hbWU9XCJwZW5jaWxcIlxuICAgICAgICBjbGFzc05hbWU9e3N0eWxlcy5lZGl0fVxuICAgICAgICBvbkNsaWNrPXtzdG9wKCgpID0+IHNldFN0YXRlKHsgLi4uc3RhdGUsIGVkaXRpbmc6IHRydWUgfSkpfVxuICAgICAgLz5cbiAgICA8Lz5cbiAgKVxufVxuXG5FZGl0YWJsZUZpZWxkLnByb3BUeXBlcyA9IHtcbiAgdmFsdWU6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgdmFsaWRhdGU6IFByb3BUeXBlcy5mdW5jLFxuICByZXF1aXJlZDogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcbiAgcmVuZGVyOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBvblVwZGF0ZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxufVxuXG5FZGl0YWJsZUZpZWxkLmRlZmF1bHRQcm9wcyA9IHtcbiAgcmVxdWlyZWQ6IHRydWVcbn1cblxuZXhwb3J0IGRlZmF1bHQgRWRpdGFibGVGaWVsZFxuIiwiaW1wb3J0IHBpY2sgZnJvbSAnbG9kYXNoL3BpY2snXG5pbXBvcnQgeyB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgdXNlU2VsZWN0b3IgfSBmcm9tICdyZWFjdC1yZWR1eCdcblxuaW1wb3J0IE1vZGFsIGZyb20gJy4uLy4uL0NvbW1vbi9Nb2RhbCdcbmltcG9ydCBEaWFsb2dCb3ggZnJvbSAnLi4vLi4vQ29tbW9uL0RpYWxvZ0JveCdcbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9zdHlsZXMubW9kdWxlLmNzcydcbmltcG9ydCB7IHNlbGVjdExheWVycyB9IGZyb20gJy4uL0xheWVycy9sYXllcnNTbGljZSdcblxuZnVuY3Rpb24gTXVsdGlTZWxlY3QgKHsgc2VsZWN0ZWQsIG9wdGlvbnMsIG9uVXBkYXRlIH0pIHtcbiAgZnVuY3Rpb24gaGFuZGxlQ2hhbmdlIChpbmRleCkge1xuICAgIG9uVXBkYXRlKFxuICAgICAgc2VsZWN0ZWQuaW5jbHVkZXMoaW5kZXgpXG4gICAgICAgID8gc2VsZWN0ZWQuZmlsdGVyKGkgPT4gaSAhPT0gaW5kZXgpXG4gICAgICAgIDogWy4uLnNlbGVjdGVkLCBpbmRleF1cbiAgICApXG4gIH1cbiAgcmV0dXJuIChcbiAgICA8dWwgY2xhc3NOYW1lPXtzdHlsZXMubGF5ZXJMaXN0fT5cbiAgICAgIHtvcHRpb25zLm1hcCgob3B0aW9uLCBpKSA9PiAoXG4gICAgICAgIDxsaVxuICAgICAgICAgIGRhdGEtc2VsZWN0ZWQ9e3NlbGVjdGVkLmluY2x1ZGVzKGkpfVxuICAgICAgICAgIG9uQ2xpY2s9eygpID0+IGhhbmRsZUNoYW5nZShpKX1cbiAgICAgICAgPlxuICAgICAgICAgIHtvcHRpb259XG4gICAgICAgIDwvbGk+XG4gICAgICApKX1cbiAgICA8L3VsPlxuICApXG59XG5cbmZ1bmN0aW9uIENvbmZpZ01vZGFsICh7IGNvbWJvLCBvblVwZGF0ZSB9KSB7XG4gIGNvbnN0IGxheWVycyA9IHVzZVNlbGVjdG9yKHNlbGVjdExheWVycylcbiAgY29uc3QgW3BlbmRpbmcsIHNldFBlbmRpbmddID0gdXNlU3RhdGUocGljayhjb21ibywgW1xuICAgICd0aW1lb3V0TXMnLFxuICAgICdzbG93UmVsZWFzZScsXG4gICAgJ2xheWVycydcbiAgXSkpXG5cbiAgY29uc3QgYXZhaWxhYmxlTGF5ZXJzID0gbGF5ZXJzLm1hcChsYXllciA9PiBsYXllci5uYW1lKVxuICBmdW5jdGlvbiBoYW5kbGVDb25maXJtICgpIHtcbiAgICBvblVwZGF0ZShwZW5kaW5nKVxuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8TW9kYWw+XG4gICAgICA8RGlhbG9nQm94IG9uRGlzbWlzcz17aGFuZGxlQ29uZmlybX0+XG4gICAgICAgIDxoMj5DdXN0b21pemUgWzxjb2RlPntjb21iby5pZGVudGlmaWVyfTwvY29kZT5dPC9oMj5cbiAgICAgICAgPGRpdj5cblxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMuZmllbGR9PlxuICAgICAgICAgICAgPGxhYmVsIGh0bWxGb3I9XCJjdXN0b21pemUtY29tYm8tdGltZW91dFwiPlxuICAgICAgICAgICAgICBUaW1lb3V0IChtcylcbiAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgaWQ9XCJjdXN0b21pemUtY29tYm8tdGltZW91dFwiXG4gICAgICAgICAgICAgIHR5cGU9XCJudW1iZXJcIlxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIkRlZmF1bHRcIlxuICAgICAgICAgICAgICB2YWx1ZT17cGVuZGluZy50aW1lb3V0TXN9XG4gICAgICAgICAgICAgIG9uQ2hhbmdlPXtldmVudCA9PiAoXG4gICAgICAgICAgICAgICAgc2V0UGVuZGluZyhzdGF0ZSA9PiAoe1xuICAgICAgICAgICAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgICAgICAgICAgICB0aW1lb3V0TXM6IGV2ZW50LnRhcmdldC52YWx1ZSA9PT0gJydcbiAgICAgICAgICAgICAgICAgICAgPyB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICAgICAgOiBOdW1iZXIoZXZlbnQudGFyZ2V0LnZhbHVlKVxuICAgICAgICAgICAgICAgIH0pKVxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMuZmllbGR9PlxuICAgICAgICAgICAgPGxhYmVsIGh0bWxGb3I9XCJjdXN0b21pemUtY29tYm8tc2xvdy1yZWxlYXNlXCI+XG4gICAgICAgICAgICAgIFNsb3cgUmVsZWFzZVxuICAgICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgICBpZD1cImN1c3RvbWl6ZS1jb21iby1zbG93LXJlbGVhc2VcIlxuICAgICAgICAgICAgICB0eXBlPVwiY2hlY2tib3hcIlxuICAgICAgICAgICAgICBjaGVja2VkPXtwZW5kaW5nLnNsb3dSZWxlYXNlfVxuICAgICAgICAgICAgICBvbkNoYW5nZT17ZXZlbnQgPT4gKFxuICAgICAgICAgICAgICAgIHNldFBlbmRpbmcoc3RhdGUgPT4gKHtcbiAgICAgICAgICAgICAgICAgIC4uLnN0YXRlLFxuICAgICAgICAgICAgICAgICAgc2xvd1JlbGVhc2U6IGV2ZW50LnRhcmdldC5jaGVja2VkXG4gICAgICAgICAgICAgICAgfSkpXG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5maWVsZH0+XG4gICAgICAgICAgICA8bGFiZWw+TGF5ZXJzPC9sYWJlbD5cbiAgICAgICAgICAgIDxNdWx0aVNlbGVjdFxuICAgICAgICAgICAgICBzZWxlY3RlZD17cGVuZGluZy5sYXllcnMgfHwgW119XG4gICAgICAgICAgICAgIG9wdGlvbnM9e2F2YWlsYWJsZUxheWVyc31cbiAgICAgICAgICAgICAgb25VcGRhdGU9e2xheWVycyA9PiAoXG4gICAgICAgICAgICAgICAgc2V0UGVuZGluZyhzdGF0ZSA9PiAoe1xuICAgICAgICAgICAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgICAgICAgICAgICBsYXllcnNcbiAgICAgICAgICAgICAgICB9KSlcbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9EaWFsb2dCb3g+XG4gICAgPC9Nb2RhbD5cbiAgKVxufVxuXG5leHBvcnQgZGVmYXVsdCBDb25maWdNb2RhbFxuIiwiaW1wb3J0IHsgY3JlYXRlU2xpY2UgfSBmcm9tICdAcmVkdXhqcy90b29sa2l0J1xuXG5leHBvcnQgY29uc3Qgc2VsZWN0Q29tYm9zID0gc3RhdGUgPT4gc3RhdGUua2V5Ym9hcmQua2V5bWFwLmNvbWJvc1xuXG5jb25zdCBjb21ib3NTbGljZSA9IGNyZWF0ZVNsaWNlKHtcbiAgbmFtZTogJ2NvbWJvcycsXG4gIGluaXRpYWxTdGF0ZTogW10sXG4gIHJlZHVjZXJzOiB7XG4gICAgdXBkYXRlQ29tYm9CaW5kaW5nIChzdGF0ZSwgYWN0aW9uKSB7XG4gICAgICBzdGF0ZVthY3Rpb24ucGF5bG9hZC5jb21ib0luZGV4XS5iaW5kaW5ncyA9IGFjdGlvbi5wYXlsb2FkLmJpbmRpbmdzXG4gICAgfSxcbiAgICB1cGRhdGVDb21ib0tleXBvc2l0aW9ucyAoc3RhdGUsIGFjdGlvbikge1xuICAgICAgc3RhdGVbYWN0aW9uLnBheWxvYWQuY29tYm9JbmRleF0ua2V5UG9zaXRpb25zID0gYWN0aW9uLnBheWxvYWQua2V5UG9zaXRpb25zXG4gICAgfSxcbiAgICBjcmVhdGVDb21ibyAoc3RhdGUpIHtcbiAgICAgIHN0YXRlLnB1c2goe1xuICAgICAgICBpZGVudGlmaWVyOiAnbmV3X2NvbWJvJyxcbiAgICAgICAga2V5UG9zaXRpb25zOiBbXSxcbiAgICAgICAgYmluZGluZ3M6IFt7XG4gICAgICAgICAgdmFsdWU6ICcmdHJhbnMnLFxuICAgICAgICAgIHBhcmFtczogW11cbiAgICAgICAgfV1cbiAgICAgIH0pXG4gICAgfSxcbiAgICByZW5hbWVDb21ibyAoc3RhdGUsIGFjdGlvbikge1xuICAgICAgc3RhdGVbYWN0aW9uLnBheWxvYWQuaW5kZXhdLmlkZW50aWZpZXIgPSBhY3Rpb24ucGF5bG9hZC5uYW1lXG4gICAgfSxcbiAgICBkZWxldGVDb21ibyAoc3RhdGUsIGFjdGlvbikge1xuICAgICAgc3RhdGUuc3BsaWNlKGFjdGlvbi5wYXlsb2FkLmluZGV4LCAxKVxuICAgIH0sXG4gICAgY3VzdG9taXplQ29tYm8gKHN0YXRlLCBhY3Rpb24pIHtcbiAgICAgIE9iamVjdC5hc3NpZ24oc3RhdGVbYWN0aW9uLnBheWxvYWQuaW5kZXhdLCBhY3Rpb24ucGF5bG9hZC5jb25maWcpXG4gICAgfVxuICB9XG59KVxuXG5leHBvcnQgY29uc3Qge1xuICB1cGRhdGVDb21ib0JpbmRpbmcsXG4gIHVwZGF0ZUNvbWJvS2V5cG9zaXRpb25zLFxuICBjcmVhdGVDb21ibyxcbiAgcmVuYW1lQ29tYm8sXG4gIGRlbGV0ZUNvbWJvLFxuICBjdXN0b21pemVDb21ib1xufSA9IGNvbWJvc1NsaWNlLmFjdGlvbnNcblxuZXhwb3J0IGRlZmF1bHQgY29tYm9zU2xpY2UucmVkdWNlclxuIiwiaW1wb3J0IHsgdXNlQ29udGV4dCwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCdcbmltcG9ydCB7IHVzZURpc3BhdGNoLCB1c2VTZWxlY3RvciB9IGZyb20gJ3JlYWN0LXJlZHV4J1xuXG5pbXBvcnQgQ29tYm9JbnB1dE1hcCBmcm9tICcuL0NvbWJvSW5wdXRNYXAnXG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vc3R5bGVzLm1vZHVsZS5jc3MnXG5pbXBvcnQgS2V5IGZyb20gJy4uL0tleXMvS2V5J1xuaW1wb3J0IEFjdGlvbkJ1dHRvbiBmcm9tICcuLi8uLi9Db21tb24vQWN0aW9uQnV0dG9uJ1xuaW1wb3J0IEljb24gZnJvbSAnLi4vLi4vQ29tbW9uL0ljb24nXG5pbXBvcnQgTGluayBmcm9tICcuLi8uLi9Db21tb24vTGluaydcbmltcG9ydCBFZGl0YWJsZUZpZWxkIGZyb20gJy4uLy4uL0NvbW1vbi9FZGl0YWJsZUZpZWxkJ1xuaW1wb3J0IHsgU2VhcmNoQ29udGV4dCB9IGZyb20gJy4uLy4uL3Byb3ZpZGVycydcbmltcG9ydCBDb25maWdNb2RhbCBmcm9tICcuL0NvbmZpZ01vZGFsJ1xuaW1wb3J0IHsgdmFsaWRhdGVEZXZpY2V0cmVlSWRlbnRpZmllciB9IGZyb20gJy4uL3ZhbGlkYXRvcnMnXG5pbXBvcnQge1xuICBzZWxlY3RDb21ib3MsXG4gIGNyZWF0ZUNvbWJvLFxuICBjdXN0b21pemVDb21ibyxcbiAgZGVsZXRlQ29tYm8sXG4gIHJlbmFtZUNvbWJvLFxuICB1cGRhdGVDb21ib0JpbmRpbmcsXG4gIHVwZGF0ZUNvbWJvS2V5cG9zaXRpb25zXG59IGZyb20gJy4vY29tYm9zU2xpY2UnXG5cbmZ1bmN0aW9uIENvbWJvRWRpdG9yIChwcm9wcykge1xuICBjb25zdCB7IGlkZW50aWZpZXJzIH0gPSB1c2VDb250ZXh0KFNlYXJjaENvbnRleHQpXG4gIGNvbnN0IGNvbWJvcyA9IHVzZVNlbGVjdG9yKHNlbGVjdENvbWJvcylcbiAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpXG4gIGNvbnN0IFtjb25maWdFZGl0LCBzZXRDb25maWdFZGl0XSA9IHVzZVN0YXRlKG51bGwpXG5cbiAgZnVuY3Rpb24gdmFsaWRhdGVDb21ib0lkZW50aWZpZXIgKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbGlkYXRlRGV2aWNldHJlZUlkZW50aWZpZXIodmFsdWUpIHx8IChcbiAgICAgIGlkZW50aWZpZXJzLmluY2x1ZGVzKHZhbHVlKVxuICAgICAgICA/IGBDYW5ub3QgdXNlIGV4aXN0aW5nIGlkZW50aWZpZXIgXCIke3ZhbHVlfVwiYFxuICAgICAgICA6IG51bGxcbiAgICApXG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVVcGRhdGVCaW5kaW5ncyAoaSwgdXBkYXRlKSB7XG4gICAgZGlzcGF0Y2godXBkYXRlQ29tYm9CaW5kaW5nKHtcbiAgICAgIGNvbWJvSW5kZXg6IGksXG4gICAgICBiaW5kaW5nczogW3VwZGF0ZV1cbiAgICB9KSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZVVwZGF0ZUtleVBvc2l0aW9ucyAoaSwgdXBkYXRlKSB7XG4gICAgZGlzcGF0Y2godXBkYXRlQ29tYm9LZXlwb3NpdGlvbnMoe1xuICAgICAgY29tYm9JbmRleDogaSxcbiAgICAgIGtleVBvc2l0aW9uczogdXBkYXRlXG4gICAgfSkpXG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVSZW5hbWVDb21ibyAoaW5kZXgsIG5hbWUpIHtcbiAgICBkaXNwYXRjaChyZW5hbWVDb21ibyh7IGluZGV4LCBuYW1lIH0pKVxuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlQWRkQ29tYm8gKCkge1xuICAgIGRpc3BhdGNoKGNyZWF0ZUNvbWJvKCkpXG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVEZWxldGVDb21ibyAoaW5kZXgpIHtcbiAgICBkaXNwYXRjaChkZWxldGVDb21ibyh7IGluZGV4IH0pKVxuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlQ3VzdG9taXplQ29tYm8gKGluZGV4LCBjb25maWcpIHtcbiAgICBzZXRDb25maWdFZGl0KG51bGwpXG4gICAgZGlzcGF0Y2goY3VzdG9taXplQ29tYm8oeyBpbmRleCwgY29uZmlnIH0pKVxuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLm1haW59PlxuICAgICAge2NvbmZpZ0VkaXQgIT09IG51bGwgJiYgKFxuICAgICAgICA8Q29uZmlnTW9kYWxcbiAgICAgICAgICBjb21ibz17Y29tYm9zW2NvbmZpZ0VkaXRdfVxuICAgICAgICAgIG9uVXBkYXRlPXtjb25maWcgPT4gaGFuZGxlQ3VzdG9taXplQ29tYm8oY29uZmlnRWRpdCwgY29uZmlnKX1cbiAgICAgICAgLz5cbiAgICAgICl9XG5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMuc2lkZWJhcn0+XG4gICAgICAgIDxMaW5rIGV4dGVybmFsIGhyZWY9XCJodHRwczovL3ptay5kZXYvZG9jcy9mZWF0dXJlcy9jb21ib3NcIj5cbiAgICAgICAgICA8SWNvbiBuYW1lPVwiYm9va1wiIC8+IFpNSyBEb2NzOiBDb21ib3NcbiAgICAgICAgPC9MaW5rPlxuXG4gICAgICAgIDxBY3Rpb25CdXR0b24gb25DbGljaz17aGFuZGxlQWRkQ29tYm99PlxuICAgICAgICAgIEFkZCBOZXcgQ29tYm9cbiAgICAgICAgPC9BY3Rpb25CdXR0b24+XG4gICAgICA8L2Rpdj5cblxuICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5jb21ib1BhbmVsfT5cbiAgICAgICAge2NvbWJvcy5tYXAoKGNvbWJvLCBpKSA9PiAoXG4gICAgICAgICAgPGRpdiBrZXk9e2l9IGNsYXNzTmFtZT17c3R5bGVzLmNvbWJvfT5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMuaGVhZGluZ30+XG4gICAgICAgICAgICAgIDxFZGl0YWJsZUZpZWxkXG4gICAgICAgICAgICAgICAgdmFsdWU9e2NvbWJvLmlkZW50aWZpZXJ9XG4gICAgICAgICAgICAgICAgdmFsaWRhdGU9e3ZhbGlkYXRlQ29tYm9JZGVudGlmaWVyfVxuICAgICAgICAgICAgICAgIHJlbmRlcj17Y2hpbGRyZW4gPT4gPGg1Pjxjb2RlPntjaGlsZHJlbn08L2NvZGU+PC9oNT59XG4gICAgICAgICAgICAgICAgb25VcGRhdGU9e25hbWUgPT4gaGFuZGxlUmVuYW1lQ29tYm8oaSwgbmFtZSl9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMuYWN0aW9uc30+XG4gICAgICAgICAgICAgICAgPEljb25cbiAgICAgICAgICAgICAgICAgIG5hbWU9XCJ3cmVuY2hcIlxuICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtgJHtzdHlsZXMuYWN0aW9ufWB9XG4gICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBzZXRDb25maWdFZGl0KGkpfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPEljb25cbiAgICAgICAgICAgICAgICAgIG5hbWU9XCJ0cmFzaC1jYW5cIlxuICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtgJHtzdHlsZXMuYWN0aW9ufSAke3N0eWxlcy5yZW1vdmV9YH1cbiAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IGhhbmRsZURlbGV0ZUNvbWJvKGkpfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMuZGV0YWlsfT5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5jb21ib091dHB1dH0+XG4gICAgICAgICAgICAgICAgPEtleVxuICAgICAgICAgICAgICAgICAgey4uLmNvbWJvLmJpbmRpbmdzWzBdfVxuICAgICAgICAgICAgICAgICAgb25VcGRhdGU9e3VwZGF0ZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZVVwZGF0ZUJpbmRpbmdzKGksIHVwZGF0ZSlcbiAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgPENvbWJvSW5wdXRNYXBcbiAgICAgICAgICAgICAgICBrZXlQb3NpdGlvbnM9e2NvbWJvLmtleVBvc2l0aW9uc31cbiAgICAgICAgICAgICAgICBvblVwZGF0ZT17dmFsdWUgPT4gaGFuZGxlVXBkYXRlS2V5UG9zaXRpb25zKGksIHZhbHVlKX1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICApKX1cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICApXG59XG5cbkNvbWJvRWRpdG9yLnByb3BUeXBlcyA9IHt9XG5cbmV4cG9ydCBkZWZhdWx0IENvbWJvRWRpdG9yXG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzJdLnVzZVsxXSEuL2xheWVyLXNlbGVjdG9yLm1vZHVsZS5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1syXS51c2VbMV0hLi9sYXllci1zZWxlY3Rvci5tb2R1bGUuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJ1xuaW1wb3J0IHsgdXNlQ2FsbGJhY2ssIHVzZUNvbnRleHQsIHVzZUVmZmVjdCwgdXNlTWVtbywgdXNlUmVmLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgdXNlRGlzcGF0Y2gsIHVzZVNlbGVjdG9yIH0gZnJvbSAncmVhY3QtcmVkdXgnXG5cbmltcG9ydCBJY29uIGZyb20gJy4uLy4uL0NvbW1vbi9JY29uJ1xuaW1wb3J0IHN0eWxlcyBmcm9tICcuL2xheWVyLXNlbGVjdG9yLm1vZHVsZS5jc3MnXG5pbXBvcnQgeyBzdG9wLCBvbktleSB9IGZyb20gJy4uLy4uL2V2ZW50LXV0aWwnXG5pbXBvcnQge1xuICBzZWxlY3RMYXllcnMsXG4gIGNyZWF0ZUxheWVyLFxuICByZW5hbWVMYXllcixcbiAgZGVsZXRlTGF5ZXJcbn0gZnJvbSAnLi9sYXllcnNTbGljZSdcbmltcG9ydCB7IExheW91dENvbnRleHQgfSBmcm9tICcuLi8uLi9Db250ZXh0cy9MYXlvdXQnXG5cbmZ1bmN0aW9uIExheWVyU2VsZWN0b3IgKHsgYWN0aXZlTGF5ZXIsIG9uU2VsZWN0IH0pIHtcbiAgY29uc3QgcmVmID0gdXNlUmVmKG51bGwpXG4gIGNvbnN0IGRpc3BhdGNoID0gdXNlRGlzcGF0Y2goKVxuICBjb25zdCB7IGJpbmRpbmdDb3VudCB9ID0gdXNlQ29udGV4dChMYXlvdXRDb250ZXh0KVxuICBjb25zdCBsYXllcnMgPSB1c2VTZWxlY3RvcihzZWxlY3RMYXllcnMpXG4gIGNvbnN0IFtyZW5hbWluZywgc2V0UmVuYW1pbmddID0gdXNlU3RhdGUoZmFsc2UpXG4gIGNvbnN0IFtlZGl0aW5nLCBzZXRFZGl0aW5nXSA9IHVzZVN0YXRlKCcnKVxuXG4gIGNvbnN0IGhhbmRsZVNlbGVjdCA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uIChsYXllckluZGV4KSB7XG4gICAgaWYgKGxheWVySW5kZXggPT09IGFjdGl2ZUxheWVyKSB7XG4gICAgICBzZXRFZGl0aW5nKGxheWVyc1thY3RpdmVMYXllcl0ubmFtZSlcbiAgICAgIHNldFJlbmFtaW5nKHRydWUpXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBzZXRSZW5hbWluZyhmYWxzZSlcbiAgICBvblNlbGVjdChsYXllckluZGV4KVxuICB9LCBbbGF5ZXJzLCBhY3RpdmVMYXllciwgc2V0RWRpdGluZywgc2V0UmVuYW1pbmcsIG9uU2VsZWN0XSlcblxuICBjb25zdCBoYW5kbGVBZGQgPSB1c2VDYWxsYmFjaygoKSA9PiBkaXNwYXRjaChjcmVhdGVMYXllcih7XG4gICAgYmluZGluZ0NvdW50XG4gIH0pKSwgW2Rpc3BhdGNoLCBiaW5kaW5nQ291bnRdKVxuXG4gIGNvbnN0IGhhbmRsZURlbGV0ZSA9IHVzZU1lbW8oKCkgPT4gZnVuY3Rpb24gKGxheWVySW5kZXgsIGxheWVyTmFtZSkge1xuICAgIGlmICh3aW5kb3cuY29uZmlybShgUmVhbGx5IGRlbGV0ZSBsYXllcjogJHtsYXllck5hbWV9P2ApKSB7XG4gICAgICBkaXNwYXRjaChkZWxldGVMYXllcih7IGluZGV4OiBsYXllckluZGV4IH0pKVxuICAgIH1cbiAgfSwgW2Rpc3BhdGNoXSlcblxuICBjb25zdCBmaW5pc2hFZGl0aW5nID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIGlmICghcmVuYW1pbmcpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IGluZGV4ID0gYWN0aXZlTGF5ZXJcbiAgICBjb25zdCBuYW1lID0gZWRpdGluZ1xuXG4gICAgc2V0RWRpdGluZygnJylcbiAgICBzZXRSZW5hbWluZyhmYWxzZSlcbiAgICBkaXNwYXRjaChyZW5hbWVMYXllcih7IGluZGV4LCBuYW1lIH0pKVxuICB9LCBbZWRpdGluZywgcmVuYW1pbmcsIGFjdGl2ZUxheWVyLCBzZXRFZGl0aW5nLCBzZXRSZW5hbWluZywgZGlzcGF0Y2hdKVxuXG4gIGNvbnN0IGNhbmNlbEVkaXRpbmcgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgaWYgKCFyZW5hbWluZykge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgc2V0RWRpdGluZygnJylcbiAgICBzZXRSZW5hbWluZyhmYWxzZSlcbiAgfSwgW3JlbmFtaW5nLCBzZXRFZGl0aW5nLCBzZXRSZW5hbWluZ10pXG5cbiAgY29uc3QgaGFuZGxlQ2xpY2tPdXRzaWRlID0gdXNlTWVtbygoKSA9PiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICBjb25zdCBjbGlja2VkT3V0c2lkZSA9IHJlZi5jdXJyZW50ICYmICFyZWYuY3VycmVudC5jb250YWlucyhldmVudC50YXJnZXQpXG4gICAgaWYgKCFjbGlja2VkT3V0c2lkZSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY2FuY2VsRWRpdGluZygpXG4gIH0sIFtyZWYsIGNhbmNlbEVkaXRpbmddKVxuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBoYW5kbGVDbGlja091dHNpZGUpXG4gICAgcmV0dXJuICgpID0+IGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgaGFuZGxlQ2xpY2tPdXRzaWRlKVxuICB9LCBbaGFuZGxlQ2xpY2tPdXRzaWRlXSlcblxuICBjb25zdCBmb2N1c0lucHV0ID0gdXNlQ2FsbGJhY2sobm9kZSA9PiB7XG4gICAgaWYgKG5vZGUpIHtcbiAgICAgIG5vZGUuZm9jdXMoKVxuICAgICAgbm9kZS5zZWxlY3QoKVxuICAgIH1cbiAgfSwgW10pXG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2XG4gICAgICBjbGFzc05hbWU9e3N0eWxlcy5sYXllclNlbGVjdG9yfVxuICAgICAgZGF0YS1yZW5hbWluZz17cmVuYW1pbmd9XG4gICAgICByZWY9e3JlZn1cbiAgICA+XG4gICAgICA8dWw+XG4gICAgICAgIHtsYXllcnMubWFwKCh7IG5hbWUgfSwgaSkgPT4gKFxuICAgICAgICAgIDxsaVxuICAgICAgICAgICAga2V5PXtgbGF5ZXItJHtpfWB9XG4gICAgICAgICAgICBjbGFzc05hbWU9e2FjdGl2ZUxheWVyID09PSBpID8gc3R5bGVzLmFjdGl2ZSA6ICcnfVxuICAgICAgICAgICAgZGF0YS1sYXllcj17aX1cbiAgICAgICAgICAgIG9uQ2xpY2s9e3N0b3AoKCkgPT4gaGFuZGxlU2VsZWN0KGkpKX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9e3N0eWxlcy5pbmRleH0+e2l9PC9zcGFuPlxuICAgICAgICAgICAgeyhhY3RpdmVMYXllciA9PT0gaSAmJiByZW5hbWluZylcbiAgICAgICAgICAgICAgPyAoXG4gICAgICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgICAgIHJlZj17Zm9jdXNJbnB1dH1cbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e3N0eWxlcy5uYW1lfVxuICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtlID0+IHNldEVkaXRpbmcoZS50YXJnZXQudmFsdWUpfVxuICAgICAgICAgICAgICAgIG9uS2V5RG93bj17b25LZXkoe1xuICAgICAgICAgICAgICAgICAgRW50ZXI6IGZpbmlzaEVkaXRpbmcsXG4gICAgICAgICAgICAgICAgICBFc2NhcGU6IGNhbmNlbEVkaXRpbmdcbiAgICAgICAgICAgICAgICB9KX1cbiAgICAgICAgICAgICAgICB2YWx1ZT17XG4gICAgICAgICAgICAgICAgICAoYWN0aXZlTGF5ZXIgPT09IGkgJiYgcmVuYW1pbmcpXG4gICAgICAgICAgICAgICAgICAgID8gZWRpdGluZ1xuICAgICAgICAgICAgICAgICAgICA6IG5hbWVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICA6IChcbiAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPXtzdHlsZXMubmFtZX0+XG4gICAgICAgICAgICAgICAge25hbWV9XG4gICAgICAgICAgICAgICAgPEljb25cbiAgICAgICAgICAgICAgICAgIG5hbWU9XCJ0aW1lcy1jaXJjbGVcIlxuICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtzdHlsZXMuZGVsZXRlfVxuICAgICAgICAgICAgICAgICAgb25DbGljaz17c3RvcCgoKSA9PiBoYW5kbGVEZWxldGUoaSwgbmFtZSkpfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICApfVxuICAgICAgICAgIDwvbGk+XG4gICAgICAgICkpfVxuICAgICAgICA8bGkgb25DbGljaz17aGFuZGxlQWRkfT5cbiAgICAgICAgICA8SWNvbiBjbGFzc05hbWU9e3N0eWxlcy5pbmRleH0gbmFtZT1cInBsdXNcIiAvPlxuICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT17c3R5bGVzLm5hbWV9PkFkZCBMYXllcjwvc3Bhbj5cbiAgICAgICAgPC9saT5cbiAgICAgIDwvdWw+XG4gICAgPC9kaXY+XG4gIClcbn1cblxuTGF5ZXJTZWxlY3Rvci5wcm9wVHlwZXMgPSB7XG4gIGFjdGl2ZUxheWVyOiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWQsXG4gIG9uU2VsZWN0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG59XG5cbmV4cG9ydCBkZWZhdWx0IExheWVyU2VsZWN0b3JcbiIsImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcydcblxuaW1wb3J0IEJpbmRpbmcgZnJvbSAnLi9CaW5kaW5nL0JpbmRpbmcnXG5pbXBvcnQgKiBhcyBiaW5kUHJvcFR5cGVzIGZyb20gJy4vQmluZGluZy9iaW5kUHJvcFR5cGVzJ1xuXG5pbXBvcnQgS2V5V3JhcHBlciBmcm9tICcuL0tleXMvS2V5V3JhcHBlcidcbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9LZXlzL3N0eWxlcy5tb2R1bGUuY3NzJ1xuXG5mdW5jdGlvbiBBcnJvd0ljb24gKHsgZGlyZWN0aW9uIH0pIHtcbiAgcmV0dXJuIChcbiAgICA8c3ZnXG4gICAgICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcbiAgICAgIHdpZHRoPVwiNjVweFwiXG4gICAgICBoZWlnaHQ9XCI2NXB4XCJcbiAgICAgIHZpZXdCb3g9XCIwIDAgNjUgNjVcIlxuICAgICAgc3R5bGU9e3tcbiAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgIHRvcDogJy0xMHB4JyxcbiAgICAgICAgc3Ryb2tlOiAndmFyKC0ta2V5LWNvbG9yLWJhc2UpJyxcbiAgICAgICAgc3Ryb2tlV2lkdGg6IDIsXG4gICAgICAgIGZpbGw6ICdub25lJyxcbiAgICAgICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICAgICAgd2lkdGg6ICc2NXB4JyxcbiAgICAgICAgaGVpZ2h0OiAnNjVweCcsXG4gICAgICAgIHBvaW50ZXJFdmVudHM6ICdub25lJ1xuICAgICAgfX1cbiAgICA+XG4gICAgICA8cGF0aFxuICAgICAgICBzdHlsZT17e1xuICAgICAgICAgIHRyYW5zZm9ybTogYHNjYWxlWCgke2RpcmVjdGlvbiA9PT0gJ2N3JyA/IC0xIDogMX0pIHJvdGF0ZSgtNDVkZWcpYCxcbiAgICAgICAgICB0cmFuc2Zvcm1PcmlnaW46ICdjZW50ZXIgY2VudGVyJ1xuICAgICAgICB9fVxuICAgICAgICBkPVwiTSA2MyAzMSBBIDMwIDMwIDQ1IDAgMCAzMi41IDIgTSAzNyAtMiBMIDMyLjUgMiBMIDM3IDZcIlxuICAgICAgLz5cbiAgICA8L3N2Zz5cbiAgKVxufVxuXG5mdW5jdGlvbiBFbmNvZGVyQmluZGluZyAocHJvcHMpIHtcbiAgY29uc3QgeyBjb250ZXh0LCBkaXJlY3Rpb24sIHBhcmFtcywgb25VcGRhdGUgfSA9IHByb3BzXG5cbiAgcmV0dXJuIChcbiAgICA8S2V5V3JhcHBlciB0aGVtZUNsYXNzPXtzdHlsZXMuZW5jb2Rlcn0+XG4gICAgICA8QXJyb3dJY29uIGRpcmVjdGlvbj17ZGlyZWN0aW9ufSAvPlxuICAgICAgPEJpbmRpbmdcbiAgICAgICAgaGlkZUJlaGF2aW91cj17dHJ1ZX1cbiAgICAgICAgY29udGV4dD17Y29udGV4dH1cbiAgICAgICAgdmFsdWU9XCIma3BcIlxuICAgICAgICBwYXJhbXM9e3BhcmFtc31cbiAgICAgICAgb25VcGRhdGU9e29uVXBkYXRlfVxuICAgICAgLz5cbiAgICA8L0tleVdyYXBwZXI+XG4gIClcbn1cblxuRW5jb2RlckJpbmRpbmcucHJvcFR5cGVzID0ge1xuICBwYXJhbXM6IFByb3BUeXBlcy5hcnJheU9mKGJpbmRQcm9wVHlwZXMubm9kZSksXG4gIG9uVXBkYXRlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG59XG5cbmV4cG9ydCBkZWZhdWx0IEVuY29kZXJCaW5kaW5nXG4iLCJpbXBvcnQgeyB1c2VEaXNwYXRjaCwgdXNlU2VsZWN0b3IgfSBmcm9tICdyZWFjdC1yZWR1eCdcblxuaW1wb3J0IHsgcmVwbGFjZUluZGV4IH0gZnJvbSAnLi4vLi4vcmVkdWNlci11dGlsJ1xuaW1wb3J0IEVuY29kZXJCaW5kaW5nIGZyb20gJy4uL0VuY29kZXJCaW5kaW5nJ1xuaW1wb3J0IHsgc2VsZWN0TGF5ZXJzLCB1cGRhdGVTZW5zb3JCaW5kaW5ncyB9IGZyb20gJy4vbGF5ZXJzU2xpY2UnXG5cbmZ1bmN0aW9uIFNlbnNvckJpbmRpbmdzICh7IGxheWVyLCBzZW5zb3JzIH0pIHtcbiAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpXG4gIGNvbnN0IGxheWVycyA9IHVzZVNlbGVjdG9yKHNlbGVjdExheWVycylcbiAgY29uc3QgeyBzZW5zb3JCaW5kaW5ncyA9IFtdIH0gPSBsYXllcnNbbGF5ZXJdXG5cbiAgZnVuY3Rpb24gaGFuZGxlVXBkYXRlIChzZW5zb3JJbmRleCwgYmluZEluZGV4LCBiaW5kaW5nKSB7XG4gICAgLy8gVE9ETzogaGFuZGxlIHNlbnNvciBiaW5kaW5ncyBsaXN0IHRoYXQgZG9lc24ndCBtYXRjaCBzZW5zb3IgY291bnRcbiAgICBjb25zdCBiaW5kID0gYmluZGluZy5wYXJhbXNbMF1cbiAgICBjb25zdCBvcmlnaW5hbEJpbmRpbmdzID0gc2Vuc29yQmluZGluZ3Nbc2Vuc29ySW5kZXhdIHx8IHtcbiAgICAgIHZhbHVlOiAnJmluY19kZWNfa3AnLFxuICAgICAgcGFyYW1zOiBbXG4gICAgICAgIHsgdmFsdWU6ICcnLCBwYXJhbXM6IFtdIH0sXG4gICAgICAgIHsgdmFsdWU6ICcnLCBwYXJhbXM6IFtdIH1cbiAgICAgIF1cbiAgICB9XG5cbiAgICBkaXNwYXRjaCh1cGRhdGVTZW5zb3JCaW5kaW5ncyh7XG4gICAgICBsYXllckluZGV4OiBsYXllcixcbiAgICAgIHNlbnNvckluZGV4LFxuICAgICAgYmluZGluZ3M6IHtcbiAgICAgICAgLi4ub3JpZ2luYWxCaW5kaW5ncyxcbiAgICAgICAgcGFyYW1zOiByZXBsYWNlSW5kZXgob3JpZ2luYWxCaW5kaW5ncy5wYXJhbXMsIGJpbmRJbmRleCwgYmluZClcbiAgICAgIH1cbiAgICB9KSlcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPGRpdiBzdHlsZT17eyBtYXJnaW46ICcwIDAgMzBweCcgfX0+XG4gICAgICA8aDM+U2Vuc29yIGJpbmRpbmdzPC9oMz5cbiAgICAgIDxkaXYgc3R5bGU9e3tcbiAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICBmbGV4RGlyZWN0aW9uOiAncm93JyxcbiAgICAgICAgZ2FwOiAnMjVweCdcbiAgICAgIH19PlxuICAgICAgICB7c2Vuc29ycy5tYXAoKHNlbnNvciwgaSkgPT4ge1xuICAgICAgICAgIGNvbnN0IGxhYmVsVGV4dCA9IHNlbnNvci5sYWJlbCB8fCBzZW5zb3IuaWRlbnRpZmllclxuICAgICAgICAgIGNvbnN0IFtpbmNyZW1lbnQsIGRlY3JlbWVudF0gPSBzZW5zb3JCaW5kaW5nc1tpXT8ucGFyYW1zIHx8IFtdXG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxkaXYga2V5PXtpfSBzdHlsZT17eyBkaXNwbGF5OiAnYmxvY2snIH19PlxuICAgICAgICAgICAgICA8bGFiZWwgc3R5bGU9e3sgZm9udFZhcmlhbnQ6ICdzbWFsbC1jYXBzJywgZm9udFNpemU6ICc5MCUnIH19PlxuICAgICAgICAgICAgICAgIDxjb2RlPntsYWJlbFRleHR9PC9jb2RlPlxuICAgICAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgICAgICA8ZGl2IHN0eWxlPXt7XG4gICAgICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgICAgIGZsZXhEaXJlY3Rpb246ICdyb3cnLFxuICAgICAgICAgICAgICAgIGdhcDogJzVweCcsXG4gICAgICAgICAgICAgICAgbWFyZ2luVG9wOiAnMjBweCdcbiAgICAgICAgICAgICAgfX0+XG4gICAgICAgICAgICAgICAgPEVuY29kZXJCaW5kaW5nXG4gICAgICAgICAgICAgICAgICBkaXJlY3Rpb249XCJjY3dcIlxuICAgICAgICAgICAgICAgICAgcGFyYW1zPXtbZGVjcmVtZW50XX1cbiAgICAgICAgICAgICAgICAgIG9uVXBkYXRlPXtiaW5kID0+IGhhbmRsZVVwZGF0ZShpLCAxLCBiaW5kKX1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDxFbmNvZGVyQmluZGluZ1xuICAgICAgICAgICAgICAgICAgZGlyZWN0aW9uPVwiY3dcIlxuICAgICAgICAgICAgICAgICAgcGFyYW1zPXtbaW5jcmVtZW50XX1cbiAgICAgICAgICAgICAgICAgIG9uVXBkYXRlPXtiaW5kID0+IGhhbmRsZVVwZGF0ZShpLCAwLCBiaW5kKX1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIClcbiAgICAgICAgfSl9XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKVxufVxuXG5leHBvcnQgZGVmYXVsdCBTZW5zb3JCaW5kaW5nc1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1syXS51c2VbMV0hLi9hY3Rpb24tbWVudS5tb2R1bGUuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMl0udXNlWzFdIS4vYWN0aW9uLW1lbnUubW9kdWxlLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCB7IHVzZUNhbGxiYWNrLCB1c2VFZmZlY3QsIHVzZVJlZiwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCdcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcydcblxuaW1wb3J0IEljb24gZnJvbSAnLi9JY29uJ1xuaW1wb3J0IHN0eWxlcyBmcm9tICcuL2FjdGlvbi1tZW51Lm1vZHVsZS5jc3MnXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEFjdGlvbk1lbnUgKHsgYWN0aW9ucyB9KSB7XG4gIGNvbnN0IFtpc09wZW4sIHNldE9wZW5dID0gdXNlU3RhdGUoZmFsc2UpXG4gIGNvbnN0IGVsZW1lbnQgPSB1c2VSZWYoKVxuXG4gIGZ1bmN0aW9uIGNsb3NlQW5kIChhY3Rpb24pIHtcbiAgICBzZXRPcGVuKGZhbHNlKVxuICAgIGFjdGlvbigpXG4gIH1cblxuICBjb25zdCBoYW5kbGVDbGljayA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uIChlKSB7XG4gICAgaWYgKGVsZW1lbnQuY3VycmVudCAmJiAhZWxlbWVudC5jdXJyZW50LmNvbnRhaW5zKGUudGFyZ2V0KSkge1xuICAgICAgc2V0T3BlbihmYWxzZSlcbiAgICB9XG4gIH0sIFtlbGVtZW50LCBzZXRPcGVuXSlcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBoYW5kbGVDbGljaylcbiAgICByZXR1cm4gKCkgPT4gZG9jdW1lbnQuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIGhhbmRsZUNsaWNrKVxuICB9LCBbaGFuZGxlQ2xpY2tdKVxuXG4gIHJldHVybiAoXG4gICAgPGRpdiByZWY9e2VsZW1lbnR9IGNsYXNzTmFtZT17W1xuICAgICAgc3R5bGVzLm1lbnUsXG4gICAgICBpc09wZW4gJiYgc3R5bGVzLm9wZW5cbiAgICBdLmpvaW4oJyAnKX0+XG4gICAgICA8cCBvbkNsaWNrPXsoKSA9PiBzZXRPcGVuKCFpc09wZW4pfT5cbiAgICAgICAgPEljb24gbmFtZT1cImVsbGlwc2lzXCIgLz5cbiAgICAgIDwvcD5cbiAgICAgIDx1bD5cbiAgICAgICAge2FjdGlvbnMubWFwKChhY3Rpb24sIGkpID0+IChcbiAgICAgICAgICA8bGlcbiAgICAgICAgICAgIGtleT17aX1cbiAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IGNsb3NlQW5kKGFjdGlvbi5jYWxsYmFjayl9XG4gICAgICAgICAgPlxuICAgICAgICAgICAge2FjdGlvbi5jb250ZW50fVxuICAgICAgICAgIDwvbGk+XG4gICAgICAgICkpfVxuICAgICAgPC91bD5cbiAgICA8L2Rpdj5cbiAgKVxufVxuXG5BY3Rpb25NZW51LnByb3BUeXBlcyA9IHtcbiAgYWN0aW9uczogUHJvcFR5cGVzLmFycmF5T2YoXG4gICAgUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgIGNhbGxiYWNrOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgICAgY29udGVudDogUHJvcFR5cGVzLm9uZU9mVHlwZShbXG4gICAgICAgIFByb3BUeXBlcy5ub2RlLFxuICAgICAgICBQcm9wVHlwZXMuc3RyaW5nXG4gICAgICBdKS5pc1JlcXVpcmVkXG4gICAgfSlcbiAgKS5pc1JlcXVpcmVkXG59XG4iLCJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnXG5pbXBvcnQgeyB1c2VNZW1vIH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgeyB1c2VEaXNwYXRjaCB9IGZyb20gJ3JlYWN0LXJlZHV4J1xuXG5pbXBvcnQge1xuICByZWJpbmRUcmFuc3BhcmVudFRvS2V5UHJlc3MsXG4gIHJlYmluZFRyYW5zcGFyZW50VG9Ob25lLFxuICByZWJpbmROb25lVG9LZXlwcmVzcyxcbiAgcmViaW5kTm9uZVRvVHJhbnNwYXJlbnQsXG4gIHJlYmluZEVtcHR5S2V5cHJlc3NUb1RyYW5zcGFyZW50LFxuICByZWJpbmRFbXB0eUtleXByZXNzVG9Ob25lXG59IGZyb20gJy4vbGF5ZXJzU2xpY2UnXG5pbXBvcnQgQWN0aW9uTWVudSBmcm9tICcuLi8uLi9Db21tb24vQWN0aW9uTWVudSdcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTGF5ZXJBY3Rpb25zTWVudSAoeyBhY3RpdmVMYXllciwgYWRkaXRpb25hbEFjdGlvbnMgPSBbXSB9KSB7XG4gIGNvbnN0IGRpc3BhdGNoID0gdXNlRGlzcGF0Y2goKVxuICBjb25zdCBhY3Rpb25zID0gdXNlTWVtbygoKSA9PiAoe1xuICAgIHRyYW5zcGFyZW50VG9LZXlwcmVzczogKCkgPT4gZGlzcGF0Y2gocmViaW5kVHJhbnNwYXJlbnRUb0tleVByZXNzKHsgbGF5ZXJJbmRleDogYWN0aXZlTGF5ZXIgfSkpLFxuICAgIHRyYW5zcGFyZW50VG9Ob25lOiAoKSA9PiBkaXNwYXRjaChyZWJpbmRUcmFuc3BhcmVudFRvTm9uZSh7IGxheWVySW5kZXg6IGFjdGl2ZUxheWVyIH0pKSxcbiAgICBub25lVG9LZXlwcmVzczogKCkgPT4gZGlzcGF0Y2gocmViaW5kTm9uZVRvS2V5cHJlc3MoeyBsYXllckluZGV4OiBhY3RpdmVMYXllciB9KSksXG4gICAgbm9uZVRvVHJhbnNwYXJlbnQ6ICgpID0+IGRpc3BhdGNoKHJlYmluZE5vbmVUb1RyYW5zcGFyZW50KHsgbGF5ZXJJbmRleDogYWN0aXZlTGF5ZXIgfSkpLFxuICAgIGVtcHR5S2V5cHJlc3NUb1RyYW5zcGFyZW50OiAoKSA9PiBkaXNwYXRjaChyZWJpbmRFbXB0eUtleXByZXNzVG9UcmFuc3BhcmVudCh7IGxheWVySW5kZXg6IGFjdGl2ZUxheWVyIH0pKSxcbiAgICBlbXB0eUtleXByZXNzVG9Ob25lOiAoKSA9PiBkaXNwYXRjaChyZWJpbmRFbXB0eUtleXByZXNzVG9Ob25lKHsgbGF5ZXJJbmRleDogYWN0aXZlTGF5ZXIgfSkpXG4gIH0pLCBbZGlzcGF0Y2gsIGFjdGl2ZUxheWVyXSlcblxuICByZXR1cm4gKFxuICAgIDxBY3Rpb25NZW51IGFjdGlvbnM9e1tcbiAgICAgIC4uLmFkZGl0aW9uYWxBY3Rpb25zLFxuICAgICAge1xuICAgICAgICBjYWxsYmFjazogYWN0aW9ucy50cmFuc3BhcmVudFRvS2V5cHJlc3MsXG4gICAgICAgIGNvbnRlbnQ6IDw+Q29udmVydCA8Y29kZT4mdHJhbnM8L2NvZGU+IHRvIDxjb2RlPiZrcDwvY29kZT48Lz5cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGNhbGxiYWNrOiBhY3Rpb25zLnRyYW5zcGFyZW50VG9Ob25lLFxuICAgICAgICBjb250ZW50OiA8PkNvbnZlcnQgPGNvZGU+JnRyYW5zPC9jb2RlPiB0byA8Y29kZT4mbm9uZTwvY29kZT48Lz5cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGNhbGxiYWNrOiBhY3Rpb25zLm5vbmVUb0tleXByZXNzLFxuICAgICAgICBjb250ZW50OiA8PkNvbnZlcnQgPGNvZGU+Jm5vbmU8L2NvZGU+IHRvIDxjb2RlPiZrcDwvY29kZT48Lz5cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGNhbGxiYWNrOiBhY3Rpb25zLm5vbmVUb1RyYW5zcGFyZW50LFxuICAgICAgICBjb250ZW50OiA8PkNvbnZlcnQgPGNvZGU+Jm5vbmU8L2NvZGU+IHRvIDxjb2RlPiZ0cmFuczwvY29kZT48Lz5cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGNhbGxiYWNrOiBhY3Rpb25zLmVtcHR5S2V5cHJlc3NUb1RyYW5zcGFyZW50LFxuICAgICAgICBjb250ZW50OiA8PkNvbnZlcnQgPGNvZGU+JmtwIOKmuDwvY29kZT4gdG8gPGNvZGU+JnRyYW5zPC9jb2RlPjwvPlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgY2FsbGJhY2s6IGFjdGlvbnMuZW1wdHlLZXlwcmVzc1RvTm9uZSxcbiAgICAgICAgY29udGVudDogPD5Db252ZXJ0IDxjb2RlPiZrcCDiprg8L2NvZGU+IHRvIDxjb2RlPiZub25lPC9jb2RlPjwvPlxuICAgICAgfVxuICAgIF19IC8+XG4gIClcbn1cblxuTGF5ZXJBY3Rpb25zTWVudS5wcm9wVHlwZXMgPSB7XG4gIGFjdGl2ZUxheWVyOiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWQsXG4gIGFkZGl0aW9uYWxBY3Rpb25zOiBQcm9wVHlwZXMuYXJyYXlPZihcbiAgICBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgY2FsbGJhY2s6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgICBjb250ZW50OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtcbiAgICAgICAgUHJvcFR5cGVzLm5vZGUsXG4gICAgICAgIFByb3BUeXBlcy5zdHJpbmdcbiAgICAgIF0pLmlzUmVxdWlyZWRcbiAgICB9KVxuICApXG59XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzJdLnVzZVsxXSEuL3N0eWxlLm1vZHVsZS5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1syXS51c2VbMV0hLi9zdHlsZS5tb2R1bGUuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IHBpY2sgZnJvbSAnbG9kYXNoL3BpY2snXG5pbXBvcnQgeyB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgdXNlRGlzcGF0Y2gsIHVzZVNlbGVjdG9yIH0gZnJvbSAncmVhY3QtcmVkdXgnXG5cbmltcG9ydCBJbnB1dCBmcm9tICcuLi8uLi9Db21tb24vSW5wdXQnXG5pbXBvcnQgTW9kYWwgZnJvbSAnLi4vLi4vQ29tbW9uL01vZGFsJ1xuaW1wb3J0IERpYWxvZ0JveCBmcm9tICcuLi8uLi9Db21tb24vRGlhbG9nQm94J1xuaW1wb3J0IHN0eWxlcyBmcm9tICcuL3N0eWxlLm1vZHVsZS5jc3MnXG5pbXBvcnQgeyB2YWxpZGF0ZURldmljZXRyZWVOb2RlTmFtZSB9IGZyb20gJy4uL3ZhbGlkYXRvcnMnXG5pbXBvcnQgQWN0aW9uQnV0dG9uIGZyb20gJy4uLy4uL0NvbW1vbi9BY3Rpb25CdXR0b24nXG5pbXBvcnQgeyBzZWxlY3RMYXllcnMsIHVwZGF0ZUxheWVyTWV0YWRhdGEgfSBmcm9tICcuL2xheWVyc1NsaWNlJ1xuXG5mdW5jdGlvbiBDb25maWdNb2RhbCAoeyBhY3RpdmVMYXllciwgb25DbG9zZSB9KSB7XG4gIGNvbnN0IGRpc3BhdGNoID0gdXNlRGlzcGF0Y2goKVxuICBjb25zdCBsYXllcnMgPSB1c2VTZWxlY3RvcihzZWxlY3RMYXllcnMpXG4gIGNvbnN0IGxheWVyID0gbGF5ZXJzW2FjdGl2ZUxheWVyXVxuXG4gIGNvbnN0IFtwZW5kaW5nLCBzZXRQZW5kaW5nXSA9IHVzZVN0YXRlKHBpY2sobGF5ZXIsIFsnbmFtZScsICdsYWJlbCddKSlcblxuICBmdW5jdGlvbiBoYW5kbGVDb25maXJtICgpIHtcbiAgICBkaXNwYXRjaCh1cGRhdGVMYXllck1ldGFkYXRhKHsgbGF5ZXJJbmRleDogYWN0aXZlTGF5ZXIsIC4uLnBlbmRpbmcgfSkpXG4gICAgb25DbG9zZSgpXG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxNb2RhbCBvbkRpc21pc3M9e29uQ2xvc2V9PlxuICAgICAgPERpYWxvZ0JveCBkaXNtaXNzVGV4dD1cIlwiPlxuICAgICAgICA8aDI+Q3VzdG9taXplIExheWVyIDxjb2RlPntsYXllci5uYW1lfTwvY29kZT48L2gyPlxuICAgICAgICA8ZGl2PlxuXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5maWVsZH0+XG4gICAgICAgICAgICA8bGFiZWwgaHRtbEZvcj1cImN1c3RvbWl6ZS1sYXllci1uYW1lXCI+XG4gICAgICAgICAgICAgIE5hbWVcbiAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgICA8SW5wdXRcbiAgICAgICAgICAgICAgaWQ9XCJjdXN0b21pemUtbGF5ZXItbmFtZVwiXG4gICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiRGVmYXVsdFwiXG4gICAgICAgICAgICAgIHZhbHVlPXtwZW5kaW5nLm5hbWV9XG4gICAgICAgICAgICAgIHZhbGlkYXRvcj17dmFsaWRhdGVEZXZpY2V0cmVlTm9kZU5hbWV9XG4gICAgICAgICAgICAgIG9uQ2hhbmdlPXtldmVudCA9PiAoXG4gICAgICAgICAgICAgICAgc2V0UGVuZGluZyhzdGF0ZSA9PiAoe1xuICAgICAgICAgICAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgICAgICAgICAgICBuYW1lOiBldmVudC50YXJnZXQudmFsdWVcbiAgICAgICAgICAgICAgICB9KSlcbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLmZpZWxkfT5cbiAgICAgICAgICAgIDxsYWJlbCBodG1sRm9yPVwiY3VzdG9taXplLWxheWVyLWxhYmVsXCI+XG4gICAgICAgICAgICAgIExhYmVsXG4gICAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgIGlkPVwiY3VzdG9taXplLWxheWVyLWxhYmVsXCJcbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJEZWZhdWx0XCJcbiAgICAgICAgICAgICAgdmFsdWU9e3BlbmRpbmcubGFiZWx9XG4gICAgICAgICAgICAgIG9uQ2hhbmdlPXtldmVudCA9PiAoXG4gICAgICAgICAgICAgICAgc2V0UGVuZGluZyhzdGF0ZSA9PiAoe1xuICAgICAgICAgICAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgICAgICAgICAgICBsYWJlbDogZXZlbnQudGFyZ2V0LnZhbHVlXG4gICAgICAgICAgICAgICAgfSkpXG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IHN0eWxlPXt7IHRleHRBbGlnbjogJ2NlbnRlcicsIGdhcDogJzVweCcgfX0+XG4gICAgICAgICAgPEFjdGlvbkJ1dHRvbiBvbkNsaWNrPXtoYW5kbGVDb25maXJtfT5PSzwvQWN0aW9uQnV0dG9uPlxuICAgICAgICAgIDxBY3Rpb25CdXR0b24gb25DbGljaz17b25DbG9zZX0gc2Vjb25kYXJ5PkNhbmNlbDwvQWN0aW9uQnV0dG9uPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvRGlhbG9nQm94PlxuICAgIDwvTW9kYWw+XG4gIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgQ29uZmlnTW9kYWxcbiIsImltcG9ydCB7IHVzZUNvbnRleHQgfSBmcm9tICdyZWFjdCdcbmltcG9ydCB7IHVzZURpc3BhdGNoIH0gZnJvbSAncmVhY3QtcmVkdXgnXG5cbmltcG9ydCB7IGNyZWF0ZUxheWVyIH0gZnJvbSAnLi9sYXllcnNTbGljZSdcbmltcG9ydCBBY3Rpb25CdXR0b24gZnJvbSAnLi4vLi4vQ29tbW9uL0FjdGlvbkJ1dHRvbidcbmltcG9ydCB7IExheW91dENvbnRleHQgfSBmcm9tICcuLi8uLi9Db250ZXh0cy9MYXlvdXQnXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFByb21wdEZvckZpcnN0TGF5ZXIgKCkge1xuICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKClcbiAgY29uc3QgeyBiaW5kaW5nQ291bnQgfSA9IHVzZUNvbnRleHQoTGF5b3V0Q29udGV4dClcblxuICByZXR1cm4gKFxuICAgIDxkaXYgc3R5bGU9e3sgdGV4dEFsaWduOiAnY2VudGVyJyB9fT5cbiAgICAgIDxoMz5ObyBrZXltYXAgbGF5ZXJzIGRlZmluZWQ8L2gzPlxuICAgICAgPEFjdGlvbkJ1dHRvbiBvbkNsaWNrPXsoKSA9PiBkaXNwYXRjaChjcmVhdGVMYXllcih7IGJpbmRpbmdDb3VudCB9KSl9PlxuICAgICAgICBBZGQgbGF5ZXJcbiAgICAgIDwvQWN0aW9uQnV0dG9uPlxuICAgIDwvZGl2PlxuICApXG59XG4iLCJpbXBvcnQgeyB1c2VDYWxsYmFjayB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgdXNlRGlzcGF0Y2gsIHVzZVNlbGVjdG9yIH0gZnJvbSAncmVhY3QtcmVkdXgnXG5pbXBvcnQgS2V5Ym9hcmRMYXlvdXQgZnJvbSAnLi4vS2V5Ym9hcmRMYXlvdXQnXG5pbXBvcnQgS2V5IGZyb20gJy4uL0tleXMvS2V5J1xuaW1wb3J0IHsgc2VsZWN0TGF5ZXJzLCB1cGRhdGVLZXlCaW5kaW5nIH0gZnJvbSAnLi9sYXllcnNTbGljZSdcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTGF5ZXJCaW5kaW5ncyAoeyBsYXlvdXQsIGFjdGl2ZUxheWVyIH0pIHtcbiAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpXG4gIGNvbnN0IGxheWVycyA9IHVzZVNlbGVjdG9yKHNlbGVjdExheWVycylcbiAgY29uc3QgbGF5ZXIgPSBsYXllcnNbYWN0aXZlTGF5ZXJdXG5cbiAgY29uc3QgaGFuZGxlVXBkYXRlQmluZCA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uIChiaW5kSW5kZXgsIGJpbmRpbmcpIHtcbiAgICBkaXNwYXRjaCh1cGRhdGVLZXlCaW5kaW5nKHsgbGF5ZXJJbmRleDogYWN0aXZlTGF5ZXIsIGJpbmRJbmRleCwgYmluZGluZyB9KSlcbiAgfSwgW2Rpc3BhdGNoLCBhY3RpdmVMYXllcl0pXG5cbiAgcmV0dXJuIChcbiAgICA8S2V5Ym9hcmRMYXlvdXRcbiAgICAgIGxheW91dD17bGF5b3V0fVxuICAgICAgYmluZGluZ3M9e2xheWVyLmJpbmRpbmdzfVxuICAgICAgcmVuZGVyS2V5PXsoeyBpbmRleCwga2V5TGF5b3V0IH0pID0+IGxheWVyLmJpbmRpbmdzW2luZGV4XSAmJiAoXG4gICAgICAgIDxLZXlcbiAgICAgICAgICBsYWJlbD17a2V5TGF5b3V0LmxhYmVsfVxuICAgICAgICAgIHZhbHVlPXtsYXllci5iaW5kaW5nc1tpbmRleF0/LnZhbHVlfVxuICAgICAgICAgIHBhcmFtcz17bGF5ZXIuYmluZGluZ3NbaW5kZXhdPy5wYXJhbXN9XG4gICAgICAgICAgb25VcGRhdGU9e2JpbmQgPT4gaGFuZGxlVXBkYXRlQmluZChpbmRleCwgYmluZCl9XG4gICAgICAgIC8+XG4gICAgICApfVxuICAgIC8+XG4gIClcbn1cbiIsImltcG9ydCB7IHVzZUNhbGxiYWNrLCB1c2VFZmZlY3QsIHVzZVJlZHVjZXIgfSBmcm9tICdyZWFjdCdcblxuY29uc3QgSU5JVElBTF9TVEFURSA9IHtcbiAga2V5c0hlbGQ6IFtdLFxuICBrZXlzSGVsZEJlZm9yZUxhc3RSZWxlYXNlOiBbXVxufVxuXG5mdW5jdGlvbiByZWR1Y2VLZXlEb3duIChzdGF0ZSwgYWN0aW9uKSB7XG4gIHJldHVybiB7XG4gICAga2V5c0hlbGQ6IFsuLi5zdGF0ZS5rZXlzSGVsZCwgYWN0aW9uLmV2ZW50LmtleV0sXG4gICAga2V5c0hlbGRCZWZvcmVMYXN0UmVsZWFzZTogW11cbiAgfVxufVxuXG5mdW5jdGlvbiByZWR1Y2VLZXlVcCAoc3RhdGUsIGFjdGlvbikge1xuICBjb25zdCBrZXlzSGVsZCA9IHN0YXRlLmtleXNIZWxkLmZpbHRlcihrZXkgPT4ga2V5ICE9PSBhY3Rpb24uZXZlbnQua2V5KVxuICByZXR1cm4ge1xuICAgIGtleXNIZWxkOiBbXSxcbiAgICBrZXlzSGVsZEJlZm9yZUxhc3RSZWxlYXNlOiBrZXlzSGVsZFxuICB9XG59XG5cbmZ1bmN0aW9uIHVzZUtleVN0YXRlICgpIHtcbiAgcmV0dXJuIHVzZVJlZHVjZXIoKHN0YXRlLCBhY3Rpb24pID0+IHtcbiAgICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgICBjYXNlICdLRVlfRE9XTic6XG4gICAgICAgIHJldHVybiByZWR1Y2VLZXlEb3duKHN0YXRlLCBhY3Rpb24pXG5cbiAgICAgIGNhc2UgJ0tFWV9VUCc6XG4gICAgICAgIHJldHVybiByZWR1Y2VLZXlVcChzdGF0ZSwgYWN0aW9uKVxuXG4gICAgICBjYXNlICdSRVNFVCc6XG4gICAgICAgIHJldHVybiBJTklUSUFMX1NUQVRFXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBzdGF0ZVxuICAgIH1cbiAgfSwgSU5JVElBTF9TVEFURSlcbn1cblxuLyoqXG4gKiBIYW5kbGUga2V5ZG93bi9rZXl1cCBldmVudHNcbiAqXG4gKiBUaGlzIHRha2VzIGNhcmUgdG8gYXZvaWQgZmlyaW5nIGFnYWluIHVwb24gcmVsZWFzZSBvZiBtb2RpZmllcnMgYWZ0ZXIgdGhlXG4gKiBtb2RpZmllZCBrZXkgaGFzIGFscmVhZHkgYmVlbiBmaXJlZC5cbiAqXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGlzQWN0aXZlIC0gdXNlIGZhbHNlIHRvIGRlYWN0aXZhdGUgZXZlbnRzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBvbktleVByZXNzIC0gaGFuZGxlciBmb3IgZmlsdGVyZWQga2V5IGV2ZW50c1xuICogQHJldHVybnMgbnVsbFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VLZXlIYW5kbGVyIChpc0FjdGl2ZSwgb25LZXlQcmVzcykge1xuICBjb25zdCBbc3RhdGUsIGRpc3BhdGNoXSA9IHVzZUtleVN0YXRlKClcbiAgY29uc3QgaGFuZGxlS2V5RG93biA9IHVzZUNhbGxiYWNrKChldmVudCkgPT4ge1xuICAgIGlmIChldmVudC5yZXBlYXQpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICBkaXNwYXRjaCh7IHR5cGU6ICdLRVlfRE9XTicsIGV2ZW50IH0pXG4gIH0sIFtkaXNwYXRjaF0pXG5cbiAgY29uc3QgaGFuZGxlS2V5VXAgPSB1c2VDYWxsYmFjaygoZXZlbnQpID0+IHtcbiAgICBpZiAoc3RhdGUua2V5c0hlbGRCZWZvcmVMYXN0UmVsZWFzZS5pbmNsdWRlcyhldmVudC5rZXkpKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgb25LZXlQcmVzcyhldmVudClcbiAgICBkaXNwYXRjaCh7IHR5cGU6ICdLRVlfVVAnLCBldmVudCB9KVxuICB9LCBbc3RhdGUua2V5c0hlbGRCZWZvcmVMYXN0UmVsZWFzZSwgb25LZXlQcmVzcywgZGlzcGF0Y2hdKVxuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKCFpc0FjdGl2ZSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgaGFuZGxlS2V5RG93bilcbiAgICBkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJywgaGFuZGxlS2V5VXApXG5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgaGFuZGxlS2V5RG93bilcbiAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5dXAnLCBoYW5kbGVLZXlVcClcbiAgICB9XG4gIH0sIFtpc0FjdGl2ZSwgaGFuZGxlS2V5RG93biwgaGFuZGxlS2V5VXBdKVxufVxuIiwiaW1wb3J0IHsgY29tcGFjdCB9IGZyb20gJ2xvZGFzaCdcbmltcG9ydCB7IHVzZUNhbGxiYWNrLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgdXNlRGlzcGF0Y2ggfSBmcm9tICdyZWFjdC1yZWR1eCdcbmltcG9ydCB7IG1hcENoYXJhY3RlciB9IGZyb20gJ3ptay1kYXRhL2tleWNvZGUtbWFwcGluZ3MnXG5cbmltcG9ydCB7IHVwZGF0ZUtleUJpbmRpbmcgfSBmcm9tICcuL2xheWVyc1NsaWNlJ1xuaW1wb3J0IHVzZUtleUhhbmRsZXIgZnJvbSAnLi91c2Uta2V5LWhhbmRsZXInXG5cbmNvbnN0IG1hcHBpbmdzID0ge1xuICBBbHQ6ICdBTFQnLFxuICBDb250cm9sOiAnQ1RSTCcsXG4gIFNoaWZ0OiAnU0hGVCcsXG4gIE1ldGE6ICdHVUknLFxuICBBcnJvd1VwOiAnVVAnLFxuICBBcnJvd0Rvd246ICdET1dOJyxcbiAgQXJyb3dMZWZ0OiAnTEVGVCcsXG4gIEFycm93UmlnaHQ6ICdSSUdIVCcsXG4gIEVzY2FwZTogJ0VTQycsXG4gIFRhYjogJ1RBQicsXG4gIEVudGVyOiAnUkVUJyxcbiAgSG9tZTogJ0hPTUUnLFxuICBFbmQ6ICdFTkQnLFxuICBQYWdlRG93bjogJ1BHX0ROJyxcbiAgUGFnZVVwOiAnUEdfVVAnLFxuICBCYWNrc3BhY2U6ICdCU1BDJyxcbiAgRGVsZXRlOiAnREVMJ1xufVxuXG5mdW5jdGlvbiBub3JtYWxpemVLZXkgKGV2ZW50KSB7XG4gIGNvbnN0IG1hcHBlZCA9IG1hcHBpbmdzW2V2ZW50LmtleV1cbiAgY29uc3QgcHJlZml4ID0gZ2V0U2lkZVByZWZpeChldmVudClcblxuICBpZiAoIW1hcHBlZCkge1xuICAgIHJldHVybiBudWxsXG4gIH1cblxuICByZXR1cm4ge1xuICAgIHZhbHVlOiAnJmtwJyxcbiAgICBwYXJhbXM6IFt7XG4gICAgICB2YWx1ZTogcHJlZml4ICsgbWFwcGVkLFxuICAgICAgcGFyYW1zOiBbXVxuICAgIH1dXG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0U2lkZVByZWZpeCAoZXZlbnQpIHtcbiAgc3dpdGNoIChldmVudC5sb2NhdGlvbikge1xuICAgIGNhc2UgMTpcbiAgICAgIHJldHVybiAnTCdcbiAgICBjYXNlIDI6XG4gICAgICByZXR1cm4gJ1InXG4gICAgY2FzZSAwOlxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gJydcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRNb2RpZmllcnMgKGV2ZW50KSB7XG4gIHJldHVybiBjb21wYWN0KFtcbiAgICBldmVudC5hbHRLZXkgJiYgJ0xBJyxcbiAgICBldmVudC5jdHJsS2V5ICYmICdMQycsXG4gICAgZXZlbnQubWV0YUtleSAmJiAnTEcnLFxuICAgIGV2ZW50LnNoaWZ0S2V5ICYmICdMUydcbiAgXSlcbn1cblxuZnVuY3Rpb24gZ2V0QmluZEZyb21LZXkgKGV2ZW50KSB7XG4gIGNvbnN0IGFwcGxpZWRNb2RpZmllcnMgPSBnZXRNb2RpZmllcnMoZXZlbnQpXG4gIGNvbnN0IG1hcHBlZCA9IChcbiAgICBtYXBDaGFyYWN0ZXIoZXZlbnQua2V5LnRvTG93ZXJDYXNlKCkpIHx8XG4gICAgbm9ybWFsaXplS2V5KGV2ZW50KVxuICApXG5cbiAgaWYgKCFtYXBwZWQpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgdmFsdWU6IG1hcHBlZC52YWx1ZSxcbiAgICBwYXJhbXM6IGFwcGxpZWRNb2RpZmllcnMucmVkdWNlKChwYXJhbXMsIG1vZGlmaWVyKSA9PiB7XG4gICAgICByZXR1cm4gW3sgdmFsdWU6IG1vZGlmaWVyLCBwYXJhbXMgfV1cbiAgICB9LCBtYXBwZWQucGFyYW1zKVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VRdWlja0Fzc2lnbm1lbnQgKGxheWVySW5kZXgsIGxheW91dCwgZGVmYXVsdFN0YXJ0ID0gZmFsc2UpIHtcbiAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpXG4gIGNvbnN0IFtpc0FjdGl2ZSwgc2V0SXNBY3RpdmVdID0gdXNlU3RhdGUoZGVmYXVsdFN0YXJ0KVxuICBjb25zdCBbYmluZEluZGV4LCBzZXRCaW5kSW5kZXhdID0gdXNlU3RhdGUoMClcblxuICBjb25zdCBuZXh0QmluZCA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBpZiAoYmluZEluZGV4ID09PSBsYXlvdXQubGVuZ3RoIC0gMSkge1xuICAgICAgc2V0QmluZEluZGV4KDApXG4gICAgICBzZXRJc0FjdGl2ZShmYWxzZSlcbiAgICB9IGVsc2Uge1xuICAgICAgc2V0QmluZEluZGV4KGJpbmRJbmRleCArIDEpXG4gICAgfVxuICB9LCBbYmluZEluZGV4LCBzZXRCaW5kSW5kZXgsIGxheW91dC5sZW5ndGgsIHNldElzQWN0aXZlXSlcblxuICBjb25zdCBoYW5kbGVLZXlQcmVzcyA9IHVzZUNhbGxiYWNrKGV2ZW50ID0+IHtcbiAgICBjb25zdCBiaW5kaW5nID0gZ2V0QmluZEZyb21LZXkoZXZlbnQpXG5cbiAgICBpZiAoYmluZGluZykge1xuICAgICAgZGlzcGF0Y2godXBkYXRlS2V5QmluZGluZyh7XG4gICAgICAgIGxheWVySW5kZXgsXG4gICAgICAgIGJpbmRJbmRleCxcbiAgICAgICAgYmluZGluZ1xuICAgICAgfSkpXG5cbiAgICAgIG5leHRCaW5kKClcbiAgICB9XG4gIH0sIFtsYXllckluZGV4LCBiaW5kSW5kZXgsIG5leHRCaW5kLCBkaXNwYXRjaF0pXG5cbiAgdXNlS2V5SGFuZGxlcihpc0FjdGl2ZSwgaGFuZGxlS2V5UHJlc3MpXG5cbiAgY29uc3Qgc3RhcnRRdWlja0Fzc2lnbm1lbnQgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgc2V0SXNBY3RpdmUodHJ1ZSlcbiAgfSwgW3NldElzQWN0aXZlXSlcblxuICBjb25zdCBjYW5jZWxRdWlja0Fzc2lnbm1lbnQgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgc2V0SXNBY3RpdmUoZmFsc2UpXG4gIH0sIFtzZXRJc0FjdGl2ZV0pXG5cbiAgcmV0dXJuIFtcbiAgICB7IGlzQWN0aXZlLCBiaW5kSW5kZXggfSxcbiAgICB7IHN0YXJ0UXVpY2tBc3NpZ25tZW50LCBjYW5jZWxRdWlja0Fzc2lnbm1lbnQsIHNldEJpbmRJbmRleCB9XG4gIF1cbn1cbiIsImltcG9ydCBjb21wYWN0IGZyb20gJ2xvZGFzaC9jb21wYWN0J1xuaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VNZW1vIH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgeyB1c2VTZWxlY3RvciB9IGZyb20gJ3JlYWN0LXJlZHV4J1xuaW1wb3J0IEFjdGlvbkJ1dHRvbiBmcm9tICcuLi8uLi9Db21tb24vQWN0aW9uQnV0dG9uJ1xuaW1wb3J0IERpYWxvZ0JveCBmcm9tICcuLi8uLi9Db21tb24vRGlhbG9nQm94J1xuXG5pbXBvcnQgTW9kYWwgZnJvbSAnLi4vLi4vQ29tbW9uL01vZGFsJ1xuaW1wb3J0IFRpcCBmcm9tICcuLi8uLi9Db21tb24vVGlwJ1xuaW1wb3J0IEtleWJvYXJkTGF5b3V0IGZyb20gJy4uL0tleWJvYXJkTGF5b3V0J1xuaW1wb3J0IEtleSBmcm9tICcuLi9LZXlzL0tleSdcbmltcG9ydCB7IGdldFdyYXBwZXJTdHlsZSB9IGZyb20gJy4uL3V0aWwnXG5pbXBvcnQgeyBzZWxlY3RMYXllcnMgfSBmcm9tICcuL2xheWVyc1NsaWNlJ1xuaW1wb3J0IHsgdXNlUXVpY2tBc3NpZ25tZW50IH0gZnJvbSAnLi9xdWljay1hc3NpZ25tZW50J1xuaW1wb3J0IHN0eWxlcyBmcm9tICcuL3N0eWxlLm1vZHVsZS5jc3MnXG5cbmV4cG9ydCBmdW5jdGlvbiBRdWlja0Fzc2lnbm1lbnRNb2RhbCAoeyBsYXlvdXQsIGxheWVySW5kZXgsIG9uQ2xvc2UgfSkge1xuICBjb25zdCBsYXllcnMgPSB1c2VTZWxlY3RvcihzZWxlY3RMYXllcnMpXG4gIGNvbnN0IGxheWVyID0gbGF5ZXJzW2xheWVySW5kZXhdXG4gIGNvbnN0IFtzdGF0dXMsIGFjdGlvbnNdID0gdXNlUXVpY2tBc3NpZ25tZW50KGxheWVySW5kZXgsIGxheW91dCwgdHJ1ZSlcbiAgY29uc3Qgd3JhcHBlclN0eWxlID0gdXNlTWVtbygoKSA9PiBnZXRXcmFwcGVyU3R5bGUobGF5b3V0LCB7XG4gICAgb3ZlcnJpZGVzOiB7IG1pbldpZHRoOiAnNDAwcHgnIH1cbiAgfSksIFtsYXlvdXRdKVxuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKCFzdGF0dXMuaXNBY3RpdmUpIHtcbiAgICAgIG9uQ2xvc2UoKVxuICAgIH1cbiAgfSwgW3N0YXR1cy5pc0FjdGl2ZSwgb25DbG9zZV0pXG5cbiAgcmV0dXJuIChcbiAgICA8TW9kYWwgb25EaXNtaXNzPXtvbkNsb3NlfT5cbiAgICAgIDxEaWFsb2dCb3ggY2xhc3Nlcz17W3N0eWxlcy5xdWlja0Fzc2lnbkRpYWxvZ119IGRpc21pc3NUZXh0PVwiXCI+XG4gICAgICAgIDxoMj5RdWljay1hc3NpZ24gbGF5ZXIga2V5YmluZGluZ3M8L2gyPlxuICAgICAgICA8cD5cbiAgICAgICAgICBQcmVzcyBhIGtleSBvbiB5b3VyIGtleWJvYXJkIHRvIHNldCBhIDxjb2RlPiZrcDwvY29kZT4gYmluZGluZyBhdCB0aGVcbiAgICAgICAgICBoaWdobGlnaHRlZCBwb3NpdGlvbiBpbiB5b3VyIGtleW1hcC5cbiAgICAgICAgPC9wPlxuICAgICAgICA8ZGl2IHN0eWxlPXt3cmFwcGVyU3R5bGV9PlxuICAgICAgICAgIDxLZXlib2FyZExheW91dFxuICAgICAgICAgICAgbGF5b3V0PXtsYXlvdXR9XG4gICAgICAgICAgICBiaW5kaW5ncz17bGF5ZXIuYmluZGluZ3N9XG4gICAgICAgICAgICByZW5kZXJLZXk9eyh7IGluZGV4LCBrZXlMYXlvdXQgfSkgPT4gbGF5ZXIuYmluZGluZ3NbaW5kZXhdICYmIChcbiAgICAgICAgICAgICAgPEtleVxuICAgICAgICAgICAgICAgIGxhYmVsPXtrZXlMYXlvdXQubGFiZWx9XG4gICAgICAgICAgICAgICAga2V5V3JhcHBlclByb3BzPXt7XG4gICAgICAgICAgICAgICAgICBzZWxlY3RhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgIG9uQ2xpY2s6ICgpID0+IGFjdGlvbnMuc2V0QmluZEluZGV4KGluZGV4KSxcbiAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogY29tcGFjdChbXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlcy5xdWlja0JpbmRLZXksXG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5iaW5kSW5kZXggPT09IGluZGV4ICYmIHN0eWxlcy5xdWlja0JpbmRLZXlIaWdobGlnaHRcbiAgICAgICAgICAgICAgICAgIF0pLmpvaW4oJyAnKVxuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgdmFsdWU9e2xheWVyLmJpbmRpbmdzW2luZGV4XT8udmFsdWV9XG4gICAgICAgICAgICAgICAgcGFyYW1zPXtsYXllci5iaW5kaW5nc1tpbmRleF0/LnBhcmFtc31cbiAgICAgICAgICAgICAgICBvblVwZGF0ZT17YmluZCA9PiB7fX1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgc3R5bGU9e3sgdGV4dEFsaWduOiAnY2VudGVyJyB9fT5cbiAgICAgICAgICA8VGlwPkNsaWNrIG9uIGEgZGlmZmVyZW50IGtleSB0byBqdW1wIGFoZWFkIG9yIGNvcnJlY3QgYSBwcmV2aW91cyBiaW5kaW5nLjwvVGlwPlxuICAgICAgICAgIDxwPlxuICAgICAgICAgICAgPEFjdGlvbkJ1dHRvbiBvbkNsaWNrPXtvbkNsb3NlfT5Eb25lPC9BY3Rpb25CdXR0b24+XG4gICAgICAgICAgPC9wPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvRGlhbG9nQm94PlxuICAgIDwvTW9kYWw+XG4gIClcbn1cbiIsImltcG9ydCB7IHVzZUNhbGxiYWNrLCB1c2VDb250ZXh0LCB1c2VNZW1vLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgdXNlU2VsZWN0b3IgfSBmcm9tICdyZWFjdC1yZWR1eCdcblxuaW1wb3J0IExheWVyU2VsZWN0b3IgZnJvbSAnLi9MYXllclNlbGVjdG9yJ1xuaW1wb3J0IFNlbnNvckJpbmRpbmdzIGZyb20gJy4vU2Vuc29yQmluZGluZ3MnXG5pbXBvcnQgTGF5ZXJBY3Rpb25zTWVudSBmcm9tICcuL0xheWVyQWN0aW9uc01lbnUnXG5pbXBvcnQgeyBzZWxlY3RMYXllcnMgfSBmcm9tICcuL2xheWVyc1NsaWNlJ1xuaW1wb3J0IENvbmZpZ01vZGFsIGZyb20gJy4vQ29uZmlnTW9kYWwnXG5cbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9zdHlsZS5tb2R1bGUuY3NzJ1xuaW1wb3J0IFByb21wdEZvckZpcnN0TGF5ZXIgZnJvbSAnLi9Qcm9tcHRGb3JGaXJzdExheWVyJ1xuaW1wb3J0IExheWVyQmluZGluZ3MgZnJvbSAnLi9MYXllckJpbmRpbmdzJ1xuaW1wb3J0IHsgUXVpY2tBc3NpZ25tZW50TW9kYWwgfSBmcm9tICcuL1F1aWNrQXNzaWduTW9kYWwnXG5pbXBvcnQgeyBMYXlvdXRDb250ZXh0IH0gZnJvbSAnLi4vLi4vQ29udGV4dHMvTGF5b3V0J1xuXG5jb25zdCBLZXltYXBFZGl0b3IgPSAoeyBzZW5zb3JzIH0pID0+IHtcbiAgY29uc3QgbGF5ZXJzID0gdXNlU2VsZWN0b3Ioc2VsZWN0TGF5ZXJzKVxuICBjb25zdCBbYWN0aXZlTGF5ZXIsIHNldEFjdGl2ZUxheWVyXSA9IHVzZVN0YXRlKDApXG4gIGNvbnN0IFtzaG93Q29uZmlnLCBzZXRTaG93Q29uZmlnXSA9IHVzZVN0YXRlKGZhbHNlKVxuICBjb25zdCBbc2hvd1F1aWNrQXNzaWduTW9kYWwsIHNldFNob3dRdWlja0Fzc2lnbk1vZGFsXSA9IHVzZVN0YXRlKGZhbHNlKVxuXG4gIGNvbnN0IGxheWVyID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oYWN0aXZlTGF5ZXIsIGxheWVycy5sZW5ndGggLSAxKSlcbiAgY29uc3QgeyBsYXlvdXQsIHdyYXBwZXJTdHlsZSB9ID0gdXNlQ29udGV4dChMYXlvdXRDb250ZXh0KVxuXG4gIGNvbnN0IG9wZW5Db25maWcgPSB1c2VDYWxsYmFjaygoKSA9PiBzZXRTaG93Q29uZmlnKHRydWUpLCBbc2V0U2hvd0NvbmZpZ10pXG4gIGNvbnN0IG9wZW5RdWlja0Fzc2lnbiA9IHVzZUNhbGxiYWNrKCgpID0+IHNldFNob3dRdWlja0Fzc2lnbk1vZGFsKHRydWUpLCBbc2V0U2hvd1F1aWNrQXNzaWduTW9kYWxdKVxuICBjb25zdCBjbG9zZVF1aWNrQXNzaWduID0gdXNlQ2FsbGJhY2soKCkgPT4gc2V0U2hvd1F1aWNrQXNzaWduTW9kYWwoZmFsc2UpLCBbc2V0U2hvd1F1aWNrQXNzaWduTW9kYWxdKVxuICBjb25zdCBhZGRpdGlvbmFsQWN0aW9ucyA9IHVzZU1lbW8oKCkgPT4gW1xuICAgIHsgY2FsbGJhY2s6IG9wZW5Db25maWcsIGNvbnRlbnQ6ICdDaGFuZ2UgQ29uZmlndXJhdGlvbicgfSxcbiAgICB7IGNhbGxiYWNrOiBvcGVuUXVpY2tBc3NpZ24sIGNvbnRlbnQ6IDw+UXVpY2sgPGNvZGU+JmtwPC9jb2RlPiBBc3NpZ25tZW50PC8+IH1cbiAgXSwgW29wZW5Db25maWcsIG9wZW5RdWlja0Fzc2lnbl0pXG5cbiAgaWYgKGxheWVycy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gPFByb21wdEZvckZpcnN0TGF5ZXIgLz5cbiAgfVxuXG4gIGNvbnN0IHsgd2lkdGgsIGhlaWdodCwgbWFyZ2luLCBwYWRkaW5nIH0gPSB3cmFwcGVyU3R5bGVcblxuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8TGF5ZXJTZWxlY3RvclxuICAgICAgICBhY3RpdmVMYXllcj17bGF5ZXJ9XG4gICAgICAgIG9uU2VsZWN0PXtzZXRBY3RpdmVMYXllcn1cbiAgICAgIC8+XG4gICAgICA8ZGl2IHN0eWxlPXt7IG1hcmdpbiwgcGFkZGluZywgd2lkdGg6ICdmaXQtY29udGVudCcgfX0+XG4gICAgICAgIDxkaXYgc3R5bGU9e3sgd2lkdGgsIGhlaWdodCB9fT5cbiAgICAgICAgICA8aDMgc3R5bGU9e3sgcG9zaXRpb246ICdyZWxhdGl2ZScgfX0+XG4gICAgICAgICAgICBLZXkgQmluZGluZ3MgeyhcbiAgICAgICAgICAgICAgPExheWVyQWN0aW9uc01lbnVcbiAgICAgICAgICAgICAgICBhY3RpdmVMYXllcj17YWN0aXZlTGF5ZXJ9XG4gICAgICAgICAgICAgICAgYWRkaXRpb25hbEFjdGlvbnM9e2FkZGl0aW9uYWxBY3Rpb25zfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICA8L2gzPlxuICAgICAgICAgIDxMYXllckJpbmRpbmdzXG4gICAgICAgICAgICBsYXlvdXQ9e2xheW91dH1cbiAgICAgICAgICAgIGFjdGl2ZUxheWVyPXtsYXllcn1cbiAgICAgICAgICAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdlxuICAgICAgICAgIGNsYXNzTmFtZT17c3R5bGVzLnNlbnNvcnN9XG4gICAgICAgICAgZGF0YS1zZW5zb3ItY291bnQ9e3NlbnNvcnMubGVuZ3RofVxuICAgICAgICAgIHN0eWxlPXt7fX1cbiAgICAgICAgPlxuICAgICAgICAgIDxTZW5zb3JCaW5kaW5nc1xuICAgICAgICAgICAgc2Vuc29ycz17c2Vuc29yc31cbiAgICAgICAgICAgIGxheWVyPXtsYXllcn1cbiAgICAgICAgICAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAge3Nob3dDb25maWcgJiYgKFxuICAgICAgICA8Q29uZmlnTW9kYWxcbiAgICAgICAgICBhY3RpdmVMYXllcj17bGF5ZXJ9XG4gICAgICAgICAgb25DbG9zZT17KCkgPT4gc2V0U2hvd0NvbmZpZyhmYWxzZSl9XG4gICAgICAgIC8+XG4gICAgICApfVxuICAgICAge3Nob3dRdWlja0Fzc2lnbk1vZGFsICYmIChcbiAgICAgICAgPFF1aWNrQXNzaWdubWVudE1vZGFsXG4gICAgICAgICAgbGF5b3V0PXtsYXlvdXR9XG4gICAgICAgICAgbGF5ZXJJbmRleD17bGF5ZXJ9XG4gICAgICAgICAgb25DbG9zZT17Y2xvc2VRdWlja0Fzc2lnbn1cbiAgICAgICAgLz5cbiAgICAgICl9XG4gICAgPC8+XG4gIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgS2V5bWFwRWRpdG9yXG4iLCJcbmV4cG9ydCBmdW5jdGlvbiBpc0NvbnRyb2xCaW5kaW5nIChiaW5kKSB7XG4gIHJldHVybiBbXG4gICAgJyZtYWNyb190YXAnLFxuICAgICcmbWFjcm9fcHJlc3MnLFxuICAgICcmbWFjcm9fcmVsZWFzZScsXG4gICAgJyZtYWNyb190YXBfdGltZScsXG4gICAgJyZtYWNyb193YWl0X3RpbWUnLFxuICAgICcmbWFjcm9fcGF1c2VfZm9yX3JlbGVhc2UnXG4gIF0uaW5jbHVkZXMoYmluZC52YWx1ZSlcbn1cbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMl0udXNlWzFdIS4vc3R5bGVzLm1vZHVsZS5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1syXS51c2VbMV0hLi9zdHlsZXMubW9kdWxlLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMl0udXNlWzFdIS4vZHJhZy1hbmQtZHJvcC5tb2R1bGUuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMl0udXNlWzFdIS4vZHJhZy1hbmQtZHJvcC5tb2R1bGUuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IGlzRXF1YWwgZnJvbSAnbG9kYXNoL2lzRXF1YWwnXG5pbXBvcnQgeyBGcmFnbWVudCwgdXNlTWVtbywgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCdcblxuaW1wb3J0IHsgaXNDb250cm9sQmluZGluZyB9IGZyb20gJy4vdXRpbCdcbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9kcmFnLWFuZC1kcm9wLm1vZHVsZS5jc3MnXG5cbmV4cG9ydCBmdW5jdGlvbiBncm91cEludG9Sb3dzIChiaW5kaW5ncykge1xuICByZXR1cm4gYmluZGluZ3MucmVkdWNlKChyb3dzLCBiaW5kLCBpKSA9PiB7XG4gICAgY29uc3QgYWRkUm93ID0gKCkgPT4gcm93cy5wdXNoKFtdKVxuICAgIGNvbnN0IGFkZFRvUm93ID0gKCkgPT4gcm93cy5hdCgtMSkucHVzaCh7IC4uLmJpbmQsIGluZGV4OiBpIH0pXG4gICAgY29uc3QgaXNSb3dFbXB0eSA9ICgpID0+IHJvd3MuYXQoLTEpLmxlbmd0aCA9PT0gMFxuICAgIGNvbnN0IGlzUm93RnVsbCA9ICgpID0+IChcbiAgICAgICghaXNSb3dFbXB0eSgpICYmIGlzQ29udHJvbEJpbmRpbmcocm93cy5hdCgtMSlbMF0pKSB8fFxuICAgICAgcm93cy5hdCgtMSkubGVuZ3RoID09PSA2XG4gICAgKVxuXG4gICAgaWYgKGlzQ29udHJvbEJpbmRpbmcoYmluZCkgJiYgIWlzUm93RW1wdHkoKSkge1xuICAgICAgYWRkUm93KClcbiAgICB9IGVsc2UgaWYgKGlzUm93RnVsbCgpKSB7XG4gICAgICBhZGRSb3coKVxuICAgIH1cblxuICAgIGFkZFRvUm93KClcblxuICAgIHJldHVybiByb3dzXG4gIH0sIFtbXV0pXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBEcm9wWm9uZUNvbnRhaW5lciAoeyBiaW5kaW5ncywgY2hpbGRyZW4sIGRyYWdnaW5nLCBkcmFnTW9kZSwgLi4ucmVzdCB9KSB7XG4gIGNvbnN0IFtjdXJyZW50VGFyZ2V0LCBzZXRDdXJyZW50VGFyZ2V0XSA9IHVzZVN0YXRlKFtudWxsLCBudWxsXSlcbiAgY29uc3QgYmluZGluZ1Jvd3MgPSB1c2VNZW1vKFxuICAgICgpID0+IGdyb3VwSW50b1Jvd3MoYmluZGluZ3MpLFxuICAgIFtiaW5kaW5nc11cbiAgKVxuXG4gIGZ1bmN0aW9uIGhhbmRsZURyYWdFbnRlciAodGFyZ2V0KSB7XG4gICAgY29uc29sZS5sb2coJ2VudGVyJywgdGFyZ2V0KVxuICAgIHNldEN1cnJlbnRUYXJnZXQoKCkgPT4gdGFyZ2V0KVxuICB9XG5cbiAgZnVuY3Rpb24gaXNDdXJyZW50VGFyZ2V0ICh0YXJnZXQpIHtcbiAgICByZXR1cm4gaXNFcXVhbChjdXJyZW50VGFyZ2V0LCB0YXJnZXQpXG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVEcmFnTGVhdmUgKHRhcmdldCkge1xuICAgIHNldEN1cnJlbnRUYXJnZXQoc3RhdGUgPT4ge1xuICAgICAgY29uc29sZS5sb2coJ2xlYXZpbmcnLCB0YXJnZXQsICdjdXJyZW50bHkgaW4nLCBzdGF0ZSlcbiAgICAgIHJldHVybiBpc0VxdWFsKHN0YXRlLCB0YXJnZXQpID8gW251bGwsIG51bGxdIDogc3RhdGVcbiAgICB9KVxuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlRHJvcCAoKSB7XG4gICAgY29uc29sZS5sb2coJ2hhbmRsZURyb3AnLCBjdXJyZW50VGFyZ2V0KVxuICAgIGNvbnN0IFtyb3csIGNvbCwgaGFsZl0gPSBjdXJyZW50VGFyZ2V0XG4gICAgY29uc3QgeyBpbmRleCB9ID0gYmluZGluZ1Jvd3Nbcm93XVtjb2xdXG4gICAgY29uc3QgbmV4dCA9IGluZGV4IDwgYmluZGluZ3MubGVuZ3RoIC0gMVxuICAgICAgPyBpbmRleCArIDFcbiAgICAgIDogLTFcblxuICAgIHJlc3Qub25Ecm9wKGhhbGYgPT09IDEgPyBuZXh0IDogaW5kZXgpXG4gIH1cblxuICByZXR1cm4gZHJhZ2dpbmcgJiYgKFxuICAgIDxkaXYgY2xhc3NOYW1lPXtbXG4gICAgICBzdHlsZXMuZHJvcFRhcmdldHMsXG4gICAgICBkcmFnZ2luZyA/IHN0eWxlcy5kcmFnZ2luZyA6ICcnLFxuICAgICAgZHJhZ01vZGUgPT09ICdyb3cnID8gc3R5bGVzLmRyb3BSb3dPbmx5IDogJydcbiAgICBdLmpvaW4oJyAnKX0+XG4gICAgICB7YmluZGluZ1Jvd3MubWFwKChyb3csIGkpID0+IChcbiAgICAgICAgPEZyYWdtZW50IGtleT17aX0+XG4gICAgICAgICAgPERyb3Bab25lUm93XG4gICAgICAgICAgICByb3c9e3Jvd31cbiAgICAgICAgICAgIGlzRHJvcHBpbmc9e2lzQ3VycmVudFRhcmdldChbaSwgMCwgLTFdKX1cbiAgICAgICAgICAgIG9uRHJhZ0VudGVyPXsoKSA9PiBoYW5kbGVEcmFnRW50ZXIoW2ksIDAsIC0xXSl9XG4gICAgICAgICAgICBvbkRyYWdMZWF2ZT17KCkgPT4gaGFuZGxlRHJhZ0xlYXZlKFtpLCAwLCAtMV0pfVxuICAgICAgICAgICAgb25Ecm9wPXtoYW5kbGVEcm9wfVxuICAgICAgICAgIC8+XG4gICAgICAgICAge3Jvdy5tYXAoKGJpbmQsIGopID0+IChcbiAgICAgICAgICAgIDxGcmFnbWVudCBrZXk9e2p9PlxuICAgICAgICAgICAgICA8RHJvcFpvbmVCZWZvcmVcbiAgICAgICAgICAgICAgICBiaW5kPXtiaW5kfVxuICAgICAgICAgICAgICAgIGlzRHJvcHBpbmc9e2lzQ3VycmVudFRhcmdldChbaSwgaiwgMF0pfVxuICAgICAgICAgICAgICAgIG9uRHJhZ0VudGVyPXsoKSA9PiBoYW5kbGVEcmFnRW50ZXIoW2ksIGosIDBdKX1cbiAgICAgICAgICAgICAgICBvbkRyYWdMZWF2ZT17KCkgPT4gaGFuZGxlRHJhZ0xlYXZlKFtpLCBqLCAwXSl9XG4gICAgICAgICAgICAgICAgb25Ecm9wPXtoYW5kbGVEcm9wfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8RHJvcFpvbmVBZnRlclxuICAgICAgICAgICAgICAgIGJpbmQ9e2JpbmR9XG4gICAgICAgICAgICAgICAgaXNEcm9wcGluZz17aXNDdXJyZW50VGFyZ2V0KFtpLCBqLCAxXSl9XG4gICAgICAgICAgICAgICAgb25EcmFnRW50ZXI9eygpID0+IGhhbmRsZURyYWdFbnRlcihbaSwgaiwgMV0pfVxuICAgICAgICAgICAgICAgIG9uRHJhZ0xlYXZlPXsoKSA9PiBoYW5kbGVEcmFnTGVhdmUoW2ksIGosIDFdKX1cbiAgICAgICAgICAgICAgICBvbkRyb3A9e2hhbmRsZURyb3B9XG4gICAgICAgICAgICAgICAgZGF0YS1leHRlbmQ9e1xuICAgICAgICAgICAgICAgICAgIWlzQ29udHJvbEJpbmRpbmcoYmluZCkgJiYgaiA9PT0gcm93Lmxlbmd0aCAtIDFcbiAgICAgICAgICAgICAgICAgICAgPyBNYXRoLm1heCgwLCA1IC0gailcbiAgICAgICAgICAgICAgICAgICAgOiAwXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9GcmFnbWVudD5cbiAgICAgICAgICApKX1cbiAgICAgICAgPC9GcmFnbWVudD5cbiAgICAgICkpfVxuICAgICAgPERyb3Bab25lUm93XG4gICAgICAgIHJvdz17YmluZGluZ1Jvd3MubGVuZ3RoIC0gMX1cbiAgICAgICAgaXNEcm9wcGluZz17aXNDdXJyZW50VGFyZ2V0KFtiaW5kaW5nUm93cy5sZW5ndGggLSAxLCBiaW5kaW5nUm93cy5hdCgtMSkubGVuZ3RoIC0gMSwgMV0pfVxuICAgICAgICBvbkRyYWdFbnRlcj17KCkgPT4gaGFuZGxlRHJhZ0VudGVyKFtiaW5kaW5nUm93cy5sZW5ndGggLSAxLCBiaW5kaW5nUm93cy5hdCgtMSkubGVuZ3RoIC0gMSwgMV0pfVxuICAgICAgICBvbkRyYWdMZWF2ZT17KCkgPT4gaGFuZGxlRHJhZ0xlYXZlKFtiaW5kaW5nUm93cy5sZW5ndGggLSAxLCBiaW5kaW5nUm93cy5hdCgtMSkubGVuZ3RoIC0gMSwgMV0pfVxuICAgICAgICBvbkRyb3A9e2hhbmRsZURyb3B9XG4gICAgICAvPlxuICAgIDwvZGl2PlxuICApXG59XG5cbmZ1bmN0aW9uIERyb3Bab25lICh7IGlzRHJvcHBpbmcsIGNvbnRyb2wgPSBmYWxzZSwgY2xhc3NlcyA9IFtdLCAuLi5yZXN0IH0pIHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2XG4gICAgICBkYXRhLWlzLWNvbnRyb2w9e2NvbnRyb2x9XG4gICAgICBjbGFzc05hbWU9e1tcbiAgICAgICAgc3R5bGVzLmRyb3BUYXJnZXRIYWxmLFxuICAgICAgICBpc0Ryb3BwaW5nID8gc3R5bGVzLmRyb3BwYWJsZSA6ICcnLFxuICAgICAgICAuLi5jbGFzc2VzXG4gICAgICBdLmpvaW4oJyAnKX1cbiAgICAgIHsuLi5yZXN0fVxuICAgIC8+XG4gIClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIERyb3Bab25lQmVmb3JlICh7IGJpbmQsIC4uLnJlc3QgfSkge1xuICByZXR1cm4gKFxuICAgIDxEcm9wWm9uZSBjb250cm9sPXtpc0NvbnRyb2xCaW5kaW5nKGJpbmQpfSB7Li4ucmVzdH0gLz5cbiAgKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gRHJvcFpvbmVBZnRlciAoeyBiaW5kLCAuLi5yZXN0IH0pIHtcbiAgcmV0dXJuIChcbiAgICA8RHJvcFpvbmUgY29udHJvbD17aXNDb250cm9sQmluZGluZyhiaW5kKX0gY2xhc3Nlcz17W3N0eWxlcy5zZWNvbmRIYWxmXX0gey4uLnJlc3R9IC8+XG4gIClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIERyb3Bab25lUm93ICh7IHJvdywgaXNEcm9wcGluZywgLi4ucmVzdCB9KSB7XG4gIHJldHVybiAoXG4gICAgPGRpdlxuICAgICAgZGF0YS1kcm9wLW1vZGU9XCJyb3dcIlxuICAgICAgY2xhc3NOYW1lPXtbXG4gICAgICAgIHN0eWxlcy5kcm9wVGFyZ2V0Um93LFxuICAgICAgICBpc0Ryb3BwaW5nID8gc3R5bGVzLmRyb3BwYWJsZSA6ICcnXG4gICAgICBdLmpvaW4oJyAnKX1cbiAgICAgIHsuLi5yZXN0fVxuICAgIC8+XG4gIClcbn1cbiIsImltcG9ydCB7IEZyYWdtZW50LCB1c2VDYWxsYmFjaywgdXNlQ29udGV4dCwgdXNlTWVtbywgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCdcblxuaW1wb3J0IE1vZGFsIGZyb20gJy4uLy4uL0NvbW1vbi9Nb2RhbCdcbmltcG9ydCBEaWFsb2dCb3ggZnJvbSAnLi4vLi4vQ29tbW9uL0RpYWxvZ0JveCdcbmltcG9ydCBLZXlXcmFwcGVyIGZyb20gJy4uL0tleXMvS2V5V3JhcHBlcidcbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9zdHlsZXMubW9kdWxlLmNzcydcbmltcG9ydCB7IGh5ZHJhdGVUcmVlIH0gZnJvbSAnLi4vQmluZGluZy91dGlsJ1xuaW1wb3J0IHsgU2VhcmNoQ29udGV4dCB9IGZyb20gJy4uLy4uL3Byb3ZpZGVycydcbmltcG9ydCBLZXljb2RlQmluZE5vZGUgZnJvbSAnLi4vLi4vRW5oYW5jZWRQaWNrZXJzL0tleWNvZGUvS2V5Y29kZUJpbmROb2RlJ1xuaW1wb3J0IEFjdGlvbkJ1dHRvbiBmcm9tICcuLi8uLi9Db21tb24vQWN0aW9uQnV0dG9uJ1xuXG5jb25zdCBzaW5nbGVWYWx1ZSA9IHZhbHVlID0+ICh7IHZhbHVlOiAnJmtwJywgcGFyYW1zOiBbeyB2YWx1ZSwgcGFyYW1zOiBbXSB9XSB9KVxuXG5jb25zdCBwYXR0ZXJuTWFwcGluZ3MgPSBbXG4gIHsgcGF0dGVybjogL1swLTldLywgY29udmVydDogZGlnaXQgPT4gc2luZ2xlVmFsdWUoYE4ke2RpZ2l0fWApIH0sXG4gIHsgcGF0dGVybjogL1thLXpdLywgY29udmVydDogY2hhciA9PiBzaW5nbGVWYWx1ZShjaGFyLnRvVXBwZXJDYXNlKCkpIH0sXG4gIHtcbiAgICBwYXR0ZXJuOiAvW0EtWl0vLFxuICAgIGNvbnZlcnQ6IGNoYXIgPT4gKHtcbiAgICAgIHZhbHVlOiAnJmtwJyxcbiAgICAgIHBhcmFtczogW3tcbiAgICAgICAgdmFsdWU6ICdMUycsXG4gICAgICAgIHBhcmFtczogW3tcbiAgICAgICAgICB2YWx1ZTogY2hhci50b1VwcGVyQ2FzZSgpLFxuICAgICAgICAgIHBhcmFtczogW11cbiAgICAgICAgfV1cbiAgICAgIH1dXG4gICAgfSlcbiAgfVxuXVxuXG5jb25zdCBzaW1wbGVNYXBwaW5ncyA9IHtcbiAgJyEnOiBzaW5nbGVWYWx1ZSgnRVhDTCcpLFxuICAnQCc6IHNpbmdsZVZhbHVlKCdBVCcpLFxuICAnIyc6IHNpbmdsZVZhbHVlKCdQT1VORCcpLFxuICAkOiBzaW5nbGVWYWx1ZSgnRExMUicpLFxuICAnJSc6IHNpbmdsZVZhbHVlKCdQUkNOVCcpLFxuICAnXic6IHNpbmdsZVZhbHVlKCdDQVJFVCcpLFxuICAnJic6IHNpbmdsZVZhbHVlKCdBTVBTJyksXG4gICcqJzogc2luZ2xlVmFsdWUoJ1NUQVInKSxcbiAgJygnOiBzaW5nbGVWYWx1ZSgnTFBBUicpLFxuICAnKSc6IHNpbmdsZVZhbHVlKCdSUEFSJyksXG4gICdcXG4nOiBzaW5nbGVWYWx1ZSgnUkVUJyksXG4gICcgJzogc2luZ2xlVmFsdWUoJ1NQQUNFJyksXG4gICctJzogc2luZ2xlVmFsdWUoJ01JTlVTJyksXG4gIF86IHNpbmdsZVZhbHVlKCdVTkRFUicpLFxuICAnPSc6IHNpbmdsZVZhbHVlKCdFUVVBTCcpLFxuICAnKyc6IHNpbmdsZVZhbHVlKCdQTFVTJyksXG4gICdbJzogc2luZ2xlVmFsdWUoJ0xCS1QnKSxcbiAgJ10nOiBzaW5nbGVWYWx1ZSgnTEJSQycpLFxuICAneyc6IHNpbmdsZVZhbHVlKCdSQktUJyksXG4gICd9Jzogc2luZ2xlVmFsdWUoJ1JCUkMnKSxcbiAgJ1xcXFwnOiBzaW5nbGVWYWx1ZSgnQlNMSCcpLFxuICAnfCc6IHNpbmdsZVZhbHVlKCdQSVBFJyksXG4gICcnOiBzaW5nbGVWYWx1ZSgnVElMREUyJyksXG4gICc7Jzogc2luZ2xlVmFsdWUoJ1NFTUknKSxcbiAgJzonOiBzaW5nbGVWYWx1ZSgnQ09MT04nKSxcbiAgJ1xcJyc6IHNpbmdsZVZhbHVlKCdTUVQnKSxcbiAgJ1wiJzogc2luZ2xlVmFsdWUoJ0RRVCcpLFxuICAnYCc6IHNpbmdsZVZhbHVlKCdHUkFWRScpLFxuICAnfic6IHNpbmdsZVZhbHVlKCdUSUxERScpLFxuICAnLCc6IHNpbmdsZVZhbHVlKCdDT01NQScpLFxuICAnPCc6IHNpbmdsZVZhbHVlKCdMVCcpLFxuICAnLic6IHNpbmdsZVZhbHVlKCdET1QnKSxcbiAgJz4nOiBzaW5nbGVWYWx1ZSgnR1QnKSxcbiAgJy8nOiBzaW5nbGVWYWx1ZSgnRlNMSCcpLFxuICAnPyc6IHNpbmdsZVZhbHVlKCdRTUFSSycpXG59XG5cbmZ1bmN0aW9uIG1hcENoYXJhY3RlciAoY2hhcikge1xuICBpZiAoc2ltcGxlTWFwcGluZ3NbY2hhcl0pIHtcbiAgICByZXR1cm4gc2ltcGxlTWFwcGluZ3NbY2hhcl1cbiAgfVxuXG4gIGZvciAoY29uc3QgeyBwYXR0ZXJuLCBjb252ZXJ0IH0gb2YgcGF0dGVybk1hcHBpbmdzKSB7XG4gICAgaWYgKGNoYXIubWF0Y2gocGF0dGVybikpIHtcbiAgICAgIHJldHVybiBjb252ZXJ0KGNoYXIpXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIFNlcXVlbmNlTW9kYWwgKHsgb25DbG9zZSB9KSB7XG4gIGNvbnN0IHsgc291cmNlcywgbWVyZ2VkR2x5cGhzIH0gPSB1c2VDb250ZXh0KFNlYXJjaENvbnRleHQpXG4gIGNvbnN0IFtzdHJpbmcsIHNldFN0cmluZ10gPSB1c2VTdGF0ZSgnVHlwZSBzb21ldGhpbmcuLi4nKVxuICBjb25zdCBzZXF1ZW5jZSA9IHVzZU1lbW8oKCkgPT4ge1xuICAgIHJldHVybiBzdHJpbmcuc3BsaXQoJycpLnJlZHVjZSgoc2VxdWVuY2UsIGNoYXIpID0+IHtcbiAgICAgIGNvbnN0IG1hcHBlZCA9IG1hcENoYXJhY3RlcihjaGFyKVxuICAgICAgaWYgKG1hcHBlZCkge1xuICAgICAgICBzZXF1ZW5jZS5wdXNoKG1hcHBlZClcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNlcXVlbmNlXG4gICAgfSwgW10pXG4gIH0sIFtzdHJpbmddKVxuXG4gIGNvbnN0IGJpbmRpbmdzID0gc2VxdWVuY2UubWFwKCh7IHZhbHVlLCBwYXJhbXMgfSkgPT4gaHlkcmF0ZVRyZWUoXG4gICAgdmFsdWUsXG4gICAgcGFyYW1zLFxuICAgIHNvdXJjZXMsXG4gICAgdW5kZWZpbmVkLFxuICAgIG1lcmdlZEdseXBoc1xuICApKVxuXG4gIGNvbnN0IGZvY3VzSW5wdXQgPSB1c2VDYWxsYmFjayhub2RlID0+IHtcbiAgICBpZiAobm9kZSkge1xuICAgICAgbm9kZS5mb2N1cygpXG4gICAgICBub2RlLnNlbGVjdCgpXG4gICAgfVxuICB9LCBbXSlcblxuICByZXR1cm4gKFxuICAgIDxNb2RhbD5cbiAgICAgIDxEaWFsb2dCb3ggZGlzbWlzc1RleHQ9e2ZhbHNlfT5cbiAgICAgICAgPGgyPkNyZWF0ZSBUeXBpbmcgU2VxdWVuY2U8L2gyPlxuICAgICAgICA8cD5UeXBlIGEgbWVzc2FnZSB0byBnZW5lcmF0ZSBhIHNlcXVlbmNlIG9mIGJpbmRpbmdzIGluIHRoZSBtYWNyby48L3A+XG5cbiAgICAgICAgPHRleHRhcmVhXG4gICAgICAgICAgdmFsdWU9e3N0cmluZ31cbiAgICAgICAgICByZWY9e2ZvY3VzSW5wdXR9XG4gICAgICAgICAgc3R5bGU9e3sgd2lkdGg6ICcxMDAlJywgaGVpZ2h0OiAnNnJlbScgfX1cbiAgICAgICAgICBvbkNoYW5nZT17ZSA9PiBzZXRTdHJpbmcoZS50YXJnZXQudmFsdWUpfVxuICAgICAgICAvPlxuXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMubWFjcm9CaW5kaW5nc30+XG4gICAgICAgICAge2JpbmRpbmdzLm1hcCgoYmluZCwgaSkgPT4gKFxuICAgICAgICAgICAgPEZyYWdtZW50IGtleT17aX0+XG4gICAgICAgICAgICAgIDxLZXlXcmFwcGVyIHNlbGVjdGFibGU9e2ZhbHNlfT5cbiAgICAgICAgICAgICAgICA8S2V5Y29kZUJpbmROb2RlXG4gICAgICAgICAgICAgICAgICBub2RlPXtiaW5kLnBhcmFtc1swXX1cbiAgICAgICAgICAgICAgICAgIG9uU2VsZWN0PXsoKSA9PiB7fX1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8L0tleVdyYXBwZXI+XG4gICAgICAgICAgICA8L0ZyYWdtZW50PlxuICAgICAgICAgICkpfVxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLm1hY3JvQWN0aW9uc30+XG4gICAgICAgICAgPEFjdGlvbkJ1dHRvbiBvbkNsaWNrPXsoKSA9PiBvbkNsb3NlKGJpbmRpbmdzKX0+QWRkIHRvIG1hY3JvPC9BY3Rpb25CdXR0b24+XG4gICAgICAgICAgPEFjdGlvbkJ1dHRvbiBvbkNsaWNrPXsoKSA9PiBvbkNsb3NlKFtdKX0gc2Vjb25kYXJ5PkNhbmNlbDwvQWN0aW9uQnV0dG9uPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvRGlhbG9nQm94PlxuICAgIDwvTW9kYWw+XG4gIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgU2VxdWVuY2VNb2RhbFxuIiwiaW1wb3J0IHsgY3JlYXRlU2xpY2UgfSBmcm9tICdAcmVkdXhqcy90b29sa2l0J1xuXG5pbXBvcnQgeyByZXBvc2l0aW9uRWxlbWVudCB9IGZyb20gJy4uLy4uL3JlZHVjZXItdXRpbCdcblxuZXhwb3J0IGNvbnN0IHNlbGVjdE1hY3JvcyA9IHN0YXRlID0+IHN0YXRlLmtleWJvYXJkLmtleW1hcC5tYWNyb3NcblxuY29uc3QgbWFjcm9zU2xpY2UgPSBjcmVhdGVTbGljZSh7XG4gIG5hbWU6ICdtYWNyb3MnLFxuICBpbml0aWFsU3RhdGU6IFtdLFxuICByZWR1Y2Vyczoge1xuICAgIGFkZE1hY3JvIChzdGF0ZSkge1xuICAgICAgc3RhdGUucHVzaCh7XG4gICAgICAgIGlkZW50aWZpZXI6ICduZXdfbWFjcm8nLFxuICAgICAgICBsYWJlbDogJ25ld19tYWNybycsXG4gICAgICAgIGJpbmRpbmdzOiBbXVxuICAgICAgfSlcbiAgICB9LFxuICAgIHJlbmFtZU1hY3JvIChzdGF0ZSwgYWN0aW9uKSB7XG4gICAgICBzdGF0ZVthY3Rpb24ucGF5bG9hZC5pbmRleF0uaWRlbnRpZmllciA9IGFjdGlvbi5wYXlsb2FkLm5hbWVcbiAgICB9LFxuICAgIGRlbGV0ZU1hY3JvIChzdGF0ZSwgYWN0aW9uKSB7XG4gICAgICBzdGF0ZS5zcGxpY2UoYWN0aW9uLnBheWxvYWQuaW5kZXgsIDEpXG4gICAgfSxcbiAgICBhZGRNYWNyb0NvbnRyb2xCaW5kaW5nIChzdGF0ZSwgYWN0aW9uKSB7XG4gICAgICBzdGF0ZVthY3Rpb24ucGF5bG9hZC5tYWNyb0luZGV4XS5iaW5kaW5ncy5wdXNoKHtcbiAgICAgICAgdmFsdWU6ICcmbWFjcm9fcHJlc3MnLFxuICAgICAgICBwYXJhbXM6IFtdXG4gICAgICB9KVxuICAgIH0sXG4gICAgYWRkTWFjcm9LZXlCaW5kaW5nIChzdGF0ZSwgYWN0aW9uKSB7XG4gICAgICBzdGF0ZVthY3Rpb24ucGF5bG9hZC5tYWNyb0luZGV4XS5iaW5kaW5ncy5wdXNoKGFjdGlvbi5wYXlsb2FkLmJpbmRpbmcpXG4gICAgfSxcbiAgICB1cGRhdGVNYWNyb0JpbmRpbmcgKHN0YXRlLCBhY3Rpb24pIHtcbiAgICAgIHN0YXRlW2FjdGlvbi5wYXlsb2FkLm1hY3JvSW5kZXhdLmJpbmRpbmdzW2FjdGlvbi5wYXlsb2FkLmJpbmRJbmRleF0gPSBhY3Rpb24ucGF5bG9hZC5iaW5kaW5nXG4gICAgfSxcbiAgICByZW9yZGVyTWFjcm9CaW5kaW5nIChzdGF0ZSwgYWN0aW9uKSB7XG4gICAgICBzdGF0ZVthY3Rpb24ucGF5bG9hZC5tYWNyb0luZGV4XS5iaW5kaW5ncyA9IHJlcG9zaXRpb25FbGVtZW50KFxuICAgICAgICBzdGF0ZVthY3Rpb24ucGF5bG9hZC5tYWNyb0luZGV4XS5iaW5kaW5ncyxcbiAgICAgICAgYWN0aW9uLnBheWxvYWQuYmluZEluZGV4LFxuICAgICAgICBhY3Rpb24ucGF5bG9hZC50YXJnZXRJbmRleFxuICAgICAgKVxuICAgIH0sXG4gICAgZGVsZXRlTWFjcm9CaW5kaW5nIChzdGF0ZSwgYWN0aW9uKSB7XG4gICAgICBzdGF0ZVthY3Rpb24ucGF5bG9hZC5tYWNyb0luZGV4XS5iaW5kaW5ncy5zcGxpY2UoYWN0aW9uLnBheWxvYWQuYmluZEluZGV4LCAxKVxuICAgIH0sXG4gICAgY3VzdG9taXplTWFjcm9PcHRpb25zIChzdGF0ZSwgYWN0aW9uKSB7XG4gICAgICBPYmplY3QuYXNzaWduKHN0YXRlW2FjdGlvbi5wYXlsb2FkLm1hY3JvSW5kZXhdLCBhY3Rpb24ucGF5bG9hZC5vcHRpb25zKVxuICAgIH1cbiAgfVxufSlcblxuZXhwb3J0IGNvbnN0IHtcbiAgYWRkTWFjcm8sXG4gIHJlbmFtZU1hY3JvLFxuICBkZWxldGVNYWNybyxcbiAgYWRkTWFjcm9Db250cm9sQmluZGluZyxcbiAgYWRkTWFjcm9LZXlCaW5kaW5nLFxuICB1cGRhdGVNYWNyb0JpbmRpbmcsXG4gIHJlb3JkZXJNYWNyb0JpbmRpbmcsXG4gIGRlbGV0ZU1hY3JvQmluZGluZyxcbiAgY3VzdG9taXplTWFjcm9PcHRpb25zXG59ID0gbWFjcm9zU2xpY2UuYWN0aW9uc1xuXG5leHBvcnQgZGVmYXVsdCBtYWNyb3NTbGljZS5yZWR1Y2VyXG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJ1xuXG5pbXBvcnQgeyBpc0NvbnRyb2xCaW5kaW5nIH0gZnJvbSAnLi91dGlsJ1xuaW1wb3J0IHN0eWxlcyBmcm9tICcuL3N0eWxlcy5tb2R1bGUuY3NzJ1xuaW1wb3J0IHsgRHJvcFpvbmVDb250YWluZXIgfSBmcm9tICcuL0RyYWdBbmREcm9wJ1xuaW1wb3J0IFNlcXVlbmNlTW9kYWwgZnJvbSAnLi9TZXF1ZW5jZU1vZGFsJ1xuXG5pbXBvcnQgS2V5IGZyb20gJy4uL0tleXMvS2V5J1xuaW1wb3J0IEtleVdyYXBwZXIgZnJvbSAnLi4vS2V5cy9LZXlXcmFwcGVyJ1xuXG5pbXBvcnQgQWN0aW9uQnV0dG9uIGZyb20gJy4uLy4uL0NvbW1vbi9BY3Rpb25CdXR0b24nXG5pbXBvcnQgSWNvbiBmcm9tICcuLi8uLi9Db21tb24vSWNvbidcbmltcG9ydCB7IHN0b3AgfSBmcm9tICcuLi8uLi9ldmVudC11dGlsJ1xuXG5pbXBvcnQge1xuICBhZGRNYWNyb0NvbnRyb2xCaW5kaW5nLFxuICBhZGRNYWNyb0tleUJpbmRpbmcsXG4gIGRlbGV0ZU1hY3JvQmluZGluZyxcbiAgcmVvcmRlck1hY3JvQmluZGluZywgdXBkYXRlTWFjcm9CaW5kaW5nXG59IGZyb20gJy4vbWFjcm9zU2xpY2UnXG5cbmZ1bmN0aW9uIE1hY3JvQmluZHMgKHByb3BzKSB7XG4gIGNvbnN0IHsgbWFjcm9JbmRleCwgYmluZGluZ3MsIGRpc3BhdGNoIH0gPSBwcm9wc1xuICBjb25zdCBbZHJhZ2dpbmcsIHNldERyYWdnaW5nXSA9IHVzZVN0YXRlKG51bGwpXG4gIGNvbnN0IFtzZXF1ZW5jZU1vZGFsT3Blbiwgc2V0U2VxdWVuY2VNb2RhbE9wZW5dID0gdXNlU3RhdGUoZmFsc2UpXG5cbiAgZnVuY3Rpb24gaGFuZGxlRHJhZ1N0YXJ0IChldmVudCwgaW5kZXgpIHtcbiAgICBpZiAoZXZlbnQuZGF0YVRyYW5zZmVyLml0ZW1zLmxlbmd0aCkge1xuICAgICAgZXZlbnQuZGF0YVRyYW5zZmVyLmNsZWFyRGF0YSgpXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjb25zdCBiaW5kaW5nID0gYmluZGluZ3NbaW5kZXhdXG4gICAgc2V0RHJhZ2dpbmcoe1xuICAgICAgaW5kZXgsXG4gICAgICBtb2RlOiBpc0NvbnRyb2xCaW5kaW5nKGJpbmRpbmcpID8gJ3JvdycgOiAnY29sJyxcbiAgICAgIGlzQ29udHJvbEJpbmRpbmc6IGlzQ29udHJvbEJpbmRpbmcoYmluZGluZylcbiAgICB9KVxuICB9XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBmdW5jdGlvbiBjbGVhckRyb3AgKCkge1xuICAgICAgc2V0RHJhZ2dpbmcobnVsbClcbiAgICB9XG4gICAgZnVuY3Rpb24gY2xlYXJEcmFnIChldmVudCkge1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKClcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICB9XG5cbiAgICBkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoJ2Ryb3AnLCBjbGVhckRyb3ApXG4gICAgZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKCdkcmFnb3ZlcicsIGNsZWFyRHJhZylcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKCdkcm9wJywgY2xlYXJEcm9wKVxuICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKCdkcmFnb3ZlcicsIGNsZWFyRHJhZylcbiAgICB9XG4gIH0sIFtzZXREcmFnZ2luZ10pXG5cbiAgZnVuY3Rpb24gaGFuZGxlRHJvcCAodGFyZ2V0SW5kZXgpIHtcbiAgICBkaXNwYXRjaChyZW9yZGVyTWFjcm9CaW5kaW5nKHtcbiAgICAgIG1hY3JvSW5kZXgsXG4gICAgICBiaW5kSW5kZXg6IGRyYWdnaW5nLmluZGV4LFxuICAgICAgdGFyZ2V0SW5kZXhcbiAgICB9KSlcbiAgICBzZXREcmFnZ2luZyhudWxsKVxuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5tYWNyb0JpbmRpbmdzfT5cbiAgICAgICAge2JpbmRpbmdzLm1hcCgoYmluZCwgaSkgPT4gKFxuICAgICAgICAgIDxSZWFjdC5GcmFnbWVudCBrZXk9e2l9PlxuICAgICAgICAgICAgPEtleVdyYXBwZXJcbiAgICAgICAgICAgICAga2V5PXtpfVxuICAgICAgICAgICAgICBkYXRhLWluZGV4PXtpfVxuICAgICAgICAgICAgICB0aGVtZUNsYXNzPXtpc0NvbnRyb2xCaW5kaW5nKGJpbmQpID8gc3R5bGVzLmNvbnRyb2xCaW5kaW5nIDogJyd9XG4gICAgICAgICAgICAgIGRyYWdnYWJsZVxuICAgICAgICAgICAgICBvbkRyYWdTdGFydD17ZSA9PiBoYW5kbGVEcmFnU3RhcnQoZSwgaSl9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxLZXlcbiAgICAgICAgICAgICAgICBjb250ZXh0PXtpc0NvbnRyb2xCaW5kaW5nKGJpbmQpID8gJ21hY3JvcycgOiB1bmRlZmluZWR9XG4gICAgICAgICAgICAgICAgdmFsdWU9e2JpbmQudmFsdWV9XG4gICAgICAgICAgICAgICAgcGFyYW1zPXtiaW5kLnBhcmFtc31cbiAgICAgICAgICAgICAgICBvblVwZGF0ZT17dXBkYXRlZCA9PiB7XG4gICAgICAgICAgICAgICAgICBkaXNwYXRjaCh1cGRhdGVNYWNyb0JpbmRpbmcoe1xuICAgICAgICAgICAgICAgICAgICBtYWNyb0luZGV4LFxuICAgICAgICAgICAgICAgICAgICBiaW5kSW5kZXg6IGksXG4gICAgICAgICAgICAgICAgICAgIGJpbmRpbmc6IHVwZGF0ZWRcbiAgICAgICAgICAgICAgICAgIH0pKVxuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMuYWN0aW9uc30+XG4gICAgICAgICAgICAgICAgPEljb25cbiAgICAgICAgICAgICAgICAgIG5hbWU9XCJ0cmFzaFwiXG4gICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e3N0eWxlcy5kZWxldGVCaW5kfVxuICAgICAgICAgICAgICAgICAgb25DbGljaz17c3RvcCgoKSA9PiBkaXNwYXRjaChkZWxldGVNYWNyb0JpbmRpbmcoe1xuICAgICAgICAgICAgICAgICAgICBtYWNyb0luZGV4LFxuICAgICAgICAgICAgICAgICAgICBiaW5kSW5kZXg6IGlcbiAgICAgICAgICAgICAgICAgIH0pKSl9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L0tleVdyYXBwZXI+XG4gICAgICAgICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgICAgICAgKSl9XG4gICAgICAgIDxEcm9wWm9uZUNvbnRhaW5lclxuICAgICAgICAgIGRyYWdnaW5nPXtkcmFnZ2luZ31cbiAgICAgICAgICBiaW5kaW5ncz17YmluZGluZ3N9XG4gICAgICAgICAgb25Ecm9wPXtoYW5kbGVEcm9wfVxuICAgICAgICAvPlxuICAgICAgPC9kaXY+XG5cbiAgICAgIHtzZXF1ZW5jZU1vZGFsT3BlbiAmJiAoXG4gICAgICAgIDxTZXF1ZW5jZU1vZGFsIG9uQ2xvc2U9e2JpbmRpbmdzID0+IHtcbiAgICAgICAgICBzZXRTZXF1ZW5jZU1vZGFsT3BlbihmYWxzZSlcbiAgICAgICAgICBmb3IgKGNvbnN0IGJpbmRpbmcgb2YgYmluZGluZ3MpIHtcbiAgICAgICAgICAgIGRpc3BhdGNoKGFkZE1hY3JvS2V5QmluZGluZyh7XG4gICAgICAgICAgICAgIG1hY3JvSW5kZXgsXG4gICAgICAgICAgICAgIGJpbmRpbmdcbiAgICAgICAgICAgIH0pKVxuICAgICAgICAgIH1cbiAgICAgICAgfX0gLz5cbiAgICAgICl9XG5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMubWFjcm9BY3Rpb25zfT5cbiAgICAgICAgPEFjdGlvbkJ1dHRvbiBvbkNsaWNrPXsoKSA9PiBkaXNwYXRjaChhZGRNYWNyb0NvbnRyb2xCaW5kaW5nKHsgbWFjcm9JbmRleCB9KSl9PlxuICAgICAgICAgIEFkZCBDb250cm9sIEJpbmRpbmdcbiAgICAgICAgPC9BY3Rpb25CdXR0b24+XG4gICAgICAgIDxBY3Rpb25CdXR0b24gb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgIGRpc3BhdGNoKGFkZE1hY3JvS2V5QmluZGluZyh7XG4gICAgICAgICAgICBiaW5kaW5nOiB7IHZhbHVlOiAnJmtwJywgcGFyYW1zOiBbXSB9LFxuICAgICAgICAgICAgbWFjcm9JbmRleFxuICAgICAgICAgIH0pKVxuICAgICAgICB9fT5cbiAgICAgICAgICBBZGQgS2V5IEJpbmRpbmdcbiAgICAgICAgPC9BY3Rpb25CdXR0b24+XG4gICAgICAgIDxBY3Rpb25CdXR0b24gb25DbGljaz17KCkgPT4gc2V0U2VxdWVuY2VNb2RhbE9wZW4odHJ1ZSl9PlxuICAgICAgICAgIEFkZCBTdHJpbmcgU2VxdWVuY2VcbiAgICAgICAgPC9BY3Rpb25CdXR0b24+XG4gICAgICA8L2Rpdj5cbiAgICA8Lz5cbiAgKVxufVxuXG5NYWNyb0JpbmRzLnByb3BUeXBlcyA9IHtcbiAgYmluZGluZ3M6IFByb3BUeXBlcy5hcnJheS5pc1JlcXVpcmVkLFxuICBtYWNyb0luZGV4OiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWQsXG4gIGRpc3BhdGNoOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG59XG5cbmV4cG9ydCBkZWZhdWx0IE1hY3JvQmluZHNcbiIsImltcG9ydCBwaWNrIGZyb20gJ2xvZGFzaC9waWNrJ1xuaW1wb3J0IHsgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCdcblxuaW1wb3J0IE1vZGFsIGZyb20gJy4uLy4uL0NvbW1vbi9Nb2RhbCdcbmltcG9ydCBEaWFsb2dCb3ggZnJvbSAnLi4vLi4vQ29tbW9uL0RpYWxvZ0JveCdcbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9zdHlsZXMubW9kdWxlLmNzcydcblxuZnVuY3Rpb24gQ29uZmlnTW9kYWwgKHsgbWFjcm8sIG9uVXBkYXRlIH0pIHtcbiAgY29uc3QgW3BlbmRpbmcsIHNldFBlbmRpbmddID0gdXNlU3RhdGUocGljayhtYWNybywgW1xuICAgICdsYWJlbCcsXG4gICAgJ3dhaXRNcycsXG4gICAgJ3RhcE1zJ1xuICBdKSlcblxuICBmdW5jdGlvbiBoYW5kbGVDb25maXJtICgpIHtcbiAgICBvblVwZGF0ZShwZW5kaW5nKVxuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8TW9kYWw+XG4gICAgICA8RGlhbG9nQm94IG9uRGlzbWlzcz17aGFuZGxlQ29uZmlybX0+XG4gICAgICAgIDxoMj5DdXN0b21pemUgWzxjb2RlPnttYWNyby5pZGVudGlmaWVyfTwvY29kZT5dPC9oMj5cbiAgICAgICAgPGRpdj5cblxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMuZmllbGR9PlxuICAgICAgICAgICAgPGxhYmVsIGh0bWxGb3I9XCJjdXN0b21pemUtbWFjcm8tbGFiZWxcIj5cbiAgICAgICAgICAgICAgTGFiZWxcbiAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgaWQ9XCJjdXN0b21pemUtbWFjcm8tbGFiZWxcIlxuICAgICAgICAgICAgICB2YWx1ZT17cGVuZGluZy5sYWJlbH1cbiAgICAgICAgICAgICAgb25DaGFuZ2U9e2V2ZW50ID0+IChcbiAgICAgICAgICAgICAgICBzZXRQZW5kaW5nKHN0YXRlID0+ICh7XG4gICAgICAgICAgICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgICAgICAgICAgIGxhYmVsOiBldmVudC50YXJnZXQudmFsdWVcbiAgICAgICAgICAgICAgICB9KSlcbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLmZpZWxkfT5cbiAgICAgICAgICAgIDxsYWJlbCBodG1sRm9yPVwiY3VzdG9taXplLW1hY3JvLXdhaXRcIj5cbiAgICAgICAgICAgICAgV2FpdCAobXMpXG4gICAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgIGlkPVwiY3VzdG9taXplLW1hY3JvLXdhaXRcIlxuICAgICAgICAgICAgICB0eXBlPVwibnVtYmVyXCJcbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJEZWZhdWx0XCJcbiAgICAgICAgICAgICAgdmFsdWU9e3BlbmRpbmcud2FpdE1zfVxuICAgICAgICAgICAgICBvbkNoYW5nZT17ZXZlbnQgPT4gKFxuICAgICAgICAgICAgICAgIHNldFBlbmRpbmcoc3RhdGUgPT4gKHtcbiAgICAgICAgICAgICAgICAgIC4uLnN0YXRlLFxuICAgICAgICAgICAgICAgICAgd2FpdE1zOiBldmVudC50YXJnZXQudmFsdWUgPT09ICcnXG4gICAgICAgICAgICAgICAgICAgID8gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgICAgIDogTnVtYmVyKGV2ZW50LnRhcmdldC52YWx1ZSlcbiAgICAgICAgICAgICAgICB9KSlcbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLmZpZWxkfT5cbiAgICAgICAgICAgIDxsYWJlbCBodG1sRm9yPVwiY3VzdG9taXplLW1hY3JvLXRhcFwiPlxuICAgICAgICAgICAgICBUYXAgKG1zKVxuICAgICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgICBpZD1cImN1c3RvbWl6ZS1tYWNyby10YXBcIlxuICAgICAgICAgICAgICB0eXBlPVwibnVtYmVyXCJcbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJEZWZhdWx0XCJcbiAgICAgICAgICAgICAgdmFsdWU9e3BlbmRpbmcudGFwTXN9XG4gICAgICAgICAgICAgIG9uQ2hhbmdlPXtldmVudCA9PiAoXG4gICAgICAgICAgICAgICAgc2V0UGVuZGluZyhzdGF0ZSA9PiAoe1xuICAgICAgICAgICAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgICAgICAgICAgICB0YXBNczogZXZlbnQudGFyZ2V0LnZhbHVlID09PSAnJ1xuICAgICAgICAgICAgICAgICAgICA/IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgICAgICA6IE51bWJlcihldmVudC50YXJnZXQudmFsdWUpXG4gICAgICAgICAgICAgICAgfSkpXG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9EaWFsb2dCb3g+XG4gICAgPC9Nb2RhbD5cbiAgKVxufVxuXG5leHBvcnQgZGVmYXVsdCBDb25maWdNb2RhbFxuIiwiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJ1xuaW1wb3J0IHsgdXNlQ29udGV4dCwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCdcblxuaW1wb3J0IE1hY3JvQmluZHMgZnJvbSAnLi9NYWNyb0JpbmRzJ1xuaW1wb3J0IENvbmZpZ01vZGFsIGZyb20gJy4vQ29uZmlnTW9kYWwnXG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vc3R5bGVzLm1vZHVsZS5jc3MnXG5pbXBvcnQgRWRpdGFibGVGaWVsZCBmcm9tICcuLi8uLi9Db21tb24vRWRpdGFibGVGaWVsZCdcbmltcG9ydCBJY29uIGZyb20gJy4uLy4uL0NvbW1vbi9JY29uJ1xuaW1wb3J0IHsgdmFsaWRhdGVEZXZpY2V0cmVlTGFiZWwgfSBmcm9tICcuLi92YWxpZGF0b3JzJ1xuaW1wb3J0IHsgU2VhcmNoQ29udGV4dCB9IGZyb20gJy4uLy4uL3Byb3ZpZGVycydcbmltcG9ydCB7XG4gIGN1c3RvbWl6ZU1hY3JvT3B0aW9ucyxcbiAgZGVsZXRlTWFjcm8sXG4gIHJlbmFtZU1hY3JvXG59IGZyb20gJy4vbWFjcm9zU2xpY2UnXG5cbmZ1bmN0aW9uIE1hY3JvIChwcm9wcykge1xuICBjb25zdCB7IGluZGV4LCBtYWNybywgZGlzcGF0Y2ggfSA9IHByb3BzXG4gIGNvbnN0IFtzaG93Q29uZmlnLCBzZXRTaG93Q29uZmlnXSA9IHVzZVN0YXRlKGZhbHNlKVxuICBjb25zdCB7IGlkZW50aWZpZXJzIH0gPSB1c2VDb250ZXh0KFNlYXJjaENvbnRleHQpXG5cbiAgZnVuY3Rpb24gdmFsaWRhdGVNYWNyb0lkZW50aWZpZXIgKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbGlkYXRlRGV2aWNldHJlZUxhYmVsKHZhbHVlKSB8fCAoXG4gICAgICBpZGVudGlmaWVycy5pbmNsdWRlcyh2YWx1ZSlcbiAgICAgICAgPyBgQ2Fubm90IHVzZSBleGlzdGluZyBpZGVudGlmaWVyIFwiJHt2YWx1ZX1cImBcbiAgICAgICAgOiBudWxsXG4gICAgKVxuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlVXBkYXRlQ29uZmlnIChvcHRpb25zKSB7XG4gICAgc2V0U2hvd0NvbmZpZyhmYWxzZSlcbiAgICBkaXNwYXRjaChjdXN0b21pemVNYWNyb09wdGlvbnMoeyBtYWNyb0luZGV4OiBpbmRleCwgb3B0aW9ucyB9KSlcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5tYWNyb30+XG4gICAgICB7c2hvd0NvbmZpZyAmJiAoXG4gICAgICAgIDxDb25maWdNb2RhbCBtYWNybz17bWFjcm99IG9uVXBkYXRlPXtoYW5kbGVVcGRhdGVDb25maWd9IC8+XG4gICAgICApfVxuICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5oZWFkaW5nfT5cbiAgICAgICAgPEVkaXRhYmxlRmllbGRcbiAgICAgICAgICB2YWx1ZT17bWFjcm8uaWRlbnRpZmllcn1cbiAgICAgICAgICB2YWxpZGF0ZT17dmFsaWRhdGVNYWNyb0lkZW50aWZpZXJ9XG4gICAgICAgICAgcmVuZGVyPXtjaGlsZHJlbiA9PiA8aDU+PGNvZGU+e2NoaWxkcmVufTwvY29kZT48L2g1Pn1cbiAgICAgICAgICBvblVwZGF0ZT17bmFtZSA9PiBkaXNwYXRjaChyZW5hbWVNYWNybyh7IGluZGV4LCBuYW1lIH0pKX1cbiAgICAgICAgLz5cbiAgICAgICAgPGRpdj5cbiAgICAgICAgICA8SWNvblxuICAgICAgICAgICAgbmFtZT1cIndyZW5jaFwiXG4gICAgICAgICAgICBjbGFzc05hbWU9e2Ake3N0eWxlcy5hY3Rpb259YH1cbiAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHNldFNob3dDb25maWcodHJ1ZSl9XG4gICAgICAgICAgLz5cbiAgICAgICAgICA8SWNvblxuICAgICAgICAgICAgbmFtZT1cInRyYXNoLWNhblwiXG4gICAgICAgICAgICBjbGFzc05hbWU9e2Ake3N0eWxlcy5hY3Rpb259ICR7c3R5bGVzLnJlbW92ZX1gfVxuICAgICAgICAgICAgb25DbGljaz17KCkgPT4gZGlzcGF0Y2goZGVsZXRlTWFjcm8oeyBpbmRleCB9KSl9XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxNYWNyb0JpbmRzXG4gICAgICAgIG1hY3JvSW5kZXg9e2luZGV4fVxuICAgICAgICBiaW5kaW5ncz17bWFjcm8uYmluZGluZ3N9XG4gICAgICAgIGRpc3BhdGNoPXtkaXNwYXRjaH1cbiAgICAgIC8+XG4gICAgPC9kaXY+XG4gIClcbn1cblxuTWFjcm8ucHJvcFR5cGVzID0ge1xuICBpbmRleDogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxuICBtYWNybzogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBpZGVudGlmaWVyOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGJpbmRpbmdzOiBQcm9wVHlwZXMuYXJyYXkuaXNSZXF1aXJlZFxuICB9KS5pc1JlcXVpcmVkLFxuICBkaXNwYXRjaDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxufVxuXG5leHBvcnQgZGVmYXVsdCBNYWNyb1xuIiwiaW1wb3J0IHsgdXNlU2VsZWN0b3IsIHVzZURpc3BhdGNoIH0gZnJvbSAncmVhY3QtcmVkdXgnXG5cbmltcG9ydCBNYWNybyBmcm9tICcuL01hY3JvJ1xuaW1wb3J0IHN0eWxlcyBmcm9tICcuL3N0eWxlcy5tb2R1bGUuY3NzJ1xuXG5pbXBvcnQgQWN0aW9uQnV0dG9uIGZyb20gJy4uLy4uL0NvbW1vbi9BY3Rpb25CdXR0b24nXG5pbXBvcnQgTGluayBmcm9tICcuLi8uLi9Db21tb24vTGluaydcbmltcG9ydCBJY29uIGZyb20gJy4uLy4uL0NvbW1vbi9JY29uJ1xuaW1wb3J0IHsgc2VsZWN0TWFjcm9zLCBhZGRNYWNybyB9IGZyb20gJy4vbWFjcm9zU2xpY2UnXG5cbmZ1bmN0aW9uIE1hY3JvRWRpdG9yICgpIHtcbiAgY29uc3QgbWFjcm9zID0gdXNlU2VsZWN0b3Ioc2VsZWN0TWFjcm9zKVxuICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKClcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMubWFpbn0+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLnNpZGViYXJ9PlxuICAgICAgICA8TGluayBleHRlcm5hbCBocmVmPVwiaHR0cHM6Ly96bWsuZGV2L2RvY3MvYmVoYXZpb3JzL21hY3Jvc1wiPlxuICAgICAgICAgIDxJY29uIG5hbWU9XCJib29rXCIgLz4gWk1LIERvY3M6IE1hY3Jvc1xuICAgICAgICA8L0xpbms+XG5cbiAgICAgICAgPEFjdGlvbkJ1dHRvbiBvbkNsaWNrPXsoKSA9PiBkaXNwYXRjaChhZGRNYWNybygpKX0+XG4gICAgICAgICAgQWRkIE5ldyBNYWNyb1xuICAgICAgICA8L0FjdGlvbkJ1dHRvbj5cbiAgICAgIDwvZGl2PlxuXG4gICAgICB7bWFjcm9zLm1hcCgobWFjcm8sIGkpID0+IChcbiAgICAgICAgPE1hY3JvXG4gICAgICAgICAga2V5PXtpfVxuICAgICAgICAgIG1hY3JvPXttYWNyb31cbiAgICAgICAgICBpbmRleD17aX1cbiAgICAgICAgICBkaXNwYXRjaD17ZGlzcGF0Y2h9XG4gICAgICAgIC8+XG4gICAgICApKX1cbiAgICA8L2Rpdj5cbiAgKVxufVxuXG5leHBvcnQgZGVmYXVsdCBNYWNyb0VkaXRvclxuIiwiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJ1xuXG5jb25zdCBiaW5kU2hhcGUgPSB7fVxuXG5leHBvcnQgY29uc3QgdmFsdWUgPSBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWRcbmV4cG9ydCBjb25zdCBwYXJhbXMgPSBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMuc2hhcGUoYmluZFNoYXBlKSlcblxuYmluZFNoYXBlLnZhbHVlID0gdmFsdWVcbmJpbmRTaGFwZS5wYXJhbXMgPSBwYXJhbXNcblxuZXhwb3J0IGNvbnN0IGJpbmRpbmcgPSBQcm9wVHlwZXMuc2hhcGUoYmluZFNoYXBlKVxuIiwiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJ1xuaW1wb3J0IHsgYmluZGluZyB9IGZyb20gJy4uL2JpbmRpbmdQcm9wVHlwZXMnXG5cbmV4cG9ydCBjb25zdCBjb21ibyA9IFByb3BUeXBlcy5zaGFwZSh7XG4gIGlkZW50aWZpZXI6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGluZGV4OiBQcm9wVHlwZXMubnVtYmVyLFxuICBiaW5kaW5nczogUHJvcFR5cGVzLmFycmF5T2YoYmluZGluZyksXG4gIGtleVBvc2l0aW9uczogUHJvcFR5cGVzLmFycmF5T2YoXG4gICAgUHJvcFR5cGVzLm51bWJlclxuICApLmlzUmVxdWlyZWRcbn0pXG4iLCJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnXG5pbXBvcnQgeyBiaW5kaW5nIH0gZnJvbSAnLi9iaW5kaW5nUHJvcFR5cGVzJ1xuaW1wb3J0IHsgY29tYm8gfSBmcm9tICcuL0NvbWJvcy9jb21ib1Byb3BUeXBlcydcblxuZXhwb3J0IGNvbnN0IGxheWVyID0gUHJvcFR5cGVzLnNoYXBlKHtcbiAgaW5kZXg6IFByb3BUeXBlcy5udW1iZXIsXG4gIG5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGlkZW50aWZpZXI6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGJpbmRpbmdzOiBQcm9wVHlwZXMuYXJyYXlPZihiaW5kaW5nKS5pc1JlcXVpcmVkLFxuICBzZW5zb3JCaW5kaW5nczogUHJvcFR5cGVzLmFycmF5T2YoYmluZGluZylcbn0pXG5cbmV4cG9ydCBjb25zdCBrZXltYXAgPSBQcm9wVHlwZXMuc2hhcGUoe1xuICBsYXllcnM6IFByb3BUeXBlcy5hcnJheU9mKGxheWVyKS5pc1JlcXVpcmVkLFxuICBjb21ib3M6IFByb3BUeXBlcy5hcnJheU9mKGNvbWJvKVxufSlcbiIsIlxuZXhwb3J0IGZ1bmN0aW9uIHNhbml0eUNoZWNrTGF5b3V0IChsYXlvdXQpIHtcbiAgcmV0dXJuIHtcbiAgICBsYXlvdXRNaXNzaW5nUG9zaXRpb25zOiBzYW5pdHlDaGVja1Bvc2lpdGlvbnMobGF5b3V0KVxuICAgIC8vIG92ZXJsYXBwZWRQb3NpdGlvbnM6IHNhbml0eUNoZWNrT3ZlcmxhcHBpbmdQb3NpdGlvbnMobGF5b3V0KSxcbiAgICAvLyB1bm9yZGVyZWRSb3dzOiBzYW5pdHlDaGVja1Jvd09yZGVyaW5nKGxheW91dCksXG4gICAgLy8gdW5kZXJlcmVkQ29sdW1uczogc2FuaXR5Q2hlY2tDb2x1bW5PcmRlcmluZyhsYXlvdXQpXG4gIH1cbn1cblxuZnVuY3Rpb24gc2FuaXR5Q2hlY2tQb3NpaXRpb25zIChsYXlvdXQpIHtcbiAgY29uc3Qgbm9LZXlIYXNQb3NpdGlvbiA9IGxheW91dC5ldmVyeShrZXkgPT4gKFxuICAgIGtleS5yb3cgPT09IHVuZGVmaW5lZCAmJlxuICAgIGtleS5jb2wgPT09IHVuZGVmaW5lZFxuICApKVxuXG4gIHJldHVybiBub0tleUhhc1Bvc2l0aW9uXG4gICAgPyBbJ0xheW91dCBpbiBpbmZvLmpzb24gaGFzIG5vIHJvdy9jb2wgZGVmaW5pdGlvbnMuIEdlbmVyYXRlZCBrZXltYXAgZmlsZXMgd2lsbCBub3QgYmUgbmljZWx5IGZvcm1hdHRlZC4nXVxuICAgIDogW11cbn1cblxuZnVuY3Rpb24gc2FuaXR5Q2hlY2tPdmVybGFwcGluZ1Bvc2l0aW9ucyAobGF5b3V0KSB7XG4gIGNvbnN0IGVycm9ycyA9IFtdXG4gIGNvbnN0IGtleXNCeVBvc2l0aW9uID0gbGF5b3V0LnJlZHVjZSgoYWNjLCBrZXksIGkpID0+IHtcbiAgICBjb25zdCB7IHJvdywgY29sIH0gPSBrZXlcbiAgICBjb25zdCBwb3NpdGlvbiA9IGAoJHtyb3d9LCR7Y29sfSlgXG5cbiAgICBpZiAocm93ICE9PSB1bmRlZmluZWQgJiYgY29sICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGFjY1twb3NpdGlvbl0gPSBbLi4uKGFjY1twb3NpdGlvbl0gfHwgW10pLCBpXVxuICAgIH1cblxuICAgIHJldHVybiBhY2NcbiAgfSwge30pXG5cbiAgZm9yIChjb25zdCBncm91cCBvZiBPYmplY3QudmFsdWVzKGtleXNCeVBvc2l0aW9uKSkge1xuICAgIGlmIChncm91cC5sZW5ndGggPD0gMSkge1xuICAgICAgY29udGludWVcbiAgICB9XG5cbiAgICBjb25zdCB7IHJvdywgY29sIH0gPSBsYXlvdXRbZ3JvdXBbMF1dXG4gICAgZm9yIChjb25zdCBpbmRleCBvZiBncm91cCkge1xuICAgICAgZXJyb3JzLnB1c2goe1xuICAgICAgICBsb2NhdGlvbjogYExheW91dCBKU09OIFske2luZGV4fV1gLFxuICAgICAgICBwb3NpdGlvbjogeyByb3csIGNvbCB9XG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBlcnJvcnNcbn1cblxuZnVuY3Rpb24gc2FuaXR5Q2hlY2tSb3dPcmRlcmluZyAobGF5b3V0KSB7XG4gIGxldCBjdXJyZW50Um93ID0gLUluZmluaXR5XG4gIGNvbnN0IGVycm9ycyA9IFtdXG5cbiAgZm9yIChjb25zdCBpbmRleCBvZiBsYXlvdXQua2V5cygpKSB7XG4gICAgY29uc3QgeyByb3cgfSA9IGxheW91dFtpbmRleF1cbiAgICBpZiAocm93ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuXG4gICAgaWYgKHJvdyA8IGN1cnJlbnRSb3cpIHtcbiAgICAgIGVycm9ycy5wdXNoKHsgbG9jYXRpb246IGBMYXlvdXQgSlNPTiBbJHtpbmRleH1dYCB9KVxuICAgIH0gZWxzZSB7XG4gICAgICBjdXJyZW50Um93ID0gcm93XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGVycm9yc1xufVxuXG5mdW5jdGlvbiBzYW5pdHlDaGVja0NvbHVtbk9yZGVyaW5nIChsYXlvdXQpIHtcbiAgbGV0IGN1cnJlbnRSb3cgPSAwXG4gIGxldCBjdXJyZW50Q29sID0gLUluZmluaXR5XG4gIGNvbnN0IGVycm9ycyA9IFtdXG5cbiAgZm9yIChjb25zdCBpbmRleCBvZiBsYXlvdXQua2V5cygpKSB7XG4gICAgY29uc3QgeyByb3csIGNvbCB9ID0gbGF5b3V0W2luZGV4XVxuICAgIGlmIChyb3cgPT09IHVuZGVmaW5lZCB8fCBjb2wgPT09IHVuZGVmaW5lZCkge1xuICAgICAgY29udGludWVcbiAgICB9XG5cbiAgICBpZiAoY3VycmVudFJvdyAhPT0gcm93KSB7XG4gICAgICBjdXJyZW50Um93ID0gcm93XG4gICAgICBjdXJyZW50Q29sID0gLUluZmluaXR5XG4gICAgfVxuXG4gICAgaWYgKGNvbCA8IGN1cnJlbnRDb2wpIHtcbiAgICAgIGVycm9ycy5wdXNoKHsgbG9jYXRpb246IGBMYXlvdXQgSlNPTiBbJHtpbmRleH1dYCB9KVxuICAgIH0gZWxzZSB7XG4gICAgICBjdXJyZW50Q29sID0gY29sXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGVycm9yc1xufVxuIiwiaW1wb3J0IGdyb3VwQnkgZnJvbSAnbG9kYXNoL2dyb3VwQnknXG5pbXBvcnQgbWFwIGZyb20gJ2xvZGFzaC9tYXAnXG5cbmltcG9ydCB7IHNhbml0eUNoZWNrTGF5b3V0IH0gZnJvbSAnLi9zYW5pdHktY2hlY2tzLWxheW91dCdcbmltcG9ydCByZXNlcnZlZElkZW50aWZpZXJzIGZyb20gJ3ptay1kYXRhL2RhdGEvZXh0cmFjdGVkLWRhdGEvem1rLXJlc2VydmVkLWlkZW50aWZpZXJzLmpzb24nXG5cbmV4cG9ydCBmdW5jdGlvbiBzYW5pdHlDaGVjayAoa2V5bWFwLCBsYXlvdXQpIHtcbiAgcmV0dXJuIHtcbiAgICBub2RlTmFtZXM6IHNhbml0eUNoZWNrTm9kZU5hbWVzKGtleW1hcCksXG4gICAgbm9kZUxhYmVsczogc2FuaXR5Q2hlY2tOb2RlTGFiZWxzKGtleW1hcCksXG4gICAgbm9kZVJlZmVyZW5jZXM6IHNhbml0eUNoZWNrTm9kZVJlZmVyZW5jZXMoa2V5bWFwKSxcbiAgICAuLi5zYW5pdHlDaGVja0xheW91dChsYXlvdXQpXG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0RHVwbGljYXRlc0J5IChjb2xsZWN0aW9uLCBrZXkpIHtcbiAgY29uc3QgaXRlbXNCeUtleSA9IGdyb3VwQnkoY29sbGVjdGlvbiwga2V5KVxuICByZXR1cm4gT2JqZWN0LnZhbHVlcyhpdGVtc0J5S2V5KVxuICAgIC5maWx0ZXIoZ3JvdXAgPT4gZ3JvdXAubGVuZ3RoID4gMSlcbn1cblxuZnVuY3Rpb24gZG9lc05hbWVTdWdnZXN0UGFzc3dvcmQgKG5hbWUpIHtcbiAgY29uc3QgcGF0dGVybnMgPSBbXG4gICAgLyhefFtcXGJfXSlwYXNzKHdvcmQpPyhbXFxiX118JCkvXG4gIF1cbiAgcmV0dXJuIHBhdHRlcm5zLnNvbWUocGF0dGVybiA9PiBuYW1lLm1hdGNoKHBhdHRlcm4pKVxufVxuXG5mdW5jdGlvbiBzYW5pdHlDaGVja05vZGVOYW1lcyAoa2V5bWFwKSB7XG4gIGNvbnN0IGxheWVyTmFtZXMgPSBnZXRMYXllck5vZGVOYW1lcyhrZXltYXAubGF5ZXJzKVxuICBjb25zdCBjb21ib05hbWVzID0gZ2V0Q29tYm9Ob2RlTmFtZXMoa2V5bWFwLmNvbWJvcylcbiAgY29uc3QgbWFjcm9OYW1lcyA9IGdldE1hY3JvTm9kZU5hbWVzKGtleW1hcC5tYWNyb3MpXG4gIGNvbnN0IGJlaGF2aW9yTmFtZXMgPSBnZXRCZWhhdmlvck5vZGVOYW1lcyhrZXltYXAuYmVoYXZpb3JzKVxuXG4gIGNvbnN0IGR1cGxpY2F0ZXMgPSBbXG4gICAgLi4uZ2V0RHVwbGljYXRlc0J5KGxheWVyTmFtZXMsICduYW1lJyksXG4gICAgLi4uZ2V0RHVwbGljYXRlc0J5KGNvbWJvTmFtZXMsICduYW1lJyksXG4gICAgLi4uZ2V0RHVwbGljYXRlc0J5KG1hY3JvTmFtZXMsICduYW1lJyksXG4gICAgLi4uZ2V0RHVwbGljYXRlc0J5KGJlaGF2aW9yTmFtZXMsICduYW1lJylcbiAgXVxuXG4gIGNvbnN0IHJlZGVmaW5lZCA9IFtcbiAgICAuLi5sYXllck5hbWVzLmZpbHRlcihsYXllciA9PiByZXNlcnZlZElkZW50aWZpZXJzLmluY2x1ZGVzKGxheWVyLm5hbWUpKSxcbiAgICAuLi5jb21ib05hbWVzLmZpbHRlcihjb21ibyA9PiByZXNlcnZlZElkZW50aWZpZXJzLmluY2x1ZGVzKGNvbWJvLm5hbWUpKSxcbiAgICAuLi5tYWNyb05hbWVzLmZpbHRlcihtYWNybyA9PiByZXNlcnZlZElkZW50aWZpZXJzLmluY2x1ZGVzKG1hY3JvLm5hbWUpKSxcbiAgICAuLi5iZWhhdmlvck5hbWVzLmZpbHRlcihiZWhhdmlvciA9PiByZXNlcnZlZElkZW50aWZpZXJzLmluY2x1ZGVzKGJlaGF2aW9yLm5hbWUpKVxuICBdXG5cbiAgY29uc3QgcGFzc3dvcmRNYWNyb3MgPSBbXG4gICAgLi4ubWFjcm9OYW1lcy5maWx0ZXIobWFjcm8gPT4gZG9lc05hbWVTdWdnZXN0UGFzc3dvcmQobWFjcm8ubmFtZSkpXG4gIF1cblxuICByZXR1cm4geyBkdXBsaWNhdGVzLCByZWRlZmluZWQsIHBhc3N3b3JkTWFjcm9zIH1cbn1cblxuZnVuY3Rpb24gc2FuaXR5Q2hlY2tOb2RlTGFiZWxzIChrZXltYXApIHtcbiAgY29uc3QgZHVwbGljYXRlcyA9IGdldER1cGxpY2F0ZXNCeShbXS5jb25jYXQoXG4gICAgZ2V0TGF5ZXJMYWJlbHMoa2V5bWFwLmxheWVycyksXG4gICAgZ2V0TWFjcm9MYWJlbHMoa2V5bWFwLm1hY3JvcyksXG4gICAgZ2V0QmVoYXZpb3JMYWJlbHMoa2V5bWFwLmJlaGF2aW9ycylcbiAgKSwgJ2xhYmVsJylcblxuICByZXR1cm4geyBkdXBsaWNhdGVzIH1cbn1cblxuZnVuY3Rpb24gc2FuaXR5Q2hlY2tOb2RlUmVmZXJlbmNlcyAoa2V5bWFwKSB7XG4gIGNvbnN0IG5vZGVzQnlSZWYgPSBncm91cEJ5KFtdLmNvbmNhdChcbiAgICBnZXRNYWNyb1JlZmVyZW5jZXMoa2V5bWFwLm1hY3JvcyksXG4gICAgZ2V0QmVoYXZpb3JSZWZlcmVuY2VzKGtleW1hcC5iZWhhdmlvcnMpXG4gICksICdyZWYnKVxuXG4gIGNvbnN0IGR1cGxpY2F0ZXMgPSBPYmplY3QudmFsdWVzKG5vZGVzQnlSZWYpLnJlZHVjZSgoZHVwbGljYXRlcywgbm9kZXMpID0+IHtcbiAgICBpZiAobm9kZXMubGVuZ3RoID4gMSkge1xuICAgICAgZHVwbGljYXRlcy5wdXNoKG1hcChub2RlcywgJ3BhdGgnKSlcbiAgICB9XG5cbiAgICByZXR1cm4gZHVwbGljYXRlc1xuICB9LCBbXSlcblxuICByZXR1cm4geyBkdXBsaWNhdGVzIH1cbn1cblxuZnVuY3Rpb24gZ2V0TGF5ZXJOb2RlTmFtZXMgKGxheWVycykge1xuICByZXR1cm4gbGF5ZXJzLm1hcCgobGF5ZXIsIGkpID0+ICh7XG4gICAgbG9jYXRpb246IGBLZXltYXAgLSBMYXllciAjJHtpfSAoJHtsYXllci5uYW1lfSlgLFxuICAgIHBhdGg6IGBrZXltYXAubGF5ZXJzWyR7aX1dYCxcbiAgICBuYW1lOiBsYXllci5uYW1lXG4gIH0pKVxufVxuXG5mdW5jdGlvbiBnZXRMYXllckxhYmVscyAobGF5ZXJzKSB7XG4gIHJldHVybiBsYXllcnMucmVkdWNlKChsYWJlbHMsIGxheWVyLCBpKSA9PiB7XG4gICAgaWYgKGxheWVyLmxhYmVsKSB7XG4gICAgICBsYWJlbHMucHVzaCh7XG4gICAgICAgIGxvY2F0aW9uOiBgS2V5bWFwIC0gTGF5ZXIgIyR7aX0gKCR7bGF5ZXIubmFtZX0pYCxcbiAgICAgICAgcGF0aDogYGtleW1hcC5sYXllcnNbJHtpfV0ubGFiZWxgLFxuICAgICAgICBsYWJlbDogbGF5ZXIubGFiZWxcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgcmV0dXJuIGxhYmVsc1xuICB9LCBbXSlcbn1cblxuZnVuY3Rpb24gZ2V0Q29tYm9Ob2RlTmFtZXMgKGNvbWJvcykge1xuICByZXR1cm4gY29tYm9zLm1hcCgoY29tYm8sIGkpID0+ICh7XG4gICAgbG9jYXRpb246IGBDb21ib3MgLSBDb21ibyAjJHtpfSAoJHtjb21iby5pZGVudGlmaWVyfSlgLFxuICAgIHBhdGg6IGBjb21ib3NbJHtpfV0ubmFtZWAsXG4gICAgbmFtZTogY29tYm8uaWRlbnRpZmllclxuICB9KSlcbn1cblxuZnVuY3Rpb24gZ2V0TWFjcm9Ob2RlTmFtZXMgKG1hY3Jvcykge1xuICByZXR1cm4gbWFjcm9zLm1hcCgobWFjcm8sIGkpID0+ICh7XG4gICAgbG9jYXRpb246IGBNYWNyb3MgLSBNYWNybyAjJHtpfSAoJHttYWNyby5pZGVudGlmaWVyfSlgLFxuICAgIHBhdGg6IGBtYWNyb3NbJHtpfV0ubmFtZWAsXG4gICAgbmFtZTogbWFjcm8uaWRlbnRpZmllclxuICB9KSlcbn1cblxuZnVuY3Rpb24gZ2V0TWFjcm9MYWJlbHMgKG1hY3Jvcykge1xuICByZXR1cm4gbWFjcm9zLnJlZHVjZSgobGFiZWxzLCBtYWNybywgaSkgPT4ge1xuICAgIGlmIChtYWNyby5sYWJlbCkge1xuICAgICAgbGFiZWxzLnB1c2goe1xuICAgICAgICBsb2NhdGlvbjogYE1hY3JvcyAtIE1hY3JvICMke2l9ICgke21hY3JvLmlkZW50aWZpZXJ9KSAtIExhYmVsYCxcbiAgICAgICAgcGF0aDogYG1hY3Jvc1ske2l9XS5sYWJlbGAsXG4gICAgICAgIGxhYmVsOiBtYWNyby5sYWJlbFxuICAgICAgfSlcbiAgICB9XG5cbiAgICByZXR1cm4gbGFiZWxzXG4gIH0sIFtdKVxufVxuXG5mdW5jdGlvbiBnZXRNYWNyb1JlZmVyZW5jZXMgKG1hY3Jvcykge1xuICByZXR1cm4gbWFjcm9zLm1hcCgobWFjcm8sIGkpID0+ICh7XG4gICAgbG9jYXRpb246IGBNYWNyb3MgPiBNYWNybyAjJHtpfSAoJHttYWNyby5pZGVudGlmaWVyfSlgLFxuICAgIHBhdGg6IGBtYWNyb3NbJHtpfV0ubmFtZWAsXG4gICAgcmVmOiBtYWNyby5pZGVudGlmaWVyXG4gIH0pKVxufVxuXG5mdW5jdGlvbiBnZXRCZWhhdmlvck5vZGVOYW1lcyAoYmVoYXZpb3JzKSB7XG4gIHJldHVybiBiZWhhdmlvcnMubWFwKChiZWhhdmlvciwgaSkgPT4gKHtcbiAgICBsb2NhdGlvbjogYEJlaGF2aW9ycyAtIEJlaGF2aW9yICMke2l9ICgke2JlaGF2aW9yLmxhYmVsc1swXX0pIC0gTmFtZWAsXG4gICAgcGF0aDogYGJlaGF2aW9yc1ske2l9XS5uYW1lYCxcbiAgICBuYW1lOiBiZWhhdmlvci5uYW1lXG4gIH0pKVxufVxuXG5mdW5jdGlvbiBnZXRCZWhhdmlvckxhYmVscyAoYmVoYXZpb3JzKSB7XG4gIHJldHVybiBiZWhhdmlvcnMucmVkdWNlKChsYWJlbHMsIGJlaGF2aW9yLCBpKSA9PiB7XG4gICAgaWYgKGJlaGF2aW9yLmxhYmVsKSB7XG4gICAgICBsYWJlbHMucHVzaCh7XG4gICAgICAgIGxvY2F0aW9uOiBgQmVoYXZpb3JzIC0gQmVoYXZpb3IgIyR7aX0gKCR7YmVoYXZpb3IubGFiZWxzWzBdfSkgLSBMYWJlbGAsXG4gICAgICAgIHBhdGg6IGBiZWhhdmlvcnNbJHtpfV0ubGFiZWxgLFxuICAgICAgICBsYWJlbDogYmVoYXZpb3IucHJvcGVydGllcy5sYWJlbC5wYXJzZWRcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgcmV0dXJuIGxhYmVsc1xuICB9LCBbXSlcbn1cblxuZnVuY3Rpb24gZ2V0QmVoYXZpb3JSZWZlcmVuY2VzIChiZWhhdmlvcnMpIHtcbiAgcmV0dXJuIGJlaGF2aW9ycy5tYXAoKGJlaGF2aW9yLCBpKSA9PiAoe1xuICAgIGxvY2F0aW9uOiBgQmVoYXZpb3JzIC0gQmVoYXZpb3IgIyR7aX0gKCR7YmVoYXZpb3IubGFiZWxzWzBdfSkgLSBCaW5kYCxcbiAgICBwYXRoOiBgYmVoYXZpb3JzWyR7aX1dLmJpbmRgLFxuICAgIHJlZjogYmVoYXZpb3IubGFiZWxzWzBdXG4gIH0pKVxufVxuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1syXS51c2VbMV0hLi9zdHlsZXMubW9kdWxlLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzJdLnVzZVsxXSEuL3N0eWxlcy5tb2R1bGUuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IGNvbXBhY3QgZnJvbSAnbG9kYXNoL2NvbXBhY3QnXG5pbXBvcnQgeyB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IEljb24gZnJvbSAnLi4vLi4vQ29tbW9uL0ljb24nXG5cbmltcG9ydCBMaW5rIGZyb20gJy4uLy4uL0NvbW1vbi9MaW5rJ1xuaW1wb3J0IHN0eWxlcyBmcm9tICcuL3N0eWxlcy5tb2R1bGUuY3NzJ1xuXG5mdW5jdGlvbiBEZWZhdWx0V2FybmluZ0l0ZW0gKGl0ZW0pIHtcbiAgcmV0dXJuIGl0ZW0ubG9jYXRpb25cbn1cblxuY29uc3QgbGF5b3V0V2lraVVybCA9ICdodHRwczovL2dpdGh1Yi5jb20vbmlja2NvdXRzb3Mva2V5bWFwLWVkaXRvci93aWtpL0RlZmluaW5nLWtleWJvYXJkLWxheW91dHMnXG5cbmZ1bmN0aW9uIFdhcm5pbmdDYXRlZ29yeSAocHJvcHMpIHtcbiAgY29uc3QgeyBuYW1lLCBleHBsYW5hdGlvbiwgd2FybmluZ3MsIHJlbmRlcldhcm5pbmcgPSBEZWZhdWx0V2FybmluZ0l0ZW0gfSA9IHByb3BzXG4gIGNvbnN0IFtjb2xsYXBzZWQsIHNldENvbGxhcHNlZF0gPSB1c2VTdGF0ZSh3YXJuaW5ncy5sZW5ndGggPT09IDApXG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT17Y29tcGFjdChbXG4gICAgICBzdHlsZXMud2FybmluZ0NhdGVnb3J5LFxuICAgICAgd2FybmluZ3MubGVuZ3RoID09PSAwICYmIHN0eWxlcy5lbXB0eUNhdGVnb3J5LFxuICAgICAgY29sbGFwc2VkICYmIHN0eWxlcy5jb2xsYXBzZWRDYXRlZ29yeVxuICAgIF0pLmpvaW4oJyAnKX0+XG4gICAgICA8aDMgb25DbGljaz17KCkgPT4gc2V0Q29sbGFwc2VkKCFjb2xsYXBzZWQpfT5cbiAgICAgICAgPEljb24gY2xhc3NOYW1lPXtzdHlsZXMuY2FyZXR9IG5hbWU9XCJjYXJldC1kb3duXCIgLz5cbiAgICAgICAgeycgJ30ge25hbWV9IDxlbT4oe3dhcm5pbmdzLmxlbmd0aH0gaXNzdWVzKTwvZW0+XG4gICAgICA8L2gzPlxuICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy53YXJuaW5nRGV0YWlsc30+XG4gICAgICAgIDxibG9ja3F1b3RlPlxuICAgICAgICAgIHtleHBsYW5hdGlvbn1cbiAgICAgICAgPC9ibG9ja3F1b3RlPlxuICAgICAgICB7d2FybmluZ3MubGVuZ3RoID4gMFxuICAgICAgICAgID8gKFxuICAgICAgICAgIDx1bD5cbiAgICAgICAgICAgIHt3YXJuaW5ncy5tYXAoKGl0ZW0sIGkpID0+IChcbiAgICAgICAgICAgICAgPGxpIGtleT17aX0+XG4gICAgICAgICAgICAgICAge3JlbmRlcldhcm5pbmcoaXRlbSl9XG4gICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICApKX1cbiAgICAgICAgICA8L3VsPlxuICAgICAgICAgICAgKVxuICAgICAgICAgIDogPHA+Tm8gcHJvYmxlbXM8L3A+fVxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIClcbn1cblxuY29uc3QgaXNzdWUgPSAoXG4gIDxMaW5rIGV4dGVybmFsIGhyZWY9XCJodHRwczovL2dpdGh1Yi5jb20vbmlja2NvdXRzb3Mva2V5bWFwLWVkaXRvci9pc3N1ZXNcIj5cbiAgICBpc3N1ZVxuICA8L0xpbms+XG4pXG5cbmZ1bmN0aW9uIFdhcm5pbmdzICh7IHNhbml0eUNoZWNrcyB9KSB7XG4gIGNvbnN0IHsgbm9kZU5hbWVzLCBub2RlTGFiZWxzLCBub2RlUmVmZXJlbmNlcywgbGF5b3V0TWlzc2luZ1Bvc2l0aW9ucyB9ID0gc2FuaXR5Q2hlY2tzXG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IHN0eWxlPXt7IG1heFdpZHRoOiAnNzAwcHgnLCBtYXJnaW46ICcwIGF1dG8nLCBwYWRkaW5nQm90dG9tOiAnNjBweCcgfX0+XG4gICAgICA8aDI+V2FybmluZ3M8L2gyPlxuXG4gICAgICA8V2FybmluZ0NhdGVnb3J5XG4gICAgICAgIG5hbWU9XCJMYXlvdXQgcm93L2NvbCBwb3NpdGlvbnNcIlxuICAgICAgICB3YXJuaW5ncz17bGF5b3V0TWlzc2luZ1Bvc2l0aW9uc31cbiAgICAgICAgZXhwbGFuYXRpb249eyhcbiAgICAgICAgICA8PlxuICAgICAgICAgICAgPHA+XG4gICAgICAgICAgICAgIDxlbT5cbiAgICAgICAgICAgICAgICBZb3VyIGtleWJvYXJkJ3MgbGF5b3V0IG1ldGFkYXRhIHNob3VsZCBpbmNsdWRlIGEgPGNvZGU+cm93PC9jb2RlPlxuICAgICAgICAgICAgICAgIGFuZCA8Y29kZT5jb2w8L2NvZGU+IHByb3BlcnR5IGZvciBlYWNoIGtleSBpbiBvcmRlciB0byBnZW5lcmF0ZSBhXG4gICAgICAgICAgICAgICAgcmVhZGFibGUga2V5bWFwIDxjb2RlPmJpbmRpbmdzPC9jb2RlPiBhcnJheS5cbiAgICAgICAgICAgICAgPC9lbT5cbiAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICAgIDxwPlxuICAgICAgICAgICAgICBGb3IgbW9yZSBpbmZvcm1hdGlvbiBzZWUgPExpbmsgZXh0ZXJuYWwgaHJlZj17bGF5b3V0V2lraVVybH0+XG4gICAgICAgICAgICAgICAgS2V5bWFwIEVkaXRvciBXaWtpXG4gICAgICAgICAgICAgIDwvTGluaz4uXG4gICAgICAgICAgICA8L3A+XG4gICAgICAgICAgPC8+XG4gICAgICAgICl9XG4gICAgICAgIHJlbmRlcldhcm5pbmc9eygpID0+IHt9fVxuICAgICAgLz5cblxuICAgICAgPFdhcm5pbmdDYXRlZ29yeVxuICAgICAgICBuYW1lPVwiRHVwbGljYXRlIG5vZGUgbmFtZXNcIlxuICAgICAgICB3YXJuaW5ncz17bm9kZU5hbWVzLmR1cGxpY2F0ZXN9XG4gICAgICAgIGV4cGxhbmF0aW9uPXsoXG4gICAgICAgICAgPHA+XG4gICAgICAgICAgICA8ZW0+Tm9kZSBuYW1lcyBtdXN0IHdpdGhpbiB0aGUgc2FtZSBzZWN0aW9uIG11c3QgYmUgdW5pcXVlLjwvZW0+XG4gICAgICAgICAgPC9wPlxuICAgICAgICApfVxuICAgICAgICByZW5kZXJXYXJuaW5nPXtpdGVtcyA9PiAoXG4gICAgICAgICAgPD5cbiAgICAgICAgICAgIDxoND5OYW1lIDxjb2RlPntpdGVtc1swXS5uYW1lfTwvY29kZT4gcmUtdXNlZCBpbjo8L2g0PlxuICAgICAgICAgICAgPHVsPlxuICAgICAgICAgICAgICB7aXRlbXMubWFwKChpdGVtLCBqKSA9PiAoXG4gICAgICAgICAgICAgICAgPGxpIGtleT17an0+e2l0ZW0ubG9jYXRpb259PC9saT5cbiAgICAgICAgICAgICAgKSl9XG4gICAgICAgICAgICA8L3VsPlxuICAgICAgICAgIDwvPlxuICAgICAgICApfVxuICAgICAgLz5cblxuICAgICAgPFdhcm5pbmdDYXRlZ29yeVxuICAgICAgICBuYW1lPVwiUmUtZGVmaW5pdGlvbnNcIlxuICAgICAgICB3YXJuaW5ncz17bm9kZU5hbWVzLnJlZGVmaW5lZH1cbiAgICAgICAgZXhwbGFuYXRpb249eyhcbiAgICAgICAgICA8cD5cbiAgICAgICAgICAgIDxlbT5Ob2RlIG5hbWVzIGNhbm5vdCB1c2UgZXhpc3RpbmcgWk1LIGlkZW50aWZpZXJzLjwvZW0+XG4gICAgICAgICAgPC9wPlxuICAgICAgICApfVxuICAgICAgLz5cblxuICAgICAgPFdhcm5pbmdDYXRlZ29yeVxuICAgICAgICBuYW1lPVwiTWFjcm8gUGFzc3dvcmRzXCJcbiAgICAgICAgd2FybmluZ3M9e25vZGVOYW1lcy5wYXNzd29yZE1hY3Jvc31cbiAgICAgICAgZXhwbGFuYXRpb249eyhcbiAgICAgICAgICA8PlxuICAgICAgICAgICAgPHA+XG4gICAgICAgICAgICAgIDxlbT5cbiAgICAgICAgICAgICAgICBVc2luZyBrZXlib2FyZCBtYWNyb3MgdG8gZW50ZXIgcGFzc3dvcmRzIGlzIGEgc2VjdXJpdHkgcmlzayBhbmRcbiAgICAgICAgICAgICAgICBpcyBzdHJvbmdseSBkaXNjb3VyYWdlZC5cbiAgICAgICAgICAgICAgPC9lbT5cbiAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICAgIDxwPlxuICAgICAgICAgICAgICBSZWNvcmRpbmcgcGFzc3dvcmRzIGluIHlvdXIga2V5Ym9hcmQgbWVhbnMgdGhhdCBhbnlvbmUgd2l0aFxuICAgICAgICAgICAgICBwaHlzaWNhbCBhY2Nlc3MgdG8geW91ciBrZXlib2FyZCB3b3VsZCBoYXZlIGFjY2VzcyB0byBjcmVkZW50aWFsc1xuICAgICAgICAgICAgICBzdG9yZWQgd2l0aGluIGl0LCB3aGV0aGVyIHRoZXkga25vdyB0byBsb29rIGZvciBpdCBvciBub3QuIEFsc29cbiAgICAgICAgICAgICAgbm90ZSB0aGF0IHRocm91Z2ggdGhpcyBhcHBsaWNhdGlvbiB5b3UgYXJlIHJlY29yZGluZyBrZXlib2FyZFxuICAgICAgICAgICAgICBjb25maWd1cmF0aW9uIGluIGEgR2l0IHJlcG9zaXRvcnkgYW5kIHN0b3JpbmcgY3JlZGVudGlhbHMgaW4gYVxuICAgICAgICAgICAgICBjb2RlIHJlcG9zaXRvcnkgaXMgbm90IGNvbnNpZGVyZWQgYSBzYWZlIHByYWN0aWNlIChldmVuIGlmIHRoZVxuICAgICAgICAgICAgICByZXBvc2l0b3J5IGlzIHByaXZhdGUpLlxuICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgPHA+XG4gICAgICAgICAgICAgIEFueSBtYWNyb3MgbGlzdGVkIGhlcmUgaGF2ZSBuYW1lcyB3aGljaCBzZWVtIHRvIHN1Z2dlc3QgdGhhdCB0aGV5XG4gICAgICAgICAgICAgIGFyZSB1c2VkIGZvciBwYXNzd29yZCBlbnRyeS4gSWYgdGhhdCBpcyB0aGUgY2FzZSBJIHdvdWxkIGVuY291cmFnZVxuICAgICAgICAgICAgICB5b3UgdG8gcmVtb3ZlIHRoZW0gYW5kIGNoYW5nZSB0aGUgYXNzb2NpYXRlZCBwYXNzd29yZChzKSBpZlxuICAgICAgICAgICAgICBuZWVkZWQuIElmIHRoaXMgaXMgYSBtaXN0YWtlIGZlZWwgZnJlZSB0byBjcmVhdGUgYW4ge2lzc3VlfSB0b1xuICAgICAgICAgICAgICBoZWxwIG1lIGF2b2lkIGZhbHNlIGFsYXJtcyBpbiB0aGUgZnV0dXJlIVxuICAgICAgICAgICAgPC9wPlxuICAgICAgICAgIDwvPlxuICAgICAgICApfVxuICAgICAgLz5cblxuICAgICAgPFdhcm5pbmdDYXRlZ29yeVxuICAgICAgICBuYW1lPVwiRHVwbGljYXRlIGxhYmVsc1wiXG4gICAgICAgIHdhcm5pbmdzPXtub2RlTGFiZWxzLmR1cGxpY2F0ZXN9XG4gICAgICAgIGV4cGxhbmF0aW9uPXsoXG4gICAgICAgICAgPHA+XG4gICAgICAgICAgICA8ZW0+TGFiZWwgcHJvcGVydHkgdmFsdWVzIG11c3QgYmUgdW5pcXVlIHRocm91Z2hvdXQgdGhlIGVudGlyZSBrZXltYXAuPC9lbT5cbiAgICAgICAgICA8L3A+XG4gICAgICAgICl9XG4gICAgICAgIHJlbmRlcldhcm5pbmc9e2l0ZW1zID0+IChcbiAgICAgICAgICA8PlxuICAgICAgICAgICAgPGg0Pk5hbWUgPGNvZGU+e2l0ZW1zWzBdLmxhYmVsfTwvY29kZT4gcmUtdXNlZCBpbjo8L2g0PlxuICAgICAgICAgICAgPHVsPlxuICAgICAgICAgICAgICB7aXRlbXMubWFwKChpdGVtLCBqKSA9PiAoXG4gICAgICAgICAgICAgICAgPGxpIGtleT17an0+e2l0ZW0ubG9jYXRpb259PC9saT5cbiAgICAgICAgICAgICAgKSl9XG4gICAgICAgICAgICA8L3VsPlxuICAgICAgICAgIDwvPlxuICAgICAgICApfVxuICAgICAgLz5cblxuICAgICAgPFdhcm5pbmdDYXRlZ29yeVxuICAgICAgICBuYW1lPVwiRHVwbGljYXRlIG5vZGUgcmVmZXJlbmNlc1wiXG4gICAgICAgIHdhcm5pbmdzPXtub2RlUmVmZXJlbmNlcy5kdXBsaWNhdGVzfVxuICAgICAgICBleHBsYW5hdGlvbj17KFxuICAgICAgICAgIDxwPlxuICAgICAgICAgICAgPGVtPk5vZGUgcmVmZXJlbmNlcyBtdXN0IGJlIHVuaXF1ZSB0aHJvdWdob3V0IHRoZSBlbnRpcmUga2V5bWFwLjwvZW0+XG4gICAgICAgICAgPC9wPlxuICAgICAgICApfVxuICAgICAgICByZW5kZXJXYXJuaW5nPXtpdGVtcyA9PiAoXG4gICAgICAgICAgPD5cbiAgICAgICAgICAgIDxoND5SZWZlcmVuY2UgPGNvZGU+JmFtcDt7aXRlbXNbMF0ucmVmfTwvY29kZT4gcmUtdXNlZCBpbjo8L2g0PlxuICAgICAgICAgICAgPHVsPlxuICAgICAgICAgICAgICB7aXRlbXMubWFwKChpdGVtLCBqKSA9PiAoXG4gICAgICAgICAgICAgICAgPGxpIGtleT17an0+e2l0ZW0ubG9jYXRpb259PC9saT5cbiAgICAgICAgICAgICAgKSl9XG4gICAgICAgICAgICA8L3VsPlxuICAgICAgICAgIDwvPlxuICAgICAgICApfVxuICAgICAgLz5cbiAgICA8L2Rpdj5cbiAgKVxufVxuXG5leHBvcnQgZGVmYXVsdCBXYXJuaW5nc1xuIiwiaW1wb3J0IHsgY29tcGFjdCB9IGZyb20gJ2xvZGFzaCdcbmltcG9ydCB7IEZyYWdtZW50LCB1c2VDb250ZXh0LCB1c2VNZW1vLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgdXNlU2VsZWN0b3IgfSBmcm9tICdyZWFjdC1yZWR1eCdcblxuaW1wb3J0IENvbnRleHQgZnJvbSAnLi9Db250ZXh0J1xuaW1wb3J0IEJlaGF2aW9ycyBmcm9tICcuL0JlaGF2aW9ycy9CZWhhdmlvcnMnXG5pbXBvcnQgQ29tYm9FZGl0b3IgZnJvbSAnLi9Db21ib3MvQ29tYm9FZGl0b3InXG5pbXBvcnQgTGF5ZXJFZGl0b3IgZnJvbSAnLi9MYXllcnMvTGF5ZXJFZGl0b3InXG5pbXBvcnQgTWFjcm9FZGl0b3IgZnJvbSAnLi9NYWNyb3MvTWFjcm9FZGl0b3InXG5pbXBvcnQgKiBhcyBrZXltYXBQcm9wdHlwZXMgZnJvbSAnLi9rZXltYXBQcm9wVHlwZXMnXG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vc3R5bGVzLm1vZHVsZS5jc3MnXG5pbXBvcnQgeyBzYW5pdHlDaGVjayB9IGZyb20gJy4vV2FybmluZ3Mvc2FuaXR5LWNoZWNrcydcbmltcG9ydCBXYXJuaW5ncyBmcm9tICcuL1dhcm5pbmdzL1dhcm5pbmdzJ1xuaW1wb3J0IHsgTGF5b3V0Q29udGV4dCB9IGZyb20gJy4uL0NvbnRleHRzL0xheW91dCdcblxuLy8gaW1wb3J0IGdpdGh1YiBmcm9tICcuLi9Tb3VyY2VzL0dpdGh1Yi9hcGknXG5cbi8vIGZ1bmN0aW9uIHVzZUZlYXR1cmVzICgpIHtcbi8vICAgY29uc3QgW2ZlYXR1cmVzLCBzZXRGZWF0dXJlc10gPSB1c2VTdGF0ZSh7IGJldGFGZWF0dXJlczogW10gfSlcbi8vICAgdXNlRWZmZWN0KCgpID0+IHtcbi8vICAgICAoYXN5bmMgZnVuY3Rpb24gKCkge1xuLy8gICAgICAgc2V0RmVhdHVyZXMoYXdhaXQgZ2l0aHViLmZldGNoQXZhaWxhYmxlRmVhdHVyZXMoKSlcbi8vICAgICB9KSgpXG4vLyAgIH0sIFtzZXRGZWF0dXJlc10pXG5cbi8vICAgcmV0dXJuIGZlYXR1cmVzXG4vLyB9XG5cbi8vIGltcG9ydCBMYXlvdXRFZGl0b3IgZnJvbSAnLi9MYXlvdXQvTGF5b3V0RWRpdG9yJ1xuXG5mdW5jdGlvbiBUYWJzICh7IHRleHQsIHRhYnMsIGRlZmF1bHRUYWIsIGNoaWxkcmVuIH0pIHtcbiAgY29uc3QgW2FjdGl2ZVRhYiwgc2V0QWN0aXZlVGFiXSA9IHVzZVN0YXRlKGRlZmF1bHRUYWIpXG5cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPGgzIHN0eWxlPXt7IGRpc3BsYXk6ICdpbmxpbmUnIH19Pnt0ZXh0fTwvaDM+XG4gICAgICA8dWwgY2xhc3NOYW1lPXtzdHlsZXMuZWRpdG9yTW9kZVRhYnN9PlxuICAgICAgICB7dGFicy5tYXAoKHsgbmFtZTogdGFiLCB0YWJDbGFzc2VzID0gW10gfSwgaSkgPT4gKFxuICAgICAgICAgIDxsaVxuICAgICAgICAgICAga2V5PXtpfVxuICAgICAgICAgICAgb25DbGljaz17KCkgPT4gc2V0QWN0aXZlVGFiKGkpfVxuICAgICAgICAgICAgY2xhc3NOYW1lPXtjb21wYWN0KFtcbiAgICAgICAgICAgICAgYWN0aXZlVGFiID09PSBpICYmIHN0eWxlcy5hY3RpdmVFZGl0VGFiLFxuICAgICAgICAgICAgICAuLi50YWJDbGFzc2VzXG4gICAgICAgICAgICBdKS5qb2luKCcgJyl9XG4gICAgICAgICAgPlxuICAgICAgICAgICAge3RhYn1cbiAgICAgICAgICA8L2xpPlxuICAgICAgICApKX1cbiAgICAgIDwvdWw+XG4gICAgICB7Y2hpbGRyZW5bYWN0aXZlVGFiXX1cbiAgICA8Lz5cbiAgKVxufVxuXG5jb25zdCBzZWxlY3RLZXltYXAgPSBzdGF0ZSA9PiBzdGF0ZS5rZXlib2FyZC5rZXltYXBcblxuZnVuY3Rpb24gS2V5Ym9hcmQgKHByb3BzKSB7XG4gIGNvbnN0IGtleW1hcCA9IHVzZVNlbGVjdG9yKHNlbGVjdEtleW1hcClcbiAgY29uc3QgeyBsYXlvdXQgfSA9IHVzZUNvbnRleHQoTGF5b3V0Q29udGV4dClcbiAgY29uc3QgeyBzZW5zb3JzIH0gPSBwcm9wc1xuICBjb25zdCBzYW5pdHlDaGVja3MgPSB1c2VNZW1vKCgpID0+IHNhbml0eUNoZWNrKGtleW1hcCwgbGF5b3V0KSwgW2tleW1hcCwgbGF5b3V0XSlcbiAgY29uc3Qgd2FybmluZ0NvdW50ID0gdXNlTWVtbygoKSA9PiB7XG4gICAgY29uc3QgeyBub2RlTmFtZXMsIG5vZGVMYWJlbHMsIG5vZGVSZWZlcmVuY2VzLCBsYXlvdXRNaXNzaW5nUG9zaXRpb25zIH0gPSBzYW5pdHlDaGVja3NcbiAgICByZXR1cm4gKFxuICAgICAgbm9kZU5hbWVzLmR1cGxpY2F0ZXMubGVuZ3RoICtcbiAgICAgIG5vZGVOYW1lcy5yZWRlZmluZWQubGVuZ3RoICtcbiAgICAgIG5vZGVOYW1lcy5wYXNzd29yZE1hY3Jvcy5sZW5ndGggK1xuICAgICAgbm9kZUxhYmVscy5kdXBsaWNhdGVzLmxlbmd0aCArXG4gICAgICBub2RlUmVmZXJlbmNlcy5kdXBsaWNhdGVzLmxlbmd0aCArXG4gICAgICBsYXlvdXRNaXNzaW5nUG9zaXRpb25zLmxlbmd0aFxuICAgIClcbiAgfSwgW3Nhbml0eUNoZWNrc10pXG5cbiAgY29uc3QgdGFicyA9IGNvbXBhY3QoW1xuICAgIHsgbmFtZTogJ2xheWVycycsIGNvbXBvbmVudDogPExheWVyRWRpdG9yIHNlbnNvcnM9e3NlbnNvcnN9IC8+IH0sXG4gICAgeyBuYW1lOiAnY29tYm9zJywgY29tcG9uZW50OiA8Q29tYm9FZGl0b3IgLz4gfSxcbiAgICB7IG5hbWU6ICdtYWNyb3MnLCBjb21wb25lbnQ6IDxNYWNyb0VkaXRvciAvPiB9LFxuICAgIHsgbmFtZTogPHNwYW4gY2xhc3NOYW1lPXtzdHlsZXMuYmV0YX0+YmVoYXZpb3JzPC9zcGFuPiwgY29tcG9uZW50OiA8QmVoYXZpb3JzIC8+IH0sXG4gICAgd2FybmluZ0NvdW50ID4gMCAmJiAoe1xuICAgICAgbmFtZTogYHdhcm5pbmdzICgke3dhcm5pbmdDb3VudH0pYCxcbiAgICAgIHRhYkNsYXNzZXM6IFtzdHlsZXMud2FybmluZ1RhYl0sXG4gICAgICBjb21wb25lbnQ6IDxXYXJuaW5ncyBzYW5pdHlDaGVja3M9e3Nhbml0eUNoZWNrc30gLz5cbiAgICB9KVxuICBdKVxuXG4gIGNvbnN0IGRlZmF1bHRUYWIgPSAwXG5cbiAgcmV0dXJuIChcbiAgICA8Q29udGV4dCBrZXltYXA9e2tleW1hcH0+XG4gICAgICA8VGFicyB0ZXh0PVwiRWRpdG9yIG1vZGU6XCIgdGFicz17dGFic30gZGVmYXVsdFRhYj17ZGVmYXVsdFRhYn0+XG4gICAgICAgIHt0YWJzLm1hcCgodGFiLCBpKSA9PiAoXG4gICAgICAgICAgPEZyYWdtZW50IGtleT17aX0+XG4gICAgICAgICAgICB7dGFiLmNvbXBvbmVudH1cbiAgICAgICAgICA8L0ZyYWdtZW50PlxuICAgICAgICApKX1cbiAgICAgIDwvVGFicz5cbiAgICA8L0NvbnRleHQ+XG4gIClcbn1cblxuS2V5Ym9hcmQucHJvcFR5cGVzID0ge1xuICBrZXltYXA6IGtleW1hcFByb3B0eXBlcy5rZXltYXBcbn1cblxuZXhwb3J0IGRlZmF1bHQgS2V5Ym9hcmRcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMl0udXNlWzFdIS4vc3R5bGVzLm1vZHVsZS5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1syXS51c2VbMV0hLi9zdHlsZXMubW9kdWxlLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCBJY29uIGZyb20gJy4vQ29tbW9uL0ljb24nXG5cbmltcG9ydCBzdHlsZSBmcm9tICcuL3N0eWxlcy5tb2R1bGUuY3NzJ1xuXG5jb25zdCByZXBvc2l0b3J5VXJsID0gJ2h0dHBzOi8vZ2l0aHViLmNvbS9uaWNrY291dHNvcy9rZXltYXAtZWRpdG9yJ1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBHaXRIdWJMaW5rICgpIHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGUud3JhcHBlcn0+XG4gICAgICA8bGFiZWw+TmVlZCBoZWxwPyBPcGVuIGFuIGlzc3VlOjwvbGFiZWw+XG4gICAgICA8YSBjbGFzc05hbWU9e3N0eWxlLmdpdGh1Ykxpbmt9IHRhcmdldD1cIl9ibGFua1wiIHJlbD1cIm5vcmVmZXJyZXJcIiBocmVmPXtyZXBvc2l0b3J5VXJsfT5cbiAgICAgICAgPEljb24gY29sbGVjdGlvbj1cImJyYW5kc1wiIG5hbWU9XCJnaXRodWJcIiAvPi9uaWNrY291dHNvcy9rZXltYXAtZWRpdG9yXG4gICAgICA8L2E+XG4gICAgPC9kaXY+XG4gIClcbn1cbiIsImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcydcblxuaW1wb3J0IERpYWxvZ0JveCBmcm9tICcuLi9Db21tb24vRGlhbG9nQm94J1xuaW1wb3J0IEljb24gZnJvbSAnLi4vQ29tbW9uL0ljb24nXG5pbXBvcnQgTW9kYWwgZnJvbSAnLi4vQ29tbW9uL01vZGFsJ1xuXG5jb25zdCBzdHlsZXMgPSB7XG4gIGRlc2NyaXB0aW9uOiB7XG4gICAgZm9udFN0eWxlOiAnaXRhbGljJyxcbiAgICBmb250U2l6ZTogJzkwJSdcbiAgfVxufVxuXG5mdW5jdGlvbiBTZXR0aW5ncyAocHJvcHMpIHtcbiAgY29uc3QgeyBzZXR0aW5ncywgb25VcGRhdGUsIG9uQ2xvc2UgfSA9IHByb3BzXG5cbiAgZnVuY3Rpb24gaGFuZGxlVXBkYXRlU2V0dGluZyAoa2V5LCB2YWx1ZSkge1xuICAgIG9uVXBkYXRlKHsgLi4uc2V0dGluZ3MsIFtrZXldOiB2YWx1ZSB9KVxuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8TW9kYWwgb25EaXNtaXNzPXtvbkNsb3NlfT5cbiAgICAgIDxEaWFsb2dCb3ggb25EaXNtaXNzPXtvbkNsb3NlfT5cbiAgICAgICAgPGgxPlNldHRpbmdzPC9oMT5cblxuICAgICAgICA8aDI+S2V5Y29kZSBnbHlwaHM8L2gyPlxuXG4gICAgICAgIDxoMz5cbiAgICAgICAgICA8bGFiZWwgaHRtbEZvcj1cImVuYWJsZS11bmljb2RlLWdseXBoc1wiPlxuICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgIGlkPVwiZW5hYmxlLXVuaWNvZGUtZ2x5cGhzXCJcbiAgICAgICAgICAgICAgdHlwZT1cImNoZWNrYm94XCJcbiAgICAgICAgICAgICAgY2hlY2tlZD17c2V0dGluZ3MudW5pY29kZUdseXBoc31cbiAgICAgICAgICAgICAgb25DaGFuZ2U9e2UgPT4gKFxuICAgICAgICAgICAgICAgIGhhbmRsZVVwZGF0ZVNldHRpbmcoJ3VuaWNvZGVHbHlwaHMnLCBlLnRhcmdldC5jaGVja2VkKVxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIFVzZSBVbmljb2RlIEdseXBoc1xuICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgIDwvaDM+XG4gICAgICAgIDxwIHN0eWxlPXtzdHlsZXMuZGVzY3JpcHRpb259PlxuICAgICAgICAgIFVzZSB1bmljb2RlIGdseXBocyBmb3IgdmlzdWFsIHJlcHJlc2VudGF0aW9ucyBvZiBrZXljb2Rlc1xuICAgICAgICAgIGxpa2UgPGNvZGU+RW50ZXI8L2NvZGU+ICjirpApLCA8Y29kZT5SaWdodCBBcnJvdzwvY29kZT4gKOKPtSksIGV0Yy4gWW91XG4gICAgICAgICAgY2FuIGRpc2FibGUgdGhpcyBpZiB0aGUgc3ltYm9scyBkb24ndCByZW5kZXIgY29ycmVjdGx5LlxuICAgICAgICA8L3A+XG5cbiAgICAgICAgPGgzPlxuICAgICAgICAgIDxsYWJlbCBodG1sRm9yPVwicGxhdGZvcm0tc3BlY2lmaWMtZ2x5cGhzXCI+XG4gICAgICAgICAgICBQbGF0Zm9ybSBzcGVjaWZpYyBnbHlwaHNcbiAgICAgICAgICAgIDxzZWxlY3RcbiAgICAgICAgICAgICAgaWQ9XCJwbGF0Zm9ybS1zcGVjaWZpYy1nbHlwaHNcIlxuICAgICAgICAgICAgICB2YWx1ZT17c2V0dGluZ3MucGxhdGZvcm1HbHlwaHMgfHwgJ2F1dG8nfVxuICAgICAgICAgICAgICBvbkNoYW5nZT17ZSA9PiAoXG4gICAgICAgICAgICAgICAgaGFuZGxlVXBkYXRlU2V0dGluZygncGxhdGZvcm1HbHlwaHMnLCBlLnRhcmdldC52YWx1ZSlcbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cImF1dG9cIj5BdXRvbWF0aWM8L29wdGlvbj5cbiAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIndpblwiPldpbmRvd3M8L29wdGlvbj5cbiAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIm1hY1wiPm1hY09TPC9vcHRpb24+XG4gICAgICAgICAgICA8L3NlbGVjdD5cbiAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICA8L2gzPlxuICAgICAgICA8cCBzdHlsZT17c3R5bGVzLmRlc2NyaXB0aW9ufT5cbiAgICAgICAgICBSZW5kZXIgc3ltYm9scyBzcGVjaWZpYyB0byB5b3VyIHBsYXRmb3JtLiBFLmcuLCByZW5kZXIgbGVmdC9yaWdodCBtZXRhXG4gICAgICAgICAga2V5IGFzIDxJY29uIG5hbWU9XCJ3aW5kb3dzIGZhLWJyYW5kc1wiIC8+IGZvciBXaW5kb3dzLCBvclxuICAgICAgICAgIOKMmCBmb3IgbWFjT1MuXG4gICAgICAgIDwvcD5cbiAgICAgIDwvRGlhbG9nQm94PlxuICAgIDwvTW9kYWw+XG4gIClcbn1cblxuU2V0dGluZ3MucHJvcFR5cGVzID0ge1xuICBzZXR0aW5nczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICBvblVwZGF0ZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgb25DbG9zZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxufVxuXG5TZXR0aW5ncy5kZWZhdWx0UHJvcHMgPSB7XG4gIHNldHRpbmdzOiB7fVxufVxuXG5leHBvcnQgZGVmYXVsdCBTZXR0aW5nc1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1syXS51c2VbMV0hLi9zcGlubmVyLm1vZHVsZS5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1syXS51c2VbMV0hLi9zcGlubmVyLm1vZHVsZS5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgc3R5bGVzIGZyb20gJy4vc3Bpbm5lci5tb2R1bGUuY3NzJ1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBTcGlubmVyICh7IGNoaWxkcmVuLCAuLi5yZXN0IH0pIHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2IHsuLi5yZXN0fSBjbGFzc05hbWU9e3N0eWxlcy5zcGlubmVyfT5cbiAgICAgIDxpIGNsYXNzTmFtZT17YCR7c3R5bGVzLmljb259IGZhIGZhLXNwaW5uZXJgfSAvPlxuICAgICAge2NoaWxkcmVufVxuICAgIDwvZGl2PlxuICApXG59XG4iLCJpbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnXG5pbXBvcnQgRXZlbnRFbWl0dGVyIGZyb20gJ2V2ZW50ZW1pdHRlcjMnXG5cbmltcG9ydCAqIGFzIGNvbmZpZyBmcm9tICcuLi8uLi9jb25maWcnXG5cbmNvbnN0IHdlYnNvY2tldFVybCA9IGAke2NvbmZpZy5hcGlCYXNlVXJsLnJlcGxhY2UoJ2h0dHAnLCAnd3MnKX0vZ2l0aHViL2V2ZW50c2BcblxuZXhwb3J0IGNsYXNzIEFQSSBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG4gIHRva2VuID0gbnVsbFxuICBpbml0aWFsaXppbmcgPSBmYWxzZVxuICBpbnN0YWxsYXRpb25zID0gbnVsbFxuICByZXBvc2l0b3JpZXMgPSBudWxsXG4gIHJlcG9JbnN0YWxsYXRpb25NYXAgPSBudWxsXG4gIGZlYXR1cmVzID0gbnVsbFxuICBzb2NrZXQgPSBudWxsXG5cbiAgYXN5bmMgX3JlcXVlc3QgKG9wdGlvbnMpIHtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdzdHJpbmcnKSB7XG4gICAgICBvcHRpb25zID0ge1xuICAgICAgICB1cmw6IG9wdGlvbnNcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy51cmwuc3RhcnRzV2l0aCgnLycpKSB7XG4gICAgICBvcHRpb25zLnVybCA9IGAke2NvbmZpZy5hcGlCYXNlVXJsfSR7b3B0aW9ucy51cmx9YFxuICAgIH1cblxuICAgIG9wdGlvbnMuaGVhZGVycyA9IE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMuaGVhZGVycylcbiAgICBpZiAodGhpcy50b2tlbiAmJiAhb3B0aW9ucy5oZWFkZXJzLkF1dGhvcml6YXRpb24pIHtcbiAgICAgIG9wdGlvbnMuaGVhZGVycy5BdXRob3JpemF0aW9uID0gYEJlYXJlciAke3RoaXMudG9rZW59YFxuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICByZXR1cm4gYXdhaXQgYXhpb3Mob3B0aW9ucylcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGlmIChlcnIucmVzcG9uc2U/LnN0YXR1cyA9PT0gNDAxKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0F1dGhlbnRpY2F0aW9uIGZhaWxlZC4nKVxuICAgICAgICB0aGlzLmVtaXQoJ2F1dGhlbnRpY2F0aW9uLWZhaWxlZCcsIGVyci5yZXNwb25zZSlcbiAgICAgIH1cblxuICAgICAgdGhyb3cgZXJyXG4gICAgfVxuICB9XG5cbiAgaW5pdCAoKSB7XG4gICAgaWYgKHRoaXMuaW5pdGlhbGl6aW5nKSB7XG4gICAgICByZXR1cm4gdGhpcy5pbml0aWFsaXppbmdcbiAgICB9XG5cbiAgICB0aGlzLmluaXRpYWxpemluZyA9IChhc3luYyAoKSA9PiB7XG4gICAgICB0aGlzLmluaXRFdmVudHMoKVxuXG4gICAgICBjb25zdCBpbnN0YWxsYXRpb25VcmwgPSBgJHtjb25maWcuYXBpQmFzZVVybH0vZ2l0aHViL2luc3RhbGxhdGlvbmBcbiAgICAgIGNvbnN0IHBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMod2luZG93LmxvY2F0aW9uLnNlYXJjaClcblxuICAgICAgLy8gSSBkb24ndCByZWFsbHkgdW5kZXJzdGFuZCB0aGUgY2FsbGJhY2sgcGFyYW1ldGVycyBidXQgYXMgbG9uZyBhc1xuICAgICAgLy8gKnNvbWV0aGluZyogaW5zdGFsbGF0aW9uIHJlbGF0ZWQgaGFzIGNoYW5nZWQgdGhlbiBpdHMgd29ydGggcmVmcmVzaGluZ1xuICAgICAgLy8gdGhlIGF1dGhlbnRpY2F0aW9uLlxuICAgICAgaWYgKHBhcmFtcy5nZXQoJ3NldHVwX2FjdGlvbicpICYmIHBhcmFtcy5nZXQoJ2luc3RhbGxhdGlvbl9pZCcpKSB7XG4gICAgICAgIHRoaXMuYmVnaW5Mb2dpbkZsb3coKVxuICAgICAgfVxuXG4gICAgICBpZiAocGFyYW1zLmdldCgnYmxvY2tlZCcpKSB7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4gdGhpcy5lbWl0KCdibG9ja2VkJykpXG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICBjb25zdCBwYXJhbSA9IHBhcmFtcy5nZXQoJ3Rva2VuJylcbiAgICAgIGlmICghd2luZG93LmxvY2FsU3RvcmFnZS5hdXRoX3Rva2VuICYmIHBhcmFtKSB7XG4gICAgICAgIHdpbmRvdy5oaXN0b3J5LnJlcGxhY2VTdGF0ZSh7fSwgbnVsbCwgd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lKVxuICAgICAgICB3aW5kb3cubG9jYWxTdG9yYWdlLmF1dGhfdG9rZW4gPSBwYXJhbVxuICAgICAgfVxuXG4gICAgICBpZiAod2luZG93LmxvY2FsU3RvcmFnZS5hdXRoX3Rva2VuKSB7XG4gICAgICAgIHRoaXMudG9rZW4gPSB3aW5kb3cubG9jYWxTdG9yYWdlLmF1dGhfdG9rZW5cbiAgICAgICAgY29uc3QgeyBkYXRhIH0gPSBhd2FpdCB0aGlzLl9yZXF1ZXN0KGluc3RhbGxhdGlvblVybClcbiAgICAgICAgY29uc3Qgc3VzcGVuZGVkID0gZGF0YS5pbnN0YWxsYXRpb25zLmZpbHRlcihpbnN0YWxsYXRpb24gPT4gaW5zdGFsbGF0aW9uLnN1c3BlbmRlZF9hdClcblxuICAgICAgICBpZiAoZGF0YS5pbnN0YWxsYXRpb25zLmxlbmd0aCA9PT0gc3VzcGVuZGVkLmxlbmd0aCkge1xuICAgICAgICAgIGNvbnNvbGUud2FybignTm8gR2l0SHViIGFwcCBpbnN0YWxsYXRpb24gZm91bmQgZm9yIGF1dGhlbnRpY2F0ZWQgdXNlci4nKVxuICAgICAgICAgIHRoaXMuZW1pdCgnYXBwLW5vdC1pbnN0YWxsZWQnKVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy51c2VybmFtZSA9IGRhdGEudXNlcm5hbWVcbiAgICAgICAgdGhpcy5pbnN0YWxsYXRpb25zID0gZGF0YS5pbnN0YWxsYXRpb25zXG4gICAgICAgIHRoaXMucmVwb3NpdG9yaWVzID0gZGF0YS5yZXBvc2l0b3JpZXNcbiAgICAgICAgdGhpcy5yZXBvSW5zdGFsbGF0aW9uTWFwID0gZGF0YS5yZXBvSW5zdGFsbGF0aW9uTWFwXG4gICAgICAgIHRoaXMuZW1pdCgnYXV0aGVudGljYXRlZCcpXG4gICAgICB9XG4gICAgfSkoKVxuXG4gICAgcmV0dXJuIHRoaXMuaW5pdGlhbGl6aW5nXG4gIH1cblxuICBpbml0RXZlbnRzICgpIHtcbiAgICBjb25zdCBidWZmZXJlZE1lc3NhZ2VzID0gW11cbiAgICBjb25zdCBpc09wZW4gPSAoKSA9PiB7XG4gICAgICByZXR1cm4gdGhpcy5zb2NrZXQucmVhZHlTdGF0ZSA9PT0gd2luZG93LldlYlNvY2tldC5PUEVOXG4gICAgfVxuXG4gICAgY29uc3Qgc2VuZCA9IChtZXNzYWdlKSA9PiB7XG4gICAgICBpZiAoaXNPcGVuKCkpIHtcbiAgICAgICAgdGhpcy5zb2NrZXQuc2VuZChtZXNzYWdlKVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgYnVmZmVyZWRNZXNzYWdlcy5wdXNoKG1lc3NhZ2UpXG4gICAgICBjb25zb2xlLmxvZyhcbiAgICAgICAgJ2J1ZmZlcmluZyB3ZWJzb2NrZXQgbWVzc2FnZScsXG4gICAgICAgIHsgcmVhZHlTdGF0ZTogdGhpcy5zb2NrZXQucmVhZHlTdGF0ZSB9LFxuICAgICAgICBtZXNzYWdlXG4gICAgICApXG4gICAgfVxuXG4gICAgY29uc3QgZmx1c2ggPSAoKSA9PiB7XG4gICAgICBsZXQgbWVzc2FnZVxuICAgICAgd2hpbGUgKChtZXNzYWdlID0gYnVmZmVyZWRNZXNzYWdlcy5zaGlmdCgpKSkge1xuICAgICAgICBjb25zb2xlLmxvZygnc2VuZGluZyBidWZmZXJlZCB3ZWJzb2NrZXQgbWVzc2FnZScsIG1lc3NhZ2UpXG4gICAgICAgIHRoaXMuc29ja2V0LnNlbmQobWVzc2FnZSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnNvY2tldCA9IG5ldyB3aW5kb3cuV2ViU29ja2V0KHdlYnNvY2tldFVybClcbiAgICB0aGlzLnNvY2tldC5vbm9wZW4gPSAoKSA9PiB7XG4gICAgICBjb25zb2xlLmxvZyhuZXcgRGF0ZSgpLCAnY29ubmVjdGVkIHRvIGNvbnNvbGUnKVxuICAgICAgZmx1c2goKVxuICAgICAgc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgICBzZW5kKEpTT04uc3RyaW5naWZ5KHsgbWVzc2FnZTogJ3BpbmcnIH0pKVxuICAgICAgfSwgMjAwMDApXG4gICAgfVxuXG4gICAgdGhpcy5zb2NrZXQub25jbG9zZSA9ICgpID0+IGNvbnNvbGUubG9nKG5ldyBEYXRlKCksICdkaXNjb25uZWN0ZWQgZnJvbSBzZXJ2ZXInKVxuICAgIHRoaXMuc29ja2V0Lm9uZXJyb3IgPSBlcnIgPT4gY29uc29sZS5lcnJvcihuZXcgRGF0ZSgpLCBlcnIpXG4gICAgdGhpcy5zb2NrZXQub25tZXNzYWdlID0gZXZlbnQgPT4ge1xuICAgICAgY29uc3QgbWVzc2FnZSA9IEpTT04ucGFyc2UoZXZlbnQuZGF0YSlcbiAgICAgIGlmIChtZXNzYWdlLmV2ZW50ID09PSAnd29ya2Zsb3dfcnVuJykge1xuICAgICAgICB0aGlzLmVtaXQoJ2J1aWxkLXVwZGF0ZScsIG1lc3NhZ2Uud29ya2Zsb3dfcnVuKVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMub24oJ2F1dGhlbnRpY2F0ZWQnLCAoKSA9PiB7XG4gICAgICBpZiAoIXRoaXMuaW5zdGFsbGF0aW9ucz8ubGVuZ3RoKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICB0aGlzLmZldGNoQXZhaWxhYmxlRmVhdHVyZXMoKVxuXG4gICAgICBzZW5kKEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgbWVzc2FnZTogJ2F1dGhvcml6ZScsXG4gICAgICAgIGRhdGE6IHRoaXMudG9rZW5cbiAgICAgIH0pKVxuICAgIH0pXG4gIH1cblxuICBiZWdpbkxvZ2luRmxvdyAoKSB7XG4gICAgd2luZG93LmxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCdhdXRoX3Rva2VuJylcbiAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGAke2NvbmZpZy5hcGlCYXNlVXJsfS9naXRodWIvYXV0aG9yaXplYFxuICB9XG5cbiAgYmVnaW5JbnN0YWxsQXBwRmxvdyAoKSB7XG4gICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBgaHR0cHM6Ly9naXRodWIuY29tL2FwcHMvJHtjb25maWcuZ2l0aHViQXBwTmFtZX0vaW5zdGFsbGF0aW9ucy9uZXdgXG4gIH1cblxuICBtYW5hZ2VJbnN0YWxsYXRpb25SZXBvcyAoaW5zdGFsbGF0aW9uSWQpIHtcbiAgICBjb25zdCBpbnN0YWxsYXRpb24gPSB0aGlzLmluc3RhbGxhdGlvbnMuZmluZChpbnN0YWxsYXRpb24gPT4gaW5zdGFsbGF0aW9uLmlkID09PSBpbnN0YWxsYXRpb25JZClcbiAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGluc3RhbGxhdGlvbi5odG1sX3VybFxuICB9XG5cbiAgaXNHaXRIdWJBdXRob3JpemVkICgpIHtcbiAgICByZXR1cm4gISF0aGlzLnRva2VuXG4gIH1cblxuICBpc0FwcFN1c3BlbmRlZEZvclJlcG9TZWxlY3Rpb24gKCkge1xuICAgIHJldHVybiAoXG4gICAgICB0aGlzLmluc3RhbGxhdGlvbnM/Lmxlbmd0aCA+IDAgJiZcbiAgICAgIHRoaXMuaW5zdGFsbGF0aW9ucz8uZXZlcnkoaW5zdGFsbGF0aW9uID0+IGluc3RhbGxhdGlvbi5zdXNwZW5kZWRfYXQpICYmXG4gICAgICB0aGlzLmluc3RhbGxhdGlvbnM/LnNvbWUoaW5zdGFsbGF0aW9uID0+IGluc3RhbGxhdGlvbi5yZXBvc2l0b3J5X3NlbGVjdGlvbiA9PT0gJ2FsbCcpXG4gICAgKVxuICB9XG5cbiAgaXNBcHBJbnN0YWxsZWQgKCkge1xuICAgIHJldHVybiB0aGlzLmluc3RhbGxhdGlvbnM/Lmxlbmd0aCAmJiB0aGlzLnJlcG9zaXRvcmllcz8ubGVuZ3RoXG4gIH1cblxuICBhc3luYyBmZXRjaFJlcG9CcmFuY2hlcyAocmVwbykge1xuICAgIGNvbnN0IGluc3RhbGxhdGlvbiA9IGVuY29kZVVSSUNvbXBvbmVudCh0aGlzLnJlcG9JbnN0YWxsYXRpb25NYXBbcmVwby5mdWxsX25hbWVdKVxuICAgIGNvbnN0IHJlcG9zaXRvcnkgPSBlbmNvZGVVUklDb21wb25lbnQocmVwby5mdWxsX25hbWUpXG4gICAgY29uc3QgeyBkYXRhIH0gPSBhd2FpdCB0aGlzLl9yZXF1ZXN0KFxuICAgICAgYC9naXRodWIvaW5zdGFsbGF0aW9uLyR7aW5zdGFsbGF0aW9ufS8ke3JlcG9zaXRvcnl9L2JyYW5jaGVzYFxuICAgIClcblxuICAgIHJldHVybiBkYXRhXG4gIH1cblxuICBhc3luYyBmZXRjaEJyYW5jaEtleWJvYXJkcyAocmVwbywgYnJhbmNoKSB7XG4gICAgY29uc3QgaW5zdGFsbGF0aW9uID0gZW5jb2RlVVJJQ29tcG9uZW50KHRoaXMucmVwb0luc3RhbGxhdGlvbk1hcFtyZXBvLmZ1bGxfbmFtZV0pXG4gICAgY29uc3QgcmVwb3NpdG9yeSA9IGVuY29kZVVSSUNvbXBvbmVudChyZXBvLmZ1bGxfbmFtZSlcbiAgICBjb25zdCB7IGRhdGEgfSA9IGF3YWl0IHRoaXMuX3JlcXVlc3QoXG4gICAgICBgL2dpdGh1Yi9pbnN0YWxsYXRpb24vJHtpbnN0YWxsYXRpb259LyR7cmVwb3NpdG9yeX0va2V5Ym9hcmRzLyR7YnJhbmNofWBcbiAgICApXG5cbiAgICByZXR1cm4gZGF0YVxuICB9XG5cbiAgYXN5bmMgZmV0Y2hMYXlvdXRBbmRLZXltYXAgKHJlcG8sIGJyYW5jaCwgeyBrZXlib2FyZCB9ID0ge30pIHtcbiAgICBjb25zdCBpbnN0YWxsYXRpb24gPSBlbmNvZGVVUklDb21wb25lbnQodGhpcy5yZXBvSW5zdGFsbGF0aW9uTWFwW3JlcG9dKVxuICAgIGNvbnN0IHJlcG9zaXRvcnkgPSBlbmNvZGVVUklDb21wb25lbnQocmVwbylcbiAgICBjb25zdCB1cmwgPSBuZXcgVVJMKGAke2NvbmZpZy5hcGlCYXNlVXJsfS9naXRodWIva2V5Ym9hcmQtZmlsZXMvJHtpbnN0YWxsYXRpb259LyR7cmVwb3NpdG9yeX1gKVxuICAgIGNvbnN0IHF1ZXJ5ID0gbmV3IFVSTFNlYXJjaFBhcmFtcygpXG5cbiAgICBpZiAoYnJhbmNoKSB7XG4gICAgICBxdWVyeS5zZXQoJ2JyYW5jaCcsIGJyYW5jaClcbiAgICB9XG4gICAgaWYgKGtleWJvYXJkKSB7XG4gICAgICBxdWVyeS5zZXQoJ2tleWJvYXJkJywga2V5Ym9hcmQpXG4gICAgfVxuXG4gICAgdXJsLnNlYXJjaCA9IHF1ZXJ5LnRvU3RyaW5nKClcblxuICAgIHRyeSB7XG4gICAgICBjb25zdCB7IGRhdGEgfSA9IGF3YWl0IHRoaXMuX3JlcXVlc3QodXJsLnRvU3RyaW5nKCkpXG4gICAgICBjb25zdCB7IGluZm86IHsgbGF5b3V0cyB9LCBrZXltYXAgfSA9IGRhdGFcbiAgICAgIGNvbnN0IGRlZmF1bHRMYXlvdXQgPSBPYmplY3Qua2V5cyhkYXRhLmluZm8ubGF5b3V0cylbMF1cbiAgICAgIGNvbnN0IHByZWZlcnJlZExheW91dCA9IGtleW1hcC5jaG9zZW5bJ3ptayxtYXRyaXhfdHJhbnNmb3JtJ11cbiAgICAgICAgPyBrZXltYXAuY2hvc2VuWyd6bWssbWF0cml4X3RyYW5zZm9ybSddLnJlcGxhY2UoL14mLywgJycpXG4gICAgICAgIDogbnVsbFxuXG4gICAgICBjb25zdCBsYXlvdXRNZXRhZGF0YSA9IChcbiAgICAgICAgbGF5b3V0c1twcmVmZXJyZWRMYXlvdXRdIHx8XG4gICAgICAgIGxheW91dHNbZGVmYXVsdExheW91dF1cbiAgICAgIClcbiAgICAgIGNvbnN0IGxheW91dCA9IGxheW91dE1ldGFkYXRhLmxheW91dFxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBsYXlvdXRNZXRhZGF0YSxcbiAgICAgICAgbGF5b3V0LFxuICAgICAgICBrZXltYXAsXG4gICAgICAgIGtleWJvYXJkczogZGF0YS5rZXlib2FyZHMsXG4gICAgICAgIGRlZmF1bHQ6IGRhdGEuZGVmYXVsdEtleW1hcCxcbiAgICAgICAgc2Vuc29yczogZGF0YS5zZW5zb3JzXG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBpZiAoZXJyLnJlc3BvbnNlPy5zdGF0dXMgPT09IDQwMCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gbG9hZCBrZXltYXAgYW5kIGxheW91dCBmcm9tIGdpdGh1YicsIGVyci5yZXNwb25zZS5kYXRhKVxuICAgICAgICB0aGlzLmVtaXQoJ3JlcG8tdmFsaWRhdGlvbi1lcnJvcicsIGVyci5yZXNwb25zZS5kYXRhKVxuICAgICAgfSBlbHNlIGlmIChlcnIucmVzcG9uc2U/LnN0YXR1cyA9PT0gNTAwICYmIGVyci5yZXNwb25zZS5kYXRhLm5hbWUgPT09ICdMYXlvdXRHZW5lcmF0aW9uRXJyb3InKSB7XG4gICAgICAgIHRoaXMuZW1pdCgnbGF5b3V0LWdlbmVyYXRpb24tZmFpbGVkJywgZXJyLnJlc3BvbnNlLmRhdGEpXG4gICAgICB9XG5cbiAgICAgIHRocm93IGVyclxuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGZldGNoQXZhaWxhYmxlRmVhdHVyZXMgKCkge1xuICAgIGlmICghdGhpcy5pc0dpdEh1YkF1dGhvcml6ZWQoKSkge1xuICAgICAgcmV0dXJuIHsgYmV0YUZlYXR1cmVzOiBbXSB9XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmZlYXR1cmVzKSB7XG4gICAgICB0aGlzLmZlYXR1cmVzID0gdGhpcy5fcmVxdWVzdChgJHtjb25maWcuYXBpQmFzZVVybH0vZ2l0aHViL2ZlYXR1cmVzYClcbiAgICB9XG5cbiAgICBjb25zdCB7IGRhdGEgfSA9IGF3YWl0IHRoaXMuZmVhdHVyZXNcbiAgICByZXR1cm4gZGF0YVxuICB9XG5cbiAgYXN5bmMgZmV0Y2hCdWlsZFN0YXR1cyAocmVwbywgYnJhbmNoKSB7XG4gICAgY29uc3QgaW5zdGFsbGF0aW9uID0gZW5jb2RlVVJJQ29tcG9uZW50KHRoaXMucmVwb0luc3RhbGxhdGlvbk1hcFtyZXBvXSlcbiAgICBjb25zdCByZXBvc2l0b3J5ID0gZW5jb2RlVVJJQ29tcG9uZW50KHJlcG8pXG4gICAgY29uc3QgdXJsID0gbmV3IFVSTChgJHtjb25maWcuYXBpQmFzZVVybH0vZ2l0aHViL2xhdGVzdC1ydW4vJHtpbnN0YWxsYXRpb259LyR7cmVwb3NpdG9yeX0vJHtlbmNvZGVVUklDb21wb25lbnQoYnJhbmNoKX1gKVxuXG4gICAgY29uc3QgeyBkYXRhIH0gPSBhd2FpdCB0aGlzLl9yZXF1ZXN0KHVybC50b1N0cmluZygpKVxuICAgIHJldHVybiBkYXRhXG4gIH1cblxuICBjb21taXRDaGFuZ2VzIChyZXBvLCBicmFuY2gsIGxheW91dCwga2V5bWFwLCBvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCB7XG4gICAgICBtZXNzYWdlID0gbnVsbCxcbiAgICAgIGV4cGVyaW1lbnRhbFNldHRpbmdzID0ge30sXG4gICAgICBrZXlib2FyZFxuICAgIH0gPSBvcHRpb25zXG4gICAgY29uc3QgaW5zdGFsbGF0aW9uID0gZW5jb2RlVVJJQ29tcG9uZW50KHRoaXMucmVwb0luc3RhbGxhdGlvbk1hcFtyZXBvXSlcbiAgICBjb25zdCByZXBvc2l0b3J5ID0gZW5jb2RlVVJJQ29tcG9uZW50KHJlcG8pXG4gICAgY29uc3QgdXJsID0gbmV3IFVSTChgJHtjb25maWcuYXBpQmFzZVVybH0vZ2l0aHViL2tleWJvYXJkLWZpbGVzLyR7aW5zdGFsbGF0aW9ufS8ke3JlcG9zaXRvcnl9LyR7ZW5jb2RlVVJJQ29tcG9uZW50KGJyYW5jaCl9YClcbiAgICBjb25zdCB7IGVuYWJsZUJlaGF2aW9yRWRpdGluZyA9IGZhbHNlIH0gPSBleHBlcmltZW50YWxTZXR0aW5nc1xuICAgIGNvbnN0IHF1ZXJ5ID0gbmV3IFVSTFNlYXJjaFBhcmFtcyh7XG4gICAgICBlbmFibGVCZWhhdmlvckVkaXRpbmdcbiAgICB9KVxuXG4gICAgaWYgKGtleWJvYXJkKSB7XG4gICAgICBxdWVyeS5zZXQoJ2tleWJvYXJkJywga2V5Ym9hcmQpXG4gICAgfVxuXG4gICAgdXJsLnNlYXJjaCA9IHF1ZXJ5LnRvU3RyaW5nKClcblxuICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KHtcbiAgICAgIHVybDogdXJsLnRvU3RyaW5nKCksXG4gICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgIGhlYWRlcnM6IHsgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyB9LFxuICAgICAgZGF0YTogeyBrZXlib2FyZCwgbGF5b3V0LCBrZXltYXAsIG1lc3NhZ2UsIGVuYWJsZUJlaGF2aW9yRWRpdGluZyB9XG4gICAgfSlcbiAgfVxufVxuXG5jb25zdCBhcGkgPSBuZXcgQVBJKClcbmV4cG9ydCBkZWZhdWx0IGFwaVxuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1syXS51c2VbMV0hLi9zdHlsZXMubW9kdWxlLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzJdLnVzZVsxXSEuL3N0eWxlcy5tb2R1bGUuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnXG5pbXBvcnQgeyB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnXG5cbmltcG9ydCBJY29uIGZyb20gJy4uLy4uL0NvbW1vbi9JY29uJ1xuaW1wb3J0IExpbmsgZnJvbSAnLi4vLi4vQ29tbW9uL0xpbmsnXG5pbXBvcnQgU3Bpbm5lciBmcm9tICcuLi8uLi9Db21tb24vU3Bpbm5lcidcbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9zdHlsZXMubW9kdWxlLmNzcydcblxuY29uc3QgZ29vZENvbmNsdXNpb25zID0gW1xuICAnc3VjY2Vzcydcbl1cblxuY29uc3QgYmFkQ29uY2x1c2lvbnMgPSBbXG4gICdhY3Rpb25fcmVxdWlyZWQnLFxuICAnY2FuY2VsbGVkJyxcbiAgJ2ZhaWx1cmUnLFxuICAnc2tpcHBlZCcsXG4gICdzdGFsZScsXG4gICd0aW1lZF9vdXQnXG5dXG5cbmZ1bmN0aW9uIEZ1enp5VGltZXN0YW1wIChwcm9wcykge1xuICBjb25zdCB7IHRpbWVzdGFtcCB9ID0gcHJvcHNcbiAgY29uc3QgW2Z1enp5LCBzZXRGdXp6eV0gPSB1c2VTdGF0ZShcbiAgICBtb21lbnQodGltZXN0YW1wKS5mcm9tTm93KClcbiAgKVxuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgc2V0RnV6enkobW9tZW50KHRpbWVzdGFtcCkuZnJvbU5vdygpKVxuICAgIGNvbnN0IGludGVydmFsID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgc2V0RnV6enkobW9tZW50KHRpbWVzdGFtcCkuZnJvbU5vdygpKVxuICAgIH0sIDYwICogMTAwMClcblxuICAgIHJldHVybiAoKSA9PiBjbGVhckludGVydmFsKGludGVydmFsKVxuICB9LCBbdGltZXN0YW1wLCBzZXRGdXp6eV0pXG5cbiAgcmV0dXJuIChcbiAgICA8c3BhbiB0aXRsZT17dGltZXN0YW1wLnRvSVNPU3RyaW5nKCl9PlxuICAgICAge2Z1enp5fVxuICAgIDwvc3Bhbj5cbiAgKVxufVxuXG5mdW5jdGlvbiBCdWlsZExpbmsgKHByb3BzKSB7XG4gIGNvbnN0IHsgbGF0ZXN0UnVuIH0gPSBwcm9wc1xuICBjb25zdCBtYXBwZWRJY29uID0gZ29vZENvbmNsdXNpb25zLmluY2x1ZGVzKGxhdGVzdFJ1bi5jb25jbHVzaW9uKVxuICAgID8gPEljb24gbmFtZT1cImNoZWNrXCIgLz5cbiAgICA6IGJhZENvbmNsdXNpb25zLmluY2x1ZGVzKGxhdGVzdFJ1bi5jb25jbHVzaW9uKVxuICAgICAgPyA8SWNvbiBuYW1lPVwieG1hcmtcIiAvPlxuICAgICAgOiA8U3Bpbm5lciAvPlxuXG4gIHJldHVybiAoXG4gICAgPExpbmtcbiAgICAgIGhyZWY9e2xhdGVzdFJ1bi5odG1sX3VybH1cbiAgICAgIGNsYXNzTmFtZT17c3R5bGVzLmJ1aWxkRGV0YWlsc31cbiAgICAgIGV4dGVybmFsPXt0cnVlfVxuICAgICAgc2hvd0V4dGVybmFsPXtmYWxzZX1cbiAgICA+XG4gICAgICA8c3BhbiBjbGFzc05hbWU9e3N0eWxlcy5idWlsZFN1bW1hcnl9PlxuICAgICAgICBGaXJtd2FyZSBidWlsZCAoPGNvZGU+e2xhdGVzdFJ1bi5oZWFkX3NoYS5zbGljZSgwLCA1KX08L2NvZGU+KSB7bWFwcGVkSWNvbn1cbiAgICAgICAgPGJyIC8+XG4gICAgICAgIDxGdXp6eVRpbWVzdGFtcCB0aW1lc3RhbXA9e25ldyBEYXRlKGxhdGVzdFJ1bi51cGRhdGVkX2F0KX0gLz5cbiAgICAgIDwvc3Bhbj5cbiAgICAgIDxJY29uXG4gICAgICAgIG5hbWU9XCJmaWxlLWFycm93LWRvd25cIlxuICAgICAgICBjbGFzc05hbWU9e1tcbiAgICAgICAgICBzdHlsZXMuYnVpbGRTdGF0dXMsXG4gICAgICAgICAgc3R5bGVzLmJ1aWxkU3VjY2Vzc1xuICAgICAgICBdLmpvaW4oJyAnKX1cbiAgICAgIC8+XG4gICAgPC9MaW5rPlxuICApXG59XG5cbkJ1aWxkTGluay5wcm9wVHlwZXMgPSB7XG4gIGxhdGVzdFJ1bjogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBpZDogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxuICAgIG5hbWU6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICBoZWFkX3NoYTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgIHN0YXR1czogUHJvcFR5cGVzLm9uZU9mKFtcbiAgICAgICdjb21wbGV0ZWQnLFxuICAgICAgJ2FjdGlvbl9yZXF1aXJlZCcsXG4gICAgICAnY2FuY2VsbGVkJyxcbiAgICAgICdmYWlsdXJlJyxcbiAgICAgICduZXV0cmFsJyxcbiAgICAgICdza2lwcGVkJyxcbiAgICAgICdzdGFsZScsXG4gICAgICAnc3VjY2VzcycsXG4gICAgICAndGltZWRfb3V0JyxcbiAgICAgICdpbl9wcm9ncmVzcycsXG4gICAgICAncXVldWVkJyxcbiAgICAgICdyZXF1ZXN0ZWQnLFxuICAgICAgJ3dhaXRpbmcnXG4gICAgXSkuaXNSZXF1aXJlZCxcbiAgICBjb25jbHVzaW9uOiBQcm9wVHlwZXMub25lT2YoW1xuICAgICAgbnVsbCxcbiAgICAgICdhY3Rpb25fcmVxdWlyZWQnLFxuICAgICAgJ2NhbmNlbGxlZCcsXG4gICAgICAnZmFpbHVyZScsXG4gICAgICAnbmV1dHJhbCcsXG4gICAgICAnc3VjY2VzcycsXG4gICAgICAnc2tpcHBlZCcsXG4gICAgICAnc3RhbGUnLFxuICAgICAgJ3RpbWVkX291dCdcbiAgICBdKSxcbiAgICBjcmVhdGVkX2F0OiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgdXBkYXRlZF9hdDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkXG4gIH0pXG59XG5cbmV4cG9ydCBkZWZhdWx0IEJ1aWxkTGlua1xuIiwiaW1wb3J0IHsgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCdcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcydcblxuaW1wb3J0IEFjdGlvbkJ1dHRvbiBmcm9tICcuLi8uLi8uLi9Db21tb24vQWN0aW9uQnV0dG9uJ1xuaW1wb3J0IERpYWxvZ0JveCBmcm9tICcuLi8uLi8uLi9Db21tb24vRGlhbG9nQm94J1xuaW1wb3J0IE1vZGFsIGZyb20gJy4uLy4uLy4uL0NvbW1vbi9Nb2RhbCdcblxuZnVuY3Rpb24gQ29tbWl0ICh7IG9uQ29uZmlybSwgb25DYW5jZWwgfSkge1xuICBjb25zdCBbbWVzc2FnZSwgc2V0TWVzc2FnZV0gPSB1c2VTdGF0ZSgnJylcblxuICByZXR1cm4gKFxuICAgIDxNb2RhbD5cbiAgICAgIDxEaWFsb2dCb3ggZGlzbWlzc1RleHQ9e251bGx9PlxuICAgICAgICA8aDI+Q29tbWl0IGtleW1hcCBjaGFuZ2VzPC9oMj5cbiAgICAgICAgPHRleHRhcmVhXG4gICAgICAgICAgc3R5bGU9e3sgd2lkdGg6ICcxMDAlJyB9fVxuICAgICAgICAgIHBsYWNlaG9sZGVyPSdNZXNzYWdlIChvcHRpb25hbCknXG4gICAgICAgICAgdmFsdWU9e21lc3NhZ2V9XG4gICAgICAgICAgb25DaGFuZ2U9e2V2ZW50ID0+IHtcbiAgICAgICAgICAgIHNldE1lc3NhZ2UoZXZlbnQudGFyZ2V0LnZhbHVlKVxuICAgICAgICAgIH19XG4gICAgICAgIC8+XG4gICAgICAgIDxwIHN0eWxlPXt7IHRleHRBbGlnbjogJ2NlbnRlcicsIGdhcDogJzEwcHgnIH19PlxuICAgICAgICAgIDxBY3Rpb25CdXR0b24gb25DbGljaz17KCkgPT4gb25Db25maXJtKG1lc3NhZ2UpfT5Db21taXQ8L0FjdGlvbkJ1dHRvbj5cbiAgICAgICAgICA8QWN0aW9uQnV0dG9uIG9uQ2xpY2s9e29uQ2FuY2VsfSBzZWNvbmRhcnk+Q2FuY2VsPC9BY3Rpb25CdXR0b24+XG4gICAgICAgIDwvcD5cbiAgICAgIDwvRGlhbG9nQm94PlxuICAgIDwvTW9kYWw+XG4gIClcbn1cblxuQ29tbWl0LnByb3BUeXBlcyA9IHtcbiAgb25Db25maXJtOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBvbkNhbmNlbDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxufVxuXG5leHBvcnQgZGVmYXVsdCBDb21taXRcbiIsImltcG9ydCB7IHVzZUNhbGxiYWNrIH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgeyB1c2VEaXNwYXRjaCwgdXNlU2VsZWN0b3IgfSBmcm9tICdyZWFjdC1yZWR1eCdcblxuaW1wb3J0IFNwaW5uZXIgZnJvbSAnLi4vQ29tbW9uL1NwaW5uZXInXG5pbXBvcnQgKiBhcyBhcGkgZnJvbSAnLi4vYXBpJ1xuXG5pbXBvcnQgZ2l0aHViIGZyb20gJy4vR2l0aHViL2FwaSdcbmltcG9ydCBCdWlsZExpbmsgZnJvbSAnLi9HaXRodWIvQnVpbGRMaW5rJ1xuaW1wb3J0IENvbW1pdCBmcm9tICcuL0dpdGh1Yi9EaWFsb2dzL0NvbW1pdCdcblxuY29uc3Qgc3RhdGVTZWxlY3RvciA9IHN0YXRlID0+IHN0YXRlXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFNvdXJjZUFjdGlvbnMgKCkge1xuICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKClcbiAgY29uc3Qgc3RhdGUgPSB1c2VTZWxlY3RvcihzdGF0ZVNlbGVjdG9yKVxuICBjb25zdCB7XG4gICAgc291cmNlLFxuICAgIHNvdXJjZU90aGVyLFxuICAgIGtleWJvYXJkLFxuICAgIF91bm1vZGlmaWVkS2V5bWFwLFxuICAgIHNhdmluZyxcbiAgICBleHBlcmltZW50YWxTZXR0aW5ncyxcbiAgICBsYXRlc3RCdWlsZFxuICB9ID0gc3RhdGVcblxuICBjb25zdCBoYXNDaGFuZ2VkID0ga2V5Ym9hcmQgJiYgIU9iamVjdC5pcyhrZXlib2FyZC5rZXltYXAsIF91bm1vZGlmaWVkS2V5bWFwKVxuXG4gIGZ1bmN0aW9uIG9wZW5Db21taXREaWFsb2cgKCkge1xuICAgIGRpc3BhdGNoKHsgdHlwZTogJ0NPTU1JVF9ESUFMT0dfT1BFTicgfSlcbiAgfVxuXG4gIGFzeW5jIGZ1bmN0aW9uIGhhbmRsZUNvbXBpbGUgKCkge1xuICAgIGNvbnN0IGtleWJvYXJkID0gc291cmNlT3RoZXIua2V5Ym9hcmRcbiAgICBjb25zdCB7IGtleW1hcCB9ID0gc3RhdGUua2V5Ym9hcmRcblxuICAgIHRyeSB7XG4gICAgICBjb25zdCB1cGRhdGVkID0gYXdhaXQgYXBpLnVwZGF0ZUtleW1hcChrZXlib2FyZCwga2V5bWFwKVxuICAgICAgZGlzcGF0Y2goe1xuICAgICAgICB0eXBlOiAnS0VZTUFQX1NBVkVfU1VDQ0VTUycsXG4gICAgICAgIGtleW1hcDogdXBkYXRlZFxuICAgICAgfSlcbiAgICB9IGNhdGNoIHtcbiAgICAgIGRpc3BhdGNoKHsgdHlwZTogJ0tFWU1BUF9TQVZFX0ZBSUxVUkUnIH0pXG4gICAgfVxuICB9XG5cbiAgY29uc3QgaGFuZGxlQ29tbWl0Q2hhbmdlcyA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uIChtZXNzYWdlKSB7XG4gICAgY29uc3QgeyByZXBvc2l0b3J5LCBicmFuY2ggfSA9IHNvdXJjZU90aGVyLmdpdGh1YlxuXG4gICAgOyhhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBkaXNwYXRjaCh7IHR5cGU6ICdDT01NSVRfRElBTE9HX0NMT1NFJyB9KVxuICAgICAgZGlzcGF0Y2goeyB0eXBlOiAnS0VZTUFQX1NBVkVfU1RBUlQnIH0pXG5cbiAgICAgIGNvbnN0IHsgbGF5b3V0LCBrZXltYXAgfSA9IGtleWJvYXJkXG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHsgZGF0YTogdXBkYXRlZCB9ID0gYXdhaXQgZ2l0aHViLmNvbW1pdENoYW5nZXMocmVwb3NpdG9yeSwgYnJhbmNoLCBsYXlvdXQsIGtleW1hcCwge1xuICAgICAgICAgIG1lc3NhZ2UsIGV4cGVyaW1lbnRhbFNldHRpbmdzLCBrZXlib2FyZDogc291cmNlT3RoZXIuZ2l0aHViLmtleWJvYXJkXG4gICAgICAgIH0pXG4gICAgICAgIGRpc3BhdGNoKHsgdHlwZTogJ0tFWU1BUF9TQVZFX1NVQ0NFU1MnLCBrZXltYXA6IHVwZGF0ZWQgfSlcbiAgICAgIH0gY2F0Y2gge1xuICAgICAgICBkaXNwYXRjaCh7IHR5cGU6ICdLRVlNQVBfU0FWRV9GQUlMVVJFJyB9KVxuICAgICAgfVxuICAgIH0pKClcbiAgfSwgW3NvdXJjZU90aGVyLCBrZXlib2FyZCwgZGlzcGF0Y2gsIGV4cGVyaW1lbnRhbFNldHRpbmdzXSlcblxuICByZXR1cm4gKFxuICAgIDxkaXYgaWQ9XCJhY3Rpb25zXCI+XG4gICAgICB7c291cmNlID09PSAnbG9jYWwnICYmIChcbiAgICAgICAgPGJ1dHRvbiBkaXNhYmxlZD17IWhhc0NoYW5nZWR9IG9uQ2xpY2s9e2hhbmRsZUNvbXBpbGV9PlxuICAgICAgICAgIFNhdmUgTG9jYWxcbiAgICAgICAgPC9idXR0b24+XG4gICAgICApfVxuICAgICAge3NvdXJjZSA9PT0gJ2dpdGh1YicgJiYgKFxuICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgdGl0bGU9XCJDb21taXQga2V5bWFwIGNoYW5nZXMgdG8gR2l0SHViIHJlcG9zaXRvcnlcIlxuICAgICAgICAgIGRpc2FibGVkPXshaGFzQ2hhbmdlZH1cbiAgICAgICAgICBvbkNsaWNrPXtvcGVuQ29tbWl0RGlhbG9nfVxuICAgICAgICA+XG4gICAgICAgICAge3NhdmluZyA/ICdTYXZpbmcnIDogJ0NvbW1pdCBDaGFuZ2VzJ31cbiAgICAgICAgICB7c2F2aW5nICYmIDxTcGlubmVyIC8+fVxuICAgICAgICA8L2J1dHRvbj5cbiAgICAgICl9XG4gICAgICB7c3RhdGUuY29tbWl0RGlhbG9nT3BlbiAmJiAoXG4gICAgICAgIDxDb21taXRcbiAgICAgICAgICBvbkNvbmZpcm09e2hhbmRsZUNvbW1pdENoYW5nZXN9XG4gICAgICAgICAgb25DYW5jZWw9eygpID0+IGRpc3BhdGNoKHsgdHlwZTogJ0NPTU1JVF9ESUFMT0dfQ0xPU0UnIH0pfVxuICAgICAgICAvPlxuICAgICAgKX1cblxuICAgICAge2xhdGVzdEJ1aWxkICYmIDxCdWlsZExpbmsgbGF0ZXN0UnVuPXtsYXRlc3RCdWlsZH0gLz59XG4gICAgPC9kaXY+XG4gIClcbn1cbiIsImltcG9ydCBMaW5rIGZyb20gJy4uL0NvbW1vbi9MaW5rJ1xuXG5leHBvcnQgY29uc3QgZ2l0aHViSXNzdWVzVXJsID0gJ2h0dHBzOi8vZ2l0aHViLmNvbS9uaWNrY291dHNvcy9rZXltYXAtZWRpdG9yL2lzc3VlJ1xuZXhwb3J0IGNvbnN0IGdpdGh1Yldpa2lMYXlvdXRzVXJsID0gJ2h0dHBzOi8vZ2l0aHViLmNvbS9uaWNrY291dHNvcy9rZXltYXAtZWRpdG9yL3dpa2kvRGVmaW5pbmcta2V5Ym9hcmQtbGF5b3V0cydcbmV4cG9ydCBjb25zdCBrZXltYXBMYXlvdXRUb29sc1VybCA9ICdodHRwczovL25pY2tjb3V0c29zLmdpdGh1Yi5pby9rZXltYXAtbGF5b3V0LXRvb2xzLydcbmV4cG9ydCBjb25zdCBkaXNjb3JkUHJvZmlsZVVybCA9ICdodHRwczovL2Rpc2NvcmQuY29tL3VzZXJzLzExNTUwNzk2NjU1NTE5MzM0NSdcblxuZXhwb3J0IGNvbnN0IEdpdEh1Yklzc3Vlc0xpbmsgPSAoXG4gIDxMaW5rIGV4dGVybmFsIGhyZWY9e2dpdGh1Yklzc3Vlc1VybH0+XG4gICAgS2V5bWFwIEVkaXRvciBJc3N1ZXNcbiAgPC9MaW5rPlxuKVxuXG5leHBvcnQgY29uc3QgR2l0SHViV2lraUxheW91dHNMaW5rID0gKFxuICA8TGluayBleHRlcm5hbCBocmVmPXtnaXRodWJXaWtpTGF5b3V0c1VybH0+XG4gICAgS2V5bWFwIEVkaXRvciBXaWtpOiBEZWZpbmluZyBrZXlib2FyZCBsYXlvdXRzXG4gIDwvTGluaz5cbilcblxuZXhwb3J0IGNvbnN0IGxheW91dFRvb2xzTGluayA9IChcbiAgPExpbmsgZXh0ZXJuYWwgaHJlZj17a2V5bWFwTGF5b3V0VG9vbHNVcmx9PlxuICAgIEtleW1hcCBMYXlvdXQgVG9vbHMgLSBIZWxwZXJcbiAgPC9MaW5rPlxuKVxuXG5leHBvcnQgY29uc3QgRGlzY29yZFByb2ZpbGVMaW5rID0gKFxuICA8TGluayBleHRlcm5hbCBocmVmPXtkaXNjb3JkUHJvZmlsZVVybH0+XG4gICAgRGlzY29yZCAtIG5pY2tjb3V0c29zIzQzNTFcbiAgPC9MaW5rPlxuKVxuXG5leHBvcnQgY29uc3QgR2VuZXJhbEhlbHBPZmZlckNvcHkgPSAoXG4gIDw+XG4gICAgPHA+XG4gICAgICBJZiB5b3UgYXJlIGxvb2tpbmcgZm9yIGhlbHAgaW4gZ2V0dGluZyB1cCBhbmQgcnVubmluZyBvciB3YW50IGEgYmV0dGVyXG4gICAgICB1bmRlcnN0YW5kaW5nIG9mIHRoZSBpc3N1ZSwgcGxlYXNlIGZlZWwgZnJlZSB0byByZWFjaCBvdXQgdG8gbWU6XG4gICAgPC9wPlxuICAgIDx1bD5cbiAgICAgIDxsaT57R2l0SHViSXNzdWVzTGlua308L2xpPlxuICAgICAgPGxpPntEaXNjb3JkUHJvZmlsZUxpbmt9PC9saT5cbiAgICA8L3VsPlxuICA8Lz5cbilcblxuZXhwb3J0IGNvbnN0IEtleW1hcExheW91dFJlc291cmNlcyA9IChcbiAgPHA+XG4gICAgRm9yIG1vcmUgaW5mb3JtYXRpb24gYWJvdXQgaG93IEtleW1hcCBFZGl0b3IgbGF5b3V0cyBhcmUgZGVmaW5lZCwgeW91IGNhblxuICAgIHJlYWQge0dpdEh1Yldpa2lMYXlvdXRzTGlua30sIGFuZCBpZiB5b3UgbmVlZCBhbiBlbnZpcm9ubWVudCB0byBxdWlja2x5IHRlc3RcbiAgICBjaGFuZ2VzIHRvIGEgbGF5b3V0IHRyeSB7bGF5b3V0VG9vbHNMaW5rfS5cbiAgPC9wPlxuKVxuIiwiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJ1xuXG5pbXBvcnQgRGlhbG9nQm94IGZyb20gJy4uL0NvbW1vbi9EaWFsb2dCb3gnXG5pbXBvcnQgTW9kYWwgZnJvbSAnLi4vQ29tbW9uL01vZGFsJ1xuaW1wb3J0IHsgR2l0SHViSXNzdWVzTGluayB9IGZyb20gJy4vc3VwcG9ydCdcblxuZnVuY3Rpb24gTGF5b3V0R2VuZXJhdGlvbkVycm9yIChwcm9wcykge1xuICBjb25zdCB7IG9uRGlzbWlzcyB9ID0gcHJvcHNcblxuICByZXR1cm4gKFxuICAgIDxNb2RhbD5cbiAgICAgIDxEaWFsb2dCb3ggb25EaXNtaXNzPXtvbkRpc21pc3N9PlxuICAgICAgICA8aDI+QXV0b21hdGljIExheW91dCBHZW5lcmF0aW9uIEZhaWxlZDwvaDI+XG4gICAgICAgIDxwPlxuICAgICAgICAgIE5vIGFjY29tcGFueWluZyBsYXlvdXQgd2FzIGZvdW5kIHdpdGggeW91ciBrZXltYXAgZmlsZSBhbmQgdGhlIEtleW1hcFxuICAgICAgICAgIEVkaXRvciB3YXMgdW5hYmxlIHRvIGdlbmVyYXRlIG9uZSBhdXRvbWF0aWNhbGx5IGZvciB5b3UuXG4gICAgICAgIDwvcD5cbiAgICAgICAgPHA+XG4gICAgICAgICAgU29tZXRoaW5nIHdlbnQgd3Jvbmcgd2l0aCB0aGUgYXR0ZW1wdGVkIGF1dG9tYXRpYyBsYXlvdXQgZ2VuZXJhdGlvblxuICAgICAgICAgIGZvciB5b3VyIGtleWJvYXJkIGFuZCB0aGVyZSdzIG5vIGF1dG9tYXRpYyB3YXkgdG8gcmVjb3ZlciwgYnV0IGlmIHlvdVxuICAgICAgICAgIHdhbnQgdG8gcmVhY2ggb3V0IGZvciBhc3Npc3RhbmNlIG1heWJlIHdlIGNhbiB3b3JrIHRvZ2V0aGVyIHRvIHJlc29sdmVcbiAgICAgICAgICBhbnkgdGVjaG5pY2FsIGlzc3VlcyBvciBlbHNlIGNyYWZ0IGEgbWFudWFsIGxheW91dCBmb3IgeW91ciBrZXlib2FyZC5cbiAgICAgICAgPC9wPlxuICAgICAgICA8cD5cbiAgICAgICAgICBTaGFyZSB5b3VyIGV4cGVyaWVuY2UgYXQge0dpdEh1Yklzc3Vlc0xpbmt9LlxuICAgICAgICA8L3A+XG4gICAgICA8L0RpYWxvZ0JveD5cbiAgICA8L01vZGFsPlxuICApXG59XG5cbkxheW91dEdlbmVyYXRpb25FcnJvci5wcm9wVHlwZXMgPSB7XG4gIG9uRGlzbWlzczogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxufVxuXG5leHBvcnQgZGVmYXVsdCBMYXlvdXRHZW5lcmF0aW9uRXJyb3JcbiIsImltcG9ydCBSZWFjdFNlbGVjdCBmcm9tICdyZWFjdC1zZWxlY3QnXG5pbXBvcnQgeyB1c2VTZWxlY3RvciB9IGZyb20gJ3JlYWN0LXJlZHV4J1xuXG5leHBvcnQgZnVuY3Rpb24gQ29udHJvbCAoeyBzdHlsZSA9IHt9LCBjaGlsZHJlbiB9KSB7XG4gIC8vIGJhc2VkIG9uIHJlYWN0LXNlbGVjdCdzIGNvbnRyb2wgaGVpZ2h0LCB3aGljaCBzaG91bGQgY29tZSBmcm9tIGEgdGhlbWUgaW5zdGVhZFxuICBjb25zdCBiYXNlU3R5bGUgPSB7XG4gICAgaGVpZ2h0OiAnMzhweCcsXG4gICAgbGluZUhlaWdodDogJzM4cHgnXG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxkaXYgc3R5bGU9e3sgLi4uYmFzZVN0eWxlLCAuLi5zdHlsZSB9fT5cbiAgICAgIHtjaGlsZHJlbn1cbiAgICA8L2Rpdj5cbiAgKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gQnV0dG9uICh7IGNoaWxkcmVuLCBzdHlsZSA9IHt9LCAuLi5yZXN0IH0pIHtcbiAgcmV0dXJuIChcbiAgICA8Q29udHJvbCBzdHlsZT17c3R5bGV9PlxuICAgICAgPGJ1dHRvbiBzdHlsZT17eyBoZWlnaHQ6ICcxMDAlJyB9fSB7Li4ucmVzdH0+XG4gICAgICAgIHtjaGlsZHJlbn1cbiAgICAgIDwvYnV0dG9uPlxuICAgIDwvQ29udHJvbD5cbiAgKVxufVxuXG5jb25zdCBkYXJrTW9kZVByZWZlcmVuY2UgPSB3aW5kb3cubWF0Y2hNZWRpYSgnKHByZWZlcnMtY29sb3Itc2NoZW1lOiBkYXJrKScpXG5jb25zdCBpbnZlcnRlZE5ldXRyYWxDb2xvcnMgPSBbMCwgNSwgMTAsIDIwLCAzMCwgNDAsIDUwLCA2MCwgNzAsIDgwLCA5MF0ucmVkdWNlKChjb2xvcnMsIGkpID0+IHtcbiAgY29sb3JzW2BuZXV0cmFsJHtpfWBdID0gYGhzbCgwLCAwJSwgJHtpfSUpYFxuICByZXR1cm4gY29sb3JzXG59LCB7fSlcblxuZXhwb3J0IGZ1bmN0aW9uIFNlbGVjdCAoeyBsYWJlbCwgLi4ucmVzdCB9KSB7XG4gIGNvbnN0IHsgdGhlbWUgfSA9IHVzZVNlbGVjdG9yKHN0YXRlID0+IHN0YXRlKVxuICBjb25zdCBpc0RhcmsgPSB0aGVtZSA9PT0gJ2RhcmsnIHx8ICh0aGVtZSA9PT0gJ3N5c3RlbScgJiYgZGFya01vZGVQcmVmZXJlbmNlLm1hdGNoZXMpXG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IHN0eWxlPXt7XG4gICAgICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcbiAgICAgIHdpZHRoOiAnYXV0bydcbiAgICB9fT5cbiAgICAgIDxsYWJlbCBzdHlsZT17e1xuICAgICAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICBmb250U2l6ZTogJzEyMCUnLFxuICAgICAgICBjb2xvcjogJ3ZhcigtLWZnKSdcbiAgICAgIH19PlxuICAgICAgICB7bGFiZWx9XG4gICAgICA8L2xhYmVsPlxuICAgICAgPFJlYWN0U2VsZWN0XG4gICAgICAgIHN0eWxlcz17e1xuICAgICAgICAgIGNvbnRhaW5lcjogKGJhc2VTdHlsZXMsIHN0YXRlKSA9PiAoe1xuICAgICAgICAgICAgLi4uYmFzZVN0eWxlcyxcbiAgICAgICAgICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snXG4gICAgICAgICAgfSksXG4gICAgICAgICAgbWVudTogKGJhc2VTdHlsZXMpID0+ICh7XG4gICAgICAgICAgICAuLi5iYXNlU3R5bGVzLFxuICAgICAgICAgICAgd2lkdGg6ICdtYXgtY29udGVudCcsXG4gICAgICAgICAgICB6SW5kZXg6IDEwXG4gICAgICAgICAgfSlcbiAgICAgICAgfX1cbiAgICAgICAgdGhlbWU9e3RoZW1lID0+ICh7XG4gICAgICAgICAgLi4udGhlbWUsXG4gICAgICAgICAgY29sb3JzOiB7XG4gICAgICAgICAgICAuLi50aGVtZS5jb2xvcnMsXG4gICAgICAgICAgICAuLi4oaXNEYXJrID8gaW52ZXJ0ZWROZXV0cmFsQ29sb3JzIDoge30pXG4gICAgICAgICAgfVxuICAgICAgICB9KX1cbiAgICAgICAgaXNTZWFyY2hhYmxlPXtmYWxzZX1cbiAgICAgICAgey4uLnJlc3R9XG4gICAgICAvPlxuICAgIDwvZGl2PlxuICApXG59XG4iLCJpbXBvcnQgeyBmaW5kIH0gZnJvbSAnbG9kYXNoJ1xuaW1wb3J0IHsgdXNlQ2FsbGJhY2ssIHVzZUVmZmVjdCwgdXNlTWVtbywgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCdcblxuaW1wb3J0ICogYXMgYXBpIGZyb20gJy4uLy4uL2FwaSdcbmltcG9ydCBMYXlvdXRHZW5lcmF0aW9uRXJyb3IgZnJvbSAnLi4vLi4vRGlhbG9ncy9MYXlvdXRHZW5lcmF0aW9uRXJyb3InXG5pbXBvcnQgeyBTZWxlY3QgfSBmcm9tICcuLi9Db250cm9scydcblxuZnVuY3Rpb24gTG9jYWxQaWNrZXIgKHsgb25TZWxlY3QsIG9uRXJyb3IgfSkge1xuICBjb25zdCBba2V5Ym9hcmRzLCBzZXRLZXlib2FyZHNdID0gdXNlU3RhdGUoW10pXG4gIGNvbnN0IFtrZXlib2FyZCwgc2V0S2V5Ym9hcmRdID0gdXNlU3RhdGUobnVsbClcblxuICBjb25zdCBjaG9pY2VzID0gdXNlTWVtbygoKSA9PiAoXG4gICAga2V5Ym9hcmRzLm1hcChuYW1lID0+ICh7IGlkOiBuYW1lLCBuYW1lIH0pKVxuICApLCBba2V5Ym9hcmRzXSlcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIChhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBjb25zdCBrZXlib2FyZHMgPSBhd2FpdCBhcGkubG9hZEF2YWlsYWJsZUtleWJvYXJkcygpXG4gICAgICBjb25zdCBwZXJzaXN0ZWRLZXlib2FyZCA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2xvY2FsU291cmNlU2VsZWN0ZWRLZXlib2FyZCcpIHx8ICdudWxsJylcbiAgICAgIGNvbnN0IGluaXRpYWxTZWxlY3Rpb24gPSBrZXlib2FyZHMuaW5jbHVkZXMocGVyc2lzdGVkS2V5Ym9hcmQpXG4gICAgICAgID8gcGVyc2lzdGVkS2V5Ym9hcmRcbiAgICAgICAgOiBrZXlib2FyZHNbMF1cblxuICAgICAgc2V0S2V5Ym9hcmRzKGtleWJvYXJkcylcbiAgICAgIHNldEtleWJvYXJkKGluaXRpYWxTZWxlY3Rpb24pXG4gICAgfSkoKVxuICB9LCBbc2V0S2V5Ym9hcmRzLCBzZXRLZXlib2FyZF0pXG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAoYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGtleWJvYXJkKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY29uc3QgeyBpbmZvLCBrZXltYXAsIHNlbnNvcnMgfSA9IGF3YWl0IGFwaS5sb2FkS2V5Ym9hcmRGaWxlcyhrZXlib2FyZClcbiAgICAgICAgICBjb25zdCB7IGxheW91dHMgfSA9IGluZm9cbiAgICAgICAgICBjb25zdCBwcmVmZXJyZWRMYXlvdXQgPSBrZXltYXAuY2hvc2VuWyd6bWssbWF0cml4X3RyYW5zZm9ybSddXG4gICAgICAgICAgICA/IGtleW1hcC5jaG9zZW5bJ3ptayxtYXRyaXhfdHJhbnNmb3JtJ10ucmVwbGFjZSgvXiYvLCAnJylcbiAgICAgICAgICAgIDogbnVsbFxuXG4gICAgICAgICAgY29uc3QgZGVmYXVsdExheW91dCA9IE9iamVjdC5rZXlzKGxheW91dHMpWzBdXG4gICAgICAgICAgY29uc3QgbGF5b3V0TWV0YWRhdGEgPSAoXG4gICAgICAgICAgICBsYXlvdXRzW3ByZWZlcnJlZExheW91dF0gfHxcbiAgICAgICAgICAgIGxheW91dHNbZGVmYXVsdExheW91dF1cbiAgICAgICAgICApXG5cbiAgICAgICAgICBvblNlbGVjdCh7XG4gICAgICAgICAgICBzb3VyY2U6ICdsb2NhbCcsXG4gICAgICAgICAgICBrZXlib2FyZCxcbiAgICAgICAgICAgIGxheW91dE1ldGFkYXRhLFxuICAgICAgICAgICAgbGF5b3V0OiBsYXlvdXRNZXRhZGF0YS5sYXlvdXQsXG4gICAgICAgICAgICBrZXltYXAsXG4gICAgICAgICAgICBzZW5zb3JzXG4gICAgICAgICAgfSlcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgaWYgKGVyci5yZXNwb25zZSkge1xuICAgICAgICAgICAgY29uc3QgZXJyb3IgPSBhd2FpdCBlcnIucmVzcG9uc2UuanNvbigpXG4gICAgICAgICAgICBpZiAoZXJyb3IubmFtZSA9PT0gJ0xheW91dEdlbmVyYXRpb25FcnJvcicpIHtcbiAgICAgICAgICAgICAgb25FcnJvcih7IGRpYWxvZzogTGF5b3V0R2VuZXJhdGlvbkVycm9yIH0pXG4gICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHRocm93IGVyclxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSkoKVxuICB9LCBbb25TZWxlY3QsIG9uRXJyb3IsIGtleWJvYXJkXSlcblxuICBjb25zdCBoYW5kbGVTZWxlY3RLZXlib2FyZCA9IHVzZUNhbGxiYWNrKCh7IGlkOiBrZXlib2FyZCB9KSA9PiB7XG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2xvY2FsU291cmNlU2VsZWN0ZWRLZXlib2FyZCcsIEpTT04uc3RyaW5naWZ5KGtleWJvYXJkKSlcbiAgICBzZXRLZXlib2FyZChrZXlib2FyZClcbiAgfSwgW3NldEtleWJvYXJkXSlcblxuICBjb25zdCBzZWxlY3Rpb24gPSBmaW5kKGNob2ljZXMsIHsgaWQ6IGtleWJvYXJkIH0pXG5cbiAgcmV0dXJuIChcbiAgICA8U2VsZWN0XG4gICAgICBsYWJlbD1cIktleWJvYXJkXCJcbiAgICAgIHZhbHVlPXtzZWxlY3Rpb259XG4gICAgICBvcHRpb25zPXtjaG9pY2VzfVxuICAgICAgb25DaGFuZ2U9e2hhbmRsZVNlbGVjdEtleWJvYXJkfVxuICAgICAgZ2V0T3B0aW9uVmFsdWU9e29wdGlvbiA9PiBvcHRpb24uaWR9XG4gICAgICBnZXRPcHRpb25MYWJlbD17b3B0aW9uID0+IG9wdGlvbi5uYW1lfVxuICAgIC8+XG4gIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgTG9jYWxQaWNrZXJcbiIsImltcG9ydCBMaW5rIGZyb20gJy4uLy4uLy4uL0NvbW1vbi9MaW5rJ1xuaW1wb3J0IERpYWxvZ0JveCBmcm9tICcuLi8uLi8uLi9Db21tb24vRGlhbG9nQm94J1xuaW1wb3J0IE1vZGFsIGZyb20gJy4uLy4uLy4uL0NvbW1vbi9Nb2RhbCdcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gRGVtb0hlbHBEaWFsb2cgKHByb3BzKSB7XG4gIGNvbnN0IGRlbW9SZXBvVXJsID0gJ2h0dHBzOi8vZ2l0aHViLmNvbS9uaWNrY291dHNvcy96bWstY29uZmlnLWNvcm5lLWRlbW8nXG4gIGNvbnN0IHRlbXBsYXRlVXJsID0gJ2h0dHBzOi8vZ2l0aHViLmNvbS9uaWNrY291dHNvcy96bWstY29uZmlnLWNvcm5lLWRlbW8vZ2VuZXJhdGUnXG4gIGNvbnN0IGRlbW9MaW5rID0gPExpbmsgaHJlZj17ZGVtb1JlcG9Vcmx9IGV4dGVybmFsPkdpdEh1YiBSZXBvPC9MaW5rPlxuXG4gIHJldHVybiAoXG4gICAgPE1vZGFsPlxuICAgICAgPERpYWxvZ0JveCB7Li4ucHJvcHN9PlxuICAgICAgICA8aDI+S2V5bWFwIEVkaXRvciBEZW1vPC9oMj5cbiAgICAgICAgPHA+XG4gICAgICAgICAgV2VsY29tZSEgVGhpcyBkZW1vIGtleWJvYXJkIGlzIHByb3ZpZGVkIHRvIGxldCB5b3UgZXhwZXJpbWVudCB3aXRoIHRoZVxuICAgICAgICAgIGtleW1hcCBlZGl0b3IgYmVmb3JlIHNldHRpbmcgdXAgeW91ciBvd24gcmVwb3NpdG9yeS5cbiAgICAgICAgPC9wPlxuICAgICAgICA8aDM+RmVhdHVyZXM8L2gzPlxuICAgICAgICA8dWw+XG4gICAgICAgICAgPGxpPlxuICAgICAgICAgICAgPHN0cm9uZz5XWVNJV1lHIEVkaXRpbmc8L3N0cm9uZz4uIEp1c3QgY2xpY2sgb24ga2V5IGFuZCBiZWhhdmlvdXJcbiAgICAgICAgICAgIGJpbmRpbmdzIHRvIG1ha2UgY2hhbmdlcywgYWRkIG9yIHJlbW92ZSBsYXllcnMgaW4gdGhlIHNpZGViYXIuXG4gICAgICAgICAgPC9saT5cbiAgICAgICAgICA8bGk+XG4gICAgICAgICAgICA8c3Ryb25nPktleW1hcCBnZW5lcmF0aW9uPC9zdHJvbmc+LiBUaGUgZWRpdG9yIGNhbiBleHBvcnQga2V5bWFwIHRvXG4gICAgICAgICAgICBaTUsncyBzeW50YXggKHdoZW4gcnVubmluZyBsb2NhbGx5IG9yIGludGVncmF0ZWQgd2l0aCBHaXRIdWIpLCBhbmRcbiAgICAgICAgICAgIHdpbGwgZXZlbiBhdHRlbXB0IHRvIGZvcm1hdCB0aGUgPGNvZGU+LmtleW1hcDwvY29kZT4gZmlsZSBmb3IgYmV0dGVyXG4gICAgICAgICAgICByZWFkYWJpbGl0eS5cbiAgICAgICAgICA8L2xpPlxuICAgICAgICAgIDxsaT5cbiAgICAgICAgICAgIDxzdHJvbmc+RGV2aWNldHJlZSBwYXJzaW5nPC9zdHJvbmc+LiA8ZW0+KEV4cGVyaW1lbnRhbCEpPC9lbT4gUmVhZFxuICAgICAgICAgICAgYW5kIHdyaXRlIHRvIHlvdXIgZXhpc3RpbmcgWk1LIDxjb2RlPi5rZXltYXA8L2NvZGU+IGZpbGUgc28gdGhhdCB5b3VcbiAgICAgICAgICAgIGNhbiBzdGlsbCB1c2UgWk1LIGZlYXR1cmVzIHRoYXQgdGhlIGFwcCBkb2Vzbid0IHN1cHBvcnQgeWV0LlxuICAgICAgICAgIDwvbGk+XG4gICAgICAgIDwvdWw+XG4gICAgICAgIDxoMz5XaGF0J3MgbmV4dD88L2gzPlxuICAgICAgICA8cD5cbiAgICAgICAgICBJZiB5b3UgbGlrZSB0aGUgZWRpdG9yLCB0cnkgaW50ZWdyYXRpbmcgd2l0aCB5b3VyIG93biBHaXRIdWIgaG9zdGVkXG4gICAgICAgICAga2V5Ym9hcmQgY29uZmlnLiA8TGluayBocmVmPXt0ZW1wbGF0ZVVybH0gZXh0ZXJuYWw+VXNlIGl0IGFzIGFcbiAgICAgICAgICB0ZW1wbGF0ZTwvTGluaz4gZm9yIHlvdXIgb3duLCBvciBqdXN0IHJlYWQgdGhyb3VnaCB0aGUge2RlbW9MaW5rfSBmb3JcbiAgICAgICAgICB0aGlzIGtleWJvYXJkIHRvIGxlYXJuIHdoYXQgdG8gYXBwbHkgdG8geW91ciBleGlzdGluZyBrZXlib2FyZC5cbiAgICAgICAgPC9wPlxuICAgICAgPC9EaWFsb2dCb3g+XG4gICAgPC9Nb2RhbD5cbiAgKVxufVxuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1syXS51c2VbMV0hLi9zdHlsZS5tb2R1bGUuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMl0udXNlWzFdIS4vc3R5bGUubW9kdWxlLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCB7IHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCdcbmltcG9ydCBJY29uIGZyb20gJy4uLy4uL0NvbW1vbi9JY29uJ1xuXG5pbXBvcnQgeyBCdXR0b24gfSBmcm9tICcuLi9Db250cm9scydcbmltcG9ydCBEZW1vSGVscERpYWxvZyBmcm9tICcuL0RpYWxvZ3MvRGVtb0hlbHBEaWFsb2cnXG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vc3R5bGUubW9kdWxlLmNzcydcblxuZnVuY3Rpb24gRGVtb1BpY2tlciAoeyBvblNlbGVjdCB9KSB7XG4gIGNvbnN0IFtzaG93RGVtb0hlbHBEaWFsb2csIHNldFNob3dEZW1vSGVscERpYWxvZ10gPSB1c2VTdGF0ZShmYWxzZSlcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIChhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBjb25zdCB7IGxheW91dCwga2V5bWFwIH0gPSBhd2FpdCBpbXBvcnQoJy4vZGF0YS9kZW1vLmpzb24nKVxuICAgICAgb25TZWxlY3QoeyBzb3VyY2U6ICdkZW1vJywgbGF5b3V0LCBrZXltYXAgfSlcbiAgICB9KSgpXG4gIH0sIFtvblNlbGVjdF0pXG5cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPEJ1dHRvblxuICAgICAgICBzdHlsZT17eyBiYWNrZ3JvdW5kOiAnbm9uZScsIGJvcmRlcjogJ25vbmUnIH19XG4gICAgICAgIG9uQ2xpY2s9eygpID0+IHNldFNob3dEZW1vSGVscERpYWxvZyh0cnVlKX1cbiAgICAgID5cbiAgICAgICAgPEljb25cbiAgICAgICAgICBuYW1lPVwiaW5mb1wiXG4gICAgICAgICAgY2xhc3NOYW1lPXtzdHlsZXMuaGVscH1cbiAgICAgICAgLz4gV2hhdCBpcyB0aGlzP1xuICAgICAgPC9CdXR0b24+XG4gICAgICB7c2hvd0RlbW9IZWxwRGlhbG9nICYmIChcbiAgICAgICAgPERlbW9IZWxwRGlhbG9nIG9uRGlzbWlzcz17KCkgPT4gc2V0U2hvd0RlbW9IZWxwRGlhbG9nKGZhbHNlKX0gLz5cbiAgICAgICl9XG4gICAgPC8+XG4gIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgRGVtb1BpY2tlclxuIiwiaW1wb3J0IERpYWxvZ0JveCBmcm9tICcuLi8uLi9Db21tb24vRGlhbG9nQm94J1xuaW1wb3J0IE1vZGFsIGZyb20gJy4uLy4uL0NvbW1vbi9Nb2RhbCdcblxuZnVuY3Rpb24gZmlsZUZyb21UaXRsZSAodGl0bGUpIHtcbiAgaWYgKHRpdGxlID09PSAnSW5mb1ZhbGlkYXRpb25FcnJvcicpIHtcbiAgICByZXR1cm4gJ2NvbmZpZy9pbmZvLmpzb24nXG4gIH0gZWxzZSBpZiAodGl0bGUgPT09ICdLZXltYXBWYWxpZGF0aW9uRXJyb3InKSB7XG4gICAgcmV0dXJuICdjb25maWcva2V5bWFwLmpzb24nXG4gIH1cbn1cblxuY29uc3QgbGlzdFN0eWxlID0ge1xuICBtYXhIZWlnaHQ6ICczMDBweCcsXG4gIG92ZXJmbG93OiAnYXV0bycsXG4gIHBhZGRpbmc6ICcxMHB4JyxcbiAgZm9udEZhbWlseTogJ21vbm9zcGFjZScsXG4gIGZvbnRTaXplOiAnODAlJyxcbiAgYmFja2dyb3VuZENvbG9yOiAncmdiKDIzOSwgMjM5LCAyMzksIDAuNSknXG59XG5cbmNvbnN0IGxpc3RJdGVtU3R5bGUgPSB7IG1hcmdpbjogJzEwcHgnIH1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gVmFsaWRhdGlvbkVycm9ycyAocHJvcHMpIHtcbiAgY29uc3QgeyBvbkRpc21pc3MsIHRpdGxlLCBlcnJvcnMgfSA9IHByb3BzXG4gIGNvbnN0IGZpbGUgPSBmaWxlRnJvbVRpdGxlKHRpdGxlKVxuXG4gIHJldHVybiAoXG4gICAgPE1vZGFsPlxuICAgICAgPERpYWxvZ0JveCBvbkRpc21pc3M9e29uRGlzbWlzc30+XG4gICAgICAgIDxoMj57dGl0bGV9PC9oMj5cbiAgICAgICAge2ZpbGUgJiYgKFxuICAgICAgICAgIDxwPkVycm9ycyBpbiB0aGUgZmlsZSA8Y29kZT57ZmlsZX08L2NvZGU+LjwvcD5cbiAgICAgICAgKX1cbiAgICAgICAgPHVsIHN0eWxlPXtsaXN0U3R5bGV9PlxuICAgICAgICAgIHtlcnJvcnMubWFwKChlcnJvciwgaSkgPT4gKFxuICAgICAgICAgICAgPGxpIGtleT17aX0gc3R5bGU9e2xpc3RJdGVtU3R5bGV9PlxuICAgICAgICAgICAgICB7ZXJyb3J9XG4gICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICkpfVxuICAgICAgICA8L3VsPlxuICAgICAgPC9EaWFsb2dCb3g+XG4gICAgPC9Nb2RhbD5cbiAgKVxufVxuIiwiY29uc3QgUkVQT1NJVE9SWSA9ICdzZWxlY3RlZEdpdGh1YlJlcG9zaXRvcnknXG5jb25zdCBCUkFOQ0ggPSAnc2VsZWN0ZWRHaXRodWJCcmFuY2gnXG5jb25zdCBLRVlCT0FSRCA9ICdzZWxlY3RlZEdpdGh1YktleWJvYXJkJ1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0UGVyc2lzdGVkUmVwb3NpdG9yeSAoKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oUkVQT1NJVE9SWSkpXG4gIH0gY2F0Y2gge1xuICAgIHJldHVybiBudWxsXG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNldFBlcnNpc3RlZFJlcG9zaXRvcnkgKHJlcG9zaXRvcnkpIHtcbiAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oUkVQT1NJVE9SWSwgSlNPTi5zdHJpbmdpZnkocmVwb3NpdG9yeSkpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRQZXJzaXN0ZWRCcmFuY2ggKHJlcG9JZCkge1xuICB0cnkge1xuICAgIHJldHVybiBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKGAke0JSQU5DSH06JHtyZXBvSWR9YCkpXG4gIH0gY2F0Y2gge1xuICAgIHJldHVybiBudWxsXG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFBlcnNpc3RlZEtleWJvYXJkIChyZXBvSWQsIGJyYW5jaCkge1xuICB0cnkge1xuICAgIHJldHVybiBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKGAke0tFWUJPQVJEfToke3JlcG9JZH06JHticmFuY2h9YCkpXG4gIH0gY2F0Y2gge1xuICAgIHJldHVybiBudWxsXG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNldFBlcnNpc3RlZEJyYW5jaCAocmVwb0lkLCBicmFuY2gpIHtcbiAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oYCR7QlJBTkNIfToke3JlcG9JZH1gLCBKU09OLnN0cmluZ2lmeShicmFuY2gpKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gc2V0UGVyc2lzdGVkS2V5Ym9hcmQgKHJlcG9JZCwgYnJhbmNoLCBrZXlib2FyZCkge1xuICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShgJHtLRVlCT0FSRH06JHtyZXBvSWR9OiR7YnJhbmNofWAsIEpTT04uc3RyaW5naWZ5KGtleWJvYXJkKSlcbn1cbiIsImltcG9ydCB7IGNyZWF0ZVNsaWNlIH0gZnJvbSAnQHJlZHV4anMvdG9vbGtpdCdcbmltcG9ydCBmaW5kIGZyb20gJ2xvZGFzaC9maW5kJ1xuaW1wb3J0IG1hcCBmcm9tICdsb2Rhc2gvbWFwJ1xuaW1wb3J0IHsgdXNlTWVtbywgdXNlUmVkdWNlciB9IGZyb20gJ3JlYWN0J1xuXG5pbXBvcnQgZ2l0aHViIGZyb20gJy4vYXBpJ1xuaW1wb3J0ICogYXMgc3RvcmFnZSBmcm9tICcuL3N0b3JhZ2UnXG5cbmNvbnN0IElOSVRJQUxfU1RBVEUgPSB7XG4gIGJsb2NrZWQ6IGZhbHNlLFxuICBpbml0aWFsaXplZDogZmFsc2UsXG4gIHNlbGVjdGVkUmVwb0lkOiBudWxsLFxuICBzZWxlY3RlZEJyYW5jaE5hbWU6IG51bGwsXG4gIHNlbGVjdGVkS2V5Ym9hcmQ6IG51bGwsXG4gIGJyYW5jaGVzOiBbXSxcbiAga2V5Ym9hcmRzOiBbXSxcbiAgbG9hZGluZzogZmFsc2UsXG4gIHdhcm5pbmdGbGFnczogW11cbn1cblxuZXhwb3J0IGNvbnN0IHBpY2tlclNsaWNlID0gY3JlYXRlU2xpY2Uoe1xuICBuYW1lOiAnZ2l0aHViLXBpY2tlcicsXG4gIGluaXRpYWxTdGF0ZTogSU5JVElBTF9TVEFURSxcbiAgcmVkdWNlcnM6IHtcbiAgICBjbGVhclNlbGVjdGlvbiAoc3RhdGUpIHtcbiAgICAgIHN0YXRlLndhcm5pbmdGbGFncyA9IFtdXG4gICAgICBzdGF0ZS5sb2FkaW5nID0gZmFsc2VcbiAgICB9LFxuICAgIGludGVncmF0aW9uSW5pdGlhbGl6ZWQgKHN0YXRlKSB7XG4gICAgICBjb25zdCBwZXJzaXN0ZWRSZXBvSWQgPSBzdG9yYWdlLmdldFBlcnNpc3RlZFJlcG9zaXRvcnkoKVxuICAgICAgY29uc3QgcmVwb3NpdG9yaWVzID0gZ2l0aHViLnJlcG9zaXRvcmllcyB8fCBbXVxuICAgICAgbGV0IHNlbGVjdGVkUmVwb0lkXG5cbiAgICAgIGlmIChmaW5kKHJlcG9zaXRvcmllcywgeyBpZDogcGVyc2lzdGVkUmVwb0lkIH0pKSB7XG4gICAgICAgIHNlbGVjdGVkUmVwb0lkID0gcGVyc2lzdGVkUmVwb0lkXG4gICAgICB9IGVsc2UgaWYgKHJlcG9zaXRvcmllcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHNlbGVjdGVkUmVwb0lkID0gcmVwb3NpdG9yaWVzWzBdLmlkXG4gICAgICB9XG5cbiAgICAgIHN0YXRlLmluaXRpYWxpemVkID0gdHJ1ZVxuICAgICAgc3RhdGUuc2VsZWN0ZWRSZXBvSWQgPSBzZWxlY3RlZFJlcG9JZFxuICAgIH0sXG4gICAgbG9hZGluZ0JyYW5jaGVzTGlzdCAoc3RhdGUpIHsgc3RhdGUubG9hZGluZyA9IHRydWUgfSxcbiAgICBsb2FkZWRCcmFuY2hlc0xpc3QgKHN0YXRlLCBhY3Rpb24pIHtcbiAgICAgIGNvbnN0IHsgc2VsZWN0ZWRSZXBvSWQgfSA9IHN0YXRlXG4gICAgICBjb25zdCB7IGJyYW5jaGVzIH0gPSBhY3Rpb24ucGF5bG9hZFxuICAgICAgY29uc3QgcmVwb3NpdG9yeSA9IGZpbmQoZ2l0aHViLnJlcG9zaXRvcmllcywgeyBpZDogc2VsZWN0ZWRSZXBvSWQgfSlcblxuICAgICAgc3RhdGUuYnJhbmNoZXMgPSBicmFuY2hlc1xuICAgICAgc3RhdGUua2V5Ym9hcmQgPSBudWxsXG4gICAgICBzdGF0ZS5rZXlib2FyZHMgPSBbXVxuICAgICAgc3RhdGUubG9hZGluZyA9IGZhbHNlXG5cbiAgICAgIGNvbnN0IGF2YWlsYWJsZSA9IG1hcChicmFuY2hlcywgJ25hbWUnKVxuICAgICAgY29uc3QgZGVmYXVsdEJyYW5jaCA9IHJlcG9zaXRvcnkuZGVmYXVsdF9icmFuY2hcbiAgICAgIGNvbnN0IHByZXZpb3VzQnJhbmNoID0gc3RvcmFnZS5nZXRQZXJzaXN0ZWRCcmFuY2goc2VsZWN0ZWRSZXBvSWQpXG4gICAgICBjb25zdCBvbmx5QnJhbmNoID0gYnJhbmNoZXMubGVuZ3RoID09PSAxID8gYnJhbmNoZXNbMF0ubmFtZSA6IG51bGxcblxuICAgICAgZm9yIChjb25zdCBicmFuY2ggb2YgW29ubHlCcmFuY2gsIHByZXZpb3VzQnJhbmNoLCBkZWZhdWx0QnJhbmNoXSkge1xuICAgICAgICBpZiAoYXZhaWxhYmxlLmluY2x1ZGVzKGJyYW5jaCkpIHtcbiAgICAgICAgICBzdGF0ZS5zZWxlY3RlZEJyYW5jaE5hbWUgPSBicmFuY2hcbiAgICAgICAgICBzdGF0ZS5zZWxlY3RlZEtleWJvYXJkID0gc3RvcmFnZS5nZXRQZXJzaXN0ZWRLZXlib2FyZChzZWxlY3RlZFJlcG9JZCwgYnJhbmNoKVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIGxvYWRpbmdLZXlib2FyZHNMaXN0IChzdGF0ZSkgeyBzdGF0ZS5sb2FkaW5nID0gdHJ1ZSB9LFxuICAgIGxvYWRlZEtleWJvYXJkc0xpc3QgKHN0YXRlLCBhY3Rpb24pIHtcbiAgICAgIGNvbnN0IHsgc2VsZWN0ZWRSZXBvSWQsIHNlbGVjdGVkQnJhbmNoTmFtZSB9ID0gc3RhdGVcbiAgICAgIGNvbnN0IHsga2V5Ym9hcmRzLCBkZWZhdWx0OiBkZWZhdWx0S2V5Ym9hcmQgfSA9IGFjdGlvbi5wYXlsb2FkXG5cbiAgICAgIHN0YXRlLmtleWJvYXJkcyA9IGtleWJvYXJkc1xuICAgICAgc3RhdGUubG9hZGluZyA9IGZhbHNlXG5cbiAgICAgIGNvbnN0IHByZXZpb3VzS2V5Ym9hcmQgPSBzdG9yYWdlLmdldFBlcnNpc3RlZEtleWJvYXJkKHNlbGVjdGVkUmVwb0lkLCBzZWxlY3RlZEJyYW5jaE5hbWUpXG4gICAgICBjb25zdCBvbmx5S2V5Ym9hcmQgPSBrZXlib2FyZHMubGVuZ3RoID09PSAxID8ga2V5Ym9hcmRzWzBdIDogbnVsbFxuXG4gICAgICBmb3IgKGNvbnN0IGtleWJvYXJkIG9mIFtvbmx5S2V5Ym9hcmQsIHByZXZpb3VzS2V5Ym9hcmQsIGRlZmF1bHRLZXlib2FyZF0pIHtcbiAgICAgICAgaWYgKGtleWJvYXJkcy5pbmNsdWRlcyhrZXlib2FyZCkpIHtcbiAgICAgICAgICBzdGF0ZS5zZWxlY3RlZEtleWJvYXJkID0ga2V5Ym9hcmRcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBzZWxlY3RlZFJlcG9zaXRvcnkgKHN0YXRlLCBhY3Rpb24pIHtcbiAgICAgIHN0YXRlLnNlbGVjdGVkUmVwb0lkID0gYWN0aW9uLnBheWxvYWQucmVwb3NpdG9yeS5pZFxuICAgICAgc3RhdGUuc2VsZWN0ZWRCcmFuY2hOYW1lID0gbnVsbFxuICAgICAgc3RhdGUuc2VsZWN0ZWRLZXlib2FyZCA9IG51bGxcblxuICAgICAgc3RvcmFnZS5zZXRQZXJzaXN0ZWRSZXBvc2l0b3J5KHN0YXRlLnNlbGVjdGVkUmVwb0lkKVxuICAgIH0sXG4gICAgc2VsZWN0ZWRCcmFuY2ggKHN0YXRlLCBhY3Rpb24pIHtcbiAgICAgIHN0YXRlLnNlbGVjdGVkQnJhbmNoTmFtZSA9IGFjdGlvbi5wYXlsb2FkLm5hbWVcbiAgICAgIHN0YXRlLnNlbGVjdGVkS2V5Ym9hcmQgPSBzdG9yYWdlLmdldFBlcnNpc3RlZEtleWJvYXJkKFxuICAgICAgICBzdGF0ZS5zZWxlY3RlZFJlcG9JZCxcbiAgICAgICAgc3RhdGUuc2VsZWN0ZWRCcmFuY2hOYW1lXG4gICAgICApXG4gICAgICBzdG9yYWdlLnNldFBlcnNpc3RlZEJyYW5jaChcbiAgICAgICAgc3RhdGUuc2VsZWN0ZWRSZXBvSWQsXG4gICAgICAgIHN0YXRlLnNlbGVjdGVkQnJhbmNoTmFtZVxuICAgICAgKVxuICAgIH0sXG4gICAgc2VsZWN0ZWRLZXlib2FyZCAoc3RhdGUsIGFjdGlvbikge1xuICAgICAgc3RhdGUuc2VsZWN0ZWRLZXlib2FyZCA9IGFjdGlvbi5wYXlsb2FkLm5hbWVcbiAgICAgIHN0b3JhZ2Uuc2V0UGVyc2lzdGVkS2V5Ym9hcmQoXG4gICAgICAgIHN0YXRlLnNlbGVjdGVkUmVwb0lkLFxuICAgICAgICBzdGF0ZS5zZWxlY3RlZEJyYW5jaE5hbWUsXG4gICAgICAgIHN0YXRlLnNlbGVjdGVkS2V5Ym9hcmRcbiAgICAgIClcbiAgICB9LFxuICAgIGtleWJvYXJkTG9hZGluZyAoc3RhdGUsIGFjdGlvbikge1xuICAgICAgc3RhdGUubG9hZGluZyA9IHRydWVcbiAgICB9LFxuICAgIGtleWJvYXJkTG9hZGVkU3VjY2VzcyAoc3RhdGUsIGFjdGlvbikge1xuICAgICAgY29uc3QgeyByZXNwb25zZTogeyBrZXltYXAgfSB9ID0gYWN0aW9uLnBheWxvYWRcbiAgICAgIHN0YXRlLndhcm5pbmdGbGFncyA9IGtleW1hcC53YXJuaW5nRmxhZ3MgfHwgW11cbiAgICAgIHN0YXRlLmxvYWRpbmcgPSBmYWxzZVxuICAgIH1cbiAgfVxufSlcblxuZnVuY3Rpb24gdXNlQWN0aW9uRGlzcGF0Y2hlcnMgKGRpc3BhdGNoKSB7XG4gIHJldHVybiB1c2VNZW1vKCgpID0+IChcbiAgICBPYmplY3Qua2V5cyhwaWNrZXJTbGljZS5hY3Rpb25zKS5yZWR1Y2UoKGFjdGlvbnMsIGFjdGlvbikgPT4ge1xuICAgICAgYWN0aW9uc1thY3Rpb25dID0gKC4uLmFyZ3MpID0+IGRpc3BhdGNoKHBpY2tlclNsaWNlLmFjdGlvbnNbYWN0aW9uXSguLi5hcmdzKSlcbiAgICAgIHJldHVybiBhY3Rpb25zXG4gICAgfSwge30pXG4gICksIFtkaXNwYXRjaF0pXG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VQaWNrZXJTdG9yZSAoKSB7XG4gIGNvbnN0IFtzdGF0ZSwgZGlzcGF0Y2hdID0gdXNlUmVkdWNlcihwaWNrZXJTbGljZS5yZWR1Y2VyLCBJTklUSUFMX1NUQVRFKVxuICBjb25zdCBkaXNwYXRjaGVycyA9IHVzZUFjdGlvbkRpc3BhdGNoZXJzKGRpc3BhdGNoKVxuXG4gIHJldHVybiBbc3RhdGUsIGRpc3BhdGNoZXJzXVxufVxuIiwiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJ1xuXG5pbXBvcnQgRGlhbG9nQm94IGZyb20gJy4uL0NvbW1vbi9EaWFsb2dCb3gnXG5pbXBvcnQgTW9kYWwgZnJvbSAnLi4vQ29tbW9uL01vZGFsJ1xuXG5mdW5jdGlvbiBTdWdnZXN0UmVtb3RlUmVwbyAocHJvcHMpIHtcbiAgY29uc3QgeyBvbkRpc21pc3MsIG1pc3NpbmdQYXRoIH0gPSBwcm9wc1xuICByZXR1cm4gKFxuICAgIDxNb2RhbD5cbiAgICAgIDxEaWFsb2dCb3ggb25EaXNtaXNzPXtvbkRpc21pc3N9PlxuICAgICAgICA8aDI+TWlzc2luZyBrZXlib2FyZCBkZWZpbml0aW9uPzwvaDI+XG4gICAgICAgIDxwPlxuICAgICAgICAgIEhpIHRoZXJlISBUaGUgcmVwb3NpdG9yeSB5b3UncmUgdHJ5aW5nIHRvIGxvYWQgZnJvbSBkb2Vzbid0IGhhdmUgYVxuICAgICAgICAgIGRlZmluZWQgPGNvZGU+e21pc3NpbmdQYXRofTwvY29kZT4uIFJpZ2h0IG5vdyB0aGlzIGFwcGxpY2F0aW9uIGlzXG4gICAgICAgICAgZXhwZWN0aW5nIHRvIGxvb2sgYXQgdGhhdCBkaXJlY3RvcnkgdG8gZGlzY292ZXIga2V5Ym9hcmQgZGVmaW5pdGlvbnNcbiAgICAgICAgICBmb3IgZXhwZXJpbWVudGFsIGZlYXR1cmVzIGxpa2UgYXV0b21hdGljIGxheW91dCBnZW5lcmF0aW9uLlxuICAgICAgICA8L3A+XG4gICAgICAgIDxwPlxuICAgICAgICAgIElzIGl0IHBvc3NpYmxlIHRoYXQgdGhlIGtleWJvYXJkIHlvdSdyZSB0cnlpbmcgdG8gZWRpdCByZWxpZXMgb24gZGF0YVxuICAgICAgICAgIGZyb20gdGhlIFpNSyBvciBvdGhlciByZXBvc2l0b3JpZXM/IEZldGNoaW5nIGZyb20gb3RoZXIgcmVwb3NpdG9yaWVzIGlzXG4gICAgICAgICAgbm90IGN1cnJlbnRseSBzdXBwb3J0ZWQuXG4gICAgICAgIDwvcD5cbiAgICAgICAgPHA+XG4gICAgICAgICAgSSdtIGEgaHVtYmxlIGRldmVsb3BlciBhbmQgaGF2ZSBvbmx5IHdvcmtlZCB3aXRoIGNvbmZpZ3VyYXRpb25zIGZvciBteVxuICAgICAgICAgIG93biBoYW5kd2lyZWQgYnVpbGRzLCBzbyBpZiB5b3UgZmVlbCB5b3UncmUgcmVjZWl2aW5nIHRoaXMgbWVzc2FnZSBpblxuICAgICAgICAgIGVycm9yIHRoZW4gcGxlYXNlIGNvbnNpZGVyIG9wZW5pbmcgYW4gaXNzdWUgb24gdGhpcyBwcm9qZWN0J3MgR2l0SHViXG4gICAgICAgICAgcmVwb3NpdG9yeSB0byBsZXQgbWUga25vdyB3aGF0IEkgY2FuIGRvIGRpZmZlcmVudGx5LlxuICAgICAgICA8L3A+XG4gICAgICA8L0RpYWxvZ0JveD5cbiAgICA8L01vZGFsPlxuICApXG59XG5cblN1Z2dlc3RSZW1vdGVSZXBvLnByb3BUeXBlcyA9IHtcbiAgb25EaXNtaXNzOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBtaXNzaW5nUGF0aDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkXG59XG5cbmV4cG9ydCBkZWZhdWx0IFN1Z2dlc3RSZW1vdGVSZXBvXG4iLCJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnXG5cbmltcG9ydCBMaW5rIGZyb20gJy4uL0NvbW1vbi9MaW5rJ1xuaW1wb3J0IERpYWxvZ0JveCBmcm9tICcuLi9Db21tb24vRGlhbG9nQm94J1xuaW1wb3J0IE1vZGFsIGZyb20gJy4uL0NvbW1vbi9Nb2RhbCdcblxuZnVuY3Rpb24gU3VnZ2VzdFJlcG9TZWxlY3Rpb24gKHsgaW5zdGFsbGF0aW9uIH0pIHtcbiAgY29uc3QgdXJsID0gYGh0dHBzOi8vZ2l0aHViLmNvbS9zZXR0aW5ncy9pbnN0YWxsYXRpb25zLyR7aW5zdGFsbGF0aW9uLmlkfWBcblxuICByZXR1cm4gKFxuICAgIDxNb2RhbD5cbiAgICAgIDxEaWFsb2dCb3ggZGlzbWlzc1RleHQ9e251bGx9PlxuICAgICAgICA8aDI+QXBwIERpc2FibGVkPC9oMj5cbiAgICAgICAgPHA+XG4gICAgICAgICAgSGVsbG8gdGhlcmUsIHlvdXIgaW5zdGFsbGF0aW9uIG9mIHRoZSBrZXltYXAgZWRpdG9yJ3MgR2l0SHViIGFwcCBpc1xuICAgICAgICAgIGN1cnJlbnRseSBkaXNhYmxlZC4gPGVtPlRoaXMgaXMgbm90IGEgYmFuITwvZW0+XG4gICAgICAgIDwvcD5cbiAgICAgICAgPHA+XG4gICAgICAgICAgV2hlbiB5b3UgaW5zdGFsbGVkIHRoaXMgYXBwIGZvciB5b3VyIEdpdEh1YiBhY2NvdW50IHlvdSBpbnN0YWxsZWQgaXRcbiAgICAgICAgICBmb3IgPGVtPmFsbDwvZW0+IG9mIHlvdXIgcmVwb3NpdG9yaWVzLCBhbmQgd2UgbmVlZCB0byBkbyBhIGxpdHRsZVxuICAgICAgICAgIGNsZWFudXAgYXMgd2Ugcm9sbCBvdXQgc29tZSBuZXcgZmVhdHVyZXMgYXMgaXQncyB2ZXJ5IGxpa2VseSB5b3Ugd2lsbFxuICAgICAgICAgIGhhdmUgb3RoZXIgcmVwb3NpdG9yaWVzIHVucmVsYXRlZCB0byBaTUsga2V5Ym9hcmQgY29uZmlndXJhdGlvbnMuXG4gICAgICAgIDwvcD5cbiAgICAgICAgPGgzPkhvdyB0byBmaXggdGhpczwvaDM+XG4gICAgICAgIDxwPlxuICAgICAgICAgIElmIHlvdSdyZSBzdGlsbCBpbnRlcmVzdGVkIGluIHVzaW5nIHRoZSBrZXltYXAgZWRpdG9yIChhbmQgSSdkIGxvdmVcbiAgICAgICAgICBmb3IgeW91IHRvIGJlIGFibGUgdG8pIHBsZWFzZSBnbyB0byB5b3VyIDxMaW5rIGhyZWY9e3VybH0+aW5zdGFsbGF0aW9uXG4gICAgICAgICAgc2V0dGluZ3M8L0xpbms+IG9uIEdpdEh1YiBhbmQgc2VsZWN0IG9ubHkgdGhlIHJlcG9zaXRvcmllcyB5b3Ugd2FudCB0b1xuICAgICAgICAgIHVzZSB3aXRoIHRoaXMgdG9vbC4gQXMgc29vbiBhcyB0aGF0J3MgZG9uZSB5b3UnbGwgYmUgc2VudCBiYWNrIGhlcmVcbiAgICAgICAgICBhbmQgcmVhZHkgdG8gZ28uXG4gICAgICAgIDwvcD5cbiAgICAgICAgPHA+XG4gICAgICAgICAgQXMgYWx3YXlzLCBpZiB5b3UncmUgbG9va2luZyBmb3IgY2xhcmlmaWNhdGlvbiBvciBmdXJ0aGVyIGFzc2lzdGFuY2VcbiAgICAgICAgICBwbGVhc2UgdmlzaXQgb3VyIEdpdEh1YiByZXBvIGFuZCBvcGVuIGFuIGlzc3VlIG9yIHN0YXJ0IGEgZGlzY3Vzc2lvbi5cbiAgICAgICAgPC9wPlxuICAgICAgPC9EaWFsb2dCb3g+XG4gICAgPC9Nb2RhbD5cbiAgKVxufVxuXG5TdWdnZXN0UmVwb1NlbGVjdGlvbi5wcm9wVHlwZXMgPSB7XG4gIGluc3RhbGxhdGlvbjogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBpZDogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkXG4gIH0pLmlzUmVxdWlyZWRcbn1cblxuZXhwb3J0IGRlZmF1bHQgU3VnZ2VzdFJlcG9TZWxlY3Rpb25cbiIsImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcydcblxuaW1wb3J0IERpYWxvZ0JveCBmcm9tICcuLi9Db21tb24vRGlhbG9nQm94J1xuaW1wb3J0IE1vZGFsIGZyb20gJy4uL0NvbW1vbi9Nb2RhbCdcbmltcG9ydCB7IEdlbmVyYWxIZWxwT2ZmZXJDb3B5IH0gZnJvbSAnLi9zdXBwb3J0J1xuXG5mdW5jdGlvbiBTdWdnZXN0V3JvbmdSZXBvIChwcm9wcykge1xuICBjb25zdCB7IG9uRGlzbWlzcyB9ID0gcHJvcHNcblxuICByZXR1cm4gKFxuICAgIDxNb2RhbD5cbiAgICAgIDxEaWFsb2dCb3ggb25EaXNtaXNzPXtvbkRpc21pc3N9PlxuICAgICAgICA8aDI+SXMgdGhpcyBhIHptay1jb25maWcgcmVwbz88L2gyPlxuICAgICAgICA8cD5cbiAgICAgICAgICBIaSB0aGVyZSEgVGhlIHJlcG9zaXRvcnkgeW91J3JlIHRyeWluZyB0byBsb2FkIGZyb20gZG9lc24ndCBoYXZlIGFcbiAgICAgICAgICBkZWZpbmVkIDxjb2RlPmNvbmZpZzwvY29kZT4gZGlyZWN0b3J5LiBSaWdodCBub3cgdGhpcyBhcHBsaWNhdGlvbiBpc1xuICAgICAgICAgIGV4cGVjdGluZyB0byBsb29rIGF0IHRoYXQgZGlyZWN0b3J5IHRvIGRpc2NvdmVyIGtleW1hcHMgYW5kIG90aGVyXG4gICAgICAgICAgbWV0YWRhdGEuXG4gICAgICAgIDwvcD5cbiAgICAgICAge0dlbmVyYWxIZWxwT2ZmZXJDb3B5fVxuICAgICAgPC9EaWFsb2dCb3g+XG4gICAgPC9Nb2RhbD5cbiAgKVxufVxuXG5TdWdnZXN0V3JvbmdSZXBvLnByb3BUeXBlcyA9IHtcbiAgb25EaXNtaXNzOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBvdGhlclJlcG9PckJyYW5jaEF2YWlsYWJsZTogUHJvcFR5cGVzLmJvb2xcbn1cblxuZXhwb3J0IGRlZmF1bHQgU3VnZ2VzdFdyb25nUmVwb1xuIiwiaW1wb3J0IERpYWxvZ0JveCBmcm9tICcuLi9Db21tb24vRGlhbG9nQm94J1xuaW1wb3J0IE1vZGFsIGZyb20gJy4uL0NvbW1vbi9Nb2RhbCdcblxuZnVuY3Rpb24gQmxvY2tlZCAoKSB7XG4gIHJldHVybiAoXG4gICAgPE1vZGFsPlxuICAgICAgPERpYWxvZ0JveCBkaXNtaXNzVGV4dD17bnVsbH0+XG4gICAgICAgIDxoMj5HaXRIdWIgQWNjb3VudCBCbG9ja2VkPC9oMj5cbiAgICAgICAgPHA+XG4gICAgICAgICAgSGksIHlvdXIgYWNjZXNzIHRvIHRoaXMgYXBwbGljYXRpb24gaGFzIGJlZW4gZGlzYWJsZWQuXG4gICAgICAgIDwvcD5cbiAgICAgICAgPHA+XG4gICAgICAgICAgVGhpcyBjb3VsZCBiZSBhbiBpbm5vY2VudCBtaXN0YWtlLiBQb3NzaWJseSB5b3UndmUgbWlzdW5kZXJzdG9vZCB0aGVcbiAgICAgICAgICBpbnRlbmRlZCBwdXJwb3NlIG9mIHRoaXMgYXBwLCBwb3NzaWJseSBJIGdvdCBjYXJyaWVkIGF3YXkgd2l0aCBzb21lXG4gICAgICAgICAgaG91c2VrZWVwaW5nLiBJZiB5b3Ugd2FudCBtb3JlIGluZm9ybWF0aW9uIG9yIGZlZWwgdGhpcyB3YXMgZG9uZSBpblxuICAgICAgICAgIGVycm9yLCBwbGVhc2UgcmVhY2ggb3V0IHRvIDxlbT5uaWNrY291dHNvczwvZW0+IG9uIEdpdEh1YiBvciBEaXNjb3JkXG4gICAgICAgICAgKHlvdSBjYW4gZmluZCBtZSBvbiB0aGUgWk1LIHNlcnZlcikuXG4gICAgICAgIDwvcD5cbiAgICAgIDwvRGlhbG9nQm94PlxuICAgIDwvTW9kYWw+XG4gIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgQmxvY2tlZFxuIiwiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJ1xuXG5pbXBvcnQgRGlhbG9nQm94IGZyb20gJy4uL0NvbW1vbi9EaWFsb2dCb3gnXG5pbXBvcnQgTW9kYWwgZnJvbSAnLi4vQ29tbW9uL01vZGFsJ1xuaW1wb3J0IHsgR2VuZXJhbEhlbHBPZmZlckNvcHksIEtleW1hcExheW91dFJlc291cmNlcyB9IGZyb20gJy4vc3VwcG9ydCdcblxuZnVuY3Rpb24gTWlzc2luZ0xheW91dCAocHJvcHMpIHtcbiAgY29uc3QgeyBvbkRpc21pc3MgfSA9IHByb3BzXG5cbiAgcmV0dXJuIChcbiAgICA8TW9kYWw+XG4gICAgICA8RGlhbG9nQm94IG9uRGlzbWlzcz17b25EaXNtaXNzfT5cbiAgICAgICAgPGgyPk5vIExheW91dCBBdmFpbGFibGU8L2gyPlxuICAgICAgICA8cD5cbiAgICAgICAgICBZb3VyIGtleW1hcCBkb2Vzbid0IGhhdmUgYW4gYWNjb21wYW55aW5nIGxheW91dCBhbmQgd2UgZG9uJ3Qga25vd1xuICAgICAgICAgIGVub3VnaCBhYm91dCB5b3VyIGtleWJvYXJkIHRvIGdlbmVyYXRlIG9uZSBmb3IgeW91IGF1dG9tYXRpY2FsbHkuXG4gICAgICAgIDwvcD5cbiAgICAgICAgPHA+XG4gICAgICAgICAgSWYgeW91IG1lYW50IHRvIGluY2x1ZGUgbGF5b3V0IGRhdGEsIHBsZWFzZSBtYWtlIHN1cmUgdGhhdCBpdHMgaW4gdGhlXG4gICAgICAgICAgc2FtZSBkaXJlY3RvcnkgYXMgeW91ciBrZXltYXAsXG4gICAgICAgICAgbGlrZSA8Y29kZT5jb25maWcvaW5mby5qc29uPC9jb2RlPiBvciA8Y29kZT5jb25maWcvJmx0O2tleWJvYXJkJmd0Oy5qc29uPC9jb2RlPi5cbiAgICAgICAgPC9wPlxuICAgICAgICB7S2V5bWFwTGF5b3V0UmVzb3VyY2VzfVxuICAgICAgICB7R2VuZXJhbEhlbHBPZmZlckNvcHl9XG4gICAgICA8L0RpYWxvZ0JveD5cbiAgICA8L01vZGFsPlxuICApXG59XG5cbk1pc3NpbmdMYXlvdXQucHJvcFR5cGVzID0ge1xuICBvbkRpc21pc3M6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbn1cblxuZXhwb3J0IGRlZmF1bHQgTWlzc2luZ0xheW91dFxuIiwiaW1wb3J0IERpYWxvZ0JveCBmcm9tICcuLi8uLi8uLi9Db21tb24vRGlhbG9nQm94J1xuaW1wb3J0IE1vZGFsIGZyb20gJy4uLy4uLy4uL0NvbW1vbi9Nb2RhbCdcbmltcG9ydCBJY29uQnV0dG9uIGZyb20gJy4uLy4uLy4uL0NvbW1vbi9JY29uQnV0dG9uJ1xuaW1wb3J0IGdpdGh1YiBmcm9tICcuLi9hcGknXG5cbmZ1bmN0aW9uIExvZ2luICgpIHtcbiAgcmV0dXJuIChcbiAgICA8TW9kYWwgY2VudGVyT25seT5cbiAgICAgIDxEaWFsb2dCb3ggZGlzbWlzc1RleHQ9e251bGx9IHN0eWxlPXt7IHdpZHRoOiAnNDAwcHgnIH19PlxuICAgICAgICA8aDI+QXV0aGVudGljYXRlIHdpdGggR2l0SHViPC9oMj5cbiAgICAgICAgPHA+XG4gICAgICAgICAgUGxlYXNlIGxvZy1pbiB0byBHaXRIdWIgdG8gY29udGludWUuXG4gICAgICAgIDwvcD5cbiAgICAgICAgPEljb25CdXR0b25cbiAgICAgICAgICBjb2xsZWN0aW9uPVwiYnJhbmRzXCJcbiAgICAgICAgICBpY29uPVwiZ2l0aHViXCJcbiAgICAgICAgICB0ZXh0PVwiTG9naW4gd2l0aCBHaXRIdWJcIlxuICAgICAgICAgIHN0eWxlPXt7IGRpc3BsYXk6ICdibG9jaycsIG1hcmdpbjogJzAgYXV0bycgfX1cbiAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBnaXRodWIuYmVnaW5Mb2dpbkZsb3coKX1cbiAgICAgICAgLz5cbiAgICAgIDwvRGlhbG9nQm94PlxuICAgIDwvTW9kYWw+XG4gIClcbn1cblxuTG9naW4ucHJvcFR5cGVzID0ge31cblxuZXhwb3J0IGRlZmF1bHQgTG9naW5cbiIsImltcG9ydCBEaWFsb2dCb3ggZnJvbSAnLi4vLi4vLi4vQ29tbW9uL0RpYWxvZ0JveCdcbmltcG9ydCBNb2RhbCBmcm9tICcuLi8uLi8uLi9Db21tb24vTW9kYWwnXG5pbXBvcnQgSWNvbkJ1dHRvbiBmcm9tICcuLi8uLi8uLi9Db21tb24vSWNvbkJ1dHRvbidcbmltcG9ydCBnaXRodWIgZnJvbSAnLi4vYXBpJ1xuXG5mdW5jdGlvbiBJbnN0YWxsICgpIHtcbiAgY29uc3QgZ3JlZXRpbmcgPSBnaXRodWIudXNlcm5hbWVcbiAgICA/IGBXZWxjb21lLCAke2dpdGh1Yi51c2VybmFtZX0hYFxuICAgIDogJ1dlbGNvbWUhJ1xuXG4gIHJldHVybiAoXG4gICAgPE1vZGFsIGNlbnRlck9ubHk+XG4gICAgICA8RGlhbG9nQm94IGRpc21pc3NUZXh0PXtudWxsfT5cbiAgICAgICAgPGgyPntncmVldGluZ308L2gyPlxuICAgICAgICA8cD5cbiAgICAgICAgICBUbyBiZWdpbiBpbXBvcnQgeW91ciBvd24ga2V5bWFwcywgeW91J2xsIG5lZWQgdG8gZ3JhbnQgdGhlIEtleW1hcFxuICAgICAgICAgIEVkaXRvciBhcHAgYWNjZXNzIHRvIHRoZSByZWxldmFudCBHaXRIdWIgcmVwb3NpdG9yaWVzLiBQbGVhc2UgbWFrZVxuICAgICAgICAgIHN1cmUgdG8gb25seSBzZWxlY3QgcmVwb3NpdG9yaWVzIHRoYXQgYXJlIHNldCB1cCBmb3IgWk1LIGtleWJvYXJkXG4gICAgICAgICAgY29uZmlndXJhdGlvbnMuXG4gICAgICAgIDwvcD5cbiAgICAgICAgPHA+XG4gICAgICAgICAgVGhpcyBhcHAgcmVxdWlyZXMgcmVhZCBhbmQgd3JpdGUgYWNjZXNzIHRvIHRoZSByZXBvc2l0b3JpZXMgeW91IHNlbGVjdFxuICAgICAgICAgIGluIG9yZGVyIHRvIHdyaXRlIHRvIGFyYml0cmFyeSA8Y29kZT4ua2V5bWFwPC9jb2RlPiBmaWxlcy4gSXQgYWxzb1xuICAgICAgICAgIHJlY2VpdmVzIGFsbCBidWlsZCBhY3Rpb24gZXZlbnRzIGZvciB0aGUgcmVwb3NpdG9yeSwgd2hpY2ggZ2VuZXJhdGVzXG4gICAgICAgICAgcXVpdGUgYSBiaXQgb2YgdHJhZmZpYy4gU2VsZWN0aW5nIDxjb2RlPkFsbCByZXBvc2l0b3JpZXM8L2NvZGU+IGZvclxuICAgICAgICAgIHRoZSBhcHAgaW5zdGFsbGF0aW9uIHdpbGwgbGVhZCB0byBhIHN1c3BlbnNpb24uXG4gICAgICAgIDwvcD5cbiAgICAgICAgPEljb25CdXR0b25cbiAgICAgICAgICBjb2xsZWN0aW9uPVwiYnJhbmRzXCJcbiAgICAgICAgICBpY29uPVwiZ2l0aHViXCJcbiAgICAgICAgICB0ZXh0PVwiQWRkIFJlcG9zaXRvcnlcIlxuICAgICAgICAgIHN0eWxlPXt7IGRpc3BsYXk6ICdibG9jaycsIG1hcmdpbjogJzAgYXV0bycgfX1cbiAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBnaXRodWIuYmVnaW5JbnN0YWxsQXBwRmxvdygpfVxuICAgICAgICAvPlxuICAgICAgPC9EaWFsb2dCb3g+XG4gICAgPC9Nb2RhbD5cbiAgKVxufVxuXG5JbnN0YWxsLnByb3BUeXBlcyA9IHt9XG5cbmV4cG9ydCBkZWZhdWx0IEluc3RhbGxcbiIsImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcydcblxuaW1wb3J0IERpYWxvZ0JveCBmcm9tICcuLi9Db21tb24vRGlhbG9nQm94J1xuaW1wb3J0IE1vZGFsIGZyb20gJy4uL0NvbW1vbi9Nb2RhbCdcbmltcG9ydCB7IEdpdEh1Yklzc3Vlc0xpbmsgfSBmcm9tICcuL3N1cHBvcnQnXG5cbmZ1bmN0aW9uIE1pc3NpbmdLZXltYXBzIChwcm9wcykge1xuICBjb25zdCB7IG9uRGlzbWlzcyB9ID0gcHJvcHNcblxuICByZXR1cm4gKFxuICAgIDxNb2RhbD5cbiAgICAgIDxEaWFsb2dCb3ggb25EaXNtaXNzPXtvbkRpc21pc3N9PlxuICAgICAgICA8aDI+Tm8gS2V5bWFwIEF2YWlsYWJsZTwvaDI+XG4gICAgICAgIDxwPlxuICAgICAgICAgIFdlIGNvdWxkbid0IGZpbmQgYSA8Y29kZT4ua2V5bWFwPC9jb2RlPiBmaWxlIGluIHlvdXIgPGNvZGU+Y29uZmlnLzwvY29kZT4gZm9sZGVyLlxuICAgICAgICA8L3A+XG4gICAgICAgIDxwPlxuICAgICAgICAgIFBsZWFzZSBlbnN1cmUgdGhhdCBhbnkga2V5bWFwKHMpIHlvdSB3aXNoIHRvIGVkaXQgYXJlIHBsYWNlZCBpbiB0aGF0XG4gICAgICAgICAgZGlyZWN0b3J5IGV2ZW4gaWYgYW4gYWNjb21wYW55aW5nIGtleWJvYXJkIGRlZmluaXRpb24gZXhpc3RzIGluIHlvdXJcbiAgICAgICAgICB1bmRlciB0aGUgPGNvZGU+Y29uZmlnL2JvYXJkcy8uLi48L2NvZGU+IGRpcmVjdG9yeS5cbiAgICAgICAgPC9wPlxuICAgICAgICA8cD5cbiAgICAgICAgICBJZiB5b3UgaGF2ZSBhbnkgcXVlc3Rpb25zIHBsZWFzZSBmZWVsIGZyZWUgdG8gcmVhY2ggb3V0IGJ5IGNyZWF0aW5nIGFuXG4gICAgICAgICAgaXNzdWUgYXQge0dpdEh1Yklzc3Vlc0xpbmt9LlxuICAgICAgICA8L3A+XG4gICAgICA8L0RpYWxvZ0JveD5cbiAgICA8L01vZGFsPlxuICApXG59XG5cbk1pc3NpbmdLZXltYXBzLnByb3BUeXBlcyA9IHtcbiAgb25EaXNtaXNzOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG59XG5cbmV4cG9ydCBkZWZhdWx0IE1pc3NpbmdLZXltYXBzXG4iLCJpbXBvcnQgZmluZCBmcm9tICdsb2Rhc2gvZmluZCdcblxuaW1wb3J0IHsgQ29udHJvbCwgU2VsZWN0IH0gZnJvbSAnLi4vQ29udHJvbHMnXG5pbXBvcnQgU3Bpbm5lciBmcm9tICcuLi8uLi9Db21tb24vU3Bpbm5lcidcblxuaW1wb3J0IGdpdGh1YiBmcm9tICcuL2FwaSdcblxuZXhwb3J0IGZ1bmN0aW9uIEdpdGhIdWJFeHBhbmRlZFBpY2tlciAoeyBzdGF0ZSwgYWN0aW9ucywgY2hvaWNlcywgc2VsZWN0aW9ucyB9KSB7XG4gIGNvbnN0IHsgcmVwb3NpdG9yaWVzLCByZXBvc2l0b3J5Q2hvaWNlcywgYnJhbmNoQ2hvaWNlcywga2V5Ym9hcmRDaG9pY2VzIH0gPSBjaG9pY2VzXG4gIGNvbnN0IHsgc2VsZWN0ZWRSZXBvQ2hvaWNlLCBzZWxlY3RlZEJyYW5jaENob2ljZSwgc2VsZWN0ZWRLZXlib2FyZENob2ljZSB9ID0gc2VsZWN0aW9uc1xuICBjb25zdCB7IGJyYW5jaGVzLCBrZXlib2FyZHMsIGxvYWRpbmcgfSA9IHN0YXRlXG5cbiAgZnVuY3Rpb24gaGFuZGxlU2VsZWN0UmVwbyAoeyBpZCwgdHlwZSB9KSB7XG4gICAgaWYgKHR5cGUgPT09ICdpbnN0YWxsYXRpb24nKSB7XG4gICAgICBnaXRodWIubWFuYWdlSW5zdGFsbGF0aW9uUmVwb3MoaWQpXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjb25zdCByZXBvc2l0b3J5ID0gZmluZChyZXBvc2l0b3JpZXMsIHsgaWQgfSlcbiAgICBhY3Rpb25zLnNlbGVjdGVkUmVwb3NpdG9yeSh7IHJlcG9zaXRvcnkgfSlcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIDxTZWxlY3RcbiAgICAgICAgbGFiZWw9XCJSZXBvc2l0b3J5XCJcbiAgICAgICAgdmFsdWU9e3NlbGVjdGVkUmVwb0Nob2ljZX1cbiAgICAgICAgb3B0aW9ucz17cmVwb3NpdG9yeUNob2ljZXN9XG4gICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVTZWxlY3RSZXBvfVxuICAgICAgICBnZXRWYWx1ZT17b3B0aW9uID0+IG9wdGlvbi5pZH1cbiAgICAgICAgZ2V0T3B0aW9uVmFsdWU9e29wdGlvbiA9PiBvcHRpb24uaWR9XG4gICAgICAgIGdldE9wdGlvbkxhYmVsPXtvcHRpb24gPT4gb3B0aW9uLmZ1bGwgfHwgb3B0aW9uLm5hbWV9XG4gICAgICAgIGZvcm1hdE9wdGlvbkxhYmVsPXsob3B0aW9uLCB7IGNvbnRleHQgfSkgPT4gKFxuICAgICAgICAgIDw+e2NvbnRleHQgPT09ICd2YWx1ZScgPyBvcHRpb24ubmFtZSA6IG9wdGlvbi5mdWxsIHx8IG9wdGlvbi5uYW1lfTwvPlxuICAgICAgICApfVxuICAgICAgLz5cblxuICAgICAge2JyYW5jaGVzLmxlbmd0aCA+IDEgJiYgKFxuICAgICAgICA8U2VsZWN0XG4gICAgICAgICAgbGFiZWw9XCJCcmFuY2hcIlxuICAgICAgICAgIHZhbHVlPXtzZWxlY3RlZEJyYW5jaENob2ljZX1cbiAgICAgICAgICBvcHRpb25zPXticmFuY2hDaG9pY2VzfVxuICAgICAgICAgIG9uQ2hhbmdlPXsoeyBpZCB9KSA9PiBhY3Rpb25zLnNlbGVjdGVkQnJhbmNoKHsgbmFtZTogaWQgfSl9XG4gICAgICAgICAgZ2V0T3B0aW9uVmFsdWU9e29wdGlvbiA9PiBvcHRpb24uaWR9XG4gICAgICAgICAgZ2V0T3B0aW9uTGFiZWw9e29wdGlvbiA9PiBvcHRpb24ubmFtZX1cbiAgICAgICAgLz5cbiAgICAgICl9XG5cbiAgICAgIHtrZXlib2FyZHMubGVuZ3RoID4gMSAmJiAoXG4gICAgICAgIDxTZWxlY3RcbiAgICAgICAgICBsYWJlbD1cIktleWJvYXJkXCJcbiAgICAgICAgICB2YWx1ZT17c2VsZWN0ZWRLZXlib2FyZENob2ljZX1cbiAgICAgICAgICBvcHRpb25zPXtrZXlib2FyZENob2ljZXN9XG4gICAgICAgICAgZ2V0T3B0aW9uVmFsdWU9e29wdGlvbiA9PiBvcHRpb24uaWR9XG4gICAgICAgICAgZ2V0T3B0aW9uTGFiZWw9e29wdGlvbiA9PiBvcHRpb24ubmFtZX1cbiAgICAgICAgICBvbkNoYW5nZT17KHsgaWQgfSkgPT4gYWN0aW9ucy5zZWxlY3RlZEtleWJvYXJkKHsgbmFtZTogaWQgfSl9XG4gICAgICAgIC8+XG4gICAgICApfVxuXG4gICAgICB7bG9hZGluZyAmJiAoXG4gICAgICAgIDxDb250cm9sPlxuICAgICAgICAgIDxTcGlubmVyIC8+XG4gICAgICAgIDwvQ29udHJvbD5cbiAgICAgICl9XG4gICAgPC8+XG4gIClcbn1cbiIsImltcG9ydCBmaW5kIGZyb20gJ2xvZGFzaC9maW5kJ1xuaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VNZW1vIH0gZnJvbSAncmVhY3QnXG5cbmltcG9ydCBnaXRodWIgZnJvbSAnLi9hcGknXG5cbi8vIFRPRE86IG1vc3Qgb2YgdGhpcyBzaG91bGQgcHJvYmFibHkganVzdCBiZSB0dXJuZWQgaW50byB0aHVua3MgaW4gdGhlIHJlZHVjZXJcblxuZXhwb3J0IGZ1bmN0aW9uIHVzZVJlcG9zaXRvcnlPcHRpb25zIChzdGF0ZSwgYWN0aW9ucykge1xuICBjb25zdCB7XG4gICAgYnJhbmNoZXMsXG4gICAga2V5Ym9hcmRzLFxuICAgIHNlbGVjdGVkUmVwb0lkLFxuICAgIHNlbGVjdGVkQnJhbmNoTmFtZSxcbiAgICBzZWxlY3RlZEtleWJvYXJkXG4gIH0gPSBzdGF0ZVxuXG4gIGNvbnN0IHJlcG9zaXRvcmllcyA9IChnaXRodWIucmVwb3NpdG9yaWVzIHx8IFtdKS5tYXAocmVwbyA9PiAoe1xuICAgIGlkOiByZXBvLmlkLFxuICAgIG5hbWU6IHJlcG8ubmFtZSxcbiAgICBmdWxsOiByZXBvLmZ1bGxfbmFtZVxuICB9KSlcblxuICBjb25zdCBleHRyYXMgPSAoZ2l0aHViLmluc3RhbGxhdGlvbnMgfHwgW10pLm1hcChpbnN0YWxsYXRpb24gPT4gKHtcbiAgICBpZDogaW5zdGFsbGF0aW9uLmlkLFxuICAgIHR5cGU6ICdpbnN0YWxsYXRpb24nLFxuICAgIG5hbWU6IGBbTWFuYWdlIGF2YWlsYWJsZSByZXBvcyBmb3IgJHtpbnN0YWxsYXRpb24uYWNjb3VudC5sb2dpbn0uLi5dYFxuICB9KSlcblxuICBjb25zdCByZXBvc2l0b3J5Q2hvaWNlcyA9IHVzZU1lbW8oKCkgPT4gWy4uLnJlcG9zaXRvcmllcywgLi4uZXh0cmFzXSwgW3JlcG9zaXRvcmllcywgZXh0cmFzXSlcbiAgY29uc3QgYnJhbmNoQ2hvaWNlcyA9IHVzZU1lbW8oKCkgPT4gYnJhbmNoZXMubWFwKGJyYW5jaCA9PiAoeyBpZDogYnJhbmNoLm5hbWUsIG5hbWU6IGJyYW5jaC5uYW1lIH0pKSwgW2JyYW5jaGVzXSlcbiAgY29uc3Qga2V5Ym9hcmRDaG9pY2VzID0gdXNlTWVtbygoKSA9PiBrZXlib2FyZHMubWFwKGtleWJvYXJkID0+ICh7IGlkOiBrZXlib2FyZCwgbmFtZToga2V5Ym9hcmQgfSkpLCBba2V5Ym9hcmRzXSlcblxuICBjb25zdCBzZWxlY3RlZFJlcG9DaG9pY2UgPSB1c2VNZW1vKCgpID0+IGZpbmQocmVwb3NpdG9yaWVzLCB7IGlkOiBzZWxlY3RlZFJlcG9JZCB9KSwgW3JlcG9zaXRvcmllcywgc2VsZWN0ZWRSZXBvSWRdKVxuICBjb25zdCBzZWxlY3RlZEJyYW5jaENob2ljZSA9IHVzZU1lbW8oKCkgPT4gZmluZChicmFuY2hDaG9pY2VzLCB7IGlkOiBzZWxlY3RlZEJyYW5jaE5hbWUgfSksIFticmFuY2hDaG9pY2VzLCBzZWxlY3RlZEJyYW5jaE5hbWVdKVxuICBjb25zdCBzZWxlY3RlZEtleWJvYXJkQ2hvaWNlID0gdXNlTWVtbygoKSA9PiBmaW5kKGtleWJvYXJkQ2hvaWNlcywgeyBpZDogc2VsZWN0ZWRLZXlib2FyZCB9KSwgW2tleWJvYXJkQ2hvaWNlcywgc2VsZWN0ZWRLZXlib2FyZF0pXG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoIXNlbGVjdGVkUmVwb0lkKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAoYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgYWN0aW9ucy5sb2FkaW5nQnJhbmNoZXNMaXN0KClcblxuICAgICAgY29uc3QgcmVwb3NpdG9yeSA9IGZpbmQoZ2l0aHViLnJlcG9zaXRvcmllcywgeyBpZDogc2VsZWN0ZWRSZXBvSWQgfSlcbiAgICAgIGNvbnN0IGJyYW5jaGVzID0gYXdhaXQgZ2l0aHViLmZldGNoUmVwb0JyYW5jaGVzKHJlcG9zaXRvcnkpXG5cbiAgICAgIGFjdGlvbnMubG9hZGVkQnJhbmNoZXNMaXN0KHsgYnJhbmNoZXMgfSlcbiAgICB9KSgpXG4gIH0sIFtzZWxlY3RlZFJlcG9JZCwgYWN0aW9uc10pXG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoIXNlbGVjdGVkUmVwb0lkIHx8ICFzZWxlY3RlZEJyYW5jaE5hbWUpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIChhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBhY3Rpb25zLmxvYWRpbmdLZXlib2FyZHNMaXN0KClcblxuICAgICAgY29uc3QgcmVwb3NpdG9yeSA9IGZpbmQoZ2l0aHViLnJlcG9zaXRvcmllcywgeyBpZDogc2VsZWN0ZWRSZXBvSWQgfSlcbiAgICAgIGNvbnN0IGtleWJvYXJkc0xpc3QgPSBhd2FpdCBnaXRodWIuZmV0Y2hCcmFuY2hLZXlib2FyZHMocmVwb3NpdG9yeSwgc2VsZWN0ZWRCcmFuY2hOYW1lKVxuXG4gICAgICBhY3Rpb25zLmxvYWRlZEtleWJvYXJkc0xpc3Qoa2V5Ym9hcmRzTGlzdClcbiAgICB9KSgpXG4gIH0sIFtzZWxlY3RlZFJlcG9JZCwgc2VsZWN0ZWRCcmFuY2hOYW1lLCBhY3Rpb25zXSlcblxuICByZXR1cm4gW1xuICAgIHsgcmVwb3NpdG9yaWVzLCByZXBvc2l0b3J5Q2hvaWNlcywgYnJhbmNoQ2hvaWNlcywga2V5Ym9hcmRDaG9pY2VzIH0sXG4gICAgeyBzZWxlY3RlZFJlcG9DaG9pY2UsIHNlbGVjdGVkQnJhbmNoQ2hvaWNlLCBzZWxlY3RlZEtleWJvYXJkQ2hvaWNlIH1cbiAgXVxufVxuIiwiaW1wb3J0IGZpbmQgZnJvbSAnbG9kYXNoL2ZpbmQnXG5pbXBvcnQgaXNNYXRjaCBmcm9tICdsb2Rhc2gvaXNNYXRjaCdcbmltcG9ydCB7IHVzZUNhbGxiYWNrLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCdcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcydcblxuaW1wb3J0IGdpdGh1YiBmcm9tICcuL2FwaSdcbmltcG9ydCBWYWxpZGF0aW9uRXJyb3JzIGZyb20gJy4vVmFsaWRhdGlvbkVycm9ycydcbmltcG9ydCB7IHVzZVBpY2tlclN0b3JlIH0gZnJvbSAnLi9zdG9yZSdcblxuaW1wb3J0IHsgQnV0dG9uIH0gZnJvbSAnLi4vQ29udHJvbHMnXG5pbXBvcnQgU3VnZ2VzdFJlbW90ZVJlcG8gZnJvbSAnLi4vLi4vRGlhbG9ncy9TdWdnZXN0UmVtb3RlUmVwbydcbmltcG9ydCBTdWdnZXN0UmVwb1NlbGVjdGlvbiBmcm9tICcuLi8uLi9EaWFsb2dzL1N1Z2dlc3RSZXBvU2VsZWN0aW9uJ1xuaW1wb3J0IFN1Z2dlc3RXcm9uZ1JlcG8gZnJvbSAnLi4vLi4vRGlhbG9ncy9TdWdnZXN0V3JvbmdSZXBvJ1xuaW1wb3J0IExheW91dEdlbmVyYXRpb25FcnJvciBmcm9tICcuLi8uLi9EaWFsb2dzL0xheW91dEdlbmVyYXRpb25FcnJvcidcbmltcG9ydCBCbG9ja2VkIGZyb20gJy4uLy4uL0RpYWxvZ3MvQmxvY2tlZCdcbmltcG9ydCBNaXNzaW5nTGF5b3V0IGZyb20gJy4uLy4uL0RpYWxvZ3MvTWlzc2luZ0xheW91dCdcblxuaW1wb3J0IExvZ2luIGZyb20gJy4vRGlhbG9ncy9Mb2dpbidcbmltcG9ydCBJbnN0YWxsIGZyb20gJy4vRGlhbG9ncy9JbnN0YWxsJ1xuaW1wb3J0IEljb24gZnJvbSAnLi4vLi4vQ29tbW9uL0ljb24nXG5pbXBvcnQgTWlzc2luZ0tleW1hcHMgZnJvbSAnLi4vLi4vRGlhbG9ncy9NaXNzaW5nS2V5bWFwcydcbmltcG9ydCB7IEdpdGhIdWJFeHBhbmRlZFBpY2tlciB9IGZyb20gJy4vR2l0SHViRXhwYW5kZWRQaWNrZXInXG4vLyBpbXBvcnQgeyBHaXRIdXRDb21wYWN0UGlja2VyIH0gZnJvbSAnLi9Db21wYWN0J1xuXG5pbXBvcnQgeyB1c2VSZXBvc2l0b3J5T3B0aW9ucyB9IGZyb20gJy4vcmVwb3NpdG9yeS1vcHRpb25zJ1xuXG5jb25zdCBpc01pc3NpbmdDb25maWcgPSBlcnIgPT4gaXNNYXRjaChlcnIsIHsgbmFtZTogJ01pc3NpbmdSZXBvRmlsZScsIHBhdGg6ICdjb25maWcnIH0pXG5jb25zdCBpc01pc3NpbmdLZXltYXBzID0gZXJyID0+IGlzTWF0Y2goZXJyLCB7IG5hbWU6ICdNaXNzaW5nUmVwb0ZpbGUnLCBpbnRlbnQ6ICdkaXJlY3Rvcnktc3RydWN0dXJlJyB9KVxuY29uc3QgaXNNaXNzaW5nTGF5b3V0ID0gZXJyID0+IChcbiAgaXNNYXRjaChlcnIsIHsgbmFtZTogJ01pc3NpbmdSZXBvRmlsZScsIHBhdGg6ICdjb25maWcvaW5mby5qc29uJyB9KSB8fFxuICBpc01hdGNoKGVyciwgeyBuYW1lOiAnTWlzc2luZ1JlcG9GaWxlJywgaW50ZW50OiAnbWV0YWRhdGEnIH0pXG4pXG5jb25zdCBpc01pc3NpbmdCb2FyZCA9IGVyciA9PiAoXG4gIGVycj8ubmFtZSA9PT0gJ01pc3NpbmdSZXBvRmlsZScgJiZcbiAgZXJyPy5wYXRoLm1hdGNoKC9jb25maWdcXC9ib2FyZHNcXC9bXi9dK1xcL1teL10rXFwvW14vXSs/XFwuLiokLylcbilcblxuZnVuY3Rpb24gR2l0aHViUGlja2VyIChwcm9wcykge1xuICBjb25zdCBbc3RhdGUsIGFjdGlvbnNdID0gdXNlUGlja2VyU3RvcmUoKVxuICBjb25zdCBbY2hvaWNlcywgc2VsZWN0aW9uc10gPSB1c2VSZXBvc2l0b3J5T3B0aW9ucyhzdGF0ZSwgYWN0aW9ucylcblxuICBjb25zdCB7IGluaXRpYWxpemVkLCBzZWxlY3RlZFJlcG9JZCwgc2VsZWN0ZWRCcmFuY2hOYW1lIH0gPSBzdGF0ZVxuICBjb25zdCB7IHNlbGVjdGVkS2V5Ym9hcmQgfSA9IHN0YXRlXG4gIGNvbnN0IHsgbG9hZGluZyB9ID0gc3RhdGVcblxuICBjb25zdCB7IG9uU2VsZWN0LCBvbkVycm9yIH0gPSBwcm9wc1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgbG9naW4gPSAoKSA9PiBnaXRodWIuYmVnaW5Mb2dpbkZsb3coKVxuICAgIGNvbnN0IGJsb2NrZWQgPSAoKSA9PiB7IGFjdGlvbnMuY2xlYXJTZWxlY3Rpb24oKTsgb25FcnJvcih7IGRpYWxvZzogQmxvY2tlZCB9KSB9XG4gICAgY29uc3QgbGF5b3V0R2VuZXJhdGlvbkVycm9yID0gKCkgPT4geyBhY3Rpb25zLmNsZWFyU2VsZWN0aW9uKCk7IG9uRXJyb3IoeyBkaWFsb2c6IExheW91dEdlbmVyYXRpb25FcnJvciB9KSB9XG4gICAgY29uc3QgcmVwb1ZhbGlkYXRpb24gPSBlcnJvciA9PiB7XG4gICAgICBsZXQgZGlhbG9nID0gVmFsaWRhdGlvbkVycm9yc1xuICAgICAgaWYgKGlzTWlzc2luZ0NvbmZpZyhlcnJvcikpIGRpYWxvZyA9IFN1Z2dlc3RXcm9uZ1JlcG9cbiAgICAgIGlmIChpc01pc3NpbmdCb2FyZChlcnJvcikpIGRpYWxvZyA9IFN1Z2dlc3RSZW1vdGVSZXBvXG4gICAgICBpZiAoaXNNaXNzaW5nTGF5b3V0KGVycm9yKSkgZGlhbG9nID0gTWlzc2luZ0xheW91dFxuICAgICAgaWYgKGlzTWlzc2luZ0tleW1hcHMoZXJyb3IpKSBkaWFsb2cgPSBNaXNzaW5nS2V5bWFwc1xuXG4gICAgICBhY3Rpb25zLmNsZWFyU2VsZWN0aW9uKClcbiAgICAgIG9uRXJyb3Ioe1xuICAgICAgICBkaWFsb2csXG4gICAgICAgIGRpYWxvZ1Byb3BzOiB7XG4gICAgICAgICAgdGl0bGU6IGVycm9yLm5hbWUsXG4gICAgICAgICAgZXJyb3JzOiBlcnJvci5lcnJvcnNcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG5cbiAgICBnaXRodWIuaW5pdCgpLnRoZW4oYWN0aW9ucy5pbnRlZ3JhdGlvbkluaXRpYWxpemVkKVxuICAgIGdpdGh1Yi5vbignYXV0aGVudGljYXRpb24tZmFpbGVkJywgbG9naW4pXG4gICAgZ2l0aHViLm9uKCdibG9ja2VkJywgYmxvY2tlZClcbiAgICBnaXRodWIub24oJ3JlcG8tdmFsaWRhdGlvbi1lcnJvcicsIHJlcG9WYWxpZGF0aW9uKVxuICAgIGdpdGh1Yi5vbignbGF5b3V0LWdlbmVyYXRpb24tZmFpbGVkJywgbGF5b3V0R2VuZXJhdGlvbkVycm9yKVxuXG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGdpdGh1Yi5vZmYoJ2F1dGhlbnRpY2F0aW9uLWZhaWxlZCcsIGxvZ2luKVxuICAgICAgZ2l0aHViLm9mZignYmxvY2tlZCcsIGJsb2NrZWQpXG4gICAgICBnaXRodWIub2ZmKCdyZXBvLXZhbGlkYXRpb24tZXJyb3InLCByZXBvVmFsaWRhdGlvbilcbiAgICAgIGdpdGh1Yi5vZmYoJ2xheW91dC1nZW5lcmF0aW9uLWZhaWxlZCcsIGxheW91dEdlbmVyYXRpb25FcnJvcilcbiAgICB9XG4gIH0sIFthY3Rpb25zLCBvbkVycm9yXSlcblxuICBjb25zdCBsb2FkS2V5Ym9hcmQgPSB1c2VDYWxsYmFjayhhc3luYyBmdW5jdGlvbiAocmVwb0lkLCBicmFuY2gsIGtleWJvYXJkKSB7XG4gICAgY29uc3QgYXZhaWxhYmxlID0gZ2l0aHViLnJlcG9zaXRvcmllc1xuICAgIGNvbnN0IHJlcG9zaXRvcnkgPSBmaW5kKGF2YWlsYWJsZSwgeyBpZDogcmVwb0lkIH0pPy5mdWxsX25hbWVcblxuICAgIGFjdGlvbnMua2V5Ym9hcmRMb2FkaW5nKClcblxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZ2l0aHViLmZldGNoTGF5b3V0QW5kS2V5bWFwKHJlcG9zaXRvcnksIGJyYW5jaCwge1xuICAgICAga2V5Ym9hcmRcbiAgICB9KVxuXG4gICAgYWN0aW9ucy5rZXlib2FyZExvYWRlZFN1Y2Nlc3MoeyByZXNwb25zZSB9KVxuXG4gICAgb25TZWxlY3QoeyBnaXRodWI6IHsgcmVwb3NpdG9yeSwgYnJhbmNoLCBrZXlib2FyZCB9LCAuLi5yZXNwb25zZSB9KVxuICB9LCBbYWN0aW9ucywgb25TZWxlY3RdKVxuXG4gIGNvbnN0IHJlbG9hZEtleWJvYXJkID0gdXNlQ2FsbGJhY2soKCkgPT4gKFxuICAgIGxvYWRLZXlib2FyZChzZWxlY3RlZFJlcG9JZCwgc2VsZWN0ZWRCcmFuY2hOYW1lLCBzZWxlY3RlZEtleWJvYXJkKVxuICApLCBbbG9hZEtleWJvYXJkLCBzZWxlY3RlZFJlcG9JZCwgc2VsZWN0ZWRCcmFuY2hOYW1lLCBzZWxlY3RlZEtleWJvYXJkXSlcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICghc2VsZWN0ZWRSZXBvSWQgfHwgIXNlbGVjdGVkQnJhbmNoTmFtZSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgbG9hZEtleWJvYXJkKHNlbGVjdGVkUmVwb0lkLCBzZWxlY3RlZEJyYW5jaE5hbWUsIHNlbGVjdGVkS2V5Ym9hcmQpXG4gIH0sIFtzZWxlY3RlZFJlcG9JZCwgc2VsZWN0ZWRCcmFuY2hOYW1lLCBzZWxlY3RlZEtleWJvYXJkLCBsb2FkS2V5Ym9hcmRdKVxuXG4gIGlmICghaW5pdGlhbGl6ZWQpIHJldHVybiBudWxsXG4gIGlmIChzdGF0ZS5ibG9ja2VkKSByZXR1cm4gPEJsb2NrZWQgLz5cbiAgaWYgKCFnaXRodWIuaXNHaXRIdWJBdXRob3JpemVkKCkpIHJldHVybiA8TG9naW4gLz5cbiAgaWYgKCFnaXRodWIuaXNBcHBJbnN0YWxsZWQoKSkgcmV0dXJuIDxJbnN0YWxsIC8+XG4gIGlmIChnaXRodWIuaXNBcHBTdXNwZW5kZWRGb3JSZXBvU2VsZWN0aW9uKCkpIHtcbiAgICByZXR1cm4gPFN1Z2dlc3RSZXBvU2VsZWN0aW9uIGluc3RhbGxhdGlvbj17Z2l0aHViLmluc3RhbGxhdGlvbnNbMF19IC8+XG4gIH1cblxuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8R2l0aEh1YkV4cGFuZGVkUGlja2VyIHN0YXRlPXtzdGF0ZX0gYWN0aW9ucz17YWN0aW9uc30gY2hvaWNlcz17Y2hvaWNlc30gc2VsZWN0aW9ucz17c2VsZWN0aW9uc30gLz5cbiAgICAgIHtzZWxlY3RlZEJyYW5jaE5hbWUgJiYgIWxvYWRpbmcgJiYgKFxuICAgICAgICA8QnV0dG9uIG9uQ2xpY2s9e3JlbG9hZEtleWJvYXJkfT5cbiAgICAgICAgICA8SWNvbiBuYW1lPVwic3luY1wiIC8+XG4gICAgICAgIDwvQnV0dG9uPlxuICAgICAgKX1cbiAgICA8Lz5cbiAgKVxufVxuXG5HaXRodWJQaWNrZXIucHJvcFR5cGVzID0ge1xuICBleHBhbmRlZDogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcbiAgb25FeHBhbmQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIG9uRXJyb3I6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIG9uU2VsZWN0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG59XG5cbmV4cG9ydCBkZWZhdWx0IEdpdGh1YlBpY2tlclxuIiwiaW1wb3J0IGNvbXBhY3QgZnJvbSAnbG9kYXNoL2NvbXBhY3QnXG5pbXBvcnQgKiBhcyBjb25maWcgZnJvbSAnLi4vY29uZmlnJ1xuXG5leHBvcnQgY29uc3Qgc291cmNlQ2hvaWNlcyA9IGNvbXBhY3QoW1xuICBjb25maWcuZW5hYmxlRGVtbyAmJiB7XG4gICAgaWQ6ICdkZW1vJyxcbiAgICBuYW1lOiAnRGVtbyBLZXlib2FyZCdcbiAgfSxcbiAgY29uZmlnLmVuYWJsZUxvY2FsICYmIHtcbiAgICBpZDogJ2xvY2FsJyxcbiAgICBuYW1lOiAnTG9jYWwnXG4gIH0sXG4gIGNvbmZpZy5lbmFibGVHaXRIdWIgJiYge1xuICAgIGlkOiAnZ2l0aHViJyxcbiAgICBuYW1lOiAnR2l0SHViJ1xuICB9XG5dKVxuXG5jb25zdCBzZWxlY3RlZFNvdXJjZSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdzZWxlY3RlZFNvdXJjZScpXG5jb25zdCBvbmx5U291cmNlID0gc291cmNlQ2hvaWNlcy5sZW5ndGggPT09IDEgPyBzb3VyY2VDaG9pY2VzWzBdLmlkIDogbnVsbFxuXG5leHBvcnQgY29uc3QgZGVmYXVsdFNvdXJjZSA9IG9ubHlTb3VyY2UgfHwgKFxuICBzb3VyY2VDaG9pY2VzLmZpbmQoc291cmNlID0+IHNvdXJjZS5pZCA9PT0gc2VsZWN0ZWRTb3VyY2UpXG4gICAgPyBzZWxlY3RlZFNvdXJjZVxuICAgIDogc291cmNlQ2hvaWNlc1swXS5pZFxuKVxuIiwiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJ1xuXG5pbXBvcnQgRGlhbG9nQm94IGZyb20gJy4uL0NvbW1vbi9EaWFsb2dCb3gnXG5pbXBvcnQgTW9kYWwgZnJvbSAnLi4vQ29tbW9uL01vZGFsJ1xuaW1wb3J0IHsgR2VuZXJhbEhlbHBPZmZlckNvcHkgfSBmcm9tICcuL3N1cHBvcnQnXG5cbmZ1bmN0aW9uIEtleW1hcEJpbmRpbmdzVXNlUHJlcHJvY2Vzc29yTWFjcm9zIChwcm9wcykge1xuICBjb25zdCB7IG9uRGlzbWlzcyB9ID0gcHJvcHNcblxuICByZXR1cm4gKFxuICAgIDxNb2RhbD5cbiAgICAgIDxEaWFsb2dCb3ggb25EaXNtaXNzPXtvbkRpc21pc3N9PlxuICAgICAgICA8aDI+Q291bGQgbm90IHBhcnNlIGtleW1hcDwvaDI+XG4gICAgICAgIDxwPlxuICAgICAgICAgIEl0IGxvb2tzIGxpa2Ugc29tZSBiaW5kaW5ncyBpbiB5b3VyIGtleW1hcCBhcmUgdXNpbmcgY3VzdG9tIHByZS1wcm9jZXNzb3JcbiAgICAgICAgICBtYWNyb3Mgd2hpY2ggaXNuJ3Qgc3VwcG9ydGVkIGJ5IHRoZSBLZXltYXAgRWRpdG9yLiBUaGVzZSBtYWNyb3MgbWFrZVxuICAgICAgICAgIGl0IGRpZmZpY3VsdCBib3RoIHRvIHJlc29sdmUgYmluZGluZ3MgdG8gYmVoYXZpb3JzIGFuZCBwYXJhbWV0ZXJzLCBhc1xuICAgICAgICAgIHdlbGwgYXMgdG8gZ2VuZXJhdGUgbW9kaWZpZWQga2V5bWFwIGNvZGUgdGhhdCBpcyBjb25zaXN0ZW50IHdpdGggeW91clxuICAgICAgICAgIG9yaWdpbmFsIGludGVudGlvbnMuXG4gICAgICAgIDwvcD5cbiAgICAgICAgPHA+XG4gICAgICAgICAgUGxlYXNlIGVpdGhlciBjb250aW51ZSBlZGl0aW5nIHlvdXIga2V5bWFwIGJ5IGhhbmQgd2l0aCB0aGVzZSBoZWxwZXJzXG4gICAgICAgICAgb3IgaWYgeW91IHdvdWxkIGxpa2UgdG8gdXNlIHRoaXMgZWRpdG9yLCByZXdyaXRlIHRoZSBrZXltYXAgdG8gdXNlXG4gICAgICAgICAgWk1LJ3Mgc3ludGF4IGRpcmVjdGx5LlxuICAgICAgICA8L3A+XG4gICAgICAgIHtHZW5lcmFsSGVscE9mZmVyQ29weX1cbiAgICAgIDwvRGlhbG9nQm94PlxuICAgIDwvTW9kYWw+XG4gIClcbn1cblxuS2V5bWFwQmluZGluZ3NVc2VQcmVwcm9jZXNzb3JNYWNyb3MucHJvcFR5cGVzID0ge1xuICBvbkRpc21pc3M6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbn1cblxuZXhwb3J0IGRlZmF1bHQgS2V5bWFwQmluZGluZ3NVc2VQcmVwcm9jZXNzb3JNYWNyb3NcbiIsImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcydcblxuaW1wb3J0IERpYWxvZ0JveCBmcm9tICcuLi9Db21tb24vRGlhbG9nQm94J1xuaW1wb3J0IE1vZGFsIGZyb20gJy4uL0NvbW1vbi9Nb2RhbCdcbmltcG9ydCB7IEdlbmVyYWxIZWxwT2ZmZXJDb3B5IH0gZnJvbSAnLi9zdXBwb3J0J1xuXG5mdW5jdGlvbiBLZXltYXBQYXJzaW5nRmFpbGVkIChwcm9wcykge1xuICBjb25zdCB7IG9uRGlzbWlzcyB9ID0gcHJvcHNcblxuICByZXR1cm4gKFxuICAgIDxNb2RhbD5cbiAgICAgIDxEaWFsb2dCb3ggb25EaXNtaXNzPXtvbkRpc21pc3N9PlxuICAgICAgICA8aDI+Q291bGQgbm90IHBhcnNlIGtleW1hcDwvaDI+XG4gICAgICAgIDxwPlxuICAgICAgICAgIFNvbWV0aGluZyB3ZW50IHdyb25nIHdoaWxlIHRyeWluZyB0byBwYXJzZSB5b3VyIGtleW1hcC4gSXQncyBoYXJkIHRvXG4gICAgICAgICAgc2F5IHdoYXQgZXhhY3RseSwgYmVjYXVzZSBJIHdhc24ndCBleHBlY3RpbmcgdGhpcy5cbiAgICAgICAgPC9wPlxuICAgICAgICA8cD5cbiAgICAgICAgICBBIGNvbW1vbiBvY2N1cnJlbmNlIGhlcmUgaXMga2V5bWFwcyB1c2luZyBhIHZhcmlldHkgb2YgcHJlLXByb2Nlc3NvclxuICAgICAgICAgIG1hY3JvcyB0byBkZWZpbmUgbGF5ZXJzL2NvbWJvcy9ldGMuXG4gICAgICAgIDwvcD5cbiAgICAgICAge0dlbmVyYWxIZWxwT2ZmZXJDb3B5fVxuICAgICAgPC9EaWFsb2dCb3g+XG4gICAgPC9Nb2RhbD5cbiAgKVxufVxuXG5LZXltYXBQYXJzaW5nRmFpbGVkLnByb3BUeXBlcyA9IHtcbiAgb25EaXNtaXNzOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG59XG5cbmV4cG9ydCBkZWZhdWx0IEtleW1hcFBhcnNpbmdGYWlsZWRcbiIsImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcydcblxuaW1wb3J0IERpYWxvZ0JveCBmcm9tICcuLi9Db21tb24vRGlhbG9nQm94J1xuaW1wb3J0IE1vZGFsIGZyb20gJy4uL0NvbW1vbi9Nb2RhbCdcblxuZnVuY3Rpb24gS2V5bWFwVXNpbmdNaXJ5b2t1IChwcm9wcykge1xuICBjb25zdCB7IG9uRGlzbWlzcyB9ID0gcHJvcHNcblxuICByZXR1cm4gKFxuICAgIDxNb2RhbD5cbiAgICAgIDxEaWFsb2dCb3ggb25EaXNtaXNzPXtvbkRpc21pc3N9PlxuICAgICAgICA8aDI+Q291bGQgbm90IHBhcnNlIE1pcnlva3Uga2V5bWFwPC9oMj5cbiAgICAgICAgPHA+XG4gICAgICAgICAgSXQgbG9va3MgbGlrZSB5b3VyIGtleWJvYXJkIGlzIGJ1aWx0IHVzaW5nIE1pcnlva3UgdG8gbWFuYWdlIHRoZVxuICAgICAgICAgIGNvbmZpZ3VyYXRpb24gYW5kIGtleW1hcC4gUGFyc2luZyBhbmQgZWRpdGluZyBrZXltYXBzIHRoYXQgdXNlIHRoaXNcbiAgICAgICAgICBzeW50YXggaXMgdW5zdXBwb3J0ZWQgYnkgdGhlIEtleW1hcCBFZGl0b3IuXG4gICAgICAgIDwvcD5cbiAgICAgICAgPHA+XG4gICAgICAgICAgUGxlYXNlIGVpdGhlciBjb250aW51ZSBlZGl0aW5nIHlvdXIga2V5bWFwIGJ5IGhhbmQgd2l0aCB0aGVzZSBoZWxwZXJzXG4gICAgICAgICAgb3IgaWYgeW91IHdvdWxkIGxpa2UgdG8gdXNlIHRoaXMgZWRpdG9yLCByZXdyaXRlIHRoZSBrZXltYXAgdG8gdXNlXG4gICAgICAgICAgWk1LJ3Mgc3ludGF4IGRpcmVjdGx5LlxuICAgICAgICA8L3A+XG4gICAgICA8L0RpYWxvZ0JveD5cbiAgICA8L01vZGFsPlxuICApXG59XG5cbktleW1hcFVzaW5nTWlyeW9rdS5wcm9wVHlwZXMgPSB7XG4gIG9uRGlzbWlzczogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxufVxuXG5leHBvcnQgZGVmYXVsdCBLZXltYXBVc2luZ01pcnlva3VcbiIsImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcydcblxuaW1wb3J0IERpYWxvZ0JveCBmcm9tICcuLi9Db21tb24vRGlhbG9nQm94J1xuaW1wb3J0IE1vZGFsIGZyb20gJy4uL0NvbW1vbi9Nb2RhbCdcbmltcG9ydCB7IEdpdEh1Yklzc3Vlc0xpbmsgfSBmcm9tICcuL3N1cHBvcnQnXG5cbmZ1bmN0aW9uIE1pc3NpbmdSb290Tm9kZSAocHJvcHMpIHtcbiAgY29uc3QgeyBvbkRpc21pc3MgfSA9IHByb3BzXG5cbiAgcmV0dXJuIChcbiAgICA8TW9kYWw+XG4gICAgICA8RGlhbG9nQm94IG9uRGlzbWlzcz17b25EaXNtaXNzfT5cbiAgICAgICAgPGgyPkNvdWxkIG5vdCBwYXJzZSBrZXltYXA8L2gyPlxuICAgICAgICA8cD5cbiAgICAgICAgICBNaXNzaW5nIGRldmljZXRyZWUgcm9vdCBub2RlLlxuICAgICAgICA8L3A+XG4gICAgICAgIDxwPlxuICAgICAgICAgIFRoZSBrZXltYXAgZWRpdG9yIHdhcyB1bmFibGUgdG8gZmluZCBhIGRldmljZXRyZWUgcm9vdCBub2RlIGluIHlvdXJcbiAgICAgICAgICBrZXltYXAuIFRoaXMgbWVhbnMgdGhhdCBlaXRoZXIgc29tZXRoaW5nIGlzIHdyb25nIHdpdGggdGhlIHBhcnNlciBvclxuICAgICAgICAgIHNvbWV0aGluZyBpcyB3cm9uZyB3aXRoIHlvdXIga2V5bWFwJ3Mgc3ludGF4LlxuICAgICAgICA8L3A+XG4gICAgICAgIDxwPlxuICAgICAgICAgIElmIHlvdSd2ZSBiZWVuIHVzaW5nIHRoZSBrZXltYXAgZWRpdG9yIHN1Y2Nlc2Z1bGx5IHVwIHRvIG5vdyBpdCdzXG4gICAgICAgICAgcG9zc2libGUgdGhhdCBpdCBoYXMgaW50cm9kdWNlZCBhbiBlcnJvciBpbiB0aGUga2V5bWFwIGZpbGUuIFBsZWFzZVxuICAgICAgICAgIHJlYWNoIG91dCBmb3Igc3VwcG9ydCBhdCB7R2l0SHViSXNzdWVzTGlua30uXG4gICAgICAgIDwvcD5cbiAgICAgIDwvRGlhbG9nQm94PlxuICAgIDwvTW9kYWw+XG4gIClcbn1cblxuTWlzc2luZ1Jvb3ROb2RlLnByb3BUeXBlcyA9IHtcbiAgb25EaXNtaXNzOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG59XG5cbmV4cG9ydCBkZWZhdWx0IE1pc3NpbmdSb290Tm9kZVxuIiwiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJ1xuXG5pbXBvcnQgRGlhbG9nQm94IGZyb20gJy4uL0NvbW1vbi9EaWFsb2dCb3gnXG5pbXBvcnQgTW9kYWwgZnJvbSAnLi4vQ29tbW9uL01vZGFsJ1xuXG5mdW5jdGlvbiBabWtOb2RlZnJlZUNvbmZpZyAocHJvcHMpIHtcbiAgY29uc3QgeyBvbkRpc21pc3MgfSA9IHByb3BzXG5cbiAgcmV0dXJuIChcbiAgICA8TW9kYWw+XG4gICAgICA8RGlhbG9nQm94IG9uRGlzbWlzcz17b25EaXNtaXNzfT5cbiAgICAgICAgPGgyPkNvdWxkIG5vdCBwYXJzZSBrZXltYXA8L2gyPlxuICAgICAgICA8cD5cbiAgICAgICAgICBEZXRlY3RlZCB1c2Ugb2YgPGNvZGU+em1rLW5vZGVmcmVlLWNvbmZpZzwvY29kZT5cbiAgICAgICAgPC9wPlxuICAgICAgICA8cD5cbiAgICAgICAgICBJdCBsb29rcyBsaWtlIHlvdXIga2V5bWFwIGlzIGJ1aWx0IHVzaW5nIGhlbHBlciBmdW5jdGlvbnMgZnJvbSB0aGVcbiAgICAgICAgICB6bWstbm9kZWZyZWUtY29uZmlnIGxpYnJhcnkgdG8gcmVwbGFjZSBkZXZpY2V0cmVlIHN5bnRheC4gUGFyc2luZyBhbmRcbiAgICAgICAgICBlZGl0aW5nIGtleW1hcHMgdGhhdCB1c2UgdGhpcyBzeW50YXggaXMgdW5zdXBwb3J0ZWQgYnkgdGhlIEtleW1hcFxuICAgICAgICAgIEVkaXRvci5cbiAgICAgICAgPC9wPlxuICAgICAgICA8cD5cbiAgICAgICAgICBQbGVhc2UgZWl0aGVyIGNvbnRpbnVlIGVkaXRpbmcgeW91ciBrZXltYXAgYnkgaGFuZCB3aXRoIHRoZXNlIGhlbHBlcnNcbiAgICAgICAgICBvciBpZiB5b3Ugd291bGQgbGlrZSB0byB1c2UgdGhpcyBlZGl0b3IsIHJld3JpdGUgdGhlIGtleW1hcCB0byB1c2VcbiAgICAgICAgICBaTUsncyBzeW50YXggZGlyZWN0bHkuXG4gICAgICAgIDwvcD5cbiAgICAgIDwvRGlhbG9nQm94PlxuICAgIDwvTW9kYWw+XG4gIClcbn1cblxuWm1rTm9kZWZyZWVDb25maWcucHJvcFR5cGVzID0ge1xuICBvbkRpc21pc3M6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbn1cblxuZXhwb3J0IGRlZmF1bHQgWm1rTm9kZWZyZWVDb25maWdcbiIsImltcG9ydCBEaWFsb2dCb3ggZnJvbSAnLi4vQ29tbW9uL0RpYWxvZ0JveCdcbmltcG9ydCBNb2RhbCBmcm9tICcuLi9Db21tb24vTW9kYWwnXG5pbXBvcnQgeyBLZXltYXBMYXlvdXRSZXNvdXJjZXMgfSBmcm9tICcuL3N1cHBvcnQnXG5cbmZ1bmN0aW9uIFN1Z2dlc3RBdXRvTGF5b3V0VHdlYWsgKHByb3BzKSB7XG4gIHJldHVybiAoXG4gICAgPE1vZGFsPlxuICAgICAgPERpYWxvZ0JveCB7Li4ucHJvcHN9PlxuICAgICAgICA8aDI+VGhpcyBsYXlvdXQgd2FzIEF1dG8tR2VuZXJhdGVkPC9oMj5cbiAgICAgICAgPHA+XG4gICAgICAgICAgSGkgdGhlcmUhIFRoZXJlIHdhc24ndCBhIGxheW91dCBkZWZpbml0aW9uIHRvIGFjY29tcGFueSB5b3VyIGtleW1hcFxuICAgICAgICAgIGZpbGUsIHNvIHRoZSBrZXltYXAgZWRpdG9yIHRyaWVkIHRvIGdlbmVyYXRlIG9uZSBhdXRvbWF0aWNhbGx5IGluIGFcbiAgICAgICAgICBsYXN0LWRpdGNoIGVmZm9ydCB0byBoZWxwIHlvdSBnZXQgaW50byB0aGUgYXBwLlxuICAgICAgICA8L3A+XG4gICAgICAgIDxwPlxuICAgICAgICAgIFRoaXMgbGF5b3V0IGRlZmluaXRpb24gd2FzIChvciB3aWxsIGJlKSBzYXZlZCB3aGVuIHlvdSBmaXJzdCBzYXZlXG4gICAgICAgICAga2V5bWFwIGNoYW5nZXMgd2l0aCB0aGUga2V5bWFwIGVkaXRvciwgc28gcmVtZW1iZXIgdGhhdCBpZiB0aGVyZSBhcmVcbiAgICAgICAgICBhbnkgdHdlYWtzIHlvdSdkIGxpa2UgdG8gbWFrZSB0byBpbXByb3ZlIGl0IHlvdSBjYW4gZG8gc28gYnkgZWRpdGluZ1xuICAgICAgICAgIHRoZSA8Y29kZT5pbmZvLmpzb248L2NvZGU+IGZpbGUuXG4gICAgICAgIDwvcD5cbiAgICAgICAge0tleW1hcExheW91dFJlc291cmNlc31cbiAgICAgIDwvRGlhbG9nQm94PlxuICAgIDwvTW9kYWw+XG4gIClcbn1cblxuU3VnZ2VzdEF1dG9MYXlvdXRUd2Vhay5wcm9wVHlwZXMgPSB7fVxuXG5leHBvcnQgZGVmYXVsdCBTdWdnZXN0QXV0b0xheW91dFR3ZWFrXG4iLCJpbXBvcnQgZmluZCBmcm9tICdsb2Rhc2gvZmluZCdcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcydcbmltcG9ydCB7IHVzZUNhbGxiYWNrLCB1c2VFZmZlY3QsIHVzZVJlZiwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCdcblxuaW1wb3J0IExvY2FsUGlja2VyIGZyb20gJy4vTG9jYWwvUGlja2VyJ1xuaW1wb3J0IERlbW9QaWNrZXIgZnJvbSAnLi9EZW1vL1BpY2tlcidcbmltcG9ydCBHaXRodWJQaWNrZXIgZnJvbSAnLi9HaXRodWIvUGlja2VyJ1xuaW1wb3J0IHsgc291cmNlQ2hvaWNlcywgZGVmYXVsdFNvdXJjZSB9IGZyb20gJy4vc291cmNlcydcbmltcG9ydCB7IEJ1dHRvbiwgU2VsZWN0IH0gZnJvbSAnLi9Db250cm9scydcbmltcG9ydCB7IGdldEVycm9yRGlhbG9nIH0gZnJvbSAnLi9lcnJvcnMnXG5pbXBvcnQgU3VnZ2VzdEF1dG9MYXlvdXRUd2VhayBmcm9tICcuLi9EaWFsb2dzL1N1Z2dlc3RBdXRvTGF5b3V0VHdlYWsnXG5pbXBvcnQgSWNvbiBmcm9tICcuLi9Db21tb24vSWNvbidcblxuZnVuY3Rpb24gdXNlVG9nZ2xlIChpbml0aWFsKSB7XG4gIGNvbnN0IFt0b2dnbGVTdGF0ZSwgc2V0VG9nZ2xlU3RhdGVdID0gdXNlU3RhdGUoaW5pdGlhbClcbiAgY29uc3Qgc2V0VHJ1ZSA9IHVzZUNhbGxiYWNrKCgpID0+IHNldFRvZ2dsZVN0YXRlKHRydWUpLCBbc2V0VG9nZ2xlU3RhdGVdKVxuICBjb25zdCBzZXRGYWxzZSA9IHVzZUNhbGxiYWNrKCgpID0+IHNldFRvZ2dsZVN0YXRlKGZhbHNlKSwgW3NldFRvZ2dsZVN0YXRlXSlcbiAgY29uc3Qgc2V0SW52ZXJ0ID0gdXNlQ2FsbGJhY2soKCkgPT4gc2V0VG9nZ2xlU3RhdGUoc3RhdGUgPT4gIXN0YXRlKSwgW3NldFRvZ2dsZVN0YXRlXSlcblxuICByZXR1cm4gW3RvZ2dsZVN0YXRlLCBzZXRUcnVlLCBzZXRGYWxzZSwgc2V0SW52ZXJ0XVxufVxuXG5mdW5jdGlvbiB1c2VDbGlja091dHNpZGVIYW5kbGVyIChyZWYsIGNhbGxiYWNrLCBlbmFibGVkID0gdHJ1ZSkge1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChlbmFibGVkKSB7XG4gICAgICBjb25zdCBoYW5kbGVDbGljayA9IGV2ZW50ID0+IHtcbiAgICAgICAgY29uc3QgaXNJbkRvY3VtZW50ID0gZG9jdW1lbnQuYm9keS5jb250YWlucyhldmVudC50YXJnZXQpXG4gICAgICAgIGNvbnN0IGlzSW5XcmFwcGVyID0gcmVmLmN1cnJlbnQuY29udGFpbnMoZXZlbnQudGFyZ2V0KVxuICAgICAgICBpZiAoaXNJbkRvY3VtZW50ICYmICFpc0luV3JhcHBlcikge1xuICAgICAgICAgIGNhbGxiYWNrKClcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgaGFuZGxlQ2xpY2spXG4gICAgICByZXR1cm4gKCkgPT4gZG9jdW1lbnQuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIGhhbmRsZUNsaWNrKVxuICAgIH1cbiAgfSwgW3JlZiwgZW5hYmxlZCwgY2FsbGJhY2tdKVxufVxuXG5mdW5jdGlvbiBLZXlib2FyZFBpY2tlciAocHJvcHMpIHtcbiAgY29uc3QgeyBvblNlbGVjdCB9ID0gcHJvcHNcbiAgY29uc3Qgd3JhcHBlclJlZiA9IHVzZVJlZigpXG4gIGNvbnN0IFtzb3VyY2UsIHNldFNvdXJjZV0gPSB1c2VTdGF0ZShkZWZhdWx0U291cmNlKVxuICBjb25zdCBbeyBhdXRvR2VuZXJhdGVkIH0sIHNldExheW91dEluZm9dID0gdXNlU3RhdGUoeyBhdXRvR2VuZXJhdGVkOiBmYWxzZSB9KVxuICBjb25zdCBbc2hvd0RpYWxvZywgc2V0U2hvd0RpYWxvZ10gPSB1c2VTdGF0ZShudWxsKVxuICBjb25zdCBjbG9zZURpYWxvZyA9IHVzZUNhbGxiYWNrKCgpID0+IHNldFNob3dEaWFsb2cobnVsbCksIFtzZXRTaG93RGlhbG9nXSlcbiAgY29uc3QgW2lzRXhwYW5kZWQsIHNldEV4cGFuZGVkLCBzZXRDb21wYWN0XSA9IHVzZVRvZ2dsZSh0cnVlKVxuICBjb25zdCBzaG93TGF5b3V0SGVscCA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBzZXRTaG93RGlhbG9nKHtcbiAgICAgIGNvbXBvbmVudDogU3VnZ2VzdEF1dG9MYXlvdXRUd2VhayxcbiAgICAgIG9uQ2xvc2U6IGNsb3NlRGlhbG9nXG4gICAgfSlcbiAgfSwgW3NldFNob3dEaWFsb2csIGNsb3NlRGlhbG9nXSlcblxuICB1c2VDbGlja091dHNpZGVIYW5kbGVyKHdyYXBwZXJSZWYsIHNldENvbXBhY3QsIGlzRXhwYW5kZWQgJiYgc291cmNlID09PSAnZ2l0aHViJylcblxuICBjb25zdCBoYW5kbGVLZXlib2FyZFNlbGVjdGVkID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgY29uc3QgeyB3YXJuaW5nRmxhZ3MgPSBbXSB9ID0gZXZlbnQua2V5bWFwXG4gICAgY29uc3QgeyBhdXRvR2VuZXJhdGVkID0gZmFsc2UgfSA9IGV2ZW50LmxheW91dE1ldGFkYXRhIHx8IHt9XG4gICAgY29uc3QgZXJyb3IgPSBnZXRFcnJvckRpYWxvZyh3YXJuaW5nRmxhZ3MpXG5cbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgIHNldFNob3dEaWFsb2coeyBjb21wb25lbnQ6IGVycm9yLCBvbkNsb3NlOiBjbG9zZURpYWxvZyB9KVxuICAgICAgb25TZWxlY3QoeyBzb3VyY2UsIGtleWJvYXJkOiBudWxsIH0pXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBzZXRMYXlvdXRJbmZvKHsgYXV0b0dlbmVyYXRlZCB9KVxuICAgIG9uU2VsZWN0KHsgc291cmNlLCAuLi5ldmVudCB9KVxuICB9LCBbb25TZWxlY3QsIHNvdXJjZSwgc2V0U2hvd0RpYWxvZywgY2xvc2VEaWFsb2ddKVxuXG4gIGNvbnN0IGhhbmRsZUVycm9yID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gKHsgZGlhbG9nLCBkaWFsb2dQcm9wcyB9KSB7XG4gICAgc2V0U2hvd0RpYWxvZyh7IGNvbXBvbmVudDogZGlhbG9nLCBkaWFsb2dQcm9wcywgb25DbG9zZTogY2xvc2VEaWFsb2cgfSlcbiAgICBvblNlbGVjdCh7IHNvdXJjZSwga2V5Ym9hcmQ6IG51bGwgfSlcbiAgfSwgW3NldFNob3dEaWFsb2csIGNsb3NlRGlhbG9nLCBvblNlbGVjdCwgc291cmNlXSlcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdzZWxlY3RlZFNvdXJjZScsIHNvdXJjZSlcbiAgfSwgW3NvdXJjZV0pXG5cbiAgLy8gVE9ETzogVXNlIHNvdXJjZSB0byBtZW1vaXplIGEgUGlja2VyIGFzIGRlZmluZWQgaW4gJy4vc291cmNlcydcbiAgLy8gVE9ETzogVHVybiB0aGlzIGludG8gYSBjb250ZXh0PyBDYW4gcHJvdmlkZTpcbiAgLy8gLSByZW5kZXJhYmxlIHBpY2tlcixcbiAgLy8gLSByZW5kZXJhYmxlIGFjdGlvbnMsXG4gIC8vIC0gY2FsbGJhY2tzIHRvIGxvYWQvcmVsb2FkXG5cbiAgY29uc3Qgc2VsZWN0ZWRTb3VyY2UgPSBmaW5kKHNvdXJjZUNob2ljZXMsIHsgaWQ6IHNvdXJjZSB9KVxuXG4gIHJldHVybiAoXG4gICAgPGRpdiByZWY9e3dyYXBwZXJSZWZ9IHN0eWxlPXt7XG4gICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICBmbGV4RGlyZWN0aW9uOiAncm93JyxcbiAgICAgIGFsaWduSXRlbXM6ICdlbmQnLFxuICAgICAgZ2FwOiAnNXB4JyxcbiAgICAgIG1hcmdpbjogJzVweCdcbiAgICB9fT5cbiAgICAgIDxTZWxlY3RcbiAgICAgICAgbGFiZWw9XCJTb3VyY2VcIlxuICAgICAgICB2YWx1ZT17c2VsZWN0ZWRTb3VyY2V9XG4gICAgICAgIG9wdGlvbnM9e3NvdXJjZUNob2ljZXN9XG4gICAgICAgIGdldE9wdGlvbkxhYmVsPXtvcHRpb24gPT4gb3B0aW9uLm5hbWV9XG4gICAgICAgIGdldE9wdGlvblZhbHVlPXtvcHRpb24gPT4gb3B0aW9uLmlkfVxuICAgICAgICBvbkNoYW5nZT17KHsgaWQgfSkgPT4gc2V0U291cmNlKGlkKX1cbiAgICAgIC8+XG5cbiAgICAgIHtzaG93RGlhbG9nPy5jb21wb25lbnQgJiYgPHNob3dEaWFsb2cuY29tcG9uZW50IHsuLi5zaG93RGlhbG9nLmRpYWxvZ1Byb3BzIHx8IHt9fSBvbkRpc21pc3M9e3Nob3dEaWFsb2cub25DbG9zZX0gLz59XG5cbiAgICAgIHtzb3VyY2UgPT09ICdsb2NhbCcgJiYgPExvY2FsUGlja2VyIG9uRXJyb3I9e2hhbmRsZUVycm9yfSBvblNlbGVjdD17aGFuZGxlS2V5Ym9hcmRTZWxlY3RlZH0gLz59XG4gICAgICB7c291cmNlID09PSAnZGVtbycgJiYgPERlbW9QaWNrZXIgb25TZWxlY3Q9e2hhbmRsZUtleWJvYXJkU2VsZWN0ZWR9IC8+fVxuICAgICAge3NvdXJjZSA9PT0gJ2dpdGh1YicgJiYgKFxuICAgICAgICA8R2l0aHViUGlja2VyXG4gICAgICAgICAgZXhwYW5kZWQ9e2lzRXhwYW5kZWR9XG4gICAgICAgICAgb25TZWxlY3Q9e2hhbmRsZUtleWJvYXJkU2VsZWN0ZWR9XG4gICAgICAgICAgb25FcnJvcj17aGFuZGxlRXJyb3J9XG4gICAgICAgICAgb25FeHBhbmQ9e3NldEV4cGFuZGVkfVxuICAgICAgICAvPlxuICAgICAgKX1cblxuICAgICAge2F1dG9HZW5lcmF0ZWQgJiYgKFxuICAgICAgICA8QnV0dG9uIG9uQ2xpY2s9e3Nob3dMYXlvdXRIZWxwfT5cbiAgICAgICAgICA8SWNvbiBuYW1lPVwid2FybmluZ1wiIC8+IExheW91dCB3cm9uZz9cbiAgICAgICAgPC9CdXR0b24+XG4gICAgICApfVxuICAgIDwvZGl2PlxuICApXG59XG5cbktleWJvYXJkUGlja2VyLnByb3BUeXBlcyA9IHtcbiAgb25TZWxlY3Q6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbn1cblxuZXhwb3J0IGRlZmF1bHQgS2V5Ym9hcmRQaWNrZXJcbiIsImltcG9ydCBLZXltYXBCaW5kaW5nc1VzZVByZXByb2Nlc3Nvck1hY3JvcyBmcm9tICcuLi9EaWFsb2dzL0tleW1hcEJpbmRpbmdzVXNlUHJlcHJvY2Vzc29yTWFjcm9zJ1xuaW1wb3J0IEtleW1hcFBhcnNpbmdGYWlsZWQgZnJvbSAnLi4vRGlhbG9ncy9LZXltYXBQYXJzaW5nRmFpbGVkJ1xuaW1wb3J0IEtleW1hcFVzaW5nTWlyeW9rdSBmcm9tICcuLi9EaWFsb2dzL0tleW1hcFVzaW5nTWlyeW9rdSdcbmltcG9ydCBNaXNzaW5nUm9vdE5vZGUgZnJvbSAnLi4vRGlhbG9ncy9NaXNzaW5nUm9vdE5vZGUnXG5pbXBvcnQgWm1rTm9kZWZyZWVDb25maWcgZnJvbSAnLi4vRGlhbG9ncy9abWtOb2RlZnJlZUNvbmZpZydcblxuZXhwb3J0IGZ1bmN0aW9uIGdldEVycm9yRGlhbG9nICh3YXJuaW5nRmxhZ3MpIHtcbiAgc3dpdGNoICh3YXJuaW5nRmxhZ3NbMF0pIHtcbiAgICBjYXNlICdVU0lOR19aTUtfTk9ERUZSRUVfTUFDUk9TJzpcbiAgICAgIHJldHVybiBabWtOb2RlZnJlZUNvbmZpZ1xuICAgIGNhc2UgJ1VTSU5HX01JUllPS1VfRFRTSSc6XG4gICAgICByZXR1cm4gS2V5bWFwVXNpbmdNaXJ5b2t1XG4gICAgY2FzZSAnVVNJTkdfTk9OX1pNS19NQUNSTyc6XG4gICAgICByZXR1cm4gS2V5bWFwQmluZGluZ3NVc2VQcmVwcm9jZXNzb3JNYWNyb3NcbiAgICBjYXNlICdLRVlNQVBfUEFSU0lOR19GQUlMRUQnOlxuICAgICAgcmV0dXJuIEtleW1hcFBhcnNpbmdGYWlsZWRcbiAgICBjYXNlICdNSVNTSU5HX1JPT1RfTk9ERSc6XG4gICAgICByZXR1cm4gTWlzc2luZ1Jvb3ROb2RlXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBudWxsXG4gIH1cbn1cbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMl0udXNlWzFdIS4vdW5leHBlY3RlZC1lcnJvci5tb2R1bGUuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMl0udXNlWzFdIS4vdW5leHBlY3RlZC1lcnJvci5tb2R1bGUuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJ1xuaW1wb3J0IFN0YWNrVHJhY2UgZnJvbSAnc3RhY2t0cmFjZS1qcydcblxuaW1wb3J0IExpbmsgZnJvbSAnLi4vQ29tbW9uL0xpbmsnXG5pbXBvcnQgTW9kYWwgZnJvbSAnLi4vQ29tbW9uL01vZGFsJ1xuaW1wb3J0IERpYWxvZ0JveCBmcm9tICcuLi9Db21tb24vRGlhbG9nQm94J1xuaW1wb3J0IEljb25CdXR0b24gZnJvbSAnLi4vQ29tbW9uL0ljb25CdXR0b24nXG5cbmltcG9ydCBzdHlsZXMgZnJvbSAnLi91bmV4cGVjdGVkLWVycm9yLm1vZHVsZS5jc3MnXG5pbXBvcnQgeyB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnXG5cbmZ1bmN0aW9uIGZvcm1hdFN0YWNrRnJhbWUgKGZyYW1lKSB7XG4gIHJldHVybiBgICAke2ZyYW1lLmZpbGVOYW1lfToke2ZyYW1lLmxpbmVOdW1iZXJ9OiR7ZnJhbWUuY29sdW1uTnVtYmVyfWBcbn1cblxuZnVuY3Rpb24gZm9ybWF0RXJyb3JUZXh0IChlcnJvciwgc3RhY2sgPSBbXSkge1xuICByZXR1cm4gYFxuJHtlcnJvci5uYW1lfVxuXG4ke2Vycm9yLm1lc3NhZ2V9XG5cbiR7c3RhY2subWFwKGZvcm1hdFN0YWNrRnJhbWUpLmpvaW4oJ1xcbicpfVxuYC50cmltKClcbn1cblxuY29uc3QgbmV3R2l0aHViSXNzdWUgPSAoXG4gIDxMaW5rIGV4dGVybmFsIGhyZWY9XCJodHRwczovL2dpdGh1Yi5jb20vbmlja2NvdXRzb3Mva2V5bWFwLWVkaXRvci9pc3N1ZXMvbmV3XCI+XG4gICAgbmV3IGlzc3VlXG4gIDwvTGluaz5cbilcblxuZnVuY3Rpb24gVW5leHBlY3RlZEVycm9yICh7IGVycm9yIH0pIHtcbiAgY29uc3QgW3N0YWNrLCBzZXRTdGFja10gPSB1c2VTdGF0ZShbXSlcbiAgY29uc3QgW2Zvcm1hdHRlZEVycm9yLCBzZXRGb3JtYXR0ZWRFcnJvcl0gPSB1c2VTdGF0ZSgnJylcbiAgY29uc3QgW2NvcGllZCwgc2V0Q29waWVkXSA9IHVzZVN0YXRlKGZhbHNlKVxuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgYXN5bmMgZnVuY3Rpb24gcGFyc2VTdGFjayAoKSB7XG4gICAgICBzZXRTdGFjayhhd2FpdCBTdGFja1RyYWNlLmZyb21FcnJvcihlcnJvcikpXG4gICAgfVxuXG4gICAgcGFyc2VTdGFjaygpXG4gIH0sIFtzZXRTdGFjaywgZXJyb3JdKVxuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgc2V0Rm9ybWF0dGVkRXJyb3IoZm9ybWF0RXJyb3JUZXh0KGVycm9yLCBzdGFjaykpXG4gIH0sIFtlcnJvciwgc3RhY2tdKVxuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGNvcGllZCkge1xuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHNldENvcGllZChmYWxzZSlcbiAgICAgIH0sIDMwMDApXG4gICAgfVxuICB9LCBbY29waWVkLCBzZXRDb3BpZWRdKVxuXG4gIGZ1bmN0aW9uIGNvcHlFcnJvclRleHQgKCkge1xuICAgIGNvbnN0IGJhY2tUaWNrcyA9ICdgYGAnXG4gICAgY29uc3QgdGV4dCA9IGAke2JhY2tUaWNrc31cXG4ke2Zvcm1hdHRlZEVycm9yfVxcbiR7YmFja1RpY2tzfWBcbiAgICBuYXZpZ2F0b3IuY2xpcGJvYXJkLndyaXRlVGV4dCh0ZXh0KVxuICAgICAgLnRoZW4oKCkgPT4gc2V0Q29waWVkKHRydWUpKVxuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8TW9kYWw+XG4gICAgICA8RGlhbG9nQm94IGRpc21pc3NUZXh0PXtmYWxzZX0gc3R5bGU9e3sgbWF4V2lkdGg6ICc3MDBweCcgfX0+XG4gICAgICAgIDxoMj5VbmV4cGVjdGVkIGVycm9yPC9oMj5cbiAgICAgICAgPHA+XG4gICAgICAgICAgU29tZXRoaW5nIHVuZXhwZWN0ZWQgaGFwcGVuZWQgYW5kIHRoZSBrZXltYXAgZWRpdG9yIGFwcCBjYW5ub3RcbiAgICAgICAgICByZWNvdmVyLiBQbGVhc2UgY29uc2lkZXIgdGFraW5nIGEgbW9tZW50IHRvIG9wZW4gYSB7bmV3R2l0aHViSXNzdWV9XG4gICAgICAgICAgd2l0aCB0aGUgZGV0YWlscyBiZWxvdyB0byBoZWxwIG1lIGludmVzdGlnYXRlIGFuZCBpbXByb3ZlIHRoZSBhcHAuXG4gICAgICAgIDwvcD5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5zdGFja1RyYWNlfT5cbiAgICAgICAgICA8cHJlPntmb3JtYXR0ZWRFcnJvcn08L3ByZT5cbiAgICAgICAgICA8SWNvbkJ1dHRvblxuICAgICAgICAgICAgaWNvbj1cImNvcHlcIlxuICAgICAgICAgICAgdGl0bGU9XCJDb3B5IGVycm9yIHRleHRcIlxuICAgICAgICAgICAgY2xhc3NOYW1lPXtzdHlsZXMuYnV0dG9ufVxuICAgICAgICAgICAgb25DbGljaz17Y29weUVycm9yVGV4dH1cbiAgICAgICAgICAvPlxuICAgICAgICAgIHtjb3BpZWQgJiYgKFxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5jb3B5TWVzc2FnZX0+Q29waWVkITwvZGl2PlxuICAgICAgICAgICl9XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9EaWFsb2dCb3g+XG4gICAgPC9Nb2RhbD5cbiAgKVxufVxuXG5VbmV4cGVjdGVkRXJyb3IucHJvcFR5cGVzID0ge1xuICBlcnJvcjogUHJvcFR5cGVzLmluc3RhbmNlT2YoRXJyb3IpLmlzUmVxdWlyZWRcbn1cblxuZXhwb3J0IGRlZmF1bHQgVW5leHBlY3RlZEVycm9yXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgVW5leHBlY3RlZEVycm9yIGZyb20gJy4vRGlhbG9ncy9VbmV4cGVjdGVkRXJyb3InXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEVycm9yQm91bmRhcnkgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3RvciAocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcylcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgZXJyb3I6IG51bGxcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yIChlcnJvcikge1xuICAgIHJldHVybiB7IGVycm9yIH1cbiAgfVxuXG4gIHJlbmRlciAoKSB7XG4gICAgY29uc3QgeyBjaGlsZHJlbiB9ID0gdGhpcy5wcm9wc1xuICAgIGNvbnN0IHsgZXJyb3IgfSA9IHRoaXMuc3RhdGVcblxuICAgIGlmIChlcnJvcikge1xuICAgICAgcmV0dXJuIDxVbmV4cGVjdGVkRXJyb3IgZXJyb3I9e2Vycm9yfSAvPlxuICAgIH1cblxuICAgIHJldHVybiBjaGlsZHJlblxuICB9XG59XG4iLCJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnXG5cbmltcG9ydCBEaWFsb2dCb3ggZnJvbSAnLi4vQ29tbW9uL0RpYWxvZ0JveCdcbmltcG9ydCBNb2RhbCBmcm9tICcuLi9Db21tb24vTW9kYWwnXG5pbXBvcnQgeyBHaXRIdWJJc3N1ZXNMaW5rIH0gZnJvbSAnLi9zdXBwb3J0J1xuXG5mdW5jdGlvbiBLZXltYXBTYXZlRmFpbGVkIChwcm9wcykge1xuICBjb25zdCB7IG9uRGlzbWlzcyB9ID0gcHJvcHNcbiAgcmV0dXJuIChcbiAgICA8TW9kYWw+XG4gICAgICA8RGlhbG9nQm94IG9uRGlzbWlzcz17b25EaXNtaXNzfT5cbiAgICAgICAgPGgyPkZhaWxlZCB0byBzYXZlIGtleW1hcCBjaGFuZ2VzPC9oMj5cbiAgICAgICAgPHA+XG4gICAgICAgICAgU29ycnksIGFuIHVuZXhwZWN0ZWQgZXJyb3Igb2NjdXJyZWQgd2hpbGUgdHJ5aW5nIHRvIHNhdmUgeW91ciBrZXltYXAuXG4gICAgICAgIDwvcD5cbiAgICAgICAgPHA+XG4gICAgICAgICAgUGxlYXNlIHRyeSBhZ2FpbiBvciByYWlzZSBhbiBpc3N1ZSBpZiB0aGUgcHJvYmxlbSBwZXJzaXN0cyBhbmQgSSdsbFxuICAgICAgICAgIHRyeSB0byB3b3JrIGl0IG91dCB3aXRoIHlvdS4gU2VyaW91c2x5IEkgY2FuIG9ubHkgZ2V0IHRoaXMgcmlnaHQgaWYgSVxuICAgICAgICAgIGtub3cgd2hhdCdzIHdyb25nLCBhbmQgaW4gc29tZSBjYXNlcyB0aGF0IGNvbWVzIGRvd24gdG8gcGVvcGxlIHVzaW5nXG4gICAgICAgICAgdGhpcyBlZGl0b3IgaW4gbW9yZSBhZHZhbmNlZCB3YXlzIHRoYW4gSSBteXNlbGYgaGF2ZS5cbiAgICAgICAgPC9wPlxuICAgICAgICA8cD5cbiAgICAgICAgICB7R2l0SHViSXNzdWVzTGlua31cbiAgICAgICAgPC9wPlxuICAgICAgPC9EaWFsb2dCb3g+XG4gICAgPC9Nb2RhbD5cbiAgKVxufVxuXG5LZXltYXBTYXZlRmFpbGVkLnByb3BUeXBlcyA9IHtcbiAgb25EaXNtaXNzOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG59XG5cbmV4cG9ydCBkZWZhdWx0IEtleW1hcFNhdmVGYWlsZWRcbiIsImltcG9ydCAnQGZvcnRhd2Vzb21lL2ZvbnRhd2Vzb21lLWZyZWUvY3NzL2FsbC5jc3MnXG5cbmltcG9ydCB7IHVzZUNhbGxiYWNrLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCdcbmltcG9ydCB7IHVzZURpc3BhdGNoLCB1c2VTZWxlY3RvciB9IGZyb20gJ3JlYWN0LXJlZHV4J1xuXG5pbXBvcnQgJy4vQXBwLmNzcydcbmltcG9ydCB7IFNldHRpbmdzQ29udGV4dCB9IGZyb20gJy4vcHJvdmlkZXJzJ1xuXG5pbXBvcnQgSWNvbkJ1dHRvbiBmcm9tICcuL0NvbW1vbi9JY29uQnV0dG9uJ1xuaW1wb3J0IEtleWJvYXJkIGZyb20gJy4vS2V5Ym9hcmQvS2V5Ym9hcmQnXG5pbXBvcnQgR2l0SHViTGluayBmcm9tICcuL0dpdEh1YkxpbmsnXG5pbXBvcnQgU2V0dGluZ3MgZnJvbSAnLi9EaWFsb2dzL1NldHRpbmdzJ1xuaW1wb3J0IFNvdXJjZUFjdGlvbnMgZnJvbSAnLi9Tb3VyY2VzL1NvdXJjZUFjdGlvbnMnXG5pbXBvcnQgU291cmNlUGlja2VyIGZyb20gJy4vU291cmNlcy9Tb3VyY2VQaWNrZXInXG5pbXBvcnQgZ2l0aHViIGZyb20gJy4vU291cmNlcy9HaXRodWIvYXBpJ1xuXG5pbXBvcnQgRXJyb3JCb3VuZGFyeSBmcm9tICcuL0Vycm9yQm91bmRhcnknXG5pbXBvcnQgS2V5bWFwU2F2ZUZhaWxlZCBmcm9tICcuL0RpYWxvZ3MvS2V5bWFwU2F2ZUZhaWxlZCdcbmltcG9ydCB7IERlZmluaXRpb25zQ29udGV4dFByb3ZpZGVyIH0gZnJvbSAnLi9Db250ZXh0cy9EZWZpbml0aW9ucydcbmltcG9ydCB7IExheW91dENvbnRleHRQcm92aWRlciB9IGZyb20gJy4vQ29udGV4dHMvTGF5b3V0J1xuXG5mdW5jdGlvbiBBcHAgKCkge1xuICBjb25zdCBzdGF0ZSA9IHVzZVNlbGVjdG9yKHN0YXRlID0+IHN0YXRlKVxuICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKClcbiAgY29uc3Qge1xuICAgIHNvdXJjZU90aGVyLFxuICAgIGtleWJvYXJkLFxuICAgIHNhdmVFcnJvcixcbiAgICB0aGVtZSxcbiAgICBzZXR0aW5nc1Zpc2libGUsXG4gICAgZXhwZXJpbWVudGFsU2V0dGluZ3NcbiAgfSA9IHN0YXRlXG5cbiAgLy8gdXNlRWZmZWN0KCgpID0+IHtcbiAgLy8gICAoYXN5bmMgZnVuY3Rpb24gKCkge1xuICAvLyAgICAgY29uc29sZS5sb2coJ2xvYWRpbmcgZGV2aWNldHJlZSBwYXJzZXInKVxuICAvLyAgICAgY29uc3QgeyBnZXRQYXJzZXIgfSA9IGF3YWl0IGltcG9ydCgnZGV2aWNldHJlZScpXG4gIC8vICAgICBjb25zdCBwYXJzZXIgPSBhd2FpdCBnZXRQYXJzZXIoKVxuICAvLyAgICAgY29uc3QgdHJlZSA9IHBhcnNlci5wYXJzZSgnLyB7fTsnKVxuICAvLyAgICAgY29uc29sZS5sb2codHJlZSwgdHJlZS5yb290Tm9kZS50b1N0cmluZygpKVxuICAvLyAgIH0pKClcbiAgLy8gfSwgW10pXG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoIXNvdXJjZU90aGVyPy5naXRodWIpIHtcbiAgICAgIGRpc3BhdGNoKHsgdHlwZTogJ0dJVEhVQl9CVUlMRF9VUERBVEUnLCBidWlsZDogbnVsbCB9KVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaGFuZGxlciAocnVuKSB7XG4gICAgICBpZiAocnVuLmhlYWRfYnJhbmNoID09PSBzb3VyY2VPdGhlci5naXRodWIuYnJhbmNoKSB7XG4gICAgICAgIGRpc3BhdGNoKHsgdHlwZTogJ0dJVEhVQl9CVUlMRF9VUERBVEUnLCBidWlsZDogcnVuIH0pXG4gICAgICB9XG4gICAgfVxuXG4gICAgOyhhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBjb25zdCB7IHJlcG9zaXRvcnksIGJyYW5jaCB9ID0gc291cmNlT3RoZXIuZ2l0aHViXG4gICAgICBoYW5kbGVyKGF3YWl0IGdpdGh1Yi5mZXRjaEJ1aWxkU3RhdHVzKHJlcG9zaXRvcnksIGJyYW5jaCkpXG4gICAgfSkoKVxuXG4gICAgZ2l0aHViLm9uKCdidWlsZC11cGRhdGUnLCBoYW5kbGVyKVxuICAgIHJldHVybiAoKSA9PiBnaXRodWIub2ZmKCdidWlsZC11cGRhdGUnLCBoYW5kbGVyKVxuICB9LCBbc291cmNlT3RoZXIsIGRpc3BhdGNoXSlcblxuICBjb25zdCBoYW5kbGVLZXlib2FyZFNlbGVjdGVkID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgY29uc3QgeyBzb3VyY2UsIGxheW91dCwga2V5bWFwLCBzZW5zb3JzID0gW10sIC4uLm90aGVyIH0gPSBldmVudFxuXG4gICAgaWYgKCFrZXltYXApIHtcbiAgICAgIGRpc3BhdGNoKHsgdHlwZTogJ0NMRUFSX0tFWUJPQVJEX1NFTEVDVElPTicgfSlcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGRpc3BhdGNoKHtcbiAgICAgIHR5cGU6ICdTRUxFQ1RfS0VZQk9BUkQnLFxuICAgICAgc291cmNlLFxuICAgICAgc291cmNlT3RoZXI6IG90aGVyLFxuICAgICAgbGF5b3V0LFxuICAgICAga2V5bWFwLFxuICAgICAgc2Vuc29yc1xuICAgIH0pXG4gIH0sIFtkaXNwYXRjaF0pXG5cbiAgY29uc3QgaGFuZGxlVXBkYXRlU2V0dGluZ3MgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoc2V0dGluZ3MpIHtcbiAgICBkaXNwYXRjaCh7IHR5cGU6ICdTRVRUSU5HU19VUERBVEUnLCBzZXR0aW5ncyB9KVxuICB9LCBbZGlzcGF0Y2hdKVxuXG4gIGNvbnN0IG9wZW5TZXR0aW5nc0RpYWxvZyA9IHVzZUNhbGxiYWNrKFxuICAgICgpID0+IGRpc3BhdGNoKHsgdHlwZTogJ1NFVFRJTkdTX09QRU4nIH0pLFxuICAgIFtkaXNwYXRjaF1cbiAgKVxuXG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIDxFcnJvckJvdW5kYXJ5PlxuICAgICAgICA8U2V0dGluZ3NDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXt7XG4gICAgICAgICAgc2V0dGluZ3M6IGV4cGVyaW1lbnRhbFNldHRpbmdzLFxuICAgICAgICAgIG9wZW5TZXR0aW5nc0RpYWxvZ1xuICAgICAgICB9fT5cbiAgICAgICAgICA8U291cmNlUGlja2VyIG9uU2VsZWN0PXtoYW5kbGVLZXlib2FyZFNlbGVjdGVkfSAvPlxuXG4gICAgICAgICAgPGRpdiBpZD1cInNldHRpbmdzLWJhclwiPlxuICAgICAgICAgICAgPEljb25CdXR0b25cbiAgICAgICAgICAgICAgaWQ9XCJsaWdodC1tb2RlXCJcbiAgICAgICAgICAgICAgdGl0bGU9XCJUb2dnbGUgdGhlbWVcIlxuICAgICAgICAgICAgICBpY29uPXt7XG4gICAgICAgICAgICAgICAgbGlnaHQ6ICdzdW4nLFxuICAgICAgICAgICAgICAgIGRhcms6ICdtb29uJyxcbiAgICAgICAgICAgICAgICBzeXN0ZW06ICdjaXJjbGUtaGFsZi1zdHJva2UnXG4gICAgICAgICAgICAgIH1bdGhlbWVdIHx8ICdjaXJjbGUtaGFsZi1zdHJva2UnfVxuICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBkaXNwYXRjaCh7IHR5cGU6ICdDWUNMRV9USEVNRScgfSl9XG4gICAgICAgICAgICAvPlxuXG4gICAgICAgICAgICA8SWNvbkJ1dHRvblxuICAgICAgICAgICAgICBpZD1cInNldHRpbmdzLWJ1dHRvblwiXG4gICAgICAgICAgICAgIGljb249XCJjb2dcIlxuICAgICAgICAgICAgICBvbkNsaWNrPXtvcGVuU2V0dGluZ3NEaWFsb2d9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAge3NldHRpbmdzVmlzaWJsZSAmJiAoXG4gICAgICAgICAgICAgIDxTZXR0aW5nc1xuICAgICAgICAgICAgICAgIHNldHRpbmdzPXtleHBlcmltZW50YWxTZXR0aW5nc31cbiAgICAgICAgICAgICAgICBvblVwZGF0ZT17aGFuZGxlVXBkYXRlU2V0dGluZ3N9XG4gICAgICAgICAgICAgICAgb25DbG9zZT17KCkgPT4gZGlzcGF0Y2goeyB0eXBlOiAnU0VUVElOR1NfQ0xPU0UnIH0pfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgIDxTb3VyY2VBY3Rpb25zIC8+XG5cbiAgICAgICAgICA8RGVmaW5pdGlvbnNDb250ZXh0UHJvdmlkZXI+XG4gICAgICAgICAgICB7a2V5Ym9hcmQgJiYgKFxuICAgICAgICAgICAgICA8TGF5b3V0Q29udGV4dFByb3ZpZGVyIGxheW91dD17a2V5Ym9hcmQubGF5b3V0fT5cbiAgICAgICAgICAgICAgICA8S2V5Ym9hcmRcbiAgICAgICAgICAgICAgICAgIGtleW1hcD17a2V5Ym9hcmQua2V5bWFwfVxuICAgICAgICAgICAgICAgICAgc2Vuc29ycz17a2V5Ym9hcmQuc2Vuc29yc31cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8L0xheW91dENvbnRleHRQcm92aWRlcj5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgICB7c2F2ZUVycm9yICYmIChcbiAgICAgICAgICAgICAgPEtleW1hcFNhdmVGYWlsZWQgb25EaXNtaXNzPXsoKSA9PiBkaXNwYXRjaCh7IHR5cGU6ICdDTEVBUl9TQVZFX0VSUk9SJyB9KX0gLz5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgPC9EZWZpbml0aW9uc0NvbnRleHRQcm92aWRlcj5cbiAgICAgICAgPC9TZXR0aW5nc0NvbnRleHQuUHJvdmlkZXI+XG4gICAgICA8L0Vycm9yQm91bmRhcnk+XG4gICAgICA8R2l0SHViTGluayAvPlxuICAgIDwvPlxuICApXG59XG5cbmV4cG9ydCBkZWZhdWx0IEFwcFxuIiwiaW1wb3J0IGdldCBmcm9tICdsb2Rhc2gvZ2V0J1xuaW1wb3J0IHBpY2sgZnJvbSAnbG9kYXNoL3BpY2snXG5cbmZ1bmN0aW9uIGluaXQgKCkge1xuICBjb25zdCBzZXR0aW5ncyA9IEpTT04ucGFyc2UoXG4gICAgbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2V4cGVyaW1lbnRhbC1zZXR0aW5ncycpIHx8ICd7fSdcbiAgKVxuXG4gIHJldHVybiB7XG4gICAgZGVmaW5pdGlvbnM6IG51bGwsXG4gICAgc291cmNlOiBudWxsLFxuICAgIHNvdXJjZU90aGVyOiBudWxsLFxuICAgIGtleWJvYXJkOiBudWxsLFxuICAgIF91bm1vZGlmaWVkS2V5bWFwOiBudWxsLFxuICAgIHNhdmluZzogbnVsbCxcbiAgICBzYXZlRXJyb3I6IG51bGwsXG4gICAgc2V0dGluZ3NWaXNpYmxlOiBudWxsLFxuICAgIGNvbW1pdERpYWxvZ09wZW46IGZhbHNlLFxuICAgIHRoZW1lOiBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd0aGVtZScgfHwgJ1wic3lzdGVtXCInKSksXG4gICAgZXhwZXJpbWVudGFsU2V0dGluZ3M6IHtcbiAgICAgIHVuaWNvZGVHbHlwaHM6IGdldChzZXR0aW5ncywgJ3VuaWNvZGVHbHlwaHMnLCB0cnVlKSxcbiAgICAgIHBsYXRmb3JtR2x5cGhzOiBnZXQoc2V0dGluZ3MsICdwbGF0Zm9ybUdseXBocycsICdhdXRvJyksXG4gICAgICBlbmFibGVCZWhhdmlvckVkaXRpbmc6IGdldChzZXR0aW5ncywgJ2VuYWJsZUJlaGF2aW9yRWRpdGluZycsIGZhbHNlKVxuICAgIH0sXG4gICAgbGF0ZXN0QnVpbGQ6IG51bGxcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgSU5JVElBTF9TVEFURSA9IGluaXQoKVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZWR1Y2VyIChzdGF0ZSwgYWN0aW9uKSB7XG4gIGNvbnN0IHsgdHlwZSB9ID0gYWN0aW9uXG4gIGNvbnN0IHsga2V5Ym9hcmQgfSA9IHN0YXRlXG5cbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAnSU5JVElBTElaRSc6XG4gICAgICByZXR1cm4gaW5pdCgpXG5cbiAgICBjYXNlICdERUZJTklUSU9OU19TRVQnOlxuICAgICAgcmV0dXJuIHsgLi4uc3RhdGUsIGRlZmluaXRpb25zOiBhY3Rpb24uZGVmaW5pdGlvbnMgfVxuXG4gICAgY2FzZSAnQ0xFQVJfS0VZQk9BUkRfU0VMRUNUSU9OJzpcbiAgICAgIHJldHVybiB7IC4uLnN0YXRlLCBrZXlib2FyZDogbnVsbCB9XG5cbiAgICBjYXNlICdTRUxFQ1RfS0VZQk9BUkQnOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIHNvdXJjZTogYWN0aW9uLnNvdXJjZSxcbiAgICAgICAgc291cmNlT3RoZXI6IGFjdGlvbi5zb3VyY2VPdGhlcixcbiAgICAgICAga2V5Ym9hcmQ6IHsgLi4ua2V5Ym9hcmQsIC4uLnBpY2soYWN0aW9uLCBbJ2xheW91dCcsICdrZXltYXAnLCAnc2Vuc29ycyddKSB9LFxuICAgICAgICBfdW5tb2RpZmllZEtleW1hcDogYWN0aW9uLmtleW1hcFxuICAgICAgfVxuXG4gICAgY2FzZSAnQ09NTUlUX0RJQUxPR19PUEVOJzpcbiAgICAgIHJldHVybiB7IC4uLnN0YXRlLCBjb21taXREaWFsb2dPcGVuOiB0cnVlIH1cblxuICAgIGNhc2UgJ0NPTU1JVF9ESUFMT0dfQ0xPU0UnOlxuICAgICAgcmV0dXJuIHsgLi4uc3RhdGUsIGNvbW1pdERpYWxvZ09wZW46IGZhbHNlIH1cblxuICAgIGNhc2UgJ0dJVEhVQl9CVUlMRF9VUERBVEUnOlxuICAgICAgcmV0dXJuIHsgLi4uc3RhdGUsIGxhdGVzdEJ1aWxkOiBhY3Rpb24uYnVpbGQgfVxuXG4gICAgY2FzZSAnS0VZTUFQX1NBVkVfU1RBUlQnOlxuICAgICAgcmV0dXJuIHsgLi4uc3RhdGUsIHNhdmluZzogdHJ1ZSwgc2F2ZUVycm9yOiBmYWxzZSB9XG5cbiAgICBjYXNlICdLRVlNQVBfU0FWRV9TVUNDRVNTJzpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICBzYXZpbmc6IGZhbHNlLFxuICAgICAgICB1bnNhdmVkOiBmYWxzZSxcbiAgICAgICAga2V5Ym9hcmQ6IHtcbiAgICAgICAgICAuLi5zdGF0ZS5rZXlib2FyZCxcbiAgICAgICAgICBrZXltYXA6IGFjdGlvbi5rZXltYXAgfHwgc3RhdGUua2V5Ym9hcmQua2V5bWFwXG4gICAgICAgIH0sXG4gICAgICAgIF91bm1vZGlmaWVkS2V5bWFwOiBhY3Rpb24ua2V5bWFwIHx8IHN0YXRlLmtleWJvYXJkLmtleW1hcFxuICAgICAgfVxuXG4gICAgY2FzZSAnS0VZTUFQX1NBVkVfRkFJTFVSRSc6XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgc2F2aW5nOiBmYWxzZSxcbiAgICAgICAgc2F2ZUVycm9yOiB0cnVlXG4gICAgICB9XG5cbiAgICBjYXNlICdDTEVBUl9TQVZFX0VSUk9SJzpcbiAgICAgIHJldHVybiB7IC4uLnN0YXRlLCBzYXZlRXJyb3I6IG51bGwgfVxuXG4gICAgY2FzZSAnU0VUVElOR1NfT1BFTic6XG4gICAgICByZXR1cm4geyAuLi5zdGF0ZSwgc2V0dGluZ3NWaXNpYmxlOiB0cnVlIH1cblxuICAgIGNhc2UgJ1NFVFRJTkdTX0NMT1NFJzpcbiAgICAgIHJldHVybiB7IC4uLnN0YXRlLCBzZXR0aW5nc1Zpc2libGU6IGZhbHNlIH1cblxuICAgIGNhc2UgJ1NFVFRJTkdTX1VQREFURSc6XG4gICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnZXhwZXJpbWVudGFsLXNldHRpbmdzJywgSlNPTi5zdHJpbmdpZnkoYWN0aW9uLnNldHRpbmdzKSlcbiAgICAgIHJldHVybiB7IC4uLnN0YXRlLCBleHBlcmltZW50YWxTZXR0aW5nczogYWN0aW9uLnNldHRpbmdzIH1cblxuICAgIGNhc2UgJ0NZQ0xFX1RIRU1FJzpcbiAgICAgIHJldHVybiBjeWNsZVRoZW1lKHN0YXRlLCBhY3Rpb24pXG5cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHN0YXRlXG4gIH1cbn1cblxuZnVuY3Rpb24gY3ljbGVUaGVtZSAoc3RhdGUsIGFjdGlvbikge1xuICBjb25zdCB0aGVtZXMgPSBbJ2xpZ2h0JywgJ2RhcmsnLCAnc3lzdGVtJ11cbiAgY29uc3QgaW5kZXggPSB0aGVtZXMuaW5kZXhPZihzdGF0ZS50aGVtZSlcbiAgY29uc3QgdGhlbWUgPSB0aGVtZXMuYXQoKGluZGV4ICsgMSkgJSB0aGVtZXMubGVuZ3RoKVxuICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgndGhlbWUnLCBgXCIke3RoZW1lfVwiYClcbiAgZG9jdW1lbnQuYm9keS5kYXRhc2V0LnRoZW1lID0gdGhlbWVcbiAgcmV0dXJuIHsgLi4uc3RhdGUsIHRoZW1lIH1cbn1cbiIsImltcG9ydCB7IGNvbWJpbmVSZWR1Y2VycywgY29uZmlndXJlU3RvcmUgfSBmcm9tICdAcmVkdXhqcy90b29sa2l0J1xuXG5pbXBvcnQgYXBwUmVkdWNlciwgeyBJTklUSUFMX1NUQVRFIH0gZnJvbSAnLi9hcHBSZWR1Y2VyJ1xuaW1wb3J0IGxheWVyc1JlZHVjZXIgZnJvbSAnLi9LZXlib2FyZC9MYXllcnMvbGF5ZXJzU2xpY2UnXG5pbXBvcnQgY29tYm9zUmVkdWNlciBmcm9tICcuL0tleWJvYXJkL0NvbWJvcy9jb21ib3NTbGljZSdcbmltcG9ydCBtYWNyb3NSZWR1Y2VyIGZyb20gJy4vS2V5Ym9hcmQvTWFjcm9zL21hY3Jvc1NsaWNlJ1xuaW1wb3J0IGJlaGF2aW9yc1JlZHVjZXIgZnJvbSAnLi9LZXlib2FyZC9CZWhhdmlvcnMvYmVoYXZpb3JzU2xpY2UnXG5cbmNvbnN0IGtleWJvYXJkUmVkdWNlciA9IGNvbWJpbmVSZWR1Y2Vycyh7XG4gIGxheW91dDogKHN0YXRlID0gW10pID0+IHN0YXRlLFxuICBzZW5zb3JzOiAoc3RhdGUgPSBbXSkgPT4gc3RhdGUsXG4gIGtleW1hcDogY29tYmluZVJlZHVjZXJzKHtcbiAgICB3YXJuaW5nRmxhZ3M6IChzdGF0ZSA9IFtdKSA9PiBzdGF0ZSxcbiAgICBkZWZpbmVzOiAoc3RhdGUgPSBbXSkgPT4gc3RhdGUsXG4gICAgY2hvc2VuOiAoc3RhdGUgPSB7fSkgPT4gc3RhdGUsXG4gICAgYmVoYXZpb3JzOiBiZWhhdmlvcnNSZWR1Y2VyLFxuICAgIGNvbWJvczogY29tYm9zUmVkdWNlcixcbiAgICBsYXllcnM6IGxheWVyc1JlZHVjZXIsXG4gICAgbWFjcm9zOiBtYWNyb3NSZWR1Y2VyXG4gIH0pXG59KVxuXG5mdW5jdGlvbiByb290UmVkdWNlciAoc3RhdGUsIGFjdGlvbikge1xuICBjb25zdCBuZXdTdGF0ZSA9IGFwcFJlZHVjZXIoc3RhdGUsIGFjdGlvbilcbiAgcmV0dXJuIHtcbiAgICAuLi5uZXdTdGF0ZSxcbiAgICBrZXlib2FyZDogbmV3U3RhdGUua2V5Ym9hcmQgJiYge1xuICAgICAgLi4ubmV3U3RhdGUua2V5Ym9hcmQsXG4gICAgICAuLi5rZXlib2FyZFJlZHVjZXIobmV3U3RhdGUua2V5Ym9hcmQsIGFjdGlvbilcbiAgICB9XG4gIH1cbn1cblxuY29uc3Qgc3RvcmUgPSBjb25maWd1cmVTdG9yZSh7XG4gIHJlZHVjZXI6IHJvb3RSZWR1Y2VyLFxuICBwcmVsb2FkZWRTdGF0ZTogSU5JVElBTF9TVEFURVxufSlcblxuZXhwb3J0IGRlZmF1bHQgc3RvcmVcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20vY2xpZW50J1xuaW1wb3J0IHsgUHJvdmlkZXIgfSBmcm9tICdyZWFjdC1yZWR1eCdcblxuaW1wb3J0ICcuL2luZGV4LmNzcydcbmltcG9ydCBBcHAgZnJvbSAnLi9BcHAnXG5cbmltcG9ydCB7IElOSVRJQUxfU1RBVEUgfSBmcm9tICcuL2FwcFJlZHVjZXInXG5pbXBvcnQgc3RvcmUgZnJvbSAnLi9zdG9yZSdcblxuZG9jdW1lbnQuYm9keS5kYXRhc2V0LnRoZW1lID0gSU5JVElBTF9TVEFURS50aGVtZVxuXG5jb25zdCByb290ID0gUmVhY3RET00uY3JlYXRlUm9vdChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYXBwLXJvb3QnKSlcblxucm9vdC5yZW5kZXIoXG4gIDxSZWFjdC5TdHJpY3RNb2RlPlxuICAgIDxQcm92aWRlciBzdG9yZT17c3RvcmV9PlxuICAgICAgPEFwcCAvPlxuICAgIDwvUHJvdmlkZXI+XG4gIDwvUmVhY3QuU3RyaWN0TW9kZT5cbilcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiOnJvb3Qge1xcbiAgLS1iZzogd2hpdGU7XFxuICAtLWJnLXJnYjogMjU1LDI1NSwyNTU7XFxuICAtLWZnOiBibGFjaztcXG5cXHQtLWRhcmstcmVkOiAjOTEwZTBlO1xcblxcdC0tZGFyay1ibHVlOiAjNmQ5OWM2O1xcbiAgLS1lcnJvci1oaWdobGlnaHQ6IHJnYigxNzksIDYwLCA2MCk7XFxuICAtLXNlbGVjdGlvbjogcmdiKDYwLCAxNzksIDExMyk7XFxuICAtLWhvdmVyLXNlbGVjdGlvbjogcmdiYSg2MCwgMTc5LCAxMTMsIDAuODUpO1xcbiAgLS1kZWxldGU6IHJnYigxNzksIDYwLCA3Mik7XFxuICAtLWRlbGV0ZS1mYWludDogcmdiYSgxNzksIDYwLCA3MiwgMC42KTtcXG4gIC0tbGluazogcm95YWxibHVlO1xcbiAgLS1saW5rLWhvdmVyOiAjNmQ5OWM2O1xcbiAgLS1rZXktYmctYmFzZTogI2YyZjJmMjtcXG4gIC0ta2V5LWJnLWhvdmVyOiB3aGl0ZTtcXG4gIC0ta2V5LWJnLWhpZ2hsaWdodDogc2FuZHlicm93bjtcXG4gIC0ta2V5LWNvbG9yLWJhc2U6ICM2ZjZmNmY7XFxuICAtLWtleS1jb2xvci1leHRyZW1lOiAjMzEzMTMxO1xcbiAgLS1rZXktY29sb3ItaG92ZXI6IHdoaXRlO1xcbiAgLS1jb2RlLWJnOiByZ2JhKDAsIDAsIDAsIDAuMTUpO1xcbn1cXG5odG1sIHtcXG4gIGZvbnQtZmFtaWx5OiBzYW5zLXNlcmlmO1xcbn1cXG5odG1sLCBib2R5IHtcXG5cXHR3aWR0aDogMTAwdnc7XFxuXFx0aGVpZ2h0OiAxMDB2aDtcXG5cXHRvdmVyZmxvdzogYXV0bztcXG5cXHRwYWRkaW5nOiAwO1xcblxcdG1hcmdpbjogMDtcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWJnKTtcXG4gIGNvbG9yOiB2YXIoLS1mZyk7XFxuXFxuICB0cmFuc2l0aW9uOiAzMDBtcyBlYXNlLWluLW91dDtcXG4gIHRyYW5zaXRpb24tcHJvcGVydHk6IGNvbG9yLCBiYWNrZ3JvdW5kLWNvbG9yLCBib3JkZXItY29sb3I7XFxufVxcblxcbmgxLCBoMiwgaDMsIGg0LCBoNSwgaDYge1xcbiAgZm9udC1mYW1pbHk6IFF1aWNrc2FuZCwgYXZlbmlyLCBzYW5zLXNlcmlmO1xcbn1cXG5cXG5ib2R5W2RhdGEtdGhlbWU9XFxcImRhcmtcXFwiXSB7XFxuICBjb2xvci1zY2hlbWU6IGRhcms7XFxuICAtLWJnOiAjMTIzO1xcbiAgLS1iZy1yZ2I6IDE3LDM0LDUxO1xcbiAgLS1mZzogd2hpdGU7XFxuICAtLWtleS1iZy1iYXNlOiAjMWMyYzNiO1xcbiAgLS1rZXktY29sb3ItYmFzZTogI2I3YjdiNztcXG4gIC0ta2V5LWNvbG9yLWV4dHJlbWU6ICNlN2U3ZTc7XFxufVxcbkBtZWRpYSAocHJlZmVycy1jb2xvci1zY2hlbWU6IGRhcmspIHtcXG4gIGJvZHlbZGF0YS10aGVtZT1cXFwic3lzdGVtXFxcIl0ge1xcbiAgICBjb2xvci1zY2hlbWU6IGRhcms7XFxuICAgIC0tYmc6ICMxMjM7XFxuICAgIC0tYmctcmdiOiAxNywzNCw1MTtcXG4gICAgLS1mZzogd2hpdGU7XFxuICAgIC0ta2V5LWJnLWJhc2U6ICMxYzJjM2I7XFxuICAgIC0ta2V5LWNvbG9yLWJhc2U6ICNiN2I3Yjc7XFxuICAgIC0ta2V5LWNvbG9yLWV4dHJlbWU6ICNlN2U3ZTc7XFxuICB9XFxufVxcblxcbmgzIHtcXG4gIG1hcmdpbi1ib3R0b206IDEwcHg7XFxufVxcblxcbmEgeyBjb2xvcjogdmFyKC0tbGluaykgfVxcbmE6aG92ZXIgeyBjb2xvcjogdmFyKC0tbGluay1ob3ZlcikgfVxcblxcbmNvZGUge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tY29kZS1iZyk7XFxuICBib3JkZXItcmFkaXVzOiAycHg7XFxuICBwYWRkaW5nOiAuMTVlbSAuM2VtIC4wNWVtO1xcbn1cXG5cXG4jYWN0aW9ucyB7XFxuXFx0cG9zaXRpb246IGFic29sdXRlO1xcbiAgZGlzcGxheTogZmxleDtcXG5cXHRib3R0b206IDVweDtcXG5cXHRyaWdodDogNXB4O1xcbiAgZ2FwOiA0cHg7XFxufVxcblxcbiNhY3Rpb25zIGJ1dHRvbiB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1ob3Zlci1zZWxlY3Rpb24pO1xcbiAgY29sb3I6IHdoaXRlO1xcblxcbiAgZm9udC1zaXplOiAxNnB4O1xcbiAgYm9yZGVyOiBub25lO1xcbiAgYm9yZGVyLXJhZGl1czogNXB4O1xcbiAgcGFkZGluZzogMCA1cHg7XFxuXFxuICBoZWlnaHQ6IDMwcHg7XFxuICBsaW5lLWhlaWdodDogMzBweDtcXG4gIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XFxufVxcblxcbiNhY3Rpb25zIGJ1dHRvbltkaXNhYmxlZF0ge1xcbiAgZmlsdGVyOiBzYXR1cmF0ZSgyMCUpO1xcbiAgb3BhY2l0eTogLjU7XFxuICBjdXJzb3I6IG5vdC1hbGxvd2VkO1xcbn1cXG5cXG4jc2V0dGluZ3MtYmFyIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogMTBweDtcXG4gIHJpZ2h0OiAxMHB4O1xcbn1cXG5cXG4jc2V0dGluZ3MtYmFyIGJ1dHRvbiB7XFxuICBiYWNrZ3JvdW5kOiBub25lO1xcbiAgY29sb3I6IHZhcigtLWZnKTtcXG4gIGJvcmRlcjogbm9uZTtcXG59XFxuI3NldHRpbmdzLWJhciBidXR0b246aG92ZXIge1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgY29sb3I6IHJveWFsYmx1ZTtcXG59XFxuXFxuLmZhLWRlbGV0ZS1yaWdodDo6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6ICdcXFxcZjU1YSc7XFxuICB0cmFuc2Zvcm0tb3JpZ2luOiBjZW50ZXI7XFxuICB0cmFuc2Zvcm06IHJvdGF0ZVooMTgwZGVnKTtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG59XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL0FwcC5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSxXQUFXO0VBQ1gscUJBQXFCO0VBQ3JCLFdBQVc7Q0FDWixtQkFBbUI7Q0FDbkIsb0JBQW9CO0VBQ25CLG1DQUFtQztFQUNuQyw4QkFBOEI7RUFDOUIsMkNBQTJDO0VBQzNDLDBCQUEwQjtFQUMxQixzQ0FBc0M7RUFDdEMsaUJBQWlCO0VBQ2pCLHFCQUFxQjtFQUNyQixzQkFBc0I7RUFDdEIscUJBQXFCO0VBQ3JCLDhCQUE4QjtFQUM5Qix5QkFBeUI7RUFDekIsNEJBQTRCO0VBQzVCLHdCQUF3QjtFQUN4Qiw4QkFBOEI7QUFDaEM7QUFDQTtFQUNFLHVCQUF1QjtBQUN6QjtBQUNBO0NBQ0MsWUFBWTtDQUNaLGFBQWE7Q0FDYixjQUFjO0NBQ2QsVUFBVTtDQUNWLFNBQVM7RUFDUiwyQkFBMkI7RUFDM0IsZ0JBQWdCOztFQUVoQiw2QkFBNkI7RUFDN0IsMERBQTBEO0FBQzVEOztBQUVBO0VBQ0UsMENBQTBDO0FBQzVDOztBQUVBO0VBQ0Usa0JBQWtCO0VBQ2xCLFVBQVU7RUFDVixrQkFBa0I7RUFDbEIsV0FBVztFQUNYLHNCQUFzQjtFQUN0Qix5QkFBeUI7RUFDekIsNEJBQTRCO0FBQzlCO0FBQ0E7RUFDRTtJQUNFLGtCQUFrQjtJQUNsQixVQUFVO0lBQ1Ysa0JBQWtCO0lBQ2xCLFdBQVc7SUFDWCxzQkFBc0I7SUFDdEIseUJBQXlCO0lBQ3pCLDRCQUE0QjtFQUM5QjtBQUNGOztBQUVBO0VBQ0UsbUJBQW1CO0FBQ3JCOztBQUVBLElBQUksbUJBQW1CO0FBQ3ZCLFVBQVUseUJBQXlCOztBQUVuQztFQUNFLGdDQUFnQztFQUNoQyxrQkFBa0I7RUFDbEIseUJBQXlCO0FBQzNCOztBQUVBO0NBQ0Msa0JBQWtCO0VBQ2pCLGFBQWE7Q0FDZCxXQUFXO0NBQ1gsVUFBVTtFQUNULFFBQVE7QUFDVjs7QUFFQTtFQUNFLHFCQUFxQjtFQUNyQixlQUFlO0VBQ2Ysd0NBQXdDO0VBQ3hDLFlBQVk7O0VBRVosZUFBZTtFQUNmLFlBQVk7RUFDWixrQkFBa0I7RUFDbEIsY0FBYzs7RUFFZCxZQUFZO0VBQ1osaUJBQWlCO0VBQ2pCLHNCQUFzQjtBQUN4Qjs7QUFFQTtFQUNFLHFCQUFxQjtFQUNyQixXQUFXO0VBQ1gsbUJBQW1CO0FBQ3JCOztBQUVBO0VBQ0Usa0JBQWtCO0VBQ2xCLFNBQVM7RUFDVCxXQUFXO0FBQ2I7O0FBRUE7RUFDRSxnQkFBZ0I7RUFDaEIsZ0JBQWdCO0VBQ2hCLFlBQVk7QUFDZDtBQUNBO0VBQ0UsZUFBZTtFQUNmLGdCQUFnQjtBQUNsQjs7QUFFQTtFQUNFLGdCQUFnQjtFQUNoQix3QkFBd0I7RUFDeEIsMEJBQTBCO0VBQzFCLHFCQUFxQjtBQUN2QlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCI6cm9vdCB7XFxuICAtLWJnOiB3aGl0ZTtcXG4gIC0tYmctcmdiOiAyNTUsMjU1LDI1NTtcXG4gIC0tZmc6IGJsYWNrO1xcblxcdC0tZGFyay1yZWQ6ICM5MTBlMGU7XFxuXFx0LS1kYXJrLWJsdWU6ICM2ZDk5YzY7XFxuICAtLWVycm9yLWhpZ2hsaWdodDogcmdiKDE3OSwgNjAsIDYwKTtcXG4gIC0tc2VsZWN0aW9uOiByZ2IoNjAsIDE3OSwgMTEzKTtcXG4gIC0taG92ZXItc2VsZWN0aW9uOiByZ2JhKDYwLCAxNzksIDExMywgMC44NSk7XFxuICAtLWRlbGV0ZTogcmdiKDE3OSwgNjAsIDcyKTtcXG4gIC0tZGVsZXRlLWZhaW50OiByZ2JhKDE3OSwgNjAsIDcyLCAwLjYpO1xcbiAgLS1saW5rOiByb3lhbGJsdWU7XFxuICAtLWxpbmstaG92ZXI6ICM2ZDk5YzY7XFxuICAtLWtleS1iZy1iYXNlOiAjZjJmMmYyO1xcbiAgLS1rZXktYmctaG92ZXI6IHdoaXRlO1xcbiAgLS1rZXktYmctaGlnaGxpZ2h0OiBzYW5keWJyb3duO1xcbiAgLS1rZXktY29sb3ItYmFzZTogIzZmNmY2ZjtcXG4gIC0ta2V5LWNvbG9yLWV4dHJlbWU6ICMzMTMxMzE7XFxuICAtLWtleS1jb2xvci1ob3Zlcjogd2hpdGU7XFxuICAtLWNvZGUtYmc6IHJnYmEoMCwgMCwgMCwgMC4xNSk7XFxufVxcbmh0bWwge1xcbiAgZm9udC1mYW1pbHk6IHNhbnMtc2VyaWY7XFxufVxcbmh0bWwsIGJvZHkge1xcblxcdHdpZHRoOiAxMDB2dztcXG5cXHRoZWlnaHQ6IDEwMHZoO1xcblxcdG92ZXJmbG93OiBhdXRvO1xcblxcdHBhZGRpbmc6IDA7XFxuXFx0bWFyZ2luOiAwO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tYmcpO1xcbiAgY29sb3I6IHZhcigtLWZnKTtcXG5cXG4gIHRyYW5zaXRpb246IDMwMG1zIGVhc2UtaW4tb3V0O1xcbiAgdHJhbnNpdGlvbi1wcm9wZXJ0eTogY29sb3IsIGJhY2tncm91bmQtY29sb3IsIGJvcmRlci1jb2xvcjtcXG59XFxuXFxuaDEsIGgyLCBoMywgaDQsIGg1LCBoNiB7XFxuICBmb250LWZhbWlseTogUXVpY2tzYW5kLCBhdmVuaXIsIHNhbnMtc2VyaWY7XFxufVxcblxcbmJvZHlbZGF0YS10aGVtZT1cXFwiZGFya1xcXCJdIHtcXG4gIGNvbG9yLXNjaGVtZTogZGFyaztcXG4gIC0tYmc6ICMxMjM7XFxuICAtLWJnLXJnYjogMTcsMzQsNTE7XFxuICAtLWZnOiB3aGl0ZTtcXG4gIC0ta2V5LWJnLWJhc2U6ICMxYzJjM2I7XFxuICAtLWtleS1jb2xvci1iYXNlOiAjYjdiN2I3O1xcbiAgLS1rZXktY29sb3ItZXh0cmVtZTogI2U3ZTdlNztcXG59XFxuQG1lZGlhIChwcmVmZXJzLWNvbG9yLXNjaGVtZTogZGFyaykge1xcbiAgYm9keVtkYXRhLXRoZW1lPVxcXCJzeXN0ZW1cXFwiXSB7XFxuICAgIGNvbG9yLXNjaGVtZTogZGFyaztcXG4gICAgLS1iZzogIzEyMztcXG4gICAgLS1iZy1yZ2I6IDE3LDM0LDUxO1xcbiAgICAtLWZnOiB3aGl0ZTtcXG4gICAgLS1rZXktYmctYmFzZTogIzFjMmMzYjtcXG4gICAgLS1rZXktY29sb3ItYmFzZTogI2I3YjdiNztcXG4gICAgLS1rZXktY29sb3ItZXh0cmVtZTogI2U3ZTdlNztcXG4gIH1cXG59XFxuXFxuaDMge1xcbiAgbWFyZ2luLWJvdHRvbTogMTBweDtcXG59XFxuXFxuYSB7IGNvbG9yOiB2YXIoLS1saW5rKSB9XFxuYTpob3ZlciB7IGNvbG9yOiB2YXIoLS1saW5rLWhvdmVyKSB9XFxuXFxuY29kZSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1jb2RlLWJnKTtcXG4gIGJvcmRlci1yYWRpdXM6IDJweDtcXG4gIHBhZGRpbmc6IC4xNWVtIC4zZW0gLjA1ZW07XFxufVxcblxcbiNhY3Rpb25zIHtcXG5cXHRwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBkaXNwbGF5OiBmbGV4O1xcblxcdGJvdHRvbTogNXB4O1xcblxcdHJpZ2h0OiA1cHg7XFxuICBnYXA6IDRweDtcXG59XFxuXFxuI2FjdGlvbnMgYnV0dG9uIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWhvdmVyLXNlbGVjdGlvbik7XFxuICBjb2xvcjogd2hpdGU7XFxuXFxuICBmb250LXNpemU6IDE2cHg7XFxuICBib3JkZXI6IG5vbmU7XFxuICBib3JkZXItcmFkaXVzOiA1cHg7XFxuICBwYWRkaW5nOiAwIDVweDtcXG5cXG4gIGhlaWdodDogMzBweDtcXG4gIGxpbmUtaGVpZ2h0OiAzMHB4O1xcbiAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcXG59XFxuXFxuI2FjdGlvbnMgYnV0dG9uW2Rpc2FibGVkXSB7XFxuICBmaWx0ZXI6IHNhdHVyYXRlKDIwJSk7XFxuICBvcGFjaXR5OiAuNTtcXG4gIGN1cnNvcjogbm90LWFsbG93ZWQ7XFxufVxcblxcbiNzZXR0aW5ncy1iYXIge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgdG9wOiAxMHB4O1xcbiAgcmlnaHQ6IDEwcHg7XFxufVxcblxcbiNzZXR0aW5ncy1iYXIgYnV0dG9uIHtcXG4gIGJhY2tncm91bmQ6IG5vbmU7XFxuICBjb2xvcjogdmFyKC0tZmcpO1xcbiAgYm9yZGVyOiBub25lO1xcbn1cXG4jc2V0dGluZ3MtYmFyIGJ1dHRvbjpob3ZlciB7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBjb2xvcjogcm95YWxibHVlO1xcbn1cXG5cXG4uZmEtZGVsZXRlLXJpZ2h0OjpiZWZvcmUge1xcbiAgY29udGVudDogJ1xcXFxmNTVhJztcXG4gIHRyYW5zZm9ybS1vcmlnaW46IGNlbnRlcjtcXG4gIHRyYW5zZm9ybTogcm90YXRlWigxODBkZWcpO1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCJib2R5IHtcXG4gIG1hcmdpbjogMDtcXG4gIC13ZWJraXQtZm9udC1zbW9vdGhpbmc6IGFudGlhbGlhc2VkO1xcbiAgLW1vei1vc3gtZm9udC1zbW9vdGhpbmc6IGdyYXlzY2FsZTtcXG59XFxuXFxuY29kZSB7XFxuICBmb250LWZhbWlseTogc291cmNlLWNvZGUtcHJvLCBNZW5sbywgTW9uYWNvLCBDb25zb2xhcywgJ0NvdXJpZXIgTmV3JyxcXG4gICAgbW9ub3NwYWNlO1xcbn1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvaW5kZXguY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0VBQ0UsU0FBUztFQUNULG1DQUFtQztFQUNuQyxrQ0FBa0M7QUFDcEM7O0FBRUE7RUFDRTthQUNXO0FBQ2JcIixcInNvdXJjZXNDb250ZW50XCI6W1wiYm9keSB7XFxuICBtYXJnaW46IDA7XFxuICAtd2Via2l0LWZvbnQtc21vb3RoaW5nOiBhbnRpYWxpYXNlZDtcXG4gIC1tb3otb3N4LWZvbnQtc21vb3RoaW5nOiBncmF5c2NhbGU7XFxufVxcblxcbmNvZGUge1xcbiAgZm9udC1mYW1pbHk6IHNvdXJjZS1jb2RlLXBybywgTWVubG8sIE1vbmFjbywgQ29uc29sYXMsICdDb3VyaWVyIE5ldycsXFxuICAgIG1vbm9zcGFjZTtcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiYnV0dG9uLnBpMklnOGMzRmRoNEgySnB4ZG83IHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWhvdmVyLXNlbGVjdGlvbik7XFxuICBjb2xvcjogd2hpdGU7XFxuXFxuICBmb250LXNpemU6IDE2cHg7XFxuICBib3JkZXI6IG5vbmU7XFxuICBib3JkZXItcmFkaXVzOiA1cHg7XFxuICBwYWRkaW5nOiAwIDVweDtcXG5cXG4gIGhlaWdodDogMzBweDtcXG4gIGxpbmUtaGVpZ2h0OiAzMHB4O1xcbiAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcXG59XFxuXFxuYnV0dG9uLkN0cHU0RTJkWllKNmc4Q1VHRk9GIHtcXG4gIGNvbG9yOiB2YXIoLS1mZyk7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXG59XFxuXFxuYnV0dG9uLnBpMklnOGMzRmRoNEgySnB4ZG83W2Rpc2FibGVkXSB7XFxuICBmaWx0ZXI6IHNhdHVyYXRlKDIwJSk7XFxuICBvcGFjaXR5OiAuNTtcXG4gIGN1cnNvcjogbm90LWFsbG93ZWQ7XFxufVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9Db21tb24vYWN0aW9uLWJ1dHRvbi5tb2R1bGUuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0VBQ0UscUJBQXFCO0VBQ3JCLGVBQWU7RUFDZix3Q0FBd0M7RUFDeEMsWUFBWTs7RUFFWixlQUFlO0VBQ2YsWUFBWTtFQUNaLGtCQUFrQjtFQUNsQixjQUFjOztFQUVkLFlBQVk7RUFDWixpQkFBaUI7RUFDakIsc0JBQXNCO0FBQ3hCOztBQUVBO0VBQ0UsZ0JBQWdCO0VBQ2hCLDZCQUE2QjtBQUMvQjs7QUFFQTtFQUNFLHFCQUFxQjtFQUNyQixXQUFXO0VBQ1gsbUJBQW1CO0FBQ3JCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcImJ1dHRvbi5hY3Rpb24ge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0taG92ZXItc2VsZWN0aW9uKTtcXG4gIGNvbG9yOiB3aGl0ZTtcXG5cXG4gIGZvbnQtc2l6ZTogMTZweDtcXG4gIGJvcmRlcjogbm9uZTtcXG4gIGJvcmRlci1yYWRpdXM6IDVweDtcXG4gIHBhZGRpbmc6IDAgNXB4O1xcblxcbiAgaGVpZ2h0OiAzMHB4O1xcbiAgbGluZS1oZWlnaHQ6IDMwcHg7XFxuICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xcbn1cXG5cXG5idXR0b24uc2Vjb25kYXJ5IHtcXG4gIGNvbG9yOiB2YXIoLS1mZyk7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXG59XFxuXFxuYnV0dG9uLmFjdGlvbltkaXNhYmxlZF0ge1xcbiAgZmlsdGVyOiBzYXR1cmF0ZSgyMCUpO1xcbiAgb3BhY2l0eTogLjU7XFxuICBjdXJzb3I6IG5vdC1hbGxvd2VkO1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmxvY2FscyA9IHtcblx0XCJhY3Rpb25cIjogXCJwaTJJZzhjM0ZkaDRIMkpweGRvN1wiLFxuXHRcInNlY29uZGFyeVwiOiBcIkN0cHU0RTJkWllKNmc4Q1VHRk9GXCJcbn07XG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLmpUaGlMYzVfQnJVeWw3MXYzcktuIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHotaW5kZXg6IDU7XFxuICBmb250LXNpemU6IDcwJTtcXG4gIGJhY2tncm91bmQ6IHZhcigtLWJnKTtcXG4gIHBhZGRpbmc6IDVweCAxMHB4O1xcbiAgbWFyZ2luLWxlZnQ6IDEwcHg7XFxuXFxuICBib3JkZXItcmFkaXVzOiA0cHg7XFxufVxcblxcbi5qVGhpTGM1X0JyVXlsNzF2M3JLbiBwIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIG1hcmdpbjogMDtcXG59XFxuXFxuLmpUaGlMYzVfQnJVeWw3MXYzcktuIHVsIHtcXG4gIGRpc3BsYXk6IG5vbmU7XFxufVxcbi5qVGhpTGM1X0JyVXlsNzF2M3JLbi54RzJHS2xzYzA3akxFYjJhTUM2SCB7XFxuICBib3gtc2hhZG93OiAycHggMnB4IDVweCAwcHggcmdiYSgwLCAwLCAwLCAwLjUpO1xcbn1cXG4ualRoaUxjNV9CclV5bDcxdjNyS24ueEcyR0tsc2MwN2pMRWIyYU1DNkggdWwge1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICBwYWRkaW5nOiAwO1xcbiAgbWFyZ2luOiAwO1xcbiAgbGlzdC1zdHlsZS10eXBlOiBub25lO1xcbn1cXG5cXG4ualRoaUxjNV9CclV5bDcxdjNyS24gbGkge1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgbWFyZ2luOiAycHggMDtcXG4gIGxpbmUtaGVpZ2h0OiAyMHB4O1xcbiAgcGFkZGluZzogMCA1cHg7XFxuICBib3JkZXItcmFkaXVzOiAxMHB4O1xcbn1cXG5cXG4ualRoaUxjNV9CclV5bDcxdjNyS24gbGk6aG92ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0taG92ZXItc2VsZWN0aW9uKTtcXG4gIGNvbG9yOiB3aGl0ZTtcXG59XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL0NvbW1vbi9hY3Rpb24tbWVudS5tb2R1bGUuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0VBQ0UscUJBQXFCO0VBQ3JCLGtCQUFrQjtFQUNsQixVQUFVO0VBQ1YsY0FBYztFQUNkLHFCQUFxQjtFQUNyQixpQkFBaUI7RUFDakIsaUJBQWlCOztFQUVqQixrQkFBa0I7QUFDcEI7O0FBRUE7RUFDRSxxQkFBcUI7RUFDckIsZUFBZTtFQUNmLFNBQVM7QUFDWDs7QUFFQTtFQUNFLGFBQWE7QUFDZjtBQUNBO0VBQ0UsOENBQThDO0FBQ2hEO0FBQ0E7RUFDRSxjQUFjO0VBQ2QsVUFBVTtFQUNWLFNBQVM7RUFDVCxxQkFBcUI7QUFDdkI7O0FBRUE7RUFDRSxlQUFlO0VBQ2YsYUFBYTtFQUNiLGlCQUFpQjtFQUNqQixjQUFjO0VBQ2QsbUJBQW1CO0FBQ3JCOztBQUVBO0VBQ0Usd0NBQXdDO0VBQ3hDLFlBQVk7QUFDZFwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIubWVudSB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB6LWluZGV4OiA1O1xcbiAgZm9udC1zaXplOiA3MCU7XFxuICBiYWNrZ3JvdW5kOiB2YXIoLS1iZyk7XFxuICBwYWRkaW5nOiA1cHggMTBweDtcXG4gIG1hcmdpbi1sZWZ0OiAxMHB4O1xcblxcbiAgYm9yZGVyLXJhZGl1czogNHB4O1xcbn1cXG5cXG4ubWVudSBwIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIG1hcmdpbjogMDtcXG59XFxuXFxuLm1lbnUgdWwge1xcbiAgZGlzcGxheTogbm9uZTtcXG59XFxuLm1lbnUub3BlbiB7XFxuICBib3gtc2hhZG93OiAycHggMnB4IDVweCAwcHggcmdiYSgwLCAwLCAwLCAwLjUpO1xcbn1cXG4ubWVudS5vcGVuIHVsIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgcGFkZGluZzogMDtcXG4gIG1hcmdpbjogMDtcXG4gIGxpc3Qtc3R5bGUtdHlwZTogbm9uZTtcXG59XFxuXFxuLm1lbnUgbGkge1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgbWFyZ2luOiAycHggMDtcXG4gIGxpbmUtaGVpZ2h0OiAyMHB4O1xcbiAgcGFkZGluZzogMCA1cHg7XFxuICBib3JkZXItcmFkaXVzOiAxMHB4O1xcbn1cXG5cXG4ubWVudSBsaTpob3ZlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1ob3Zlci1zZWxlY3Rpb24pO1xcbiAgY29sb3I6IHdoaXRlO1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmxvY2FscyA9IHtcblx0XCJtZW51XCI6IFwialRoaUxjNV9CclV5bDcxdjNyS25cIixcblx0XCJvcGVuXCI6IFwieEcyR0tsc2MwN2pMRWIyYU1DNkhcIlxufTtcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIuWnBkY3FsSzQyT250Sm9zM2VHdzAge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tYmcpO1xcbiAgcGFkZGluZzogMjBweCA0MHB4O1xcbiAgbWFyZ2luOiA0MHB4O1xcbiAgbWF4LXdpZHRoOiA1MDBweDtcXG4gIGJveC1zaGFkb3c6IDBweCAxMHB4IDI1cHggcmdiYSgwLCAwLCAwLCAwLjQpO1xcbiAgYm9yZGVyLXJhZGl1czogMnB4O1xcbn1cXG5cXG4uWnBkY3FsSzQyT250Sm9zM2VHdzAgcCwgLlpwZGNxbEs0Mk9udEpvczNlR3cwIHVsIHtcXG4gIGZvbnQtZmFtaWx5OiBzYW5zLXNlcmlmO1xcbiAgbGluZS1oZWlnaHQ6IDEuM3JlbTtcXG59XFxuXFxuLk15d2cxR3czYktNYzlLZDlxY0VPIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgbWFyZ2luOiAwIGF1dG87XFxufVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9Db21tb24vZGlhbG9nLWJveC5tb2R1bGUuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0VBQ0UsMkJBQTJCO0VBQzNCLGtCQUFrQjtFQUNsQixZQUFZO0VBQ1osZ0JBQWdCO0VBQ2hCLDRDQUE0QztFQUM1QyxrQkFBa0I7QUFDcEI7O0FBRUE7RUFDRSx1QkFBdUI7RUFDdkIsbUJBQW1CO0FBQ3JCOztBQUVBO0VBQ0UsY0FBYztFQUNkLGNBQWM7QUFDaEJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLmRpYWxvZyB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1iZyk7XFxuICBwYWRkaW5nOiAyMHB4IDQwcHg7XFxuICBtYXJnaW46IDQwcHg7XFxuICBtYXgtd2lkdGg6IDUwMHB4O1xcbiAgYm94LXNoYWRvdzogMHB4IDEwcHggMjVweCByZ2JhKDAsIDAsIDAsIDAuNCk7XFxuICBib3JkZXItcmFkaXVzOiAycHg7XFxufVxcblxcbi5kaWFsb2cgcCwgLmRpYWxvZyB1bCB7XFxuICBmb250LWZhbWlseTogc2Fucy1zZXJpZjtcXG4gIGxpbmUtaGVpZ2h0OiAxLjNyZW07XFxufVxcblxcbi5idXR0b24ge1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICBtYXJnaW46IDAgYXV0bztcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5sb2NhbHMgPSB7XG5cdFwiZGlhbG9nXCI6IFwiWnBkY3FsSzQyT250Sm9zM2VHdzBcIixcblx0XCJidXR0b25cIjogXCJNeXdnMUd3M2JLTWM5S2Q5cWNFT1wiXG59O1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5obzNDdUZGalgxVkZOWkppQXlWcyB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxufVxcblxcbi51OUozdjVacklidVZJQ3pOQmtSdyB7XFxuICBwYWRkaW5nOiA1cHg7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBvcGFjaXR5OiAwLjU7XFxuICBjb2xvcjogdmFyKC0ta2V5LWNvbG9yLWJhc2UpO1xcbn1cXG4udTlKM3Y1WnJJYnVWSUN6TkJrUnc6aG92ZXIge1xcbiAgb3BhY2l0eTogMTtcXG59XFxuXFxuLndtcVdhT3g3WHlLQURoN0t2NFJaIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHotaW5kZXg6IDEwO1xcbiAgYm90dG9tOiAwO1xcbiAgbGVmdDogNTAlO1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgMTAwJSk7XFxuICBtYXgtd2lkdGg6IDI1MHB4O1xcbiAgd2lkdGg6IDEwMCU7XFxuXFxuICBib3JkZXItcmFkaXVzOiA0cHg7XFxuICBwYWRkaW5nOiAzcHggNXB4O1xcblxcbiAgY29sb3I6IHdoaXRlO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tZXJyb3ItaGlnaGxpZ2h0KTtcXG4gIGZvbnQtc2l6ZTogODUlO1xcbiAgZm9udC1mYW1pbHk6IHNhbnMtc2VyaWY7XFxuXFxuICBvcGFjaXR5OiAwLjk7XFxufVxcbi53bXFXYU94N1h5S0FEaDdLdjRSWjo6YmVmb3JlIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgY29udGVudDogJyAnO1xcbiAgei1pbmRleDogLTE7XFxuXFxuICBsZWZ0OiA1MCU7XFxuICB3aWR0aDogMTBweDtcXG4gIGhlaWdodDogMTBweDtcXG5cXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWVycm9yLWhpZ2hsaWdodCk7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtN3B4KSByb3RhdGUoNDVkZWcpO1xcbn1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvQ29tbW9uL2VkaXRhYmxlZmllbGQubW9kdWxlLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLGtCQUFrQjtBQUNwQjs7QUFFQTtFQUNFLFlBQVk7RUFDWixlQUFlO0VBQ2YsWUFBWTtFQUNaLDRCQUE0QjtBQUM5QjtBQUNBO0VBQ0UsVUFBVTtBQUNaOztBQUVBO0VBQ0Usa0JBQWtCO0VBQ2xCLFdBQVc7RUFDWCxTQUFTO0VBQ1QsU0FBUztFQUNULGdDQUFnQztFQUNoQyxnQkFBZ0I7RUFDaEIsV0FBVzs7RUFFWCxrQkFBa0I7RUFDbEIsZ0JBQWdCOztFQUVoQixZQUFZO0VBQ1osd0NBQXdDO0VBQ3hDLGNBQWM7RUFDZCx1QkFBdUI7O0VBRXZCLFlBQVk7QUFDZDtBQUNBO0VBQ0Usa0JBQWtCO0VBQ2xCLGNBQWM7RUFDZCxZQUFZO0VBQ1osV0FBVzs7RUFFWCxTQUFTO0VBQ1QsV0FBVztFQUNYLFlBQVk7O0VBRVosd0NBQXdDO0VBQ3hDLDhDQUE4QztBQUNoRFwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIuY29udGFpbmVyIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG59XFxuXFxuLmVkaXQge1xcbiAgcGFkZGluZzogNXB4O1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgb3BhY2l0eTogMC41O1xcbiAgY29sb3I6IHZhcigtLWtleS1jb2xvci1iYXNlKTtcXG59XFxuLmVkaXQ6aG92ZXIge1xcbiAgb3BhY2l0eTogMTtcXG59XFxuXFxuLmVycm9yIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHotaW5kZXg6IDEwO1xcbiAgYm90dG9tOiAwO1xcbiAgbGVmdDogNTAlO1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgMTAwJSk7XFxuICBtYXgtd2lkdGg6IDI1MHB4O1xcbiAgd2lkdGg6IDEwMCU7XFxuXFxuICBib3JkZXItcmFkaXVzOiA0cHg7XFxuICBwYWRkaW5nOiAzcHggNXB4O1xcblxcbiAgY29sb3I6IHdoaXRlO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tZXJyb3ItaGlnaGxpZ2h0KTtcXG4gIGZvbnQtc2l6ZTogODUlO1xcbiAgZm9udC1mYW1pbHk6IHNhbnMtc2VyaWY7XFxuXFxuICBvcGFjaXR5OiAwLjk7XFxufVxcbi5lcnJvcjo6YmVmb3JlIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgY29udGVudDogJyAnO1xcbiAgei1pbmRleDogLTE7XFxuXFxuICBsZWZ0OiA1MCU7XFxuICB3aWR0aDogMTBweDtcXG4gIGhlaWdodDogMTBweDtcXG5cXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWVycm9yLWhpZ2hsaWdodCk7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtN3B4KSByb3RhdGUoNDVkZWcpO1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmxvY2FscyA9IHtcblx0XCJjb250YWluZXJcIjogXCJobzNDdUZGalgxVkZOWkppQXlWc1wiLFxuXHRcImVkaXRcIjogXCJ1OUozdjVacklidVZJQ3pOQmtSd1wiLFxuXHRcImVycm9yXCI6IFwid21xV2FPeDdYeUtBRGg3S3Y0UlpcIlxufTtcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIuT2FKSVNiRDFXQ21iMDNhdDc3RUcge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbn1cXG5cXG4uTVVOOURlOGRVdmJQR0g5Y0VEb1Ege1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgei1pbmRleDogMTA7XFxuICBib3R0b206IDA7XFxuICBsZWZ0OiA1MCU7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAxMDAlKTtcXG4gIG1heC13aWR0aDogMjUwcHg7XFxuICB3aWR0aDogMTAwJTtcXG5cXG4gIGJvcmRlci1yYWRpdXM6IDRweDtcXG4gIHBhZGRpbmc6IDNweCA1cHg7XFxuXFxuICBjb2xvcjogd2hpdGU7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1lcnJvci1oaWdobGlnaHQpO1xcbiAgZm9udC1zaXplOiA4NSU7XFxuICBmb250LWZhbWlseTogc2Fucy1zZXJpZjtcXG5cXG4gIG9wYWNpdHk6IDAuOTtcXG59XFxuLk1VTjlEZThkVXZiUEdIOWNFRG9ROjpiZWZvcmUge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICBjb250ZW50OiAnICc7XFxuICB6LWluZGV4OiAtMTtcXG5cXG4gIGxlZnQ6IDUwJTtcXG4gIHdpZHRoOiAxMHB4O1xcbiAgaGVpZ2h0OiAxMHB4O1xcblxcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tZXJyb3ItaGlnaGxpZ2h0KTtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC03cHgpIHJvdGF0ZSg0NWRlZyk7XFxufVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9Db21tb24vaW5wdXQubW9kdWxlLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLGtCQUFrQjtBQUNwQjs7QUFFQTtFQUNFLGtCQUFrQjtFQUNsQixXQUFXO0VBQ1gsU0FBUztFQUNULFNBQVM7RUFDVCxnQ0FBZ0M7RUFDaEMsZ0JBQWdCO0VBQ2hCLFdBQVc7O0VBRVgsa0JBQWtCO0VBQ2xCLGdCQUFnQjs7RUFFaEIsWUFBWTtFQUNaLHdDQUF3QztFQUN4QyxjQUFjO0VBQ2QsdUJBQXVCOztFQUV2QixZQUFZO0FBQ2Q7QUFDQTtFQUNFLGtCQUFrQjtFQUNsQixjQUFjO0VBQ2QsWUFBWTtFQUNaLFdBQVc7O0VBRVgsU0FBUztFQUNULFdBQVc7RUFDWCxZQUFZOztFQUVaLHdDQUF3QztFQUN4Qyw4Q0FBOEM7QUFDaERcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLndyYXBwZXIge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbn1cXG5cXG4uZXJyb3Ige1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgei1pbmRleDogMTA7XFxuICBib3R0b206IDA7XFxuICBsZWZ0OiA1MCU7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAxMDAlKTtcXG4gIG1heC13aWR0aDogMjUwcHg7XFxuICB3aWR0aDogMTAwJTtcXG5cXG4gIGJvcmRlci1yYWRpdXM6IDRweDtcXG4gIHBhZGRpbmc6IDNweCA1cHg7XFxuXFxuICBjb2xvcjogd2hpdGU7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1lcnJvci1oaWdobGlnaHQpO1xcbiAgZm9udC1zaXplOiA4NSU7XFxuICBmb250LWZhbWlseTogc2Fucy1zZXJpZjtcXG5cXG4gIG9wYWNpdHk6IDAuOTtcXG59XFxuLmVycm9yOjpiZWZvcmUge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICBjb250ZW50OiAnICc7XFxuICB6LWluZGV4OiAtMTtcXG5cXG4gIGxlZnQ6IDUwJTtcXG4gIHdpZHRoOiAxMHB4O1xcbiAgaGVpZ2h0OiAxMHB4O1xcblxcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tZXJyb3ItaGlnaGxpZ2h0KTtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC03cHgpIHJvdGF0ZSg0NWRlZyk7XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ubG9jYWxzID0ge1xuXHRcIndyYXBwZXJcIjogXCJPYUpJU2JEMVdDbWIwM2F0NzdFR1wiLFxuXHRcImVycm9yXCI6IFwiTVVOOURlOGRVdmJQR0g5Y0VEb1FcIlxufTtcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIuSjJSNjdBUWVDS19hQzFES0ZDTUoge1xcbiAgbWFyZ2luOiA0cHg7XFxufVwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9Db21tb24vbGluay5tb2R1bGUuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0VBQ0UsV0FBVztBQUNiXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5pY29uIHtcXG4gIG1hcmdpbjogNHB4O1xcbn1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmxvY2FscyA9IHtcblx0XCJpY29uXCI6IFwiSjJSNjdBUWVDS19hQzFES0ZDTUpcIlxufTtcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIuRk1rQVN6d3Rfb01zY1pkT2JwRFEge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbn1cXG4uVE5GNmFSTUJQQU52WmlmQjI3Wksge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgYW5pbWF0aW9uOiBHR0NzN2lpQml3RENuVDgwY3lUaCAxcyBsaW5lYXIgaW5maW5pdGU7XFxufVxcblxcbkBrZXlmcmFtZXMgR0dDczdpaUJpd0RDblQ4MGN5VGgge1xcbiAgZnJvbSB7IHRyYW5zZm9ybTogcm90YXRlKDBkZWcpOyB9XFxuICB0byB7IHRyYW5zZm9ybTogcm90YXRlKDM2MGRlZyk7IH1cXG59XCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL0NvbW1vbi9zcGlubmVyLm1vZHVsZS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSxxQkFBcUI7RUFDckIsa0JBQWtCO0FBQ3BCO0FBQ0E7RUFDRSxxQkFBcUI7RUFDckIsa0RBQWtDO0FBQ3BDOztBQUVBO0VBQ0UsT0FBTyx1QkFBdUIsRUFBRTtFQUNoQyxLQUFLLHlCQUF5QixFQUFFO0FBQ2xDXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5zcGlubmVyIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG59XFxuLmljb24ge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgYW5pbWF0aW9uOiBzcGluIDFzIGxpbmVhciBpbmZpbml0ZTtcXG59XFxuXFxuQGtleWZyYW1lcyBzcGluIHtcXG4gIGZyb20geyB0cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTsgfVxcbiAgdG8geyB0cmFuc2Zvcm06IHJvdGF0ZSgzNjBkZWcpOyB9XFxufVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ubG9jYWxzID0ge1xuXHRcInNwaW5uZXJcIjogXCJGTWtBU3p3dF9vTXNjWmRPYnBEUVwiLFxuXHRcImljb25cIjogXCJUTkY2YVJNQlBBTnZaaWZCMjdaS1wiLFxuXHRcInNwaW5cIjogXCJHR0NzN2lpQml3RENuVDgwY3lUaFwiXG59O1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5zcTlpN2hRZVRlZUt1YXJtTzhvQSB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICBmb250LXNpemU6IDcwJTtcXG4gIGJhY2tncm91bmQ6IHJnYmEoMCwgMCwgMCwgMC41KTtcXG4gIGNvbG9yOiB3aGl0ZTtcXG4gIHBhZGRpbmc6IDRweDtcXG4gIGJvcmRlci1yYWRpdXM6IDRweDtcXG59XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL0NvbW1vbi90aXAubW9kdWxlLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLHFCQUFxQjtFQUNyQixjQUFjO0VBQ2QsOEJBQThCO0VBQzlCLFlBQVk7RUFDWixZQUFZO0VBQ1osa0JBQWtCO0FBQ3BCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi50aXAge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgZm9udC1zaXplOiA3MCU7XFxuICBiYWNrZ3JvdW5kOiByZ2JhKDAsIDAsIDAsIDAuNSk7XFxuICBjb2xvcjogd2hpdGU7XFxuICBwYWRkaW5nOiA0cHg7XFxuICBib3JkZXItcmFkaXVzOiA0cHg7XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ubG9jYWxzID0ge1xuXHRcInRpcFwiOiBcInNxOWk3aFFlVGVlS3Vhcm1POG9BXCJcbn07XG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLlE1dmVsbjNsM2xhVmt1TlBzNWRRIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG59XFxuXFxuLlE1dmVsbjNsM2xhVmt1TlBzNWRRIHByZSB7XFxuICB3aGl0ZS1zcGFjZTogcHJlO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tY29kZS1iZyk7XFxuICBjb2xvcjogdmFyKC0ta2V5LWNvbG9yLWJhc2UpO1xcbiAgcGFkZGluZzogMTBweDtcXG4gIG1heC1oZWlnaHQ6IDMyMHB4O1xcbiAgb3ZlcmZsb3c6IHNjcm9sbDtcXG59XFxuXFxuLmRxemdCd0oxUnEwWGdNcWVBS2U3IHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogMTVweDtcXG4gIHJpZ2h0OiAxNXB4O1xcbiAgcGFkZGluZzogNHB4IDdweDtcXG4gIGNvbG9yOiB2YXIoLS1rZXktY29sb3ItYmFzZSk7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1rZXktYmctYmFzZSk7XFxuICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1rZXktY29sb3ItYmFzZSk7XFxuICBib3JkZXItcmFkaXVzOiAzcHg7XFxufVxcbi5kcXpnQndKMVJxMFhnTXFlQUtlNzpob3ZlciB7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1zZWxlY3Rpb24pO1xcbiAgYm9yZGVyOiB2YXIoLS1zZWxlY3Rpb24pO1xcbiAgY29sb3I6IHdoaXRlO1xcbn1cXG5cXG4uWVYybEtBOWhiSnBQNFZzNHVkdzgge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgdG9wOiA1cHg7XFxuICByaWdodDogMHB4O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tc2VsZWN0aW9uKTtcXG4gIGNvbG9yOiB3aGl0ZTtcXG4gIHBhZGRpbmc6IDEwcHg7XFxuICBib3JkZXItcmFkaXVzOiAycHg7XFxuICBjdXJzb3I6IG5vbmU7XFxufVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9EaWFsb2dzL3VuZXhwZWN0ZWQtZXJyb3IubW9kdWxlLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLGtCQUFrQjtBQUNwQjs7QUFFQTtFQUNFLGdCQUFnQjtFQUNoQixnQ0FBZ0M7RUFDaEMsNEJBQTRCO0VBQzVCLGFBQWE7RUFDYixpQkFBaUI7RUFDakIsZ0JBQWdCO0FBQ2xCOztBQUVBO0VBQ0Usa0JBQWtCO0VBQ2xCLFNBQVM7RUFDVCxXQUFXO0VBQ1gsZ0JBQWdCO0VBQ2hCLDRCQUE0QjtFQUM1QixvQ0FBb0M7RUFDcEMsdUNBQXVDO0VBQ3ZDLGtCQUFrQjtBQUNwQjtBQUNBO0VBQ0UsZUFBZTtFQUNmLGtDQUFrQztFQUNsQyx3QkFBd0I7RUFDeEIsWUFBWTtBQUNkOztBQUVBO0VBQ0Usa0JBQWtCO0VBQ2xCLFFBQVE7RUFDUixVQUFVO0VBQ1Ysa0NBQWtDO0VBQ2xDLFlBQVk7RUFDWixhQUFhO0VBQ2Isa0JBQWtCO0VBQ2xCLFlBQVk7QUFDZFwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIuc3RhY2tUcmFjZSB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxufVxcblxcbi5zdGFja1RyYWNlIHByZSB7XFxuICB3aGl0ZS1zcGFjZTogcHJlO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tY29kZS1iZyk7XFxuICBjb2xvcjogdmFyKC0ta2V5LWNvbG9yLWJhc2UpO1xcbiAgcGFkZGluZzogMTBweDtcXG4gIG1heC1oZWlnaHQ6IDMyMHB4O1xcbiAgb3ZlcmZsb3c6IHNjcm9sbDtcXG59XFxuXFxuLmJ1dHRvbiB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDE1cHg7XFxuICByaWdodDogMTVweDtcXG4gIHBhZGRpbmc6IDRweCA3cHg7XFxuICBjb2xvcjogdmFyKC0ta2V5LWNvbG9yLWJhc2UpO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0ta2V5LWJnLWJhc2UpO1xcbiAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0ta2V5LWNvbG9yLWJhc2UpO1xcbiAgYm9yZGVyLXJhZGl1czogM3B4O1xcbn1cXG4uYnV0dG9uOmhvdmVyIHtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXNlbGVjdGlvbik7XFxuICBib3JkZXI6IHZhcigtLXNlbGVjdGlvbik7XFxuICBjb2xvcjogd2hpdGU7XFxufVxcblxcbi5jb3B5TWVzc2FnZSB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDVweDtcXG4gIHJpZ2h0OiAwcHg7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1zZWxlY3Rpb24pO1xcbiAgY29sb3I6IHdoaXRlO1xcbiAgcGFkZGluZzogMTBweDtcXG4gIGJvcmRlci1yYWRpdXM6IDJweDtcXG4gIGN1cnNvcjogbm9uZTtcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5sb2NhbHMgPSB7XG5cdFwic3RhY2tUcmFjZVwiOiBcIlE1dmVsbjNsM2xhVmt1TlBzNWRRXCIsXG5cdFwiYnV0dG9uXCI6IFwiZHF6Z0J3SjFScTBYZ01xZUFLZTdcIixcblx0XCJjb3B5TWVzc2FnZVwiOiBcIllWMmxLQTloYkpwUDRWczR1ZHc4XCJcbn07XG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLnhDT09zdnhMNXFRM2tSOHJpOTFBIHtcXG4gIGJveC1zaGFkb3c6IDAgNHB4IDEwcHggMHB4IHJnYmEoMCwgMCwgMCwgMC41KTtcXG59XFxuXFxuLnU0dVc5VTJFMERmYlVNOXZQOXBmIHtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIHBhZGRpbmc6IDA7XFxuICBtYXJnaW46IDA7XFxufVxcblxcbi51NHVXOVUyRTBEZmJVTTl2UDlwZiBsaSB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICBmb250LWZhbWlseTogbW9ub3NwYWNlO1xcbiAgZm9udC1zaXplOiAxMjAlO1xcbiAgbWFyZ2luOiA0cHggMnB4O1xcbiAgcGFkZGluZzogNHB4IDRweDtcXG4gIGJvcmRlci1yYWRpdXM6IDJweDtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG5cXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgLjUpO1xcbiAgb3BhY2l0eTogMC41O1xcbiAgY29sb3I6IHdoaXRlO1xcbn1cXG5cXG4udTR1VzlVMkUwRGZiVU05dlA5cGYgbGkuWWNIU3VuM1BMbzhkQ2I5cUladGMge1xcbiAgb3BhY2l0eTogMTtcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXNlbGVjdGlvbik7XFxuICBjb2xvcjogd2hpdGU7XFxufVxcblxcbi51NHVXOVUyRTBEZmJVTTl2UDlwZiBsaTpob3ZlciB7XFxuICBvcGFjaXR5OiAxO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0taG92ZXItc2VsZWN0aW9uKTtcXG59XFxuXFxuLmQzaE1FRHBFa0g4SDdZTEdfTmpJIHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG59XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL0VuaGFuY2VkUGlja2Vycy9LZXljb2RlL3N0eWxlcy5tb2R1bGUuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0VBQ0UsNkNBQTZDO0FBQy9DOztBQUVBO0VBQ0Usa0JBQWtCO0VBQ2xCLFVBQVU7RUFDVixTQUFTO0FBQ1g7O0FBRUE7RUFDRSxxQkFBcUI7RUFDckIsc0JBQXNCO0VBQ3RCLGVBQWU7RUFDZixlQUFlO0VBQ2YsZ0JBQWdCO0VBQ2hCLGtCQUFrQjtFQUNsQixlQUFlOztFQUVmLG1DQUFtQztFQUNuQyxZQUFZO0VBQ1osWUFBWTtBQUNkOztBQUVBO0VBQ0UsVUFBVTtFQUNWLGtDQUFrQztFQUNsQyxZQUFZO0FBQ2Q7O0FBRUE7RUFDRSxVQUFVO0VBQ1Ysd0NBQXdDO0FBQzFDOztBQUVBO0VBQ0UsV0FBVztFQUNYLHNCQUFzQjtFQUN0QixrQkFBa0I7QUFDcEJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLnByZXZpZXdLZXljb2RlIHtcXG4gIGJveC1zaGFkb3c6IDAgNHB4IDEwcHggMHB4IHJnYmEoMCwgMCwgMCwgMC41KTtcXG59XFxuXFxuLm1vZGlmaWVycyB7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICBwYWRkaW5nOiAwO1xcbiAgbWFyZ2luOiAwO1xcbn1cXG5cXG4ubW9kaWZpZXJzIGxpIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIGZvbnQtZmFtaWx5OiBtb25vc3BhY2U7XFxuICBmb250LXNpemU6IDEyMCU7XFxuICBtYXJnaW46IDRweCAycHg7XFxuICBwYWRkaW5nOiA0cHggNHB4O1xcbiAgYm9yZGVyLXJhZGl1czogMnB4O1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcblxcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAuNSk7XFxuICBvcGFjaXR5OiAwLjU7XFxuICBjb2xvcjogd2hpdGU7XFxufVxcblxcbi5tb2RpZmllcnMgbGkuc2VsZWN0ZWQge1xcbiAgb3BhY2l0eTogMTtcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXNlbGVjdGlvbik7XFxuICBjb2xvcjogd2hpdGU7XFxufVxcblxcbi5tb2RpZmllcnMgbGk6aG92ZXIge1xcbiAgb3BhY2l0eTogMTtcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWhvdmVyLXNlbGVjdGlvbik7XFxufVxcblxcbi5xdWlja0Nsb3NlVGlwIHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5sb2NhbHMgPSB7XG5cdFwicHJldmlld0tleWNvZGVcIjogXCJ4Q09Pc3Z4TDVxUTNrUjhyaTkxQVwiLFxuXHRcIm1vZGlmaWVyc1wiOiBcInU0dVc5VTJFMERmYlVNOXZQOXBmXCIsXG5cdFwic2VsZWN0ZWRcIjogXCJZY0hTdW4zUExvOGRDYjlxSVp0Y1wiLFxuXHRcInF1aWNrQ2xvc2VUaXBcIjogXCJkM2hNRURwRWtIOEg3WUxHX05qSVwiXG59O1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5TM3Q2MENLMUpDUk9GSXJSbG00aiBbcmVhZG9ubHldIHtcXG4gIGN1cnNvcjogbm90LWFsbG93ZWQ7XFxuICBjb2xvcjogZ3JheTtcXG4gIG91dGxpbmU6IGdyYXk7XFxufVxcblxcbmlucHV0LlMzdDYwQ0sxSkNST0ZJclJsbTRqW3R5cGU9XFxcInRleHRcXFwiXSxcXG5pbnB1dC5TM3Q2MENLMUpDUk9GSXJSbG00alt0eXBlPVxcXCJudW1iZXJcXFwiXSxcXG5zZWxlY3QuUzN0NjBDSzFKQ1JPRklyUmxtNGoge1xcbiAgd2lkdGg6IDEwMCU7XFxufVxcblxcbm9sLk1lZEc3U1BHMmdlMmg3ajJ5cXJKIHtcXG4gIGxpc3Qtc3R5bGUtdHlwZTogbm9uZTtcXG4gIG1hcmdpbi10b3A6IDA7XFxuICBwYWRkaW5nOiAwO1xcbn1cXG4uVjUwQmVrdDZ0ZDl5UU9TaURHZHgge1xcbiAgbGlzdC1zdHlsZS10eXBlOiBub25lO1xcbiAgbWFyZ2luOiAwO1xcbiAgcGFkZGluZzogMDtcXG59XFxuLlY1MEJla3Q2dGQ5eVFPU2lER2R4IGxpIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIGxpbmUtaGVpZ2h0OiAycmVtO1xcbn1cXG5vbC5RTmczdjZfZUpvSzdfcVYwX3k5biB7XFxuICBtYXJnaW46IDA7XFxufVxcbm9sLlFOZzN2Nl9lSm9LN19xVjBfeTluIGxpIHtcXG4gIGxpbmUtaGVpZ2h0OiAycmVtO1xcbn1cXG5vbC51NjVDM1VqaTdjb3ZNVW45OTZkUiB7XFxuICBsaXN0LXN0eWxlLXR5cGU6IG5vbmU7XFxuICBwYWRkaW5nOiAwO1xcbn1cXG4ueHA1dTRVbzRYMmZ4eFg5S3d3WHUge1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgbWFyZ2luOiAycHg7XFxuICBwYWRkaW5nOiA1cHg7XFxuICBmb250LWZhbWlseTogbW9ub3NwYWNlO1xcbiAgYm9yZGVyLXJhZGl1czogMXJlbTtcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWtleS1iZy1iYXNlKTtcXG59XFxuLnhwNXU0VW80WDJmeHhYOUt3d1h1OmhvdmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWhvdmVyLXNlbGVjdGlvbik7XFxuICBjb2xvcjogd2hpdGU7XFxufVxcblxcbi5ncEZHUDAwTEN3bEdqSzZ5ckdXdyB7XFxuICB2ZXJ0aWNhbC1hbGlnbjogdGV4dC1ib3R0b207XFxuICBtYXJnaW46IDAgMnB4O1xcbn1cXG4uZ3BGR1AwMExDd2xHaks2eXJHV3c6aG92ZXIge1xcbiAgY29sb3I6IGJsYWNrO1xcbn1cXG5cXG4uZ3NBemtLeG5melRjcDVBcHdtV1Mge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtd3JhcDogd3JhcDtcXG4gIGdhcDogMTBweDtcXG4gIGxpc3Qtc3R5bGUtdHlwZTogbm9uZTtcXG4gIHBhZGRpbmc6IDA7XFxuICBtYXJnaW46IDA7XFxufVxcblxcbi8qIENvcGllZCBmcm9tIE1hY3JvRWRpdG9yIDooICovXFxuLktyY1dEWWZSVlJmdlJocHNCRnhzIHtcXG4gIHZpc2liaWxpdHk6IGhpZGRlbjtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogMHB4O1xcbiAgcmlnaHQ6IDBweDtcXG4gIGZvbnQtc2l6ZTogODAlO1xcblxcbiAgY29sb3I6IHZhcigtLWtleS1jb2xvci1ob3Zlcik7XFxufVxcbi5LcmNXRFlmUlZSZnZSaHBzQkZ4cyA+ICoge1xcbiAgbWFyZ2luOiAycHg7XFxuICBvcGFjaXR5OiAwLjU7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcbi5nc0F6a0t4bmZ6VGNwNUFwd21XUyBsaSA6aG92ZXIgLktyY1dEWWZSVlJmdlJocHNCRnhzIHtcXG4gIHZpc2liaWxpdHk6IHZpc2libGU7XFxuICB6LWluZGV4OiAxMDtcXG59XFxuXFxuLktyY1dEWWZSVlJmdlJocHNCRnhzIDpob3ZlciB7XFxuICBvcGFjaXR5OiAxO1xcbn1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvS2V5Ym9hcmQvQmVoYXZpb3JzL1Byb3BlcnR5VmFsdWUvc3R5bGVzLm1vZHVsZS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSxtQkFBbUI7RUFDbkIsV0FBVztFQUNYLGFBQWE7QUFDZjs7QUFFQTs7O0VBR0UsV0FBVztBQUNiOztBQUVBO0VBQ0UscUJBQXFCO0VBQ3JCLGFBQWE7RUFDYixVQUFVO0FBQ1o7QUFDQTtFQUNFLHFCQUFxQjtFQUNyQixTQUFTO0VBQ1QsVUFBVTtBQUNaO0FBQ0E7RUFDRSxxQkFBcUI7RUFDckIsaUJBQWlCO0FBQ25CO0FBQ0E7RUFDRSxTQUFTO0FBQ1g7QUFDQTtFQUNFLGlCQUFpQjtBQUNuQjtBQUNBO0VBQ0UscUJBQXFCO0VBQ3JCLFVBQVU7QUFDWjtBQUNBO0VBQ0UsZUFBZTtFQUNmLFdBQVc7RUFDWCxZQUFZO0VBQ1osc0JBQXNCO0VBQ3RCLG1CQUFtQjtFQUNuQixvQ0FBb0M7QUFDdEM7QUFDQTtFQUNFLHdDQUF3QztFQUN4QyxZQUFZO0FBQ2Q7O0FBRUE7RUFDRSwyQkFBMkI7RUFDM0IsYUFBYTtBQUNmO0FBQ0E7RUFDRSxZQUFZO0FBQ2Q7O0FBRUE7RUFDRSxhQUFhO0VBQ2IsZUFBZTtFQUNmLFNBQVM7RUFDVCxxQkFBcUI7RUFDckIsVUFBVTtFQUNWLFNBQVM7QUFDWDs7QUFFQSwrQkFBK0I7QUFDL0I7RUFDRSxrQkFBa0I7RUFDbEIsa0JBQWtCO0VBQ2xCLFFBQVE7RUFDUixVQUFVO0VBQ1YsY0FBYzs7RUFFZCw2QkFBNkI7QUFDL0I7QUFDQTtFQUNFLFdBQVc7RUFDWCxZQUFZO0VBQ1osZUFBZTtBQUNqQjtBQUNBO0VBQ0UsbUJBQW1CO0VBQ25CLFdBQVc7QUFDYjs7QUFFQTtFQUNFLFVBQVU7QUFDWlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIucHJvcGVydHlWYWx1ZSBbcmVhZG9ubHldIHtcXG4gIGN1cnNvcjogbm90LWFsbG93ZWQ7XFxuICBjb2xvcjogZ3JheTtcXG4gIG91dGxpbmU6IGdyYXk7XFxufVxcblxcbmlucHV0LnByb3BlcnR5VmFsdWVbdHlwZT1cXFwidGV4dFxcXCJdLFxcbmlucHV0LnByb3BlcnR5VmFsdWVbdHlwZT1cXFwibnVtYmVyXFxcIl0sXFxuc2VsZWN0LnByb3BlcnR5VmFsdWUge1xcbiAgd2lkdGg6IDEwMCU7XFxufVxcblxcbm9sLnByb3BlcnR5TXVsdGlTZWxlY3Qge1xcbiAgbGlzdC1zdHlsZS10eXBlOiBub25lO1xcbiAgbWFyZ2luLXRvcDogMDtcXG4gIHBhZGRpbmc6IDA7XFxufVxcbi5wcm9wZXJ0eU11bHRpU2VsZWN0Q2hpcHMge1xcbiAgbGlzdC1zdHlsZS10eXBlOiBub25lO1xcbiAgbWFyZ2luOiAwO1xcbiAgcGFkZGluZzogMDtcXG59XFxuLnByb3BlcnR5TXVsdGlTZWxlY3RDaGlwcyBsaSB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICBsaW5lLWhlaWdodDogMnJlbTtcXG59XFxub2wucHJvcGVydHlQaGFuZGxlU2VsZWN0IHtcXG4gIG1hcmdpbjogMDtcXG59XFxub2wucHJvcGVydHlQaGFuZGxlU2VsZWN0IGxpIHtcXG4gIGxpbmUtaGVpZ2h0OiAycmVtO1xcbn1cXG5vbC5wcm9wZXJ0eVBoYW5kbGVTaW5nbGV0b24ge1xcbiAgbGlzdC1zdHlsZS10eXBlOiBub25lO1xcbiAgcGFkZGluZzogMDtcXG59XFxuLmJlaGF2aW9yQmluZCB7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBtYXJnaW46IDJweDtcXG4gIHBhZGRpbmc6IDVweDtcXG4gIGZvbnQtZmFtaWx5OiBtb25vc3BhY2U7XFxuICBib3JkZXItcmFkaXVzOiAxcmVtO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0ta2V5LWJnLWJhc2UpO1xcbn1cXG4uYmVoYXZpb3JCaW5kOmhvdmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWhvdmVyLXNlbGVjdGlvbik7XFxuICBjb2xvcjogd2hpdGU7XFxufVxcblxcbi5waGFuZGxlUmVtb3ZlIHtcXG4gIHZlcnRpY2FsLWFsaWduOiB0ZXh0LWJvdHRvbTtcXG4gIG1hcmdpbjogMCAycHg7XFxufVxcbi5waGFuZGxlUmVtb3ZlOmhvdmVyIHtcXG4gIGNvbG9yOiBibGFjaztcXG59XFxuXFxuLnByb3BlcnR5QmluZGluZ3NWYWx1ZSB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC13cmFwOiB3cmFwO1xcbiAgZ2FwOiAxMHB4O1xcbiAgbGlzdC1zdHlsZS10eXBlOiBub25lO1xcbiAgcGFkZGluZzogMDtcXG4gIG1hcmdpbjogMDtcXG59XFxuXFxuLyogQ29waWVkIGZyb20gTWFjcm9FZGl0b3IgOiggKi9cXG4uYWN0aW9ucyB7XFxuICB2aXNpYmlsaXR5OiBoaWRkZW47XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDBweDtcXG4gIHJpZ2h0OiAwcHg7XFxuICBmb250LXNpemU6IDgwJTtcXG5cXG4gIGNvbG9yOiB2YXIoLS1rZXktY29sb3ItaG92ZXIpO1xcbn1cXG4uYWN0aW9ucyA+ICoge1xcbiAgbWFyZ2luOiAycHg7XFxuICBvcGFjaXR5OiAwLjU7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcbi5wcm9wZXJ0eUJpbmRpbmdzVmFsdWUgbGkgOmhvdmVyIC5hY3Rpb25zIHtcXG4gIHZpc2liaWxpdHk6IHZpc2libGU7XFxuICB6LWluZGV4OiAxMDtcXG59XFxuXFxuLmFjdGlvbnMgOmhvdmVyIHtcXG4gIG9wYWNpdHk6IDE7XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ubG9jYWxzID0ge1xuXHRcInByb3BlcnR5VmFsdWVcIjogXCJTM3Q2MENLMUpDUk9GSXJSbG00alwiLFxuXHRcInByb3BlcnR5TXVsdGlTZWxlY3RcIjogXCJNZWRHN1NQRzJnZTJoN2oyeXFySlwiLFxuXHRcInByb3BlcnR5TXVsdGlTZWxlY3RDaGlwc1wiOiBcIlY1MEJla3Q2dGQ5eVFPU2lER2R4XCIsXG5cdFwicHJvcGVydHlQaGFuZGxlU2VsZWN0XCI6IFwiUU5nM3Y2X2VKb0s3X3FWMF95OW5cIixcblx0XCJwcm9wZXJ0eVBoYW5kbGVTaW5nbGV0b25cIjogXCJ1NjVDM1VqaTdjb3ZNVW45OTZkUlwiLFxuXHRcImJlaGF2aW9yQmluZFwiOiBcInhwNXU0VW80WDJmeHhYOUt3d1h1XCIsXG5cdFwicGhhbmRsZVJlbW92ZVwiOiBcImdwRkdQMDBMQ3dsR2pLNnlyR1d3XCIsXG5cdFwicHJvcGVydHlCaW5kaW5nc1ZhbHVlXCI6IFwiZ3NBemtLeG5melRjcDVBcHdtV1NcIixcblx0XCJhY3Rpb25zXCI6IFwiS3JjV0RZZlJWUmZ2Umhwc0JGeHNcIlxufTtcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIua2NqODgxYm5MRHBoNjJFY0tlbGoge1xcbiAgcGFkZGluZy1ib3R0b206IDYwcHg7XFxufVxcblxcbi5HZXVNeFF0QnZaWXIwbk9VUkRIZCB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgd2lkdGg6IDE5MHB4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIHBhZGRpbmc6IDEwcHg7XFxuICBnYXA6IDEwcHg7XFxuICBwb3NpdGlvbjogZml4ZWQ7XFxufVxcblxcbi5OcWxIRzFNS0JpT1VVRkFlZDNDTSB7XFxuICBtYXgtd2lkdGg6IDcwMHB4O1xcbiAgbWFyZ2luOiAwIGF1dG87XFxuICBwYWRkaW5nLWJvdHRvbTogNjBweDtcXG59XFxuXFxuLk5xbEhHMU1LQmlPVVVGQWVkM0NNIHRhYmxlIHtcXG4gIGJvcmRlci1zcGFjaW5nOiAwO1xcbn1cXG4uTnFsSEcxTUtCaU9VVUZBZWQzQ00gdGFibGUgdGhlYWQge1xcbiAgdGV4dC1hbGlnbjogbGVmdDtcXG59XFxuXFxuLk5xbEhHMU1LQmlPVVVGQWVkM0NNIHRhYmxlIHRib2R5IHRyIHRkIHtcXG4gIHBhZGRpbmc6IDEwcHg7XFxuICBtYXJnaW46IDA7XFxufVxcbi5OcWxIRzFNS0JpT1VVRkFlZDNDTSB0YWJsZSB0Ym9keSB0cjpudGgtY2hpbGQoZXZlbikge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0ta2V5LWJnLWJhc2UpO1xcbn1cXG5cXG4uUTNfcm1vM1hpRVZnOHFmWGdLWF8ge1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgcGFkZGluZzogNXB4O1xcbiAgb3BhY2l0eTogMC42O1xcbn1cXG4uUTNfcm1vM1hpRVZnOHFmWGdLWF86aG92ZXIge1xcbiAgb3BhY2l0eTogMTtcXG59XFxuXFxudGFibGUuY3pPS3hfdF9FREY0NHBpbHp5ekEgeyBtYXgtaGVpZ2h0OiA4MHZoOyB9XFxudGFibGUuY3pPS3hfdF9FREY0NHBpbHp5ekEgdGggeyB0ZXh0LWFsaWduOiBsZWZ0IH1cXG50YWJsZS5jek9LeF90X0VERjQ0cGlsenl6QSBpbnB1dCB7IGZvbnQtZmFtaWx5OiBtb25vc3BhY2UgfVxcbnRhYmxlLmN6T0t4X3RfRURGNDRwaWx6eXpBIHRkIHtcXG4gIHBhZGRpbmc6IDRweDtcXG4gIHZlcnRpY2FsLWFsaWduOiB0b3A7XFxufVxcbnRhYmxlLmN6T0t4X3RfRURGNDRwaWx6eXpBIC5zOHJXTmk2ZThCWjd5UXViZkR3cyB7XFxuICBmb250LWZhbWlseTogbW9ub3NwYWNlO1xcbn1cXG4uQnV4Nkd4anJlR1paa2NYcXg2a3Yge1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICBmb250LXN0eWxlOiBpdGFsaWM7XFxufVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9LZXlib2FyZC9CZWhhdmlvcnMvc3R5bGVzLm1vZHVsZS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSxvQkFBb0I7QUFDdEI7O0FBRUE7RUFDRSxhQUFhO0VBQ2IsWUFBWTtFQUNaLHNCQUFzQjtFQUN0QixhQUFhO0VBQ2IsU0FBUztFQUNULGVBQWU7QUFDakI7O0FBRUE7RUFDRSxnQkFBZ0I7RUFDaEIsY0FBYztFQUNkLG9CQUFvQjtBQUN0Qjs7QUFFQTtFQUNFLGlCQUFpQjtBQUNuQjtBQUNBO0VBQ0UsZ0JBQWdCO0FBQ2xCOztBQUVBO0VBQ0UsYUFBYTtFQUNiLFNBQVM7QUFDWDtBQUNBO0VBQ0Usb0NBQW9DO0FBQ3RDOztBQUVBO0VBQ0UsZUFBZTtFQUNmLFlBQVk7RUFDWixZQUFZO0FBQ2Q7QUFDQTtFQUNFLFVBQVU7QUFDWjs7QUFFQSw2QkFBbUIsZ0JBQWdCLEVBQUU7QUFDckMsZ0NBQXNCLGlCQUFpQjtBQUN2QyxtQ0FBeUIsdUJBQXVCO0FBQ2hEO0VBQ0UsWUFBWTtFQUNaLG1CQUFtQjtBQUNyQjtBQUNBO0VBQ0Usc0JBQXNCO0FBQ3hCO0FBQ0E7RUFDRSxjQUFjO0VBQ2Qsa0JBQWtCO0FBQ3BCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5tYWluIHtcXG4gIHBhZGRpbmctYm90dG9tOiA2MHB4O1xcbn1cXG5cXG4uc2lkZWJhciB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgd2lkdGg6IDE5MHB4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIHBhZGRpbmc6IDEwcHg7XFxuICBnYXA6IDEwcHg7XFxuICBwb3NpdGlvbjogZml4ZWQ7XFxufVxcblxcbi5wYW5lbCB7XFxuICBtYXgtd2lkdGg6IDcwMHB4O1xcbiAgbWFyZ2luOiAwIGF1dG87XFxuICBwYWRkaW5nLWJvdHRvbTogNjBweDtcXG59XFxuXFxuLnBhbmVsIHRhYmxlIHtcXG4gIGJvcmRlci1zcGFjaW5nOiAwO1xcbn1cXG4ucGFuZWwgdGFibGUgdGhlYWQge1xcbiAgdGV4dC1hbGlnbjogbGVmdDtcXG59XFxuXFxuLnBhbmVsIHRhYmxlIHRib2R5IHRyIHRkIHtcXG4gIHBhZGRpbmc6IDEwcHg7XFxuICBtYXJnaW46IDA7XFxufVxcbi5wYW5lbCB0YWJsZSB0Ym9keSB0cjpudGgtY2hpbGQoZXZlbikge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0ta2V5LWJnLWJhc2UpO1xcbn1cXG5cXG4uYWN0aW9uIHtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIHBhZGRpbmc6IDVweDtcXG4gIG9wYWNpdHk6IDAuNjtcXG59XFxuLmFjdGlvbjpob3ZlciB7XFxuICBvcGFjaXR5OiAxO1xcbn1cXG5cXG50YWJsZS5lZGl0b3JGb3JtIHsgbWF4LWhlaWdodDogODB2aDsgfVxcbnRhYmxlLmVkaXRvckZvcm0gdGggeyB0ZXh0LWFsaWduOiBsZWZ0IH1cXG50YWJsZS5lZGl0b3JGb3JtIGlucHV0IHsgZm9udC1mYW1pbHk6IG1vbm9zcGFjZSB9XFxudGFibGUuZWRpdG9yRm9ybSB0ZCB7XFxuICBwYWRkaW5nOiA0cHg7XFxuICB2ZXJ0aWNhbC1hbGlnbjogdG9wO1xcbn1cXG50YWJsZS5lZGl0b3JGb3JtIC5wcm9wZXJ0eU5hbWUge1xcbiAgZm9udC1mYW1pbHk6IG1vbm9zcGFjZTtcXG59XFxuLnByb3BlcnR5RGVwcmVjYXRpb24ge1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICBmb250LXN0eWxlOiBpdGFsaWM7XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ubG9jYWxzID0ge1xuXHRcIm1haW5cIjogXCJrY2o4ODFibkxEcGg2MkVjS2VsalwiLFxuXHRcInNpZGViYXJcIjogXCJHZXVNeFF0QnZaWXIwbk9VUkRIZFwiLFxuXHRcInBhbmVsXCI6IFwiTnFsSEcxTUtCaU9VVUZBZWQzQ01cIixcblx0XCJhY3Rpb25cIjogXCJRM19ybW8zWGlFVmc4cWZYZ0tYX1wiLFxuXHRcImVkaXRvckZvcm1cIjogXCJjek9LeF90X0VERjQ0cGlsenl6QVwiLFxuXHRcInByb3BlcnR5TmFtZVwiOiBcInM4cldOaTZlOEJaN3lRdWJmRHdzXCIsXG5cdFwicHJvcGVydHlEZXByZWNhdGlvblwiOiBcIkJ1eDZHeGpyZUdaWmtjWHF4Nmt2XCJcbn07XG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLnB3WGJHT1JzWUtxeU9QQm05X2RXIHtcXG4gIHBhZGRpbmctYm90dG9tOiA2MHB4O1xcbn1cXG5cXG4uUWdGRFhOeWJLRF9YTjY2TV9XcEoge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIHdpZHRoOiAxOTBweDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICBwYWRkaW5nOiAxMHB4O1xcbiAgZ2FwOiAxMHB4O1xcbiAgcG9zaXRpb246IGZpeGVkO1xcbn1cXG5cXG4uR3kwS1pHQ2dPZVZtaW5BZmdnRlEge1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0ta2V5LWJnLWJhc2UpO1xcbn1cXG4uR3kwS1pHQ2dPZVZtaW5BZmdnRlE6aG92ZXIge1xcbiAgYm9yZGVyOiA0cHggc29saWQgdmFyKC0tc2VsZWN0aW9uKTtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxufVxcblxcbi5MZDljVmR0cFNfRHBiRWlmeVg5WSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1zZWxlY3Rpb24pO1xcbn1cXG4uTGQ5Y1ZkdHBTX0RwYkVpZnlYOVk6aG92ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0taG92ZXItc2VsZWN0aW9uKTtcXG59XFxuXFxuLm1xcEo3dUhBTUt4dk9Sb09JUEZLIHtcXG4gIG1heC13aWR0aDogNDUwcHg7XFxuICBtYXJnaW46IDAgYXV0bztcXG4gIHBhZGRpbmctYm90dG9tOiA2MHB4O1xcbn1cXG5cXG4uQlZ1Y3d5NEFaQ3lsN0d5aXZ6TW4ge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXG4gIGJvcmRlci1ib3R0b206IDJweCBzb2xpZCB2YXIoLS1rZXktYmctYmFzZSk7XFxuICBtYXJnaW46IDVweCAwO1xcbn1cXG5cXG4uVTZnMG5qV2pCcnRiX0kzWGhBZVYge1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgcGFkZGluZzogNXB4O1xcbiAgb3BhY2l0eTogMC42O1xcbn1cXG4uVTZnMG5qV2pCcnRiX0kzWGhBZVY6aG92ZXIge1xcbiAgb3BhY2l0eTogMTtcXG59XFxuXFxuLkNST2hzQkx0dW5RMkJiZldka1F3IHtcXG4gIG1hcmdpbjogMTBweCAwIDQwcHg7XFxufVxcblxcbi5DUk9oc0JMdHVuUTJCYmZXZGtRdyAuTWhBNGZYWHVhWjFpUHZ2MDV3NG0ge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtZXZlbmx5O1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG59XFxuXFxuLkNST2hzQkx0dW5RMkJiZldka1F3IGg1IHtcXG4gIG1hcmdpbjogMDtcXG59XFxuXFxuLnZ1alljZ1FqaU40QkdwMzdGTVVIIHtcXG4gIGNvbG9yOiB2YXIoLS1rZXktY29sb3ItYmFzZSk7XFxufVxcblxcbi51aDJ5UFd5ZkVPWnRnWG8yX0t0VSB7XFxuICBjb2xvcjogdmFyKC0tZGVsZXRlKTtcXG59XFxuXFxuLk5BQjFFTjZfcGNZSXk1RGI5WG5DIHtcXG4gIGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDtcXG59XFxuLk5BQjFFTjZfcGNZSXk1RGI5WG5DOmhvdmVyIHtcXG4gIGNvbG9yOiB3aGl0ZTtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuLmtZbjhicnNGZ0VhZjYxb1F5djRkOmhvdmVyIC5OQUIxRU42X3BjWUl5NURiOVhuQyB7XFxuICBkaXNwbGF5OiBmbGV4ICFpbXBvcnRhbnQ7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICByaWdodDogLTQ4cHg7XFxuICB0cmFuc2Zvcm06IHNjYWxlKDAuNSk7XFxufVxcblxcbi5OR3huaGZTSmFKOUZOdTNobEJmYy5OQUIxRU42X3BjWUl5NURiOVhuQyxcXG4uTkd4bmhmU0phSjlGTnUzaGxCZmMuR1hnR19JYVFUcmljcVRocXpzS2UgPiAqIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHNhbmR5YnJvd247XFxuICBjb2xvcjogd2hpdGU7XFxufVxcbi5OR3huaGZTSmFKOUZOdTNobEJmYy5OQUIxRU42X3BjWUl5NURiOVhuQyB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbn1cXG5cXG4uZmxqZHZjZWJPdjFnYktacGYwdlcge1xcbiAgbWFyZ2luOiAxMHB4IDA7XFxuICBkaXNwbGF5OiBmbGV4O1xcbn1cXG5cXG4uZmxqZHZjZWJPdjFnYktacGYwdlcgbGFiZWwge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgd2lkdGg6IDEyMHB4O1xcbiAgdGV4dC1hbGlnbjogcmlnaHQ7XFxuICBtYXJnaW4tcmlnaHQ6IDEwcHg7XFxufVxcblxcbi5ibk42SkNpdDBSY2pkUWlxenc4dyB7XFxuICBsaXN0LXN0eWxlLXR5cGU6IG5vbmU7XFxuICBtYXJnaW46IDA7XFxuICBwYWRkaW5nOiAwO1xcbn1cXG4uYm5ONkpDaXQwUmNqZFFpcXp3OHcgbGkge1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgcGFkZGluZzogNXB4IDEwcHg7XFxuICBtYXJnaW46IDVweDtcXG4gIGJvcmRlci1yYWRpdXM6IDMwcHg7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1rZXktYmctYmFzZSk7XFxufVxcbi5ibk42SkNpdDBSY2pkUWlxenc4dyBsaVtkYXRhLXNlbGVjdGVkPVxcXCJ0cnVlXFxcIl0ge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tc2VsZWN0aW9uKTtcXG4gIGNvbG9yOiB2YXIoLS1rZXktY29sb3ItaG92ZXIpO1xcbn1cXG4uYm5ONkpDaXQwUmNqZFFpcXp3OHcgbGk6aG92ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0taG92ZXItc2VsZWN0aW9uKTtcXG4gIGNvbG9yOiB2YXIoLS1rZXktY29sb3ItaG92ZXIpO1xcbn1cXG5cXG4uTnBMRVlyQzMyS1E0clV4OWhVRkoge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0ta2V5LWJnLWJhc2UpO1xcbiAgYm9yZGVyLXJhZGl1czogMzBweDtcXG4gIGNvbG9yOiB2YXIoLS1rZXktY29sb3ItYmFzZSk7XFxuICBmb250LXNpemU6IDgwJTtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIHBhZGRpbmc6IDVweDtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIGJvdHRvbTogLTQwcHg7XFxuICBsZWZ0OiA1MCU7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAwKTtcXG4gIHdpZHRoOiAxMTAlO1xcblxcbiAgcG9pbnRlci1ldmVudHM6IG5vbmU7XFxuICB0cmFuc2l0aW9uOiBvcGFjaXR5IGVhc2UtaW4tb3V0IC41cztcXG59XFxuXFxuLmwyZ3RFMVhLUzYzUjVUTTV1bmlwIHsgcG9zaXRpb246IHJlbGF0aXZlIH1cXG4ubDJndEUxWEtTNjNSNVRNNXVuaXA6aG92ZXIgLk5wTEVZckMzMktRNHJVeDloVUZKIHsgb3BhY2l0eTogMC4yNSB9XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL0tleWJvYXJkL0NvbWJvcy9zdHlsZXMubW9kdWxlLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLG9CQUFvQjtBQUN0Qjs7QUFFQTtFQUNFLGFBQWE7RUFDYixZQUFZO0VBQ1osc0JBQXNCO0VBQ3RCLGFBQWE7RUFDYixTQUFTO0VBQ1QsZUFBZTtBQUNqQjs7QUFFQTtFQUNFLGVBQWU7RUFDZixvQ0FBb0M7QUFDdEM7QUFDQTtFQUNFLGtDQUFrQztFQUNsQyxzQkFBc0I7QUFDeEI7O0FBRUE7RUFDRSxrQ0FBa0M7QUFDcEM7QUFDQTtFQUNFLHdDQUF3QztBQUMxQzs7QUFFQTtFQUNFLGdCQUFnQjtFQUNoQixjQUFjO0VBQ2Qsb0JBQW9CO0FBQ3RCOztBQUVBO0VBQ0UsYUFBYTtFQUNiLDhCQUE4QjtFQUM5QiwyQ0FBMkM7RUFDM0MsYUFBYTtBQUNmOztBQUVBO0VBQ0UsZUFBZTtFQUNmLFlBQVk7RUFDWixZQUFZO0FBQ2Q7QUFDQTtFQUNFLFVBQVU7QUFDWjs7QUFFQTtFQUNFLG1CQUFtQjtBQUNyQjs7QUFFQTtFQUNFLGFBQWE7RUFDYiw2QkFBNkI7RUFDN0IsbUJBQW1CO0FBQ3JCOztBQUVBO0VBQ0UsU0FBUztBQUNYOztBQUVBO0VBQ0UsNEJBQTRCO0FBQzlCOztBQUVBO0VBQ0Usb0JBQW9CO0FBQ3RCOztBQUVBO0VBQ0Usd0JBQXdCO0FBQzFCO0FBQ0E7RUFDRSxZQUFZO0VBQ1osZUFBZTtBQUNqQjtBQUNBO0VBQ0Usd0JBQXdCO0VBQ3hCLGtCQUFrQjtFQUNsQixZQUFZO0VBQ1oscUJBQXFCO0FBQ3ZCOztBQUVBOztFQUVFLDRCQUE0QjtFQUM1QixZQUFZO0FBQ2Q7QUFDQTtFQUNFLGFBQWE7QUFDZjs7QUFFQTtFQUNFLGNBQWM7RUFDZCxhQUFhO0FBQ2Y7O0FBRUE7RUFDRSxxQkFBcUI7RUFDckIsWUFBWTtFQUNaLGlCQUFpQjtFQUNqQixrQkFBa0I7QUFDcEI7O0FBRUE7RUFDRSxxQkFBcUI7RUFDckIsU0FBUztFQUNULFVBQVU7QUFDWjtBQUNBO0VBQ0UsZUFBZTtFQUNmLHFCQUFxQjtFQUNyQixpQkFBaUI7RUFDakIsV0FBVztFQUNYLG1CQUFtQjtFQUNuQixvQ0FBb0M7QUFDdEM7QUFDQTtFQUNFLGtDQUFrQztFQUNsQyw2QkFBNkI7QUFDL0I7QUFDQTtFQUNFLHdDQUF3QztFQUN4Qyw2QkFBNkI7QUFDL0I7O0FBRUE7RUFDRSxvQ0FBb0M7RUFDcEMsbUJBQW1CO0VBQ25CLDRCQUE0QjtFQUM1QixjQUFjO0VBQ2Qsa0JBQWtCO0VBQ2xCLFlBQVk7RUFDWixrQkFBa0I7RUFDbEIsYUFBYTtFQUNiLFNBQVM7RUFDVCw2QkFBNkI7RUFDN0IsV0FBVzs7RUFFWCxvQkFBb0I7RUFDcEIsbUNBQW1DO0FBQ3JDOztBQUVBLHdCQUFpQixtQkFBbUI7QUFDcEMsb0RBQXdDLGNBQWNcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLm1haW4ge1xcbiAgcGFkZGluZy1ib3R0b206IDYwcHg7XFxufVxcblxcbi5zaWRlYmFyIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICB3aWR0aDogMTkwcHg7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgcGFkZGluZzogMTBweDtcXG4gIGdhcDogMTBweDtcXG4gIHBvc2l0aW9uOiBmaXhlZDtcXG59XFxuXFxuLnNlbGVjdGFibGUge1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0ta2V5LWJnLWJhc2UpO1xcbn1cXG4uc2VsZWN0YWJsZTpob3ZlciB7XFxuICBib3JkZXI6IDRweCBzb2xpZCB2YXIoLS1zZWxlY3Rpb24pO1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG59XFxuXFxuLmhpZ2hsaWdodCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1zZWxlY3Rpb24pO1xcbn1cXG4uaGlnaGxpZ2h0OmhvdmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWhvdmVyLXNlbGVjdGlvbik7XFxufVxcblxcbi5jb21ib1BhbmVsIHtcXG4gIG1heC13aWR0aDogNDUwcHg7XFxuICBtYXJnaW46IDAgYXV0bztcXG4gIHBhZGRpbmctYm90dG9tOiA2MHB4O1xcbn1cXG5cXG4uaGVhZGluZyB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcbiAgYm9yZGVyLWJvdHRvbTogMnB4IHNvbGlkIHZhcigtLWtleS1iZy1iYXNlKTtcXG4gIG1hcmdpbjogNXB4IDA7XFxufVxcblxcbi5hY3Rpb24ge1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgcGFkZGluZzogNXB4O1xcbiAgb3BhY2l0eTogMC42O1xcbn1cXG4uYWN0aW9uOmhvdmVyIHtcXG4gIG9wYWNpdHk6IDE7XFxufVxcblxcbi5jb21ibyB7XFxuICBtYXJnaW46IDEwcHggMCA0MHB4O1xcbn1cXG5cXG4uY29tYm8gLmRldGFpbCB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1ldmVubHk7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbn1cXG5cXG4uY29tYm8gaDUge1xcbiAgbWFyZ2luOiAwO1xcbn1cXG5cXG4uZWRpdCB7XFxuICBjb2xvcjogdmFyKC0ta2V5LWNvbG9yLWJhc2UpO1xcbn1cXG5cXG4ucmVtb3ZlIHtcXG4gIGNvbG9yOiB2YXIoLS1kZWxldGUpO1xcbn1cXG5cXG4uYWRkQ29tYm9JbnB1dCB7XFxuICBkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7XFxufVxcbi5hZGRDb21ib0lucHV0OmhvdmVyIHtcXG4gIGNvbG9yOiB3aGl0ZTtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuLmNvbWJvSW5wdXRMaXN0OmhvdmVyIC5hZGRDb21ib0lucHV0IHtcXG4gIGRpc3BsYXk6IGZsZXggIWltcG9ydGFudDtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHJpZ2h0OiAtNDhweDtcXG4gIHRyYW5zZm9ybTogc2NhbGUoMC41KTtcXG59XFxuXFxuLmFjdGl2ZS5hZGRDb21ib0lucHV0LFxcbi5hY3RpdmUuY29tYm9JbnB1dCA+ICoge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogc2FuZHlicm93bjtcXG4gIGNvbG9yOiB3aGl0ZTtcXG59XFxuLmFjdGl2ZS5hZGRDb21ib0lucHV0IHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxufVxcblxcbi5maWVsZCB7XFxuICBtYXJnaW46IDEwcHggMDtcXG4gIGRpc3BsYXk6IGZsZXg7XFxufVxcblxcbi5maWVsZCBsYWJlbCB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICB3aWR0aDogMTIwcHg7XFxuICB0ZXh0LWFsaWduOiByaWdodDtcXG4gIG1hcmdpbi1yaWdodDogMTBweDtcXG59XFxuXFxuLmxheWVyTGlzdCB7XFxuICBsaXN0LXN0eWxlLXR5cGU6IG5vbmU7XFxuICBtYXJnaW46IDA7XFxuICBwYWRkaW5nOiAwO1xcbn1cXG4ubGF5ZXJMaXN0IGxpIHtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIHBhZGRpbmc6IDVweCAxMHB4O1xcbiAgbWFyZ2luOiA1cHg7XFxuICBib3JkZXItcmFkaXVzOiAzMHB4O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0ta2V5LWJnLWJhc2UpO1xcbn1cXG4ubGF5ZXJMaXN0IGxpW2RhdGEtc2VsZWN0ZWQ9XFxcInRydWVcXFwiXSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1zZWxlY3Rpb24pO1xcbiAgY29sb3I6IHZhcigtLWtleS1jb2xvci1ob3Zlcik7XFxufVxcbi5sYXllckxpc3QgbGk6aG92ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0taG92ZXItc2VsZWN0aW9uKTtcXG4gIGNvbG9yOiB2YXIoLS1rZXktY29sb3ItaG92ZXIpO1xcbn1cXG5cXG4uZmxvYXRpbmdNZXNzYWdlIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWtleS1iZy1iYXNlKTtcXG4gIGJvcmRlci1yYWRpdXM6IDMwcHg7XFxuICBjb2xvcjogdmFyKC0ta2V5LWNvbG9yLWJhc2UpO1xcbiAgZm9udC1zaXplOiA4MCU7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICBwYWRkaW5nOiA1cHg7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBib3R0b206IC00MHB4O1xcbiAgbGVmdDogNTAlO1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgMCk7XFxuICB3aWR0aDogMTEwJTtcXG5cXG4gIHBvaW50ZXItZXZlbnRzOiBub25lO1xcbiAgdHJhbnNpdGlvbjogb3BhY2l0eSBlYXNlLWluLW91dCAuNXM7XFxufVxcblxcbi5jb21ib0lucHV0TWFwIHsgcG9zaXRpb246IHJlbGF0aXZlIH1cXG4uY29tYm9JbnB1dE1hcDpob3ZlciAuZmxvYXRpbmdNZXNzYWdlIHsgb3BhY2l0eTogMC4yNSB9XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5sb2NhbHMgPSB7XG5cdFwibWFpblwiOiBcInB3WGJHT1JzWUtxeU9QQm05X2RXXCIsXG5cdFwic2lkZWJhclwiOiBcIlFnRkRYTnliS0RfWE42Nk1fV3BKXCIsXG5cdFwic2VsZWN0YWJsZVwiOiBcIkd5MEtaR0NnT2VWbWluQWZnZ0ZRXCIsXG5cdFwiaGlnaGxpZ2h0XCI6IFwiTGQ5Y1ZkdHBTX0RwYkVpZnlYOVlcIixcblx0XCJjb21ib1BhbmVsXCI6IFwibXFwSjd1SEFNS3h2T1JvT0lQRktcIixcblx0XCJoZWFkaW5nXCI6IFwiQlZ1Y3d5NEFaQ3lsN0d5aXZ6TW5cIixcblx0XCJhY3Rpb25cIjogXCJVNmcwbmpXakJydGJfSTNYaEFlVlwiLFxuXHRcImNvbWJvXCI6IFwiQ1JPaHNCTHR1blEyQmJmV2RrUXdcIixcblx0XCJkZXRhaWxcIjogXCJNaEE0ZlhYdWFaMWlQdnYwNXc0bVwiLFxuXHRcImVkaXRcIjogXCJ2dWpZY2dRamlONEJHcDM3Rk1VSFwiLFxuXHRcInJlbW92ZVwiOiBcInVoMnlQV3lmRU9adGdYbzJfS3RVXCIsXG5cdFwiYWRkQ29tYm9JbnB1dFwiOiBcIk5BQjFFTjZfcGNZSXk1RGI5WG5DXCIsXG5cdFwiY29tYm9JbnB1dExpc3RcIjogXCJrWW44YnJzRmdFYWY2MW9ReXY0ZFwiLFxuXHRcImFjdGl2ZVwiOiBcIk5HeG5oZlNKYUo5Rk51M2hsQmZjXCIsXG5cdFwiY29tYm9JbnB1dFwiOiBcIkdYZ0dfSWFRVHJpY3FUaHF6c0tlXCIsXG5cdFwiZmllbGRcIjogXCJmbGpkdmNlYk92MWdiS1pwZjB2V1wiLFxuXHRcImxheWVyTGlzdFwiOiBcImJuTjZKQ2l0MFJjamRRaXF6dzh3XCIsXG5cdFwiZmxvYXRpbmdNZXNzYWdlXCI6IFwiTnBMRVlyQzMyS1E0clV4OWhVRkpcIixcblx0XCJjb21ib0lucHV0TWFwXCI6IFwibDJndEUxWEtTNjNSNVRNNXVuaXBcIlxufTtcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIuZUVXaDFrTXhxMHF3dEFqV29kTF8ge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICBtYXJnaW46IDA7XFxuICBwYWRkaW5nOiAwO1xcbn1cXG5cXG4uZUVXaDFrTXhxMHF3dEFqV29kTF8uTWUyaWV3U2hra1VXRW1oQ0tBSlYge1xcbiAgY3Vyc29yOiBjcm9zc2hhaXI7XFxufVxcblxcbi53b3VfcnBtMG52Qjh3eEIxNTNjRSB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDE1MCwgMjU1LCAxNTAsIDAuMSk7XFxuICBib3JkZXI6IDNweCBkb3R0ZWQgcmdiYSgxNTAsIDI1NSwgMTUwLCAwLjcpO1xcbiAgcG9pbnRlci1ldmVudHM6IG5vbmU7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbn1cXG5cXG4ud291X3JwbTBudkI4d3hCMTUzY0UuZk04eFFDdjRLeWtrVzVzc3hnRWcge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgxMjAsIDEyMCwgMTIwLCAwLjEpO1xcbiAgYm9yZGVyLWNvbG9yOiByZ2JhKDEyMCwgMTIwLCAxMjAsIDAuMjUpO1xcbn1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvS2V5Ym9hcmQvQ29tbW9uL2RyYWdTZWxlY3Rvci5tb2R1bGUuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0VBQ0UsV0FBVztFQUNYLFlBQVk7RUFDWixTQUFTO0VBQ1QsVUFBVTtBQUNaOztBQUVBO0VBQ0UsaUJBQWlCO0FBQ25COztBQUVBO0VBQ0Usa0JBQWtCO0VBQ2xCLDBDQUEwQztFQUMxQywyQ0FBMkM7RUFDM0Msb0JBQW9CO0VBQ3BCLHNCQUFzQjtBQUN4Qjs7QUFFQTtFQUNFLDBDQUEwQztFQUMxQyx1Q0FBdUM7QUFDekNcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLmNvbnRhaW5lciB7XFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogMTAwJTtcXG4gIG1hcmdpbjogMDtcXG4gIHBhZGRpbmc6IDA7XFxufVxcblxcbi5jb250YWluZXIuc2VsZWN0aW5nIHtcXG4gIGN1cnNvcjogY3Jvc3NoYWlyO1xcbn1cXG5cXG4ub3ZlcmxheSB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDE1MCwgMjU1LCAxNTAsIDAuMSk7XFxuICBib3JkZXI6IDNweCBkb3R0ZWQgcmdiYSgxNTAsIDI1NSwgMTUwLCAwLjcpO1xcbiAgcG9pbnRlci1ldmVudHM6IG5vbmU7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbn1cXG5cXG4ub3ZlcmxheS5uZWdhdGUge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgxMjAsIDEyMCwgMTIwLCAwLjEpO1xcbiAgYm9yZGVyLWNvbG9yOiByZ2JhKDEyMCwgMTIwLCAxMjAsIDAuMjUpO1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmxvY2FscyA9IHtcblx0XCJjb250YWluZXJcIjogXCJlRVdoMWtNeHEwcXd0QWpXb2RMX1wiLFxuXHRcInNlbGVjdGluZ1wiOiBcIk1lMmlld1Noa2tVV0VtaENLQUpWXCIsXG5cdFwib3ZlcmxheVwiOiBcIndvdV9ycG0wbnZCOHd4QjE1M2NFXCIsXG5cdFwibmVnYXRlXCI6IFwiZk04eFFDdjRLeWtrVzVzc3hnRWdcIlxufTtcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIubEQ1VHN2ZEliRUFITmRtaGZubGIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0ta2V5LWJnLWJhc2UpO1xcbn1cXG4ueWs4OUU0eks5emxPNjlPWGhLbjU6aG92ZXIge1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgYm9yZGVyOiA0cHggc29saWQgdmFyKC0tc2VsZWN0aW9uKTtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxufVxcblxcbi5welR2c3hLanB5Nk1xY0ZoeGg5aiB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1zZWxlY3Rpb24pO1xcbn1cXG4ucHpUdnN4S2pweTZNcWNGaHhoOWo6aG92ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0taG92ZXItc2VsZWN0aW9uKTtcXG59XFxuXFxuLnJfU2RrbG5qNTdDRTJaam5CRHc2IHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWhvdmVyLXNlbGVjdGlvbik7XFxuICBmaWx0ZXI6IGJyaWdodG5lc3MoMTM1JSk7XFxufVxcblxcbi5JY2g5VDFuU3pIczFhODRpbnNmcCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1ob3Zlci1zZWxlY3Rpb24pO1xcbiAgZmlsdGVyOiBicmlnaHRuZXNzKDc1JSk7XFxufVxcblxcbi5fM1UxemkxSjFzWFQ0MUF6cEFBMWoge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgYm90dG9tOiAwO1xcbiAgcmlnaHQ6IDUwJTtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlKDUwJSwgMTAwJSk7XFxufVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9LZXlib2FyZC9Db21tb24va2V5UG9zaXRpb25TZWxlY3RvclN0eWxlcy5tb2R1bGUuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0VBQ0Usb0NBQW9DO0FBQ3RDO0FBQ0E7RUFDRSxlQUFlO0VBQ2Ysa0NBQWtDO0VBQ2xDLHNCQUFzQjtBQUN4Qjs7QUFFQTtFQUNFLGtDQUFrQztBQUNwQztBQUNBO0VBQ0Usd0NBQXdDO0FBQzFDOztBQUVBO0VBQ0Usd0NBQXdDO0VBQ3hDLHdCQUF3QjtBQUMxQjs7QUFFQTtFQUNFLHdDQUF3QztFQUN4Qyx1QkFBdUI7QUFDekI7O0FBRUE7RUFDRSxrQkFBa0I7RUFDbEIsU0FBUztFQUNULFVBQVU7RUFDViwrQkFBK0I7QUFDakNcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLmtleSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1rZXktYmctYmFzZSk7XFxufVxcbi5zZWxlY3RhYmxlOmhvdmVyIHtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIGJvcmRlcjogNHB4IHNvbGlkIHZhcigtLXNlbGVjdGlvbik7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbn1cXG5cXG4uaGlnaGxpZ2h0IHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXNlbGVjdGlvbik7XFxufVxcbi5oaWdobGlnaHQ6aG92ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0taG92ZXItc2VsZWN0aW9uKTtcXG59XFxuXFxuLnByZXZpZXdBZGQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0taG92ZXItc2VsZWN0aW9uKTtcXG4gIGZpbHRlcjogYnJpZ2h0bmVzcygxMzUlKTtcXG59XFxuXFxuLnByZXZpZXdSZW1vdmUge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0taG92ZXItc2VsZWN0aW9uKTtcXG4gIGZpbHRlcjogYnJpZ2h0bmVzcyg3NSUpO1xcbn1cXG5cXG4udGlwIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIGJvdHRvbTogMDtcXG4gIHJpZ2h0OiA1MCU7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSg1MCUsIDEwMCUpO1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmxvY2FscyA9IHtcblx0XCJrZXlcIjogXCJsRDVUc3ZkSWJFQUhOZG1oZm5sYlwiLFxuXHRcInNlbGVjdGFibGVcIjogXCJ5azg5RTR6Szl6bE82OU9YaEtuNVwiLFxuXHRcImhpZ2hsaWdodFwiOiBcInB6VHZzeEtqcHk2TXFjRmh4aDlqXCIsXG5cdFwicHJldmlld0FkZFwiOiBcInJfU2RrbG5qNTdDRTJaam5CRHc2XCIsXG5cdFwicHJldmlld1JlbW92ZVwiOiBcIkljaDlUMW5TekhzMWE4NGluc2ZwXCIsXG5cdFwidGlwXCI6IFwiXzNVMXppMUoxc1hUNDFBenBBQTFqXCJcbn07XG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLkNvTFpsS1IxV2NNckZkOVhoRE1DIHtcXG5cXHRwb3NpdGlvbjogcmVsYXRpdmU7XFxuXFx0ZGlzcGxheTogZmxleDtcXG5cXHRqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG5cXHRhbGlnbi1pdGVtczogY2VudGVyO1xcblxcblxcdGZvbnQtZmFtaWx5OiBRdWlja3NhbmQsIGF2ZW5pciwgc2Fucy1zZXJpZjtcXG5cXG5cXHQvKiBUT0RPOiByZW1vdmUgdGhpcyBvbmNlIEkgaGF2ZSBhIHdyYXBwZXIgd2l0aCBzaXplIGRlZmF1bHRzICovXFxuXFx0d2lkdGg6IDY1cHg7XFxuXFx0aGVpZ2h0OiA2NXB4O1xcblxcblxcdGZvbnQtc2l6ZTogMTEwJTtcXG5cXHRib3JkZXItcmFkaXVzOiA1cHg7XFxufVxcblxcbi5Db0xabEtSMVdjTXJGZDlYaERNQy5DVDR1R2h3bDhzWTBMd1QzcDM5Zzpub3QoOmhvdmVyKSAuVU56UXF1V3NvSWFuT3BJTjBROUwge1xcblxcdHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lIHdhdnkgdmFyKC0tZXJyb3ItaGlnaGxpZ2h0KTtcXG5cXHR0ZXh0LXVuZGVybGluZS1vZmZzZXQ6IDRweDtcXG5cXHRjb2xvcjogdmFyKC0tZXJyb3ItaGlnaGxpZ2h0KTtcXG5cXHRmb250LXdlaWdodDogYm9sZDtcXG59XFxuXFxuLlk1RVZ0OGIwQmFYTmQ5dUx4aGZoIHtcXG5cXHRwb3NpdGlvbjogYWJzb2x1dGU7XFxuXFx0bGVmdDogMnB4O1xcblxcdGJvdHRvbTogMnB4O1xcblxcdGZvbnQtc2l6ZTogODAlO1xcblxcblxcdGFuaW1hdGlvbjogc1lyM2w5eTAzSnhPXzJBUDczanIgZWFzZS1pbi1vdXQgMXMgYWx0ZXJuYXRlLXJldmVyc2U7XFxufVxcbi5ZNUVWdDhiMEJhWE5kOXVMeGhmaC5DVDR1R2h3bDhzWTBMd1QzcDM5Zzpob3ZlciB7XFxuXFx0Y29sb3I6IHJnYigyNTUsIDIyNSwgMCk7XFxufVxcblxcbkBrZXlmcmFtZXMgc1lyM2w5eTAzSnhPXzJBUDczanIge1xcblxcdDAlIHsgY29sb3I6IHZhcigtLWtleS1jb2xvci1iYXNlKSB9XFxuXFx0MTAwJSB7IGNvbG9yOiB2YXIoLS1rZXktY29sb3ItZXh0cmVtZSkgfVxcbn1cXG5cXG5cXG4uQ29MWmxLUjFXY01yRmQ5WGhETUMuQ1Q0dUdod2w4c1kwTHdUM3AzOWc6aG92ZXIgLkRlalpYQ3Z2aEpJTFBiczlROGh0LFxcbi5Db0xabEtSMVdjTXJGZDlYaERNQy5DVDR1R2h3bDhzWTBMd1QzcDM5Zzpob3ZlciAuR2xpRTRZYndsaTlYNlROVGpEMV8ge1xcblxcdGJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6IDA7XFxuXFx0Ym9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6IDA7XFxuXFx0dGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmUgZG90dGVkIHdoaXRlIDJweDtcXG5cXHR0ZXh0LXVuZGVybGluZS1vZmZzZXQ6IDRweDtcXG59XFxuXFxuXFxuLmh1UURQM0diVExUaGJWSVA4d0ZwIHtcXG5cXHRjb2xvcjogdmFyKC0ta2V5LWNvbG9yLWJhc2UpO1xcblxcdGJhY2tncm91bmQtY29sb3I6IHZhcigtLWtleS1iZy1iYXNlKTtcXG59XFxuXFxuLlBwTW1LcEpmRWkzN0xkdzdBZUJUIHtcXG5cXHRib3JkZXItcmFkaXVzOiAxMDAlO1xcblxcdGJhY2tncm91bmQtY29sb3I6IHZhcigtLWtleS1iZy1iYXNlKTtcXG5cXHRjb2xvcjogdmFyKC0ta2V5LWNvbG9yLWJhc2UpO1xcbn1cXG5cXG4uazJFSWg4WWxGdnA5c0J1a2xTeHgge1xcblxcdHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG5cXHR0b3A6IDA7XFxuXFx0bGVmdDogNTAlO1xcblxcdHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtNTAlKTtcXG5cXHRmb250LXNpemU6IDUwJTtcXG59XFxuXFxuLkNUNHVHaHdsOHNZMEx3VDNwMzlnOmhvdmVyLCAuUHBNbUtwSmZFaTM3TGR3N0FlQlQuQ1Q0dUdod2w4c1kwTHdUM3AzOWc6aG92ZXIge1xcblxcdGJhY2tncm91bmQtY29sb3I6IHZhcigtLWhvdmVyLXNlbGVjdGlvbik7XFxuXFx0dHJhbnNpdGlvbjogMjAwbXM7XFxuXFx0ei1pbmRleDogMTtcXG59XFxuLkNvTFpsS1IxV2NNckZkOVhoRE1DLkNUNHVHaHdsOHNZMEx3VDNwMzlnOmhvdmVyIC5EZWpaWEN2dmhKSUxQYnM5UThodCwgLkNvTFpsS1IxV2NNckZkOVhoRE1DLkNUNHVHaHdsOHNZMEx3VDNwMzlnOmhvdmVyIC5HbGlFNFlid2xpOVg2VE5UakQxXyB7XFxuXFx0Y29sb3I6IHZhcigtLWtleS1jb2xvci1ob3Zlcik7XFxufVxcbi5Db0xabEtSMVdjTXJGZDlYaERNQyA+IC5EZWpaWEN2dmhKSUxQYnM5UThodCB7XFxuXFx0cGFkZGluZzogNXB4O1xcbn1cXG5cXG5bZGF0YS1zaW1wbGU9XFxcInRydWVcXFwiXSB7IGZvbnQtc2l6ZTogMTQwJTsgfVxcbltkYXRhLWxvbmc9XFxcInRydWVcXFwiXSB7IGZvbnQtc2l6ZTogNjAlOyB9XFxuXFxuLkFwSERKRkpHWVVhR1Rnek1lSUtaOm5vdChbZGF0YS1pcy1yb290PVxcXCJ0cnVlXFxcIl0pOjpiZWZvcmUgeyBjb250ZW50OiAnKCc7IG9wYWNpdHk6IDAuNDsgZm9udC13ZWlnaHQ6IGJvbGQ7IG1hcmdpbjogMnB4OyB9XFxuLkFwSERKRkpHWVVhR1Rnek1lSUtaOm5vdChbZGF0YS1pcy1yb290PVxcXCJ0cnVlXFxcIl0pOjphZnRlciB7IGNvbnRlbnQ6ICcpJzsgb3BhY2l0eTogMC40OyBmb250LXdlaWdodDogYm9sZDsgbWFyZ2luOiAycHg7IH1cXG4uQXBIREpGSkdZVWFHVGd6TWVJS1o6bm90KFtkYXRhLWlzLXJvb3Q9XFxcInRydWVcXFwiXSkgLm1MejYzN0F0bjBqWlhleTZSeDR2Om5vdCg6bGFzdC1jaGlsZCk6OmFmdGVyIHsgY29udGVudDogJywnOyB9XFxuXFxuLkRlalpYQ3Z2aEpJTFBiczlROGh0IHtcXG5cXHRjdXJzb3I6IGRlZmF1bHQ7XFxuXFx0cGFkZGluZzogMHB4IDRweDtcXG5cXHRtYXJnaW4tbGVmdDogLTJweDtcXG5cXHRtYXJnaW4tcmlnaHQ6IC0ycHg7XFxufVxcblxcbi5DVDR1R2h3bDhzWTBMd1QzcDM5ZyAuRGVqWlhDdnZoSklMUGJzOVE4aHQge1xcblxcdGN1cnNvcjogcG9pbnRlcjtcXG5cXHRkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuXFx0Ym94LXNpemluZzogY29udGVudC1ib3g7XFxuXFx0bWluLXdpZHRoOiAwLjVlbTtcXG5cXHR0ZXh0LWFsaWduOiBjZW50ZXI7XFxuXFx0Ym9yZGVyLXJhZGl1czogNHB4O1xcbn1cXG4uQ1Q0dUdod2w4c1kwTHdUM3AzOWcgLkRlalpYQ3Z2aEpJTFBiczlROGh0OmhvdmVyIHtcXG5cXHRiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZSAhaW1wb3J0YW50O1xcblxcdGNvbG9yOiB2YXIoLS1ob3Zlci1zZWxlY3Rpb24pICFpbXBvcnRhbnQ7XFxuXFx0Ym9yZGVyLXJhZGl1czogNHB4ICFpbXBvcnRhbnQ7XFxufVxcblxcbi5EZWpaWEN2dmhKSUxQYnM5UThodCAqIHtcXG5cXHRwb2ludGVyLWV2ZW50czogbm9uZTtcXG59XFxuXFxuLkdsaUU0WWJ3bGk5WDZUTlRqRDFfIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogMDtcXG4gIGxlZnQ6IDA7XFxuICBmb250LXNpemU6IDEwcHg7XFxuICBwYWRkaW5nOiAycHg7XFxuICBvcGFjaXR5OiAwLjY1O1xcbn1cXG5cXG4uR2xpRTRZYndsaTlYNlROVGpEMV86aG92ZXIge1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgY29sb3I6IHZhcigtLWhvdmVyLXNlbGVjdGlvbikgIWltcG9ydGFudDtcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWtleS1iZy1ob3Zlcik7XFxuICBib3JkZXItcmFkaXVzOiA1cHggMDtcXG4gIG9wYWNpdHk6IDE7XFxufVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9LZXlib2FyZC9LZXlzL3N0eWxlcy5tb2R1bGUuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0NBQ0Msa0JBQWtCO0NBQ2xCLGFBQWE7Q0FDYix1QkFBdUI7Q0FDdkIsbUJBQW1COztDQUVuQiwwQ0FBMEM7O0NBRTFDLCtEQUErRDtDQUMvRCxXQUFXO0NBQ1gsWUFBWTs7Q0FFWixlQUFlO0NBQ2Ysa0JBQWtCO0FBQ25COztBQUVBO0NBQ0Msc0RBQXNEO0NBQ3RELDBCQUEwQjtDQUMxQiw2QkFBNkI7Q0FDN0IsaUJBQWlCO0FBQ2xCOztBQUVBO0NBQ0Msa0JBQWtCO0NBQ2xCLFNBQVM7Q0FDVCxXQUFXO0NBQ1gsY0FBYzs7Q0FFZCxnRUFBaUQ7QUFDbEQ7QUFDQTtDQUNDLHVCQUF1QjtBQUN4Qjs7QUFFQTtDQUNDLEtBQUssNkJBQTZCO0NBQ2xDLE9BQU8sZ0NBQWdDO0FBQ3hDOzs7QUFHQTs7Q0FFQyw0QkFBNEI7Q0FDNUIsNkJBQTZCO0NBQzdCLDJDQUEyQztDQUMzQywwQkFBMEI7QUFDM0I7OztBQUdBO0NBQ0MsNEJBQTRCO0NBQzVCLG9DQUFvQztBQUNyQzs7QUFFQTtDQUNDLG1CQUFtQjtDQUNuQixvQ0FBb0M7Q0FDcEMsNEJBQTRCO0FBQzdCOztBQUVBO0NBQ0Msa0JBQWtCO0NBQ2xCLE1BQU07Q0FDTixTQUFTO0NBQ1QsMkJBQTJCO0NBQzNCLGNBQWM7QUFDZjs7QUFFQTtDQUNDLHdDQUF3QztDQUN4QyxpQkFBaUI7Q0FDakIsVUFBVTtBQUNYO0FBQ0E7Q0FDQyw2QkFBNkI7QUFDOUI7QUFDQTtDQUNDLFlBQVk7QUFDYjs7QUFFQSx1QkFBdUIsZUFBZSxFQUFFO0FBQ3hDLHFCQUFxQixjQUFjLEVBQUU7O0FBRXJDLDJEQUE2QyxZQUFZLEVBQUUsWUFBWSxFQUFFLGlCQUFpQixFQUFFLFdBQVcsRUFBRTtBQUN6RywwREFBNEMsWUFBWSxFQUFFLFlBQVksRUFBRSxpQkFBaUIsRUFBRSxXQUFXLEVBQUU7QUFDeEcsaUdBQW9FLFlBQVksRUFBRTs7QUFFbEY7Q0FDQyxlQUFlO0NBQ2YsZ0JBQWdCO0NBQ2hCLGlCQUFpQjtDQUNqQixrQkFBa0I7QUFDbkI7O0FBRUE7Q0FDQyxlQUFlO0NBQ2YscUJBQXFCO0NBQ3JCLHVCQUF1QjtDQUN2QixnQkFBZ0I7Q0FDaEIsa0JBQWtCO0NBQ2xCLGtCQUFrQjtBQUNuQjtBQUNBO0NBQ0Msa0NBQWtDO0NBQ2xDLHdDQUF3QztDQUN4Qyw2QkFBNkI7QUFDOUI7O0FBRUE7Q0FDQyxvQkFBb0I7QUFDckI7O0FBRUE7RUFDRSxrQkFBa0I7RUFDbEIsTUFBTTtFQUNOLE9BQU87RUFDUCxlQUFlO0VBQ2YsWUFBWTtFQUNaLGFBQWE7QUFDZjs7QUFFQTtFQUNFLGVBQWU7RUFDZix3Q0FBd0M7RUFDeEMscUNBQXFDO0VBQ3JDLG9CQUFvQjtFQUNwQixVQUFVO0FBQ1pcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLmtleSB7XFxuXFx0cG9zaXRpb246IHJlbGF0aXZlO1xcblxcdGRpc3BsYXk6IGZsZXg7XFxuXFx0anVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuXFx0YWxpZ24taXRlbXM6IGNlbnRlcjtcXG5cXG5cXHRmb250LWZhbWlseTogUXVpY2tzYW5kLCBhdmVuaXIsIHNhbnMtc2VyaWY7XFxuXFxuXFx0LyogVE9ETzogcmVtb3ZlIHRoaXMgb25jZSBJIGhhdmUgYSB3cmFwcGVyIHdpdGggc2l6ZSBkZWZhdWx0cyAqL1xcblxcdHdpZHRoOiA2NXB4O1xcblxcdGhlaWdodDogNjVweDtcXG5cXG5cXHRmb250LXNpemU6IDExMCU7XFxuXFx0Ym9yZGVyLXJhZGl1czogNXB4O1xcbn1cXG5cXG4ua2V5LnNlbGVjdGFibGU6bm90KDpob3ZlcikgLm1pc3NpbmdWYWx1ZSB7XFxuXFx0dGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmUgd2F2eSB2YXIoLS1lcnJvci1oaWdobGlnaHQpO1xcblxcdHRleHQtdW5kZXJsaW5lLW9mZnNldDogNHB4O1xcblxcdGNvbG9yOiB2YXIoLS1lcnJvci1oaWdobGlnaHQpO1xcblxcdGZvbnQtd2VpZ2h0OiBib2xkO1xcbn1cXG5cXG4ubWlzc2luZyB7XFxuXFx0cG9zaXRpb246IGFic29sdXRlO1xcblxcdGxlZnQ6IDJweDtcXG5cXHRib3R0b206IDJweDtcXG5cXHRmb250LXNpemU6IDgwJTtcXG5cXG5cXHRhbmltYXRpb246IHB1bHNlIGVhc2UtaW4tb3V0IDFzIGFsdGVybmF0ZS1yZXZlcnNlO1xcbn1cXG4ubWlzc2luZy5zZWxlY3RhYmxlOmhvdmVyIHtcXG5cXHRjb2xvcjogcmdiKDI1NSwgMjI1LCAwKTtcXG59XFxuXFxuQGtleWZyYW1lcyBwdWxzZSB7XFxuXFx0MCUgeyBjb2xvcjogdmFyKC0ta2V5LWNvbG9yLWJhc2UpIH1cXG5cXHQxMDAlIHsgY29sb3I6IHZhcigtLWtleS1jb2xvci1leHRyZW1lKSB9XFxufVxcblxcblxcbi5rZXkuc2VsZWN0YWJsZTpob3ZlciAuY29kZSxcXG4ua2V5LnNlbGVjdGFibGU6aG92ZXIgLmJlaGF2aW91ci1iaW5kaW5nIHtcXG5cXHRib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiAwO1xcblxcdGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiAwO1xcblxcdHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lIGRvdHRlZCB3aGl0ZSAycHg7XFxuXFx0dGV4dC11bmRlcmxpbmUtb2Zmc2V0OiA0cHg7XFxufVxcblxcblxcbi5rZXlEZWZhdWx0VGhlbWUge1xcblxcdGNvbG9yOiB2YXIoLS1rZXktY29sb3ItYmFzZSk7XFxuXFx0YmFja2dyb3VuZC1jb2xvcjogdmFyKC0ta2V5LWJnLWJhc2UpO1xcbn1cXG5cXG4uZW5jb2RlciB7XFxuXFx0Ym9yZGVyLXJhZGl1czogMTAwJTtcXG5cXHRiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1rZXktYmctYmFzZSk7XFxuXFx0Y29sb3I6IHZhcigtLWtleS1jb2xvci1iYXNlKTtcXG59XFxuXFxuLmVuY29kZXJEaXJlY3Rpb24ge1xcblxcdHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG5cXHR0b3A6IDA7XFxuXFx0bGVmdDogNTAlO1xcblxcdHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtNTAlKTtcXG5cXHRmb250LXNpemU6IDUwJTtcXG59XFxuXFxuLnNlbGVjdGFibGU6aG92ZXIsIC5lbmNvZGVyLnNlbGVjdGFibGU6aG92ZXIge1xcblxcdGJhY2tncm91bmQtY29sb3I6IHZhcigtLWhvdmVyLXNlbGVjdGlvbik7XFxuXFx0dHJhbnNpdGlvbjogMjAwbXM7XFxuXFx0ei1pbmRleDogMTtcXG59XFxuLmtleS5zZWxlY3RhYmxlOmhvdmVyIC5jb2RlLCAua2V5LnNlbGVjdGFibGU6aG92ZXIgLmJlaGF2aW91ci1iaW5kaW5nIHtcXG5cXHRjb2xvcjogdmFyKC0ta2V5LWNvbG9yLWhvdmVyKTtcXG59XFxuLmtleSA+IC5jb2RlIHtcXG5cXHRwYWRkaW5nOiA1cHg7XFxufVxcblxcbltkYXRhLXNpbXBsZT1cXFwidHJ1ZVxcXCJdIHsgZm9udC1zaXplOiAxNDAlOyB9XFxuW2RhdGEtbG9uZz1cXFwidHJ1ZVxcXCJdIHsgZm9udC1zaXplOiA2MCU7IH1cXG5cXG4ucGFyYW1zOm5vdChbZGF0YS1pcy1yb290PVxcXCJ0cnVlXFxcIl0pOjpiZWZvcmUgeyBjb250ZW50OiAnKCc7IG9wYWNpdHk6IDAuNDsgZm9udC13ZWlnaHQ6IGJvbGQ7IG1hcmdpbjogMnB4OyB9XFxuLnBhcmFtczpub3QoW2RhdGEtaXMtcm9vdD1cXFwidHJ1ZVxcXCJdKTo6YWZ0ZXIgeyBjb250ZW50OiAnKSc7IG9wYWNpdHk6IDAuNDsgZm9udC13ZWlnaHQ6IGJvbGQ7IG1hcmdpbjogMnB4OyB9XFxuLnBhcmFtczpub3QoW2RhdGEtaXMtcm9vdD1cXFwidHJ1ZVxcXCJdKSAucGFyYW06bm90KDpsYXN0LWNoaWxkKTo6YWZ0ZXIgeyBjb250ZW50OiAnLCc7IH1cXG5cXG4uY29kZSB7XFxuXFx0Y3Vyc29yOiBkZWZhdWx0O1xcblxcdHBhZGRpbmc6IDBweCA0cHg7XFxuXFx0bWFyZ2luLWxlZnQ6IC0ycHg7XFxuXFx0bWFyZ2luLXJpZ2h0OiAtMnB4O1xcbn1cXG5cXG4uc2VsZWN0YWJsZSAuY29kZSB7XFxuXFx0Y3Vyc29yOiBwb2ludGVyO1xcblxcdGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG5cXHRib3gtc2l6aW5nOiBjb250ZW50LWJveDtcXG5cXHRtaW4td2lkdGg6IDAuNWVtO1xcblxcdHRleHQtYWxpZ246IGNlbnRlcjtcXG5cXHRib3JkZXItcmFkaXVzOiA0cHg7XFxufVxcbi5zZWxlY3RhYmxlIC5jb2RlOmhvdmVyIHtcXG5cXHRiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZSAhaW1wb3J0YW50O1xcblxcdGNvbG9yOiB2YXIoLS1ob3Zlci1zZWxlY3Rpb24pICFpbXBvcnRhbnQ7XFxuXFx0Ym9yZGVyLXJhZGl1czogNHB4ICFpbXBvcnRhbnQ7XFxufVxcblxcbi5jb2RlICoge1xcblxcdHBvaW50ZXItZXZlbnRzOiBub25lO1xcbn1cXG5cXG4uYmVoYXZpb3VyLWJpbmRpbmcge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgdG9wOiAwO1xcbiAgbGVmdDogMDtcXG4gIGZvbnQtc2l6ZTogMTBweDtcXG4gIHBhZGRpbmc6IDJweDtcXG4gIG9wYWNpdHk6IDAuNjU7XFxufVxcblxcbi5iZWhhdmlvdXItYmluZGluZzpob3ZlciB7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBjb2xvcjogdmFyKC0taG92ZXItc2VsZWN0aW9uKSAhaW1wb3J0YW50O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0ta2V5LWJnLWhvdmVyKTtcXG4gIGJvcmRlci1yYWRpdXM6IDVweCAwO1xcbiAgb3BhY2l0eTogMTtcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5sb2NhbHMgPSB7XG5cdFwia2V5XCI6IFwiQ29MWmxLUjFXY01yRmQ5WGhETUNcIixcblx0XCJzZWxlY3RhYmxlXCI6IFwiQ1Q0dUdod2w4c1kwTHdUM3AzOWdcIixcblx0XCJtaXNzaW5nVmFsdWVcIjogXCJVTnpRcXVXc29JYW5PcElOMFE5TFwiLFxuXHRcIm1pc3NpbmdcIjogXCJZNUVWdDhiMEJhWE5kOXVMeGhmaFwiLFxuXHRcInB1bHNlXCI6IFwic1lyM2w5eTAzSnhPXzJBUDczanJcIixcblx0XCJjb2RlXCI6IFwiRGVqWlhDdnZoSklMUGJzOVE4aHRcIixcblx0XCJiZWhhdmlvdXItYmluZGluZ1wiOiBcIkdsaUU0WWJ3bGk5WDZUTlRqRDFfXCIsXG5cdFwia2V5RGVmYXVsdFRoZW1lXCI6IFwiaHVRRFAzR2JUTFRoYlZJUDh3RnBcIixcblx0XCJlbmNvZGVyXCI6IFwiUHBNbUtwSmZFaTM3TGR3N0FlQlRcIixcblx0XCJlbmNvZGVyRGlyZWN0aW9uXCI6IFwiazJFSWg4WWxGdnA5c0J1a2xTeHhcIixcblx0XCJwYXJhbXNcIjogXCJBcEhESkZKR1lVYUdUZ3pNZUlLWlwiLFxuXHRcInBhcmFtXCI6IFwibUx6NjM3QXRuMGpaWGV5NlJ4NHZcIlxufTtcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIubTh5dHNmWV9NV1k5QUlpaVQzS0kge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgcG9pbnRlci1ldmVudHM6IG5vbmU7XFxuICB6LWluZGV4OiAyO1xcbn1cXG4ubTh5dHNmWV9NV1k5QUlpaVQzS0kgPiAqIHtcXG4gIHBvaW50ZXItZXZlbnRzOiBhbGw7XFxufVxcblxcbi5tOHl0c2ZZX01XWTlBSWlpVDNLSSB1bCB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIGxpc3Qtc3R5bGUtdHlwZTogbm9uZTtcXG4gIGdhcDogNHB4O1xcbiAgbWFyZ2luOiAwO1xcbiAgcGFkZGluZzogMDtcXG59XFxuLm04eXRzZllfTVdZOUFJaWlUM0tJIGxpIHtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjAxLCAyMDEsIDIwMSwgMC41KTtcXG4gIGNvbG9yOiBkYXJrZ3JheTtcXG4gIGJvcmRlci1yYWRpdXM6IDE1cHg7XFxuICBoZWlnaHQ6IDMwcHg7XFxuICBwYWRkaW5nOiAwcHg7XFxuICBtYXJnaW46IDAgMnB4O1xcbiAgd2lkdGg6IG1heC1jb250ZW50O1xcbn1cXG4ubTh5dHNmWV9NV1k5QUlpaVQzS0kgbGk6aG92ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSg2MCwgMTc5LCAxMTMsIDAuODUpO1xcbiAgY29sb3I6IHdoaXRlO1xcbiAgcGFkZGluZy1yaWdodDogMzVweDtcXG59XFxuLm04eXRzZllfTVdZOUFJaWlUM0tJIGxpLnJ6WFZhaHptbUVPWG1qWGk4b2xnIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYig2MCwgMTc5LCAxMTMpO1xcbiAgY29sb3I6IHdoaXRlO1xcbn1cXG5cXG4ubTh5dHNmWV9NV1k5QUlpaVQzS0kgbGkgKiB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxufVxcbi5tOHl0c2ZZX01XWTlBSWlpVDNLSSBsaSAuTF9HSkVxbkZiYXlfWnpNMFloN0Ige1xcbiAgb3ZlcmZsb3c6IGF1dG87XFxuICB3aWR0aDogMzBweDtcXG4gIGhlaWdodDogMzBweDtcXG4gIGxpbmUtaGVpZ2h0OiAzMHB4O1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbn1cXG4ubTh5dHNmWV9NV1k5QUlpaVQzS0kgbGkgLmZrWlp3ZWdSRXl1X1drOVB3NnM3IHtcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxuICB3aWR0aDogMDtcXG4gIGhlaWdodDogMzBweDtcXG4gIGxpbmUtaGVpZ2h0OiAzMHB4O1xcbiAgcGFkZGluZzogMDtcXG4gIGZvbnQtdmFyaWFudDogc21hbGwtY2FwcztcXG59XFxuXFxuLm04eXRzZllfTVdZOUFJaWlUM0tJIHVsIGxpOmhvdmVyIC5ma1pad2VnUkV5dV9XazlQdzZzNyxcXG4ubTh5dHNmWV9NV1k5QUlpaVQzS0lbZGF0YS1yZW5hbWluZz1cXFwidHJ1ZVxcXCJdIGxpLnJ6WFZhaHptbUVPWG1qWGk4b2xnIC5ma1pad2VnUkV5dV9XazlQdzZzNyB7XFxuICB0cmFuc2l0aW9uOiAuMTVzIGVhc2UtaW47XFxuICB3aWR0aDogYXV0bztcXG4gIHBhZGRpbmc6IDAgMCAwIDEwcHg7XFxufVxcblxcbi5tOHl0c2ZZX01XWTlBSWlpVDNLSSBidXR0b24ge1xcbiAgd2lkdGg6IDMwcHg7XFxuICBoZWlnaHQ6IDMwcHg7XFxuICBsaW5lLWhlaWdodDogMzBweDtcXG4gIHBhZGRpbmc6IDA7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICBib3JkZXItcmFkaXVzOiAxNXB4O1xcbn1cXG5cXG4ubTh5dHNmWV9NV1k5QUlpaVQzS0kgaW5wdXQuZmtaWndlZ1JFeXVfV2s5UHc2czcge1xcbiAgdmVydGljYWwtYWxpZ246IHRvcDtcXG4gIHdpZHRoOiAxMDBweDtcXG4gIGJvcmRlcjogbm9uZTtcXG4gIG91dGxpbmU6IG5vbmU7XFxuICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcXG4gIGNvbG9yOiB3aGl0ZTtcXG59XFxuXFxuLm04eXRzZllfTVdZOUFJaWlUM0tJIC5OYkZnWnhueUFGOUVJang4bmNQTSB7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICByaWdodDogMTBweDtcXG4gIHZpc2liaWxpdHk6IGhpZGRlbjtcXG5cXG4gIGhlaWdodDogMzBweDtcXG4gIGxpbmUtaGVpZ2h0OiAzMHB4O1xcbn1cXG4ubTh5dHNmWV9NV1k5QUlpaVQzS0kgbGk6aG92ZXIgLk5iRmdaeG55QUY5RUlqeDhuY1BNIHtcXG4gIHZpc2liaWxpdHk6IHZpc2libGU7XFxufVxcblxcbi5tOHl0c2ZZX01XWTlBSWlpVDNLSSBsaS5yelhWYWh6bW1FT1htalhpOG9sZyAuZmtaWndlZ1JFeXVfV2s5UHc2czcge1xcbiAgY3Vyc29yOiB0ZXh0O1xcbn1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvS2V5Ym9hcmQvTGF5ZXJzL2xheWVyLXNlbGVjdG9yLm1vZHVsZS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSxrQkFBa0I7RUFDbEIsb0JBQW9CO0VBQ3BCLFVBQVU7QUFDWjtBQUNBO0VBQ0UsbUJBQW1CO0FBQ3JCOztBQUVBO0VBQ0UsYUFBYTtFQUNiLHNCQUFzQjtFQUN0QixxQkFBcUI7RUFDckIsUUFBUTtFQUNSLFNBQVM7RUFDVCxVQUFVO0FBQ1o7QUFDQTtFQUNFLGVBQWU7RUFDZixrQkFBa0I7RUFDbEIsMENBQTBDO0VBQzFDLGVBQWU7RUFDZixtQkFBbUI7RUFDbkIsWUFBWTtFQUNaLFlBQVk7RUFDWixhQUFhO0VBQ2Isa0JBQWtCO0FBQ3BCO0FBQ0E7RUFDRSwwQ0FBMEM7RUFDMUMsWUFBWTtFQUNaLG1CQUFtQjtBQUNyQjtBQUNBO0VBQ0UsbUNBQW1DO0VBQ25DLFlBQVk7QUFDZDs7QUFFQTtFQUNFLHFCQUFxQjtBQUN2QjtBQUNBO0VBQ0UsY0FBYztFQUNkLFdBQVc7RUFDWCxZQUFZO0VBQ1osaUJBQWlCO0VBQ2pCLGtCQUFrQjtBQUNwQjtBQUNBO0VBQ0UsZ0JBQWdCO0VBQ2hCLFFBQVE7RUFDUixZQUFZO0VBQ1osaUJBQWlCO0VBQ2pCLFVBQVU7RUFDVix3QkFBd0I7QUFDMUI7O0FBRUE7O0VBRUUsd0JBQXdCO0VBQ3hCLFdBQVc7RUFDWCxtQkFBbUI7QUFDckI7O0FBRUE7RUFDRSxXQUFXO0VBQ1gsWUFBWTtFQUNaLGlCQUFpQjtFQUNqQixVQUFVO0VBQ1Ysa0JBQWtCO0VBQ2xCLG1CQUFtQjtBQUNyQjs7QUFFQTtFQUNFLG1CQUFtQjtFQUNuQixZQUFZO0VBQ1osWUFBWTtFQUNaLGFBQWE7RUFDYix1QkFBdUI7RUFDdkIsWUFBWTtBQUNkOztBQUVBO0VBQ0UsZUFBZTtFQUNmLGtCQUFrQjtFQUNsQixXQUFXO0VBQ1gsa0JBQWtCOztFQUVsQixZQUFZO0VBQ1osaUJBQWlCO0FBQ25CO0FBQ0E7RUFDRSxtQkFBbUI7QUFDckI7O0FBRUE7RUFDRSxZQUFZO0FBQ2RcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLmxheWVyU2VsZWN0b3Ige1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgcG9pbnRlci1ldmVudHM6IG5vbmU7XFxuICB6LWluZGV4OiAyO1xcbn1cXG4ubGF5ZXJTZWxlY3RvciA+ICoge1xcbiAgcG9pbnRlci1ldmVudHM6IGFsbDtcXG59XFxuXFxuLmxheWVyU2VsZWN0b3IgdWwge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICBsaXN0LXN0eWxlLXR5cGU6IG5vbmU7XFxuICBnYXA6IDRweDtcXG4gIG1hcmdpbjogMDtcXG4gIHBhZGRpbmc6IDA7XFxufVxcbi5sYXllclNlbGVjdG9yIGxpIHtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjAxLCAyMDEsIDIwMSwgMC41KTtcXG4gIGNvbG9yOiBkYXJrZ3JheTtcXG4gIGJvcmRlci1yYWRpdXM6IDE1cHg7XFxuICBoZWlnaHQ6IDMwcHg7XFxuICBwYWRkaW5nOiAwcHg7XFxuICBtYXJnaW46IDAgMnB4O1xcbiAgd2lkdGg6IG1heC1jb250ZW50O1xcbn1cXG4ubGF5ZXJTZWxlY3RvciBsaTpob3ZlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDYwLCAxNzksIDExMywgMC44NSk7XFxuICBjb2xvcjogd2hpdGU7XFxuICBwYWRkaW5nLXJpZ2h0OiAzNXB4O1xcbn1cXG4ubGF5ZXJTZWxlY3RvciBsaS5hY3RpdmUge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDYwLCAxNzksIDExMyk7XFxuICBjb2xvcjogd2hpdGU7XFxufVxcblxcbi5sYXllclNlbGVjdG9yIGxpICoge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbn1cXG4ubGF5ZXJTZWxlY3RvciBsaSAuaW5kZXgge1xcbiAgb3ZlcmZsb3c6IGF1dG87XFxuICB3aWR0aDogMzBweDtcXG4gIGhlaWdodDogMzBweDtcXG4gIGxpbmUtaGVpZ2h0OiAzMHB4O1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbn1cXG4ubGF5ZXJTZWxlY3RvciBsaSAubmFtZSB7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgd2lkdGg6IDA7XFxuICBoZWlnaHQ6IDMwcHg7XFxuICBsaW5lLWhlaWdodDogMzBweDtcXG4gIHBhZGRpbmc6IDA7XFxuICBmb250LXZhcmlhbnQ6IHNtYWxsLWNhcHM7XFxufVxcblxcbi5sYXllclNlbGVjdG9yIHVsIGxpOmhvdmVyIC5uYW1lLFxcbi5sYXllclNlbGVjdG9yW2RhdGEtcmVuYW1pbmc9XFxcInRydWVcXFwiXSBsaS5hY3RpdmUgLm5hbWUge1xcbiAgdHJhbnNpdGlvbjogLjE1cyBlYXNlLWluO1xcbiAgd2lkdGg6IGF1dG87XFxuICBwYWRkaW5nOiAwIDAgMCAxMHB4O1xcbn1cXG5cXG4ubGF5ZXJTZWxlY3RvciBidXR0b24ge1xcbiAgd2lkdGg6IDMwcHg7XFxuICBoZWlnaHQ6IDMwcHg7XFxuICBsaW5lLWhlaWdodDogMzBweDtcXG4gIHBhZGRpbmc6IDA7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICBib3JkZXItcmFkaXVzOiAxNXB4O1xcbn1cXG5cXG4ubGF5ZXJTZWxlY3RvciBpbnB1dC5uYW1lIHtcXG4gIHZlcnRpY2FsLWFsaWduOiB0b3A7XFxuICB3aWR0aDogMTAwcHg7XFxuICBib3JkZXI6IG5vbmU7XFxuICBvdXRsaW5lOiBub25lO1xcbiAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XFxuICBjb2xvcjogd2hpdGU7XFxufVxcblxcbi5sYXllclNlbGVjdG9yIC5kZWxldGUge1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgcmlnaHQ6IDEwcHg7XFxuICB2aXNpYmlsaXR5OiBoaWRkZW47XFxuXFxuICBoZWlnaHQ6IDMwcHg7XFxuICBsaW5lLWhlaWdodDogMzBweDtcXG59XFxuLmxheWVyU2VsZWN0b3IgbGk6aG92ZXIgLmRlbGV0ZSB7XFxuICB2aXNpYmlsaXR5OiB2aXNpYmxlO1xcbn1cXG5cXG4ubGF5ZXJTZWxlY3RvciBsaS5hY3RpdmUgLm5hbWUge1xcbiAgY3Vyc29yOiB0ZXh0O1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmxvY2FscyA9IHtcblx0XCJsYXllclNlbGVjdG9yXCI6IFwibTh5dHNmWV9NV1k5QUlpaVQzS0lcIixcblx0XCJhY3RpdmVcIjogXCJyelhWYWh6bW1FT1htalhpOG9sZ1wiLFxuXHRcImluZGV4XCI6IFwiTF9HSkVxbkZiYXlfWnpNMFloN0JcIixcblx0XCJuYW1lXCI6IFwiZmtaWndlZ1JFeXVfV2s5UHc2czdcIixcblx0XCJkZWxldGVcIjogXCJOYkZnWnhueUFGOUVJang4bmNQTVwiXG59O1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5Fd3ZWTlk2dmxmN0h3WW1YVGJ6aSB7XFxuICBtYXJnaW46IDEwcHggMDtcXG4gIGRpc3BsYXk6IGZsZXg7XFxufVxcblxcbi5Fd3ZWTlk2dmxmN0h3WW1YVGJ6aSBsYWJlbCB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICB3aWR0aDogMTIwcHg7XFxuICB0ZXh0LWFsaWduOiByaWdodDtcXG4gIG1hcmdpbi1yaWdodDogMTBweDtcXG59XFxuXFxuLnVoaUNfN1R6TjdlQ05ibTVDNmE4W2RhdGEtc2Vuc29yLWNvdW50PVxcXCIwXFxcIl0ge1xcbiAgZGlzcGxheTogbm9uZTtcXG59XFxuXFxuLnJhTmtoeG1HVHF0S1FJOVgyZ1ZBOm5vdCgueTd5NnlwTXdtU2FmUUtndDdvQncpIHtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuLnJhTmtoeG1HVHF0S1FJOVgyZ1ZBID4gKiB7XFxuICBwb2ludGVyLWV2ZW50czogbm9uZTtcXG59XFxuLnJhTmtoeG1HVHF0S1FJOVgyZ1ZBOmhvdmVyLCAueTd5NnlwTXdtU2FmUUtndDdvQncge1xcbiAgY29sb3I6IHZhcigtLWtleS1jb2xvci1ob3Zlcik7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1zZWxlY3Rpb24pO1xcbn1cXG4ucmFOa2h4bUdUcXRLUUk5WDJnVkE6aG92ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0taG92ZXItc2VsZWN0aW9uKTtcXG59XFxuXFxuLnNhaE1TTklHXzk0SG45dEVFWjhxIHtcXG4gIG1heC13aWR0aDogODB2dztcXG4gIG92ZXJmbG93LXg6IHNjcm9sbDtcXG59XCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL0tleWJvYXJkL0xheWVycy9zdHlsZS5tb2R1bGUuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0VBQ0UsY0FBYztFQUNkLGFBQWE7QUFDZjs7QUFFQTtFQUNFLHFCQUFxQjtFQUNyQixZQUFZO0VBQ1osaUJBQWlCO0VBQ2pCLGtCQUFrQjtBQUNwQjs7QUFFQTtFQUNFLGFBQWE7QUFDZjs7QUFFQTtFQUNFLGVBQWU7QUFDakI7QUFDQTtFQUNFLG9CQUFvQjtBQUN0QjtBQUNBO0VBQ0UsNkJBQTZCO0VBQzdCLGtDQUFrQztBQUNwQztBQUNBO0VBQ0Usd0NBQXdDO0FBQzFDOztBQUVBO0VBQ0UsZUFBZTtFQUNmLGtCQUFrQjtBQUNwQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIuZmllbGQge1xcbiAgbWFyZ2luOiAxMHB4IDA7XFxuICBkaXNwbGF5OiBmbGV4O1xcbn1cXG5cXG4uZmllbGQgbGFiZWwge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgd2lkdGg6IDEyMHB4O1xcbiAgdGV4dC1hbGlnbjogcmlnaHQ7XFxuICBtYXJnaW4tcmlnaHQ6IDEwcHg7XFxufVxcblxcbi5zZW5zb3JzW2RhdGEtc2Vuc29yLWNvdW50PVxcXCIwXFxcIl0ge1xcbiAgZGlzcGxheTogbm9uZTtcXG59XFxuXFxuLnF1aWNrQmluZEtleTpub3QoLnF1aWNrQmluZEtleUhpZ2hsaWdodCkge1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG4ucXVpY2tCaW5kS2V5ID4gKiB7XFxuICBwb2ludGVyLWV2ZW50czogbm9uZTtcXG59XFxuLnF1aWNrQmluZEtleTpob3ZlciwgLnF1aWNrQmluZEtleUhpZ2hsaWdodCB7XFxuICBjb2xvcjogdmFyKC0ta2V5LWNvbG9yLWhvdmVyKTtcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXNlbGVjdGlvbik7XFxufVxcbi5xdWlja0JpbmRLZXk6aG92ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0taG92ZXItc2VsZWN0aW9uKTtcXG59XFxuXFxuLnF1aWNrQXNzaWduRGlhbG9nIHtcXG4gIG1heC13aWR0aDogODB2dztcXG4gIG92ZXJmbG93LXg6IHNjcm9sbDtcXG59XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5sb2NhbHMgPSB7XG5cdFwiZmllbGRcIjogXCJFd3ZWTlk2dmxmN0h3WW1YVGJ6aVwiLFxuXHRcInNlbnNvcnNcIjogXCJ1aGlDXzdUek43ZUNOYm01QzZhOFwiLFxuXHRcInF1aWNrQmluZEtleVwiOiBcInJhTmtoeG1HVHF0S1FJOVgyZ1ZBXCIsXG5cdFwicXVpY2tCaW5kS2V5SGlnaGxpZ2h0XCI6IFwieTd5NnlwTXdtU2FmUUtndDdvQndcIixcblx0XCJxdWlja0Fzc2lnbkRpYWxvZ1wiOiBcInNhaE1TTklHXzk0SG45dEVFWjhxXCJcbn07XG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiXFxuLk84U0VmcUUyRXdjM2I3YzdtWV9OIHtcXG4gIHBvc2l0aW9uOmFic29sdXRlO1xcbiAgdG9wOiAtNXB4O1xcbiAgbGVmdDogMHB4O1xcbiAgd2lkdGg6IDEwMCU7XFxuICAvKiBib3JkZXI6IDFweCBzb2xpZCByZWQ7ICovXFxuICAvKiBwYWRkaW5nOiA1cHg7ICovXFxuICAvKiBvcGFjaXR5OiAwLjU7ICovXFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC13cmFwOiB3cmFwO1xcbn1cXG5cXG4uczlPNTZMV1pCS0hjdFZaNGE2ZmEge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgd2lkdGg6IDM3LjVweDtcXG4gIGhlaWdodDogNjVweDtcXG4gIG1hcmdpbjogMDtcXG59XFxuXFxuLnM5TzU2TFdaQktIY3RWWjRhNmZhW2RhdGEtaXMtY29udHJvbD1cXFwidHJ1ZVxcXCJdIHtcXG4gIHdpZHRoOiA0NTBweDtcXG4gIGhlaWdodDogMTVweDtcXG59XFxuXFxuLk5Od1ptdXJKV2xJZnZiM0JXbE5YIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIHdpZHRoOiA0NTBweDtcXG4gIGhlaWdodDogMTBweDtcXG59XFxuLk5Od1ptdXJKV2xJZnZiM0JXbE5YLndWWVZmRFZzQ0tGTmpRY0dLSVZJOjphZnRlciB7XFxuICBjb250ZW50OiAnJztcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgdG9wOiA1MCU7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgwLCAtNTAlKTtcXG4gIHdpZHRoOiA0NTBweDtcXG4gIGhlaWdodDogNHB4O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tc2VsZWN0aW9uKTtcXG59XFxuLk1EZnk2UmNHQmxtOFdfQ2hSaHlQW2RhdGEtZXh0ZW5kPVxcXCIxXFxcIl0geyB3aWR0aDogY2FsYygzNy41cHggKyAxICogNzVweCk7IH1cXG4uTURmeTZSY0dCbG04V19DaFJoeVBbZGF0YS1leHRlbmQ9XFxcIjJcXFwiXSB7IHdpZHRoOiBjYWxjKDM3LjVweCArIDIgKiA3NXB4KTsgfVxcbi5NRGZ5NlJjR0JsbThXX0NoUmh5UFtkYXRhLWV4dGVuZD1cXFwiM1xcXCJdIHsgd2lkdGg6IGNhbGMoMzcuNXB4ICsgMyAqIDc1cHgpOyB9XFxuLk1EZnk2UmNHQmxtOFdfQ2hSaHlQW2RhdGEtZXh0ZW5kPVxcXCI0XFxcIl0geyB3aWR0aDogY2FsYygzNy41cHggKyA0ICogNzVweCk7IH1cXG4uTURmeTZSY0dCbG04V19DaFJoeVBbZGF0YS1leHRlbmQ9XFxcIjVcXFwiXSB7IHdpZHRoOiBjYWxjKDM3LjVweCArIDUgKiA3NXB4KTsgfVxcblxcbi8qIC5kcm9wVGFyZ2V0SGFsZiB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBibHVlO1xcbiAgb3BhY2l0eTogMC4yNTtcXG59XFxuLmRyb3BUYXJnZXRIYWxmLnNlY29uZEhhbGYge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmVkO1xcbn1cXG4uZHJvcFRhcmdldFJvdyB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBwdXJwbGU7XFxuICBvcGFjaXR5OiAwLjI1O1xcbn0gKi9cXG5cXG4ud1ZZVmZEVnNDS0ZOalFjR0tJVkkuczlPNTZMV1pCS0hjdFZaNGE2ZmE6bm90KC5NRGZ5NlJjR0JsbThXX0NoUmh5UCk6bm90KFtkYXRhLWlzLWNvbnRyb2w9XFxcInRydWVcXFwiXSk6OmJlZm9yZSxcXG4ud1ZZVmZEVnNDS0ZOalFjR0tJVkkuTURmeTZSY0dCbG04V19DaFJoeVA6bm90KFtkYXRhLWlzLWNvbnRyb2w9XFxcInRydWVcXFwiXSk6OmFmdGVyIHtcXG4gIGNvbnRlbnQ6ICcnO1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICBoZWlnaHQ6IDY1cHg7XFxuICB3aWR0aDogNHB4O1xcbiAgYm9yZGVyLXJhZGl1czogNHB4O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tc2VsZWN0aW9uKTtcXG59XFxuXFxuLkF1RkI5V2lDeW5QX29PTlloT3ZxIC53VllWZkRWc0NLRk5qUWNHS0lWSTpub3QoW2RhdGEtZHJvcC1tb2RlPVxcXCJyb3dcXFwiXSk6OmJlZm9yZSxcXG4uQXVGQjlXaUN5blBfb09OWWhPdnEgLndWWVZmRFZzQ0tGTmpRY0dLSVZJOm5vdChbZGF0YS1kcm9wLW1vZGU9XFxcInJvd1xcXCJdKTo6YWZ0ZXIge1xcbiAgIHZpc2liaWxpdHk6IGhpZGRlbjtcXG4gfVxcblxcbi5zOU81NkxXWkJLSGN0Vlo0YTZmYTpub3QoLk1EZnk2UmNHQmxtOFdfQ2hSaHlQKTpub3QoW2RhdGEtaXMtY29udHJvbD1cXFwidHJ1ZVxcXCJdKTo6YmVmb3JlIHtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIDApO1xcbn1cXG4uTURmeTZSY0dCbG04V19DaFJoeVA6bm90KFtkYXRhLWlzLWNvbnRyb2w9XFxcInRydWVcXFwiXSk6OmFmdGVyIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIGxlZnQ6IDMyLjVweDtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlKDUwJSwgMCk7XFxufVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9LZXlib2FyZC9NYWNyb3MvZHJhZy1hbmQtZHJvcC5tb2R1bGUuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCI7QUFDQTtFQUNFLGlCQUFpQjtFQUNqQixTQUFTO0VBQ1QsU0FBUztFQUNULFdBQVc7RUFDWCwyQkFBMkI7RUFDM0Isa0JBQWtCO0VBQ2xCLGtCQUFrQjtFQUNsQixhQUFhO0VBQ2IsZUFBZTtBQUNqQjs7QUFFQTtFQUNFLGtCQUFrQjtFQUNsQixhQUFhO0VBQ2IsWUFBWTtFQUNaLFNBQVM7QUFDWDs7QUFFQTtFQUNFLFlBQVk7RUFDWixZQUFZO0FBQ2Q7O0FBRUE7RUFDRSxrQkFBa0I7RUFDbEIsWUFBWTtFQUNaLFlBQVk7QUFDZDtBQUNBO0VBQ0UsV0FBVztFQUNYLGNBQWM7RUFDZCxrQkFBa0I7RUFDbEIsUUFBUTtFQUNSLDZCQUE2QjtFQUM3QixZQUFZO0VBQ1osV0FBVztFQUNYLGtDQUFrQztBQUNwQztBQUNBLHlDQUErQiw4QkFBOEIsRUFBRTtBQUMvRCx5Q0FBK0IsOEJBQThCLEVBQUU7QUFDL0QseUNBQStCLDhCQUE4QixFQUFFO0FBQy9ELHlDQUErQiw4QkFBOEIsRUFBRTtBQUMvRCx5Q0FBK0IsOEJBQThCLEVBQUU7O0FBRS9EOzs7Ozs7Ozs7O0dBVUc7O0FBRUg7O0VBRUUsV0FBVztFQUNYLGNBQWM7RUFDZCxZQUFZO0VBQ1osVUFBVTtFQUNWLGtCQUFrQjtFQUNsQixrQ0FBa0M7QUFDcEM7O0FBRUE7O0dBRUcsa0JBQWtCO0NBQ3BCOztBQUVEO0VBQ0UsNkJBQTZCO0FBQy9CO0FBQ0E7RUFDRSxrQkFBa0I7RUFDbEIsWUFBWTtFQUNaLDRCQUE0QjtBQUM5QlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJcXG4uZHJvcFRhcmdldHMge1xcbiAgcG9zaXRpb246YWJzb2x1dGU7XFxuICB0b3A6IC01cHg7XFxuICBsZWZ0OiAwcHg7XFxuICB3aWR0aDogMTAwJTtcXG4gIC8qIGJvcmRlcjogMXB4IHNvbGlkIHJlZDsgKi9cXG4gIC8qIHBhZGRpbmc6IDVweDsgKi9cXG4gIC8qIG9wYWNpdHk6IDAuNTsgKi9cXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LXdyYXA6IHdyYXA7XFxufVxcblxcbi5kcm9wVGFyZ2V0SGFsZiB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICB3aWR0aDogMzcuNXB4O1xcbiAgaGVpZ2h0OiA2NXB4O1xcbiAgbWFyZ2luOiAwO1xcbn1cXG5cXG4uZHJvcFRhcmdldEhhbGZbZGF0YS1pcy1jb250cm9sPVxcXCJ0cnVlXFxcIl0ge1xcbiAgd2lkdGg6IDQ1MHB4O1xcbiAgaGVpZ2h0OiAxNXB4O1xcbn1cXG5cXG4uZHJvcFRhcmdldFJvdyB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICB3aWR0aDogNDUwcHg7XFxuICBoZWlnaHQ6IDEwcHg7XFxufVxcbi5kcm9wVGFyZ2V0Um93LmRyb3BwYWJsZTo6YWZ0ZXIge1xcbiAgY29udGVudDogJyc7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogNTAlO1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoMCwgLTUwJSk7XFxuICB3aWR0aDogNDUwcHg7XFxuICBoZWlnaHQ6IDRweDtcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXNlbGVjdGlvbik7XFxufVxcbi5zZWNvbmRIYWxmW2RhdGEtZXh0ZW5kPVxcXCIxXFxcIl0geyB3aWR0aDogY2FsYygzNy41cHggKyAxICogNzVweCk7IH1cXG4uc2Vjb25kSGFsZltkYXRhLWV4dGVuZD1cXFwiMlxcXCJdIHsgd2lkdGg6IGNhbGMoMzcuNXB4ICsgMiAqIDc1cHgpOyB9XFxuLnNlY29uZEhhbGZbZGF0YS1leHRlbmQ9XFxcIjNcXFwiXSB7IHdpZHRoOiBjYWxjKDM3LjVweCArIDMgKiA3NXB4KTsgfVxcbi5zZWNvbmRIYWxmW2RhdGEtZXh0ZW5kPVxcXCI0XFxcIl0geyB3aWR0aDogY2FsYygzNy41cHggKyA0ICogNzVweCk7IH1cXG4uc2Vjb25kSGFsZltkYXRhLWV4dGVuZD1cXFwiNVxcXCJdIHsgd2lkdGg6IGNhbGMoMzcuNXB4ICsgNSAqIDc1cHgpOyB9XFxuXFxuLyogLmRyb3BUYXJnZXRIYWxmIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IGJsdWU7XFxuICBvcGFjaXR5OiAwLjI1O1xcbn1cXG4uZHJvcFRhcmdldEhhbGYuc2Vjb25kSGFsZiB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZWQ7XFxufVxcbi5kcm9wVGFyZ2V0Um93IHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHB1cnBsZTtcXG4gIG9wYWNpdHk6IDAuMjU7XFxufSAqL1xcblxcbi5kcm9wcGFibGUuZHJvcFRhcmdldEhhbGY6bm90KC5zZWNvbmRIYWxmKTpub3QoW2RhdGEtaXMtY29udHJvbD1cXFwidHJ1ZVxcXCJdKTo6YmVmb3JlLFxcbi5kcm9wcGFibGUuc2Vjb25kSGFsZjpub3QoW2RhdGEtaXMtY29udHJvbD1cXFwidHJ1ZVxcXCJdKTo6YWZ0ZXIge1xcbiAgY29udGVudDogJyc7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIGhlaWdodDogNjVweDtcXG4gIHdpZHRoOiA0cHg7XFxuICBib3JkZXItcmFkaXVzOiA0cHg7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1zZWxlY3Rpb24pO1xcbn1cXG5cXG4uZHJvcFJvd09ubHkgLmRyb3BwYWJsZTpub3QoW2RhdGEtZHJvcC1tb2RlPVxcXCJyb3dcXFwiXSk6OmJlZm9yZSxcXG4uZHJvcFJvd09ubHkgLmRyb3BwYWJsZTpub3QoW2RhdGEtZHJvcC1tb2RlPVxcXCJyb3dcXFwiXSk6OmFmdGVyIHtcXG4gICB2aXNpYmlsaXR5OiBoaWRkZW47XFxuIH1cXG5cXG4uZHJvcFRhcmdldEhhbGY6bm90KC5zZWNvbmRIYWxmKTpub3QoW2RhdGEtaXMtY29udHJvbD1cXFwidHJ1ZVxcXCJdKTo6YmVmb3JlIHtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIDApO1xcbn1cXG4uc2Vjb25kSGFsZjpub3QoW2RhdGEtaXMtY29udHJvbD1cXFwidHJ1ZVxcXCJdKTo6YWZ0ZXIge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgbGVmdDogMzIuNXB4O1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoNTAlLCAwKTtcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5sb2NhbHMgPSB7XG5cdFwiZHJvcFRhcmdldHNcIjogXCJPOFNFZnFFMkV3YzNiN2M3bVlfTlwiLFxuXHRcImRyb3BUYXJnZXRIYWxmXCI6IFwiczlPNTZMV1pCS0hjdFZaNGE2ZmFcIixcblx0XCJkcm9wVGFyZ2V0Um93XCI6IFwiTk53Wm11ckpXbElmdmIzQldsTlhcIixcblx0XCJkcm9wcGFibGVcIjogXCJ3VllWZkRWc0NLRk5qUWNHS0lWSVwiLFxuXHRcInNlY29uZEhhbGZcIjogXCJNRGZ5NlJjR0JsbThXX0NoUmh5UFwiLFxuXHRcImRyb3BSb3dPbmx5XCI6IFwiQXVGQjlXaUN5blBfb09OWWhPdnFcIlxufTtcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIua2M4QXUzMjdwbUlqS083YXVMWFQge1xcbiAgcGFkZGluZy1ib3R0b206IDYwcHg7XFxufVxcblxcbi5COEZwUnRWZHhidkpqd1pvVk5CNCB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgcG9zaXRpb246IGZpeGVkO1xcbiAgd2lkdGg6IDE4MHB4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIHBhZGRpbmc6IDEwcHg7XFxuICBnYXA6IDEwcHg7XFxufVxcblxcbi5VczNJaGYwQW9WYlp2RHVsUDc0USB7XFxuICB3aWR0aDogNTUwcHg7XFxuICBtYXJnaW46IDEwcHggYXV0byA0MHB4O1xcbn1cXG4uT1ZJNElrVnNWenlrMGVJQW45Tlgge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXG4gIGJvcmRlci1ib3R0b206IDJweCBzb2xpZCB2YXIoLS1rZXktYmctYmFzZSk7XFxuICBtYXJnaW46IDVweCAwO1xcbn1cXG4uT1ZJNElrVnNWenlrMGVJQW45TlggaDUge1xcbiAgbWFyZ2luOiAwO1xcbn1cXG4uUU5sU09fR1NHaFJmVUZSRV92OEUge1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgcGFkZGluZzogNXB4O1xcbiAgb3BhY2l0eTogMC42O1xcbn1cXG4uUU5sU09fR1NHaFJmVUZSRV92OEU6aG92ZXIge1xcbiAgb3BhY2l0eTogMTtcXG59XFxuLkR2ekJ3R0RIN0hzbm5JYnFhZUhpIHtcXG4gIGNvbG9yOiB2YXIoLS1kZWxldGUpO1xcbn1cXG5cXG4ubXdoUl9XN2lxSHE4MDN4TkJWMUgge1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbn1cXG4ubXdoUl9XN2lxSHE4MDN4TkJWMUggPiAqIHtcXG4gIG1hcmdpbjogNXB4O1xcbn1cXG5cXG4uVEJnVDduQjdKU1NqblRwTVFlWHAge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgd2lkdGg6IDQ1MHB4O1xcbiAgLyogYm9yZGVyOiAxcHggc29saWQgbGlnaHRncmF5OyAqL1xcbiAgbWFyZ2luOiAwIGF1dG87XFxuICBwYWRkaW5nOiA1cHg7XFxuXFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC13cmFwOiB3cmFwO1xcbn1cXG5cXG4uVEJnVDduQjdKU1NqblRwTVFlWHAgPiAqIHtcXG4gIG1hcmdpbjogNXB4O1xcbiAgd2lkdGg6IDY1cHg7XFxuICBoZWlnaHQ6IDY1cHg7XFxufVxcblxcbi5ZTUpic0x2bkVHT2JVeTRZX2k2dyB7XFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogMzBweDtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxufVxcbi5ZTUpic0x2bkVHT2JVeTRZX2k2dzpob3ZlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1ob3Zlci1zZWxlY3Rpb24pO1xcbiAgY29sb3I6IHZhcigtLWtleS1jb2xvci1ob3Zlcik7XFxufVxcbi5ZTUpic0x2bkVHT2JVeTRZX2k2dyA+IDpmaXJzdC1jaGlsZCB7XFxuICB3aWR0aDogMTAwJSAhaW1wb3J0YW50O1xcbiAgaGVpZ2h0OiAxMDAlICFpbXBvcnRhbnQ7XFxufVxcblxcbi5UQmdUN25CN0pTU2puVHBNUWVYcCBbZHJhZ2dhYmxlXSB7XFxuICBjdXJzb3I6IGdyYWI7XFxufVxcblxcbi5JNWRyYzRkQTVLcHNocDNQUGxlMSB7XFxuICB2aXNpYmlsaXR5OiBoaWRkZW47XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDBweDtcXG4gIHJpZ2h0OiAwcHg7XFxuICBmb250LXNpemU6IDgwJTtcXG5cXG4gIGNvbG9yOiB2YXIoLS1rZXktY29sb3ItaG92ZXIpO1xcbn1cXG4uSTVkcmM0ZEE1S3BzaHAzUFBsZTEgPiAqIHtcXG4gIG1hcmdpbjogMnB4O1xcbiAgb3BhY2l0eTogMC41O1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG4uVEJnVDduQjdKU1NqblRwTVFlWHAgOmhvdmVyIC5JNWRyYzRkQTVLcHNocDNQUGxlMSB7XFxuICB2aXNpYmlsaXR5OiB2aXNpYmxlO1xcbiAgei1pbmRleDogMTA7XFxufVxcblxcbi5JNWRyYzRkQTVLcHNocDNQUGxlMSA6aG92ZXIge1xcbiAgb3BhY2l0eTogMTtcXG59XFxuXFxuXFxuLmlEOURzS01aWjFkUXhyMDQ0ODh3IHtcXG4gIG1hcmdpbjogMTBweCAwO1xcbiAgZGlzcGxheTogZmxleDtcXG59XFxuXFxuLmlEOURzS01aWjFkUXhyMDQ0ODh3IGxhYmVsIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIHdpZHRoOiAxMjBweDtcXG4gIHRleHQtYWxpZ246IHJpZ2h0O1xcbiAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xcbn1cXG5cXG4ucXVHTzdYRlBySG9ZaXF1MjJtd2cge1xcbiAgZm9udC1zaXplOiA4MCU7XFxufVwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9LZXlib2FyZC9NYWNyb3Mvc3R5bGVzLm1vZHVsZS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSxvQkFBb0I7QUFDdEI7O0FBRUE7RUFDRSxhQUFhO0VBQ2IsZUFBZTtFQUNmLFlBQVk7RUFDWixzQkFBc0I7RUFDdEIsYUFBYTtFQUNiLFNBQVM7QUFDWDs7QUFFQTtFQUNFLFlBQVk7RUFDWixzQkFBc0I7QUFDeEI7QUFDQTtFQUNFLGFBQWE7RUFDYixrQkFBa0I7RUFDbEIsOEJBQThCO0VBQzlCLDJDQUEyQztFQUMzQyxhQUFhO0FBQ2Y7QUFDQTtFQUNFLFNBQVM7QUFDWDtBQUNBO0VBQ0UsZUFBZTtFQUNmLFlBQVk7RUFDWixZQUFZO0FBQ2Q7QUFDQTtFQUNFLFVBQVU7QUFDWjtBQUNBO0VBQ0Usb0JBQW9CO0FBQ3RCOztBQUVBO0VBQ0Usa0JBQWtCO0FBQ3BCO0FBQ0E7RUFDRSxXQUFXO0FBQ2I7O0FBRUE7RUFDRSxrQkFBa0I7RUFDbEIsWUFBWTtFQUNaLGlDQUFpQztFQUNqQyxjQUFjO0VBQ2QsWUFBWTs7RUFFWixhQUFhO0VBQ2IsZUFBZTtBQUNqQjs7QUFFQTtFQUNFLFdBQVc7RUFDWCxXQUFXO0VBQ1gsWUFBWTtBQUNkOztBQUVBO0VBQ0UsV0FBVztFQUNYLFlBQVk7RUFDWixzQkFBc0I7QUFDeEI7QUFDQTtFQUNFLHdDQUF3QztFQUN4Qyw2QkFBNkI7QUFDL0I7QUFDQTtFQUNFLHNCQUFzQjtFQUN0Qix1QkFBdUI7QUFDekI7O0FBRUE7RUFDRSxZQUFZO0FBQ2Q7O0FBRUE7RUFDRSxrQkFBa0I7RUFDbEIsa0JBQWtCO0VBQ2xCLFFBQVE7RUFDUixVQUFVO0VBQ1YsY0FBYzs7RUFFZCw2QkFBNkI7QUFDL0I7QUFDQTtFQUNFLFdBQVc7RUFDWCxZQUFZO0VBQ1osZUFBZTtBQUNqQjtBQUNBO0VBQ0UsbUJBQW1CO0VBQ25CLFdBQVc7QUFDYjs7QUFFQTtFQUNFLFVBQVU7QUFDWjs7O0FBR0E7RUFDRSxjQUFjO0VBQ2QsYUFBYTtBQUNmOztBQUVBO0VBQ0UscUJBQXFCO0VBQ3JCLFlBQVk7RUFDWixpQkFBaUI7RUFDakIsa0JBQWtCO0FBQ3BCOztBQUVBO0VBQ0UsY0FBYztBQUNoQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIubWFpbiB7XFxuICBwYWRkaW5nLWJvdHRvbTogNjBweDtcXG59XFxuXFxuLnNpZGViYXIge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIHBvc2l0aW9uOiBmaXhlZDtcXG4gIHdpZHRoOiAxODBweDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICBwYWRkaW5nOiAxMHB4O1xcbiAgZ2FwOiAxMHB4O1xcbn1cXG5cXG4ubWFjcm8ge1xcbiAgd2lkdGg6IDU1MHB4O1xcbiAgbWFyZ2luOiAxMHB4IGF1dG8gNDBweDtcXG59XFxuLmhlYWRpbmcge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXG4gIGJvcmRlci1ib3R0b206IDJweCBzb2xpZCB2YXIoLS1rZXktYmctYmFzZSk7XFxuICBtYXJnaW46IDVweCAwO1xcbn1cXG4uaGVhZGluZyBoNSB7XFxuICBtYXJnaW46IDA7XFxufVxcbi5hY3Rpb24ge1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgcGFkZGluZzogNXB4O1xcbiAgb3BhY2l0eTogMC42O1xcbn1cXG4uYWN0aW9uOmhvdmVyIHtcXG4gIG9wYWNpdHk6IDE7XFxufVxcbi5yZW1vdmUge1xcbiAgY29sb3I6IHZhcigtLWRlbGV0ZSk7XFxufVxcblxcbi5tYWNyb0FjdGlvbnMge1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbn1cXG4ubWFjcm9BY3Rpb25zID4gKiB7XFxuICBtYXJnaW46IDVweDtcXG59XFxuXFxuLm1hY3JvQmluZGluZ3Mge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgd2lkdGg6IDQ1MHB4O1xcbiAgLyogYm9yZGVyOiAxcHggc29saWQgbGlnaHRncmF5OyAqL1xcbiAgbWFyZ2luOiAwIGF1dG87XFxuICBwYWRkaW5nOiA1cHg7XFxuXFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC13cmFwOiB3cmFwO1xcbn1cXG5cXG4ubWFjcm9CaW5kaW5ncyA+ICoge1xcbiAgbWFyZ2luOiA1cHg7XFxuICB3aWR0aDogNjVweDtcXG4gIGhlaWdodDogNjVweDtcXG59XFxuXFxuLmNvbnRyb2xCaW5kaW5nIHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiAzMHB4O1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG59XFxuLmNvbnRyb2xCaW5kaW5nOmhvdmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWhvdmVyLXNlbGVjdGlvbik7XFxuICBjb2xvcjogdmFyKC0ta2V5LWNvbG9yLWhvdmVyKTtcXG59XFxuLmNvbnRyb2xCaW5kaW5nID4gOmZpcnN0LWNoaWxkIHtcXG4gIHdpZHRoOiAxMDAlICFpbXBvcnRhbnQ7XFxuICBoZWlnaHQ6IDEwMCUgIWltcG9ydGFudDtcXG59XFxuXFxuLm1hY3JvQmluZGluZ3MgW2RyYWdnYWJsZV0ge1xcbiAgY3Vyc29yOiBncmFiO1xcbn1cXG5cXG4uYWN0aW9ucyB7XFxuICB2aXNpYmlsaXR5OiBoaWRkZW47XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDBweDtcXG4gIHJpZ2h0OiAwcHg7XFxuICBmb250LXNpemU6IDgwJTtcXG5cXG4gIGNvbG9yOiB2YXIoLS1rZXktY29sb3ItaG92ZXIpO1xcbn1cXG4uYWN0aW9ucyA+ICoge1xcbiAgbWFyZ2luOiAycHg7XFxuICBvcGFjaXR5OiAwLjU7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcbi5tYWNyb0JpbmRpbmdzIDpob3ZlciAuYWN0aW9ucyB7XFxuICB2aXNpYmlsaXR5OiB2aXNpYmxlO1xcbiAgei1pbmRleDogMTA7XFxufVxcblxcbi5hY3Rpb25zIDpob3ZlciB7XFxuICBvcGFjaXR5OiAxO1xcbn1cXG5cXG5cXG4uZmllbGQge1xcbiAgbWFyZ2luOiAxMHB4IDA7XFxuICBkaXNwbGF5OiBmbGV4O1xcbn1cXG5cXG4uZmllbGQgbGFiZWwge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgd2lkdGg6IDEyMHB4O1xcbiAgdGV4dC1hbGlnbjogcmlnaHQ7XFxuICBtYXJnaW4tcmlnaHQ6IDEwcHg7XFxufVxcblxcbi5iZXRhRGlzY2xhaW1lciB7XFxuICBmb250LXNpemU6IDgwJTtcXG59XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5sb2NhbHMgPSB7XG5cdFwibWFpblwiOiBcImtjOEF1MzI3cG1JaktPN2F1TFhUXCIsXG5cdFwic2lkZWJhclwiOiBcIkI4RnBSdFZkeGJ2Smp3Wm9WTkI0XCIsXG5cdFwibWFjcm9cIjogXCJVczNJaGYwQW9WYlp2RHVsUDc0UVwiLFxuXHRcImhlYWRpbmdcIjogXCJPVkk0SWtWc1Z6eWswZUlBbjlOWFwiLFxuXHRcImFjdGlvblwiOiBcIlFObFNPX0dTR2hSZlVGUkVfdjhFXCIsXG5cdFwicmVtb3ZlXCI6IFwiRHZ6QndHREg3SHNubklicWFlSGlcIixcblx0XCJtYWNyb0FjdGlvbnNcIjogXCJtd2hSX1c3aXFIcTgwM3hOQlYxSFwiLFxuXHRcIm1hY3JvQmluZGluZ3NcIjogXCJUQmdUN25CN0pTU2puVHBNUWVYcFwiLFxuXHRcImNvbnRyb2xCaW5kaW5nXCI6IFwiWU1KYnNMdm5FR09iVXk0WV9pNndcIixcblx0XCJhY3Rpb25zXCI6IFwiSTVkcmM0ZEE1S3BzaHAzUFBsZTFcIixcblx0XCJmaWVsZFwiOiBcImlEOURzS01aWjFkUXhyMDQ0ODh3XCIsXG5cdFwiYmV0YURpc2NsYWltZXJcIjogXCJxdUdPN1hGUHJIb1lpcXUyMm13Z1wiXG59O1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5fRXQ0M1JJREJTMzFXR1RzSlc2USB7XFxuICBtYXJnaW46IDIwcHggMCAzNXB4O1xcbn1cXG4uX0V0NDNSSURCUzMxV0dUc0pXNlEgaDMge1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG4uX0V0NDNSSURCUzMxV0dUc0pXNlEgaDM6aG92ZXIge1xcbiAgY29sb3I6IHJveWFsYmx1ZTtcXG59XFxuXFxuLlVEOUw4R3R4UnlaTkNsNmE1ZHNBIHtcXG4gIGNvbG9yOiB2YXIoLS1rZXktY29sb3ItYmFzZSk7XFxuICBvcGFjaXR5OiAwLjc7XFxufVxcblxcbi5zYWg0QnUxeHE3Mkw3RERlbU96VSB7XFxuICBwYWRkaW5nLWxlZnQ6IDE2cHg7XFxufVxcblxcbi5wU2s3eTZ6VTlKOFVfSXliYmhaQiAucmhxdzNOSDhOcXZiZVYwaWRtSnoge1xcbiAgdHJhbnNmb3JtOiByb3RhdGUoLTkwZGVnKTtcXG4gIHRyYW5zaXRpb246IDEwMG1zO1xcbn1cXG5cXG4ucFNrN3k2elU5SjhVX0l5YmJoWkIgLnNhaDRCdTF4cTcyTDdERGVtT3pVIHtcXG4gIGRpc3BsYXk6IG5vbmU7XFxufVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9LZXlib2FyZC9XYXJuaW5ncy9zdHlsZXMubW9kdWxlLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLG1CQUFtQjtBQUNyQjtBQUNBO0VBQ0UsZUFBZTtBQUNqQjtBQUNBO0VBQ0UsZ0JBQWdCO0FBQ2xCOztBQUVBO0VBQ0UsNEJBQTRCO0VBQzVCLFlBQVk7QUFDZDs7QUFFQTtFQUNFLGtCQUFrQjtBQUNwQjs7QUFFQTtFQUNFLHlCQUF5QjtFQUN6QixpQkFBaUI7QUFDbkI7O0FBRUE7RUFDRSxhQUFhO0FBQ2ZcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLndhcm5pbmdDYXRlZ29yeSB7XFxuICBtYXJnaW46IDIwcHggMCAzNXB4O1xcbn1cXG4ud2FybmluZ0NhdGVnb3J5IGgzIHtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuLndhcm5pbmdDYXRlZ29yeSBoMzpob3ZlciB7XFxuICBjb2xvcjogcm95YWxibHVlO1xcbn1cXG5cXG4uZW1wdHlDYXRlZ29yeSB7XFxuICBjb2xvcjogdmFyKC0ta2V5LWNvbG9yLWJhc2UpO1xcbiAgb3BhY2l0eTogMC43O1xcbn1cXG5cXG4ud2FybmluZ0RldGFpbHMge1xcbiAgcGFkZGluZy1sZWZ0OiAxNnB4O1xcbn1cXG5cXG4uY29sbGFwc2VkQ2F0ZWdvcnkgLmNhcmV0IHtcXG4gIHRyYW5zZm9ybTogcm90YXRlKC05MGRlZyk7XFxuICB0cmFuc2l0aW9uOiAxMDBtcztcXG59XFxuXFxuLmNvbGxhcHNlZENhdGVnb3J5IC53YXJuaW5nRGV0YWlscyB7XFxuICBkaXNwbGF5OiBub25lO1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmxvY2FscyA9IHtcblx0XCJ3YXJuaW5nQ2F0ZWdvcnlcIjogXCJfRXQ0M1JJREJTMzFXR1RzSlc2UVwiLFxuXHRcImVtcHR5Q2F0ZWdvcnlcIjogXCJVRDlMOEd0eFJ5Wk5DbDZhNWRzQVwiLFxuXHRcIndhcm5pbmdEZXRhaWxzXCI6IFwic2FoNEJ1MXhxNzJMN0REZW1PelVcIixcblx0XCJjb2xsYXBzZWRDYXRlZ29yeVwiOiBcInBTazd5NnpVOUo4VV9JeWJiaFpCXCIsXG5cdFwiY2FyZXRcIjogXCJyaHF3M05IOE5xdmJlVjBpZG1KelwiXG59O1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5EMEJIMzlfNnd3aWNsVzhhS3VvaSB7XFxuICBkaXNwbGF5OiBpbmxpbmUtZmxleDtcXG4gIGxpc3Qtc3R5bGUtdHlwZTogbm9uZTtcXG4gIG1hcmdpbjogMDtcXG4gIHBhZGRpbmc6IDA7XFxufVxcbi5EMEJIMzlfNnd3aWNsVzhhS3VvaSBsaSB7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBwYWRkaW5nOiA1cHg7XFxuICBtYXJnaW46IDVweDtcXG4gIGJvcmRlci1yYWRpdXM6IDRweDtcXG4gIGZvbnQtdmFyaWFudDogc21hbGwtY2FwcztcXG59XFxuLkQwQkgzOV82d3dpY2xXOGFLdW9pIGxpLnh3bzZWN0FXQ215OENEdnVUd1JnIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXNlbGVjdGlvbik7XFxuICBjb2xvcjogd2hpdGU7XFxuICBjdXJzb3I6IGRlZmF1bHQ7XFxufVxcblxcbi5uVmJza0VvYUd4V2Y5NnFFZ3R4eiB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxufVxcbi5uVmJza0VvYUd4V2Y5NnFFZ3R4eiA+ICoge1xcbiAgd2lkdGg6IDEwMCUgIWltcG9ydGFudDtcXG4gIGhlaWdodDogMTAwJSAhaW1wb3J0YW50O1xcbn1cXG5cXG4uQWUyczBlcUlWaGViVEVjSkdjM0Yge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlXFxufVxcbi5BZTJzMGVxSVZoZWJURWNKR2MzRjo6YWZ0ZXIge1xcbiAgY29udGVudDogJ2JldGEnO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmVkO1xcbiAgY29sb3I6IHdoaXRlO1xcbiAgZm9udC1zaXplOiAxMnB4O1xcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxuICBwYWRkaW5nOiAxcHggM3B4O1xcbiAgYm9yZGVyLXJhZGl1czogNnB4O1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgdG9wOiAwO1xcbiAgcmlnaHQ6IDA7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSg2MCUsIC02MCUpIHJvdGF0ZSgxM2RlZyk7XFxufVxcbi54d282VjdBV0NteThDRHZ1VHdSZyAuQWUyczBlcUlWaGViVEVjSkdjM0Y6OmFmdGVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xcbiAgY29sb3I6IHZhcigtLXNlbGVjdGlvbik7XFxuICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1zZWxlY3Rpb24pO1xcbn1cXG4uc1FRMHFGakhwdEpiUThxdnVYR2Ege1xcbiAgY29sb3I6IHZhcigtLWVycm9yLWhpZ2hsaWdodCk7XFxufVxcbi5EMEJIMzlfNnd3aWNsVzhhS3VvaSBsaS54d282VjdBV0NteThDRHZ1VHdSZy5zUVEwcUZqSHB0SmJROHF2dVhHYSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1lcnJvci1oaWdobGlnaHQpO1xcbiAgY29sb3I6IHdoaXRlO1xcbn1cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvS2V5Ym9hcmQvc3R5bGVzLm1vZHVsZS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSxvQkFBb0I7RUFDcEIscUJBQXFCO0VBQ3JCLFNBQVM7RUFDVCxVQUFVO0FBQ1o7QUFDQTtFQUNFLGVBQWU7RUFDZixZQUFZO0VBQ1osV0FBVztFQUNYLGtCQUFrQjtFQUNsQix3QkFBd0I7QUFDMUI7QUFDQTtFQUNFLGtDQUFrQztFQUNsQyxZQUFZO0VBQ1osZUFBZTtBQUNqQjs7QUFFQTtFQUNFLGtCQUFrQjtBQUNwQjtBQUNBO0VBQ0Usc0JBQXNCO0VBQ3RCLHVCQUF1QjtBQUN6Qjs7QUFFQTtFQUNFO0FBQ0Y7QUFDQTtFQUNFLGVBQWU7RUFDZixxQkFBcUI7RUFDckIsWUFBWTtFQUNaLGVBQWU7RUFDZixpQkFBaUI7RUFDakIsZ0JBQWdCO0VBQ2hCLGtCQUFrQjtFQUNsQixrQkFBa0I7RUFDbEIsTUFBTTtFQUNOLFFBQVE7RUFDUiw2Q0FBNkM7QUFDL0M7QUFDQTtFQUNFLHVCQUF1QjtFQUN2Qix1QkFBdUI7RUFDdkIsa0NBQWtDO0FBQ3BDO0FBQ0E7RUFDRSw2QkFBNkI7QUFDL0I7QUFDQTtFQUNFLHdDQUF3QztFQUN4QyxZQUFZO0FBQ2RcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLmVkaXRvck1vZGVUYWJzIHtcXG4gIGRpc3BsYXk6IGlubGluZS1mbGV4O1xcbiAgbGlzdC1zdHlsZS10eXBlOiBub25lO1xcbiAgbWFyZ2luOiAwO1xcbiAgcGFkZGluZzogMDtcXG59XFxuLmVkaXRvck1vZGVUYWJzIGxpIHtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIHBhZGRpbmc6IDVweDtcXG4gIG1hcmdpbjogNXB4O1xcbiAgYm9yZGVyLXJhZGl1czogNHB4O1xcbiAgZm9udC12YXJpYW50OiBzbWFsbC1jYXBzO1xcbn1cXG4uZWRpdG9yTW9kZVRhYnMgbGkuYWN0aXZlRWRpdFRhYiB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1zZWxlY3Rpb24pO1xcbiAgY29sb3I6IHdoaXRlO1xcbiAgY3Vyc29yOiBkZWZhdWx0O1xcbn1cXG5cXG4ucGxhY2VyIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG59XFxuLnBsYWNlciA+ICoge1xcbiAgd2lkdGg6IDEwMCUgIWltcG9ydGFudDtcXG4gIGhlaWdodDogMTAwJSAhaW1wb3J0YW50O1xcbn1cXG5cXG4uYmV0YSB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmVcXG59XFxuLmJldGE6OmFmdGVyIHtcXG4gIGNvbnRlbnQ6ICdiZXRhJztcXG4gIGJhY2tncm91bmQtY29sb3I6IHJlZDtcXG4gIGNvbG9yOiB3aGl0ZTtcXG4gIGZvbnQtc2l6ZTogMTJweDtcXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xcbiAgcGFkZGluZzogMXB4IDNweDtcXG4gIGJvcmRlci1yYWRpdXM6IDZweDtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogMDtcXG4gIHJpZ2h0OiAwO1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoNjAlLCAtNjAlKSByb3RhdGUoMTNkZWcpO1xcbn1cXG4uYWN0aXZlRWRpdFRhYiAuYmV0YTo6YWZ0ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XFxuICBjb2xvcjogdmFyKC0tc2VsZWN0aW9uKTtcXG4gIGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLXNlbGVjdGlvbik7XFxufVxcbi53YXJuaW5nVGFiIHtcXG4gIGNvbG9yOiB2YXIoLS1lcnJvci1oaWdobGlnaHQpO1xcbn1cXG4uZWRpdG9yTW9kZVRhYnMgbGkuYWN0aXZlRWRpdFRhYi53YXJuaW5nVGFiIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWVycm9yLWhpZ2hsaWdodCk7XFxuICBjb2xvcjogd2hpdGU7XFxufVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ubG9jYWxzID0ge1xuXHRcImVkaXRvck1vZGVUYWJzXCI6IFwiRDBCSDM5XzZ3d2ljbFc4YUt1b2lcIixcblx0XCJhY3RpdmVFZGl0VGFiXCI6IFwieHdvNlY3QVdDbXk4Q0R2dVR3UmdcIixcblx0XCJwbGFjZXJcIjogXCJuVmJza0VvYUd4V2Y5NnFFZ3R4elwiLFxuXHRcImJldGFcIjogXCJBZTJzMGVxSVZoZWJURWNKR2MzRlwiLFxuXHRcIndhcm5pbmdUYWJcIjogXCJzUVEwcUZqSHB0SmJROHF2dVhHYVwiXG59O1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5Ra2V3TnpHYWdJYm5kaTNySnBLbSB7XFxuICBib3JkZXI6IG5vbmU7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBjb2xvcjogd2hpdGU7XFxuICBiYWNrZ3JvdW5kOiAjMjQ4O1xcbiAgYm9yZGVyLXJhZGl1czogMTAwJTtcXG4gIHdpZHRoOiAyNHB4O1xcbiAgaGVpZ2h0OiAyNHB4O1xcbiAgbGluZS1oZWlnaHQ6IDI0cHg7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxufVxcbi5Ra2V3TnpHYWdJYm5kaTNySnBLbTpob3ZlciB7XFxuICBiYWNrZ3JvdW5kOiAjNDhGO1xcbn1cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvU291cmNlcy9EZW1vL3N0eWxlLm1vZHVsZS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSxZQUFZO0VBQ1osZUFBZTtFQUNmLFlBQVk7RUFDWixnQkFBZ0I7RUFDaEIsbUJBQW1CO0VBQ25CLFdBQVc7RUFDWCxZQUFZO0VBQ1osaUJBQWlCO0VBQ2pCLGtCQUFrQjtBQUNwQjtBQUNBO0VBQ0UsZ0JBQWdCO0FBQ2xCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5oZWxwIHtcXG4gIGJvcmRlcjogbm9uZTtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIGNvbG9yOiB3aGl0ZTtcXG4gIGJhY2tncm91bmQ6ICMyNDg7XFxuICBib3JkZXItcmFkaXVzOiAxMDAlO1xcbiAgd2lkdGg6IDI0cHg7XFxuICBoZWlnaHQ6IDI0cHg7XFxuICBsaW5lLWhlaWdodDogMjRweDtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG59XFxuLmhlbHA6aG92ZXIge1xcbiAgYmFja2dyb3VuZDogIzQ4RjtcXG59XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5sb2NhbHMgPSB7XG5cdFwiaGVscFwiOiBcIlFrZXdOekdhZ0libmRpM3JKcEttXCJcbn07XG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLno4ejNHWHVZcWxlcEN6NHRSUFpqIHtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgYm9yZGVyOiAxcHggc29saWQgaHNsKDAsIDAlLCA4MCUpO1xcbiAgYm9yZGVyLXJhZGl1czogNHB4O1xcbiAgZ2FwOiA1cHg7XFxuICBoZWlnaHQ6IDM4cHg7XFxuICBwYWRkaW5nOiAwIDhweDtcXG5cXG4gIC8qIGNvbG9yOiBoc2woMCwgMCUsIDIwJSk7ICovXFxufVxcblxcbi55eUhmYWw5cE00RHpTaE1sNExBWSB7XFxuICBkaXNwbGF5OiBpbmxpbmUtZmxleDtcXG4gIGhlaWdodDogMzBweDtcXG4gIGJvcmRlci1yYWRpdXM6IDVweDtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuXFxuICBmb250LXNpemU6IDcwJTtcXG4gIHBhZGRpbmc6IDAgNHB4O1xcblxcbiAgYmFja2dyb3VuZC1jb2xvcjogcm95YWxibHVlO1xcbiAgY29sb3I6IHdoaXRlO1xcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xcbn1cXG5cXG4udWtkeWNUNHRhcldWbFYzUEM2UnIge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGhlaWdodDogMzhweDtcXG4gIGdhcDogNHB4O1xcbn1cXG5cXG4udWtkeWNUNHRhcldWbFYzUEM2UnIgYnV0dG9uLFxcbi51a2R5Y1Q0dGFyV1ZsVjNQQzZSciAueXlIZmFsOXBNNER6U2hNbDRMQVkge1xcbiAgaGVpZ2h0OiAzOHB4O1xcbn1cXG5cXG4ueXlIZmFsOXBNNER6U2hNbDRMQVkgY29kZSB7XFxuICBmb250LWZhbWlseTogbW9ub3NwYWNlO1xcbn1cXG5cXG4uUXZJNXdvN191Nk9lQWMxMmliMFcge1xcbiAgd2lkdGg6IDMwcHg7XFxuICBoZWlnaHQ6IDMwcHg7XFxuICBsaW5lLWhlaWdodDogMzBweDtcXG4gIGZvbnQtc2l6ZTogMjAwJTtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG59XFxuXFxuLmVVdzVOWnFvUFBGM0JjeVlEcEp4IHtcXG4gIC8qIGNvbG9yOiB2YXIoLS1zZWxlY3Rpb24pOyAqL1xcbn1cXG5cXG4uWGpZNGxOX2xZM25TZ0hjdzY3Ylgge1xcbiAgLyogY29sb3I6IGJyb3duOyAqL1xcbn1cXG5cXG4uQXBfT3dDdHAzajFRMjlQaHB3M1Yge1xcbiAgY29sb3I6IGdvbGQ7XFxuICBhbmltYXRpb246IFdqQnVQZmxzNFY0MWQyc2piTkZVIDFzIGxpbmVhciBhbHRlcm5hdGUgaW5maW5pdGU7XFxufVxcblxcbkBrZXlmcmFtZXMgV2pCdVBmbHM0VjQxZDJzamJORlUge1xcbiAgZnJvbSB7IG9wYWNpdHk6IDAuNTsgfVxcbiAgdG8geyBvcGFjaXR5OiAxOyB9XFxufVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9Tb3VyY2VzL0dpdGh1Yi9zdHlsZXMubW9kdWxlLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLGVBQWU7RUFDZixhQUFhO0VBQ2Isc0JBQXNCO0VBQ3RCLGlDQUFpQztFQUNqQyxrQkFBa0I7RUFDbEIsUUFBUTtFQUNSLFlBQVk7RUFDWixjQUFjOztFQUVkLDRCQUE0QjtBQUM5Qjs7QUFFQTtFQUNFLG9CQUFvQjtFQUNwQixZQUFZO0VBQ1osa0JBQWtCO0VBQ2xCLG1CQUFtQjs7RUFFbkIsY0FBYztFQUNkLGNBQWM7O0VBRWQsMkJBQTJCO0VBQzNCLFlBQVk7RUFDWixxQkFBcUI7QUFDdkI7O0FBRUE7RUFDRSxhQUFhO0VBQ2IsWUFBWTtFQUNaLFFBQVE7QUFDVjs7QUFFQTs7RUFFRSxZQUFZO0FBQ2Q7O0FBRUE7RUFDRSxzQkFBc0I7QUFDeEI7O0FBRUE7RUFDRSxXQUFXO0VBQ1gsWUFBWTtFQUNaLGlCQUFpQjtFQUNqQixlQUFlO0VBQ2Ysa0JBQWtCO0FBQ3BCOztBQUVBO0VBQ0UsNkJBQTZCO0FBQy9COztBQUVBO0VBQ0Usa0JBQWtCO0FBQ3BCOztBQUVBO0VBQ0UsV0FBVztFQUNYLDREQUE2QztBQUMvQzs7QUFFQTtFQUNFLE9BQU8sWUFBWSxFQUFFO0VBQ3JCLEtBQUssVUFBVSxFQUFFO0FBQ25CXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5jb21wYWN0V3JhcHBlciB7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gIGJvcmRlcjogMXB4IHNvbGlkIGhzbCgwLCAwJSwgODAlKTtcXG4gIGJvcmRlci1yYWRpdXM6IDRweDtcXG4gIGdhcDogNXB4O1xcbiAgaGVpZ2h0OiAzOHB4O1xcbiAgcGFkZGluZzogMCA4cHg7XFxuXFxuICAvKiBjb2xvcjogaHNsKDAsIDAlLCAyMCUpOyAqL1xcbn1cXG5cXG4uYnVpbGREZXRhaWxzIHtcXG4gIGRpc3BsYXk6IGlubGluZS1mbGV4O1xcbiAgaGVpZ2h0OiAzMHB4O1xcbiAgYm9yZGVyLXJhZGl1czogNXB4O1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG5cXG4gIGZvbnQtc2l6ZTogNzAlO1xcbiAgcGFkZGluZzogMCA0cHg7XFxuXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByb3lhbGJsdWU7XFxuICBjb2xvcjogd2hpdGU7XFxuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxufVxcblxcbi5waWNrZXJBY3Rpb25zIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBoZWlnaHQ6IDM4cHg7XFxuICBnYXA6IDRweDtcXG59XFxuXFxuLnBpY2tlckFjdGlvbnMgYnV0dG9uLFxcbi5waWNrZXJBY3Rpb25zIC5idWlsZERldGFpbHMge1xcbiAgaGVpZ2h0OiAzOHB4O1xcbn1cXG5cXG4uYnVpbGREZXRhaWxzIGNvZGUge1xcbiAgZm9udC1mYW1pbHk6IG1vbm9zcGFjZTtcXG59XFxuXFxuLmJ1aWxkU3RhdHVzIHtcXG4gIHdpZHRoOiAzMHB4O1xcbiAgaGVpZ2h0OiAzMHB4O1xcbiAgbGluZS1oZWlnaHQ6IDMwcHg7XFxuICBmb250LXNpemU6IDIwMCU7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxufVxcblxcbi5idWlsZFN1Y2Nlc3Mge1xcbiAgLyogY29sb3I6IHZhcigtLXNlbGVjdGlvbik7ICovXFxufVxcblxcbi5idWlsZEZhaWxlZCB7XFxuICAvKiBjb2xvcjogYnJvd247ICovXFxufVxcblxcbi5idWlsZFBlbmRpbmcge1xcbiAgY29sb3I6IGdvbGQ7XFxuICBhbmltYXRpb246IHB1bHNlIDFzIGxpbmVhciBhbHRlcm5hdGUgaW5maW5pdGU7XFxufVxcblxcbkBrZXlmcmFtZXMgcHVsc2Uge1xcbiAgZnJvbSB7IG9wYWNpdHk6IDAuNTsgfVxcbiAgdG8geyBvcGFjaXR5OiAxOyB9XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ubG9jYWxzID0ge1xuXHRcImNvbXBhY3RXcmFwcGVyXCI6IFwiejh6M0dYdVlxbGVwQ3o0dFJQWmpcIixcblx0XCJidWlsZERldGFpbHNcIjogXCJ5eUhmYWw5cE00RHpTaE1sNExBWVwiLFxuXHRcInBpY2tlckFjdGlvbnNcIjogXCJ1a2R5Y1Q0dGFyV1ZsVjNQQzZSclwiLFxuXHRcImJ1aWxkU3RhdHVzXCI6IFwiUXZJNXdvN191Nk9lQWMxMmliMFdcIixcblx0XCJidWlsZFN1Y2Nlc3NcIjogXCJlVXc1Tlpxb1BQRjNCY3lZRHBKeFwiLFxuXHRcImJ1aWxkRmFpbGVkXCI6IFwiWGpZNGxOX2xZM25TZ0hjdzY3YlhcIixcblx0XCJidWlsZFBlbmRpbmdcIjogXCJBcF9Pd0N0cDNqMVEyOVBocHczVlwiLFxuXHRcInB1bHNlXCI6IFwiV2pCdVBmbHM0VjQxZDJzamJORlVcIlxufTtcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIuc1Aya0RSb1RaRWxaVVROSHEwMzMge1xcbiAgd2lkdGg6IDMwMHB4O1xcblxcdHBhZGRpbmc6IDEwcHg7XFxuXFx0Ym9yZGVyLXJhZGl1czogNHB4O1xcblxcdGJhY2tncm91bmQ6IHJhZGlhbC1ncmFkaWVudChcXG5cXHRcXHRyZ2JhKHZhcigtLWJnLXJnYiksIDEpIDIwJSxcXG5cXHRcXHRyZ2JhKHZhcigtLWJnLXJnYiksIC42KSAxMDAlXFxuXFx0KTtcXG59XFxuLnNQMmtEUm9UWkVsWlVUTkhxMDMzIGlucHV0IHtcXG5cXHRkaXNwbGF5OiBibG9jaztcXG5cXHR3aWR0aDogMTAwJTtcXG5cXHRoZWlnaHQ6IDMwcHg7XFxuXFx0bGluZS1oZWlnaHQ6IDMwcHg7XFxuXFxuXFx0Zm9udC1zaXplOiAxMjAlO1xcblxcdG1hcmdpbjogMDtcXG5cXHRwYWRkaW5nOiA0cHg7XFxuXFx0Ym9yZGVyOiBub25lO1xcblxcdGJvcmRlci1yYWRpdXM6IDRweDtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxufVxcbnVsLmluQVM5UXVua2YzZzVLM3h6Nm82IHtcXG5cXHRwb3NpdGlvbjogcmVsYXRpdmU7XFxuXFx0Zm9udC1mYW1pbHk6IG1vbm9zcGFjZTtcXG5cXHRsaXN0LXN0eWxlLXBvc2l0aW9uOiBpbnNpZGU7XFxuXFx0bGlzdC1zdHlsZS10eXBlOiBub25lO1xcblxcdG1heC1oZWlnaHQ6IDMwMHB4O1xcblxcdG92ZXJmbG93OiBzY3JvbGw7XFxuXFx0cGFkZGluZzogNHB4O1xcbiAgbWFyZ2luOiA0cHggMDtcXG5cXHRiYWNrZ3JvdW5kOiByZ2JhKDAsIDAsIDAsIDAuNzUpO1xcblxcdGJvcmRlci1yYWRpdXM6IDRweDtcXG59XFxuLmluQVM5UXVua2YzZzVLM3h6Nm82IGxpIHtcXG5cXHRjdXJzb3I6IHBvaW50ZXI7XFxuXFx0Y29sb3I6IHdoaXRlO1xcblxcdHBhZGRpbmc6IDVweDtcXG59XFxuLmluQVM5UXVua2YzZzVLM3h6Nm82IGxpOmhvdmVyLCAuaW5BUzlRdW5rZjNnNUszeHo2bzYgbGkuQkw3Q3hybl9lZmJsUVhZM1cxU3cge1xcblxcdGJhY2tncm91bmQ6IHdoaXRlO1xcblxcdGNvbG9yOiBibGFjaztcXG59XFxuLmluQVM5UXVua2YzZzVLM3h6Nm82IGxpIGIgeyBjb2xvcjogcmVkOyB9XFxuLmluQVM5UXVua2YzZzVLM3h6Nm82IGxpIC51bGQwWGFlb1FhUUpKd3AwTFQwWCB7XFxuXFx0Zm9udC1zdHlsZTogaXRhbGljO1xcblxcdGZvbnQtc2l6ZTogOTAlO1xcblxcdG1hcmdpbjogMDtcXG5cXHRjb2xvcjogZ3JheTtcXG59XFxuXFxuLnBxaVpRdWJsS1h2bW5UX0VTRHhRIHtcXG4gIGZvbnQtc2l6ZTogMTBweDtcXG59XFxuXFxuLnBxaVpRdWJsS1h2bW5UX0VTRHhRIGEge1xcbiAgY29sb3I6IHZhcigtLXNlbGVjdGlvbik7XFxuICBib3JkZXItYm90dG9tOiAxcHggZG90dGVkIHZhcigtLXNlbGVjdGlvbik7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcblxcbi5FQ1VzNGcyajFyZWtQNHh4Z1FEciB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxufVxcbi5FQ1VzNGcyajFyZWtQNHh4Z1FEciBpbnB1dCB7XFxuICBwYWRkaW5nOiA0cHggNHB4IDRweCAzMHB4O1xcbn1cXG5cXG4ueERVQWdRWmVCcDBUWlNPcUN3SG0ge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcblxcdHRvcDogNTAlO1xcblxcdGxlZnQ6IDEwcHg7XFxuXFx0dHJhbnNmb3JtOiB0cmFuc2xhdGVZKC01MCUpO1xcblxcdHBvaW50ZXItZXZlbnRzOiBub25lO1xcbn1cXG4uZVk1elJsNDlzRVNMalhtaXpNRVAge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcblxcdHRvcDogNTAlO1xcblxcdHJpZ2h0OiAxMHB4O1xcblxcdHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNTAlKTtcXG5cXHRjdXJzb3I6IHBvaW50ZXI7XFxufVwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9WYWx1ZVBpY2tlci9zdHlsZS5tb2R1bGUuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0VBQ0UsWUFBWTtDQUNiLGFBQWE7Q0FDYixrQkFBa0I7Q0FDbEI7OztFQUdDO0FBQ0Y7QUFDQTtDQUNDLGNBQWM7Q0FDZCxXQUFXO0NBQ1gsWUFBWTtDQUNaLGlCQUFpQjs7Q0FFakIsZUFBZTtDQUNmLFNBQVM7Q0FDVCxZQUFZO0NBQ1osWUFBWTtDQUNaLGtCQUFrQjtFQUNqQixzQkFBc0I7QUFDeEI7QUFDQTtDQUNDLGtCQUFrQjtDQUNsQixzQkFBc0I7Q0FDdEIsMkJBQTJCO0NBQzNCLHFCQUFxQjtDQUNyQixpQkFBaUI7Q0FDakIsZ0JBQWdCO0NBQ2hCLFlBQVk7RUFDWCxhQUFhO0NBQ2QsK0JBQStCO0NBQy9CLGtCQUFrQjtBQUNuQjtBQUNBO0NBQ0MsZUFBZTtDQUNmLFlBQVk7Q0FDWixZQUFZO0FBQ2I7QUFDQTtDQUNDLGlCQUFpQjtDQUNqQixZQUFZO0FBQ2I7QUFDQSw2QkFBZ0IsVUFBVSxFQUFFO0FBQzVCO0NBQ0Msa0JBQWtCO0NBQ2xCLGNBQWM7Q0FDZCxTQUFTO0NBQ1QsV0FBVztBQUNaOztBQUVBO0VBQ0UsZUFBZTtBQUNqQjs7QUFFQTtFQUNFLHVCQUF1QjtFQUN2QiwwQ0FBMEM7RUFDMUMsZUFBZTtBQUNqQjs7QUFFQTtFQUNFLGtCQUFrQjtBQUNwQjtBQUNBO0VBQ0UseUJBQXlCO0FBQzNCOztBQUVBO0VBQ0Usa0JBQWtCO0NBQ25CLFFBQVE7Q0FDUixVQUFVO0NBQ1YsMkJBQTJCO0NBQzNCLG9CQUFvQjtBQUNyQjtBQUNBO0VBQ0Usa0JBQWtCO0NBQ25CLFFBQVE7Q0FDUixXQUFXO0NBQ1gsMkJBQTJCO0NBQzNCLGVBQWU7QUFDaEJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLmRpYWxvZyB7XFxuICB3aWR0aDogMzAwcHg7XFxuXFx0cGFkZGluZzogMTBweDtcXG5cXHRib3JkZXItcmFkaXVzOiA0cHg7XFxuXFx0YmFja2dyb3VuZDogcmFkaWFsLWdyYWRpZW50KFxcblxcdFxcdHJnYmEodmFyKC0tYmctcmdiKSwgMSkgMjAlLFxcblxcdFxcdHJnYmEodmFyKC0tYmctcmdiKSwgLjYpIDEwMCVcXG5cXHQpO1xcbn1cXG4uZGlhbG9nIGlucHV0IHtcXG5cXHRkaXNwbGF5OiBibG9jaztcXG5cXHR3aWR0aDogMTAwJTtcXG5cXHRoZWlnaHQ6IDMwcHg7XFxuXFx0bGluZS1oZWlnaHQ6IDMwcHg7XFxuXFxuXFx0Zm9udC1zaXplOiAxMjAlO1xcblxcdG1hcmdpbjogMDtcXG5cXHRwYWRkaW5nOiA0cHg7XFxuXFx0Ym9yZGVyOiBub25lO1xcblxcdGJvcmRlci1yYWRpdXM6IDRweDtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxufVxcbnVsLnJlc3VsdHMge1xcblxcdHBvc2l0aW9uOiByZWxhdGl2ZTtcXG5cXHRmb250LWZhbWlseTogbW9ub3NwYWNlO1xcblxcdGxpc3Qtc3R5bGUtcG9zaXRpb246IGluc2lkZTtcXG5cXHRsaXN0LXN0eWxlLXR5cGU6IG5vbmU7XFxuXFx0bWF4LWhlaWdodDogMzAwcHg7XFxuXFx0b3ZlcmZsb3c6IHNjcm9sbDtcXG5cXHRwYWRkaW5nOiA0cHg7XFxuICBtYXJnaW46IDRweCAwO1xcblxcdGJhY2tncm91bmQ6IHJnYmEoMCwgMCwgMCwgMC43NSk7XFxuXFx0Ym9yZGVyLXJhZGl1czogNHB4O1xcbn1cXG4ucmVzdWx0cyBsaSB7XFxuXFx0Y3Vyc29yOiBwb2ludGVyO1xcblxcdGNvbG9yOiB3aGl0ZTtcXG5cXHRwYWRkaW5nOiA1cHg7XFxufVxcbi5yZXN1bHRzIGxpOmhvdmVyLCAucmVzdWx0cyBsaS5oaWdobGlnaHRlZCB7XFxuXFx0YmFja2dyb3VuZDogd2hpdGU7XFxuXFx0Y29sb3I6IGJsYWNrO1xcbn1cXG4ucmVzdWx0cyBsaSBiIHsgY29sb3I6IHJlZDsgfVxcbi5yZXN1bHRzIGxpIC5kZXNjcmlwdGlvbiB7XFxuXFx0Zm9udC1zdHlsZTogaXRhbGljO1xcblxcdGZvbnQtc2l6ZTogOTAlO1xcblxcdG1hcmdpbjogMDtcXG5cXHRjb2xvcjogZ3JheTtcXG59XFxuXFxuLmNob2ljZXMtY291bnRlciB7XFxuICBmb250LXNpemU6IDEwcHg7XFxufVxcblxcbi5jaG9pY2VzLWNvdW50ZXIgYSB7XFxuICBjb2xvcjogdmFyKC0tc2VsZWN0aW9uKTtcXG4gIGJvcmRlci1ib3R0b206IDFweCBkb3R0ZWQgdmFyKC0tc2VsZWN0aW9uKTtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXFxuLnNlYXJjaFdyYXBwZXIge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbn1cXG4uc2VhcmNoV3JhcHBlciBpbnB1dCB7XFxuICBwYWRkaW5nOiA0cHggNHB4IDRweCAzMHB4O1xcbn1cXG5cXG4uc2VhcmNoSWNvbiB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuXFx0dG9wOiA1MCU7XFxuXFx0bGVmdDogMTBweDtcXG5cXHR0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTUwJSk7XFxuXFx0cG9pbnRlci1ldmVudHM6IG5vbmU7XFxufVxcbi5jbGVhclNlYXJjaEljb24ge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcblxcdHRvcDogNTAlO1xcblxcdHJpZ2h0OiAxMHB4O1xcblxcdHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNTAlKTtcXG5cXHRjdXJzb3I6IHBvaW50ZXI7XFxufVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ubG9jYWxzID0ge1xuXHRcImRpYWxvZ1wiOiBcInNQMmtEUm9UWkVsWlVUTkhxMDMzXCIsXG5cdFwicmVzdWx0c1wiOiBcImluQVM5UXVua2YzZzVLM3h6Nm82XCIsXG5cdFwiaGlnaGxpZ2h0ZWRcIjogXCJCTDdDeHJuX2VmYmxRWFkzVzFTd1wiLFxuXHRcImRlc2NyaXB0aW9uXCI6IFwidWxkMFhhZW9RYVFKSndwMExUMFhcIixcblx0XCJjaG9pY2VzLWNvdW50ZXJcIjogXCJwcWlaUXVibEtYdm1uVF9FU0R4UVwiLFxuXHRcInNlYXJjaFdyYXBwZXJcIjogXCJFQ1VzNGcyajFyZWtQNHh4Z1FEclwiLFxuXHRcInNlYXJjaEljb25cIjogXCJ4RFVBZ1FaZUJwMFRaU09xQ3dIbVwiLFxuXHRcImNsZWFyU2VhcmNoSWNvblwiOiBcImVZNXpSbDQ5c0VTTGpYbWl6TUVQXCJcbn07XG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiXFxuLl92V05JWE1rZW1RYXg5cmtDSlFoIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHotaW5kZXg6IDEwMDtcXG4gIGJvdHRvbTogNXB4O1xcbiAgbGVmdDogNXB4O1xcbn1cXG5cXG4uX3ZXTklYTWtlbVFheDlya0NKUWggbGFiZWwge1xcbiAgZm9udC1zaXplOiA3NSU7XFxuICBmb250LXN0eWxlOiBpdGFsaWM7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIHBhZGRpbmc6IDAgMTBweDtcXG59XFxuXFxuLnFpQzJOcnVqRTRlYnFtSGp6cTBfIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIGZvbnQtc2l6ZTogMTEwJTtcXG4gIGZvbnQtc3R5bGU6IGl0YWxpYztcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWNvZGUtYmcpO1xcbiAgYm9yZGVyLXJhZGl1czogMjBweDtcXG4gIHBhZGRpbmc6IDVweCAxMHB4O1xcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xcblxcbiAgY29sb3I6IHJveWFsYmx1ZTtcXG59XFxuLnFpQzJOcnVqRTRlYnFtSGp6cTBfOmhvdmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJveWFsYmx1ZTtcXG4gIGNvbG9yOiB3aGl0ZTtcXG59XCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL3N0eWxlcy5tb2R1bGUuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCI7QUFDQTtFQUNFLHFCQUFxQjtFQUNyQixrQkFBa0I7RUFDbEIsWUFBWTtFQUNaLFdBQVc7RUFDWCxTQUFTO0FBQ1g7O0FBRUE7RUFDRSxjQUFjO0VBQ2Qsa0JBQWtCO0VBQ2xCLGNBQWM7RUFDZCxlQUFlO0FBQ2pCOztBQUVBO0VBQ0UscUJBQXFCO0VBQ3JCLGVBQWU7RUFDZixrQkFBa0I7RUFDbEIsZ0NBQWdDO0VBQ2hDLG1CQUFtQjtFQUNuQixpQkFBaUI7RUFDakIscUJBQXFCOztFQUVyQixnQkFBZ0I7QUFDbEI7QUFDQTtFQUNFLDJCQUEyQjtFQUMzQixZQUFZO0FBQ2RcIixcInNvdXJjZXNDb250ZW50XCI6W1wiXFxuLndyYXBwZXIge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgei1pbmRleDogMTAwO1xcbiAgYm90dG9tOiA1cHg7XFxuICBsZWZ0OiA1cHg7XFxufVxcblxcbi53cmFwcGVyIGxhYmVsIHtcXG4gIGZvbnQtc2l6ZTogNzUlO1xcbiAgZm9udC1zdHlsZTogaXRhbGljO1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICBwYWRkaW5nOiAwIDEwcHg7XFxufVxcblxcbi5naXRodWJMaW5rIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIGZvbnQtc2l6ZTogMTEwJTtcXG4gIGZvbnQtc3R5bGU6IGl0YWxpYztcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWNvZGUtYmcpO1xcbiAgYm9yZGVyLXJhZGl1czogMjBweDtcXG4gIHBhZGRpbmc6IDVweCAxMHB4O1xcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xcblxcbiAgY29sb3I6IHJveWFsYmx1ZTtcXG59XFxuLmdpdGh1Ykxpbms6aG92ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcm95YWxibHVlO1xcbiAgY29sb3I6IHdoaXRlO1xcbn1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmxvY2FscyA9IHtcblx0XCJ3cmFwcGVyXCI6IFwiX3ZXTklYTWtlbVFheDlya0NKUWhcIixcblx0XCJnaXRodWJMaW5rXCI6IFwicWlDMk5ydWpFNGVicW1IanpxMF9cIlxufTtcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwidmFyIG1hcCA9IHtcblx0XCIuL2FmXCI6IDQyNzg2LFxuXHRcIi4vYWYuanNcIjogNDI3ODYsXG5cdFwiLi9hclwiOiAzMDg2Nyxcblx0XCIuL2FyLWR6XCI6IDE0MTMwLFxuXHRcIi4vYXItZHouanNcIjogMTQxMzAsXG5cdFwiLi9hci1rd1wiOiA5NjEzNSxcblx0XCIuL2FyLWt3LmpzXCI6IDk2MTM1LFxuXHRcIi4vYXItbHlcIjogNTY0NDAsXG5cdFwiLi9hci1seS5qc1wiOiA1NjQ0MCxcblx0XCIuL2FyLW1hXCI6IDQ3NzAyLFxuXHRcIi4vYXItbWEuanNcIjogNDc3MDIsXG5cdFwiLi9hci1zYVwiOiAxNjA0MCxcblx0XCIuL2FyLXNhLmpzXCI6IDE2MDQwLFxuXHRcIi4vYXItdG5cIjogMzcxMDAsXG5cdFwiLi9hci10bi5qc1wiOiAzNzEwMCxcblx0XCIuL2FyLmpzXCI6IDMwODY3LFxuXHRcIi4vYXpcIjogMzEwODMsXG5cdFwiLi9hei5qc1wiOiAzMTA4Myxcblx0XCIuL2JlXCI6IDk4MDgsXG5cdFwiLi9iZS5qc1wiOiA5ODA4LFxuXHRcIi4vYmdcIjogNjgzMzgsXG5cdFwiLi9iZy5qc1wiOiA2ODMzOCxcblx0XCIuL2JtXCI6IDY3NDM4LFxuXHRcIi4vYm0uanNcIjogNjc0MzgsXG5cdFwiLi9iblwiOiA4OTA1LFxuXHRcIi4vYm4tYmRcIjogNzYyMjUsXG5cdFwiLi9ibi1iZC5qc1wiOiA3NjIyNSxcblx0XCIuL2JuLmpzXCI6IDg5MDUsXG5cdFwiLi9ib1wiOiAxMTU2MCxcblx0XCIuL2JvLmpzXCI6IDExNTYwLFxuXHRcIi4vYnJcIjogMTI3OCxcblx0XCIuL2JyLmpzXCI6IDEyNzgsXG5cdFwiLi9ic1wiOiA4MDYyMixcblx0XCIuL2JzLmpzXCI6IDgwNjIyLFxuXHRcIi4vY2FcIjogMjQ2OCxcblx0XCIuL2NhLmpzXCI6IDI0NjgsXG5cdFwiLi9jc1wiOiA1ODIyLFxuXHRcIi4vY3MuanNcIjogNTgyMixcblx0XCIuL2N2XCI6IDUwODc3LFxuXHRcIi4vY3YuanNcIjogNTA4NzcsXG5cdFwiLi9jeVwiOiA0NzM3Myxcblx0XCIuL2N5LmpzXCI6IDQ3MzczLFxuXHRcIi4vZGFcIjogMjQ3ODAsXG5cdFwiLi9kYS5qc1wiOiAyNDc4MCxcblx0XCIuL2RlXCI6IDU5NzQwLFxuXHRcIi4vZGUtYXRcIjogNjAyMTcsXG5cdFwiLi9kZS1hdC5qc1wiOiA2MDIxNyxcblx0XCIuL2RlLWNoXCI6IDYwODk0LFxuXHRcIi4vZGUtY2guanNcIjogNjA4OTQsXG5cdFwiLi9kZS5qc1wiOiA1OTc0MCxcblx0XCIuL2R2XCI6IDUzMDAsXG5cdFwiLi9kdi5qc1wiOiA1MzAwLFxuXHRcIi4vZWxcIjogNTA4MzcsXG5cdFwiLi9lbC5qc1wiOiA1MDgzNyxcblx0XCIuL2VuLWF1XCI6IDc4MzQ4LFxuXHRcIi4vZW4tYXUuanNcIjogNzgzNDgsXG5cdFwiLi9lbi1jYVwiOiA3NzkyNSxcblx0XCIuL2VuLWNhLmpzXCI6IDc3OTI1LFxuXHRcIi4vZW4tZ2JcIjogMjIyNDMsXG5cdFwiLi9lbi1nYi5qc1wiOiAyMjI0Myxcblx0XCIuL2VuLWllXCI6IDQ2NDM2LFxuXHRcIi4vZW4taWUuanNcIjogNDY0MzYsXG5cdFwiLi9lbi1pbFwiOiA0NzIwNyxcblx0XCIuL2VuLWlsLmpzXCI6IDQ3MjA3LFxuXHRcIi4vZW4taW5cIjogNDQxNzUsXG5cdFwiLi9lbi1pbi5qc1wiOiA0NDE3NSxcblx0XCIuL2VuLW56XCI6IDc2MzE5LFxuXHRcIi4vZW4tbnouanNcIjogNzYzMTksXG5cdFwiLi9lbi1zZ1wiOiAzMTY2Mixcblx0XCIuL2VuLXNnLmpzXCI6IDMxNjYyLFxuXHRcIi4vZW9cIjogOTI5MTUsXG5cdFwiLi9lby5qc1wiOiA5MjkxNSxcblx0XCIuL2VzXCI6IDU1NjU1LFxuXHRcIi4vZXMtZG9cIjogNTUyNTEsXG5cdFwiLi9lcy1kby5qc1wiOiA1NTI1MSxcblx0XCIuL2VzLW14XCI6IDk2MTEyLFxuXHRcIi4vZXMtbXguanNcIjogOTYxMTIsXG5cdFwiLi9lcy11c1wiOiA3MTE0Nixcblx0XCIuL2VzLXVzLmpzXCI6IDcxMTQ2LFxuXHRcIi4vZXMuanNcIjogNTU2NTUsXG5cdFwiLi9ldFwiOiA1NjAzLFxuXHRcIi4vZXQuanNcIjogNTYwMyxcblx0XCIuL2V1XCI6IDc3NzYzLFxuXHRcIi4vZXUuanNcIjogNzc3NjMsXG5cdFwiLi9mYVwiOiA3Njk1OSxcblx0XCIuL2ZhLmpzXCI6IDc2OTU5LFxuXHRcIi4vZmlcIjogMTE4OTcsXG5cdFwiLi9maS5qc1wiOiAxMTg5Nyxcblx0XCIuL2ZpbFwiOiA0MjU0OSxcblx0XCIuL2ZpbC5qc1wiOiA0MjU0OSxcblx0XCIuL2ZvXCI6IDk0Njk0LFxuXHRcIi4vZm8uanNcIjogOTQ2OTQsXG5cdFwiLi9mclwiOiA5NDQ3MCxcblx0XCIuL2ZyLWNhXCI6IDYzMDQ5LFxuXHRcIi4vZnItY2EuanNcIjogNjMwNDksXG5cdFwiLi9mci1jaFwiOiA1MjMzMCxcblx0XCIuL2ZyLWNoLmpzXCI6IDUyMzMwLFxuXHRcIi4vZnIuanNcIjogOTQ0NzAsXG5cdFwiLi9meVwiOiA1MDQ0LFxuXHRcIi4vZnkuanNcIjogNTA0NCxcblx0XCIuL2dhXCI6IDI5Mjk1LFxuXHRcIi4vZ2EuanNcIjogMjkyOTUsXG5cdFwiLi9nZFwiOiAyMTAxLFxuXHRcIi4vZ2QuanNcIjogMjEwMSxcblx0XCIuL2dsXCI6IDM4Nzk0LFxuXHRcIi4vZ2wuanNcIjogMzg3OTQsXG5cdFwiLi9nb20tZGV2YVwiOiAyNzg4NCxcblx0XCIuL2dvbS1kZXZhLmpzXCI6IDI3ODg0LFxuXHRcIi4vZ29tLWxhdG5cIjogMjMxNjgsXG5cdFwiLi9nb20tbGF0bi5qc1wiOiAyMzE2OCxcblx0XCIuL2d1XCI6IDk1MzQ5LFxuXHRcIi4vZ3UuanNcIjogOTUzNDksXG5cdFwiLi9oZVwiOiAyNDIwNixcblx0XCIuL2hlLmpzXCI6IDI0MjA2LFxuXHRcIi4vaGlcIjogMzAwOTQsXG5cdFwiLi9oaS5qc1wiOiAzMDA5NCxcblx0XCIuL2hyXCI6IDMwMzE2LFxuXHRcIi4vaHIuanNcIjogMzAzMTYsXG5cdFwiLi9odVwiOiAyMjEzOCxcblx0XCIuL2h1LmpzXCI6IDIyMTM4LFxuXHRcIi4vaHktYW1cIjogMTE0MjMsXG5cdFwiLi9oeS1hbS5qc1wiOiAxMTQyMyxcblx0XCIuL2lkXCI6IDI5MjE4LFxuXHRcIi4vaWQuanNcIjogMjkyMTgsXG5cdFwiLi9pc1wiOiA5MDEzNSxcblx0XCIuL2lzLmpzXCI6IDkwMTM1LFxuXHRcIi4vaXRcIjogOTA2MjYsXG5cdFwiLi9pdC1jaFwiOiAxMDE1MCxcblx0XCIuL2l0LWNoLmpzXCI6IDEwMTUwLFxuXHRcIi4vaXQuanNcIjogOTA2MjYsXG5cdFwiLi9qYVwiOiAzOTE4Myxcblx0XCIuL2phLmpzXCI6IDM5MTgzLFxuXHRcIi4vanZcIjogMjQyODYsXG5cdFwiLi9qdi5qc1wiOiAyNDI4Nixcblx0XCIuL2thXCI6IDEyMTA1LFxuXHRcIi4va2EuanNcIjogMTIxMDUsXG5cdFwiLi9ra1wiOiA0Nzc3Mixcblx0XCIuL2trLmpzXCI6IDQ3NzcyLFxuXHRcIi4va21cIjogMTg3NTgsXG5cdFwiLi9rbS5qc1wiOiAxODc1OCxcblx0XCIuL2tuXCI6IDc5MjgyLFxuXHRcIi4va24uanNcIjogNzkyODIsXG5cdFwiLi9rb1wiOiAzMzczMCxcblx0XCIuL2tvLmpzXCI6IDMzNzMwLFxuXHRcIi4va3VcIjogMTQwOCxcblx0XCIuL2t1LmpzXCI6IDE0MDgsXG5cdFwiLi9reVwiOiAzMzI5MSxcblx0XCIuL2t5LmpzXCI6IDMzMjkxLFxuXHRcIi4vbGJcIjogMzY4NDEsXG5cdFwiLi9sYi5qc1wiOiAzNjg0MSxcblx0XCIuL2xvXCI6IDU1NDY2LFxuXHRcIi4vbG8uanNcIjogNTU0NjYsXG5cdFwiLi9sdFwiOiA1NzAxMCxcblx0XCIuL2x0LmpzXCI6IDU3MDEwLFxuXHRcIi4vbHZcIjogMzc1OTUsXG5cdFwiLi9sdi5qc1wiOiAzNzU5NSxcblx0XCIuL21lXCI6IDM5ODYxLFxuXHRcIi4vbWUuanNcIjogMzk4NjEsXG5cdFwiLi9taVwiOiAzNTQ5Myxcblx0XCIuL21pLmpzXCI6IDM1NDkzLFxuXHRcIi4vbWtcIjogOTU5NjYsXG5cdFwiLi9tay5qc1wiOiA5NTk2Nixcblx0XCIuL21sXCI6IDg3MzQxLFxuXHRcIi4vbWwuanNcIjogODczNDEsXG5cdFwiLi9tblwiOiA1MTE1LFxuXHRcIi4vbW4uanNcIjogNTExNSxcblx0XCIuL21yXCI6IDEwMzcwLFxuXHRcIi4vbXIuanNcIjogMTAzNzAsXG5cdFwiLi9tc1wiOiA5ODQ3LFxuXHRcIi4vbXMtbXlcIjogNDEyMzcsXG5cdFwiLi9tcy1teS5qc1wiOiA0MTIzNyxcblx0XCIuL21zLmpzXCI6IDk4NDcsXG5cdFwiLi9tdFwiOiA3MjEyNixcblx0XCIuL210LmpzXCI6IDcyMTI2LFxuXHRcIi4vbXlcIjogNTYxNjUsXG5cdFwiLi9teS5qc1wiOiA1NjE2NSxcblx0XCIuL25iXCI6IDY0OTI0LFxuXHRcIi4vbmIuanNcIjogNjQ5MjQsXG5cdFwiLi9uZVwiOiAxNjc0NCxcblx0XCIuL25lLmpzXCI6IDE2NzQ0LFxuXHRcIi4vbmxcIjogOTM5MDEsXG5cdFwiLi9ubC1iZVwiOiA1OTgxNCxcblx0XCIuL25sLWJlLmpzXCI6IDU5ODE0LFxuXHRcIi4vbmwuanNcIjogOTM5MDEsXG5cdFwiLi9ublwiOiA4Mzg3Nyxcblx0XCIuL25uLmpzXCI6IDgzODc3LFxuXHRcIi4vb2MtbG5jXCI6IDkyMTM1LFxuXHRcIi4vb2MtbG5jLmpzXCI6IDkyMTM1LFxuXHRcIi4vcGEtaW5cIjogMTU4NTgsXG5cdFwiLi9wYS1pbi5qc1wiOiAxNTg1OCxcblx0XCIuL3BsXCI6IDY0NDk1LFxuXHRcIi4vcGwuanNcIjogNjQ0OTUsXG5cdFwiLi9wdFwiOiA4OTUyMCxcblx0XCIuL3B0LWJyXCI6IDU3OTcxLFxuXHRcIi4vcHQtYnIuanNcIjogNTc5NzEsXG5cdFwiLi9wdC5qc1wiOiA4OTUyMCxcblx0XCIuL3JvXCI6IDk2NDU5LFxuXHRcIi4vcm8uanNcIjogOTY0NTksXG5cdFwiLi9ydVwiOiAyMTc5Myxcblx0XCIuL3J1LmpzXCI6IDIxNzkzLFxuXHRcIi4vc2RcIjogNDA5NTAsXG5cdFwiLi9zZC5qc1wiOiA0MDk1MCxcblx0XCIuL3NlXCI6IDEwNDkwLFxuXHRcIi4vc2UuanNcIjogMTA0OTAsXG5cdFwiLi9zaVwiOiA5MDEyNCxcblx0XCIuL3NpLmpzXCI6IDkwMTI0LFxuXHRcIi4vc2tcIjogNjQyNDksXG5cdFwiLi9zay5qc1wiOiA2NDI0OSxcblx0XCIuL3NsXCI6IDE0OTg1LFxuXHRcIi4vc2wuanNcIjogMTQ5ODUsXG5cdFwiLi9zcVwiOiA1MTEwNCxcblx0XCIuL3NxLmpzXCI6IDUxMTA0LFxuXHRcIi4vc3JcIjogNDkxMzEsXG5cdFwiLi9zci1jeXJsXCI6IDc5OTE1LFxuXHRcIi4vc3ItY3lybC5qc1wiOiA3OTkxNSxcblx0XCIuL3NyLmpzXCI6IDQ5MTMxLFxuXHRcIi4vc3NcIjogOTU2MDYsXG5cdFwiLi9zcy5qc1wiOiA5NTYwNixcblx0XCIuL3N2XCI6IDk4NzYwLFxuXHRcIi4vc3YuanNcIjogOTg3NjAsXG5cdFwiLi9zd1wiOiA5MTE3Mixcblx0XCIuL3N3LmpzXCI6IDkxMTcyLFxuXHRcIi4vdGFcIjogMjczMzMsXG5cdFwiLi90YS5qc1wiOiAyNzMzMyxcblx0XCIuL3RlXCI6IDIzMTEwLFxuXHRcIi4vdGUuanNcIjogMjMxMTAsXG5cdFwiLi90ZXRcIjogNTIwOTUsXG5cdFwiLi90ZXQuanNcIjogNTIwOTUsXG5cdFwiLi90Z1wiOiAyNzMyMSxcblx0XCIuL3RnLmpzXCI6IDI3MzIxLFxuXHRcIi4vdGhcIjogOTA0MSxcblx0XCIuL3RoLmpzXCI6IDkwNDEsXG5cdFwiLi90a1wiOiAxOTAwNSxcblx0XCIuL3RrLmpzXCI6IDE5MDA1LFxuXHRcIi4vdGwtcGhcIjogNzU3NjgsXG5cdFwiLi90bC1waC5qc1wiOiA3NTc2OCxcblx0XCIuL3RsaFwiOiA4OTQ0NCxcblx0XCIuL3RsaC5qc1wiOiA4OTQ0NCxcblx0XCIuL3RyXCI6IDcyMzk3LFxuXHRcIi4vdHIuanNcIjogNzIzOTcsXG5cdFwiLi90emxcIjogMjgyNTQsXG5cdFwiLi90emwuanNcIjogMjgyNTQsXG5cdFwiLi90em1cIjogNTExMDYsXG5cdFwiLi90em0tbGF0blwiOiAzMDY5OSxcblx0XCIuL3R6bS1sYXRuLmpzXCI6IDMwNjk5LFxuXHRcIi4vdHptLmpzXCI6IDUxMTA2LFxuXHRcIi4vdWctY25cIjogOTI4OCxcblx0XCIuL3VnLWNuLmpzXCI6IDkyODgsXG5cdFwiLi91a1wiOiA2NzY5MSxcblx0XCIuL3VrLmpzXCI6IDY3NjkxLFxuXHRcIi4vdXJcIjogMTM3OTUsXG5cdFwiLi91ci5qc1wiOiAxMzc5NSxcblx0XCIuL3V6XCI6IDY3OTEsXG5cdFwiLi91ei1sYXRuXCI6IDYwNTg4LFxuXHRcIi4vdXotbGF0bi5qc1wiOiA2MDU4OCxcblx0XCIuL3V6LmpzXCI6IDY3OTEsXG5cdFwiLi92aVwiOiA2NTY2Nixcblx0XCIuL3ZpLmpzXCI6IDY1NjY2LFxuXHRcIi4veC1wc2V1ZG9cIjogMTQzNzgsXG5cdFwiLi94LXBzZXVkby5qc1wiOiAxNDM3OCxcblx0XCIuL3lvXCI6IDc1ODA1LFxuXHRcIi4veW8uanNcIjogNzU4MDUsXG5cdFwiLi96aC1jblwiOiA4MzgzOSxcblx0XCIuL3poLWNuLmpzXCI6IDgzODM5LFxuXHRcIi4vemgtaGtcIjogNTU3MjYsXG5cdFwiLi96aC1oay5qc1wiOiA1NTcyNixcblx0XCIuL3poLW1vXCI6IDk5ODA3LFxuXHRcIi4vemgtbW8uanNcIjogOTk4MDcsXG5cdFwiLi96aC10d1wiOiA3NDE1Mixcblx0XCIuL3poLXR3LmpzXCI6IDc0MTUyXG59O1xuXG5cbmZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0KHJlcSkge1xuXHR2YXIgaWQgPSB3ZWJwYWNrQ29udGV4dFJlc29sdmUocmVxKTtcblx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oaWQpO1xufVxuZnVuY3Rpb24gd2VicGFja0NvbnRleHRSZXNvbHZlKHJlcSkge1xuXHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKG1hcCwgcmVxKSkge1xuXHRcdHZhciBlID0gbmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIiArIHJlcSArIFwiJ1wiKTtcblx0XHRlLmNvZGUgPSAnTU9EVUxFX05PVF9GT1VORCc7XG5cdFx0dGhyb3cgZTtcblx0fVxuXHRyZXR1cm4gbWFwW3JlcV07XG59XG53ZWJwYWNrQ29udGV4dC5rZXlzID0gZnVuY3Rpb24gd2VicGFja0NvbnRleHRLZXlzKCkge1xuXHRyZXR1cm4gT2JqZWN0LmtleXMobWFwKTtcbn07XG53ZWJwYWNrQ29udGV4dC5yZXNvbHZlID0gd2VicGFja0NvbnRleHRSZXNvbHZlO1xubW9kdWxlLmV4cG9ydHMgPSB3ZWJwYWNrQ29udGV4dDtcbndlYnBhY2tDb250ZXh0LmlkID0gNDY3MDA7Il0sIm5hbWVzIjpbIm9wdGlvbnMiLCJzdHlsZVRhZ1RyYW5zZm9ybSIsInNldEF0dHJpYnV0ZXMiLCJpbnNlcnQiLCJkb21BUEkiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJTZWFyY2hDb250ZXh0IiwiY3JlYXRlQ29udGV4dCIsImdldFNlYXJjaFRhcmdldHMiLCJTZXR0aW5nc0NvbnRleHQiLCJzZXR0aW5ncyIsIm9wZW5TZXR0aW5nc0RpYWxvZyIsImZhQ29sbGVjdGlvbnMiLCJicmFuZHMiLCJkZWZhdWx0Iiwic29saWQiLCJyb3VuZCIsIkljb24iLCJwcm9wcyIsIm5hbWUiLCJjbGFzc05hbWUiLCJjb2xsZWN0aW9uIiwiaWNvblByb3BzIiwiZ3JvdXBDbGFzcyIsImljb25DbGFzcyIsImpvaW4iLCJwcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJkZWZhdWx0UHJvcHMiLCJJY29uQnV0dG9uIiwiaWNvbiIsInRleHQiLCJjaGlsZHJlbiIsIm9uQ2xpY2siLCJyZXN0IiwicGFyc2VCb29sZWFuIiwidmFsIiwiaW5jbHVkZXMiLCJ0b1N0cmluZyIsInRvTG93ZXJDYXNlIiwiYXBpQmFzZVVybCIsInByb2Nlc3MiLCJlbmFibGVHaXRIdWIiLCJlbmFibGVMb2NhbCIsImVuYWJsZURlbW8iLCJsb2FkQmVoYXZpb3VyQmluZGluZ3MiLCJiZWhhdmlvclNjaGVtYXMiLCJiZWhhdmlvckJpbmRpbmdzIiwiYmVoYXZpb3JzIiwiYmluZGluZ3MiLCJrZXljb2RlcyIsImtleWNvZGVHbHlwaHMiLCJsb2FkQXZhaWxhYmxlS2V5Ym9hcmRzIiwiZmV0Y2giLCJjb25maWciLCJyZXNwb25zZSIsImpzb24iLCJsb2FkS2V5Ym9hcmRGaWxlcyIsImtleWJvYXJkIiwicGF0aCIsImVuY29kZVVSSUNvbXBvbmVudCIsInVybCIsIm9rIiwiZXJyIiwiRXJyb3IiLCJ1cGRhdGVLZXltYXAiLCJrZXltYXAiLCJtZXRob2QiLCJoZWFkZXJzIiwiYm9keSIsIkpTT04iLCJzdHJpbmdpZnkiLCJzaG9ydGVzdEFsaWFzIiwiYWxpYXNlcyIsInNvcnQiLCJhIiwiYiIsImxlbmd0aCIsImZuUGF0dGVybiIsIm5vcm1hbGl6ZVpta0tleWNvZGVzIiwicmVkdWNlIiwia2V5Y29kZSIsImRlc2NyaXB0aW9uIiwiY29udGV4dCIsInN5bWJvbCIsImZhSWNvbiIsIm5hbWVzIiwiZmlsdGVyIiwibWF0Y2giLCJmbkNvZGUiLCJtYXAiLCJ2IiwiYmFzZSIsInBhcmFtcyIsImNvZGUiLCJwdXNoIiwiT2JqZWN0IiwiYXNzaWduIiwiaXNNb2RpZmllciIsInNwbGl0IiwiaSIsIkRlZmluaXRpb25zQ29udGV4dCIsImJlaGF2aW91cnMiLCJiZWhhdmlvckJpbmRzIiwiZ2x5cGhzIiwic2VsZWN0RGVmaW5pdGlvbnMiLCJzdGF0ZSIsImRlZmluaXRpb25zIiwiRGVmaW5pdGlvbnNDb250ZXh0UHJvdmlkZXIiLCJ1c2VTZWxlY3RvciIsImRpc3BhdGNoIiwidXNlRGlzcGF0Y2giLCJ1c2VFZmZlY3QiLCJQcm9taXNlIiwiYWxsIiwiYXBpIiwidGhlbiIsInNjaGVtYXMiLCJjbG9uZURlZXAiLCJpbmRleGVkIiwia2V5QnkiLCJub25lIiwibWFjcm9zIiwiYnlDb250ZXh0IiwidHlwZSIsIlByb3ZpZGVyIiwidmFsdWUiLCJ1c2VDb250ZXh0IiwibWVyZ2VkR2x5cGhzIiwidXNlTWVtbyIsImlzTWFjIiwid2luZG93IiwibmF2aWdhdG9yIiwicGxhdGZvcm0iLCJzdGFydHNXaXRoIiwiaXNXaW4iLCJjb21wYWN0IiwiYmFzaWMiLCJ1bmljb2RlIiwicGxhdGZvcm1zIiwibWFjIiwid2luIiwib3ZlcmxheSIsImdldE1lcmdlZEdseXBocyIsImdldCIsInBsYXRmb3JtR2x5cGhzIiwiZXh0ZW5kZWRCZWhhdmlvdXJzIiwiZnVsbExpc3QiLCJiZWhhdmlvciIsImxhYmVscyIsImJpbmQiLCJwcm9wZXJ0aWVzIiwibGFiZWwiLCJyYXciLCJtYWNybyIsImlkZW50aWZpZXIiLCJhdmFpbGFibGVMYXllcnMiLCJpc0VtcHR5IiwibGF5ZXJzIiwibGF5ZXIiLCJzb3VyY2VzIiwiYmVoYXZpb3Vyc0J5Q29udGV4dCIsInNlYXJjaFRhcmdldHMiLCJiZWhhdmlvdXIiLCJwYXJhbSIsImVudW0iLCJjb25zb2xlIiwiZXJyb3IiLCJpZGVudGlmaWVycyIsImtleXMiLCJkZWZpbmVzIiwidW5kZWZpbmVkIiwiQWN0aW9uQnV0dG9uIiwic2Vjb25kYXJ5Iiwic3R5bGVzIiwiRGlhbG9nQm94IiwiZGlzbWlzc1RleHQiLCJjbGFzc2VzIiwib25EaXNtaXNzIiwid3JhcHBlciIsInBvc2l0aW9uIiwidG9wIiwibGVmdCIsIndpZHRoIiwiaGVpZ2h0IiwiYmFja2dyb3VuZENvbG9yIiwiYmFja2Ryb3BGaWx0ZXIiLCJ6SW5kZXgiLCJkaXNwbGF5IiwianVzdGlmeUNvbnRlbnQiLCJhbGlnbkl0ZW1zIiwiY2VudGVyT25seSIsImJhY2tncm91bmQiLCJwb2ludGVyRXZlbnRzIiwiY29udGVudCIsIk1vZGFsIiwidXNlUmVmIiwiaGFuZGxlQ2xpY2siLCJ1c2VDYWxsYmFjayIsImUiLCJjdXJyZW50IiwidGFyZ2V0IiwiY29udGFpbnMiLCJzdHlsZSIsIlJlYWN0RE9NIiwicmVmIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsIlByb3BlcnR5TmFtZSIsInByb3BlcnR5Iiwic2NoZW1hIiwidGl0bGUiLCJkZXByZWNhdGVkQnkiLCJERUZBVUxUX1NJWkUiLCJERUZBVUxUX1BBRERJTkciLCJnZXRDb21wdXRlZFBhcmFtcyIsInNpemUiLCJyb3RhdGlvbiIsIngiLCJ5IiwidSIsImgiLCJyeCIsInJ5IiwidHJhbnNmb3JtS2V5UG9seWdvbiIsInBvaW50IiwiYW5nbGUiLCJNYXRoIiwiUEkiLCJjb3MiLCJzaW4iLCJnZXRXcmFwcGVyRGltZW5zaW9ucyIsImxheW91dCIsImtleSIsInRyYW5zZm9ybWVkIiwieFZhbHVlcyIsInlWYWx1ZXMiLCJtaW4iLCJtYXgiLCJnZXRLZXlCb3VuZGluZ0JveCIsInciLCJyIiwiZ2V0V3JhcHBlclN0eWxlIiwibGF5b3V0T3JCQm94Iiwic2NhbGUiLCJvdmVycmlkZXMiLCJiYm94IiwiQXJyYXkiLCJpc0FycmF5IiwibWFyZ2luIiwicGFkZGluZyIsImRpbWVuc2lvbnMiLCJrZXlMYXlvdXQiLCJnZXRQb3NpdGlvbiIsInBpY2siLCJnZXRSb3RhdGlvbiIsImdldFNpemUiLCJQbGFjZXIiLCJwb3NpdGlvbmluZ1N0eWxlIiwidHJhbnNmb3JtT3JpZ2luIiwidHJhbnNmb3JtIiwiZ2V0S2V5U3R5bGVzIiwibGF5b3V0UHJvcFR5cGVzIiwiS2V5Ym9hcmRMYXlvdXQiLCJyZW5kZXJLZXkiLCJpbmRleCIsInNlbGVjdGFibGUiLCJ0aGVtZUNsYXNzIiwiRHJhZ1NlbGVjdENvbnRhaW5lciIsIm9uTW91c2VEb3duIiwic2VsZWN0aW5nIiwibmVnYXRlIiwicmVjdCIsInVzZURyYWdTZWxlY3RvciIsInBvbHlnb25zIiwib25TZWxlY3QiLCJ1c2VTdGF0ZSIsInNldFN0YXRlIiwiaGFuZGxlTW91c2VEb3duIiwiZXZlbnQiLCJlbGVtZW50IiwicGFyZW50Tm9kZSIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImdldFJlbGF0aXZlQW5jZXN0b3IiLCJjbGllbnRYIiwiY2xpZW50WSIsInByZXZlbnREZWZhdWx0Iiwic3RhcnQiLCJpbnRlcnNlY3RpbmciLCJvZmZzZXQiLCJvZmZzZXRSZWN0IiwiaGFuZGxlS2V5RG93biIsInJlcGVhdCIsInNoaWZ0S2V5IiwiaGFuZGxlS2V5VXAiLCJoYW5kbGVNb3VzZU1vdmUiLCJhbHRLZXkiLCJ4MCIsInkwIiwiY2xhbXAiLCJyaWdodCIsImJvdHRvbSIsImFicyIsImdldEludGVyc2VjdGluZ1BvbHlnb25zIiwiaGFuZGxlTW91c2VVcCIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwib25Nb3VzZU1vdmUiLCJhY2MiLCJwb2ludHMiLCJzb21lIiwiVGlwIiwiY2xhc3NOYW1lcyIsIkxheW91dENvbnRleHQiLCJiaW5kaW5nQ291bnQiLCJ3cmFwcGVyRGltZW5zaW9ucyIsIndyYXBwZXJTdHlsZSIsIkxheW91dENvbnRleHRQcm92aWRlciIsImxheW91dFNjYWxlIiwiZ2V0UG9seWdvbnMiLCJnZXRMYXlvdXRQb2x5Z29ucyIsIktleVBvc2l0aW9uU2VsZWN0b3IiLCJtYW51YWxTZWxlY3Rpb24iLCJtYW51YWxEZVNlbGVjdGlvbiIsImRyYWdTZWxlY3Rpb24iLCJkcmFnRGVTZWxlY3Rpb24iLCJwcm9tcHQiLCJvblVwZGF0ZSIsImtleVBvbHlnb25zIiwidXNlUmVkdWNlciIsImFjdGlvbiIsIm1hbnVhbFNlbGVjdGlvbkNvdW50IiwibWFudWFsRGVTZWxlY3Rpb25Db3VudCIsInVzZWREcmFnU2VsZWN0aW9uIiwidXNlZERyYWdEZVNlbGVjdGlvbiIsInNob3dTZWxlY3RUaXAiLCJzaG93RGVTZWxlY3RUaXAiLCJhY3Rpb25zIiwic2VsZWN0aW9uQWN0aW9ucyIsImhhbmRsZURyYWdTZWxlY3QiLCJoYW5kbGVTZWxlY3RLZXkiLCJpc1NlbGVjdGVkIiwia2V5UG9zaXRpb24iLCJkcmFnUHJvcHMiLCJzZWxlY3RlZEluZGljZXMiLCJwcmV2aWV3QWRkaW5nSW5kaWNlcyIsInByZXZpZXdSZW1vdmluZ0luZGljZXMiLCJpc1JlcXVpcmVkIiwiUmF3UHJvcGVydHlWYWx1ZSIsInByb3AiLCJyZXF1aXJlZCIsIm9uQ2hhbmdlIiwidXNlUmF3IiwiQ29uc3RQcm9wZXJ0eVZhbHVlIiwiY29uc3QiLCJTdHJpbmdQcm9wZXJ0eVZhbHVlIiwicGFyc2VkIiwicGxhY2Vob2xkZXIiLCJJbnRlZ2VyUHJvcGVydHlWYWx1ZSIsIk51bWJlciIsIkJvb2xlYW5Qcm9wZXJ0eVZhbHVlIiwiY2hlY2tlZCIsImN5Y2xlIiwiYXJyYXkiLCJuZXh0IiwiUmVzdWx0TGlzdCIsInJlc3VsdHMiLCJyZW5kZXJSZXN1bHQiLCJjdXJzb3JJbmRleCIsInNldEN1cnNvckluZGV4IiwibGlzdFJlZiIsIm1vdmVDdXJzb3IiLCJpbml0aWFsIiwic2Nyb2xsIiwic2VsZWN0b3IiLCJxdWVyeVNlbGVjdG9yIiwib2Zmc2V0UGFyZW50Iiwic2Nyb2xsVG9wIiwib2Zmc2V0SGVpZ2h0Iiwib2Zmc2V0VG9wIiwic2Nyb2xsSGVpZ2h0Iiwic2Nyb2xsSW50b1ZpZXciLCJoYW5kbGVIaWdobGlnaHROZXh0IiwiaGFuZGxlSGlnaHRpZ2h0UHJldiIsImhhbmRsZVNlbGVjdEFjdGl2ZSIsIkFycm93RG93biIsIkFycm93VXAiLCJFbnRlciIsInN0b3BQcm9wYWdhdGlvbiIsInJlc3VsdCIsIm9uRG91YmxlQ2xpY2siLCJvbk1vdXNlT3ZlciIsImZvY3VzSW5wdXQiLCJub2RlIiwiZm9jdXMiLCJzZWxlY3QiLCJTZWFyY2hGaWx0ZXIiLCJjaG9pY2VzIiwic2VhcmNoS2V5IiwicmVuZGVyUmVzdWx0cyIsImluaXRpYWxRdWVyeSIsInVzZVNlYXJjaCIsInF1ZXJ5Iiwic2V0UXVlcnkiLCJsaW1pdCIsImZ1enp5c29ydCIsIm9iaiIsInNlYXJjaCIsImhhbmRsZUtleVByZXNzIiwiQ2hvaWNlc1BpY2tlciIsImZvcm1hdHRlZENob2ljZXMiLCJyZW5kZXJTZWFyY2hSZXN1bHQiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsIl9faHRtbCIsImNob2ljZSIsIkVudW1Qcm9wZXJ0eVZhbHVlIiwiaGFuZGxlQ2hhbmdlIiwiaW5kZXhPZiIsIk11bHRpU2VsZWN0UHJvcGVydHlWYWx1ZSIsIiRzb3VyY2UiLCJzb3VyY2UiLCIka2V5IiwidXNlU2NoZW1hQ2hvaWNlcyIsInNlbGVjdGVkIiwiTXVsdGlTZWxlY3QiLCJNdWx0aVNlbGVjdENoaXBzIiwiTXVsdGlTZWxlY3RDaGVja2JveGVzIiwiYWRkaW5nIiwic2V0QWRkaW5nIiwiYWRkQ2hvaWNlIiwicmVtb3ZlIiwiRW51bVBpY2tlciIsIm5vZGVTaGFwZSIsImJpbmROb2RlIiwiR2VuZXJpY1BpY2tlciIsIkhTQlBpY2tlciIsInMiLCJsIiwiaHNsIiwic2V0SHNsIiwiaGFuZGxlQ29uZmlybSIsImNvbG9yIiwiZGlzYWJsZUFscGhhIiwib25DaGFuZ2VDb21wbGV0ZSIsInRleHRBbGlnbiIsInRyZWVUb1NlcXVlbmNlIiwidHJlZSIsInNlcXVlbmNlVG9UcmVlIiwic2VxIiwibGVmdE1vZGlmaWVycyIsInJpZ2h0TW9kaWZpZXJzIiwiTW9kaWZpZXJzUm93Iiwicm93IiwibW9kIiwiTW9kaWZpZXJzUGlja2VyIiwiaGFuZGxlU2VsZWN0aW9uIiwibW9kaWZpZXIiLCJOdWxsS2V5IiwiZ2V0U291cmNlVGl0bGUiLCJyZW5kZXJTb3VyY2UiLCJCaW5kVmFsdWUiLCJfaXNQbGFjZWhvbGRlciIsImJpbmRQcm9wVHlwZXMiLCJjb2RlcyIsImNvZGVMYWJlbHMiLCJGcmFnbWVudCIsIm1pc3NpbmciLCJnZXRCZWhhdmlvdXJQYXJhbXMiLCJwYXJzZWRQYXJhbXMiLCJmaXJzdFBhcnNlZFBhcmFtIiwiY29tbWFuZHMiLCJjb25jYXQiLCJtYWtlSW5kZXgiLCJ0cmF2ZXJzZSIsImZvckVhY2giLCJpc0NvbXBsZXgiLCJub3JtYWxpemVkIiwiYmVoYXZpb3VyUGFyYW1zIiwiZmlyc3QiLCJpc0xvbmdTeW1ib2wiLCJpc011bHRpUGFyYW0iLCJpc05lc3RlZFBhcmFtIiwiY3JlYXRlUHJvbXB0TWVzc2FnZSIsInByb21wdE1hcHBpbmciLCJjb21tYW5kIiwiaHlkcmF0ZVRyZWUiLCJoeWRyYXRlTm9kZSIsInNsb3QiLCJhcyIsImdldFNvdXJjZVZhbHVlIiwibW9kaWZpZXJzTWFwIiwiTFNIRlQiLCJMQ1RSTCIsIkxBTFQiLCJMR1VJIiwiUlNIRlQiLCJSQ1RSTCIsIlJBTFQiLCJSR1VJIiwicmVzdWx0TGlzdFN0eWxlIiwiS2V5Y29kZVBpY2tlciIsImluaXRpYWxNb2RpZmllcnMiLCJzbGljZSIsInNlbGVjdGVkTW9kaWZpZXJzIiwic2V0U2VsZWN0ZWRNb2RpZmllcnMiLCJhdCIsInNlbGVjdGVkS2V5Y29kZSIsInNldFNlbGVjdGVkS2V5Y29kZSIsImh5ZHJhdGVkIiwibW9kaWZpZXJzIiwibW9kaWZpZXJGdW5jdGlvbnMiLCJoYW5kbGVTZWxlY3RLZXljb2RlIiwiZ2FwIiwiUmF3VmFsdWVQaWNrZXIiLCJpbml0aWFsVmFsdWUiLCJzZXRWYWx1ZSIsImlzTmFOIiwib25LZXlEb3duIiwiREVGQVVMVF9CSU5EX0JFSEFWSU9VUiIsInNlbGVjdExheWVycyIsImxheWVyc1NsaWNlIiwiY3JlYXRlU2xpY2UiLCJpbml0aWFsU3RhdGUiLCJyZWR1Y2VycyIsImNyZWF0ZUxheWVyIiwidGltZXMiLCJwYXlsb2FkIiwiY3JlYXRlRW1wdHlCaW5kaW5nIiwidXBkYXRlTGF5ZXJNZXRhZGF0YSIsImxheWVySW5kZXgiLCJyZW5hbWVMYXllciIsImRlbGV0ZUxheWVyIiwic3BsaWNlIiwidXBkYXRlS2V5QmluZGluZyIsImJpbmRJbmRleCIsImJpbmRpbmciLCJ1cGRhdGVTZW5zb3JCaW5kaW5ncyIsInNlbnNvckJpbmRpbmdzIiwic2Vuc29ySW5kZXgiLCJyZWJpbmRUcmFuc3BhcmVudFRvS2V5UHJlc3MiLCJyZWJpbmRUcmFuc3BhcmVudFRvTm9uZSIsInJlYmluZE5vbmVUb0tleXByZXNzIiwicmViaW5kTm9uZVRvVHJhbnNwYXJlbnQiLCJyZWJpbmRFbXB0eUtleXByZXNzVG9UcmFuc3BhcmVudCIsInJlYmluZEVtcHR5S2V5cHJlc3NUb05vbmUiLCJMYXllclBpY2tlciIsIlZhbHVlUGlja2VyIiwib25DYW5jZWwiLCJwaWNrZXJQcm9wcyIsIlBpY2tlckNvbXBvbmVudCIsImhlbHBlciIsIkh1ZVNhdFZhbFBpY2tlciIsInNlYXJjaFRocmVzaG9sZCIsImZyZWVGb3JtIiwid2l0aG91dEluZGV4IiwicmVwbGFjZUluZGV4IiwiQmVoYXZpb3Jzc1Byb3BlcnR5VmFsdWUiLCJzZWxlY3Rpb24iLCJlZGl0aW5nIiwic2V0RWRpdGluZyIsImluc2VydFBoYW5kbGUiLCJ1cGRhdGVQaGFuZGxlIiwicmVtb3ZlUGhhbmRsZSIsInBoYW5kbGUiLCJvdXRlclN0eWxlIiwiY3Vyc29yIiwidmVydGljYWxBbGlnbiIsImJvcmRlciIsImJvcmRlclJhZGl1cyIsImlubmVyU3R5bGUiLCJoYW5kbGVTZWxlY3RQYXJhbXMiLCJHZW5lcmljQmluZE5vZGUiLCJCaW5kUGFyYW1saXN0Iiwic2xvdHMiLCJCaW5kUGFyYW0iLCJCaW5kQ29tcG9uZW50IiwiSHVlU2F0VmFsQmluZE5vZGUiLCJLZXljb2RlQmluZE5vZGUiLCJyb290Iiwid3JhcHBlclByb3BzIiwiQmluZGluZyIsInNob3J0U3ltYm9sIiwiaGlkZUJlaGF2aW91ciIsImJpbmRUcmVlIiwiZXJyb3JzIiwiaGFzRXJyb3JzIiwiaGFuZGxlU2VsZWN0Tm9kZSIsIm5vZGVJbmRleCIsInVwZGF0ZWQiLCJ0YXJnZXROb2RlIiwiaGFuZGxlU2VsZWN0VHJlZSIsIm9sZEFkZGl0aW9uYWxQYXJhbXMiLCJhZGRpdGlvbmFsUGFyYW1zIiwicCIsIktleSIsImtleVdyYXBwZXJQcm9wcyIsIkJpbmRpbmdzUHJvcGVydHlWYWx1ZSIsImluc2VydEJpbmRpbmciLCJ1cGRhdGVCaW5kaW5nIiwicmVtb3ZlQmluZGluZyIsIlByb3BlcnR5VmFsdWUiLCJ2YWxpZGF0ZURldmljZXRyZWVOb2RlTmFtZSIsInZhbGlkYXRlRGV2aWNldHJlZUlkZW50aWZpZXIiLCJ2YWxpZGF0ZURldmljZXRyZWVMYWJlbCIsIklucHV0IiwidmFsaWRhdG9yIiwiaXNDb21iaW5lZCIsIm5vZGVMYWJlbCIsImxhYmVsUHJvcCIsIkJlaGF2aW9ySGVhZGVyIiwiY29tcGF0aWJsZSIsIkJlaGF2aW9ySWRlbnRpZmllcnMiLCJuYW1lRnJvbUJpbmQiLCJzZXROYW1lRnJvbUJpbmQiLCJsYWJlbEZyb21CaW5kIiwic2V0TGFiZWxGcm9tQmluZCIsImhhbmRsZVVwZGF0ZU5vZGVOYW1lIiwiaGFuZGxlVXBkYXRlTm9kZUxhYmVsIiwidG9VcHBlckNhc2UiLCJ1c2VJZGVudGlmaWVyVXBkYXRlcnMiLCJoYW5kbGVVcGRhdGVMYWJlbFByb3BlcnR5IiwicmVhZE9ubHkiLCJkaXNhYmxlZCIsInBlbmRpbmdDaGFuZ2VzIiwic2V0UGVuZGluZ0NoYW5nZXMiLCJoYW5kbGVQcm9wVmFsdWVDaGFuZ2UiLCJjb25maXJtIiwic2NoZW1hUHJvcHMiLCJwcm9wZXJ0aWVzTGlzdCIsIm1heEhlaWdodCIsIm92ZXJmbG93Iiwib21pdCIsImhhbmRsZURlbGV0ZVByb3AiLCJMaW5rIiwiaHJlZiIsImV4dGVybmFsIiwic2hvd0V4dGVybmFsIiwicmVsIiwiQmV0YU5vdGljZURpYWxvZyIsImlzc3Vlc0xpbmsiLCJrbm93bkJlaGF2aW9yVHlwZXMiLCJOZXdCZWhhdmlvck1vZGFsIiwicGVuZGluZ1NlbGVjdGlvbiIsInNldFBlbmRpbmdTZWxlY3Rpb24iLCJjcmVhdGVCZWhhdmlvciIsInByb3BTY2hlbWEiLCJpc0JpbmRpbmdUeXBlIiwic2VsZWN0QmVoYXZpb3JzIiwiYmVoYXZpb3JzU2xpY2UiLCJhZGRCZWhhdmlvciIsInVwZGF0ZUJlaGF2aW9yIiwiYmVoYXZpb3JJbmRleCIsInJlc29sdmVCZWhhdmlvclBhcmFtcyIsImRlbGV0ZUJlaGF2aW9yIiwiZXhwZXJpbWVudGFsU2V0dGluZ3MiLCJjcmVhdGluZyIsInNldENyZWF0aW5nIiwiYmV0YURpc2NsYWltZXJWaXNpYmxlIiwic2V0QmV0YURpc2NsYWltZXJWaXNpYmxlIiwiaGFuZGxlQWRkIiwiaGFuZGxlQWRkUGVuZGluZyIsInNldFRpbWVvdXQiLCJoYW5kbGVFZGl0IiwiaGFuZGxlRGVsZXRlIiwic2hvd0JldGFEaWFsb2ciLCJoaWRlQmV0YURpYWxvZyIsInRvZ2dsZUJldGEiLCJlbmFibGVCZWhhdmlvckVkaXRpbmciLCJTZWxlY3RLZXlDVEEiLCJDb21ib0lucHV0TWFwIiwia2V5UG9zaXRpb25zIiwic3RvcCIsImZuIiwib25LZXkiLCJtYXBwaW5nIiwiRWRpdGFibGVGaWVsZCIsInZhbGlkYXRlIiwicmVuZGVyIiwiYXR0ZW1wdGVkRW1wdHkiLCJjYW5jZWxFZGl0aW5nIiwiaGFuZGxlQ2xpY2tPdXRzaWRlIiwiRXNjYXBlIiwib3B0aW9uIiwiY29tYm8iLCJwZW5kaW5nIiwic2V0UGVuZGluZyIsImh0bWxGb3IiLCJpZCIsInRpbWVvdXRNcyIsInNsb3dSZWxlYXNlIiwic2VsZWN0Q29tYm9zIiwiY29tYm9zIiwiY29tYm9zU2xpY2UiLCJ1cGRhdGVDb21ib0JpbmRpbmciLCJjb21ib0luZGV4IiwidXBkYXRlQ29tYm9LZXlwb3NpdGlvbnMiLCJjcmVhdGVDb21ibyIsInJlbmFtZUNvbWJvIiwiZGVsZXRlQ29tYm8iLCJjdXN0b21pemVDb21ibyIsIkNvbWJvRWRpdG9yIiwiY29uZmlnRWRpdCIsInNldENvbmZpZ0VkaXQiLCJ2YWxpZGF0ZUNvbWJvSWRlbnRpZmllciIsImhhbmRsZUN1c3RvbWl6ZUNvbWJvIiwiaGFuZGxlUmVuYW1lQ29tYm8iLCJ1cGRhdGUiLCJoYW5kbGVVcGRhdGVCaW5kaW5ncyIsImhhbmRsZVVwZGF0ZUtleVBvc2l0aW9ucyIsIkxheWVyU2VsZWN0b3IiLCJhY3RpdmVMYXllciIsInJlbmFtaW5nIiwic2V0UmVuYW1pbmciLCJoYW5kbGVTZWxlY3QiLCJsYXllck5hbWUiLCJmaW5pc2hFZGl0aW5nIiwiQXJyb3dJY29uIiwiZGlyZWN0aW9uIiwieG1sbnMiLCJ2aWV3Qm94Iiwic3Ryb2tlIiwic3Ryb2tlV2lkdGgiLCJmaWxsIiwiZCIsIkVuY29kZXJCaW5kaW5nIiwic2Vuc29ycyIsImhhbmRsZVVwZGF0ZSIsIm9yaWdpbmFsQmluZGluZ3MiLCJmbGV4RGlyZWN0aW9uIiwic2Vuc29yIiwibGFiZWxUZXh0IiwiaW5jcmVtZW50IiwiZGVjcmVtZW50IiwiZm9udFZhcmlhbnQiLCJmb250U2l6ZSIsIm1hcmdpblRvcCIsIkFjdGlvbk1lbnUiLCJpc09wZW4iLCJzZXRPcGVuIiwiY2xvc2VBbmQiLCJjYWxsYmFjayIsIkxheWVyQWN0aW9uc01lbnUiLCJhZGRpdGlvbmFsQWN0aW9ucyIsInRyYW5zcGFyZW50VG9LZXlwcmVzcyIsInRyYW5zcGFyZW50VG9Ob25lIiwibm9uZVRvS2V5cHJlc3MiLCJub25lVG9UcmFuc3BhcmVudCIsImVtcHR5S2V5cHJlc3NUb1RyYW5zcGFyZW50IiwiZW1wdHlLZXlwcmVzc1RvTm9uZSIsIm9uQ2xvc2UiLCJQcm9tcHRGb3JGaXJzdExheWVyIiwiTGF5ZXJCaW5kaW5ncyIsImhhbmRsZVVwZGF0ZUJpbmQiLCJJTklUSUFMX1NUQVRFIiwia2V5c0hlbGQiLCJrZXlzSGVsZEJlZm9yZUxhc3RSZWxlYXNlIiwibWFwcGluZ3MiLCJBbHQiLCJDb250cm9sIiwiU2hpZnQiLCJNZXRhIiwiQXJyb3dMZWZ0IiwiQXJyb3dSaWdodCIsIlRhYiIsIkhvbWUiLCJFbmQiLCJQYWdlRG93biIsIlBhZ2VVcCIsIkJhY2tzcGFjZSIsIkRlbGV0ZSIsInVzZVF1aWNrQXNzaWdubWVudCIsImRlZmF1bHRTdGFydCIsImlzQWN0aXZlIiwic2V0SXNBY3RpdmUiLCJzZXRCaW5kSW5kZXgiLCJuZXh0QmluZCIsImFwcGxpZWRNb2RpZmllcnMiLCJjdHJsS2V5IiwibWV0YUtleSIsImdldE1vZGlmaWVycyIsIm1hcHBlZCIsIm1hcENoYXJhY3RlciIsInByZWZpeCIsImxvY2F0aW9uIiwiZ2V0U2lkZVByZWZpeCIsIm5vcm1hbGl6ZUtleSIsImdldEJpbmRGcm9tS2V5Iiwib25LZXlQcmVzcyIsInJlZHVjZUtleURvd24iLCJyZWR1Y2VLZXlVcCIsInVzZUtleUhhbmRsZXIiLCJzdGFydFF1aWNrQXNzaWdubWVudCIsImNhbmNlbFF1aWNrQXNzaWdubWVudCIsIlF1aWNrQXNzaWdubWVudE1vZGFsIiwic3RhdHVzIiwibWluV2lkdGgiLCJzZXRBY3RpdmVMYXllciIsInNob3dDb25maWciLCJzZXRTaG93Q29uZmlnIiwic2hvd1F1aWNrQXNzaWduTW9kYWwiLCJzZXRTaG93UXVpY2tBc3NpZ25Nb2RhbCIsIm9wZW5Db25maWciLCJvcGVuUXVpY2tBc3NpZ24iLCJjbG9zZVF1aWNrQXNzaWduIiwiaXNDb250cm9sQmluZGluZyIsIkRyb3Bab25lQ29udGFpbmVyIiwiZHJhZ2dpbmciLCJkcmFnTW9kZSIsImN1cnJlbnRUYXJnZXQiLCJzZXRDdXJyZW50VGFyZ2V0IiwiYmluZGluZ1Jvd3MiLCJyb3dzIiwiaXNSb3dFbXB0eSIsImdyb3VwSW50b1Jvd3MiLCJoYW5kbGVEcmFnRW50ZXIiLCJsb2ciLCJpc0N1cnJlbnRUYXJnZXQiLCJpc0VxdWFsIiwiaGFuZGxlRHJhZ0xlYXZlIiwiaGFuZGxlRHJvcCIsImNvbCIsImhhbGYiLCJvbkRyb3AiLCJEcm9wWm9uZVJvdyIsImlzRHJvcHBpbmciLCJvbkRyYWdFbnRlciIsIm9uRHJhZ0xlYXZlIiwiaiIsIkRyb3Bab25lQmVmb3JlIiwiRHJvcFpvbmVBZnRlciIsIkRyb3Bab25lIiwiY29udHJvbCIsInNpbmdsZVZhbHVlIiwicGF0dGVybk1hcHBpbmdzIiwicGF0dGVybiIsImNvbnZlcnQiLCJkaWdpdCIsImNoYXIiLCJzaW1wbGVNYXBwaW5ncyIsIiQiLCJfIiwic3RyaW5nIiwic2V0U3RyaW5nIiwic2VxdWVuY2UiLCJzZWxlY3RNYWNyb3MiLCJtYWNyb3NTbGljZSIsImFkZE1hY3JvIiwicmVuYW1lTWFjcm8iLCJkZWxldGVNYWNybyIsImFkZE1hY3JvQ29udHJvbEJpbmRpbmciLCJtYWNyb0luZGV4IiwiYWRkTWFjcm9LZXlCaW5kaW5nIiwidXBkYXRlTWFjcm9CaW5kaW5nIiwicmVvcmRlck1hY3JvQmluZGluZyIsInRhcmdldEluZGV4IiwiYXJyIiwiZGVsZXRlTWFjcm9CaW5kaW5nIiwiY3VzdG9taXplTWFjcm9PcHRpb25zIiwiTWFjcm9CaW5kcyIsInNldERyYWdnaW5nIiwic2VxdWVuY2VNb2RhbE9wZW4iLCJzZXRTZXF1ZW5jZU1vZGFsT3BlbiIsImNsZWFyRHJvcCIsImNsZWFyRHJhZyIsImRyYWdnYWJsZSIsIm9uRHJhZ1N0YXJ0IiwiZGF0YVRyYW5zZmVyIiwiaXRlbXMiLCJjbGVhckRhdGEiLCJtb2RlIiwiaGFuZGxlRHJhZ1N0YXJ0Iiwid2FpdE1zIiwidGFwTXMiLCJNYWNybyIsImJpbmRTaGFwZSIsInNhbml0eUNoZWNrUG9zaWl0aW9ucyIsImV2ZXJ5IiwiZ2V0RHVwbGljYXRlc0J5IiwiaXRlbXNCeUtleSIsImdyb3VwQnkiLCJ2YWx1ZXMiLCJncm91cCIsInNhbml0eUNoZWNrTm9kZU5hbWVzIiwibGF5ZXJOYW1lcyIsImNvbWJvTmFtZXMiLCJtYWNyb05hbWVzIiwiYmVoYXZpb3JOYW1lcyIsImdldEJlaGF2aW9yTm9kZU5hbWVzIiwiZHVwbGljYXRlcyIsInJlZGVmaW5lZCIsInJlc2VydmVkSWRlbnRpZmllcnMiLCJwYXNzd29yZE1hY3JvcyIsInNhbml0eUNoZWNrTm9kZUxhYmVscyIsImdldEJlaGF2aW9yTGFiZWxzIiwic2FuaXR5Q2hlY2tOb2RlUmVmZXJlbmNlcyIsIm5vZGVzQnlSZWYiLCJnZXRCZWhhdmlvclJlZmVyZW5jZXMiLCJub2RlcyIsIkRlZmF1bHRXYXJuaW5nSXRlbSIsIml0ZW0iLCJXYXJuaW5nQ2F0ZWdvcnkiLCJleHBsYW5hdGlvbiIsIndhcm5pbmdzIiwicmVuZGVyV2FybmluZyIsImNvbGxhcHNlZCIsInNldENvbGxhcHNlZCIsImlzc3VlIiwic2FuaXR5Q2hlY2tzIiwibm9kZU5hbWVzIiwibm9kZUxhYmVscyIsIm5vZGVSZWZlcmVuY2VzIiwibGF5b3V0TWlzc2luZ1Bvc2l0aW9ucyIsIm1heFdpZHRoIiwicGFkZGluZ0JvdHRvbSIsIlRhYnMiLCJ0YWJzIiwiZGVmYXVsdFRhYiIsImFjdGl2ZVRhYiIsInNldEFjdGl2ZVRhYiIsInRhYiIsInRhYkNsYXNzZXMiLCJzZWxlY3RLZXltYXAiLCJLZXlib2FyZCIsInNhbml0eUNoZWNrTGF5b3V0Iiwic2FuaXR5Q2hlY2siLCJ3YXJuaW5nQ291bnQiLCJjb21wb25lbnQiLCJMYXllckVkaXRvciIsImtleW1hcFByb3B0eXBlcyIsInJlcG9zaXRvcnlVcmwiLCJHaXRIdWJMaW5rIiwiZm9udFN0eWxlIiwiU2V0dGluZ3MiLCJoYW5kbGVVcGRhdGVTZXR0aW5nIiwidW5pY29kZUdseXBocyIsIlNwaW5uZXIiLCJ3ZWJzb2NrZXRVcmwiLCJBUEkiLCJ0aGlzIiwidG9rZW4iLCJBdXRob3JpemF0aW9uIiwiYXhpb3MiLCJlbWl0IiwiaW5pdGlhbGl6aW5nIiwiaW5pdEV2ZW50cyIsImluc3RhbGxhdGlvblVybCIsIlVSTFNlYXJjaFBhcmFtcyIsImJlZ2luTG9naW5GbG93IiwibG9jYWxTdG9yYWdlIiwiYXV0aF90b2tlbiIsImhpc3RvcnkiLCJyZXBsYWNlU3RhdGUiLCJwYXRobmFtZSIsIl9yZXF1ZXN0IiwiZGF0YSIsInN1c3BlbmRlZCIsImluc3RhbGxhdGlvbnMiLCJpbnN0YWxsYXRpb24iLCJzdXNwZW5kZWRfYXQiLCJ3YXJuIiwidXNlcm5hbWUiLCJyZXBvc2l0b3JpZXMiLCJyZXBvSW5zdGFsbGF0aW9uTWFwIiwiYnVmZmVyZWRNZXNzYWdlcyIsInNlbmQiLCJtZXNzYWdlIiwic29ja2V0IiwicmVhZHlTdGF0ZSIsIldlYlNvY2tldCIsIk9QRU4iLCJvbm9wZW4iLCJEYXRlIiwic2hpZnQiLCJmbHVzaCIsInNldEludGVydmFsIiwib25jbG9zZSIsIm9uZXJyb3IiLCJvbm1lc3NhZ2UiLCJwYXJzZSIsIndvcmtmbG93X3J1biIsIm9uIiwiZmV0Y2hBdmFpbGFibGVGZWF0dXJlcyIsInJlbW92ZUl0ZW0iLCJpbnN0YWxsYXRpb25JZCIsImZpbmQiLCJodG1sX3VybCIsInJlcG9zaXRvcnlfc2VsZWN0aW9uIiwicmVwbyIsImZ1bGxfbmFtZSIsInJlcG9zaXRvcnkiLCJicmFuY2giLCJVUkwiLCJzZXQiLCJsYXlvdXRzIiwiaW5mbyIsImRlZmF1bHRMYXlvdXQiLCJwcmVmZXJyZWRMYXlvdXQiLCJjaG9zZW4iLCJyZXBsYWNlIiwibGF5b3V0TWV0YWRhdGEiLCJrZXlib2FyZHMiLCJkZWZhdWx0S2V5bWFwIiwiaXNHaXRIdWJBdXRob3JpemVkIiwiYmV0YUZlYXR1cmVzIiwiZmVhdHVyZXMiLCJFdmVudEVtaXR0ZXIiLCJnb29kQ29uY2x1c2lvbnMiLCJiYWRDb25jbHVzaW9ucyIsIkZ1enp5VGltZXN0YW1wIiwidGltZXN0YW1wIiwibW9tZW50IiwiZnJvbU5vdyIsImZ1enp5Iiwic2V0RnV6enkiLCJpbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJ0b0lTT1N0cmluZyIsIkJ1aWxkTGluayIsImxhdGVzdFJ1biIsIm1hcHBlZEljb24iLCJjb25jbHVzaW9uIiwiaGVhZF9zaGEiLCJ1cGRhdGVkX2F0IiwiY3JlYXRlZF9hdCIsIkNvbW1pdCIsIm9uQ29uZmlybSIsInNldE1lc3NhZ2UiLCJzdGF0ZVNlbGVjdG9yIiwiU291cmNlQWN0aW9ucyIsInNvdXJjZU90aGVyIiwiX3VubW9kaWZpZWRLZXltYXAiLCJzYXZpbmciLCJsYXRlc3RCdWlsZCIsImhhc0NoYW5nZWQiLCJpcyIsImhhbmRsZUNvbW1pdENoYW5nZXMiLCJnaXRodWIiLCJjb21taXREaWFsb2dPcGVuIiwiR2l0SHViSXNzdWVzTGluayIsIkdpdEh1Yldpa2lMYXlvdXRzTGluayIsImxheW91dFRvb2xzTGluayIsIkRpc2NvcmRQcm9maWxlTGluayIsIkdlbmVyYWxIZWxwT2ZmZXJDb3B5IiwiS2V5bWFwTGF5b3V0UmVzb3VyY2VzIiwiTGF5b3V0R2VuZXJhdGlvbkVycm9yIiwibGluZUhlaWdodCIsIkJ1dHRvbiIsImRhcmtNb2RlUHJlZmVyZW5jZSIsIm1hdGNoTWVkaWEiLCJpbnZlcnRlZE5ldXRyYWxDb2xvcnMiLCJjb2xvcnMiLCJTZWxlY3QiLCJ0aGVtZSIsImlzRGFyayIsIm1hdGNoZXMiLCJjb250YWluZXIiLCJiYXNlU3R5bGVzIiwibWVudSIsImlzU2VhcmNoYWJsZSIsIm9uRXJyb3IiLCJzZXRLZXlib2FyZHMiLCJzZXRLZXlib2FyZCIsInBlcnNpc3RlZEtleWJvYXJkIiwiZ2V0SXRlbSIsImluaXRpYWxTZWxlY3Rpb24iLCJkaWFsb2ciLCJoYW5kbGVTZWxlY3RLZXlib2FyZCIsInNldEl0ZW0iLCJnZXRPcHRpb25WYWx1ZSIsImdldE9wdGlvbkxhYmVsIiwiRGVtb0hlbHBEaWFsb2ciLCJkZW1vTGluayIsInNob3dEZW1vSGVscERpYWxvZyIsInNldFNob3dEZW1vSGVscERpYWxvZyIsImxpc3RTdHlsZSIsImZvbnRGYW1pbHkiLCJsaXN0SXRlbVN0eWxlIiwiVmFsaWRhdGlvbkVycm9ycyIsImZpbGUiLCJmaWxlRnJvbVRpdGxlIiwiUkVQT1NJVE9SWSIsIkJSQU5DSCIsIktFWUJPQVJEIiwiZ2V0UGVyc2lzdGVkS2V5Ym9hcmQiLCJyZXBvSWQiLCJibG9ja2VkIiwiaW5pdGlhbGl6ZWQiLCJzZWxlY3RlZFJlcG9JZCIsInNlbGVjdGVkQnJhbmNoTmFtZSIsInNlbGVjdGVkS2V5Ym9hcmQiLCJicmFuY2hlcyIsImxvYWRpbmciLCJ3YXJuaW5nRmxhZ3MiLCJwaWNrZXJTbGljZSIsImNsZWFyU2VsZWN0aW9uIiwiaW50ZWdyYXRpb25Jbml0aWFsaXplZCIsInBlcnNpc3RlZFJlcG9JZCIsInN0b3JhZ2UiLCJsb2FkaW5nQnJhbmNoZXNMaXN0IiwibG9hZGVkQnJhbmNoZXNMaXN0IiwiYXZhaWxhYmxlIiwiZGVmYXVsdEJyYW5jaCIsImRlZmF1bHRfYnJhbmNoIiwicHJldmlvdXNCcmFuY2giLCJsb2FkaW5nS2V5Ym9hcmRzTGlzdCIsImxvYWRlZEtleWJvYXJkc0xpc3QiLCJkZWZhdWx0S2V5Ym9hcmQiLCJwcmV2aW91c0tleWJvYXJkIiwic2VsZWN0ZWRSZXBvc2l0b3J5Iiwic2VsZWN0ZWRCcmFuY2giLCJrZXlib2FyZExvYWRpbmciLCJrZXlib2FyZExvYWRlZFN1Y2Nlc3MiLCJ1c2VQaWNrZXJTdG9yZSIsInJlZHVjZXIiLCJkaXNwYXRjaGVycyIsIlN1Z2dlc3RSZW1vdGVSZXBvIiwibWlzc2luZ1BhdGgiLCJTdWdnZXN0UmVwb1NlbGVjdGlvbiIsIlN1Z2dlc3RXcm9uZ1JlcG8iLCJvdGhlclJlcG9PckJyYW5jaEF2YWlsYWJsZSIsIk1pc3NpbmdMYXlvdXQiLCJMb2dpbiIsIkluc3RhbGwiLCJncmVldGluZyIsIk1pc3NpbmdLZXltYXBzIiwiR2l0aEh1YkV4cGFuZGVkUGlja2VyIiwic2VsZWN0aW9ucyIsInJlcG9zaXRvcnlDaG9pY2VzIiwiYnJhbmNoQ2hvaWNlcyIsImtleWJvYXJkQ2hvaWNlcyIsInNlbGVjdGVkUmVwb0Nob2ljZSIsInNlbGVjdGVkQnJhbmNoQ2hvaWNlIiwic2VsZWN0ZWRLZXlib2FyZENob2ljZSIsImdldFZhbHVlIiwiZnVsbCIsImZvcm1hdE9wdGlvbkxhYmVsIiwiaXNNaXNzaW5nQ29uZmlnIiwiaXNNYXRjaCIsImlzTWlzc2luZ0tleW1hcHMiLCJpbnRlbnQiLCJpc01pc3NpbmdMYXlvdXQiLCJpc01pc3NpbmdCb2FyZCIsIkdpdGh1YlBpY2tlciIsImV4dHJhcyIsImFjY291bnQiLCJsb2dpbiIsImtleWJvYXJkc0xpc3QiLCJ1c2VSZXBvc2l0b3J5T3B0aW9ucyIsIkJsb2NrZWQiLCJsYXlvdXRHZW5lcmF0aW9uRXJyb3IiLCJyZXBvVmFsaWRhdGlvbiIsImRpYWxvZ1Byb3BzIiwibG9hZEtleWJvYXJkIiwicmVsb2FkS2V5Ym9hcmQiLCJleHBhbmRlZCIsIm9uRXhwYW5kIiwic291cmNlQ2hvaWNlcyIsInNlbGVjdGVkU291cmNlIiwiZGVmYXVsdFNvdXJjZSIsIktleW1hcEJpbmRpbmdzVXNlUHJlcHJvY2Vzc29yTWFjcm9zIiwiS2V5bWFwUGFyc2luZ0ZhaWxlZCIsIktleW1hcFVzaW5nTWlyeW9rdSIsIk1pc3NpbmdSb290Tm9kZSIsIlpta05vZGVmcmVlQ29uZmlnIiwiU3VnZ2VzdEF1dG9MYXlvdXRUd2VhayIsIktleWJvYXJkUGlja2VyIiwidG9nZ2xlU3RhdGUiLCJzZXRUb2dnbGVTdGF0ZSIsIndyYXBwZXJSZWYiLCJzZXRTb3VyY2UiLCJhdXRvR2VuZXJhdGVkIiwic2V0TGF5b3V0SW5mbyIsInNob3dEaWFsb2ciLCJzZXRTaG93RGlhbG9nIiwiY2xvc2VEaWFsb2ciLCJpc0V4cGFuZGVkIiwic2V0RXhwYW5kZWQiLCJzZXRDb21wYWN0Iiwic2hvd0xheW91dEhlbHAiLCJlbmFibGVkIiwiaXNJbkRvY3VtZW50IiwiaXNJbldyYXBwZXIiLCJ1c2VDbGlja091dHNpZGVIYW5kbGVyIiwiaGFuZGxlS2V5Ym9hcmRTZWxlY3RlZCIsImdldEVycm9yRGlhbG9nIiwiaGFuZGxlRXJyb3IiLCJmb3JtYXRTdGFja0ZyYW1lIiwiZnJhbWUiLCJmaWxlTmFtZSIsImxpbmVOdW1iZXIiLCJjb2x1bW5OdW1iZXIiLCJuZXdHaXRodWJJc3N1ZSIsIlVuZXhwZWN0ZWRFcnJvciIsInN0YWNrIiwic2V0U3RhY2siLCJmb3JtYXR0ZWRFcnJvciIsInNldEZvcm1hdHRlZEVycm9yIiwiY29waWVkIiwic2V0Q29waWVkIiwiU3RhY2tUcmFjZSIsInBhcnNlU3RhY2siLCJ0cmltIiwiZm9ybWF0RXJyb3JUZXh0IiwiY2xpcGJvYXJkIiwid3JpdGVUZXh0IiwiRXJyb3JCb3VuZGFyeSIsIlJlYWN0IiwiS2V5bWFwU2F2ZUZhaWxlZCIsInNhdmVFcnJvciIsInNldHRpbmdzVmlzaWJsZSIsImhhbmRsZXIiLCJydW4iLCJoZWFkX2JyYW5jaCIsImJ1aWxkIiwib3RoZXIiLCJoYW5kbGVVcGRhdGVTZXR0aW5ncyIsIlNvdXJjZVBpY2tlciIsImxpZ2h0IiwiZGFyayIsInN5c3RlbSIsImluaXQiLCJrZXlib2FyZFJlZHVjZXIiLCJjb21iaW5lUmVkdWNlcnMiLCJiZWhhdmlvcnNSZWR1Y2VyIiwiY29tYm9zUmVkdWNlciIsImxheWVyc1JlZHVjZXIiLCJtYWNyb3NSZWR1Y2VyIiwiY29uZmlndXJlU3RvcmUiLCJuZXdTdGF0ZSIsInVuc2F2ZWQiLCJ0aGVtZXMiLCJkYXRhc2V0IiwiY3ljbGVUaGVtZSIsImFwcFJlZHVjZXIiLCJwcmVsb2FkZWRTdGF0ZSIsInN0b3JlIiwiX19fQ1NTX0xPQURFUl9FWFBPUlRfX18iLCJtb2R1bGUiLCJsb2NhbHMiLCJ3ZWJwYWNrQ29udGV4dCIsInJlcSIsIndlYnBhY2tDb250ZXh0UmVzb2x2ZSIsIl9fd2VicGFja19yZXF1aXJlX18iLCJvIiwicmVzb2x2ZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9