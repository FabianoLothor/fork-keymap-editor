/*! For license information please see main.23a00b74d1a04c65dfb9.js.LICENSE.txt */
(self.webpackChunkapp=self.webpackChunkapp||[]).push([[179],{89949:function(e,n,t){"use strict";var r=t(67294),o=t(20745),i=t(95998),a=t(93379),c=t.n(a),l=t(7795),s=t.n(l),u=t(90569),f=t.n(u),p=t(3565),d=t.n(p),y=t(19216),h=t.n(y),m=t(44589),b=t.n(m),A=t(51424),v={};v.styleTagTransform=b(),v.setAttributes=d(),v.insert=f().bind(null,"head"),v.domAPI=s(),v.insertStyleElement=h(),c()(A.Z,v),A.Z&&A.Z.locals&&A.Z.locals,t(56831);var g=t(39087),x={};x.styleTagTransform=b(),x.setAttributes=d(),x.insert=f().bind(null,"head"),x.domAPI=s(),x.insertStyleElement=h(),c()(g.Z,x),g.Z&&g.Z.locals&&g.Z.locals;var j=(0,r.createContext)({getSearchTargets:null}),C=(0,r.createContext)({settings:null,openSettingsDialog:null}),w=t(45697),E=t.n(w),O=t(85893);function k(e){return k="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},k(e)}var S=["name","className","collection"];function B(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function P(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==k(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==k(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===k(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}var I={brands:"fab",default:"fa",solid:"fas",round:"far"};function T(e){var n=e.name,t=e.className,r=e.collection,o=function(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}(e,S),i=I[r],a="fa-".concat(n);return(0,O.jsx)("span",function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?B(Object(t),!0).forEach((function(n){P(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):B(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}({className:[t,i,a].join(" ")},o))}T.propTypes={name:E().string.isRequired,className:E().string,collection:E().string},T.defaultProps={collection:"default",className:""};var L=T;function D(e){return D="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},D(e)}var R=["collection","icon","text","children","onClick"];function N(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function _(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?N(Object(t),!0).forEach((function(n){M(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):N(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function M(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==D(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==D(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===D(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Y(e){var n=e.collection,t=e.icon,r=e.text,o=e.children,i=e.onClick,a=function(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}(e,R);return(0,O.jsxs)("button",_(_({onClick:i},a),{},{children:[(0,O.jsx)(L,{collection:n,name:t})," ",r||o]}))}var q=t(96486),Z=t(63105),K=t.n(Z),U=t(27361),G=t.n(U),z=t(41609),W=t.n(z),F=t(24350),X=t.n(F),V=t(35161),Q=t.n(V),H=t(50361),J=t.n(H);function $(e){return e&&["1","on","yes","true"].includes(e.toString().toLowerCase())}var ee="https://zmk-keymap-editor.fly.dev",ne=$("true"),te=$("false"),re=$("true");function oe(e){return oe="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},oe(e)}function ie(){ie=function(){return e};var e={},n=Object.prototype,t=n.hasOwnProperty,r=Object.defineProperty||function(e,n,t){e[n]=t.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function l(e,n,t){return Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}),e[n]}try{l({},"")}catch(e){l=function(e,n,t){return e[n]=t}}function s(e,n,t,o){var i=n&&n.prototype instanceof p?n:p,a=Object.create(i.prototype),c=new E(o||[]);return r(a,"_invoke",{value:x(e,t,c)}),a}function u(e,n,t){try{return{type:"normal",arg:e.call(n,t)}}catch(e){return{type:"throw",arg:e}}}e.wrap=s;var f={};function p(){}function d(){}function y(){}var h={};l(h,i,(function(){return this}));var m=Object.getPrototypeOf,b=m&&m(m(O([])));b&&b!==n&&t.call(b,i)&&(h=b);var A=y.prototype=p.prototype=Object.create(h);function v(e){["next","throw","return"].forEach((function(n){l(e,n,(function(e){return this._invoke(n,e)}))}))}function g(e,n){function o(r,i,a,c){var l=u(e[r],e,i);if("throw"!==l.type){var s=l.arg,f=s.value;return f&&"object"==oe(f)&&t.call(f,"__await")?n.resolve(f.__await).then((function(e){o("next",e,a,c)}),(function(e){o("throw",e,a,c)})):n.resolve(f).then((function(e){s.value=e,a(s)}),(function(e){return o("throw",e,a,c)}))}c(l.arg)}var i;r(this,"_invoke",{value:function(e,t){function r(){return new n((function(n,r){o(e,t,n,r)}))}return i=i?i.then(r,r):r()}})}function x(e,n,t){var r="suspendedStart";return function(o,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw i;return{value:void 0,done:!0}}for(t.method=o,t.arg=i;;){var a=t.delegate;if(a){var c=j(a,t);if(c){if(c===f)continue;return c}}if("next"===t.method)t.sent=t._sent=t.arg;else if("throw"===t.method){if("suspendedStart"===r)throw r="completed",t.arg;t.dispatchException(t.arg)}else"return"===t.method&&t.abrupt("return",t.arg);r="executing";var l=u(e,n,t);if("normal"===l.type){if(r=t.done?"completed":"suspendedYield",l.arg===f)continue;return{value:l.arg,done:t.done}}"throw"===l.type&&(r="completed",t.method="throw",t.arg=l.arg)}}}function j(e,n){var t=n.method,r=e.iterator[t];if(void 0===r)return n.delegate=null,"throw"===t&&e.iterator.return&&(n.method="return",n.arg=void 0,j(e,n),"throw"===n.method)||"return"!==t&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+t+"' method")),f;var o=u(r,e.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,f;var i=o.arg;return i?i.done?(n[e.resultName]=i.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=void 0),n.delegate=null,f):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,f)}function C(e){var n={tryLoc:e[0]};1 in e&&(n.catchLoc=e[1]),2 in e&&(n.finallyLoc=e[2],n.afterLoc=e[3]),this.tryEntries.push(n)}function w(e){var n=e.completion||{};n.type="normal",delete n.arg,e.completion=n}function E(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(C,this),this.reset(!0)}function O(e){if(e){var n=e[i];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,o=function n(){for(;++r<e.length;)if(t.call(e,r))return n.value=e[r],n.done=!1,n;return n.value=void 0,n.done=!0,n};return o.next=o}}return{next:k}}function k(){return{value:void 0,done:!0}}return d.prototype=y,r(A,"constructor",{value:y,configurable:!0}),r(y,"constructor",{value:d,configurable:!0}),d.displayName=l(y,c,"GeneratorFunction"),e.isGeneratorFunction=function(e){var n="function"==typeof e&&e.constructor;return!!n&&(n===d||"GeneratorFunction"===(n.displayName||n.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,y):(e.__proto__=y,l(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},e.awrap=function(e){return{__await:e}},v(g.prototype),l(g.prototype,a,(function(){return this})),e.AsyncIterator=g,e.async=function(n,t,r,o,i){void 0===i&&(i=Promise);var a=new g(s(n,t,r,o),i);return e.isGeneratorFunction(t)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},v(A),l(A,c,"Generator"),l(A,i,(function(){return this})),l(A,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var n=Object(e),t=[];for(var r in n)t.push(r);return t.reverse(),function e(){for(;t.length;){var r=t.pop();if(r in n)return e.value=r,e.done=!1,e}return e.done=!0,e}},e.values=O,E.prototype={constructor:E,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(w),!e)for(var n in this)"t"===n.charAt(0)&&t.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function r(t,r){return a.type="throw",a.arg=e,n.next=t,r&&(n.method="next",n.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var c=t.call(i,"catchLoc"),l=t.call(i,"finallyLoc");if(c&&l){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(e,n){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&t.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=n&&n<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=n,i?(this.method="next",this.next=i.finallyLoc,f):this.complete(a)},complete:function(e,n){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&n&&(this.next=n),f},finish:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.finallyLoc===e)return this.complete(t.completion,t.afterLoc),w(t),f}},catch:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.tryLoc===e){var r=t.completion;if("throw"===r.type){var o=r.arg;w(t)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,t){return this.delegate={iterator:O(e),resultName:n,nextLoc:t},"next"===this.method&&(this.arg=void 0),f}},e}function ae(e,n,t,r,o,i,a){try{var c=e[i](a),l=c.value}catch(e){return void t(e)}c.done?n(l):Promise.resolve(l).then(r,o)}function ce(e){return function(){var n=this,t=arguments;return new Promise((function(r,o){var i=e.apply(n,t);function a(e){ae(i,r,o,a,c,"next",e)}function c(e){ae(i,r,o,a,c,"throw",e)}a(void 0)}))}}function le(){return se.apply(this,arguments)}function se(){return(se=ce(ie().mark((function e(){var n,r,o;return ie().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Promise.resolve().then(t.t.bind(t,95130,23));case 2:return n=e.sent,r=n.behaviorSchemas,o=n.behaviorBindings,e.abrupt("return",{behaviors:r,bindings:o});case 6:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function ue(){return(ue=ce(ie().mark((function e(){var n,r;return ie().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,t.e(712).then(t.t.bind(t,52779,23));case 2:return n=e.sent,r=n.keycodes,e.abrupt("return",r);case 5:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function fe(){return(fe=ce(ie().mark((function e(){var n,r;return ie().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,t.e(712).then(t.t.bind(t,52779,23));case 2:return n=e.sent,r=n.keycodeGlyphs,e.abrupt("return",r);case 5:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function pe(){return de.apply(this,arguments)}function de(){return(de=ce(ie().mark((function e(){var n;return ie().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,fetch("".concat(ee,"/v2/local/keyboards"));case 2:return n=e.sent,e.abrupt("return",n.json());case 4:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function ye(e){return he.apply(this,arguments)}function he(){return(he=ce(ie().mark((function e(n){var t,r,o,i;return ie().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t="v2/local/keyboards/".concat(encodeURIComponent(n)),r="".concat(ee,"/").concat(t),e.next=4,fetch(r);case 4:if((o=e.sent).ok){e.next=9;break}throw(i=new Error).response=o,i;case 9:return e.abrupt("return",o.json());case 10:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function me(e,n){return be.apply(this,arguments)}function be(){return be=ce(ie().mark((function e(n,t){var r,o,i;return ie().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r="v2/local/keyboards/".concat(encodeURIComponent(n),"/keymap"),o="".concat(ee,"/").concat(r),e.next=4,fetch(o,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});case 4:return i=e.sent,e.abrupt("return",i.json());case 6:case"end":return e.stop()}}),e)}))),be.apply(this,arguments)}function Ae(e,n){var t="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!t){if(Array.isArray(e)||(t=ve(e))||n&&e&&"number"==typeof e.length){t&&(e=t);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,c=!1;return{s:function(){t=t.call(e)},n:function(){var e=t.next();return a=e.done,e},e:function(e){c=!0,i=e},f:function(){try{a||null==t.return||t.return()}finally{if(c)throw i}}}}function ve(e,n){if(e){if("string"==typeof e)return ge(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?ge(e,n):void 0}}function ge(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function xe(e){return(n=e,function(e){if(Array.isArray(e))return ge(e)}(n)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(n)||ve(n)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()).sort((function(e,n){return e.length-n.length}))[0];var n}var je=/^(.+?)\((code)\)$/;function Ce(e){return e.reduce((function(e,n){var t,r=n.description,o=n.context,i=n.symbol,a=n.faIcon,c=n.names.filter((function(e){return!e.match(je)})),l=xe(c),s=n.names.map((function(e){return e.match(je)})).filter((function(e){return!!e}))[0],u={name:l,aliases:c,description:r,context:o,faIcon:a,symbol:i||l,params:[]},f=Ae(c);try{for(f.s();!(t=f.n()).done;){var p=t.value;e.push(Object.assign({},u,{code:p,isModifier:!!s}))}}catch(e){f.e(e)}finally{f.f()}return s&&e.push(Object.assign({},u,{code:s[1],params:s[2].split(",")})),e}),[])}function we(e){return we="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},we(e)}function Ee(){Ee=function(){return e};var e={},n=Object.prototype,t=n.hasOwnProperty,r=Object.defineProperty||function(e,n,t){e[n]=t.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function l(e,n,t){return Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}),e[n]}try{l({},"")}catch(e){l=function(e,n,t){return e[n]=t}}function s(e,n,t,o){var i=n&&n.prototype instanceof p?n:p,a=Object.create(i.prototype),c=new E(o||[]);return r(a,"_invoke",{value:x(e,t,c)}),a}function u(e,n,t){try{return{type:"normal",arg:e.call(n,t)}}catch(e){return{type:"throw",arg:e}}}e.wrap=s;var f={};function p(){}function d(){}function y(){}var h={};l(h,i,(function(){return this}));var m=Object.getPrototypeOf,b=m&&m(m(O([])));b&&b!==n&&t.call(b,i)&&(h=b);var A=y.prototype=p.prototype=Object.create(h);function v(e){["next","throw","return"].forEach((function(n){l(e,n,(function(e){return this._invoke(n,e)}))}))}function g(e,n){function o(r,i,a,c){var l=u(e[r],e,i);if("throw"!==l.type){var s=l.arg,f=s.value;return f&&"object"==we(f)&&t.call(f,"__await")?n.resolve(f.__await).then((function(e){o("next",e,a,c)}),(function(e){o("throw",e,a,c)})):n.resolve(f).then((function(e){s.value=e,a(s)}),(function(e){return o("throw",e,a,c)}))}c(l.arg)}var i;r(this,"_invoke",{value:function(e,t){function r(){return new n((function(n,r){o(e,t,n,r)}))}return i=i?i.then(r,r):r()}})}function x(e,n,t){var r="suspendedStart";return function(o,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw i;return{value:void 0,done:!0}}for(t.method=o,t.arg=i;;){var a=t.delegate;if(a){var c=j(a,t);if(c){if(c===f)continue;return c}}if("next"===t.method)t.sent=t._sent=t.arg;else if("throw"===t.method){if("suspendedStart"===r)throw r="completed",t.arg;t.dispatchException(t.arg)}else"return"===t.method&&t.abrupt("return",t.arg);r="executing";var l=u(e,n,t);if("normal"===l.type){if(r=t.done?"completed":"suspendedYield",l.arg===f)continue;return{value:l.arg,done:t.done}}"throw"===l.type&&(r="completed",t.method="throw",t.arg=l.arg)}}}function j(e,n){var t=n.method,r=e.iterator[t];if(void 0===r)return n.delegate=null,"throw"===t&&e.iterator.return&&(n.method="return",n.arg=void 0,j(e,n),"throw"===n.method)||"return"!==t&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+t+"' method")),f;var o=u(r,e.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,f;var i=o.arg;return i?i.done?(n[e.resultName]=i.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=void 0),n.delegate=null,f):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,f)}function C(e){var n={tryLoc:e[0]};1 in e&&(n.catchLoc=e[1]),2 in e&&(n.finallyLoc=e[2],n.afterLoc=e[3]),this.tryEntries.push(n)}function w(e){var n=e.completion||{};n.type="normal",delete n.arg,e.completion=n}function E(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(C,this),this.reset(!0)}function O(e){if(e){var n=e[i];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,o=function n(){for(;++r<e.length;)if(t.call(e,r))return n.value=e[r],n.done=!1,n;return n.value=void 0,n.done=!0,n};return o.next=o}}return{next:k}}function k(){return{value:void 0,done:!0}}return d.prototype=y,r(A,"constructor",{value:y,configurable:!0}),r(y,"constructor",{value:d,configurable:!0}),d.displayName=l(y,c,"GeneratorFunction"),e.isGeneratorFunction=function(e){var n="function"==typeof e&&e.constructor;return!!n&&(n===d||"GeneratorFunction"===(n.displayName||n.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,y):(e.__proto__=y,l(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},e.awrap=function(e){return{__await:e}},v(g.prototype),l(g.prototype,a,(function(){return this})),e.AsyncIterator=g,e.async=function(n,t,r,o,i){void 0===i&&(i=Promise);var a=new g(s(n,t,r,o),i);return e.isGeneratorFunction(t)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},v(A),l(A,c,"Generator"),l(A,i,(function(){return this})),l(A,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var n=Object(e),t=[];for(var r in n)t.push(r);return t.reverse(),function e(){for(;t.length;){var r=t.pop();if(r in n)return e.value=r,e.done=!1,e}return e.done=!0,e}},e.values=O,E.prototype={constructor:E,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(w),!e)for(var n in this)"t"===n.charAt(0)&&t.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function r(t,r){return a.type="throw",a.arg=e,n.next=t,r&&(n.method="next",n.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var c=t.call(i,"catchLoc"),l=t.call(i,"finallyLoc");if(c&&l){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(e,n){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&t.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=n&&n<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=n,i?(this.method="next",this.next=i.finallyLoc,f):this.complete(a)},complete:function(e,n){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&n&&(this.next=n),f},finish:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.finallyLoc===e)return this.complete(t.completion,t.afterLoc),w(t),f}},catch:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.tryLoc===e){var r=t.completion;if("throw"===r.type){var o=r.arg;w(t)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,t){return this.delegate={iterator:O(e),resultName:n,nextLoc:t},"next"===this.method&&(this.arg=void 0),f}},e}function Oe(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function ke(e,n,t,r,o,i,a){try{var c=e[i](a),l=c.value}catch(e){return void t(e)}c.done?n(l):Promise.resolve(l).then(r,o)}var Se=(0,r.createContext)({keycodes:[],behaviours:[],behaviors:{},behaviorBinds:[],glyphs:[]}),Be=function(e){return e.definitions};function Pe(e){var n=e.children,t=(0,i.v9)(Be),o=(0,i.I0)();if((0,r.useEffect)((function(){var e;(e=Ee().mark((function e(){var n,r,i,a,c,l,s;return Ee().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(null===t){e.next=2;break}return e.abrupt("return");case 2:return e.next=4,Promise.all([function(){return ue.apply(this,arguments)}().then(Ce),le(),function(){return fe.apply(this,arguments)}()]);case 4:n=e.sent,f=3,r=function(e){if(Array.isArray(e))return e}(u=n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(u,f)||function(e,n){if(e){if("string"==typeof e)return Oe(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Oe(e,n):void 0}}(u,f)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),i=r[0],a=r[1],c=r[2],l=J()(a.behaviors),s=J()(a.bindings),i.indexed=X()(i,"code"),s.indexed=X()(s,"code"),s.context={none:s.filter((function(e){return!e.context})),macros:K()(s,{context:"macros"})},s.byContext={none:X()(s.context.none,"code"),macros:X()(s.context.macros,"code")},o({type:"DEFINITIONS_SET",definitions:{keycodes:i,behaviours:s,behaviors:l,behaviorBinds:s,glyphs:c}});case 16:case"end":return e.stop()}var u,f}),e)})),function(){var n=this,t=arguments;return new Promise((function(r,o){var i=e.apply(n,t);function a(e){ke(i,r,o,a,c,"next",e)}function c(e){ke(i,r,o,a,c,"throw",e)}a(void 0)}))})()}),[t,o]),t)return(0,O.jsx)(Se.Provider,{value:t,children:n})}var Ie=["children"];function Te(e){return function(e){if(Array.isArray(e))return Le(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,n){if(e){if("string"==typeof e)return Le(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Le(e,n):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Le(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var De=function(e){var n=e.children,t=function(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}(e,Ie).keymap,o=(0,r.useContext)(Se),i=o.keycodes,a=o.behaviours,c=o.glyphs,l=(0,r.useContext)(C).settings,s=(0,r.useMemo)((function(){var e=window.navigator.platform.startsWith("Mac"),n=window.navigator.platform.startsWith("Win"),t=e?"mac":n&&"win";return function(e,n){return(0,q.compact)([e.basic,n.unicode&&e.unicode,"mac"===n.platform&&e.platforms.mac,"win"===n.platform&&e.platforms.win]).reduce((function(e,n){var t,r=Ae(n);try{for(r.s();!(t=r.n()).done;){var o=t.value,i=o.names.filter((function(e){return!e.match(je)})),a=xe(i);e[a]||(e[a]={}),e[a].symbol=e[a].symbol||o.symbol,e[a].faIcon=e[a].faIcon||o.faIcon}}catch(e){r.e(e)}finally{r.f()}return e}),{})}(c,{unicode:G()(l,"unicodeGlyphs",!0),platform:"auto"!==G()(l,"platformGlyphs","auto")?l.platformGlyphs:t})}),[c,l]),u=(0,r.useMemo)((function(){var e=[].concat(Te(a),Te((t.behaviors||[]).map((function(e){return{code:"&".concat(e.labels[0]),bind:"&".concat(e.labels[0]),name:e.name,description:'Custom behavior: "'.concat(e.properties.label.raw||e.name,'"'),params:e.params}}))),Te(t.macros.map((function(e){return{code:"&".concat(e.identifier),name:e.identifier,description:"Custom macro",params:[]}}))));return e.indexed=X()(e,"code"),e.context={none:e.filter((function(e){return!e.context})),macros:K()(e,{context:"macros"})},e.byContext={none:X()(e.context.none,"code"),macros:X()(e.context.macros,"code")},e}),[a,t.behaviors,t.macros]),f=(0,r.useMemo)((function(){return W()(t)?[]:t.layers.map((function(e,n){return{code:n,description:e.name||"Layer ".concat(n)}}))}),[t]),p=(0,r.useMemo)((function(){return{code:i.indexed,behaviours:u.indexed,behavioursByContext:u.byContext,layer:X()(f,"code")}}),[i,u,f]),d=(0,r.useMemo)((function(){return{behaviour:u,code:i}}),[u,i]),y=(0,r.useMemo)((function(){return function(e,n){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"none";return e.enum?e.enum.map((function(e){return{code:e}})):e.raw?[]:"command"===e?G()(p.behavioursByContext,[t,n,"commands"],[]):(d[e]||console.error("cannot find target for",e),"behaviour"===e?d.behaviour.context[t]:d[e])}}),[d,p]),h=(0,r.useMemo)((function(){return[].concat(Te(Q()(i,"code")),Te(Object.keys(t.defines||{})))}),[i,t.defines]);return(0,O.jsx)(j.Provider,{value:{getSearchTargets:y,mergedGlyphs:s,sources:p,identifiers:h},children:n})},Re=t(56281),Ne={};Ne.styleTagTransform=b(),Ne.setAttributes=d(),Ne.insert=f().bind(null,"head"),Ne.domAPI=s(),Ne.insertStyleElement=h(),c()(Re.Z,Ne);var _e=Re.Z&&Re.Z.locals?Re.Z.locals:void 0;function Me(e){return Me="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Me(e)}var Ye=["children","secondary","className"];function qe(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Ze(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?qe(Object(t),!0).forEach((function(n){Ke(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):qe(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Ke(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Me(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Me(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Me(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Ue(e){var n=e.children,t=e.secondary,r=e.className,o=function(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}(e,Ye);return(0,O.jsx)("button",Ze(Ze({className:[r,_e.action,t&&_e.secondary].join(" ")},o),{},{children:n}))}Ue.defaultProps={className:""};var Ge=Ue,ze=t(57557),We=t.n(ze),Fe=t(49502),Xe={};Xe.styleTagTransform=b(),Xe.setAttributes=d(),Xe.insert=f().bind(null,"head"),Xe.domAPI=s(),Xe.insertStyleElement=h(),c()(Fe.Z,Xe);var Ve=Fe.Z&&Fe.Z.locals?Fe.Z.locals:void 0;function Qe(e){return Qe="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Qe(e)}var He=["dismissText","classes","onDismiss","children"];function Je(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function $e(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Je(Object(t),!0).forEach((function(n){en(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Je(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function en(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Qe(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Qe(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Qe(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function nn(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function tn(e){var n,t=e.dismissText,r=void 0===t?"Ok":t,o=e.classes,i=void 0===o?[]:o,a=e.onDismiss,c=e.children,l=function(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}(e,He);return(0,O.jsxs)("div",$e($e({className:[Ve.dialog].concat((n=i,function(e){if(Array.isArray(e))return nn(e)}(n)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(n)||function(e,n){if(e){if("string"==typeof e)return nn(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?nn(e,n):void 0}}(n)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())).join(" ")},l),{},{children:[c,r&&(0,O.jsx)("button",{className:Ve.button,onClick:a,children:r})]}))}var rn=t(73935);function on(e){return on="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},on(e)}function an(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function cn(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?an(Object(t),!0).forEach((function(n){ln(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):an(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function ln(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==on(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==on(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===on(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}var sn={wrapper:{position:"absolute",top:"0",left:"0",width:"100vw",height:"100vh",backgroundColor:"rgba(104, 123, 162, 0.39)",backdropFilter:"blur(1px)",zIndex:"50",display:"flex",justifyContent:"center",alignItems:"center"},centerOnly:{background:"transparent",pointerEvents:"none"},content:{display:"block",pointerEvents:"all"}};function un(e){var n=e.onDismiss,t=e.centerOnly,o=void 0!==t&&t,i=e.children,a=(0,r.useRef)(),c=(0,r.useCallback)((function(e){n&&a.current&&e.target.contains(a.current)&&n()}),[a,n]),l=o?cn(cn({},sn.wrapper),sn.centerOnly):sn.wrapper;return rn.createPortal((0,O.jsx)("div",{onClick:c,style:l,children:(0,O.jsx)("div",{ref:a,style:sn.content,children:i})}),document.getElementById("modal-root"))}un.propTypes={onDismiss:E().func};var fn=un,pn=t(34288),dn={};dn.styleTagTransform=b(),dn.setAttributes=d(),dn.insert=f().bind(null,"head"),dn.domAPI=s(),dn.insertStyleElement=h(),c()(pn.Z,dn);var yn=pn.Z&&pn.Z.locals?pn.Z.locals:void 0;function hn(e){var n=e.property,t=e.schema;return(0,O.jsxs)(O.Fragment,{children:[(0,O.jsx)("span",{className:yn.propertyName,title:n,children:n}),t.deprecatedBy&&(0,O.jsx)("sub",{className:yn.propertyDeprecation,children:"(deprecated)"})]})}function mn(e){return function(e){if(Array.isArray(e))return bn(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,n){if(e){if("string"==typeof e)return bn(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?bn(e,n):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function bn(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var An=65,vn=5;function gn(e,n){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return{x:e.x*(An+vn),y:e.y*(An+vn),u:n.u*An+vn*(n.u-1),h:n.h*An+vn*(n.h-1),rx:(e.x-(t.x||e.x))*-(An+vn),ry:(e.y-(t.y||e.y))*-(An+vn),a:t.a||0}}function xn(e,n,t){var r=gn(e,n,t),o=r.x,i=r.y,a=r.u,c=r.h,l=r.a,s=r.rx,u=r.ry;return[{x:0,y:0},{x:a,y:0},{x:a,y:c},{x:0,y:c}].map((function(e){var n=e.x-s,t=e.y-u,r=Math.PI*l/180;return{x:s+n*Math.cos(r)-t*Math.sin(r),y:u+t*Math.cos(r)+n*Math.sin(r)}})).map((function(e){return{x:e.x+o,y:e.y+i}}))}function jn(e){return jn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},jn(e)}function Cn(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function wn(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==jn(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==jn(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===jn(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function En(e){return e.map((function(e){return function(e,n,t){var r=xn(e,n,t),o=Q()(r,"x"),i=Q()(r,"y");return{min:{x:Math.min.apply(Math,mn(o)),y:Math.min.apply(Math,mn(i))},max:{x:Math.max.apply(Math,mn(o)),y:Math.max.apply(Math,mn(i))}}}({x:e.x,y:e.y},{u:e.u||e.w||1,h:e.h||1},{x:e.rx,y:e.ry,a:e.r})})).reduce((function(e,n){var t=e.x,r=e.y,o=n.max;return{x:Math.max(t,o.x),y:Math.max(r,o.y)}}),{x:0,y:0})}function On(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},t=n.scale,r=void 0===t?1:t,o=n.overrides,i=void 0===o?{}:o,a=Array.isArray(e)?En(e):e;return function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Cn(Object(t),!0).forEach((function(n){wn(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Cn(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}({width:"".concat(a.x*r,"px"),height:"".concat(a.y*r,"px"),margin:"0 auto",padding:"0 40px 40px"},i)}var kn=t(78718),Sn=t.n(kn),Bn=t(87995),Pn={};Pn.styleTagTransform=b(),Pn.setAttributes=d(),Pn.insert=f().bind(null,"head"),Pn.domAPI=s(),Pn.insertStyleElement=h(),c()(Bn.Z,Pn);var In=Bn.Z&&Bn.Z.locals?Bn.Z.locals:void 0;function Tn(e){return Tn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Tn(e)}function Ln(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Dn(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Ln(Object(t),!0).forEach((function(n){Rn(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Ln(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Rn(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Tn(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Tn(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Tn(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}var Nn={x:E().number.isRequired,y:E().number.isRequired},_n={a:E().number,rx:E().number,ry:E().number},Mn={u:E().number,h:E().number},Yn=E().shape(Dn(Dn(Dn({},Nn),_n),Mn)),qn=E().arrayOf(Yn);function Zn(e){return Zn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Zn(e)}var Kn=["keyLayout","children"];function Un(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Gn(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Un(Object(t),!0).forEach((function(n){zn(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Un(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function zn(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Zn(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Zn(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Zn(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}var Wn=function(e){return Sn()(e,["x","y"])},Fn=function(e){return{x:e.rx,y:e.ry,a:e.r}},Xn=function(e){var n=e.w,t=void 0===n?1:n,r=e.u,o=void 0===r?t:r,i=e.h;return{u:o,h:void 0===i?1:i}};function Vn(e){var n=e.keyLayout,t=e.children,r=function(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}(e,Kn),o=Wn(n),i=Fn(n),a=Xn(n),c=function(e,n,t){var r=gn(e,n,t),o=r.x,i=r.y,a=r.u,c=r.h,l=r.a,s=r.rx,u=r.ry;return{top:"".concat(i,"px"),left:"".concat(o,"px"),width:"".concat(a,"px"),height:"".concat(c,"px"),transformOrigin:"".concat(s,"px ").concat(u,"px"),transform:"rotate(".concat(l||0,"deg)")}}(o,a,i);return(0,O.jsx)("div",Gn(Gn({className:In.placer,style:c,"data-u":a.u,"data-h":a.h},r),{},{children:t}))}Vn.propTypes={scale:E().number,keyLayout:Yn.isRequired},Vn.defaultProps={scale:1};var Qn=Vn;function Hn(e){var n=e.layout,t=e.renderKey,r=e.scale;return(0,O.jsx)("div",{style:{position:"relative",transform:"scale(".concat(r,")"),transformOrigin:0},children:n.map((function(e,n){return(0,O.jsx)(Qn,{keyLayout:e,children:t({index:n,keyLayout:e})},n)}))})}Hn.propTypes={layout:qn.isRequired,renderKey:E().func.isRequired,scale:E().number},Hn.defaultProps={scale:1};var Jn=Hn,$n=t(39693),et=t.n($n),nt=t(2),tt={};tt.styleTagTransform=b(),tt.setAttributes=d(),tt.insert=f().bind(null,"head"),tt.domAPI=s(),tt.insertStyleElement=h(),c()(nt.Z,tt);var rt=nt.Z&&nt.Z.locals?nt.Z.locals:void 0;function ot(e){return ot="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},ot(e)}var it=["children","selectable","themeClass","className"];function at(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function ct(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?at(Object(t),!0).forEach((function(n){lt(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):at(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function lt(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==ot(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==ot(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===ot(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}var st=function(e){var n=e.children,t=e.selectable,r=void 0===t||t,o=e.themeClass,i=void 0===o?void 0:o,a=e.className,c=void 0===a?"":a,l=function(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}(e,it),s=et()([rt.key,r&&rt.selectable,null!=i?i:rt.keyDefaultTheme,c]).join(" ");return(0,O.jsx)("div",ct(ct({className:s},l),{},{children:n}))},ut=t(74691),ft=t.n(ut),pt=t(56520),dt={};dt.styleTagTransform=b(),dt.setAttributes=d(),dt.insert=f().bind(null,"head"),dt.domAPI=s(),dt.insertStyleElement=h(),c()(pt.Z,dt);var yt=pt.Z&&pt.Z.locals?pt.Z.locals:void 0;function ht(e){return ht="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},ht(e)}function mt(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function bt(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?mt(Object(t),!0).forEach((function(n){At(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):mt(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function At(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==ht(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==ht(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===ht(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function vt(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(e,n)||function(e,n){if(e){if("string"==typeof e)return gt(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?gt(e,n):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function gt(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function xt(e){var n=e.onMouseDown,t=e.selecting,r=e.negate,o=e.rect,i=e.size,a=e.children;return(0,O.jsxs)("div",{onMouseDown:n,className:et()([yt.container,t&&yt.selecting]).join(" "),children:[a,t&&(0,O.jsx)("div",{className:et()([yt.overlay,r&&yt.negate]).join(" "),style:{position:"absolute",top:o[0][1]+"px",left:o[0][0]+"px",width:i[0]+"px",height:i[1]+"px"}})]})}function jt(e){var n=e.polygons,t=e.onSelect,o=vt((0,r.useState)({}),2),i=o[0],a=o[1],c=(0,r.useCallback)((function(e){var n=function(e){for(;(e=e.parentNode)&&("relative"!==e.style.position||!e.getBoundingClientRect().height););return e}(e.target).getBoundingClientRect(),t=e.clientX,r=e.clientY;e.preventDefault(),a({start:[t,r],intersecting:[],offset:[n.left,n.top],offsetRect:n})}),[a]),l=(0,r.useCallback)((function(e){i.selecting&&!e.repeat&&e.shiftKey&&a((function(e){return bt(bt({},e),{},{negate:!0})}))}),[i.selecting,a]),s=(0,r.useCallback)((function(e){!i.negate||e.repeat||e.shiftKey||a((function(e){return bt(bt({},e),{},{negate:!1})}))}),[i.negate,a]),u=(0,r.useCallback)((function(e){var t=i.start,r=i.offset,o=i.offsetRect;if(t){var c=e.shiftKey,l=e.altKey,s=e.clientX,u=e.clientY,f=vt(t,2),p=f[0],d=f[1],y=ft()(s,o.left,o.right),h=ft()(u,o.top,o.bottom),m=[[Math.min(y,p)-r[0],Math.min(h,d)-r[1]],[Math.max(y,p)-r[0],Math.max(h,d)-r[1]]],b=[Math.abs(y-p),Math.abs(h-d)];a((function(e){return bt(bt({},e),{},{negate:c||l,selecting:b[0]>3||b[1]>3,intersecting:Ct(m,n),rect:m,size:b})}))}}),[i,n,a]),f=(0,r.useCallback)((function(e){i.start&&(i.selecting&&t({negate:i.negate,intersecting:i.intersecting}),a({start:null,selecting:!1}))}),[t,i,a]);return(0,r.useEffect)((function(){return window.addEventListener("mouseup",f),window.addEventListener("mousemove",u),window.addEventListener("keydown",l),window.addEventListener("keyup",s),function(){window.removeEventListener("mouseup",f),window.removeEventListener("mousemove",u),window.removeEventListener("keydown",l),window.removeEventListener("keyup",s)}}),[f,u,l,s]),[bt(bt({},i),{},{onMouseDown:c,onMouseMove:u}),xt]}function Ct(e,n){return n.reduce((function(n,t,r){return t.some((function(n){var t=n.x,r=n.y;return e[0][0]<t&&t<e[1][0]&&e[0][1]<r&&r<e[1][1]}))&&n.push(r),n}),[])}var wt=t(49040),Et={};Et.styleTagTransform=b(),Et.setAttributes=d(),Et.insert=f().bind(null,"head"),Et.domAPI=s(),Et.insertStyleElement=h(),c()(wt.Z,Et);var Ot=wt.Z&&wt.Z.locals?wt.Z.locals:void 0,kt=t(528),St={};St.styleTagTransform=b(),St.setAttributes=d(),St.insert=f().bind(null,"head"),St.domAPI=s(),St.insertStyleElement=h(),c()(kt.Z,St);var Bt=kt.Z&&kt.Z.locals?kt.Z.locals:void 0;function Pt(e){var n=e.children,t=e.className,r=void 0===t?"":t,o=[Bt.tip,r].join(" ");return(0,O.jsxs)("div",{className:o,children:[(0,O.jsx)(L,{name:"hand-point-up"})," ",n]})}var It=(0,r.createContext)({layout:[],bindingCount:0,wrapperDimensions:{},wrapperStyle:{}});function Tt(e){var n=e.layout,t=e.children,o=(0,r.useMemo)((function(){return n.length}),[n.length]),i=(0,r.useMemo)((function(){return En(n)}),[n]),a=(0,r.useMemo)((function(){return On(i)}),[i]),c={layout:n,bindingCount:o,wrapperDimensions:i,wrapperStyle:a};return(0,O.jsx)(It.Provider,{value:c,children:t})}function Lt(e){return Lt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Lt(e)}function Dt(e){return function(e){if(Array.isArray(e))return Zt(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||qt(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Rt(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Nt(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Rt(Object(t),!0).forEach((function(n){_t(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Rt(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function _t(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Lt(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Lt(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Lt(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Mt(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(e,n)||qt(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Yt(e,n){var t="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!t){if(Array.isArray(e)||(t=qt(e))||n&&e&&"number"==typeof e.length){t&&(e=t);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,c=!1;return{s:function(){t=t.call(e)},n:function(){var e=t.next();return a=e.done,e},e:function(e){c=!0,i=e},f:function(){try{a||null==t.return||t.return()}finally{if(c)throw i}}}}function qt(e,n){if(e){if("string"==typeof e)return Zt(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Zt(e,n):void 0}}function Zt(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var Kt=.2,Ut=function(e){var n,t=function(e,n){return e.map((function(e){return xn({x:e.x,y:e.y},{u:e.u||e.w||1,h:e.h||1},{x:e.rx,y:e.ry,a:e.r})}))}(e),r=Yt(t);try{for(r.s();!(n=r.n()).done;){var o,i=Yt(n.value);try{for(i.s();!(o=i.n()).done;){var a=o.value;a.x*=Kt,a.y*=Kt}}catch(e){i.e(e)}finally{i.f()}}}catch(e){r.e(e)}finally{r.f()}return t};function Gt(e){var n,t,o,i,a,c,l,s=e.value,u=e.prompt,f=e.onUpdate,p=(0,r.useContext)(It),d=p.layout,y=p.wrapperDimensions,h=(0,r.useMemo)((function(){return Ut(d)}),[d]),m=(0,r.useMemo)((function(){return On(y,{scale:Kt,overrides:{position:"relative",padding:0,margin:0}})}),[y]),b=(n=Mt((0,r.useReducer)((function(e,n){switch(n){case"INCREMENT_MANUAL_SELECTION":return Nt(Nt({},e),{},{manualSelectionCount:e.manualSelectionCount+1});case"INCREMENT_MANUAL_DESELECTION":return Nt(Nt({},e),{},{manualDeSelectionCount:e.manualDeSelectionCount+1});case"TRACK_DRAG_SELECTION":return Nt(Nt({},e),{},{usedDragSelection:!0});case"TRACK_DRAG_DESELECTION":return Nt(Nt({},e),{},{usedDragDeSelection:!0});default:throw new Error("Unrecognized action type in ".concat(n))}}),{manualSelectionCount:0,manualDeSelectionCount:0,usedDragSelection:!1,usedDragDeSelection:!1}),2),t=n[0],o=n[1],i=(0,r.useCallback)((function(){return o("INCREMENT_MANUAL_SELECTION")}),[o]),a=(0,r.useCallback)((function(){return o("INCREMENT_MANUAL_DESELECTION")}),[o]),c=(0,r.useCallback)((function(){return o("TRACK_DRAG_SELECTION")}),[o]),l=(0,r.useCallback)((function(){return o("TRACK_DRAG_DESELECTION")}),[o]),{showSelectTip:!t.usedDragSelection&&t.manualSelectionCount>3,showDeSelectTip:!t.usedDragDeSelection&&t.manualDeSelectionCount>3,actions:{manualSelection:i,manualDeSelection:a,dragSelection:c,dragDeSelection:l}}),A=b.showSelectTip,v=b.showDeSelectTip,g=b.actions,x=(0,r.useCallback)((function(e){var n=e.negate,t=e.intersecting;n?g.dragDeSelection():g.dragSelection(),f(n?s.filter((function(e){return!t.includes(e)})):[].concat(Dt(s),Dt(t)))}),[s,f,g]),j=(0,r.useCallback)((function(e){var n=s.includes(e);n?g.manualDeSelection():g.manualSelection(),f(n?s.filter((function(n){return n!==e})):[].concat(Dt(s),[e]))}),[s,f,g]),C=Mt(jt({onSelect:x,polygons:h}),2),w=C[0],E=C[1],k=w.selecting?w.intersecting:[],S=s,B=w.negate?[]:k.filter((function(e){return!S.includes(e)})),P=w.negate?k.filter((function(e){return S.includes(e)})):[];return(0,O.jsx)("div",{style:m,children:(0,O.jsxs)(E,Nt(Nt({},w),{},{children:[(0,O.jsx)(Jn,{layout:d,bindings:[],scale:Kt,renderKey:function(e){var n=e.index;return(0,O.jsx)(st,{onClick:function(){return j(n)},themeClass:(0,q.compact)([Ot.key,S.includes(n)&&Ot.highlight,B.includes(n)&&Ot.previewAdd,P.includes(n)&&Ot.previewRemove]).join(" ")})}}),u&&(0,O.jsx)("prompt",{}),A&&(0,O.jsx)(Pt,{className:Ot.tip,children:"Drag to select a region"}),v&&(0,O.jsx)(Pt,{className:Ot.tip,children:"Shift+Drag to de-select a region"})]}))})}Gt.propTypes={onUpdate:E().func.isRequired,value:E().arrayOf(E().number).isRequired,prompt:E().node};var zt=Gt,Wt=t(27470),Ft={};Ft.styleTagTransform=b(),Ft.setAttributes=d(),Ft.insert=f().bind(null,"head"),Ft.domAPI=s(),Ft.insertStyleElement=h(),c()(Wt.Z,Ft);var Xt=Wt.Z&&Wt.Z.locals?Wt.Z.locals:void 0;function Vt(e){return Vt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Vt(e)}function Qt(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Ht(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Qt(Object(t),!0).forEach((function(n){Jt(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Qt(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Jt(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Vt(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Vt(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Vt(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function $t(e){var n=e.prop,t=e.schema,r=e.onUpdate;return(0,O.jsxs)(O.Fragment,{children:[(0,O.jsx)(L,{name:"code",title:"Raw property value"})," ",(0,O.jsx)("input",{required:null==t?void 0:t.required,value:null==n?void 0:n.raw,onChange:function(e){return r(Ht(Ht({},n),{},{raw:e.target.value,useRaw:!0}))}})]})}function er(e){var n=e.schema;return(0,O.jsx)("span",{className:[Xt.propertyValue,Xt.readonly].join(" "),children:n.const})}function nr(e){var n,t=e.prop,r=e.schema,o=e.onUpdate;return(0,O.jsx)("input",{type:"text",className:Xt.propertyValue,value:null!==(n=null==t?void 0:t.parsed)&&void 0!==n?n:"",placeholder:r.default&&"Default: ".concat(r.default),onChange:function(e){o(Ht(Ht({},t),{},{parsed:e.target.value,useRaw:!1}))}})}function tr(e){var n,t=e.prop,r=e.schema,o=e.onUpdate;return(0,O.jsx)("input",{type:"number",className:Xt.propertyValue,value:null!==(n=null==t?void 0:t.parsed)&&void 0!==n?n:"",placeholder:r.default&&"Default: ".concat(r.default),onChange:function(e){o(Ht(Ht({},t),{},{parsed:Number(e.target.value),useRaw:!1}))}})}function rr(e){var n=e.prop,t=e.onUpdate;return(0,O.jsx)("input",{type:"checkbox",className:Xt.propertyValue,checked:(null==n?void 0:n.parsed)||!1,onChange:function(e){t({parsed:!!e.target.checked,useRaw:!1})}})}var or=t(87360),ir=t.n(or),ar=function(e,n){var t=(n+(arguments.length>2&&void 0!==arguments[2]?arguments[2]:1))%e.length;return t<0?e.length+t:t},cr=t(47881),lr={};lr.styleTagTransform=b(),lr.setAttributes=d(),lr.insert=f().bind(null,"head"),lr.domAPI=s(),lr.insertStyleElement=h(),c()(cr.Z,lr);var sr=cr.Z&&cr.Z.locals?cr.Z.locals:void 0;function ur(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function fr(e){var n,t,o=e.results,i=e.onSelect,a=e.renderResult,c=(n=(0,r.useState)(0),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||function(e,n){if(e){if("string"==typeof e)return ur(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?ur(e,n):void 0}}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),l=c[0],s=c[1],u=(0,r.useRef)(null),f=(0,r.useCallback)((function(e,n){var t,r,i,a,c,f;if(0!==o.length)if(void 0!==n){var p=null!==l?ar(o,l,n):e,d='li[data-result-index="'.concat(p,'"]');r=null===(t=u.current)||void 0===t?void 0:t.querySelector(d),i=r.offsetParent.scrollTop,a=r.offsetParent.offsetHeight,c=r.offsetTop,f=c+r.scrollHeight,(c<i||f>i+a)&&r.scrollIntoView(!1),s(p)}else s(e);else s(null)}),[o,l,s]),p=(0,r.useCallback)((function(){f(0,1)}),[f]),d=(0,r.useCallback)((function(){f(o.length-1,-1)}),[f,o]),y=(0,r.useCallback)((function(e){i(o[l],e)}),[o,l,i]),h=(0,r.useCallback)((function(e){var n={ArrowDown:p,ArrowUp:d,Enter:y}[e.key];n&&(e.preventDefault(),e.stopPropagation(),n(e))}),[p,d,y]);return(0,r.useEffect)((function(){return document.body.addEventListener("keydown",h),function(){return document.body.removeEventListener("keydown",h)}}),[u,h]),(0,O.jsx)("ul",{className:sr.results,ref:u,children:o.map((function(e,n){return(0,O.jsx)("li",{className:l===n?sr.highlighted:"",title:e.description,"data-result-index":n,onClick:function(n){return i(e,n)},onDoubleClick:function(n){return i(e,n)},onMouseOver:function(){return f(n)},children:a(e,n)},n)}))})}fr.propTypes={results:E().array.isRequired,onSelect:E().func.isRequired,renderResult:E().func.isRequired};var pr=fr;function dr(e){return dr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},dr(e)}function yr(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function hr(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?yr(Object(t),!0).forEach((function(n){mr(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):yr(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function mr(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==dr(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==dr(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===dr(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function br(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function Ar(e){e&&(e.focus(),e.select())}var vr=function(e){var n,t,o=e.choices,i=e.searchKey,a=e.renderResults,c=e.initialQuery,l=!o.length||o.length>10,s=(n=(0,r.useState)(c),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||function(e,n){if(e){if("string"==typeof e)return br(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?br(e,n):void 0}}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),u=s[0],f=s[1],p=(0,r.useMemo)((function(){if(!u||!l)return o;var e={key:i,limit:30};return ir().go(u,o,e).map((function(e){return hr(hr({},e.obj),{},{search:e})}))}),[l,u,o,i]),d=(0,r.useCallback)((function(e){f(e.target.value)}),[f]);return(0,O.jsxs)(O.Fragment,{children:[l&&(0,O.jsxs)("div",{className:sr.searchWrapper,children:[(0,O.jsx)("input",{ref:Ar,type:"text",value:u,onChange:d}),(0,O.jsx)(L,{className:sr.searchIcon,name:"search"}),(0,O.jsx)(L,{className:sr.clearSearchIcon,name:"times",onClick:function(){return f("")}})]}),a(p)]})};vr.propTypes={choices:E().array.isRequired,searchKey:E().string.isRequired,initialQuery:E().string.isRequired,renderResults:E().func.isRequired},vr.defaultProps={initialQuery:""};var gr=vr;function xr(e){var n=e.choices,t=e.prompt,o=e.onSelect,i=(0,r.useMemo)((function(){return n.map((function(e){return{value:e}}))}),[n]),a=(0,r.useCallback)((function(e){var n=e.search?(0,O.jsx)("span",{dangerouslySetInnerHTML:{__html:ir().highlight(e.search)}}):(0,O.jsx)("span",{children:e.value});return(0,O.jsxs)(O.Fragment,{children:[n,e.description&&(0,O.jsx)("p",{className:sr.description,children:e.description})]})}),[]);return(0,O.jsxs)("div",{className:sr.dialog,children:[(0,O.jsx)("p",{children:t||"Select"}),(0,O.jsx)(gr,{choices:i,initialQuery:"",searchKey:"value",renderResults:function(e){return e&&(0,O.jsx)(pr,{results:e,onSelect:function(e){return o(e.value)},renderResult:a})}})]})}xr.propTypes={choices:E().arrayOf(E().stirng).isRequired,prompt:E().string,onSelect:E().func.isRequired};var jr=xr;function Cr(e){return Cr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Cr(e)}function wr(e){return function(e){if(Array.isArray(e))return Or(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||Er(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Er(e,n){if(e){if("string"==typeof e)return Or(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Or(e,n):void 0}}function Or(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function kr(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Sr(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?kr(Object(t),!0).forEach((function(n){Br(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):kr(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Br(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Cr(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Cr(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Cr(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Pr(e){var n=e.prop,t=void 0===n?{}:n,o=e.schema,i=e.onUpdate,a=o.enum,c=t.parsed,l=(0,r.useCallback)((function(e){i(Sr(Sr({},t),{},{parsed:a[e.target.value],useRaw:!1}))}),[t,a,i]);return(0,O.jsx)("select",{className:Xt.propertyValue,onChange:l,value:a.indexOf(c),children:a.map((function(e,n){return(0,O.jsx)("option",{value:n,children:e},n)}))})}function Ir(e){var n=e.prop,t=void 0===n?{}:n,o=e.schema,i=e.onUpdate,a=function(e){var n=(0,r.useContext)(Se);return(0,r.useMemo)((function(){if(!e.choices)return[];if(Array.isArray(e.choices))return e.choices;if(!e.choices.$source)throw new Error("Expected schema.choices.$source");var t=n[e.choices.$source];return e.choices.$key?Q()(t,e.choices.$key):t}),[n,e.choices])}(o),c=t.parsed,l=void 0===c?[]:c,s=(0,r.useCallback)((function(e){i(Sr(Sr({},t),{},{useRaw:!1,parsed:e}))}),[t,i]),u=a.length>20?Lr:Tr;return(0,O.jsx)(u,{selected:l,choices:a,onUpdate:s})}function Tr(e){var n=e.selected,t=e.choices,o=e.onUpdate,i=(0,r.useCallback)((function(e){o(n.includes(e)?n.filter((function(n){return n!==e})):[].concat(wr(n),[e]))}),[n,o]);return(0,O.jsx)("ol",{className:Xt.propertyMultiSelect,children:t.map((function(e,t){return(0,O.jsx)("li",{children:(0,O.jsxs)("label",{children:[(0,O.jsx)("input",{type:"checkbox",checked:n.includes(e),onChange:function(n){return i(e)}}),e]})},t)}))})}function Lr(e){var n,t,o=e.selected,i=e.choices,a=e.onUpdate,c=(n=(0,r.useState)(!1),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||Er(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),l=c[0],s=c[1],u=(0,r.useCallback)((function(e){a([].concat(wr(o),[e])),s(!1)}),[s,o,a]),f=(0,r.useCallback)((function(e){a(o.filter((function(n){return n!==e})))}),[o,a]);return(0,O.jsxs)(O.Fragment,{children:[(0,O.jsx)("ul",{className:Xt.propertyMultiSelectChips,children:o.map((function(e,n){return(0,O.jsx)("li",{children:(0,O.jsxs)("span",{className:Xt.behaviorBind,children:[e," ",(0,O.jsx)(L,{name:"times",className:Xt.phandleRemove,onClick:function(){return f(e)}})]})},n)}))}),(0,O.jsxs)(Ge,{secondary:!0,onClick:function(){return s(!0)},children:[(0,O.jsx)(L,{name:"plus"})," Add"]}),l&&(0,O.jsx)(fn,{onDismiss:function(){return s(!1)},children:(0,O.jsx)(jr,{choices:i,onSelect:u})})]})}function Dr(e){var n=(0,r.useContext)(j).getSearchTargets,t=e.param,o=e.prompt,i=e.onSelect,a=(0,r.useMemo)((function(){return n(t)}),[n,t]);return(0,O.jsxs)("div",{className:sr.dialog,children:[(0,O.jsx)("p",{children:o}),(0,O.jsx)(pr,{results:a,onSelect:i,renderResult:function(e){return e.code}})]})}Dr.propTypes={value:E().any.isRequired,param:E().object.isRequired,prompt:E().string.isRequired,onSelect:E().func.isRequired},Dr.defaultProps={value:""};var Rr=Dr,Nr=E().oneOfType([E().oneOf(["code","layer","command"]),E().shape({type:E().oneOf(["placeholder"])}),E().shape({enum:E().array,raw:E().bool,name:E().string.isRequired,type:E().string.isRequired})]),_r=E().arrayOf(Nr),Mr=E().oneOfType([E().string,E().number]),Yr=E().shape({params:_r,code:Mr.isRequired,description:E().string,symbol:E().string,faIcon:E().string}),qr={value:Mr,source:Yr};qr.params=E().arrayOf(E().shape(qr));var Zr=E().shape(qr),Kr=Zr;function Ur(e){var n=e.prompt,t=e.searchKey,o=e.node,i=e.param,a=e.behaviour,c=e.context,l=e.onSelect,s=(0,r.useContext)(j).getSearchTargets,u=(0,r.useCallback)((function(e){var n=e.search?(0,O.jsx)("span",{dangerouslySetInnerHTML:{__html:ir().highlight(e.search)}}):(0,O.jsx)("span",{children:e.code});return(0,O.jsxs)(O.Fragment,{children:[n,e.description&&(0,O.jsx)("p",{className:sr.description,children:e.description})]})}),[]),f=(0,r.useMemo)((function(){return s(i,a.code,c)}),[s,i,a,c]);return(0,O.jsxs)("div",{className:sr.dialog,children:[(0,O.jsx)("p",{children:n}),(0,O.jsx)(gr,{choices:f,initialQuery:o.value||"",searchKey:t,renderResults:function(e){return e&&(0,O.jsx)(pr,{results:e,onSelect:l,renderResult:u})}})]})}E().arrayOf(Zr),Ur.propTypes={node:Kr.isRequired,param:E().oneOfType([E().string,E().shape({enum:E().array,raw:E().bool,type:E().string})]).isRequired,prompt:E().string.isRequired,searchKey:E().string.isRequired,behaviour:E().object.isRequired,context:E().string.isRequired,onSelect:E().func.isRequired};var Gr=Ur,zr=t(93565);function Wr(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function Fr(e){var n,t,o=e.node,i=e.onSelect,a=(n=(0,r.useState)({h:Number(o.params[0].value),s:Number(o.params[1].value)/100,l:Number(o.params[2].value)/100}),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||function(e,n){if(e){if("string"==typeof e)return Wr(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Wr(e,n):void 0}}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),c=a[0],l=a[1],s=(0,r.useCallback)((function(e){var n=e.hsl;l(n)}),[l]),u=(0,r.useCallback)((function(){i([{value:Math.round(c.h)},{value:Math.round(100*c.s)},{value:Math.round(100*c.l)}])}),[c,i]);return(0,O.jsxs)("div",{children:[(0,O.jsx)("p",{children:"Select colour"}),(0,O.jsx)(zr.AI,{color:c,disableAlpha:!0,onChangeComplete:s}),(0,O.jsx)("p",{style:{textAlign:"center"},children:(0,O.jsx)(Ge,{onClick:u,children:"Confirm"})})]})}Fr.propTypes={value:E().any.isRequired,prompt:E().string.isRequired,param:E().oneOfType([E().shape({enum:E().array,raw:E().bool,type:E().string})]).isRequired,onSelect:E().func.isRequired},Fr.defaultProps={value:""};var Xr=Fr;function Vr(e,n){if(e){if("string"==typeof e)return Hr(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Hr(e,n):void 0}}function Qr(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}function Hr(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function Jr(e){return e.params.length>0?[e].concat(function(e){if(Array.isArray(e))return Hr(e)}(n=Jr(e.params[0]))||Qr(n)||Vr(n)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()):[e];var n}function $r(e){var n,t=function(e){if(Array.isArray(e))return e}(n=e)||Qr(n)||Vr(n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),r=t[0],o=t.slice(1);return{value:r,params:0===o.length?[]:[$r(o)]}}var eo=t(14409),no={};no.styleTagTransform=b(),no.setAttributes=d(),no.insert=f().bind(null,"head"),no.domAPI=s(),no.insertStyleElement=h(),c()(eo.Z,no);var to=eo.Z&&eo.Z.locals?eo.Z.locals:void 0;function ro(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var oo=["LSHFT","LALT","LCTRL","LGUI"],io=["RSHFT","RALT","RCTRL","RGUI"];function ao(e){var n=e.selected,t=e.row,r=e.onSelect;return(0,O.jsx)("ul",{className:to.modifiers,children:t.map((function(e,t){return(0,O.jsx)("li",{className:n.includes(e)?to.selected:"",onClick:function(){return r(e)},children:e},t)}))})}function co(e){var n=e.selected,t=e.onChange;function r(e){var r;t(n.includes(e)?n.filter((function(n){return n!==e})):[].concat(function(e){if(Array.isArray(e))return ro(e)}(r=n)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(r)||function(e,n){if(e){if("string"==typeof e)return ro(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?ro(e,n):void 0}}(r)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),[e]))}return(0,O.jsxs)(O.Fragment,{children:[(0,O.jsx)(ao,{row:oo,selected:n,onSelect:r}),(0,O.jsx)(ao,{row:io,selected:n,onSelect:r})]})}co.propTypes={selected:E().arrayOf(E().string)};var lo=co;function so(){return(0,O.jsx)("span",{children:"⦸"})}function uo(e){return e&&"(".concat(e.code,") ").concat(e.description)}function fo(e){var n,t=e&&((null==e?void 0:e.symbol)||(null==e||null===(n=e.code)||void 0===n?void 0:n.toString()));return(null==e?void 0:e.faIcon)&&(0,O.jsx)(L,{name:e.faIcon})||t||(0,O.jsx)(so,{})}function po(e){var n=e.node,t=e.onSelect,o=n.value,i=n.source,a=n._isPlaceholder,c=uo(i),l=(0,r.useCallback)((function(e){e.stopPropagation(),t({node:n})}),[n,t]);return(0,O.jsx)("span",{className:et()([rt.code,(void 0===o||a)&&rt.missingValue]).join(" "),title:c,onClick:l,children:fo(i)})}po.propTypes={node:Kr.isRequired,onSelect:E().func.isRequired};var yo=po;function ho(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var mo=function(e){var n,t=e.node,o=e.onSelect,i=(0,r.useCallback)((function(e){e.stopPropagation(),o({node:t,type:"tree"})}),[t,o]),a=(0,r.useMemo)((function(){return Q()(Jr(t),"source")}),[t]),c=(0,r.useMemo)((function(){return a.map(fo).map((function(e,n){return(0,O.jsx)(r.Fragment,{children:e},n)})).reduce((function(e,n){return 0===e.length?[n]:[].concat(function(e){if(Array.isArray(e))return ho(e)}(t=e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(t)||function(e,n){if(e){if("string"==typeof e)return ho(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?ho(e,n):void 0}}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),[" ",n]);var t}),[])}),[a]),l=(0,r.useMemo)((function(){return a.map(uo).join(" + ")}),[a]),s=void 0===(null===(n=t.source)||void 0===n?void 0:n.code)||void 0===t.value||t._isPlaceholder;return(0,O.jsx)("span",{className:et()([rt.code,s&&rt.missingValue]).join(" "),title:l,onClick:i,children:c})};function bo(e,n){var t=G()(e,"[0]",{}),r=X()(n.commands,"code");return[].concat(n.params||[],"command"===G()(n,"params[0]")?G()(r[t.value],"additionalParams",[]):[])}function Ao(e){return Ao="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Ao(e)}function vo(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function go(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?vo(Object(t),!0).forEach((function(n){xo(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):vo(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function xo(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Ao(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Ao(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Ao(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function jo(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(e,n)||function(e,n){if(e){if("string"==typeof e)return Co(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Co(e,n):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Co(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function wo(e){var n=[];return function e(t){var r=t.params||[];n.push(t),r.forEach(e)}(e),n}function Eo(e,n){var t=jo(e.params,1)[0],r=G()(t,"source.symbol",G()(t,"value","")),o=!G()(t,"source.faIcon")&&r.length>4,i=n.length>1,a=G()(t,"params",[]).length>0;return o||i||a}function Oo(e){var n={layer:"Select layer",mod:"Select modifier",behaviour:"Select behaviour",command:"Select command",keycode:"Select key code"};return e.name?"Select ".concat(e.name):n[e]||n.keycode}function ko(e,n,t){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"none",o=arguments.length>4?arguments[4]:void 0,i=e,a=G()(t.behavioursByContext[r],i,{}),c=bo(n,a),l=X()(a.commands,"code");function s(e,n){if(!e)return{value:void 0,slot:n,params:[]};var r=e.value,i=e.params,a=e._isPlaceholder,c=function(e,n){var r;return"command"===n?l[e]:n.raw||n.enum||"placeholder"===n.type?{code:e}:null==t||null===(r=t[n])||void 0===r?void 0:r[e]}(r,n);return{value:r,_isPlaceholder:a,slot:n,source:go(go({},c),{},{symbol:G()(o,[null==c?void 0:c.name,"symbol"],null==c?void 0:c.symbol),faIcon:G()(o,[null==c?void 0:c.name,"faIcon"],null==c?void 0:c.faIcon)}),params:G()(c,"params",[]).map((function(e,n){return s(i[n],e)}))}}return{value:e,slot:"behaviour",source:a,params:c.map((function(e,t){return s(n[t],e)}))}}function So(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(e,n)||Bo(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Bo(e,n){if(e){if("string"==typeof e)return Po(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Po(e,n):void 0}}function Po(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var Io={LSHFT:"LS",LCTRL:"LC",LALT:"LA",LGUI:"LG",RSHFT:"RS",RCTRL:"RC",RALT:"RA",RGUI:"RG"};function To(e){var n=e.search?(0,O.jsx)("span",{dangerouslySetInnerHTML:{__html:ir().highlight(e.search)}}):(0,O.jsx)("span",{children:e.code});return(0,O.jsxs)(O.Fragment,{children:[n,(0,O.jsx)("p",{className:sr.description,children:e.description})]})}function Lo(e){var n=e.node,t=e.onSelect,o=e.behaviour,i=(0,r.useContext)(j),a=i.getSearchTargets,c=i.sources,l=i.mergedGlyphs,s=(0,r.useMemo)((function(){return Q()(Jr(n),"source")}),[n]),u=1===s.length?[]:s.slice(0,-1),f=So((0,r.useState)(Q()(u,"name")),2),p=f[0],d=f[1],y=So((0,r.useState)(s.at(-1)),2),h=y[0],m=y[1],b=(0,r.useMemo)((function(){return a("code",o.code).filter((function(e){return 0===e.params.length}))}),[a,o]),A=ko("&kp",[{value:null==h?void 0:h.code,params:null==h?void 0:h.params}],c,void 0,l),v=(0,r.useCallback)((function(e,n){var r,o=n.map((function(e){return Io[e]})),i=$r(et()([].concat(function(e){if(Array.isArray(e))return Po(e)}(r=o)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(r)||Bo(r)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),[null==e?void 0:e.code])));t(i)}),[t]),g=(0,r.useCallback)((function(e,n){"dblclick"!==n.type?m(e):v(e,p)}),[v,p,m]);return(0,O.jsxs)("div",{className:sr.dialog,children:[(0,O.jsxs)("div",{style:{display:"flex",gap:"10px"},children:[(0,O.jsxs)("div",{children:[(0,O.jsx)("p",{children:"Keycode"}),(0,O.jsx)(st,{className:to.previewKeycode,selectable:!1,children:(0,O.jsx)(mo,{node:A.params[0],onSelect:function(){}})})]}),(0,O.jsxs)("div",{children:[(0,O.jsx)("p",{children:"Modifiers"}),(0,O.jsx)(lo,{selected:p,onChange:d})]})]}),(0,O.jsx)("p",{children:"Available Keycodes"}),(0,O.jsx)(gr,{choices:b,initialQuery:null==h?void 0:h.code,searchKey:"code",renderResults:function(e){return e&&(0,O.jsx)(pr,{results:e,onSelect:g,renderResult:To})}}),(0,O.jsx)(Pt,{className:to.quickCloseTip,children:"Double-click to select and close the dialog"}),(0,O.jsxs)("p",{style:{textAlign:"center"},children:[(0,O.jsx)(Ge,{onClick:function(){v(h,p)},children:"Confirm"}),(0,O.jsx)(Ge,{onClick:function(){t(n)},secondary:!0,children:"Cancel"})]})]})}Lo.propTypes={node:Kr.isRequired,param:E().oneOfType([E().string,E().shape({enum:E().array,raw:E().bool,type:E().string})]).isRequired,prompt:E().string.isRequired,searchKey:E().string.isRequired,behaviour:E().object.isRequired,context:E().string.isRequired,onSelect:E().func.isRequired};var Do=Lo;function Ro(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function No(e){e&&(e.focus(),e.select())}function _o(e){var n,t,o=e.value,i=e.param,a=e.onSelect,c=(n=(0,r.useState)(o),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||function(e,n){if(e){if("string"==typeof e)return Ro(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Ro(e,n):void 0}}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),l=c[0],s=c[1],u=(0,r.useCallback)((function(e){"Enter"===e.key&&a({code:l})}),[l,a]),f=(0,r.useCallback)((function(e){var n=e.target.value;"number"===i.type&&(n=Number(n),Number.isNaN(n))||s(n)}),[i,s]);return(0,O.jsxs)("div",{className:sr.dialog,children:[(0,O.jsx)("p",{children:"Enter raw value"}),(0,O.jsx)("input",{ref:No,type:"text",value:l,onChange:f,onKeyDown:u})]})}_o.propTypes={value:E().any.isRequired,prompt:E().string.isRequired,param:E().oneOfType([E().shape({enum:E().array,raw:E().bool,type:E().string})]).isRequired,onSelect:E().func.isRequired},_o.defaultProps={value:""};var Mo=_o,Yo=t(98913),qo=t.n(Yo),Zo=t(97168);function Ko(e,n){var t="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!t){if(Array.isArray(e)||(t=function(e,n){if(e){if("string"==typeof e)return Uo(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Uo(e,n):void 0}}(e))||n&&e&&"number"==typeof e.length){t&&(e=t);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,c=!1;return{s:function(){t=t.call(e)},n:function(){var e=t.next();return a=e.done,e},e:function(e){c=!0,i=e},f:function(){try{a||null==t.return||t.return()}finally{if(c)throw i}}}}function Uo(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var Go="&trans",zo=function(e){return e.keyboard.keymap.layers},Wo=(0,Zo.oM)({name:"layers",initialState:[],reducers:{createLayer:function(e,n){e.push({name:"Layer #".concat(e.length),bindings:qo()(n.payload.bindingCount,(function(){return function(){return{value:arguments.length>0&&void 0!==arguments[0]?arguments[0]:Go,params:[]}}()}))})},updateLayerMetadata:function(e,n){var t=n.payload.layerIndex;Object.assign(e[t],Sn()(n.payload,["name","label"]))},renameLayer:function(e,n){e[n.payload.index].name=n.payload.name},deleteLayer:function(e,n){e.splice(n.payload.index,1)},updateKeyBinding:function(e,n){e[n.payload.layerIndex].bindings[n.payload.bindIndex]=n.payload.binding},updateSensorBindings:function(e,n){e[n.payload.layerIndex].sensorBindings[n.payload.sensorIndex]=n.payload.bindings},rebindTransparentToKeyPress:function(e,n){var t,r=Ko(e[n.payload.layerIndex].bindings);try{for(r.s();!(t=r.n()).done;){var o=t.value;"&trans"===o.value&&(o.value="&kp",o.params=[])}}catch(e){r.e(e)}finally{r.f()}},rebindTransparentToNone:function(e,n){var t,r=Ko(e[n.payload.layerIndex].bindings);try{for(r.s();!(t=r.n()).done;){var o=t.value;"&trans"===o.value&&(o.value="&none",o.params=[])}}catch(e){r.e(e)}finally{r.f()}},rebindNoneToKeypress:function(e,n){var t,r=Ko(e[n.payload.layerIndex].bindings);try{for(r.s();!(t=r.n()).done;){var o=t.value;"&none"===o.value&&(o.value="&kp",o.params=[])}}catch(e){r.e(e)}finally{r.f()}},rebindNoneToTransparent:function(e,n){var t,r=Ko(e[n.payload.layerIndex].bindings);try{for(r.s();!(t=r.n()).done;){var o=t.value;"&none"===o.value&&(o.value="&trans",o.params=[])}}catch(e){r.e(e)}finally{r.f()}},rebindEmptyKeypressToTransparent:function(e,n){var t,r=Ko(e[n.payload.layerIndex].bindings);try{for(r.s();!(t=r.n()).done;){var o,i=t.value;"&kp"!==i.value||null!==(o=i.params[0])&&void 0!==o&&o.value||(i.value="&trans",i.params=[])}}catch(e){r.e(e)}finally{r.f()}},rebindEmptyKeypressToNone:function(e,n){var t,r=Ko(e[n.payload.layerIndex].bindings);try{for(r.s();!(t=r.n()).done;){var o,i=t.value;"&kp"!==i.value||null!==(o=i.params[0])&&void 0!==o&&o.value||(i.value="&none",i.params=[])}}catch(e){r.e(e)}finally{r.f()}}}}),Fo=Wo.actions,Xo=Fo.createLayer,Vo=Fo.renameLayer,Qo=Fo.deleteLayer,Ho=Fo.updateLayerMetadata,Jo=Fo.updateKeyBinding,$o=Fo.updateSensorBindings,ei=Fo.rebindTransparentToKeyPress,ni=Fo.rebindTransparentToNone,ti=Fo.rebindNoneToKeypress,ri=Fo.rebindNoneToTransparent,oi=Fo.rebindEmptyKeypressToTransparent,ii=Fo.rebindEmptyKeypressToNone,ai=Wo.reducer;function ci(e){var n=e.onSelect,t=(0,i.v9)(zo),o=(0,r.useMemo)((function(){return t.map((function(e,n){return{code:n,description:e.name||"Layer ".concat(n)}}))}),[t]);return(0,O.jsxs)("div",{className:sr.dialog,children:[(0,O.jsx)("p",{children:"Select layer"}),(0,O.jsx)(pr,{results:o,onSelect:n,renderResult:function(e){return(0,O.jsxs)(O.Fragment,{children:[e.code,e.description&&(0,O.jsx)("p",{className:sr.description,children:e.description})]})}})]})}ci.propTypes={value:E().string.isRequired,behaviour:E().object.isRequired,onSelect:E().func.isRequired},ci.defaultProps={value:""};var li=ci;function si(e){return si="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},si(e)}function ui(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function fi(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?ui(Object(t),!0).forEach((function(n){pi(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ui(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function pi(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==si(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==si(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===si(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function di(e){var n=e.node,t=e.type,o=e.onCancel,i=e.onSelect,a=(0,q.pick)(e,["node","value","prompt","param","node","behaviour","context","searchKey"]),c=(0,r.useMemo)((function(){var e;return"params"===t&&"hsb-color-picker"===(null===(e=n.source)||void 0===e?void 0:e.helper)?Xr:n.slot.raw||"placeholder"===n.slot.type?Mo:n.slot.enum?Rr:"code"===n.slot?Do:"layer"===n.slot?li:Gr}),[n,t]);return(0,O.jsx)(fn,{onDismiss:o,children:(0,O.jsx)(c,fi(fi({},a),{},{param:n.slot,onSelect:i}))})}di.propTypes={type:E().string.isRequired,node:Kr.isRequired,behaviour:E().object.isRequired,prompt:E().string.isRequired,searchKey:E().string.isRequired,searchThreshold:E().number,onCancel:E().func.isRequired,onSelect:E().func.isRequired},di.defaultProps={type:"value",value:"",freeForm:!1,searchThreshold:10};var yi=di;function hi(e){return function(e){if(Array.isArray(e))return mi(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,n){if(e){if("string"==typeof e)return mi(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?mi(e,n):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function mi(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var bi=function(e,n){return[].concat(hi(e.slice(0,n)),hi(e.slice(n+1)))},Ai=function(e,n,t){return[].concat(hi(e.slice(0,n)),[t],hi(e.slice(n+1)))};function vi(e){return vi="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},vi(e)}function gi(e){return function(e){if(Array.isArray(e))return Ei(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||wi(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function xi(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function ji(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?xi(Object(t),!0).forEach((function(n){Ci(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):xi(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Ci(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==vi(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==vi(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===vi(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function wi(e,n){if(e){if("string"==typeof e)return Ei(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Ei(e,n):void 0}}function Ei(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function Oi(e){var n,t,o=e.prop,i=void 0===o?{}:o,a=e.schema,c=void 0===a?{}:a,l=e.onUpdate,s=i.parsed,u=void 0===s?[]:s,f=c.length,p=(n=(0,r.useState)(null),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||wi(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),d=p[0],y=p[1],h=(0,r.useCallback)((function(){l(ji(ji({},i),{},{useRaw:!1,parsed:[].concat(gi(u),[""])})),y(u.length)}),[i,u,l,y]),m=(0,r.useCallback)((function(e){l(ji(ji({},i),{},{useRaw:!1,parsed:Ai(u,d,e.code)})),y(null)}),[i,u,d,l]),b=(0,r.useCallback)((function(e){l(ji(ji({},i),{},{useRaw:!1,parsed:bi(u,e)}))}),[i,u,l]);return(0,O.jsxs)("div",{children:[(0,O.jsx)("ol",{className:(0,q.compact)([Xt.propertyPhandleSelect,1===f&&Xt.propertyPhandleSingleton]).join(" "),children:u.map((function(e,n){return(0,O.jsx)("li",{children:(0,O.jsxs)("span",{className:Xt.behaviorBind,onClick:function(){return y(n)},children:[e,1!==f&&(0,O.jsx)(L,{name:"times",className:Xt.phandleRemove,onClick:function(e){e.stopPropagation(),b(n)}})]})},n)}))}),null!==d&&(0,O.jsx)(yi,{node:{value:u[d],params:[],slot:"behaviour"},type:"value",context:"none",behaviour:{code:u[d]},prompt:"Select Behavior",searchKey:"code",onSelect:m,onCancel:function(){return y(null)}}),f&&u.length<f&&(0,O.jsxs)(Ge,{secondary:!0,onClick:h,children:[(0,O.jsx)(L,{name:"plus"})," Add Behavior"]})]})}function ki(e){return ki="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},ki(e)}function Si(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Bi(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Si(Object(t),!0).forEach((function(n){Pi(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Si(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Pi(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==ki(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==ki(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===ki(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Ii(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var Ti={display:"inline-block",cursor:"pointer",verticalAlign:"text-top",border:"0.75px solid var(--key-color-base)",borderRadius:"3px"},Li={display:"flex",justifyContent:"center",alignItems:"center",width:"10px",height:"10px",margin:"1px",borderRadius:"2px"},Di=function(e){var n,t,o=e.node,i=e.onSelect,a=(n=o.params,t=3,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||function(e,n){if(e){if("string"==typeof e)return Ii(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Ii(e,n):void 0}}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),c=a[0],l=a[1],s=a[2],u=(0,r.useCallback)((function(){i({node:o,type:"params"})}),[o,i]),f=(0,r.useMemo)((function(){return[c,l,s].some((function(e){return void 0===e.value}))}),[c,l,s]),p="hsl(".concat(c.value,", ").concat(l.value,"%, ").concat(s.value,"%)");return(0,O.jsxs)(O.Fragment,{children:[(0,O.jsx)(yo,{node:o,onSelect:i}),f?(0,O.jsx)(yo,{node:{},onSelect:u}):(0,O.jsx)("div",{onClick:u,style:Ti,children:(0,O.jsx)("div",{className:f?rt.missingValue:null,style:Bi(Bi({},Li),{},{backgroundColor:p})})})]})};function Ri(e){return Ri="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Ri(e)}function Ni(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function _i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Ni(Object(t),!0).forEach((function(n){Mi(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Ni(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Mi(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Ri(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Ri(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Ri(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Yi(e){var n=e.node,t=e.onSelect;return(0,O.jsxs)(O.Fragment,{children:[(0,O.jsx)(yo,{node:n,onSelect:t}),G()(n,"source.params.length")>0?(0,O.jsx)(Zi,{slots:n.source.params,params:n.params,onSelect:t}):null]})}function qi(e){var n=e.node,t=e.onSelect,o=e.slot,i=(0,r.useMemo)((function(){var e;return"hsb-color-picker"===(null===(e=n.source)||void 0===e?void 0:e.helper)?Di:"code"===o?mo:Yi}),[n,o]);return(0,O.jsx)("span",{className:rt.param,children:(0,O.jsx)(i,{node:n,onSelect:t})})}function Zi(e){var n=e.slots,t=e.params,r=e.onSelect,o=e.root,i=e.wrapperProps;return(0,O.jsx)("span",_i(_i({className:rt.params,"data-is-root":!!o,"data-param-count":t.length},i),{},{children:n.map((function(e,n){return"placeholder"!==e.type&&(0,O.jsx)(qi,{slot:e,node:t[n],onSelect:r},n)}))}))}Zi.propTypes={slots:E().arrayOf(Nr).isRequired,params:E().arrayOf(Kr).isRequired,source:Yr,onSelect:E().func.isRequired};var Ki=Zi;function Ui(e,n){if(e){if("string"==typeof e)return Gi(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Gi(e,n):void 0}}function Gi(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function zi(e){var n,t,o,i,a,c,l=(0,r.useContext)(j),s=l.sources,u=l.mergedGlyphs,f=e.context,p=void 0===f?"none":f,d=e.hideBehaviour,y=e.value,h=e.params,m=e.onUpdate,b=(a=(0,r.useState)(null),c=2,function(e){if(Array.isArray(e))return e}(a)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(a,c)||Ui(a,c)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),A=b[0],v=b[1],g=y,x=G()(s.behavioursByContext[p],g,{}),C=bo(h,x),w=ko(y,h,s,p,u),E=wo(w),k=function(e){if(!e[0].source.code)return!0;var n,t=function(e,n){var t="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!t){if(Array.isArray(e)||(t=Ui(e))){t&&(e=t);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,c=!1;return{s:function(){t=t.call(e)},n:function(){var e=t.next();return a=e.done,e},e:function(e){c=!0,i=e},f:function(){try{a||null==t.return||t.return()}finally{if(c)throw i}}}}(e);try{for(t.s();!(n=t.n()).done;){var r,o=n.value;if(((null===(r=o.source)||void 0===r?void 0:r.params)||[]).length>o.params.length)return!0;if(o.params.some((function(e){return void 0===e.value||""===e.value||void 0===e.source})))return!0}}catch(e){t.e(e)}finally{t.f()}}(E);function S(e){var n=e.node,t=e.type;v({node:n,type:void 0===t?"value":t,nodeIndex:E.indexOf(n)})}return(0,O.jsxs)(O.Fragment,{children:[x&&!d?(0,O.jsx)("span",{className:(0,q.compact)([rt["behaviour-binding"],!x.code&&rt.missingValue]).join(" "),onClick:function(){return S({node:w})},children:x.code||"⦸"}):null,k&&(0,O.jsx)(L,{name:"warning",className:rt.missing,title:"Binding has missing value(s)"}),(0,O.jsx)(Ki,{root:!0,slots:C,params:w.params,onSelect:S,wrapperProps:{"data-simple":(n=w,t=jo(n.params,1)[0],o=G()(t,"source.symbol",G()(t,"source.code","")),i=!!G()(t,"source.faIcon")||1===o.length,1===n.params.length&&i),"data-long":Eo(w,C)}}),A&&(0,O.jsx)(yi,{node:A.node,type:A.type,behaviour:x,context:p,prompt:Oo(A.node.slot),searchKey:"code",onSelect:function(e){if("tree"===A.type)return function(e){var n=e.value,t=e.params,r=A.nodeIndex,o=J()(w),i=wo(o),a=i[r];a.value=n,a.params=t,delete a._isPlaceholder,i.forEach((function(e){delete e.source})),v(null),m(Sn()(o,["value","params"]))}(e);if("params"===A.type)return function(e){var n=A.nodeIndex,t=J()(w),r=wo(t);r[n].params=e,r.forEach((function(e){delete e.source})),v(null),m(Sn()(t,["value","params"]))}(e);var n=A.node,t=A.nodeIndex,r=J()(w),o=wo(r),i=o[t];if(n.slot.raw)"number"===n.slot.type&&(e.code=Number(e.code));else if("command"===n.slot){var a,c,l,s=(null===(a=i.source)||void 0===a||null===(c=a.additionalParams)||void 0===c?void 0:c.length)||0;if(((null===(l=e.additionalParams)||void 0===l?void 0:l.length)||0)<s){var u=o[0];u.params.splice(1,u.params.length-1),o.splice(2,o.length-1)}}i.value=e.code,delete i._isPlaceholder,i.params=((null==e?void 0:e.params)||[]).reduce((function(n,t,r){var o,a;return(null===(o=i.source)||void 0===o||null===(a=o.params)||void 0===a?void 0:a[r])===e.params[r]?n.push(i.params[r]):n.push({value:0,_isPlaceholder:!0}),n}),[]),o.forEach((function(e){delete e.source})),v(null),m(Sn()(r,["value","params","_isPlaceholder"]))},onCancel:function(){return v(null)}})]})}zi.propTypes={context:E().string,hideBehaviour:E().bool.isRequired,value:Mr.isRequired,params:E().arrayOf(Zr),onUpdate:E().func.isRequired},zi.defaultProps={hideBehaviour:!1};var Wi=zi;function Fi(e){return Fi="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Fi(e)}function Xi(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Vi(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Xi(Object(t),!0).forEach((function(n){Qi(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Xi(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Qi(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Fi(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Fi(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Fi(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Hi(e){var n=e.context,t=e.value,r=e.params,o=e.keyWrapperProps,i=void 0===o?{}:o,a=e.onUpdate;return(0,O.jsx)(st,Vi(Vi({},i),{},{children:(0,O.jsx)(Wi,{context:n,value:t,params:r,onUpdate:a})}))}Hi.propTypes={label:E().string,value:Mr.isRequired,params:E().arrayOf(Zr),onUpdate:E().func.isRequired};var Ji=Hi;function $i(e){return $i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},$i(e)}function ea(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function na(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function ta(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?na(Object(t),!0).forEach((function(n){ra(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):na(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function ra(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==$i(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==$i(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===$i(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function oa(e){var n=e.prop,t=void 0===n?{}:n,o=e.onUpdate,i=t.parsed,a=void 0===i?[]:i,c=(0,r.useCallback)((function(){var e;o(ta(ta({},t),{},{useRaw:!1,parsed:[].concat((e=a,function(e){if(Array.isArray(e))return ea(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,n){if(e){if("string"==typeof e)return ea(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?ea(e,n):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),[{value:"",params:[]}])}))}),[t,a,o]),l=(0,r.useCallback)((function(e,n){o(ta(ta({},t),{},{useRaw:!1,parsed:Ai(a,n,e)}))}),[t,a,o]),s=(0,r.useCallback)((function(e){o(ta(ta({},t),{},{useRaw:!1,parsed:bi(a,e)}))}),[t,a,o]);return(0,O.jsxs)(O.Fragment,{children:[(0,O.jsx)("ol",{className:Xt.propertyBindingsValue,children:a.map((function(e,n){return(0,O.jsx)("li",{children:(0,O.jsxs)(st,{children:[(0,O.jsx)(Ji,{context:"none",value:e.value,params:e.params,onUpdate:function(e){return l(e,n)}}),(0,O.jsx)("div",{className:Xt.actions,children:(0,O.jsx)(L,{name:"trash",className:Xt.deleteBind,onClick:function(e){e.stopPropagation(),s(n)}})})]})},n)}))}),(0,O.jsxs)(Ge,{secondary:!0,onClick:c,children:[(0,O.jsx)(L,{name:"plus"})," Add binding"]})]})}function ia(e){return ia="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},ia(e)}function aa(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function ca(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?aa(Object(t),!0).forEach((function(n){la(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):aa(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function la(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==ia(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==ia(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===ia(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function sa(e){var n=e.schema,t=void 0===n?{}:n,r=t.type;if("const"in t)return(0,O.jsx)(er,ca({},e));if("enum"in t)return(0,O.jsx)(Pr,ca({},e));if("key-position-picker"===t.helper){var o=e.prop,i=void 0===o?{}:o,a=e.onUpdate;return(0,O.jsx)(zt,{value:i.parsed||[],onUpdate:function(e){a(ca(ca({},i),{},{useRaw:!1,parsed:e}))}})}if(t.choices)return(0,O.jsx)(Ir,ca({},e));switch(r){case"string":return(0,O.jsx)(nr,ca({},e));case"int":return(0,O.jsx)(tr,ca({},e));case"boolean":return(0,O.jsx)(rr,ca({},e));case"phandle":case"phandles":return(0,O.jsx)(Oi,ca({},e));case"phandle-array":return(0,O.jsx)(oa,ca({},e));default:return(0,O.jsx)($t,ca({},e))}}sa.propTypes={schema:E().shape({type:E().oneOf(["string","boolean","int","array","phandle","phandles","phandle-array","integer-union"]),required:E().bool,description:E().string,default:E().any,const:E().any,helper:E().any}),prop:E().shape({parsed:E().any,raw:E().string}),onUpdate:E().func.isRequired};var ua=sa;function fa(e){return e.length>31?"maximum length: 31":e.match(/^[^a-zA-Z]/)?"first character must be a letter":e.match(/[^a-zA-Z0-9,._+-]/)?"valid characters: a-zA-Z0-9,._+-":void 0}var pa=fa;function da(e){return e.length>31?"maximum length: 31":e.match(/^[^a-zA-Z]/)?"first character must be a letter":e.match(/[^a-zA-Z0-9_]/)?"valid characters: a-zA-Z0-9_":void 0}var ya=t(33988),ha={};ha.styleTagTransform=b(),ha.setAttributes=d(),ha.insert=f().bind(null,"head"),ha.domAPI=s(),ha.insertStyleElement=h(),c()(ya.Z,ha);var ma=ya.Z&&ya.Z.locals?ya.Z.locals:void 0;function ba(e){return ba="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},ba(e)}var Aa=["validator","required","value"];function va(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function ga(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?va(Object(t),!0).forEach((function(n){xa(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):va(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function xa(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==ba(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==ba(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===ba(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function ja(e){var n=e.validator,t=e.required,r=void 0!==t&&t,o=e.value,i=void 0===o?"":o,a=function(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}(e,Aa),c=n(i)||!i&&r&&"cannot be empty";return(0,O.jsxs)("span",{className:ma.wrapper,children:[(0,O.jsx)("input",ga({type:"text",value:i},a)),c&&(0,O.jsx)("span",{className:ma.error,children:c})]})}function Ca(e){return Ca="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Ca(e)}function wa(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Ea(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?wa(Object(t),!0).forEach((function(n){Oa(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):wa(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Oa(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Ca(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Ca(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Ca(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function ka(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(e,n)||Sa(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Sa(e,n){if(e){if("string"==typeof e)return Ba(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Ba(e,n):void 0}}function Ba(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function Pa(e){var n=e.name,t=e.labels,r=ka(void 0===t?[]:t,1)[0],o=e.properties.label;return n.toLowerCase()===(r||"").toLowerCase()&&n.toLowerCase()===((null==o?void 0:o.parsed)||"").toLowerCase()}function Ia(e){var n=e.node;return(0,O.jsxs)("div",{children:[(0,O.jsx)("p",{children:(0,O.jsx)("code",{children:n.properties.compatible.parsed})}),(0,O.jsx)(Ta,Ea({},e))]})}function Ta(e){var n=e.node,t=e.onUpdate,o=ka((0,r.useState)(Pa(n)),2),i=o[0],a=o[1],c=ka((0,r.useState)(Pa(n)),2),l=c[0],s=c[1],u=function(e,n,t,o){var i=(0,r.useCallback)((function(t){n(Ea(Ea({},e),{},{name:t.target.value}))}),[e,n]),a=(0,r.useCallback)((function(r){var i,a=r.target.value,c=[a].concat(function(e){if(Array.isArray(e))return Ba(e)}(i=e.labels.slice(1))||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(i)||Sa(i)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),l=t?a:e.name,s=o?Ea(Ea({},e.properties),{},{label:{parsed:a.toUpperCase(),raw:'"'.concat(a.toUpperCase(),'"'),useRaw:!1}}):e.properties;n(Ea(Ea({},e),{},{name:l,labels:c,properties:s}))}),[e,n,t,o]);return[i,a,(0,r.useCallback)((function(t){return n(Ea(Ea({},e),{},{properties:Ea(Ea({},e.properties),{},{label:Ea(Ea({},e.properties.label),{},{parsed:t.target.value,useRaw:!1})})}))}),[e,n])]}(n,t,i,l),f=ka(u,3),p=f[0],d=f[1],y=f[2];return(0,O.jsx)("table",{children:(0,O.jsxs)("tbody",{children:[(0,O.jsxs)("tr",{children:[(0,O.jsx)("th",{children:"Bind"}),(0,O.jsx)("td",{children:(0,O.jsx)(ja,{type:"text",value:n.labels[0]||"",required:!0,validator:da,onChange:d})})]}),(0,O.jsxs)("tr",{children:[(0,O.jsx)("th",{children:"Node"}),(0,O.jsxs)("td",{children:[(0,O.jsx)(ja,{value:n.name,required:!0,readOnly:i,disabled:i,validator:fa,onChange:p}),(0,O.jsxs)("label",{title:"Set automatically using bind name",children:[(0,O.jsx)("input",{type:"checkbox",checked:i,onChange:function(e){return a(e.target.checked)}})," Automatic"]})]})]}),(0,O.jsxs)("tr",{children:[(0,O.jsx)("th",{children:"Label"}),(0,O.jsxs)("td",{children:[(0,O.jsx)(ja,{type:"text",value:n.properties.label.parsed||"",required:!0,readOnly:l,disabled:l,validator:function(){return null},onChange:y}),(0,O.jsxs)("label",{title:"Set automatically using bind name",children:[(0,O.jsx)("input",{type:"checkbox",checked:l,onChange:function(e){return s(e.target.checked)}})," Automatic"]})]})]})]})})}function La(e){return La="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},La(e)}function Da(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Ra(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Da(Object(t),!0).forEach((function(n){Na(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Da(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Na(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==La(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==La(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===La(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function _a(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var Ma=function(e){var n,t,o,i=e.node,a=e.onUpdate,c=e.onCancel,l=(0,r.useContext)(Se).behaviors,s=(t=(0,r.useState)(i),o=2,function(e){if(Array.isArray(e))return e}(t)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(t,o)||function(e,n){if(e){if("string"==typeof e)return _a(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?_a(e,n):void 0}}(t,o)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),u=s[0],f=s[1],p=l[null===(n=i.properties.compatible)||void 0===n?void 0:n.parsed],d=function(e){return function(n){f(Ra(Ra({},u),{},{properties:Ra(Ra({},u.properties),{},Na({},e,n))}))}},y=(0,r.useCallback)((function(){a(J()(u))}),[u,a]),h=(null==p?void 0:p.properties)||{},m=(p?Object.keys(h):Object.keys(u.properties)).filter((function(e){var n;return!("label"===e||null!==(n=h[e])&&void 0!==n&&n.deprecatedBy&&!u.properties[e])}));return(0,O.jsx)(fn,{onDismiss:c,children:(0,O.jsx)(tn,{dismissText:!1,children:(0,O.jsxs)("div",{style:{maxHeight:"80vh",overflow:"auto"},children:[(0,O.jsxs)("h2",{children:["Edit ",i.name," ",(0,O.jsxs)("code",{children:["(&",i.labels[0],")"]})]}),(0,O.jsx)(Ia,{node:u,onUpdate:f}),(0,O.jsx)("h3",{children:"Configuration"}),(0,O.jsxs)("table",{className:yn.editorForm,children:[(0,O.jsx)("thead",{children:(0,O.jsxs)("tr",{children:[(0,O.jsx)("th",{children:"Property"}),(0,O.jsx)("th",{children:"Value"}),(0,O.jsx)("th",{})]})}),(0,O.jsx)("tbody",{children:m.map((function(e,n){var t,r;return(0,O.jsxs)("tr",{children:[(0,O.jsx)("td",{className:yn.propertyName,children:e in h?(0,O.jsx)(hn,{property:e,schema:h[e]}):(0,O.jsx)("input",{value:e,onChange:(r=e,function(e){f(Ra(Ra({},u),{},{properties:Object.keys(u.properties).reduce((function(n,t){var o=u.properties[t];return t===r&&(t=e.target.value),n[t]=o,n}),{})}))})})}),(0,O.jsx)("td",{className:yn.propertyValue,children:(0,O.jsx)(ua,{name:e,prop:u.properties[e],schema:h[e],onUpdate:d(e)})}),(0,O.jsx)("td",{children:u.properties[e]&&!(null!==(t=h[e])&&void 0!==t&&t.required)&&(0,O.jsx)(L,{name:"trash-can",className:yn.action,onClick:function(){return function(e){f(Ra(Ra({},u),{},{properties:We()(u.properties,e)}))}(e)}})})]},n)}))})]}),(0,O.jsxs)("div",{style:{textAlign:"center"},children:[(0,O.jsx)(Ge,{onClick:y,children:"Okay"}),(0,O.jsx)(Ge,{onClick:c,secondary:!0,children:"Cancel"})]})]})})})},Ya=t(87617),qa={};qa.styleTagTransform=b(),qa.setAttributes=d(),qa.insert=f().bind(null,"head"),qa.domAPI=s(),qa.insertStyleElement=h(),c()(Ya.Z,qa);var Za=Ya.Z&&Ya.Z.locals?Ya.Z.locals:void 0;function Ka(e){return Ka="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Ka(e)}var Ua=["href","children","external","showExternal"];function Ga(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function za(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Ga(Object(t),!0).forEach((function(n){Wa(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Ga(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Wa(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Ka(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Ka(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Ka(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Fa(e){var n=e.href,t=e.children,r=e.external,o=e.showExternal,i=function(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}(e,Ua),a=Object.assign({href:n},i,r&&{rel:"noreferrer",target:"_blank"});return(0,O.jsxs)("a",za(za({},a),{},{children:[t,r&&o&&(0,O.jsx)(L,{className:Za.icon,name:"arrow-up-right-from-square"})]}))}Fa.propTypes={href:E().string.isRequired,children:E().oneOfType([E().arrayOf(E().node),E().node]).isRequired,external:E().bool.isRequired,showExternal:E().bool},Fa.defaultProps={external:!1,showExternal:!0};var Xa=Fa;function Va(e){var n=e.onDismiss,t=(0,O.jsx)(Xa,{external:!0,href:"https://github.com/nickcoutsos/keymap-editor/issues",children:"Keymap Editor Issues"});return(0,O.jsx)(fn,{onDismiss:n,children:(0,O.jsxs)(tn,{onDismiss:n,style:{maxHeight:"80vh",overflow:"scroll"},children:[(0,O.jsx)("h2",{children:"Behavior Editing Beta Test"}),(0,O.jsx)("p",{children:"Welcome to the behavior editing beta!"}),(0,O.jsx)("p",{children:"This feature has been a long time coming, and while it should enable a lot of advanced ZMK features through the app it is still a work in progress. Some features are still missing so the use experience is a little rough, and there may be errors as well. Some familiarity with ZMK behavior functionality is expected."}),(0,O.jsxs)("p",{children:["I've been using it for a while and it seems to be in a pretty workable state, but I can't catch everything, so it would mean a lot to me for you to share any feedback or issues on GitHub: ",t,"."]})]})})}function Qa(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var Ha=["zmk,behavior-hold-tap","zmk,behavior-mod-morph","zmk,behavior-tap-dance","zmk,behavior-sticky-key","zmk,behavior-caps-word"];function Ja(e){var n,t,o=e.onUpdate,i=e.onCancel,a=(n=(0,r.useState)(""),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||function(e,n){if(e){if("string"==typeof e)return Qa(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Qa(e,n):void 0}}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),c=a[0],l=a[1];return(0,O.jsx)(fn,{children:(0,O.jsxs)(tn,{dismissText:null,children:[(0,O.jsx)("h3",{children:"Add new behavior"}),(0,O.jsxs)("label",{children:["Type ",(0,O.jsxs)("select",{required:!0,value:c,onChange:function(e){return l(e.target.value)},children:[(0,O.jsx)("option",{value:"",disabled:!0,children:"Select a behavior type"}),Ha.map((function(e,n){return(0,O.jsx)("option",{value:e,children:e},n)}))]})]}),(0,O.jsxs)("div",{style:{textAlign:"center",margin:"10px"},children:[(0,O.jsx)(Ge,{disabled:!c,onClick:function(){return o(c)},children:"Create"}),(0,O.jsx)(Ge,{onClick:i,secondary:!0,children:"Cancel"})]})]})})}Ja.propTypes={onUpdate:E().func.isRequired,onCancel:E().func.isRequired};var $a=Ja,ec=t(95130);function nc(e){return nc="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},nc(e)}function tc(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function rc(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?tc(Object(t),!0).forEach((function(n){oc(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):tc(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function oc(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==nc(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==nc(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===nc(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function ic(e,n){var t=n.name,r=n.labels,o=n.label,i=ec.behaviorSchemas[e];return{name:t,labels:r,properties:rc({compatible:{raw:'"'.concat(e,'"'),parsed:e},label:{raw:'"'.concat(o,'"'),parsed:o}},Object.keys(i.properties).reduce((function(e,n){var t=i.properties[n];return function(e){return["phandle","phandles","phandle-array"].includes(e.type)}(t)&&t.length?e[n]={parsed:qo()(t.length,(function(){return"&none"}))}:"const"in t&&(e[n]={parsed:t.const,raw:"<".concat(t.const.toString(),">")}),e}),{}))}}var ac=t(62412),cc=function(e){return e.keyboard.keymap.behaviors},lc=(0,Zo.oM)({name:"behaviors",initialState:[],reducers:{addBehavior:function(e,n){e.push(n.payload.behavior)},updateBehavior:function(e,n){e[n.payload.behaviorIndex]=We()(n.payload.behavior,"params"),(0,ac.resolveBehaviorParams)(e)},deleteBehavior:function(e,n){e.splice(n.payload.behaviorIndex,1)}}}),sc=lc.actions,uc=sc.addBehavior,fc=sc.updateBehavior,pc=sc.deleteBehavior,dc=lc.reducer;function yc(e){return yc="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},yc(e)}function hc(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function mc(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?hc(Object(t),!0).forEach((function(n){bc(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):hc(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function bc(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==yc(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==yc(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===yc(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Ac(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(e,n)||function(e,n){if(e){if("string"==typeof e)return vc(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?vc(e,n):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function vc(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var gc=function(){var e=(0,i.v9)((function(e){return e.experimentalSettings})),n=Ac((0,r.useState)(null),2),t=n[0],o=n[1],a=Ac((0,r.useState)(!1),2),c=a[0],l=a[1],s=Ac((0,r.useState)(!1),2),u=s[0],f=s[1],p=(0,i.v9)(cc),d=(0,i.I0)(),y=(0,r.useCallback)((function(){l(!0)}),[l]),h=(0,r.useCallback)((function(e){l(!1),d(uc({behavior:ic(e,{name:"new_behavior",labels:["new_behavior"],label:"NEW_BEHAVIOR"})})),setTimeout((function(){return o(p.length)}))}),[p,d,l,o]),m=(0,r.useCallback)((function(e){o(e)}),[o]),b=(0,r.useCallback)((function(e){d(pc({behaviorIndex:e}))}),[d]),A=(0,r.useCallback)((function(e){e.stopPropagation(),f(!0)}),[f]),v=(0,r.useCallback)((function(){f(!1)}),[f]),g=(0,r.useCallback)((function(n){d({type:"SETTINGS_UPDATE",settings:mc(mc({},e),{},{enableBehaviorEditing:n})})}),[e,d]);return(0,O.jsxs)("div",{className:yn.main,children:[c&&(0,O.jsx)($a,{onUpdate:h,onCancel:function(){return l(!1)}}),null!==t&&(0,O.jsx)(Ma,{node:p[t],onCancel:function(){return o(null)},onUpdate:function(e){o(null),d(fc({behaviorIndex:t,behavior:e}))}}),u&&(0,O.jsx)(Va,{onDismiss:v}),(0,O.jsxs)("div",{className:yn.panel,children:[(0,O.jsxs)("label",{children:["Enable Beta",(0,O.jsx)("input",{type:"checkbox",checked:e.enableBehaviorEditing,onChange:function(e){return g(e.target.checked)}})]}),(0,O.jsxs)(Ge,{onClick:A,style:{backgroundColor:"orange"},children:[(0,O.jsx)(L,{name:"warning"})," Details"]}),(0,O.jsx)("h3",{children:"Custom Behaviors"}),(0,O.jsxs)("table",{style:{width:"100%"},children:[(0,O.jsx)("thead",{children:(0,O.jsxs)("tr",{children:[(0,O.jsx)("th",{children:"Binding"}),(0,O.jsx)("th",{children:"Compatible"}),(0,O.jsx)("th",{children:"Actions"})]})}),(0,O.jsx)("tbody",{children:p.map((function(n,t){return(0,O.jsxs)("tr",{children:[(0,O.jsx)("td",{children:(0,O.jsxs)("code",{children:["&",n.labels[0]]})}),(0,O.jsx)("td",{children:n.properties.compatible.raw}),(0,O.jsx)("td",{children:e.enableBehaviorEditing&&(0,O.jsxs)(O.Fragment,{children:[(0,O.jsx)(L,{className:yn.action,onClick:function(){return m(t)},name:"wrench"}),(0,O.jsx)(L,{className:yn.action,onClick:function(){return b(t)},name:"trash-can"})]})})]},t)}))})]}),(0,O.jsx)(Ge,{onClick:y,children:"Add New Behavior"})]})]})},xc=t(78207),jc={};jc.styleTagTransform=b(),jc.setAttributes=d(),jc.insert=f().bind(null,"head"),jc.domAPI=s(),jc.insertStyleElement=h(),c()(xc.Z,jc);var Cc=xc.Z&&xc.Z.locals?xc.Z.locals:void 0;function wc(){return(0,O.jsx)("p",{className:Cc.floatingMessage,children:"Click on a key to add it to the combo"})}function Ec(e){var n=e.keyPositions,t=e.onUpdate;return(0,O.jsxs)("div",{className:Cc.comboInputMap,children:[(0,O.jsx)(zt,{value:n,onUpdate:t}),n.length<2&&(0,O.jsx)(wc,{})]})}Ec.propTypes={onUpdate:E().func.isRequired,keyPositions:E().arrayOf(E().number).isRequired};var Oc=Ec,kc=t(86015),Sc={};Sc.styleTagTransform=b(),Sc.setAttributes=d(),Sc.insert=f().bind(null,"head"),Sc.domAPI=s(),Sc.insertStyleElement=h(),c()(kc.Z,Sc);var Bc=kc.Z&&kc.Z.locals?kc.Z.locals:void 0;function Pc(e){return function(n){n.stopPropagation(),e()}}function Ic(e){return function(n){e[n.key]&&e[n.key]()}}function Tc(e){return Tc="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Tc(e)}function Lc(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Dc(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Lc(Object(t),!0).forEach((function(n){Rc(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Lc(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Rc(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Tc(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Tc(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Tc(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Nc(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function _c(e){var n,t,o=e.value,i=e.validate,a=e.required,c=e.render,l=e.onUpdate,s=(0,r.useRef)(),u=(n=(0,r.useState)({value:o,editing:!1,attemptedEmpty:!1}),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||function(e,n){if(e){if("string"==typeof e)return Nc(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Nc(e,n):void 0}}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),f=u[0],p=u[1],d=f.attemptedEmpty?"cannot be empty":i&&i(f.value),y=(0,r.useCallback)((function(e){e&&(e.focus(),e.select())}),[]),h=(0,r.useCallback)((function(){p((function(e){return Dc(Dc({},e),{},{editing:!1})}))}),[p]),m=(0,r.useCallback)((function(e){s.current&&!s.current.contains(e.target)&&h()}),[s,h]);return(0,r.useEffect)((function(){return document.addEventListener("click",m),function(){return document.removeEventListener("click",m)}}),[m]),f.editing?(0,O.jsxs)("span",{className:Bc.container,ref:s,children:[(0,O.jsx)("input",{ref:y,value:f.value,onChange:function(e){return p(Dc(Dc({},f),{},{attemptedEmpty:!1,value:e.target.value}))},onKeyDown:Ic({Enter:function(){f.editing&&(""===f.value&&a?p(Dc(Dc({},f),{},{attemptedEmpty:!0})):(d||l(f.value),p(Dc(Dc({},f),{},{value:f.value,editing:!1}))))},Escape:h})}),d&&(0,O.jsx)("span",{className:Bc.error,children:d})]}):c((0,O.jsxs)(O.Fragment,{children:[(0,O.jsx)("span",{children:o}),(0,O.jsx)(L,{name:"pencil",className:Bc.edit,onClick:Pc((function(){return p(Dc(Dc({},f),{},{editing:!0}))}))})]}))}_c.propTypes={value:E().string.isRequired,validate:E().func,required:E().bool.isRequired,render:E().func.isRequired,onUpdate:E().func.isRequired},_c.defaultProps={required:!0};var Mc=_c;function Yc(e){return Yc="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Yc(e)}function qc(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Zc(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?qc(Object(t),!0).forEach((function(n){Kc(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):qc(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Kc(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Yc(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Yc(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Yc(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Uc(e,n){if(e){if("string"==typeof e)return Gc(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Gc(e,n):void 0}}function Gc(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function zc(e){var n=e.selected,t=e.options,r=e.onUpdate;return(0,O.jsx)("ul",{className:Cc.layerList,children:t.map((function(e,t){return(0,O.jsx)("li",{"data-selected":n.includes(t),onClick:function(){return e=t,void r(n.includes(e)?n.filter((function(n){return n!==e})):[].concat(function(e){if(Array.isArray(e))return Gc(e)}(o=n)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(o)||Uc(o)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),[e]));var e,o},children:e})}))})}var Wc=function(e){var n,t,o=e.combo,a=e.onUpdate,c=(0,i.v9)(zo),l=(n=(0,r.useState)(Sn()(o,["timeoutMs","slowRelease","layers"])),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||Uc(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),s=l[0],u=l[1],f=c.map((function(e){return e.name}));return(0,O.jsx)(fn,{children:(0,O.jsxs)(tn,{onDismiss:function(){a(s)},children:[(0,O.jsxs)("h2",{children:["Customize [",(0,O.jsx)("code",{children:o.identifier}),"]"]}),(0,O.jsxs)("div",{children:[(0,O.jsxs)("div",{className:Cc.field,children:[(0,O.jsx)("label",{htmlFor:"customize-combo-timeout",children:"Timeout (ms)"}),(0,O.jsx)("input",{id:"customize-combo-timeout",type:"number",placeholder:"Default",value:s.timeoutMs,onChange:function(e){return u((function(n){return Zc(Zc({},n),{},{timeoutMs:""===e.target.value?void 0:Number(e.target.value)})}))}})]}),(0,O.jsxs)("div",{className:Cc.field,children:[(0,O.jsx)("label",{htmlFor:"customize-combo-slow-release",children:"Slow Release"}),(0,O.jsx)("input",{id:"customize-combo-slow-release",type:"checkbox",checked:s.slowRelease,onChange:function(e){return u((function(n){return Zc(Zc({},n),{},{slowRelease:e.target.checked})}))}})]}),(0,O.jsxs)("div",{className:Cc.field,children:[(0,O.jsx)("label",{children:"Layers"}),(0,O.jsx)(zc,{selected:s.layers||[],options:f,onUpdate:function(e){return u((function(n){return Zc(Zc({},n),{},{layers:e})}))}})]})]})]})})},Fc=function(e){return e.keyboard.keymap.combos},Xc=(0,Zo.oM)({name:"combos",initialState:[],reducers:{updateComboBinding:function(e,n){e[n.payload.comboIndex].bindings=n.payload.bindings},updateComboKeypositions:function(e,n){e[n.payload.comboIndex].keyPositions=n.payload.keyPositions},createCombo:function(e){e.push({identifier:"new_combo",keyPositions:[],bindings:[{value:"&trans",params:[]}]})},renameCombo:function(e,n){e[n.payload.index].identifier=n.payload.name},deleteCombo:function(e,n){e.splice(n.payload.index,1)},customizeCombo:function(e,n){Object.assign(e[n.payload.index],n.payload.config)}}}),Vc=Xc.actions,Qc=Vc.updateComboBinding,Hc=Vc.updateComboKeypositions,Jc=Vc.createCombo,$c=Vc.renameCombo,el=Vc.deleteCombo,nl=Vc.customizeCombo,tl=Xc.reducer;function rl(e){return rl="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},rl(e)}function ol(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function il(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?ol(Object(t),!0).forEach((function(n){al(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ol(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function al(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==rl(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==rl(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===rl(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function cl(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function ll(e){var n,t,o=(0,r.useContext)(j).identifiers,a=(0,i.v9)(Fc),c=(0,i.I0)(),l=(n=(0,r.useState)(null),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||function(e,n){if(e){if("string"==typeof e)return cl(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?cl(e,n):void 0}}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),s=l[0],u=l[1];function f(e){return pa(e)||(o.includes(e)?'Cannot use existing identifier "'.concat(e,'"'):null)}return(0,O.jsxs)("div",{className:Cc.main,children:[null!==s&&(0,O.jsx)(Wc,{combo:a[s],onUpdate:function(e){return function(e,n){u(null),c(nl({index:e,config:n}))}(s,e)}}),(0,O.jsxs)("div",{className:Cc.sidebar,children:[(0,O.jsxs)(Xa,{external:!0,href:"https://zmk.dev/docs/features/combos",children:[(0,O.jsx)(L,{name:"book"})," ZMK Docs: Combos"]}),(0,O.jsx)(Ge,{onClick:function(){c(Jc())},children:"Add New Combo"})]}),(0,O.jsx)("div",{className:Cc.comboPanel,children:a.map((function(e,n){return(0,O.jsxs)("div",{className:Cc.combo,children:[(0,O.jsxs)("div",{className:Cc.heading,children:[(0,O.jsx)(Mc,{value:e.identifier,validate:f,render:function(e){return(0,O.jsx)("h5",{children:(0,O.jsx)("code",{children:e})})},onUpdate:function(e){return function(e,n){c($c({index:e,name:n}))}(n,e)}}),(0,O.jsxs)("div",{className:Cc.actions,children:[(0,O.jsx)(L,{name:"wrench",className:"".concat(Cc.action),onClick:function(){return u(n)}}),(0,O.jsx)(L,{name:"trash-can",className:"".concat(Cc.action," ").concat(Cc.remove),onClick:function(){c(el({index:n}))}})]})]}),(0,O.jsxs)("div",{className:Cc.detail,children:[(0,O.jsx)("div",{className:Cc.comboOutput,children:(0,O.jsx)(Ji,il(il({},e.bindings[0]),{},{onUpdate:function(e){!function(e,n){c(Qc({comboIndex:e,bindings:[n]}))}(n,e)}}))}),(0,O.jsx)(Oc,{keyPositions:e.keyPositions,onUpdate:function(e){return function(e,n){c(Hc({comboIndex:e,keyPositions:n}))}(n,e)}})]})]},n)}))})]})}ll.propTypes={};var sl=ll,ul=t(50335),fl={};fl.styleTagTransform=b(),fl.setAttributes=d(),fl.insert=f().bind(null,"head"),fl.domAPI=s(),fl.insertStyleElement=h(),c()(ul.Z,fl);var pl=ul.Z&&ul.Z.locals?ul.Z.locals:void 0;function dl(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(e,n)||function(e,n){if(e){if("string"==typeof e)return yl(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?yl(e,n):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function yl(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function hl(e){var n=e.activeLayer,t=e.onSelect,o=(0,r.useRef)(null),a=(0,i.I0)(),c=(0,r.useContext)(It).bindingCount,l=(0,i.v9)(zo),s=dl((0,r.useState)(!1),2),u=s[0],f=s[1],p=dl((0,r.useState)(""),2),d=p[0],y=p[1],h=(0,r.useCallback)((function(e){if(e===n)return y(l[n].name),void f(!0);f(!1),t(e)}),[l,n,y,f,t]),m=(0,r.useCallback)((function(){return a(Xo({bindingCount:c}))}),[a,c]),b=(0,r.useMemo)((function(){return function(e,n){window.confirm("Really delete layer: ".concat(n,"?"))&&a(Qo({index:e}))}}),[a]),A=(0,r.useCallback)((function(){if(u){var e=n,t=d;y(""),f(!1),a(Vo({index:e,name:t}))}}),[d,u,n,y,f,a]),v=(0,r.useCallback)((function(){u&&(y(""),f(!1))}),[u,y,f]),g=(0,r.useMemo)((function(){return function(e){o.current&&!o.current.contains(e.target)&&v()}}),[o,v]);(0,r.useEffect)((function(){return document.addEventListener("click",g),function(){return document.removeEventListener("click",g)}}),[g]);var x=(0,r.useCallback)((function(e){e&&(e.focus(),e.select())}),[]);return(0,O.jsx)("div",{className:pl.layerSelector,"data-renaming":u,ref:o,children:(0,O.jsxs)("ul",{children:[l.map((function(e,t){var r=e.name;return(0,O.jsxs)("li",{className:n===t?pl.active:"","data-layer":t,onClick:Pc((function(){return h(t)})),children:[(0,O.jsx)("span",{className:pl.index,children:t}),n===t&&u?(0,O.jsx)("input",{ref:x,className:pl.name,onChange:function(e){return y(e.target.value)},onKeyDown:Ic({Enter:A,Escape:v}),value:n===t&&u?d:r}):(0,O.jsxs)("span",{className:pl.name,children:[r,(0,O.jsx)(L,{name:"times-circle",className:pl.delete,onClick:Pc((function(){return b(t,r)}))})]})]},"layer-".concat(t))})),(0,O.jsxs)("li",{onClick:m,children:[(0,O.jsx)(L,{className:pl.index,name:"plus"}),(0,O.jsx)("span",{className:pl.name,children:"Add Layer"})]})]})})}hl.propTypes={activeLayer:E().number.isRequired,onSelect:E().func.isRequired};var ml=hl;function bl(e){var n=e.direction;return(0,O.jsx)("svg",{xmlns:"http://www.w3.org/2000/svg",width:"65px",height:"65px",viewBox:"0 0 65 65",style:{position:"absolute",top:"-10px",stroke:"var(--key-color-base)",strokeWidth:2,fill:"none",display:"block",width:"65px",height:"65px",pointerEvents:"none"},children:(0,O.jsx)("path",{style:{transform:"scaleX(".concat("cw"===n?-1:1,") rotate(-45deg)"),transformOrigin:"center center"},d:"M 63 31 A 30 30 45 0 0 32.5 2 M 37 -2 L 32.5 2 L 37 6"})})}function Al(e){var n=e.context,t=e.direction,r=e.params,o=e.onUpdate;return(0,O.jsxs)(st,{themeClass:rt.encoder,children:[(0,O.jsx)(bl,{direction:t}),(0,O.jsx)(Wi,{hideBehaviour:!0,context:n,value:"&kp",params:r,onUpdate:o})]})}Al.propTypes={params:E().arrayOf(Zr),onUpdate:E().func.isRequired};var vl=Al;function gl(e){return gl="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},gl(e)}function xl(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function jl(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Cl(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?jl(Object(t),!0).forEach((function(n){wl(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):jl(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function wl(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==gl(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==gl(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===gl(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}var El=function(e){var n=e.layer,t=e.sensors,r=(0,i.I0)(),o=(0,i.v9)(zo)[n].sensorBindings,a=void 0===o?[]:o;function c(e,t,o){var i=o.params[0],c=a[e]||{value:"&inc_dec_kp",params:[{value:"",params:[]},{value:"",params:[]}]};r($o({layerIndex:n,sensorIndex:e,bindings:Cl(Cl({},c),{},{params:Ai(c.params,t,i)})}))}return(0,O.jsxs)("div",{style:{margin:"0 0 30px"},children:[(0,O.jsx)("h3",{children:"Sensor bindings"}),(0,O.jsx)("div",{style:{display:"flex",flexDirection:"row",gap:"25px"},children:t.map((function(e,n){var t,r=e.label||e.identifier,o=function(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(e,n)||function(e,n){if(e){if("string"==typeof e)return xl(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?xl(e,n):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}((null===(t=a[n])||void 0===t?void 0:t.params)||[],2),i=o[0],l=o[1];return(0,O.jsxs)("div",{style:{display:"block"},children:[(0,O.jsx)("label",{style:{fontVariant:"small-caps",fontSize:"90%"},children:(0,O.jsx)("code",{children:r})}),(0,O.jsxs)("div",{style:{display:"flex",flexDirection:"row",gap:"5px",marginTop:"20px"},children:[(0,O.jsx)(vl,{direction:"ccw",params:[l],onUpdate:function(e){return c(n,1,e)}}),(0,O.jsx)(vl,{direction:"cw",params:[i],onUpdate:function(e){return c(n,0,e)}})]})]},n)}))})]})},Ol=t(56634),kl={};kl.styleTagTransform=b(),kl.setAttributes=d(),kl.insert=f().bind(null,"head"),kl.domAPI=s(),kl.insertStyleElement=h(),c()(Ol.Z,kl);var Sl=Ol.Z&&Ol.Z.locals?Ol.Z.locals:void 0;function Bl(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function Pl(e){var n,t,o=e.actions,i=(n=(0,r.useState)(!1),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||function(e,n){if(e){if("string"==typeof e)return Bl(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Bl(e,n):void 0}}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=i[0],c=i[1],l=(0,r.useRef)(),s=(0,r.useCallback)((function(e){l.current&&!l.current.contains(e.target)&&c(!1)}),[l,c]);return(0,r.useEffect)((function(){return document.body.addEventListener("click",s),function(){return document.body.removeEventListener("click",s)}}),[s]),(0,O.jsxs)("div",{ref:l,className:[Sl.menu,a&&Sl.open].join(" "),children:[(0,O.jsx)("p",{onClick:function(){return c(!a)},children:(0,O.jsx)(L,{name:"ellipsis"})}),(0,O.jsx)("ul",{children:o.map((function(e,n){return(0,O.jsx)("li",{onClick:function(){return function(e){c(!1),e()}(e.callback)},children:e.content},n)}))})]})}function Il(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function Tl(e){var n,t=e.activeLayer,o=e.additionalActions,a=void 0===o?[]:o,c=(0,i.I0)(),l=(0,r.useMemo)((function(){return{transparentToKeypress:function(){return c(ei({layerIndex:t}))},transparentToNone:function(){return c(ni({layerIndex:t}))},noneToKeypress:function(){return c(ti({layerIndex:t}))},noneToTransparent:function(){return c(ri({layerIndex:t}))},emptyKeypressToTransparent:function(){return c(oi({layerIndex:t}))},emptyKeypressToNone:function(){return c(ii({layerIndex:t}))}}}),[c,t]);return(0,O.jsx)(Pl,{actions:[].concat((n=a,function(e){if(Array.isArray(e))return Il(e)}(n)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(n)||function(e,n){if(e){if("string"==typeof e)return Il(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Il(e,n):void 0}}(n)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),[{callback:l.transparentToKeypress,content:(0,O.jsxs)(O.Fragment,{children:["Convert ",(0,O.jsx)("code",{children:"&trans"})," to ",(0,O.jsx)("code",{children:"&kp"})]})},{callback:l.transparentToNone,content:(0,O.jsxs)(O.Fragment,{children:["Convert ",(0,O.jsx)("code",{children:"&trans"})," to ",(0,O.jsx)("code",{children:"&none"})]})},{callback:l.noneToKeypress,content:(0,O.jsxs)(O.Fragment,{children:["Convert ",(0,O.jsx)("code",{children:"&none"})," to ",(0,O.jsx)("code",{children:"&kp"})]})},{callback:l.noneToTransparent,content:(0,O.jsxs)(O.Fragment,{children:["Convert ",(0,O.jsx)("code",{children:"&none"})," to ",(0,O.jsx)("code",{children:"&trans"})]})},{callback:l.emptyKeypressToTransparent,content:(0,O.jsxs)(O.Fragment,{children:["Convert ",(0,O.jsx)("code",{children:"&kp ⦸"})," to ",(0,O.jsx)("code",{children:"&trans"})]})},{callback:l.emptyKeypressToNone,content:(0,O.jsxs)(O.Fragment,{children:["Convert ",(0,O.jsx)("code",{children:"&kp ⦸"})," to ",(0,O.jsx)("code",{children:"&none"})]})}])})}Pl.propTypes={actions:E().arrayOf(E().shape({callback:E().func.isRequired,content:E().oneOfType([E().node,E().string]).isRequired})).isRequired},Tl.propTypes={activeLayer:E().number.isRequired,additionalActions:E().arrayOf(E().shape({callback:E().func.isRequired,content:E().oneOfType([E().node,E().string]).isRequired}))};var Ll=t(59500),Dl={};Dl.styleTagTransform=b(),Dl.setAttributes=d(),Dl.insert=f().bind(null,"head"),Dl.domAPI=s(),Dl.insertStyleElement=h(),c()(Ll.Z,Dl);var Rl=Ll.Z&&Ll.Z.locals?Ll.Z.locals:void 0;function Nl(e){return Nl="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Nl(e)}function _l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Ml(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?_l(Object(t),!0).forEach((function(n){Yl(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):_l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Yl(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Nl(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Nl(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Nl(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function ql(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var Zl=function(e){var n,t,o=e.activeLayer,a=e.onClose,c=(0,i.I0)(),l=(0,i.v9)(zo)[o],s=(n=(0,r.useState)(Sn()(l,["name","label"])),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||function(e,n){if(e){if("string"==typeof e)return ql(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?ql(e,n):void 0}}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),u=s[0],f=s[1];return(0,O.jsx)(fn,{onDismiss:a,children:(0,O.jsxs)(tn,{dismissText:"",children:[(0,O.jsxs)("h2",{children:["Customize Layer ",(0,O.jsx)("code",{children:l.name})]}),(0,O.jsxs)("div",{children:[(0,O.jsxs)("div",{className:Rl.field,children:[(0,O.jsx)("label",{htmlFor:"customize-layer-name",children:"Name"}),(0,O.jsx)(ja,{id:"customize-layer-name",placeholder:"Default",value:u.name,validator:fa,onChange:function(e){return f((function(n){return Ml(Ml({},n),{},{name:e.target.value})}))}})]}),(0,O.jsxs)("div",{className:Rl.field,children:[(0,O.jsx)("label",{htmlFor:"customize-layer-label",children:"Label"}),(0,O.jsx)("input",{id:"customize-layer-label",placeholder:"Default",value:u.label,onChange:function(e){return f((function(n){return Ml(Ml({},n),{},{label:e.target.value})}))}})]})]}),(0,O.jsxs)("div",{style:{textAlign:"center",gap:"5px"},children:[(0,O.jsx)(Ge,{onClick:function(){c(Ho(Ml({layerIndex:o},u))),a()},children:"OK"}),(0,O.jsx)(Ge,{onClick:a,secondary:!0,children:"Cancel"})]})]})})};function Kl(){var e=(0,i.I0)(),n=(0,r.useContext)(It).bindingCount;return(0,O.jsxs)("div",{style:{textAlign:"center"},children:[(0,O.jsx)("h3",{children:"No keymap layers defined"}),(0,O.jsx)(Ge,{onClick:function(){return e(Xo({bindingCount:n}))},children:"Add layer"})]})}function Ul(e){var n=e.layout,t=e.activeLayer,o=(0,i.I0)(),a=(0,i.v9)(zo)[t],c=(0,r.useCallback)((function(e,n){o(Jo({layerIndex:t,bindIndex:e,binding:n}))}),[o,t]);return(0,O.jsx)(Jn,{layout:n,bindings:a.bindings,renderKey:function(e){var n,t,r=e.index,o=e.keyLayout;return a.bindings[r]&&(0,O.jsx)(Ji,{label:o.label,value:null===(n=a.bindings[r])||void 0===n?void 0:n.value,params:null===(t=a.bindings[r])||void 0===t?void 0:t.params,onUpdate:function(e){return c(r,e)}})}})}var Gl=t(62029);function zl(e,n){if(e){if("string"==typeof e)return Wl(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Wl(e,n):void 0}}function Wl(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var Fl={keysHeld:[],keysHeldBeforeLastRelease:[]};function Xl(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(e,n)||function(e,n){if(e){if("string"==typeof e)return Vl(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Vl(e,n):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Vl(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var Ql={Alt:"ALT",Control:"CTRL",Shift:"SHFT",Meta:"GUI",ArrowUp:"UP",ArrowDown:"DOWN",ArrowLeft:"LEFT",ArrowRight:"RIGHT",Escape:"ESC",Tab:"TAB",Enter:"RET",Home:"HOME",End:"END",PageDown:"PG_DN",PageUp:"PG_UP",Backspace:"BSPC",Delete:"DEL"};function Hl(e,n){var t=arguments.length>2&&void 0!==arguments[2]&&arguments[2],o=(0,i.I0)(),a=Xl((0,r.useState)(t),2),c=a[0],l=a[1],s=Xl((0,r.useState)(0),2),u=s[0],f=s[1],p=(0,r.useCallback)((function(){u===n.length-1?(f(0),l(!1)):f(u+1)}),[u,f,n.length,l]),d=(0,r.useCallback)((function(n){var t=function(e){var n=function(e){return(0,q.compact)([e.altKey&&"LA",e.ctrlKey&&"LC",e.metaKey&&"LG",e.shiftKey&&"LS"])}(e),t=(0,Gl.mapCharacter)(e.key.toLowerCase())||function(e){var n=Ql[e.key],t=function(e){switch(e.location){case 1:return"L";case 2:return"R";default:return""}}(e);return n?{value:"&kp",params:[{value:t+n,params:[]}]}:null}(e);if(t)return{value:t.value,params:n.reduce((function(e,n){return[{value:n,params:e}]}),t.params)}}(n);t&&(o(Jo({layerIndex:e,bindIndex:u,binding:t})),p())}),[e,u,p,o]);!function(e,n){var t,o,i=(t=(0,r.useReducer)((function(e,n){switch(n.type){case"KEY_DOWN":return function(e,n){return{keysHeld:[].concat((t=e.keysHeld,function(e){if(Array.isArray(e))return Wl(e)}(t)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(t)||zl(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),[n.event.key]),keysHeldBeforeLastRelease:[]};var t}(e,n);case"KEY_UP":return function(e,n){return{keysHeld:[],keysHeldBeforeLastRelease:e.keysHeld.filter((function(e){return e!==n.event.key}))}}(e,n);case"RESET":return Fl;default:return e}}),Fl),o=2,function(e){if(Array.isArray(e))return e}(t)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(t,o)||zl(t,o)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=i[0],c=i[1],l=(0,r.useCallback)((function(e){e.repeat||(e.preventDefault(),c({type:"KEY_DOWN",event:e}))}),[c]),s=(0,r.useCallback)((function(e){a.keysHeldBeforeLastRelease.includes(e.key)||(e.preventDefault(),n(e),c({type:"KEY_UP",event:e}))}),[a.keysHeldBeforeLastRelease,n,c]);(0,r.useEffect)((function(){if(e)return document.body.addEventListener("keydown",l),document.body.addEventListener("keyup",s),function(){document.body.removeEventListener("keydown",l),document.body.removeEventListener("keyup",s)}}),[e,l,s])}(c,d);var y=(0,r.useCallback)((function(){l(!0)}),[l]),h=(0,r.useCallback)((function(){l(!1)}),[l]);return[{isActive:c,bindIndex:u},{startQuickAssignment:y,cancelQuickAssignment:h,setBindIndex:f}]}function Jl(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function $l(e){var n,t,o=e.layout,a=e.layerIndex,c=e.onClose,l=(0,i.v9)(zo)[a],s=(n=Hl(a,o,!0),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||function(e,n){if(e){if("string"==typeof e)return Jl(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Jl(e,n):void 0}}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),u=s[0],f=s[1],p=(0,r.useMemo)((function(){return On(o,{overrides:{minWidth:"400px"}})}),[o]);return(0,r.useEffect)((function(){u.isActive||c()}),[u.isActive,c]),(0,O.jsx)(fn,{onDismiss:c,children:(0,O.jsxs)(tn,{classes:[Rl.quickAssignDialog],dismissText:"",children:[(0,O.jsx)("h2",{children:"Quick-assign layer keybindings"}),(0,O.jsxs)("p",{children:["Press a key on your keyboard to set a ",(0,O.jsx)("code",{children:"&kp"})," binding at the highlighted position in your keymap."]}),(0,O.jsx)("div",{style:p,children:(0,O.jsx)(Jn,{layout:o,bindings:l.bindings,renderKey:function(e){var n,t,r=e.index,o=e.keyLayout;return l.bindings[r]&&(0,O.jsx)(Ji,{label:o.label,keyWrapperProps:{selectable:!1,onClick:function(){return f.setBindIndex(r)},className:et()([Rl.quickBindKey,u.bindIndex===r&&Rl.quickBindKeyHighlight]).join(" ")},value:null===(n=l.bindings[r])||void 0===n?void 0:n.value,params:null===(t=l.bindings[r])||void 0===t?void 0:t.params,onUpdate:function(e){}})}})}),(0,O.jsxs)("div",{style:{textAlign:"center"},children:[(0,O.jsx)(Pt,{children:"Click on a different key to jump ahead or correct a previous binding."}),(0,O.jsx)("p",{children:(0,O.jsx)(Ge,{onClick:c,children:"Done"})})]})]})})}function es(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(e,n)||function(e,n){if(e){if("string"==typeof e)return ns(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?ns(e,n):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ns(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var ts=function(e){var n=e.sensors,t=(0,i.v9)(zo),o=es((0,r.useState)(0),2),a=o[0],c=o[1],l=es((0,r.useState)(!1),2),s=l[0],u=l[1],f=es((0,r.useState)(!1),2),p=f[0],d=f[1],y=Math.max(0,Math.min(a,t.length-1)),h=(0,r.useContext)(It),m=h.layout,b=h.wrapperStyle,A=(0,r.useCallback)((function(){return u(!0)}),[u]),v=(0,r.useCallback)((function(){return d(!0)}),[d]),g=(0,r.useCallback)((function(){return d(!1)}),[d]),x=(0,r.useMemo)((function(){return[{callback:A,content:"Change Configuration"},{callback:v,content:(0,O.jsxs)(O.Fragment,{children:["Quick ",(0,O.jsx)("code",{children:"&kp"})," Assignment"]})}]}),[A,v]);if(0===t.length)return(0,O.jsx)(Kl,{});var j=b.width,C=b.height,w=b.margin,E=b.padding;return(0,O.jsxs)(O.Fragment,{children:[(0,O.jsx)(ml,{activeLayer:y,onSelect:c}),(0,O.jsxs)("div",{style:{margin:w,padding:E,width:"fit-content"},children:[(0,O.jsxs)("div",{style:{width:j},children:[(0,O.jsxs)("h3",{style:{position:"relative"},children:["Key Bindings ",(0,O.jsx)(Tl,{activeLayer:a,additionalActions:x})]}),(0,O.jsx)("div",{style:{height:C},children:(0,O.jsx)(Ul,{layout:m,activeLayer:y})})]}),(0,O.jsx)("div",{className:Rl.sensors,"data-sensor-count":n.length,style:{},children:(0,O.jsx)(El,{sensors:n,layer:y})})]}),s&&(0,O.jsx)(Zl,{activeLayer:y,onClose:function(){return u(!1)}}),p&&(0,O.jsx)($l,{layout:m,layerIndex:y,onClose:g})]})};function rs(e){return["&macro_tap","&macro_press","&macro_release","&macro_tap_time","&macro_wait_time","&macro_pause_for_release"].includes(e.value)}var os=t(96201),is={};is.styleTagTransform=b(),is.setAttributes=d(),is.insert=f().bind(null,"head"),is.domAPI=s(),is.insertStyleElement=h(),c()(os.Z,is);var as=os.Z&&os.Z.locals?os.Z.locals:void 0,cs=t(18446),ls=t.n(cs),ss=t(35839),us={};us.styleTagTransform=b(),us.setAttributes=d(),us.insert=f().bind(null,"head"),us.domAPI=s(),us.insertStyleElement=h(),c()(ss.Z,us);var fs=ss.Z&&ss.Z.locals?ss.Z.locals:void 0,ps=["bindings","children","dragging","dragMode"],ds=["isDropping","control","classes"],ys=["bind"],hs=["bind"],ms=["row","isDropping"];function bs(e){return bs="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},bs(e)}function As(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(e,n)||vs(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function vs(e,n){if(e){if("string"==typeof e)return gs(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?gs(e,n):void 0}}function gs(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function xs(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}function js(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Cs(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?js(Object(t),!0).forEach((function(n){ws(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):js(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function ws(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==bs(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==bs(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===bs(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Es(e){var n=e.bindings,t=(e.children,e.dragging),o=e.dragMode,i=xs(e,ps),a=As((0,r.useState)([null,null]),2),c=a[0],l=a[1],s=(0,r.useMemo)((function(){return function(e){return e.reduce((function(e,n,t){var r=function(){return 0===e.at(-1).length};return(rs(n)&&!r()||!r()&&rs(e.at(-1)[0])||6===e.at(-1).length)&&e.push([]),e.at(-1).push(Cs(Cs({},n),{},{index:t})),e}),[[]])}(n)}),[n]);function u(e){console.log("enter",e),l((function(){return e}))}function f(e){return ls()(c,e)}function p(e){l((function(n){return console.log("leaving",e,"currently in",n),ls()(n,e)?[null,null]:n}))}function d(){console.log("handleDrop",c);var e=As(c,3),t=e[0],r=e[1],o=e[2],a=s[t][r].index,l=a<n.length-1?a+1:-1;i.onDrop(1===o?l:a)}return t&&(0,O.jsxs)("div",{className:[fs.dropTargets,t?fs.dragging:"","row"===o?fs.dropRowOnly:""].join(" "),children:[s.map((function(e,n){return(0,O.jsxs)(r.Fragment,{children:[(0,O.jsx)(Bs,{row:e,isDropping:f([n,0,-1]),onDragEnter:function(){return u([n,0,-1])},onDragLeave:function(){return p([n,0,-1])},onDrop:d}),e.map((function(t,o){return(0,O.jsxs)(r.Fragment,{children:[(0,O.jsx)(ks,{bind:t,isDropping:f([n,o,0]),onDragEnter:function(){return u([n,o,0])},onDragLeave:function(){return p([n,o,0])},onDrop:d}),(0,O.jsx)(Ss,{bind:t,isDropping:f([n,o,1]),onDragEnter:function(){return u([n,o,1])},onDragLeave:function(){return p([n,o,1])},onDrop:d,"data-extend":rs(t)||o!==e.length-1?0:Math.max(0,5-o)})]},o)}))]},n)})),(0,O.jsx)(Bs,{row:s.length-1,isDropping:f([s.length-1,s.at(-1).length-1,1]),onDragEnter:function(){return u([s.length-1,s.at(-1).length-1,1])},onDragLeave:function(){return p([s.length-1,s.at(-1).length-1,1])},onDrop:d})]})}function Os(e){var n,t=e.isDropping,r=e.control,o=void 0!==r&&r,i=e.classes,a=void 0===i?[]:i,c=xs(e,ds);return(0,O.jsx)("div",Cs({"data-is-control":o,className:[fs.dropTargetHalf,t?fs.droppable:""].concat((n=a,function(e){if(Array.isArray(e))return gs(e)}(n)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(n)||vs(n)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())).join(" ")},c))}function ks(e){var n=e.bind,t=xs(e,ys);return(0,O.jsx)(Os,Cs({control:rs(n)},t))}function Ss(e){var n=e.bind,t=xs(e,hs);return(0,O.jsx)(Os,Cs({control:rs(n),classes:[fs.secondHalf]},t))}function Bs(e){e.row;var n=e.isDropping,t=xs(e,ms);return(0,O.jsx)("div",Cs({"data-drop-mode":"row",className:[fs.dropTargetRow,n?fs.droppable:""].join(" ")},t))}function Ps(e,n){if(e){if("string"==typeof e)return Is(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Is(e,n):void 0}}function Is(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var Ts=function(e){return{value:"&kp",params:[{value:e,params:[]}]}},Ls=[{pattern:/[0-9]/,convert:function(e){return Ts("N".concat(e))}},{pattern:/[a-z]/,convert:function(e){return Ts(e.toUpperCase())}},{pattern:/[A-Z]/,convert:function(e){return{value:"&kp",params:[{value:"LS",params:[{value:e.toUpperCase(),params:[]}]}]}}}],Ds={"!":Ts("EXCL"),"@":Ts("AT"),"#":Ts("POUND"),$:Ts("DLLR"),"%":Ts("PRCNT"),"^":Ts("CARET"),"&":Ts("AMPS"),"*":Ts("STAR"),"(":Ts("LPAR"),")":Ts("RPAR"),"\n":Ts("RET")," ":Ts("SPACE"),"-":Ts("MINUS"),_:Ts("UNDER"),"=":Ts("EQUAL"),"+":Ts("PLUS"),"[":Ts("LBKT"),"]":Ts("LBRC"),"{":Ts("RBKT"),"}":Ts("RBRC"),"\\":Ts("BSLH"),"|":Ts("PIPE"),"":Ts("TILDE2"),";":Ts("SEMI"),":":Ts("COLON"),"'":Ts("SQT"),'"':Ts("DQT"),"`":Ts("GRAVE"),"~":Ts("TILDE"),",":Ts("COMMA"),"<":Ts("LT"),".":Ts("DOT"),">":Ts("GT"),"/":Ts("FSLH"),"?":Ts("QMARK")};var Rs=function(e){var n,t,o=e.onClose,i=(0,r.useContext)(j),a=i.sources,c=i.mergedGlyphs,l=(n=(0,r.useState)("Type something..."),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||Ps(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),s=l[0],u=l[1],f=(0,r.useMemo)((function(){return s.split("").reduce((function(e,n){var t=function(e){if(Ds[e])return Ds[e];var n,t=function(e,n){var t="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!t){if(Array.isArray(e)||(t=Ps(e))){t&&(e=t);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,c=!1;return{s:function(){t=t.call(e)},n:function(){var e=t.next();return a=e.done,e},e:function(e){c=!0,i=e},f:function(){try{a||null==t.return||t.return()}finally{if(c)throw i}}}}(Ls);try{for(t.s();!(n=t.n()).done;){var r=n.value,o=r.pattern,i=r.convert;if(e.match(o))return i(e)}}catch(e){t.e(e)}finally{t.f()}}(n);return t&&e.push(t),e}),[])}),[s]).map((function(e){return ko(e.value,e.params,a,void 0,c)})),p=(0,r.useCallback)((function(e){e&&(e.focus(),e.select())}),[]);return(0,O.jsx)(fn,{children:(0,O.jsxs)(tn,{dismissText:!1,children:[(0,O.jsx)("h2",{children:"Create Typing Sequence"}),(0,O.jsx)("p",{children:"Type a message to generate a sequence of bindings in the macro."}),(0,O.jsx)("textarea",{value:s,ref:p,style:{width:"100%",height:"6rem"},onChange:function(e){return u(e.target.value)}}),(0,O.jsx)("div",{className:as.macroBindings,children:f.map((function(e,n){return(0,O.jsx)(r.Fragment,{children:(0,O.jsx)(st,{selectable:!1,children:(0,O.jsx)(mo,{node:e.params[0],onSelect:function(){}})})},n)}))}),(0,O.jsxs)("div",{className:as.macroActions,children:[(0,O.jsx)(Ge,{onClick:function(){return o(f)},children:"Add to macro"}),(0,O.jsx)(Ge,{onClick:function(){return o([])},secondary:!0,children:"Cancel"})]})]})})},Ns=function(e){return e.keyboard.keymap.macros},_s=(0,Zo.oM)({name:"macros",initialState:[],reducers:{addMacro:function(e){e.push({identifier:"new_macro",label:"new_macro",bindings:[]})},renameMacro:function(e,n){e[n.payload.index].identifier=n.payload.name},deleteMacro:function(e,n){e.splice(n.payload.index,1)},addMacroControlBinding:function(e,n){e[n.payload.macroIndex].bindings.push({value:"&macro_press",params:[]})},addMacroKeyBinding:function(e,n){e[n.payload.macroIndex].bindings.push(n.payload.binding)},updateMacroBinding:function(e,n){e[n.payload.macroIndex].bindings[n.payload.bindIndex]=n.payload.binding},reorderMacroBinding:function(e,n){var t,r,o;e[n.payload.macroIndex].bindings=(t=e[n.payload.macroIndex].bindings,r=n.payload.bindIndex,-1===(o=n.payload.targetIndex)?[].concat(hi(t.filter((function(e,n){return n!==r}))),[t[r]]):t.reduce((function(e,n,i){return i===o&&e.push(t[r]),i!==r&&e.push(n),e}),[]))},deleteMacroBinding:function(e,n){e[n.payload.macroIndex].bindings.splice(n.payload.bindIndex,1)},customizeMacroOptions:function(e,n){Object.assign(e[n.payload.macroIndex],n.payload.options)}}}),Ms=_s.actions,Ys=Ms.addMacro,qs=Ms.renameMacro,Zs=Ms.deleteMacro,Ks=Ms.addMacroControlBinding,Us=Ms.addMacroKeyBinding,Gs=Ms.updateMacroBinding,zs=Ms.reorderMacroBinding,Ws=Ms.deleteMacroBinding,Fs=Ms.customizeMacroOptions,Xs=_s.reducer;function Vs(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(e,n)||Qs(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Qs(e,n){if(e){if("string"==typeof e)return Hs(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Hs(e,n):void 0}}function Hs(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function Js(e){var n=e.macroIndex,t=e.bindings,o=e.dispatch,i=Vs((0,r.useState)(null),2),a=i[0],c=i[1],l=Vs((0,r.useState)(!1),2),s=l[0],u=l[1];return(0,r.useEffect)((function(){function e(){c(null)}function n(e){e.stopPropagation(),e.preventDefault()}return document.body.addEventListener("drop",e),document.body.addEventListener("dragover",n),function(){document.body.removeEventListener("drop",e),document.body.removeEventListener("dragover",n)}}),[c]),(0,O.jsxs)(O.Fragment,{children:[(0,O.jsxs)("div",{className:as.macroBindings,children:[t.map((function(e,i){return(0,O.jsx)(r.Fragment,{children:(0,O.jsxs)(st,{"data-index":i,themeClass:rs(e)?as.controlBinding:"",draggable:!0,onDragStart:function(e){return function(e,n){if(e.dataTransfer.items.length)e.dataTransfer.clearData();else{var r=t[n];c({index:n,mode:rs(r)?"row":"col",isControlBinding:rs(r)})}}(e,i)},children:[(0,O.jsx)(Ji,{context:rs(e)?"macros":void 0,value:e.value,params:e.params,onUpdate:function(e){o(Gs({macroIndex:n,bindIndex:i,binding:e}))}}),(0,O.jsx)("div",{className:as.actions,children:(0,O.jsx)(L,{name:"trash",className:as.deleteBind,onClick:Pc((function(){return o(Ws({macroIndex:n,bindIndex:i}))}))})})]},i)},i)})),(0,O.jsx)(Es,{dragging:a,bindings:t,onDrop:function(e){o(zs({macroIndex:n,bindIndex:a.index,targetIndex:e})),c(null)}})]}),s&&(0,O.jsx)(Rs,{onClose:function(e){u(!1);var t,r=function(e,n){var t="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!t){if(Array.isArray(e)||(t=Qs(e))){t&&(e=t);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,c=!1;return{s:function(){t=t.call(e)},n:function(){var e=t.next();return a=e.done,e},e:function(e){c=!0,i=e},f:function(){try{a||null==t.return||t.return()}finally{if(c)throw i}}}}(e);try{for(r.s();!(t=r.n()).done;){var i=t.value;o(Us({macroIndex:n,binding:i}))}}catch(e){r.e(e)}finally{r.f()}}}),(0,O.jsxs)("div",{className:as.macroActions,children:[(0,O.jsx)(Ge,{onClick:function(){return o(Ks({macroIndex:n}))},children:"Add Control Binding"}),(0,O.jsx)(Ge,{onClick:function(){o(Us({binding:{value:"&kp",params:[]},macroIndex:n}))},children:"Add Key Binding"}),(0,O.jsx)(Ge,{onClick:function(){return u(!0)},children:"Add String Sequence"})]})]})}Js.propTypes={bindings:E().array.isRequired,macroIndex:E().number.isRequired,dispatch:E().func.isRequired};var $s=Js;function eu(e){return eu="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},eu(e)}function nu(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function tu(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?nu(Object(t),!0).forEach((function(n){ru(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):nu(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function ru(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==eu(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==eu(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===eu(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function ou(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var iu=function(e){var n,t,o=e.macro,i=e.onUpdate,a=(n=(0,r.useState)(Sn()(o,["label","waitMs","tapMs"])),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||function(e,n){if(e){if("string"==typeof e)return ou(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?ou(e,n):void 0}}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),c=a[0],l=a[1];return(0,O.jsx)(fn,{children:(0,O.jsxs)(tn,{onDismiss:function(){i(c)},children:[(0,O.jsxs)("h2",{children:["Customize [",(0,O.jsx)("code",{children:o.identifier}),"]"]}),(0,O.jsxs)("div",{children:[(0,O.jsxs)("div",{className:as.field,children:[(0,O.jsx)("label",{htmlFor:"customize-macro-label",children:"Label"}),(0,O.jsx)("input",{id:"customize-macro-label",value:c.label,onChange:function(e){return l((function(n){return tu(tu({},n),{},{label:e.target.value})}))}})]}),(0,O.jsxs)("div",{className:as.field,children:[(0,O.jsx)("label",{htmlFor:"customize-macro-wait",children:"Wait (ms)"}),(0,O.jsx)("input",{id:"customize-macro-wait",type:"number",placeholder:"Default",value:c.waitMs,onChange:function(e){return l((function(n){return tu(tu({},n),{},{waitMs:""===e.target.value?void 0:Number(e.target.value)})}))}})]}),(0,O.jsxs)("div",{className:as.field,children:[(0,O.jsx)("label",{htmlFor:"customize-macro-tap",children:"Tap (ms)"}),(0,O.jsx)("input",{id:"customize-macro-tap",type:"number",placeholder:"Default",value:c.tapMs,onChange:function(e){return l((function(n){return tu(tu({},n),{},{tapMs:""===e.target.value?void 0:Number(e.target.value)})}))}})]})]})]})})};function au(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function cu(e){var n,t,o=e.index,i=e.macro,a=e.dispatch,c=(n=(0,r.useState)(!1),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||function(e,n){if(e){if("string"==typeof e)return au(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?au(e,n):void 0}}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),l=c[0],s=c[1],u=(0,r.useContext)(j).identifiers;return(0,O.jsxs)("div",{className:as.macro,children:[l&&(0,O.jsx)(iu,{macro:i,onUpdate:function(e){s(!1),a(Fs({macroIndex:o,options:e}))}}),(0,O.jsxs)("div",{className:as.heading,children:[(0,O.jsx)(Mc,{value:i.identifier,validate:function(e){return da(e)||(u.includes(e)?'Cannot use existing identifier "'.concat(e,'"'):null)},render:function(e){return(0,O.jsx)("h5",{children:(0,O.jsx)("code",{children:e})})},onUpdate:function(e){return a(qs({index:o,name:e}))}}),(0,O.jsxs)("div",{children:[(0,O.jsx)(L,{name:"wrench",className:"".concat(as.action),onClick:function(){return s(!0)}}),(0,O.jsx)(L,{name:"trash-can",className:"".concat(as.action," ").concat(as.remove),onClick:function(){return a(Zs({index:o}))}})]})]}),(0,O.jsx)($s,{macroIndex:o,bindings:i.bindings,dispatch:a})]})}cu.propTypes={index:E().number.isRequired,macro:E().shape({identifier:E().string,bindings:E().array.isRequired}).isRequired,dispatch:E().func.isRequired};var lu=cu,su=function(){var e=(0,i.v9)(Ns),n=(0,i.I0)();return(0,O.jsxs)("div",{className:as.main,children:[(0,O.jsxs)("div",{className:as.sidebar,children:[(0,O.jsxs)(Xa,{external:!0,href:"https://zmk.dev/docs/behaviors/macros",children:[(0,O.jsx)(L,{name:"book"})," ZMK Docs: Macros"]}),(0,O.jsx)(Ge,{onClick:function(){return n(Ys())},children:"Add New Macro"})]}),e.map((function(e,t){return(0,O.jsx)(lu,{macro:e,index:t,dispatch:n},t)}))]})},uu={},fu=E().string.isRequired,pu=E().arrayOf(E().shape(uu));uu.value=fu,uu.params=pu;var du=E().shape(uu),yu=E().shape({identifier:E().string,index:E().number,bindings:E().arrayOf(du),keyPositions:E().arrayOf(E().number).isRequired}),hu=E().shape({index:E().number,name:E().string,identifier:E().string,bindings:E().arrayOf(du).isRequired,sensorBindings:E().arrayOf(du)}),mu=E().shape({layers:E().arrayOf(hu).isRequired,combos:E().arrayOf(yu)}),bu=t(7739),Au=t.n(bu);function vu(e){return e.every((function(e){return void 0===e.row&&void 0===e.col}))?["Layout in info.json has no row/col definitions. Generated keymap files will not be nicely formatted."]:[]}var gu=t(2024);function xu(e){return xu="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},xu(e)}function ju(e){return function(e){if(Array.isArray(e))return Cu(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,n){if(e){if("string"==typeof e)return Cu(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Cu(e,n):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Cu(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function wu(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Eu(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==xu(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==xu(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===xu(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Ou(e,n){var t=Au()(e,n);return Object.values(t).filter((function(e){return e.length>1}))}function ku(e){var n=e.layers.map((function(e,n){return{location:"Keymap - Layer #".concat(n," (").concat(e.name,")"),path:"keymap.layers[".concat(n,"]"),name:e.name}})),t=e.combos.map((function(e,n){return{location:"Combos - Combo #".concat(n," (").concat(e.identifier,")"),path:"combos[".concat(n,"].name"),name:e.identifier}})),r=e.macros.map((function(e,n){return{location:"Macros - Macro #".concat(n," (").concat(e.identifier,")"),path:"macros[".concat(n,"].name"),name:e.identifier}})),o=function(e){return e.map((function(e,n){return{location:"Behaviors - Behavior #".concat(n," (").concat(e.labels[0],") - Name"),path:"behaviors[".concat(n,"].name"),name:e.name}}))}(e.behaviors),i=[].concat(ju(Ou(n,"name")),ju(Ou(t,"name")),ju(Ou(r,"name")),ju(Ou(o,"name"))),a=[].concat(ju(n.filter((function(e){return gu.includes(e.name)}))),ju(t.filter((function(e){return gu.includes(e.name)}))),ju(r.filter((function(e){return gu.includes(e.name)}))),ju(o.filter((function(e){return gu.includes(e.name)}))));return{duplicates:i,redefined:a,passwordMacros:ju(r.filter((function(e){return n=e.name,[/(^|[\b_])pass(word)?([\b_]|$)/].some((function(e){return n.match(e)}));var n})))}}function Su(e){var n=Ou([].concat(e.layers.reduce((function(e,n,t){return n.label&&e.push({location:"Keymap - Layer #".concat(t," (").concat(n.name,")"),path:"keymap.layers[".concat(t,"].label"),label:n.label}),e}),[]),e.macros.reduce((function(e,n,t){return n.label&&e.push({location:"Macros - Macro #".concat(t," (").concat(n.identifier,") - Label"),path:"macros[".concat(t,"].label"),label:n.label}),e}),[]),function(e){return e.reduce((function(e,n,t){return n.label&&e.push({location:"Behaviors - Behavior #".concat(t," (").concat(n.labels[0],") - Label"),path:"behaviors[".concat(t,"].label"),label:n.properties.label.parsed}),e}),[])}(e.behaviors)),"label");return{duplicates:n}}function Bu(e){var n=Au()([].concat(e.macros.map((function(e,n){return{location:"Macros > Macro #".concat(n," (").concat(e.identifier,")"),path:"macros[".concat(n,"].name"),ref:e.identifier}})),function(e){return e.map((function(e,n){return{location:"Behaviors - Behavior #".concat(n," (").concat(e.labels[0],") - Bind"),path:"behaviors[".concat(n,"].bind"),ref:e.labels[0]}}))}(e.behaviors)),"ref");return{duplicates:Object.values(n).reduce((function(e,n){return n.length>1&&e.push(Q()(n,"path")),e}),[])}}var Pu=t(79577),Iu={};Iu.styleTagTransform=b(),Iu.setAttributes=d(),Iu.insert=f().bind(null,"head"),Iu.domAPI=s(),Iu.insertStyleElement=h(),c()(Pu.Z,Iu);var Tu=Pu.Z&&Pu.Z.locals?Pu.Z.locals:void 0;function Lu(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function Du(e){return e.location}function Ru(e){var n,t,o=e.name,i=e.explanation,a=e.warnings,c=e.renderWarning,l=void 0===c?Du:c,s=(n=(0,r.useState)(0===a.length),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||function(e,n){if(e){if("string"==typeof e)return Lu(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Lu(e,n):void 0}}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),u=s[0],f=s[1];return(0,O.jsxs)("div",{className:et()([Tu.warningCategory,0===a.length&&Tu.emptyCategory,u&&Tu.collapsedCategory]).join(" "),children:[(0,O.jsxs)("h3",{onClick:function(){return f(!u)},children:[(0,O.jsx)(L,{className:Tu.caret,name:"caret-down"})," "," ",o," ",(0,O.jsxs)("em",{children:["(",a.length," issues)"]})]}),(0,O.jsxs)("div",{className:Tu.warningDetails,children:[(0,O.jsx)("blockquote",{children:i}),a.length>0?(0,O.jsx)("ul",{children:a.map((function(e,n){return(0,O.jsx)("li",{children:l(e)},n)}))}):(0,O.jsx)("p",{children:"No problems"})]})]})}var Nu=(0,O.jsx)(Xa,{external:!0,href:"https://github.com/nickcoutsos/keymap-editor/issues",children:"issue"}),_u=function(e){var n=e.sanityChecks,t=n.nodeNames,r=n.nodeLabels,o=n.nodeReferences,i=n.layoutMissingPositions;return(0,O.jsxs)("div",{style:{maxWidth:"700px",margin:"0 auto",paddingBottom:"60px"},children:[(0,O.jsx)("h2",{children:"Warnings"}),(0,O.jsx)(Ru,{name:"Layout row/col positions",warnings:i,explanation:(0,O.jsxs)(O.Fragment,{children:[(0,O.jsx)("p",{children:(0,O.jsxs)("em",{children:["Your keyboard's layout metadata should include a ",(0,O.jsx)("code",{children:"row"}),"and ",(0,O.jsx)("code",{children:"col"})," property for each key in order to generate a readable keymap ",(0,O.jsx)("code",{children:"bindings"})," array."]})}),(0,O.jsxs)("p",{children:["For more information see ",(0,O.jsx)(Xa,{external:!0,href:"https://github.com/nickcoutsos/keymap-editor/wiki/Defining-keyboard-layouts",children:"Keymap Editor Wiki"}),"."]})]}),renderWarning:function(){}}),(0,O.jsx)(Ru,{name:"Duplicate node names",warnings:t.duplicates,explanation:(0,O.jsx)("p",{children:(0,O.jsx)("em",{children:"Node names must within the same section must be unique."})}),renderWarning:function(e){return(0,O.jsxs)(O.Fragment,{children:[(0,O.jsxs)("h4",{children:["Name ",(0,O.jsx)("code",{children:e[0].name})," re-used in:"]}),(0,O.jsx)("ul",{children:e.map((function(e,n){return(0,O.jsx)("li",{children:e.location},n)}))})]})}}),(0,O.jsx)(Ru,{name:"Re-definitions",warnings:t.redefined,explanation:(0,O.jsx)("p",{children:(0,O.jsx)("em",{children:"Node names cannot use existing ZMK identifiers."})})}),(0,O.jsx)(Ru,{name:"Macro Passwords",warnings:t.passwordMacros,explanation:(0,O.jsxs)(O.Fragment,{children:[(0,O.jsx)("p",{children:(0,O.jsx)("em",{children:"Using keyboard macros to enter passwords is a security risk and is strongly discouraged."})}),(0,O.jsx)("p",{children:"Recording passwords in your keyboard means that anyone with physical access to your keyboard would have access to credentials stored within it, whether they know to look for it or not. Also note that through this application you are recording keyboard configuration in a Git repository and storing credentials in a code repository is not considered a safe practice (even if the repository is private)."}),(0,O.jsxs)("p",{children:["Any macros listed here have names which seem to suggest that they are used for password entry. If that is the case I would encourage you to remove them and change the associated password(s) if needed. If this is a mistake feel free to create an ",Nu," to help me avoid false alarms in the future!"]})]})}),(0,O.jsx)(Ru,{name:"Duplicate labels",warnings:r.duplicates,explanation:(0,O.jsx)("p",{children:(0,O.jsx)("em",{children:"Label property values must be unique throughout the entire keymap."})}),renderWarning:function(e){return(0,O.jsxs)(O.Fragment,{children:[(0,O.jsxs)("h4",{children:["Name ",(0,O.jsx)("code",{children:e[0].label})," re-used in:"]}),(0,O.jsx)("ul",{children:e.map((function(e,n){return(0,O.jsx)("li",{children:e.location},n)}))})]})}}),(0,O.jsx)(Ru,{name:"Duplicate node references",warnings:o.duplicates,explanation:(0,O.jsx)("p",{children:(0,O.jsx)("em",{children:"Node references must be unique throughout the entire keymap."})}),renderWarning:function(e){return(0,O.jsxs)(O.Fragment,{children:[(0,O.jsxs)("h4",{children:["Reference ",(0,O.jsxs)("code",{children:["&",e[0].ref]})," re-used in:"]}),(0,O.jsx)("ul",{children:e.map((function(e,n){return(0,O.jsx)("li",{children:e.location},n)}))})]})}})]})};function Mu(e){return function(e){if(Array.isArray(e))return qu(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||Yu(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Yu(e,n){if(e){if("string"==typeof e)return qu(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?qu(e,n):void 0}}function qu(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function Zu(e){var n,t,o=e.text,i=e.tabs,a=e.defaultTab,c=e.children,l=(n=(0,r.useState)(a),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||Yu(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),s=l[0],u=l[1];return(0,O.jsxs)(O.Fragment,{children:[(0,O.jsx)("h3",{style:{display:"inline"},children:o}),(0,O.jsx)("ul",{className:In.editorModeTabs,children:i.map((function(e,n){var t=e.name,r=e.tabClasses,o=void 0===r?[]:r;return(0,O.jsx)("li",{onClick:function(){return u(n)},className:(0,q.compact)([s===n&&In.activeEditTab].concat(Mu(o))).join(" "),children:t},n)}))}),c[s]]})}var Ku=function(e){return e.keyboard.keymap};function Uu(e){var n=(0,i.v9)(Ku),t=(0,r.useContext)(It).layout,o=e.sensors,a=(0,r.useMemo)((function(){return function(e,n){return function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?wu(Object(t),!0).forEach((function(n){Eu(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):wu(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}({nodeNames:ku(e),nodeLabels:Su(e),nodeReferences:Bu(e)},function(e){return{layoutMissingPositions:vu(e)}}(n))}(n,t)}),[n,t]),c=(0,r.useMemo)((function(){var e=a.nodeNames,n=a.nodeLabels,t=a.nodeReferences,r=a.layoutMissingPositions;return e.duplicates.length+e.redefined.length+e.passwordMacros.length+n.duplicates.length+t.duplicates.length+r.length}),[a]),l=(0,q.compact)([{name:"layers",component:(0,O.jsx)(ts,{sensors:o})},{name:"combos",component:(0,O.jsx)(sl,{})},{name:"macros",component:(0,O.jsx)(su,{})},{name:(0,O.jsx)("span",{className:In.beta,children:"behaviors"}),component:(0,O.jsx)(gc,{})},c>0&&{name:"warnings (".concat(c,")"),tabClasses:[In.warningTab],component:(0,O.jsx)(_u,{sanityChecks:a})}]);return(0,O.jsx)(De,{keymap:n,children:(0,O.jsx)(Zu,{text:"Editor mode:",tabs:l,defaultTab:0,children:l.map((function(e,n){return(0,O.jsx)(r.Fragment,{children:e.component},n)}))})})}Uu.propTypes={keymap:mu};var Gu=Uu,zu=t(2746),Wu={};Wu.styleTagTransform=b(),Wu.setAttributes=d(),Wu.insert=f().bind(null,"head"),Wu.domAPI=s(),Wu.insertStyleElement=h(),c()(zu.Z,Wu);var Fu=zu.Z&&zu.Z.locals?zu.Z.locals:void 0,Xu="https://github.com/nickcoutsos/keymap-editor";function Vu(){return(0,O.jsxs)("div",{className:Fu.wrapper,children:[(0,O.jsx)("label",{children:"Need help? Open an issue:"}),(0,O.jsxs)("a",{className:Fu.githubLink,target:"_blank",rel:"noreferrer",href:Xu,children:[(0,O.jsx)(L,{collection:"brands",name:"github"}),"/nickcoutsos/keymap-editor"]})]})}function Qu(e){return Qu="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Qu(e)}function Hu(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Ju(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Hu(Object(t),!0).forEach((function(n){$u(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Hu(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function $u(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Qu(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Qu(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Qu(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}var ef={description:{fontStyle:"italic",fontSize:"90%"}};function nf(e){var n=e.settings,t=e.onUpdate,r=e.onClose;function o(e,r){t(Ju(Ju({},n),{},$u({},e,r)))}return(0,O.jsx)(fn,{onDismiss:r,children:(0,O.jsxs)(tn,{onDismiss:r,children:[(0,O.jsx)("h1",{children:"Settings"}),(0,O.jsx)("h2",{children:"Keycode glyphs"}),(0,O.jsx)("h3",{children:(0,O.jsxs)("label",{htmlFor:"enable-unicode-glyphs",children:[(0,O.jsx)("input",{id:"enable-unicode-glyphs",type:"checkbox",checked:n.unicodeGlyphs,onChange:function(e){return o("unicodeGlyphs",e.target.checked)}}),"Use Unicode Glyphs"]})}),(0,O.jsxs)("p",{style:ef.description,children:["Use unicode glyphs for visual representations of keycodes like ",(0,O.jsx)("code",{children:"Enter"})," (⮐), ",(0,O.jsx)("code",{children:"Right Arrow"})," (⏵), etc. You can disable this if the symbols don't render correctly."]}),(0,O.jsx)("h3",{children:(0,O.jsxs)("label",{htmlFor:"platform-specific-glyphs",children:["Platform specific glyphs",(0,O.jsxs)("select",{id:"platform-specific-glyphs",value:n.platformGlyphs||"auto",onChange:function(e){return o("platformGlyphs",e.target.value)},children:[(0,O.jsx)("option",{value:"auto",children:"Automatic"}),(0,O.jsx)("option",{value:"win",children:"Windows"}),(0,O.jsx)("option",{value:"mac",children:"macOS"})]})]})}),(0,O.jsxs)("p",{style:ef.description,children:["Render symbols specific to your platform. E.g., render left/right meta key as ",(0,O.jsx)(L,{name:"windows fa-brands"})," for Windows, or ⌘ for macOS."]})]})})}nf.propTypes={settings:E().object.isRequired,onUpdate:E().func.isRequired,onClose:E().func.isRequired},nf.defaultProps={settings:{}};var tf=nf,rf=t(92127),of={};of.styleTagTransform=b(),of.setAttributes=d(),of.insert=f().bind(null,"head"),of.domAPI=s(),of.insertStyleElement=h(),c()(rf.Z,of);var af=rf.Z&&rf.Z.locals?rf.Z.locals:void 0;function cf(e){return cf="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},cf(e)}var lf=["children"];function sf(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function uf(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?sf(Object(t),!0).forEach((function(n){ff(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):sf(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function ff(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==cf(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==cf(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===cf(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function pf(e){var n=e.children,t=function(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}(e,lf);return(0,O.jsxs)("div",uf(uf({},t),{},{className:af.spinner,children:[(0,O.jsx)("i",{className:"".concat(af.icon," fa fa-spinner")}),n]}))}var df=t(9669),yf=t.n(df),hf=t(26729),mf=t.n(hf);function bf(e){return bf="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},bf(e)}function Af(){Af=function(){return e};var e={},n=Object.prototype,t=n.hasOwnProperty,r=Object.defineProperty||function(e,n,t){e[n]=t.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function l(e,n,t){return Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}),e[n]}try{l({},"")}catch(e){l=function(e,n,t){return e[n]=t}}function s(e,n,t,o){var i=n&&n.prototype instanceof p?n:p,a=Object.create(i.prototype),c=new E(o||[]);return r(a,"_invoke",{value:x(e,t,c)}),a}function u(e,n,t){try{return{type:"normal",arg:e.call(n,t)}}catch(e){return{type:"throw",arg:e}}}e.wrap=s;var f={};function p(){}function d(){}function y(){}var h={};l(h,i,(function(){return this}));var m=Object.getPrototypeOf,b=m&&m(m(O([])));b&&b!==n&&t.call(b,i)&&(h=b);var A=y.prototype=p.prototype=Object.create(h);function v(e){["next","throw","return"].forEach((function(n){l(e,n,(function(e){return this._invoke(n,e)}))}))}function g(e,n){function o(r,i,a,c){var l=u(e[r],e,i);if("throw"!==l.type){var s=l.arg,f=s.value;return f&&"object"==bf(f)&&t.call(f,"__await")?n.resolve(f.__await).then((function(e){o("next",e,a,c)}),(function(e){o("throw",e,a,c)})):n.resolve(f).then((function(e){s.value=e,a(s)}),(function(e){return o("throw",e,a,c)}))}c(l.arg)}var i;r(this,"_invoke",{value:function(e,t){function r(){return new n((function(n,r){o(e,t,n,r)}))}return i=i?i.then(r,r):r()}})}function x(e,n,t){var r="suspendedStart";return function(o,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw i;return{value:void 0,done:!0}}for(t.method=o,t.arg=i;;){var a=t.delegate;if(a){var c=j(a,t);if(c){if(c===f)continue;return c}}if("next"===t.method)t.sent=t._sent=t.arg;else if("throw"===t.method){if("suspendedStart"===r)throw r="completed",t.arg;t.dispatchException(t.arg)}else"return"===t.method&&t.abrupt("return",t.arg);r="executing";var l=u(e,n,t);if("normal"===l.type){if(r=t.done?"completed":"suspendedYield",l.arg===f)continue;return{value:l.arg,done:t.done}}"throw"===l.type&&(r="completed",t.method="throw",t.arg=l.arg)}}}function j(e,n){var t=n.method,r=e.iterator[t];if(void 0===r)return n.delegate=null,"throw"===t&&e.iterator.return&&(n.method="return",n.arg=void 0,j(e,n),"throw"===n.method)||"return"!==t&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+t+"' method")),f;var o=u(r,e.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,f;var i=o.arg;return i?i.done?(n[e.resultName]=i.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=void 0),n.delegate=null,f):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,f)}function C(e){var n={tryLoc:e[0]};1 in e&&(n.catchLoc=e[1]),2 in e&&(n.finallyLoc=e[2],n.afterLoc=e[3]),this.tryEntries.push(n)}function w(e){var n=e.completion||{};n.type="normal",delete n.arg,e.completion=n}function E(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(C,this),this.reset(!0)}function O(e){if(e){var n=e[i];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,o=function n(){for(;++r<e.length;)if(t.call(e,r))return n.value=e[r],n.done=!1,n;return n.value=void 0,n.done=!0,n};return o.next=o}}return{next:k}}function k(){return{value:void 0,done:!0}}return d.prototype=y,r(A,"constructor",{value:y,configurable:!0}),r(y,"constructor",{value:d,configurable:!0}),d.displayName=l(y,c,"GeneratorFunction"),e.isGeneratorFunction=function(e){var n="function"==typeof e&&e.constructor;return!!n&&(n===d||"GeneratorFunction"===(n.displayName||n.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,y):(e.__proto__=y,l(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},e.awrap=function(e){return{__await:e}},v(g.prototype),l(g.prototype,a,(function(){return this})),e.AsyncIterator=g,e.async=function(n,t,r,o,i){void 0===i&&(i=Promise);var a=new g(s(n,t,r,o),i);return e.isGeneratorFunction(t)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},v(A),l(A,c,"Generator"),l(A,i,(function(){return this})),l(A,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var n=Object(e),t=[];for(var r in n)t.push(r);return t.reverse(),function e(){for(;t.length;){var r=t.pop();if(r in n)return e.value=r,e.done=!1,e}return e.done=!0,e}},e.values=O,E.prototype={constructor:E,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(w),!e)for(var n in this)"t"===n.charAt(0)&&t.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function r(t,r){return a.type="throw",a.arg=e,n.next=t,r&&(n.method="next",n.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var c=t.call(i,"catchLoc"),l=t.call(i,"finallyLoc");if(c&&l){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(e,n){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&t.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=n&&n<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=n,i?(this.method="next",this.next=i.finallyLoc,f):this.complete(a)},complete:function(e,n){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&n&&(this.next=n),f},finish:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.finallyLoc===e)return this.complete(t.completion,t.afterLoc),w(t),f}},catch:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.tryLoc===e){var r=t.completion;if("throw"===r.type){var o=r.arg;w(t)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,t){return this.delegate={iterator:O(e),resultName:n,nextLoc:t},"next"===this.method&&(this.arg=void 0),f}},e}function vf(e,n,t,r,o,i,a){try{var c=e[i](a),l=c.value}catch(e){return void t(e)}c.done?n(l):Promise.resolve(l).then(r,o)}function gf(e){return function(){var n=this,t=arguments;return new Promise((function(r,o){var i=e.apply(n,t);function a(e){vf(i,r,o,a,c,"next",e)}function c(e){vf(i,r,o,a,c,"throw",e)}a(void 0)}))}}function xf(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,Of(r.key),r)}}function jf(e,n){return jf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,n){return e.__proto__=n,e},jf(e,n)}function Cf(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function wf(e){return wf=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},wf(e)}function Ef(e,n,t){return(n=Of(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Of(e){var n=function(e,n){if("object"!==bf(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==bf(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===bf(n)?n:String(n)}var kf="".concat(ee.replace("http","ws"),"/github/events"),Sf=function(e){!function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),n&&jf(e,n)}(p,e);var n,t,r,o,i,a,c,l,s,u,f=(s=p,u=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,n=wf(s);if(u){var t=wf(this).constructor;e=Reflect.construct(n,arguments,t)}else e=n.apply(this,arguments);return function(e,n){if(n&&("object"===bf(n)||"function"==typeof n))return n;if(void 0!==n)throw new TypeError("Derived constructors may only return object or undefined");return Cf(e)}(this,e)});function p(){var e;!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,p);for(var n=arguments.length,t=new Array(n),r=0;r<n;r++)t[r]=arguments[r];return Ef(Cf(e=f.call.apply(f,[this].concat(t))),"token",null),Ef(Cf(e),"initializing",!1),Ef(Cf(e),"installations",null),Ef(Cf(e),"repositories",null),Ef(Cf(e),"repoInstallationMap",null),Ef(Cf(e),"features",null),Ef(Cf(e),"socket",null),e}return n=p,t=[{key:"_request",value:(l=gf(Af().mark((function e(n){var t;return Af().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return"string"==typeof n&&(n={url:n}),n.url.startsWith("/")&&(n.url="".concat(ee).concat(n.url)),n.headers=Object.assign({},n.headers),this.token&&!n.headers.Authorization&&(n.headers.Authorization="Bearer ".concat(this.token)),e.prev=4,e.next=7,yf()(n);case 7:return e.abrupt("return",e.sent);case 10:throw e.prev=10,e.t0=e.catch(4),401===(null===(t=e.t0.response)||void 0===t?void 0:t.status)&&(console.error("Authentication failed."),this.emit("authentication-failed",e.t0.response)),e.t0;case 14:case"end":return e.stop()}}),e,this,[[4,10]])}))),function(e){return l.apply(this,arguments)})},{key:"init",value:function(){var e=this;return this.initializing||(this.initializing=gf(Af().mark((function n(){var t,r,o,i,a,c;return Af().wrap((function(n){for(;;)switch(n.prev=n.next){case 0:if(e.initEvents(),t="".concat(ee,"/github/installation"),(r=new URLSearchParams(window.location.search)).get("setup_action")&&r.get("installation_id")&&e.beginLoginFlow(),!r.get("blocked")){n.next=7;break}return setTimeout((function(){return e.emit("blocked")})),n.abrupt("return");case 7:if(o=r.get("token"),!window.localStorage.auth_token&&o&&(window.history.replaceState({},null,window.location.pathname),window.localStorage.auth_token=o),!window.localStorage.auth_token){n.next=22;break}return e.token=window.localStorage.auth_token,n.next=13,e._request(t);case 13:i=n.sent,a=i.data,c=a.installations.filter((function(e){return e.suspended_at})),a.installations.length===c.length&&(console.warn("No GitHub app installation found for authenticated user."),e.emit("app-not-installed")),e.username=a.username,e.installations=a.installations,e.repositories=a.repositories,e.repoInstallationMap=a.repoInstallationMap,e.emit("authenticated");case 22:case"end":return n.stop()}}),n)})))()),this.initializing}},{key:"initEvents",value:function(){var e=this,n=[],t=function(t){e.socket.readyState!==window.WebSocket.OPEN?(n.push(t),console.log("buffering websocket message",{readyState:e.socket.readyState},t)):e.socket.send(t)};this.socket=new window.WebSocket(kf),this.socket.onopen=function(){console.log(new Date,"connected to console"),function(){for(var t;t=n.shift();)console.log("sending buffered websocket message",t),e.socket.send(t)}(),setInterval((function(){t(JSON.stringify({message:"ping"}))}),2e4)},this.socket.onclose=function(){return console.log(new Date,"disconnected from server")},this.socket.onerror=function(e){return console.error(new Date,e)},this.socket.onmessage=function(n){var t=JSON.parse(n.data);"workflow_run"===t.event&&e.emit("build-update",t.workflow_run)},this.on("authenticated",(function(){var n;null!==(n=e.installations)&&void 0!==n&&n.length&&(e.fetchAvailableFeatures(),t(JSON.stringify({message:"authorize",data:e.token})))}))}},{key:"beginLoginFlow",value:function(){window.localStorage.removeItem("auth_token"),window.location.href="".concat(ee,"/github/authorize")}},{key:"beginInstallAppFlow",value:function(){window.location.href="https://github.com/apps/".concat("keymap-editor","/installations/new")}},{key:"manageInstallationRepos",value:function(e){var n=this.installations.find((function(n){return n.id===e}));window.location.href=n.html_url}},{key:"isGitHubAuthorized",value:function(){return!!this.token}},{key:"isAppSuspendedForRepoSelection",value:function(){var e,n,t;return(null===(e=this.installations)||void 0===e?void 0:e.length)>0&&(null===(n=this.installations)||void 0===n?void 0:n.every((function(e){return e.suspended_at})))&&(null===(t=this.installations)||void 0===t?void 0:t.some((function(e){return"all"===e.repository_selection})))}},{key:"isAppInstalled",value:function(){var e,n;return(null===(e=this.installations)||void 0===e?void 0:e.length)&&(null===(n=this.repositories)||void 0===n?void 0:n.length)}},{key:"fetchRepoBranches",value:(c=gf(Af().mark((function e(n){var t,r,o,i;return Af().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=encodeURIComponent(this.repoInstallationMap[n.full_name]),r=encodeURIComponent(n.full_name),e.next=4,this._request("/github/installation/".concat(t,"/").concat(r,"/branches"));case 4:return o=e.sent,i=o.data,e.abrupt("return",i);case 7:case"end":return e.stop()}}),e,this)}))),function(e){return c.apply(this,arguments)})},{key:"fetchBranchKeyboards",value:(a=gf(Af().mark((function e(n,t){var r,o,i,a;return Af().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=encodeURIComponent(this.repoInstallationMap[n.full_name]),o=encodeURIComponent(n.full_name),e.next=4,this._request("/github/installation/".concat(r,"/").concat(o,"/keyboards/").concat(t));case 4:return i=e.sent,a=i.data,e.abrupt("return",a);case 7:case"end":return e.stop()}}),e,this)}))),function(e,n){return a.apply(this,arguments)})},{key:"fetchLayoutAndKeymap",value:(i=gf(Af().mark((function e(n,t){var r,o,i,a,c,l,s,u,f,p,d,y,h,m,b,A=arguments;return Af().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=(A.length>2&&void 0!==A[2]?A[2]:{}).keyboard,o=encodeURIComponent(this.repoInstallationMap[n]),i=encodeURIComponent(n),a=new URL("".concat(ee,"/github/keyboard-files/").concat(o,"/").concat(i)),c=new URLSearchParams,t&&c.set("branch",t),r&&c.set("keyboard",r),a.search=c.toString(),e.prev=8,e.next=11,this._request(a.toString());case 11:return l=e.sent,s=l.data,u=s.info.layouts,f=s.keymap,p=Object.keys(s.info.layouts)[0],d=f.chosen["zmk,matrix_transform"]?f.chosen["zmk,matrix_transform"].replace(/^&/,""):null,y=u[d]||u[p],h=y.layout,e.abrupt("return",{layoutMetadata:y,layout:h,keymap:f,keyboards:s.keyboards,default:s.defaultKeymap,sensors:s.sensors});case 21:throw e.prev=21,e.t0=e.catch(8),400===(null===(m=e.t0.response)||void 0===m?void 0:m.status)?(console.error("Failed to load keymap and layout from github",e.t0.response.data),this.emit("repo-validation-error",e.t0.response.data)):500===(null===(b=e.t0.response)||void 0===b?void 0:b.status)&&"LayoutGenerationError"===e.t0.response.data.name&&this.emit("layout-generation-failed",e.t0.response.data),e.t0;case 25:case"end":return e.stop()}}),e,this,[[8,21]])}))),function(e,n){return i.apply(this,arguments)})},{key:"fetchAvailableFeatures",value:(o=gf(Af().mark((function e(){var n,t;return Af().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(this.isGitHubAuthorized()){e.next=2;break}return e.abrupt("return",{betaFeatures:[]});case 2:return this.features||(this.features=this._request("".concat(ee,"/github/features"))),e.next=5,this.features;case 5:return n=e.sent,t=n.data,e.abrupt("return",t);case 8:case"end":return e.stop()}}),e,this)}))),function(){return o.apply(this,arguments)})},{key:"fetchBuildStatus",value:(r=gf(Af().mark((function e(n,t){var r,o,i,a,c;return Af().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=encodeURIComponent(this.repoInstallationMap[n]),o=encodeURIComponent(n),i=new URL("".concat(ee,"/github/latest-run/").concat(r,"/").concat(o,"/").concat(encodeURIComponent(t))),e.next=5,this._request(i.toString());case 5:return a=e.sent,c=a.data,e.abrupt("return",c);case 8:case"end":return e.stop()}}),e,this)}))),function(e,n){return r.apply(this,arguments)})},{key:"commitChanges",value:function(e,n,t,r){var o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{},i=o.message,a=void 0===i?null:i,c=o.experimentalSettings,l=void 0===c?{}:c,s=o.keyboard,u=encodeURIComponent(this.repoInstallationMap[e]),f=encodeURIComponent(e),p=new URL("".concat(ee,"/github/keyboard-files/").concat(u,"/").concat(f,"/").concat(encodeURIComponent(n))),d=l.enableBehaviorEditing,y=void 0!==d&&d,h=new URLSearchParams({enableBehaviorEditing:y});return s&&h.set("keyboard",s),p.search=h.toString(),this._request({url:p.toString(),method:"POST",headers:{"Content-Type":"application/json"},data:{keyboard:s,layout:t,keymap:r,message:a,enableBehaviorEditing:y}})}}],t&&xf(n.prototype,t),Object.defineProperty(n,"prototype",{writable:!1}),p}(mf()),Bf=new Sf,Pf=t(30381),If=t.n(Pf),Tf=t(80047),Lf={};Lf.styleTagTransform=b(),Lf.setAttributes=d(),Lf.insert=f().bind(null,"head"),Lf.domAPI=s(),Lf.insertStyleElement=h(),c()(Tf.Z,Lf);var Df=Tf.Z&&Tf.Z.locals?Tf.Z.locals:void 0;function Rf(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var Nf=["success"],_f=["action_required","cancelled","failure","skipped","stale","timed_out"];function Mf(e){var n,t,o=e.timestamp,i=(n=(0,r.useState)(If()(o).fromNow()),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||function(e,n){if(e){if("string"==typeof e)return Rf(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Rf(e,n):void 0}}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=i[0],c=i[1];return(0,r.useEffect)((function(){c(If()(o).fromNow());var e=setInterval((function(){c(If()(o).fromNow())}),6e4);return function(){return clearInterval(e)}}),[o,c]),(0,O.jsx)("span",{title:o.toISOString(),children:a})}function Yf(e){var n=e.latestRun,t=Nf.includes(n.conclusion)?(0,O.jsx)(L,{name:"check"}):_f.includes(n.conclusion)?(0,O.jsx)(L,{name:"xmark"}):(0,O.jsx)(pf,{});return(0,O.jsxs)(Xa,{href:n.html_url,className:Df.buildDetails,external:!0,showExternal:!1,children:[(0,O.jsxs)("span",{className:Df.buildSummary,children:["Firmware build (",(0,O.jsx)("code",{children:n.head_sha.slice(0,5)}),") ",t,(0,O.jsx)("br",{}),(0,O.jsx)(Mf,{timestamp:new Date(n.updated_at)})]}),(0,O.jsx)(L,{name:"file-arrow-down",className:[Df.buildStatus,Df.buildSuccess].join(" ")})]})}Yf.propTypes={latestRun:E().shape({id:E().number.isRequired,name:E().string.isRequired,head_sha:E().string.isRequired,status:E().oneOf(["completed","action_required","cancelled","failure","neutral","skipped","stale","success","timed_out","in_progress","queued","requested","waiting"]).isRequired,conclusion:E().oneOf([null,"action_required","cancelled","failure","neutral","success","skipped","stale","timed_out"]),created_at:E().string.isRequired,updated_at:E().string.isRequired})};var qf=Yf;function Zf(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function Kf(e){var n,t,o=e.onConfirm,i=e.onCancel,a=(n=(0,r.useState)(""),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||function(e,n){if(e){if("string"==typeof e)return Zf(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Zf(e,n):void 0}}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),c=a[0],l=a[1];return(0,O.jsx)(fn,{children:(0,O.jsxs)(tn,{dismissText:null,children:[(0,O.jsx)("h2",{children:"Commit keymap changes"}),(0,O.jsx)("textarea",{style:{width:"100%"},placeholder:"Message (optional)",value:c,onChange:function(e){l(e.target.value)}}),(0,O.jsxs)("p",{style:{textAlign:"center",gap:"10px"},children:[(0,O.jsx)(Ge,{onClick:function(){return o(c)},children:"Commit"}),(0,O.jsx)(Ge,{onClick:i,secondary:!0,children:"Cancel"})]})]})})}Kf.propTypes={onConfirm:E().func.isRequired,onCancel:E().func.isRequired};var Uf=Kf;function Gf(e){return Gf="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Gf(e)}function zf(){zf=function(){return e};var e={},n=Object.prototype,t=n.hasOwnProperty,r=Object.defineProperty||function(e,n,t){e[n]=t.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function l(e,n,t){return Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}),e[n]}try{l({},"")}catch(e){l=function(e,n,t){return e[n]=t}}function s(e,n,t,o){var i=n&&n.prototype instanceof p?n:p,a=Object.create(i.prototype),c=new E(o||[]);return r(a,"_invoke",{value:x(e,t,c)}),a}function u(e,n,t){try{return{type:"normal",arg:e.call(n,t)}}catch(e){return{type:"throw",arg:e}}}e.wrap=s;var f={};function p(){}function d(){}function y(){}var h={};l(h,i,(function(){return this}));var m=Object.getPrototypeOf,b=m&&m(m(O([])));b&&b!==n&&t.call(b,i)&&(h=b);var A=y.prototype=p.prototype=Object.create(h);function v(e){["next","throw","return"].forEach((function(n){l(e,n,(function(e){return this._invoke(n,e)}))}))}function g(e,n){function o(r,i,a,c){var l=u(e[r],e,i);if("throw"!==l.type){var s=l.arg,f=s.value;return f&&"object"==Gf(f)&&t.call(f,"__await")?n.resolve(f.__await).then((function(e){o("next",e,a,c)}),(function(e){o("throw",e,a,c)})):n.resolve(f).then((function(e){s.value=e,a(s)}),(function(e){return o("throw",e,a,c)}))}c(l.arg)}var i;r(this,"_invoke",{value:function(e,t){function r(){return new n((function(n,r){o(e,t,n,r)}))}return i=i?i.then(r,r):r()}})}function x(e,n,t){var r="suspendedStart";return function(o,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw i;return{value:void 0,done:!0}}for(t.method=o,t.arg=i;;){var a=t.delegate;if(a){var c=j(a,t);if(c){if(c===f)continue;return c}}if("next"===t.method)t.sent=t._sent=t.arg;else if("throw"===t.method){if("suspendedStart"===r)throw r="completed",t.arg;t.dispatchException(t.arg)}else"return"===t.method&&t.abrupt("return",t.arg);r="executing";var l=u(e,n,t);if("normal"===l.type){if(r=t.done?"completed":"suspendedYield",l.arg===f)continue;return{value:l.arg,done:t.done}}"throw"===l.type&&(r="completed",t.method="throw",t.arg=l.arg)}}}function j(e,n){var t=n.method,r=e.iterator[t];if(void 0===r)return n.delegate=null,"throw"===t&&e.iterator.return&&(n.method="return",n.arg=void 0,j(e,n),"throw"===n.method)||"return"!==t&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+t+"' method")),f;var o=u(r,e.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,f;var i=o.arg;return i?i.done?(n[e.resultName]=i.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=void 0),n.delegate=null,f):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,f)}function C(e){var n={tryLoc:e[0]};1 in e&&(n.catchLoc=e[1]),2 in e&&(n.finallyLoc=e[2],n.afterLoc=e[3]),this.tryEntries.push(n)}function w(e){var n=e.completion||{};n.type="normal",delete n.arg,e.completion=n}function E(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(C,this),this.reset(!0)}function O(e){if(e){var n=e[i];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,o=function n(){for(;++r<e.length;)if(t.call(e,r))return n.value=e[r],n.done=!1,n;return n.value=void 0,n.done=!0,n};return o.next=o}}return{next:k}}function k(){return{value:void 0,done:!0}}return d.prototype=y,r(A,"constructor",{value:y,configurable:!0}),r(y,"constructor",{value:d,configurable:!0}),d.displayName=l(y,c,"GeneratorFunction"),e.isGeneratorFunction=function(e){var n="function"==typeof e&&e.constructor;return!!n&&(n===d||"GeneratorFunction"===(n.displayName||n.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,y):(e.__proto__=y,l(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},e.awrap=function(e){return{__await:e}},v(g.prototype),l(g.prototype,a,(function(){return this})),e.AsyncIterator=g,e.async=function(n,t,r,o,i){void 0===i&&(i=Promise);var a=new g(s(n,t,r,o),i);return e.isGeneratorFunction(t)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},v(A),l(A,c,"Generator"),l(A,i,(function(){return this})),l(A,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var n=Object(e),t=[];for(var r in n)t.push(r);return t.reverse(),function e(){for(;t.length;){var r=t.pop();if(r in n)return e.value=r,e.done=!1,e}return e.done=!0,e}},e.values=O,E.prototype={constructor:E,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(w),!e)for(var n in this)"t"===n.charAt(0)&&t.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function r(t,r){return a.type="throw",a.arg=e,n.next=t,r&&(n.method="next",n.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var c=t.call(i,"catchLoc"),l=t.call(i,"finallyLoc");if(c&&l){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(e,n){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&t.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=n&&n<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=n,i?(this.method="next",this.next=i.finallyLoc,f):this.complete(a)},complete:function(e,n){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&n&&(this.next=n),f},finish:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.finallyLoc===e)return this.complete(t.completion,t.afterLoc),w(t),f}},catch:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.tryLoc===e){var r=t.completion;if("throw"===r.type){var o=r.arg;w(t)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,t){return this.delegate={iterator:O(e),resultName:n,nextLoc:t},"next"===this.method&&(this.arg=void 0),f}},e}function Wf(e,n,t,r,o,i,a){try{var c=e[i](a),l=c.value}catch(e){return void t(e)}c.done?n(l):Promise.resolve(l).then(r,o)}function Ff(e){return function(){var n=this,t=arguments;return new Promise((function(r,o){var i=e.apply(n,t);function a(e){Wf(i,r,o,a,c,"next",e)}function c(e){Wf(i,r,o,a,c,"throw",e)}a(void 0)}))}}var Xf=function(e){return e};function Vf(){var e=(0,i.I0)(),n=(0,i.v9)(Xf),t=n.source,o=n.sourceOther,a=n.keyboard,c=n._unmodifiedKeymap,l=n.saving,s=n.experimentalSettings,u=n.latestBuild,f=a&&!Object.is(a.keymap,c);function p(){return p=Ff(zf().mark((function t(){var r,i,a;return zf().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=o.keyboard,i=n.keyboard.keymap,t.prev=2,t.next=5,me(r,i);case 5:a=t.sent,e({type:"KEYMAP_SAVE_SUCCESS",keymap:a}),t.next=12;break;case 9:t.prev=9,t.t0=t.catch(2),e({type:"KEYMAP_SAVE_FAILURE"});case 12:case"end":return t.stop()}}),t,null,[[2,9]])}))),p.apply(this,arguments)}var d=(0,r.useCallback)((function(n){var t=o.github,r=t.repository,i=t.branch;Ff(zf().mark((function t(){var c,l,u,f;return zf().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return e({type:"COMMIT_DIALOG_CLOSE"}),e({type:"KEYMAP_SAVE_START"}),c=a.layout,l=a.keymap,t.prev=3,t.next=6,Bf.commitChanges(r,i,c,l,{message:n,experimentalSettings:s,keyboard:o.github.keyboard});case 6:u=t.sent,f=u.data,e({type:"KEYMAP_SAVE_SUCCESS",keymap:f}),t.next=14;break;case 11:t.prev=11,t.t0=t.catch(3),e({type:"KEYMAP_SAVE_FAILURE"});case 14:case"end":return t.stop()}}),t,null,[[3,11]])})))()}),[o,a,e,s]);return(0,O.jsxs)("div",{id:"actions",children:["local"===t&&(0,O.jsx)("button",{disabled:!f,onClick:function(){return p.apply(this,arguments)},children:"Save Local"}),"github"===t&&(0,O.jsxs)("button",{title:"Commit keymap changes to GitHub repository",disabled:!f,onClick:function(){e({type:"COMMIT_DIALOG_OPEN"})},children:[l?"Saving":"Commit Changes",l&&(0,O.jsx)(pf,{})]}),n.commitDialogOpen&&(0,O.jsx)(Uf,{onConfirm:d,onCancel:function(){return e({type:"COMMIT_DIALOG_CLOSE"})}}),u&&(0,O.jsx)(qf,{latestRun:u})]})}var Qf=t(13311),Hf=t.n(Qf),Jf=(0,O.jsx)(Xa,{external:!0,href:"https://github.com/nickcoutsos/keymap-editor/issue",children:"Keymap Editor Issues"}),$f=(0,O.jsx)(Xa,{external:!0,href:"https://github.com/nickcoutsos/keymap-editor/wiki/Defining-keyboard-layouts",children:"Keymap Editor Wiki: Defining keyboard layouts"}),ep=(0,O.jsx)(Xa,{external:!0,href:"https://nickcoutsos.github.io/keymap-layout-tools/",children:"Keymap Layout Tools - Helper"}),np=(0,O.jsx)(Xa,{external:!0,href:"https://discord.com/users/115507966555193345",children:"Discord - nickcoutsos#4351"}),tp=(0,O.jsxs)(O.Fragment,{children:[(0,O.jsx)("p",{children:"If you are looking for help in getting up and running or want a better understanding of the issue, please feel free to reach out to me:"}),(0,O.jsxs)("ul",{children:[(0,O.jsx)("li",{children:Jf}),(0,O.jsx)("li",{children:np})]})]}),rp=(0,O.jsxs)("p",{children:["For more information about how Keymap Editor layouts are defined, you can read ",$f,", and if you need an environment to quickly test changes to a layout try ",ep,"."]});function op(e){var n=e.onDismiss;return(0,O.jsx)(fn,{children:(0,O.jsxs)(tn,{onDismiss:n,children:[(0,O.jsx)("h2",{children:"Automatic Layout Generation Failed"}),(0,O.jsx)("p",{children:"No accompanying layout was found with your keymap file and the Keymap Editor was unable to generate one automatically for you."}),(0,O.jsx)("p",{children:"Something went wrong with the attempted automatic layout generation for your keyboard and there's no automatic way to recover, but if you want to reach out for assistance maybe we can work together to resolve any technical issues or else craft a manual layout for your keyboard."}),(0,O.jsxs)("p",{children:["Share your experience at ",Jf,"."]})]})})}op.propTypes={onDismiss:E().func.isRequired};var ip=op,ap=t(20256),cp=["children","style"],lp=["label"];function sp(e){return sp="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},sp(e)}function up(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}function fp(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function pp(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?fp(Object(t),!0).forEach((function(n){dp(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):fp(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function dp(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==sp(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==sp(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===sp(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function yp(e){var n=e.style,t=void 0===n?{}:n,r=e.children;return(0,O.jsx)("div",{style:pp(pp({},{height:"38px",lineHeight:"38px"}),t),children:r})}function hp(e){var n=e.children,t=e.style,r=void 0===t?{}:t,o=up(e,cp);return(0,O.jsx)(yp,{style:r,children:(0,O.jsx)("button",pp(pp({style:{height:"100%"}},o),{},{children:n}))})}var mp=window.matchMedia("(prefers-color-scheme: dark)"),bp=[0,5,10,20,30,40,50,60,70,80,90].reduce((function(e,n){return e["neutral".concat(n)]="hsl(0, 0%, ".concat(n,"%)"),e}),{});function Ap(e){var n=e.label,t=up(e,lp),r=(0,i.v9)((function(e){return e})).theme,o="dark"===r||"system"===r&&mp.matches;return(0,O.jsxs)("div",{style:{display:"inline-block",width:"auto"},children:[(0,O.jsx)("label",{style:{display:"block",width:"100%",fontSize:"120%",color:"var(--fg)"},children:n}),(0,O.jsx)(ap.ZP,pp({styles:{container:function(e,n){return pp(pp({},e),{},{display:"inline-block"})},menu:function(e){return pp(pp({},e),{},{width:"max-content",zIndex:10})}},theme:function(e){return pp(pp({},e),{},{colors:pp(pp({},e.colors),o?bp:{})})},isSearchable:!1},t))]})}function vp(e){return vp="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},vp(e)}function gp(){gp=function(){return e};var e={},n=Object.prototype,t=n.hasOwnProperty,r=Object.defineProperty||function(e,n,t){e[n]=t.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function l(e,n,t){return Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}),e[n]}try{l({},"")}catch(e){l=function(e,n,t){return e[n]=t}}function s(e,n,t,o){var i=n&&n.prototype instanceof p?n:p,a=Object.create(i.prototype),c=new E(o||[]);return r(a,"_invoke",{value:x(e,t,c)}),a}function u(e,n,t){try{return{type:"normal",arg:e.call(n,t)}}catch(e){return{type:"throw",arg:e}}}e.wrap=s;var f={};function p(){}function d(){}function y(){}var h={};l(h,i,(function(){return this}));var m=Object.getPrototypeOf,b=m&&m(m(O([])));b&&b!==n&&t.call(b,i)&&(h=b);var A=y.prototype=p.prototype=Object.create(h);function v(e){["next","throw","return"].forEach((function(n){l(e,n,(function(e){return this._invoke(n,e)}))}))}function g(e,n){function o(r,i,a,c){var l=u(e[r],e,i);if("throw"!==l.type){var s=l.arg,f=s.value;return f&&"object"==vp(f)&&t.call(f,"__await")?n.resolve(f.__await).then((function(e){o("next",e,a,c)}),(function(e){o("throw",e,a,c)})):n.resolve(f).then((function(e){s.value=e,a(s)}),(function(e){return o("throw",e,a,c)}))}c(l.arg)}var i;r(this,"_invoke",{value:function(e,t){function r(){return new n((function(n,r){o(e,t,n,r)}))}return i=i?i.then(r,r):r()}})}function x(e,n,t){var r="suspendedStart";return function(o,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw i;return{value:void 0,done:!0}}for(t.method=o,t.arg=i;;){var a=t.delegate;if(a){var c=j(a,t);if(c){if(c===f)continue;return c}}if("next"===t.method)t.sent=t._sent=t.arg;else if("throw"===t.method){if("suspendedStart"===r)throw r="completed",t.arg;t.dispatchException(t.arg)}else"return"===t.method&&t.abrupt("return",t.arg);r="executing";var l=u(e,n,t);if("normal"===l.type){if(r=t.done?"completed":"suspendedYield",l.arg===f)continue;return{value:l.arg,done:t.done}}"throw"===l.type&&(r="completed",t.method="throw",t.arg=l.arg)}}}function j(e,n){var t=n.method,r=e.iterator[t];if(void 0===r)return n.delegate=null,"throw"===t&&e.iterator.return&&(n.method="return",n.arg=void 0,j(e,n),"throw"===n.method)||"return"!==t&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+t+"' method")),f;var o=u(r,e.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,f;var i=o.arg;return i?i.done?(n[e.resultName]=i.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=void 0),n.delegate=null,f):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,f)}function C(e){var n={tryLoc:e[0]};1 in e&&(n.catchLoc=e[1]),2 in e&&(n.finallyLoc=e[2],n.afterLoc=e[3]),this.tryEntries.push(n)}function w(e){var n=e.completion||{};n.type="normal",delete n.arg,e.completion=n}function E(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(C,this),this.reset(!0)}function O(e){if(e){var n=e[i];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,o=function n(){for(;++r<e.length;)if(t.call(e,r))return n.value=e[r],n.done=!1,n;return n.value=void 0,n.done=!0,n};return o.next=o}}return{next:k}}function k(){return{value:void 0,done:!0}}return d.prototype=y,r(A,"constructor",{value:y,configurable:!0}),r(y,"constructor",{value:d,configurable:!0}),d.displayName=l(y,c,"GeneratorFunction"),e.isGeneratorFunction=function(e){var n="function"==typeof e&&e.constructor;return!!n&&(n===d||"GeneratorFunction"===(n.displayName||n.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,y):(e.__proto__=y,l(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},e.awrap=function(e){return{__await:e}},v(g.prototype),l(g.prototype,a,(function(){return this})),e.AsyncIterator=g,e.async=function(n,t,r,o,i){void 0===i&&(i=Promise);var a=new g(s(n,t,r,o),i);return e.isGeneratorFunction(t)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},v(A),l(A,c,"Generator"),l(A,i,(function(){return this})),l(A,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var n=Object(e),t=[];for(var r in n)t.push(r);return t.reverse(),function e(){for(;t.length;){var r=t.pop();if(r in n)return e.value=r,e.done=!1,e}return e.done=!0,e}},e.values=O,E.prototype={constructor:E,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(w),!e)for(var n in this)"t"===n.charAt(0)&&t.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function r(t,r){return a.type="throw",a.arg=e,n.next=t,r&&(n.method="next",n.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var c=t.call(i,"catchLoc"),l=t.call(i,"finallyLoc");if(c&&l){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(e,n){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&t.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=n&&n<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=n,i?(this.method="next",this.next=i.finallyLoc,f):this.complete(a)},complete:function(e,n){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&n&&(this.next=n),f},finish:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.finallyLoc===e)return this.complete(t.completion,t.afterLoc),w(t),f}},catch:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.tryLoc===e){var r=t.completion;if("throw"===r.type){var o=r.arg;w(t)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,t){return this.delegate={iterator:O(e),resultName:n,nextLoc:t},"next"===this.method&&(this.arg=void 0),f}},e}function xp(e,n,t,r,o,i,a){try{var c=e[i](a),l=c.value}catch(e){return void t(e)}c.done?n(l):Promise.resolve(l).then(r,o)}function jp(e){return function(){var n=this,t=arguments;return new Promise((function(r,o){var i=e.apply(n,t);function a(e){xp(i,r,o,a,c,"next",e)}function c(e){xp(i,r,o,a,c,"throw",e)}a(void 0)}))}}function Cp(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(e,n)||function(e,n){if(e){if("string"==typeof e)return wp(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?wp(e,n):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function wp(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var Ep=function(e){var n=e.onSelect,t=e.onError,o=Cp((0,r.useState)([]),2),i=o[0],a=o[1],c=Cp((0,r.useState)(null),2),l=c[0],s=c[1],u=(0,r.useMemo)((function(){return i.map((function(e){return{id:e,name:e}}))}),[i]);(0,r.useEffect)((function(){jp(gp().mark((function e(){var n,t,r;return gp().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,pe();case 2:n=e.sent,t=JSON.parse(localStorage.getItem("localSourceSelectedKeyboard")||"null"),r=n.includes(t)?t:n[0],a(n),s(r);case 7:case"end":return e.stop()}}),e)})))()}),[a,s]),(0,r.useEffect)((function(){jp(gp().mark((function e(){var r,o,i,a,c,s,u,f;return gp().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!l){e.next=25;break}return e.prev=1,e.next=4,ye(l);case 4:r=e.sent,o=r.info,i=r.keymap,a=r.sensors,c=o.layouts,s=i.chosen["zmk,matrix_transform"]?i.chosen["zmk,matrix_transform"].replace(/^&/,""):null,u=Object.keys(c)[0],f=c[s]||c[u],n({source:"local",keyboard:l,layoutMetadata:f,layout:f.layout,keymap:i,sensors:a}),e.next=25;break;case 15:if(e.prev=15,e.t0=e.catch(1),!e.t0.response){e.next=24;break}return e.next=20,e.t0.response.json();case 20:if("LayoutGenerationError"!==e.sent.name){e.next=24;break}return t({dialog:ip}),e.abrupt("return");case 24:throw e.t0;case 25:case"end":return e.stop()}}),e,null,[[1,15]])})))()}),[n,t,l]);var f=(0,r.useCallback)((function(e){var n=e.id;localStorage.setItem("localSourceSelectedKeyboard",JSON.stringify(n)),s(n)}),[s]),p=(0,q.find)(u,{id:l});return(0,O.jsx)(Ap,{label:"Keyboard",value:p,options:u,onChange:f,getOptionValue:function(e){return e.id},getOptionLabel:function(e){return e.name}})};function Op(e){return Op="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Op(e)}function kp(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Sp(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?kp(Object(t),!0).forEach((function(n){Bp(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):kp(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Bp(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Op(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Op(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Op(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Pp(e){var n=(0,O.jsx)(Xa,{href:"https://github.com/nickcoutsos/zmk-config-corne-demo",external:!0,children:"GitHub Repo"});return(0,O.jsx)(fn,{children:(0,O.jsxs)(tn,Sp(Sp({},e),{},{children:[(0,O.jsx)("h2",{children:"Keymap Editor Demo"}),(0,O.jsx)("p",{children:"Welcome! This demo keyboard is provided to let you experiment with the keymap editor before setting up your own repository."}),(0,O.jsx)("h3",{children:"Features"}),(0,O.jsxs)("ul",{children:[(0,O.jsxs)("li",{children:[(0,O.jsx)("strong",{children:"WYSIWYG Editing"}),". Just click on key and behaviour bindings to make changes, add or remove layers in the sidebar."]}),(0,O.jsxs)("li",{children:[(0,O.jsx)("strong",{children:"Keymap generation"}),". The editor can export keymap to ZMK's syntax (when running locally or integrated with GitHub), and will even attempt to format the ",(0,O.jsx)("code",{children:".keymap"})," file for better readability."]}),(0,O.jsxs)("li",{children:[(0,O.jsx)("strong",{children:"Devicetree parsing"}),". ",(0,O.jsx)("em",{children:"(Experimental!)"})," Read and write to your existing ZMK ",(0,O.jsx)("code",{children:".keymap"})," file so that you can still use ZMK features that the app doesn't support yet."]})]}),(0,O.jsx)("h3",{children:"What's next?"}),(0,O.jsxs)("p",{children:["If you like the editor, try integrating with your own GitHub hosted keyboard config. ",(0,O.jsx)(Xa,{href:"https://github.com/nickcoutsos/zmk-config-corne-demo/generate",external:!0,children:"Use it as a template"})," for your own, or just read through the ",n," for this keyboard to learn what to apply to your existing keyboard."]})]}))})}var Ip=t(33971),Tp={};Tp.styleTagTransform=b(),Tp.setAttributes=d(),Tp.insert=f().bind(null,"head"),Tp.domAPI=s(),Tp.insertStyleElement=h(),c()(Ip.Z,Tp);var Lp=Ip.Z&&Ip.Z.locals?Ip.Z.locals:void 0;function Dp(e){return Dp="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Dp(e)}function Rp(){Rp=function(){return e};var e={},n=Object.prototype,t=n.hasOwnProperty,r=Object.defineProperty||function(e,n,t){e[n]=t.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function l(e,n,t){return Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}),e[n]}try{l({},"")}catch(e){l=function(e,n,t){return e[n]=t}}function s(e,n,t,o){var i=n&&n.prototype instanceof p?n:p,a=Object.create(i.prototype),c=new E(o||[]);return r(a,"_invoke",{value:x(e,t,c)}),a}function u(e,n,t){try{return{type:"normal",arg:e.call(n,t)}}catch(e){return{type:"throw",arg:e}}}e.wrap=s;var f={};function p(){}function d(){}function y(){}var h={};l(h,i,(function(){return this}));var m=Object.getPrototypeOf,b=m&&m(m(O([])));b&&b!==n&&t.call(b,i)&&(h=b);var A=y.prototype=p.prototype=Object.create(h);function v(e){["next","throw","return"].forEach((function(n){l(e,n,(function(e){return this._invoke(n,e)}))}))}function g(e,n){function o(r,i,a,c){var l=u(e[r],e,i);if("throw"!==l.type){var s=l.arg,f=s.value;return f&&"object"==Dp(f)&&t.call(f,"__await")?n.resolve(f.__await).then((function(e){o("next",e,a,c)}),(function(e){o("throw",e,a,c)})):n.resolve(f).then((function(e){s.value=e,a(s)}),(function(e){return o("throw",e,a,c)}))}c(l.arg)}var i;r(this,"_invoke",{value:function(e,t){function r(){return new n((function(n,r){o(e,t,n,r)}))}return i=i?i.then(r,r):r()}})}function x(e,n,t){var r="suspendedStart";return function(o,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw i;return{value:void 0,done:!0}}for(t.method=o,t.arg=i;;){var a=t.delegate;if(a){var c=j(a,t);if(c){if(c===f)continue;return c}}if("next"===t.method)t.sent=t._sent=t.arg;else if("throw"===t.method){if("suspendedStart"===r)throw r="completed",t.arg;t.dispatchException(t.arg)}else"return"===t.method&&t.abrupt("return",t.arg);r="executing";var l=u(e,n,t);if("normal"===l.type){if(r=t.done?"completed":"suspendedYield",l.arg===f)continue;return{value:l.arg,done:t.done}}"throw"===l.type&&(r="completed",t.method="throw",t.arg=l.arg)}}}function j(e,n){var t=n.method,r=e.iterator[t];if(void 0===r)return n.delegate=null,"throw"===t&&e.iterator.return&&(n.method="return",n.arg=void 0,j(e,n),"throw"===n.method)||"return"!==t&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+t+"' method")),f;var o=u(r,e.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,f;var i=o.arg;return i?i.done?(n[e.resultName]=i.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=void 0),n.delegate=null,f):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,f)}function C(e){var n={tryLoc:e[0]};1 in e&&(n.catchLoc=e[1]),2 in e&&(n.finallyLoc=e[2],n.afterLoc=e[3]),this.tryEntries.push(n)}function w(e){var n=e.completion||{};n.type="normal",delete n.arg,e.completion=n}function E(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(C,this),this.reset(!0)}function O(e){if(e){var n=e[i];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,o=function n(){for(;++r<e.length;)if(t.call(e,r))return n.value=e[r],n.done=!1,n;return n.value=void 0,n.done=!0,n};return o.next=o}}return{next:k}}function k(){return{value:void 0,done:!0}}return d.prototype=y,r(A,"constructor",{value:y,configurable:!0}),r(y,"constructor",{value:d,configurable:!0}),d.displayName=l(y,c,"GeneratorFunction"),e.isGeneratorFunction=function(e){var n="function"==typeof e&&e.constructor;return!!n&&(n===d||"GeneratorFunction"===(n.displayName||n.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,y):(e.__proto__=y,l(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},e.awrap=function(e){return{__await:e}},v(g.prototype),l(g.prototype,a,(function(){return this})),e.AsyncIterator=g,e.async=function(n,t,r,o,i){void 0===i&&(i=Promise);var a=new g(s(n,t,r,o),i);return e.isGeneratorFunction(t)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},v(A),l(A,c,"Generator"),l(A,i,(function(){return this})),l(A,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var n=Object(e),t=[];for(var r in n)t.push(r);return t.reverse(),function e(){for(;t.length;){var r=t.pop();if(r in n)return e.value=r,e.done=!1,e}return e.done=!0,e}},e.values=O,E.prototype={constructor:E,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(w),!e)for(var n in this)"t"===n.charAt(0)&&t.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function r(t,r){return a.type="throw",a.arg=e,n.next=t,r&&(n.method="next",n.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var c=t.call(i,"catchLoc"),l=t.call(i,"finallyLoc");if(c&&l){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(e,n){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&t.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=n&&n<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=n,i?(this.method="next",this.next=i.finallyLoc,f):this.complete(a)},complete:function(e,n){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&n&&(this.next=n),f},finish:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.finallyLoc===e)return this.complete(t.completion,t.afterLoc),w(t),f}},catch:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.tryLoc===e){var r=t.completion;if("throw"===r.type){var o=r.arg;w(t)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,t){return this.delegate={iterator:O(e),resultName:n,nextLoc:t},"next"===this.method&&(this.arg=void 0),f}},e}function Np(e,n,t,r,o,i,a){try{var c=e[i](a),l=c.value}catch(e){return void t(e)}c.done?n(l):Promise.resolve(l).then(r,o)}function _p(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var Mp=function(e){var n,o,i=e.onSelect,a=(n=(0,r.useState)(!1),o=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,o)||function(e,n){if(e){if("string"==typeof e)return _p(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?_p(e,n):void 0}}(n,o)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),c=a[0],l=a[1];return(0,r.useEffect)((function(){var e;(e=Rp().mark((function e(){var n,r,o;return Rp().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,t.e(873).then(t.t.bind(t,18873,19));case 2:n=e.sent,r=n.layout,o=n.keymap,i({source:"demo",layout:r,keymap:o});case 6:case"end":return e.stop()}}),e)})),function(){var n=this,t=arguments;return new Promise((function(r,o){var i=e.apply(n,t);function a(e){Np(i,r,o,a,c,"next",e)}function c(e){Np(i,r,o,a,c,"throw",e)}a(void 0)}))})()}),[i]),(0,O.jsxs)(O.Fragment,{children:[(0,O.jsxs)(hp,{style:{background:"none",border:"none"},onClick:function(){return l(!0)},children:[(0,O.jsx)(L,{name:"info",className:Lp.help})," What is this?"]}),c&&(0,O.jsx)(Pp,{onDismiss:function(){return l(!1)}})]})},Yp=t(66379),qp=t.n(Yp),Zp={maxHeight:"300px",overflow:"auto",padding:"10px",fontFamily:"monospace",fontSize:"80%",backgroundColor:"rgb(239, 239, 239, 0.5)"},Kp={margin:"10px"};function Up(e){var n=e.onDismiss,t=e.title,r=e.errors,o=function(e){return"InfoValidationError"===e?"config/info.json":"KeymapValidationError"===e?"config/keymap.json":void 0}(t);return(0,O.jsx)(fn,{children:(0,O.jsxs)(tn,{onDismiss:n,children:[(0,O.jsx)("h2",{children:t}),o&&(0,O.jsxs)("p",{children:["Errors in the file ",(0,O.jsx)("code",{children:o}),"."]}),(0,O.jsx)("ul",{style:Zp,children:r.map((function(e,n){return(0,O.jsx)("li",{style:Kp,children:e},n)}))})]})})}var Gp="selectedGithubRepository",zp="selectedGithubBranch",Wp="selectedGithubKeyboard";function Fp(e,n){try{return JSON.parse(localStorage.getItem("".concat(Wp,":").concat(e,":").concat(n)))}catch(e){return null}}function Xp(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var Vp={blocked:!1,initialized:!1,selectedRepoId:null,selectedBranchName:null,selectedKeyboard:null,branches:[],keyboards:[],loading:!1,warningFlags:[]},Qp=(0,Zo.oM)({name:"github-picker",initialState:Vp,reducers:{clearSelection:function(e){e.warningFlags=[],e.loading=!1},integrationInitialized:function(e){var n,t=function(){try{return JSON.parse(localStorage.getItem(Gp))}catch(e){return null}}(),r=Bf.repositories||[];Hf()(r,{id:t})?n=t:r.length>0&&(n=r[0].id),e.initialized=!0,e.selectedRepoId=n},loadingBranchesList:function(e){e.loading=!0},loadedBranchesList:function(e,n){var t=e.selectedRepoId,r=n.payload.branches,o=Hf()(Bf.repositories,{id:t});e.branches=r,e.keyboard=null,e.keyboards=[],e.loading=!1;for(var i=Q()(r,"name"),a=o.default_branch,c=function(e){try{return JSON.parse(localStorage.getItem("".concat(zp,":").concat(e)))}catch(e){return null}}(t),l=0,s=[1===r.length?r[0].name:null,c,a];l<s.length;l++){var u=s[l];if(i.includes(u)){e.selectedBranchName=u,e.selectedKeyboard=Fp(t,u);break}}},loadingKeyboardsList:function(e){e.loading=!0},loadedKeyboardsList:function(e,n){var t=e.selectedRepoId,r=e.selectedBranchName,o=n.payload,i=o.keyboards,a=o.default;e.keyboards=i,e.loading=!1;for(var c=Fp(t,r),l=0,s=[1===i.length?i[0]:null,c,a];l<s.length;l++){var u=s[l];if(i.includes(u)){e.selectedKeyboard=u;break}}},selectedRepository:function(e,n){var t;e.selectedRepoId=n.payload.repository.id,e.selectedBranchName=null,e.selectedKeyboard=null,t=e.selectedRepoId,localStorage.setItem(Gp,JSON.stringify(t))},selectedBranch:function(e,n){var t,r;e.selectedBranchName=n.payload.name,e.selectedKeyboard=Fp(e.selectedRepoId,e.selectedBranchName),t=e.selectedRepoId,r=e.selectedBranchName,localStorage.setItem("".concat(zp,":").concat(t),JSON.stringify(r))},selectedKeyboard:function(e,n){var t,r,o;e.selectedKeyboard=n.payload.name,t=e.selectedRepoId,r=e.selectedBranchName,o=e.selectedKeyboard,localStorage.setItem("".concat(Wp,":").concat(t,":").concat(r),JSON.stringify(o))},keyboardLoading:function(e,n){e.loading=!0},keyboardLoadedSuccess:function(e,n){var t=n.payload.response.keymap;e.warningFlags=t.warningFlags||[],e.loading=!1}}});function Hp(){var e,n,t,o=(n=(0,r.useReducer)(Qp.reducer,Vp),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,t)||function(e,n){if(e){if("string"==typeof e)return Xp(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Xp(e,n):void 0}}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=o[0],a=(e=o[1],(0,r.useMemo)((function(){return Object.keys(Qp.actions).reduce((function(n,t){return n[t]=function(){var n;return e((n=Qp.actions)[t].apply(n,arguments))},n}),{})}),[e]));return[i,a]}function Jp(e){var n=e.onDismiss,t=e.missingPath;return(0,O.jsx)(fn,{children:(0,O.jsxs)(tn,{onDismiss:n,children:[(0,O.jsx)("h2",{children:"Missing keyboard definition?"}),(0,O.jsxs)("p",{children:["Hi there! The repository you're trying to load from doesn't have a defined ",(0,O.jsx)("code",{children:t}),". Right now this application is expecting to look at that directory to discover keyboard definitions for experimental features like automatic layout generation."]}),(0,O.jsx)("p",{children:"Is it possible that the keyboard you're trying to edit relies on data from the ZMK or other repositories? Fetching from other repositories is not currently supported."}),(0,O.jsx)("p",{children:"I'm a humble developer and have only worked with configurations for my own handwired builds, so if you feel you're receiving this message in error then please consider opening an issue on this project's GitHub repository to let me know what I can do differently."})]})})}Jp.propTypes={onDismiss:E().func.isRequired,missingPath:E().string.isRequired};var $p=Jp;function ed(e){var n=e.installation,t="https://github.com/settings/installations/".concat(n.id);return(0,O.jsx)(fn,{children:(0,O.jsxs)(tn,{dismissText:null,children:[(0,O.jsx)("h2",{children:"App Disabled"}),(0,O.jsxs)("p",{children:["Hello there, your installation of the keymap editor's GitHub app is currently disabled. ",(0,O.jsx)("em",{children:"This is not a ban!"})]}),(0,O.jsxs)("p",{children:["When you installed this app for your GitHub account you installed it for ",(0,O.jsx)("em",{children:"all"})," of your repositories, and we need to do a little cleanup as we roll out some new features as it's very likely you will have other repositories unrelated to ZMK keyboard configurations."]}),(0,O.jsx)("h3",{children:"How to fix this"}),(0,O.jsxs)("p",{children:["If you're still interested in using the keymap editor (and I'd love for you to be able to) please go to your ",(0,O.jsx)(Xa,{href:t,children:"installation settings"})," on GitHub and select only the repositories you want to use with this tool. As soon as that's done you'll be sent back here and ready to go."]}),(0,O.jsx)("p",{children:"As always, if you're looking for clarification or further assistance please visit our GitHub repo and open an issue or start a discussion."})]})})}ed.propTypes={installation:E().shape({id:E().number.isRequired}).isRequired};var nd=ed;function td(e){var n=e.onDismiss;return(0,O.jsx)(fn,{children:(0,O.jsxs)(tn,{onDismiss:n,children:[(0,O.jsx)("h2",{children:"Is this a zmk-config repo?"}),(0,O.jsxs)("p",{children:["Hi there! The repository you're trying to load from doesn't have a defined ",(0,O.jsx)("code",{children:"config"})," directory. Right now this application is expecting to look at that directory to discover keymaps and other metadata."]}),tp]})})}td.propTypes={onDismiss:E().func.isRequired,otherRepoOrBranchAvailable:E().bool};var rd=td,od=function(){return(0,O.jsx)(fn,{children:(0,O.jsxs)(tn,{dismissText:null,children:[(0,O.jsx)("h2",{children:"GitHub Account Blocked"}),(0,O.jsx)("p",{children:"Hi, your access to this application has been disabled."}),(0,O.jsxs)("p",{children:["This could be an innocent mistake. Possibly you've misunderstood the intended purpose of this app, possibly I got carried away with some housekeeping. If you want more information or feel this was done in error, please reach out to ",(0,O.jsx)("em",{children:"nickcoutsos"})," on GitHub or Discord (you can find me on the ZMK server)."]})]})})};function id(e){var n=e.onDismiss;return(0,O.jsx)(fn,{children:(0,O.jsxs)(tn,{onDismiss:n,children:[(0,O.jsx)("h2",{children:"No Layout Available"}),(0,O.jsx)("p",{children:"Your keymap doesn't have an accompanying layout and we don't know enough about your keyboard to generate one for you automatically."}),(0,O.jsxs)("p",{children:["If you meant to include layout data, please make sure that its in the same directory as your keymap, like ",(0,O.jsx)("code",{children:"config/info.json"})," or ",(0,O.jsx)("code",{children:"config/<keyboard>.json"}),"."]}),rp,tp]})})}id.propTypes={onDismiss:E().func.isRequired};var ad=id;function cd(){return(0,O.jsx)(fn,{centerOnly:!0,children:(0,O.jsxs)(tn,{dismissText:null,style:{width:"400px"},children:[(0,O.jsx)("h2",{children:"Authenticate with GitHub"}),(0,O.jsx)("p",{children:"Please log-in to GitHub to continue."}),(0,O.jsx)(Y,{collection:"brands",icon:"github",text:"Login with GitHub",style:{display:"block",margin:"0 auto"},onClick:function(){return Bf.beginLoginFlow()}})]})})}cd.propTypes={};var ld=cd;function sd(){var e=Bf.username?"Welcome, ".concat(Bf.username,"!"):"Welcome!";return(0,O.jsx)(fn,{centerOnly:!0,children:(0,O.jsxs)(tn,{dismissText:null,children:[(0,O.jsx)("h2",{children:e}),(0,O.jsx)("p",{children:"To begin import your own keymaps, you'll need to grant the Keymap Editor app access to the relevant GitHub repositories. Please make sure to only select repositories that are set up for ZMK keyboard configurations."}),(0,O.jsxs)("p",{children:["This app requires read and write access to the repositories you select in order to write to arbitrary ",(0,O.jsx)("code",{children:".keymap"})," files. It also receives all build action events for the repository, which generates quite a bit of traffic. Selecting ",(0,O.jsx)("code",{children:"All repositories"})," for the app installation will lead to a suspension."]}),(0,O.jsx)(Y,{collection:"brands",icon:"github",text:"Add Repository",style:{display:"block",margin:"0 auto"},onClick:function(){return Bf.beginInstallAppFlow()}})]})})}sd.propTypes={};var ud=sd;function fd(e){var n=e.onDismiss;return(0,O.jsx)(fn,{children:(0,O.jsxs)(tn,{onDismiss:n,children:[(0,O.jsx)("h2",{children:"No Keymap Available"}),(0,O.jsxs)("p",{children:["We couldn't find a ",(0,O.jsx)("code",{children:".keymap"})," file in your ",(0,O.jsx)("code",{children:"config/"})," folder."]}),(0,O.jsxs)("p",{children:["Please ensure that any keymap(s) you wish to edit are placed in that directory even if an accompanying keyboard definition exists in your under the ",(0,O.jsx)("code",{children:"config/boards/..."})," directory."]}),(0,O.jsxs)("p",{children:["If you have any questions please feel free to reach out by creating an issue at ",Jf,"."]})]})})}fd.propTypes={onDismiss:E().func.isRequired};var pd=fd;function dd(e){var n=e.state,t=e.actions,r=e.choices,o=e.selections,i=r.repositories,a=r.repositoryChoices,c=r.branchChoices,l=r.keyboardChoices,s=o.selectedRepoChoice,u=o.selectedBranchChoice,f=o.selectedKeyboardChoice,p=n.branches,d=n.keyboards,y=n.loading;return(0,O.jsxs)(O.Fragment,{children:[(0,O.jsx)(Ap,{label:"Repository",value:s,options:a,onChange:function(e){var n=e.id;if("installation"!==e.type){var r=Hf()(i,{id:n});t.selectedRepository({repository:r})}else Bf.manageInstallationRepos(n)},getValue:function(e){return e.id},getOptionValue:function(e){return e.id},getOptionLabel:function(e){return e.full||e.name},formatOptionLabel:function(e,n){var t=n.context;return(0,O.jsx)(O.Fragment,{children:"value"===t?e.name:e.full||e.name})}}),p.length>1&&(0,O.jsx)(Ap,{label:"Branch",value:u,options:c,onChange:function(e){var n=e.id;return t.selectedBranch({name:n})},getOptionValue:function(e){return e.id},getOptionLabel:function(e){return e.name}}),d.length>1&&(0,O.jsx)(Ap,{label:"Keyboard",value:f,options:l,getOptionValue:function(e){return e.id},getOptionLabel:function(e){return e.name},onChange:function(e){var n=e.id;return t.selectedKeyboard({name:n})}}),y&&(0,O.jsx)(yp,{children:(0,O.jsx)(pf,{})})]})}function yd(e){return yd="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},yd(e)}function hd(){hd=function(){return e};var e={},n=Object.prototype,t=n.hasOwnProperty,r=Object.defineProperty||function(e,n,t){e[n]=t.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function l(e,n,t){return Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}),e[n]}try{l({},"")}catch(e){l=function(e,n,t){return e[n]=t}}function s(e,n,t,o){var i=n&&n.prototype instanceof p?n:p,a=Object.create(i.prototype),c=new E(o||[]);return r(a,"_invoke",{value:x(e,t,c)}),a}function u(e,n,t){try{return{type:"normal",arg:e.call(n,t)}}catch(e){return{type:"throw",arg:e}}}e.wrap=s;var f={};function p(){}function d(){}function y(){}var h={};l(h,i,(function(){return this}));var m=Object.getPrototypeOf,b=m&&m(m(O([])));b&&b!==n&&t.call(b,i)&&(h=b);var A=y.prototype=p.prototype=Object.create(h);function v(e){["next","throw","return"].forEach((function(n){l(e,n,(function(e){return this._invoke(n,e)}))}))}function g(e,n){function o(r,i,a,c){var l=u(e[r],e,i);if("throw"!==l.type){var s=l.arg,f=s.value;return f&&"object"==yd(f)&&t.call(f,"__await")?n.resolve(f.__await).then((function(e){o("next",e,a,c)}),(function(e){o("throw",e,a,c)})):n.resolve(f).then((function(e){s.value=e,a(s)}),(function(e){return o("throw",e,a,c)}))}c(l.arg)}var i;r(this,"_invoke",{value:function(e,t){function r(){return new n((function(n,r){o(e,t,n,r)}))}return i=i?i.then(r,r):r()}})}function x(e,n,t){var r="suspendedStart";return function(o,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw i;return{value:void 0,done:!0}}for(t.method=o,t.arg=i;;){var a=t.delegate;if(a){var c=j(a,t);if(c){if(c===f)continue;return c}}if("next"===t.method)t.sent=t._sent=t.arg;else if("throw"===t.method){if("suspendedStart"===r)throw r="completed",t.arg;t.dispatchException(t.arg)}else"return"===t.method&&t.abrupt("return",t.arg);r="executing";var l=u(e,n,t);if("normal"===l.type){if(r=t.done?"completed":"suspendedYield",l.arg===f)continue;return{value:l.arg,done:t.done}}"throw"===l.type&&(r="completed",t.method="throw",t.arg=l.arg)}}}function j(e,n){var t=n.method,r=e.iterator[t];if(void 0===r)return n.delegate=null,"throw"===t&&e.iterator.return&&(n.method="return",n.arg=void 0,j(e,n),"throw"===n.method)||"return"!==t&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+t+"' method")),f;var o=u(r,e.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,f;var i=o.arg;return i?i.done?(n[e.resultName]=i.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=void 0),n.delegate=null,f):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,f)}function C(e){var n={tryLoc:e[0]};1 in e&&(n.catchLoc=e[1]),2 in e&&(n.finallyLoc=e[2],n.afterLoc=e[3]),this.tryEntries.push(n)}function w(e){var n=e.completion||{};n.type="normal",delete n.arg,e.completion=n}function E(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(C,this),this.reset(!0)}function O(e){if(e){var n=e[i];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,o=function n(){for(;++r<e.length;)if(t.call(e,r))return n.value=e[r],n.done=!1,n;return n.value=void 0,n.done=!0,n};return o.next=o}}return{next:k}}function k(){return{value:void 0,done:!0}}return d.prototype=y,r(A,"constructor",{value:y,configurable:!0}),r(y,"constructor",{value:d,configurable:!0}),d.displayName=l(y,c,"GeneratorFunction"),e.isGeneratorFunction=function(e){var n="function"==typeof e&&e.constructor;return!!n&&(n===d||"GeneratorFunction"===(n.displayName||n.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,y):(e.__proto__=y,l(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},e.awrap=function(e){return{__await:e}},v(g.prototype),l(g.prototype,a,(function(){return this})),e.AsyncIterator=g,e.async=function(n,t,r,o,i){void 0===i&&(i=Promise);var a=new g(s(n,t,r,o),i);return e.isGeneratorFunction(t)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},v(A),l(A,c,"Generator"),l(A,i,(function(){return this})),l(A,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var n=Object(e),t=[];for(var r in n)t.push(r);return t.reverse(),function e(){for(;t.length;){var r=t.pop();if(r in n)return e.value=r,e.done=!1,e}return e.done=!0,e}},e.values=O,E.prototype={constructor:E,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(w),!e)for(var n in this)"t"===n.charAt(0)&&t.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function r(t,r){return a.type="throw",a.arg=e,n.next=t,r&&(n.method="next",n.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var c=t.call(i,"catchLoc"),l=t.call(i,"finallyLoc");if(c&&l){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(e,n){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&t.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=n&&n<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=n,i?(this.method="next",this.next=i.finallyLoc,f):this.complete(a)},complete:function(e,n){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&n&&(this.next=n),f},finish:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.finallyLoc===e)return this.complete(t.completion,t.afterLoc),w(t),f}},catch:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.tryLoc===e){var r=t.completion;if("throw"===r.type){var o=r.arg;w(t)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,t){return this.delegate={iterator:O(e),resultName:n,nextLoc:t},"next"===this.method&&(this.arg=void 0),f}},e}function md(e,n,t,r,o,i,a){try{var c=e[i](a),l=c.value}catch(e){return void t(e)}c.done?n(l):Promise.resolve(l).then(r,o)}function bd(e){return function(){var n=this,t=arguments;return new Promise((function(r,o){var i=e.apply(n,t);function a(e){md(i,r,o,a,c,"next",e)}function c(e){md(i,r,o,a,c,"throw",e)}a(void 0)}))}}function Ad(e){return function(e){if(Array.isArray(e))return vd(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,n){if(e){if("string"==typeof e)return vd(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?vd(e,n):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function vd(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function gd(e){return gd="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},gd(e)}function xd(){xd=function(){return e};var e={},n=Object.prototype,t=n.hasOwnProperty,r=Object.defineProperty||function(e,n,t){e[n]=t.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function l(e,n,t){return Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}),e[n]}try{l({},"")}catch(e){l=function(e,n,t){return e[n]=t}}function s(e,n,t,o){var i=n&&n.prototype instanceof p?n:p,a=Object.create(i.prototype),c=new E(o||[]);return r(a,"_invoke",{value:x(e,t,c)}),a}function u(e,n,t){try{return{type:"normal",arg:e.call(n,t)}}catch(e){return{type:"throw",arg:e}}}e.wrap=s;var f={};function p(){}function d(){}function y(){}var h={};l(h,i,(function(){return this}));var m=Object.getPrototypeOf,b=m&&m(m(O([])));b&&b!==n&&t.call(b,i)&&(h=b);var A=y.prototype=p.prototype=Object.create(h);function v(e){["next","throw","return"].forEach((function(n){l(e,n,(function(e){return this._invoke(n,e)}))}))}function g(e,n){function o(r,i,a,c){var l=u(e[r],e,i);if("throw"!==l.type){var s=l.arg,f=s.value;return f&&"object"==gd(f)&&t.call(f,"__await")?n.resolve(f.__await).then((function(e){o("next",e,a,c)}),(function(e){o("throw",e,a,c)})):n.resolve(f).then((function(e){s.value=e,a(s)}),(function(e){return o("throw",e,a,c)}))}c(l.arg)}var i;r(this,"_invoke",{value:function(e,t){function r(){return new n((function(n,r){o(e,t,n,r)}))}return i=i?i.then(r,r):r()}})}function x(e,n,t){var r="suspendedStart";return function(o,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw i;return{value:void 0,done:!0}}for(t.method=o,t.arg=i;;){var a=t.delegate;if(a){var c=j(a,t);if(c){if(c===f)continue;return c}}if("next"===t.method)t.sent=t._sent=t.arg;else if("throw"===t.method){if("suspendedStart"===r)throw r="completed",t.arg;t.dispatchException(t.arg)}else"return"===t.method&&t.abrupt("return",t.arg);r="executing";var l=u(e,n,t);if("normal"===l.type){if(r=t.done?"completed":"suspendedYield",l.arg===f)continue;return{value:l.arg,done:t.done}}"throw"===l.type&&(r="completed",t.method="throw",t.arg=l.arg)}}}function j(e,n){var t=n.method,r=e.iterator[t];if(void 0===r)return n.delegate=null,"throw"===t&&e.iterator.return&&(n.method="return",n.arg=void 0,j(e,n),"throw"===n.method)||"return"!==t&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+t+"' method")),f;var o=u(r,e.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,f;var i=o.arg;return i?i.done?(n[e.resultName]=i.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=void 0),n.delegate=null,f):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,f)}function C(e){var n={tryLoc:e[0]};1 in e&&(n.catchLoc=e[1]),2 in e&&(n.finallyLoc=e[2],n.afterLoc=e[3]),this.tryEntries.push(n)}function w(e){var n=e.completion||{};n.type="normal",delete n.arg,e.completion=n}function E(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(C,this),this.reset(!0)}function O(e){if(e){var n=e[i];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,o=function n(){for(;++r<e.length;)if(t.call(e,r))return n.value=e[r],n.done=!1,n;return n.value=void 0,n.done=!0,n};return o.next=o}}return{next:k}}function k(){return{value:void 0,done:!0}}return d.prototype=y,r(A,"constructor",{value:y,configurable:!0}),r(y,"constructor",{value:d,configurable:!0}),d.displayName=l(y,c,"GeneratorFunction"),e.isGeneratorFunction=function(e){var n="function"==typeof e&&e.constructor;return!!n&&(n===d||"GeneratorFunction"===(n.displayName||n.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,y):(e.__proto__=y,l(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},e.awrap=function(e){return{__await:e}},v(g.prototype),l(g.prototype,a,(function(){return this})),e.AsyncIterator=g,e.async=function(n,t,r,o,i){void 0===i&&(i=Promise);var a=new g(s(n,t,r,o),i);return e.isGeneratorFunction(t)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},v(A),l(A,c,"Generator"),l(A,i,(function(){return this})),l(A,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var n=Object(e),t=[];for(var r in n)t.push(r);return t.reverse(),function e(){for(;t.length;){var r=t.pop();if(r in n)return e.value=r,e.done=!1,e}return e.done=!0,e}},e.values=O,E.prototype={constructor:E,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(w),!e)for(var n in this)"t"===n.charAt(0)&&t.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function r(t,r){return a.type="throw",a.arg=e,n.next=t,r&&(n.method="next",n.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var c=t.call(i,"catchLoc"),l=t.call(i,"finallyLoc");if(c&&l){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(e,n){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&t.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=n&&n<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=n,i?(this.method="next",this.next=i.finallyLoc,f):this.complete(a)},complete:function(e,n){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&n&&(this.next=n),f},finish:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.finallyLoc===e)return this.complete(t.completion,t.afterLoc),w(t),f}},catch:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.tryLoc===e){var r=t.completion;if("throw"===r.type){var o=r.arg;w(t)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,t){return this.delegate={iterator:O(e),resultName:n,nextLoc:t},"next"===this.method&&(this.arg=void 0),f}},e}function jd(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Cd(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?jd(Object(t),!0).forEach((function(n){wd(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):jd(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function wd(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==gd(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==gd(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===gd(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Ed(e,n,t,r,o,i,a){try{var c=e[i](a),l=c.value}catch(e){return void t(e)}c.done?n(l):Promise.resolve(l).then(r,o)}function Od(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(e,n)||function(e,n){if(e){if("string"==typeof e)return kd(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?kd(e,n):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function kd(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var Sd=function(e){return qp()(e,{name:"MissingRepoFile",path:"config"})},Bd=function(e){return qp()(e,{name:"MissingRepoFile",intent:"directory-structure"})},Pd=function(e){return qp()(e,{name:"MissingRepoFile",path:"config/info.json"})||qp()(e,{name:"MissingRepoFile",intent:"metadata"})},Id=function(e){return"MissingRepoFile"===(null==e?void 0:e.name)&&(null==e?void 0:e.path.match(/config\/boards\/[^/]+\/[^/]+\/[^/]+?\..*$/))};function Td(e){var n=Od(Hp(),2),t=n[0],o=n[1],i=function(e,n){var t=e.branches,o=e.keyboards,i=e.selectedRepoId,a=e.selectedBranchName,c=e.selectedKeyboard,l=(Bf.repositories||[]).map((function(e){return{id:e.id,name:e.name,full:e.full_name}})),s=(Bf.installations||[]).map((function(e){return{id:e.id,type:"installation",name:"[Manage available repos for ".concat(e.account.login,"...]")}})),u=(0,r.useMemo)((function(){return[].concat(Ad(l),Ad(s))}),[l,s]),f=(0,r.useMemo)((function(){return t.map((function(e){return{id:e.name,name:e.name}}))}),[t]),p=(0,r.useMemo)((function(){return o.map((function(e){return{id:e,name:e}}))}),[o]),d=(0,r.useMemo)((function(){return Hf()(l,{id:i})}),[l,i]),y=(0,r.useMemo)((function(){return Hf()(f,{id:a})}),[f,a]),h=(0,r.useMemo)((function(){return Hf()(p,{id:c})}),[p,c]);return(0,r.useEffect)((function(){i&&bd(hd().mark((function e(){var t,r;return hd().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n.loadingBranchesList(),t=Hf()(Bf.repositories,{id:i}),e.next=4,Bf.fetchRepoBranches(t);case 4:r=e.sent,n.loadedBranchesList({branches:r});case 6:case"end":return e.stop()}}),e)})))()}),[i,n]),(0,r.useEffect)((function(){i&&a&&bd(hd().mark((function e(){var t,r;return hd().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n.loadingKeyboardsList(),t=Hf()(Bf.repositories,{id:i}),e.next=4,Bf.fetchBranchKeyboards(t,a);case 4:r=e.sent,n.loadedKeyboardsList(r);case 6:case"end":return e.stop()}}),e)})))()}),[i,a,n]),[{repositories:l,repositoryChoices:u,branchChoices:f,keyboardChoices:p},{selectedRepoChoice:d,selectedBranchChoice:y,selectedKeyboardChoice:h}]}(t,o),a=Od(i,2),c=a[0],l=a[1],s=t.initialized,u=t.selectedRepoId,f=t.selectedBranchName,p=t.selectedKeyboard,d=t.loading,y=e.onSelect,h=e.onError;(0,r.useEffect)((function(){var e=function(){return Bf.beginLoginFlow()},n=function(){o.clearSelection(),h({dialog:od})},t=function(){o.clearSelection(),h({dialog:ip})},r=function(e){var n=Up;Sd(e)&&(n=rd),Id(e)&&(n=$p),Pd(e)&&(n=ad),Bd(e)&&(n=pd),o.clearSelection(),h({dialog:n,dialogProps:{title:e.name,errors:e.errors}})};return Bf.init().then(o.integrationInitialized),Bf.on("authentication-failed",e),Bf.on("blocked",n),Bf.on("repo-validation-error",r),Bf.on("layout-generation-failed",t),function(){Bf.off("authentication-failed",e),Bf.off("blocked",n),Bf.off("repo-validation-error",r),Bf.off("layout-generation-failed",t)}}),[o,h]);var m=(0,r.useCallback)(function(){var e,n=(e=xd().mark((function e(n,t,r){var i,a,c,l;return xd().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return a=Bf.repositories,c=null===(i=Hf()(a,{id:n}))||void 0===i?void 0:i.full_name,o.keyboardLoading(),e.next=5,Bf.fetchLayoutAndKeymap(c,t,{keyboard:r});case 5:l=e.sent,o.keyboardLoadedSuccess({response:l}),y(Cd({github:{repository:c,branch:t,keyboard:r}},l));case 8:case"end":return e.stop()}}),e)})),function(){var n=this,t=arguments;return new Promise((function(r,o){var i=e.apply(n,t);function a(e){Ed(i,r,o,a,c,"next",e)}function c(e){Ed(i,r,o,a,c,"throw",e)}a(void 0)}))});return function(e,t,r){return n.apply(this,arguments)}}(),[o,y]),b=(0,r.useCallback)((function(){return m(u,f,p)}),[m,u,f,p]);return(0,r.useEffect)((function(){u&&f&&m(u,f,p)}),[u,f,p,m]),s?t.blocked?(0,O.jsx)(od,{}):Bf.isGitHubAuthorized()?Bf.isAppInstalled()?Bf.isAppSuspendedForRepoSelection()?(0,O.jsx)(nd,{installation:Bf.installations[0]}):(0,O.jsxs)(O.Fragment,{children:[(0,O.jsx)(dd,{state:t,actions:o,choices:c,selections:l}),f&&!d&&(0,O.jsx)(hp,{onClick:b,children:(0,O.jsx)(L,{name:"sync"})})]}):(0,O.jsx)(ud,{}):(0,O.jsx)(ld,{}):null}Td.propTypes={expanded:E().bool.isRequired,onExpand:E().func.isRequired,onError:E().func.isRequired,onSelect:E().func.isRequired};var Ld=Td,Dd=et()([re&&{id:"demo",name:"Demo Keyboard"},te&&{id:"local",name:"Local"},ne&&{id:"github",name:"GitHub"}]),Rd=localStorage.getItem("selectedSource"),Nd=(1===Dd.length?Dd[0].id:null)||(Dd.find((function(e){return e.id===Rd}))?Rd:Dd[0].id);function _d(e){var n=e.onDismiss;return(0,O.jsx)(fn,{children:(0,O.jsxs)(tn,{onDismiss:n,children:[(0,O.jsx)("h2",{children:"Could not parse keymap"}),(0,O.jsx)("p",{children:"It looks like some bindings in your keymap are using custom pre-processor macros which isn't supported by the Keymap Editor. These macros make it difficult both to resolve bindings to behaviors and parameters, as well as to generate modified keymap code that is consistent with your original intentions."}),(0,O.jsx)("p",{children:"Please either continue editing your keymap by hand with these helpers or if you would like to use this editor, rewrite the keymap to use ZMK's syntax directly."}),tp]})})}_d.propTypes={onDismiss:E().func.isRequired};var Md=_d;function Yd(e){var n=e.onDismiss;return(0,O.jsx)(fn,{children:(0,O.jsxs)(tn,{onDismiss:n,children:[(0,O.jsx)("h2",{children:"Could not parse keymap"}),(0,O.jsx)("p",{children:"Something went wrong while trying to parse your keymap. It's hard to say what exactly, because I wasn't expecting this."}),(0,O.jsx)("p",{children:"A common occurrence here is keymaps using a variety of pre-processor macros to define layers/combos/etc."}),tp]})})}Yd.propTypes={onDismiss:E().func.isRequired};var qd=Yd;function Zd(e){var n=e.onDismiss;return(0,O.jsx)(fn,{children:(0,O.jsxs)(tn,{onDismiss:n,children:[(0,O.jsx)("h2",{children:"Could not parse Miryoku keymap"}),(0,O.jsx)("p",{children:"It looks like your keyboard is built using Miryoku to manage the configuration and keymap. Parsing and editing keymaps that use this syntax is unsupported by the Keymap Editor."}),(0,O.jsx)("p",{children:"Please either continue editing your keymap by hand with these helpers or if you would like to use this editor, rewrite the keymap to use ZMK's syntax directly."})]})})}Zd.propTypes={onDismiss:E().func.isRequired};var Kd=Zd;function Ud(e){var n=e.onDismiss;return(0,O.jsx)(fn,{children:(0,O.jsxs)(tn,{onDismiss:n,children:[(0,O.jsx)("h2",{children:"Could not parse keymap"}),(0,O.jsx)("p",{children:"Missing devicetree root node."}),(0,O.jsx)("p",{children:"The keymap editor was unable to find a devicetree root node in your keymap. This means that either something is wrong with the parser or something is wrong with your keymap's syntax."}),(0,O.jsxs)("p",{children:["If you've been using the keymap editor succesfully up to now it's possible that it has introduced an error in the keymap file. Please reach out for support at ",Jf,"."]})]})})}Ud.propTypes={onDismiss:E().func.isRequired};var Gd=Ud;function zd(e){var n=e.onDismiss;return(0,O.jsx)(fn,{children:(0,O.jsxs)(tn,{onDismiss:n,children:[(0,O.jsx)("h2",{children:"Could not parse keymap"}),(0,O.jsxs)("p",{children:["Detected use of ",(0,O.jsx)("code",{children:"zmk-nodefree-config"})]}),(0,O.jsx)("p",{children:"It looks like your keymap is built using helper functions from the zmk-nodefree-config library to replace devicetree syntax. Parsing and editing keymaps that use this syntax is unsupported by the Keymap Editor."}),(0,O.jsx)("p",{children:"Please either continue editing your keymap by hand with these helpers or if you would like to use this editor, rewrite the keymap to use ZMK's syntax directly."})]})})}zd.propTypes={onDismiss:E().func.isRequired};var Wd=zd;function Fd(e){return Fd="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Fd(e)}function Xd(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Vd(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Xd(Object(t),!0).forEach((function(n){Qd(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Xd(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Qd(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Fd(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Fd(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Fd(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Hd(e){return(0,O.jsx)(fn,{children:(0,O.jsxs)(tn,Vd(Vd({},e),{},{children:[(0,O.jsx)("h2",{children:"This layout was Auto-Generated"}),(0,O.jsx)("p",{children:"Hi there! There wasn't a layout definition to accompany your keymap file, so the keymap editor tried to generate one automatically in a last-ditch effort to help you get into the app."}),(0,O.jsxs)("p",{children:["This layout definition was (or will be) saved when you first save keymap changes with the keymap editor, so remember that if there are any tweaks you'd like to make to improve it you can do so by editing the ",(0,O.jsx)("code",{children:"info.json"})," file."]}),rp]}))})}Hd.propTypes={};var Jd=Hd;function $d(e){return $d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},$d(e)}function ey(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function ny(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?ey(Object(t),!0).forEach((function(n){ty(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ey(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function ty(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==$d(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==$d(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===$d(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function ry(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(e,n)||function(e,n){if(e){if("string"==typeof e)return oy(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?oy(e,n):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function oy(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function iy(e){var n,t,o,i=e.onSelect,a=(0,r.useRef)(),c=ry((0,r.useState)(Nd),2),l=c[0],s=c[1],u=ry((0,r.useState)({autoGenerated:!1}),2),f=u[0].autoGenerated,p=u[1],d=ry((0,r.useState)(null),2),y=d[0],h=d[1],m=(0,r.useCallback)((function(){return h(null)}),[h]),b=(!0,t=(n=ry((0,r.useState)(true),2))[0],o=n[1],[t,(0,r.useCallback)((function(){return o(!0)}),[o]),(0,r.useCallback)((function(){return o(!1)}),[o]),(0,r.useCallback)((function(){return o((function(e){return!e}))}),[o])]),A=ry(b,3),v=A[0],g=A[1],x=A[2],j=(0,r.useCallback)((function(){h({component:Jd,onClose:m})}),[h,m]);!function(e,n){var t=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];(0,r.useEffect)((function(){if(t){var r=function(t){var r=document.body.contains(t.target),o=e.current.contains(t.target);r&&!o&&n()};return document.body.addEventListener("click",r),function(){return document.body.removeEventListener("click",r)}}}),[e,t,n])}(a,x,v&&"github"===l);var C=(0,r.useCallback)((function(e){var n=e.keymap.warningFlags,t=void 0===n?[]:n,r=(e.layoutMetadata||{}).autoGenerated,o=void 0!==r&&r,a=function(e){switch(e[0]){case"USING_ZMK_NODEFREE_MACROS":return Wd;case"USING_MIRYOKU_DTSI":return Kd;case"USING_NON_ZMK_MACRO":return Md;case"KEYMAP_PARSING_FAILED":return qd;case"MISSING_ROOT_NODE":return Gd;default:return null}}(t);if(a)return h({component:a,onClose:m}),void i({source:l,keyboard:null});p({autoGenerated:o}),i(ny({source:l},e))}),[i,l,h,m]),w=(0,r.useCallback)((function(e){var n=e.dialog,t=e.dialogProps;h({component:n,dialogProps:t,onClose:m}),i({source:l,keyboard:null})}),[h,m,i,l]);(0,r.useEffect)((function(){localStorage.setItem("selectedSource",l)}),[l]);var E=Hf()(Dd,{id:l});return(0,O.jsxs)("div",{ref:a,style:{display:"flex",flexDirection:"row",alignItems:"end",gap:"5px",margin:"5px"},children:[(0,O.jsx)(Ap,{label:"Source",value:E,options:Dd,getOptionLabel:function(e){return e.name},getOptionValue:function(e){return e.id},onChange:function(e){var n=e.id;return s(n)}}),(null==y?void 0:y.component)&&(0,O.jsx)(y.component,ny(ny({},y.dialogProps||{}),{},{onDismiss:y.onClose})),"local"===l&&(0,O.jsx)(Ep,{onError:w,onSelect:C}),"demo"===l&&(0,O.jsx)(Mp,{onSelect:C}),"github"===l&&(0,O.jsx)(Ld,{expanded:v,onSelect:C,onError:w,onExpand:g}),f&&(0,O.jsxs)(hp,{onClick:j,children:[(0,O.jsx)(L,{name:"warning"})," Layout wrong?"]})]})}iy.propTypes={onSelect:E().func.isRequired};var ay=iy,cy=t(70401),ly=t.n(cy),sy=t(14084),uy={};uy.styleTagTransform=b(),uy.setAttributes=d(),uy.insert=f().bind(null,"head"),uy.domAPI=s(),uy.insertStyleElement=h(),c()(sy.Z,uy);var fy=sy.Z&&sy.Z.locals?sy.Z.locals:void 0;function py(e){return py="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},py(e)}function dy(){dy=function(){return e};var e={},n=Object.prototype,t=n.hasOwnProperty,r=Object.defineProperty||function(e,n,t){e[n]=t.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function l(e,n,t){return Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}),e[n]}try{l({},"")}catch(e){l=function(e,n,t){return e[n]=t}}function s(e,n,t,o){var i=n&&n.prototype instanceof p?n:p,a=Object.create(i.prototype),c=new E(o||[]);return r(a,"_invoke",{value:x(e,t,c)}),a}function u(e,n,t){try{return{type:"normal",arg:e.call(n,t)}}catch(e){return{type:"throw",arg:e}}}e.wrap=s;var f={};function p(){}function d(){}function y(){}var h={};l(h,i,(function(){return this}));var m=Object.getPrototypeOf,b=m&&m(m(O([])));b&&b!==n&&t.call(b,i)&&(h=b);var A=y.prototype=p.prototype=Object.create(h);function v(e){["next","throw","return"].forEach((function(n){l(e,n,(function(e){return this._invoke(n,e)}))}))}function g(e,n){function o(r,i,a,c){var l=u(e[r],e,i);if("throw"!==l.type){var s=l.arg,f=s.value;return f&&"object"==py(f)&&t.call(f,"__await")?n.resolve(f.__await).then((function(e){o("next",e,a,c)}),(function(e){o("throw",e,a,c)})):n.resolve(f).then((function(e){s.value=e,a(s)}),(function(e){return o("throw",e,a,c)}))}c(l.arg)}var i;r(this,"_invoke",{value:function(e,t){function r(){return new n((function(n,r){o(e,t,n,r)}))}return i=i?i.then(r,r):r()}})}function x(e,n,t){var r="suspendedStart";return function(o,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw i;return{value:void 0,done:!0}}for(t.method=o,t.arg=i;;){var a=t.delegate;if(a){var c=j(a,t);if(c){if(c===f)continue;return c}}if("next"===t.method)t.sent=t._sent=t.arg;else if("throw"===t.method){if("suspendedStart"===r)throw r="completed",t.arg;t.dispatchException(t.arg)}else"return"===t.method&&t.abrupt("return",t.arg);r="executing";var l=u(e,n,t);if("normal"===l.type){if(r=t.done?"completed":"suspendedYield",l.arg===f)continue;return{value:l.arg,done:t.done}}"throw"===l.type&&(r="completed",t.method="throw",t.arg=l.arg)}}}function j(e,n){var t=n.method,r=e.iterator[t];if(void 0===r)return n.delegate=null,"throw"===t&&e.iterator.return&&(n.method="return",n.arg=void 0,j(e,n),"throw"===n.method)||"return"!==t&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+t+"' method")),f;var o=u(r,e.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,f;var i=o.arg;return i?i.done?(n[e.resultName]=i.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=void 0),n.delegate=null,f):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,f)}function C(e){var n={tryLoc:e[0]};1 in e&&(n.catchLoc=e[1]),2 in e&&(n.finallyLoc=e[2],n.afterLoc=e[3]),this.tryEntries.push(n)}function w(e){var n=e.completion||{};n.type="normal",delete n.arg,e.completion=n}function E(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(C,this),this.reset(!0)}function O(e){if(e){var n=e[i];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,o=function n(){for(;++r<e.length;)if(t.call(e,r))return n.value=e[r],n.done=!1,n;return n.value=void 0,n.done=!0,n};return o.next=o}}return{next:k}}function k(){return{value:void 0,done:!0}}return d.prototype=y,r(A,"constructor",{value:y,configurable:!0}),r(y,"constructor",{value:d,configurable:!0}),d.displayName=l(y,c,"GeneratorFunction"),e.isGeneratorFunction=function(e){var n="function"==typeof e&&e.constructor;return!!n&&(n===d||"GeneratorFunction"===(n.displayName||n.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,y):(e.__proto__=y,l(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},e.awrap=function(e){return{__await:e}},v(g.prototype),l(g.prototype,a,(function(){return this})),e.AsyncIterator=g,e.async=function(n,t,r,o,i){void 0===i&&(i=Promise);var a=new g(s(n,t,r,o),i);return e.isGeneratorFunction(t)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},v(A),l(A,c,"Generator"),l(A,i,(function(){return this})),l(A,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var n=Object(e),t=[];for(var r in n)t.push(r);return t.reverse(),function e(){for(;t.length;){var r=t.pop();if(r in n)return e.value=r,e.done=!1,e}return e.done=!0,e}},e.values=O,E.prototype={constructor:E,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(w),!e)for(var n in this)"t"===n.charAt(0)&&t.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function r(t,r){return a.type="throw",a.arg=e,n.next=t,r&&(n.method="next",n.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var c=t.call(i,"catchLoc"),l=t.call(i,"finallyLoc");if(c&&l){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(e,n){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&t.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=n&&n<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=n,i?(this.method="next",this.next=i.finallyLoc,f):this.complete(a)},complete:function(e,n){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&n&&(this.next=n),f},finish:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.finallyLoc===e)return this.complete(t.completion,t.afterLoc),w(t),f}},catch:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.tryLoc===e){var r=t.completion;if("throw"===r.type){var o=r.arg;w(t)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,t){return this.delegate={iterator:O(e),resultName:n,nextLoc:t},"next"===this.method&&(this.arg=void 0),f}},e}function yy(e,n,t,r,o,i,a){try{var c=e[i](a),l=c.value}catch(e){return void t(e)}c.done?n(l):Promise.resolve(l).then(r,o)}function hy(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,c=[],l=!0,s=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(c.push(r.value),c.length!==n);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(e,n)||function(e,n){if(e){if("string"==typeof e)return my(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?my(e,n):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function my(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function by(e){return"  ".concat(e.fileName,":").concat(e.lineNumber,":").concat(e.columnNumber)}var Ay=(0,O.jsx)(Xa,{external:!0,href:"https://github.com/nickcoutsos/keymap-editor/issues/new",children:"new issue"});function vy(e){var n=e.error,t=hy((0,r.useState)([]),2),o=t[0],i=t[1],a=hy((0,r.useState)(""),2),c=a[0],l=a[1],s=hy((0,r.useState)(!1),2),u=s[0],f=s[1];return(0,r.useEffect)((function(){function e(){var t;return t=dy().mark((function e(){return dy().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.t0=i,e.next=3,ly().fromError(n);case 3:e.t1=e.sent,(0,e.t0)(e.t1);case 5:case"end":return e.stop()}}),e)})),e=function(){var e=this,n=arguments;return new Promise((function(r,o){var i=t.apply(e,n);function a(e){yy(i,r,o,a,c,"next",e)}function c(e){yy(i,r,o,a,c,"throw",e)}a(void 0)}))},e.apply(this,arguments)}!function(){e.apply(this,arguments)}()}),[i,n]),(0,r.useEffect)((function(){l(function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];return"\n".concat(e.name,"\n\n").concat(e.message,"\n\n").concat(n.map(by).join("\n"),"\n").trim()}(n,o))}),[n,o]),(0,r.useEffect)((function(){u&&setTimeout((function(){f(!1)}),3e3)}),[u,f]),(0,O.jsx)(fn,{children:(0,O.jsxs)(tn,{dismissText:!1,style:{maxWidth:"700px"},children:[(0,O.jsx)("h2",{children:"Unexpected error"}),(0,O.jsxs)("p",{children:["Something unexpected happened and the keymap editor app cannot recover. Please consider taking a moment to open a ",Ay,"with the details below to help me investigate and improve the app."]}),(0,O.jsxs)("div",{className:fy.stackTrace,children:[(0,O.jsx)("pre",{children:c}),(0,O.jsx)(Y,{icon:"copy",title:"Copy error text",className:fy.button,onClick:function(){var e="".concat("```","\n").concat(c,"\n").concat("```");navigator.clipboard.writeText(e).then((function(){return f(!0)}))}}),u&&(0,O.jsx)("div",{className:fy.copyMessage,children:"Copied!"})]})]})})}vy.propTypes={error:E().instanceOf(Error).isRequired};var gy=vy;function xy(e){return xy="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},xy(e)}function jy(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,(void 0,o=function(e,n){if("object"!==xy(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==xy(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(r.key),"symbol"===xy(o)?o:String(o)),r)}var o}function Cy(e,n){return Cy=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,n){return e.__proto__=n,e},Cy(e,n)}function wy(e){return wy=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},wy(e)}var Ey=function(e){!function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),n&&Cy(e,n)}(c,e);var n,t,r,o,i,a=(o=c,i=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,n=wy(o);if(i){var t=wy(this).constructor;e=Reflect.construct(n,arguments,t)}else e=n.apply(this,arguments);return function(e,n){if(n&&("object"===xy(n)||"function"==typeof n))return n;if(void 0!==n)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(this,e)});function c(e){var n;return function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,c),(n=a.call(this,e)).state={error:null},n}return n=c,r=[{key:"getDerivedStateFromError",value:function(e){return{error:e}}}],(t=[{key:"render",value:function(){var e=this.props.children,n=this.state.error;return n?(0,O.jsx)(gy,{error:n}):e}}])&&jy(n.prototype,t),r&&jy(n,r),Object.defineProperty(n,"prototype",{writable:!1}),c}(r.Component);function Oy(e){var n=e.onDismiss;return(0,O.jsx)(fn,{children:(0,O.jsxs)(tn,{onDismiss:n,children:[(0,O.jsx)("h2",{children:"Failed to save keymap changes"}),(0,O.jsx)("p",{children:"Sorry, an unexpected error occurred while trying to save your keymap."}),(0,O.jsx)("p",{children:"Please try again or raise an issue if the problem persists and I'll try to work it out with you. Seriously I can only get this right if I know what's wrong, and in some cases that comes down to people using this editor in more advanced ways than I myself have."}),(0,O.jsx)("p",{children:Jf})]})})}Oy.propTypes={onDismiss:E().func.isRequired};var ky=Oy;function Sy(e){return Sy="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Sy(e)}var By=["source","layout","keymap","sensors"];function Py(){Py=function(){return e};var e={},n=Object.prototype,t=n.hasOwnProperty,r=Object.defineProperty||function(e,n,t){e[n]=t.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function l(e,n,t){return Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}),e[n]}try{l({},"")}catch(e){l=function(e,n,t){return e[n]=t}}function s(e,n,t,o){var i=n&&n.prototype instanceof p?n:p,a=Object.create(i.prototype),c=new E(o||[]);return r(a,"_invoke",{value:x(e,t,c)}),a}function u(e,n,t){try{return{type:"normal",arg:e.call(n,t)}}catch(e){return{type:"throw",arg:e}}}e.wrap=s;var f={};function p(){}function d(){}function y(){}var h={};l(h,i,(function(){return this}));var m=Object.getPrototypeOf,b=m&&m(m(O([])));b&&b!==n&&t.call(b,i)&&(h=b);var A=y.prototype=p.prototype=Object.create(h);function v(e){["next","throw","return"].forEach((function(n){l(e,n,(function(e){return this._invoke(n,e)}))}))}function g(e,n){function o(r,i,a,c){var l=u(e[r],e,i);if("throw"!==l.type){var s=l.arg,f=s.value;return f&&"object"==Sy(f)&&t.call(f,"__await")?n.resolve(f.__await).then((function(e){o("next",e,a,c)}),(function(e){o("throw",e,a,c)})):n.resolve(f).then((function(e){s.value=e,a(s)}),(function(e){return o("throw",e,a,c)}))}c(l.arg)}var i;r(this,"_invoke",{value:function(e,t){function r(){return new n((function(n,r){o(e,t,n,r)}))}return i=i?i.then(r,r):r()}})}function x(e,n,t){var r="suspendedStart";return function(o,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw i;return{value:void 0,done:!0}}for(t.method=o,t.arg=i;;){var a=t.delegate;if(a){var c=j(a,t);if(c){if(c===f)continue;return c}}if("next"===t.method)t.sent=t._sent=t.arg;else if("throw"===t.method){if("suspendedStart"===r)throw r="completed",t.arg;t.dispatchException(t.arg)}else"return"===t.method&&t.abrupt("return",t.arg);r="executing";var l=u(e,n,t);if("normal"===l.type){if(r=t.done?"completed":"suspendedYield",l.arg===f)continue;return{value:l.arg,done:t.done}}"throw"===l.type&&(r="completed",t.method="throw",t.arg=l.arg)}}}function j(e,n){var t=n.method,r=e.iterator[t];if(void 0===r)return n.delegate=null,"throw"===t&&e.iterator.return&&(n.method="return",n.arg=void 0,j(e,n),"throw"===n.method)||"return"!==t&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+t+"' method")),f;var o=u(r,e.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,f;var i=o.arg;return i?i.done?(n[e.resultName]=i.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=void 0),n.delegate=null,f):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,f)}function C(e){var n={tryLoc:e[0]};1 in e&&(n.catchLoc=e[1]),2 in e&&(n.finallyLoc=e[2],n.afterLoc=e[3]),this.tryEntries.push(n)}function w(e){var n=e.completion||{};n.type="normal",delete n.arg,e.completion=n}function E(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(C,this),this.reset(!0)}function O(e){if(e){var n=e[i];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,o=function n(){for(;++r<e.length;)if(t.call(e,r))return n.value=e[r],n.done=!1,n;return n.value=void 0,n.done=!0,n};return o.next=o}}return{next:k}}function k(){return{value:void 0,done:!0}}return d.prototype=y,r(A,"constructor",{value:y,configurable:!0}),r(y,"constructor",{value:d,configurable:!0}),d.displayName=l(y,c,"GeneratorFunction"),e.isGeneratorFunction=function(e){var n="function"==typeof e&&e.constructor;return!!n&&(n===d||"GeneratorFunction"===(n.displayName||n.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,y):(e.__proto__=y,l(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},e.awrap=function(e){return{__await:e}},v(g.prototype),l(g.prototype,a,(function(){return this})),e.AsyncIterator=g,e.async=function(n,t,r,o,i){void 0===i&&(i=Promise);var a=new g(s(n,t,r,o),i);return e.isGeneratorFunction(t)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},v(A),l(A,c,"Generator"),l(A,i,(function(){return this})),l(A,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var n=Object(e),t=[];for(var r in n)t.push(r);return t.reverse(),function e(){for(;t.length;){var r=t.pop();if(r in n)return e.value=r,e.done=!1,e}return e.done=!0,e}},e.values=O,E.prototype={constructor:E,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(w),!e)for(var n in this)"t"===n.charAt(0)&&t.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function r(t,r){return a.type="throw",a.arg=e,n.next=t,r&&(n.method="next",n.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var c=t.call(i,"catchLoc"),l=t.call(i,"finallyLoc");if(c&&l){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(e,n){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&t.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=n&&n<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=n,i?(this.method="next",this.next=i.finallyLoc,f):this.complete(a)},complete:function(e,n){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&n&&(this.next=n),f},finish:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.finallyLoc===e)return this.complete(t.completion,t.afterLoc),w(t),f}},catch:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.tryLoc===e){var r=t.completion;if("throw"===r.type){var o=r.arg;w(t)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,t){return this.delegate={iterator:O(e),resultName:n,nextLoc:t},"next"===this.method&&(this.arg=void 0),f}},e}function Iy(e,n,t,r,o,i,a){try{var c=e[i](a),l=c.value}catch(e){return void t(e)}c.done?n(l):Promise.resolve(l).then(r,o)}var Ty=function(){var e=(0,i.v9)((function(e){return e})),n=(0,i.I0)(),t=e.sourceOther,o=e.keyboard,a=e.saveError,c=e.theme,l=e.settingsVisible,s=e.experimentalSettings;(0,r.useEffect)((function(){var e;if(null!=t&&t.github)return(e=Py().mark((function e(){var n,o,i;return Py().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=t.github,o=n.repository,i=n.branch,e.t0=r,e.next=4,Bf.fetchBuildStatus(o,i);case 4:e.t1=e.sent,(0,e.t0)(e.t1);case 6:case"end":return e.stop()}}),e)})),function(){var n=this,t=arguments;return new Promise((function(r,o){var i=e.apply(n,t);function a(e){Iy(i,r,o,a,c,"next",e)}function c(e){Iy(i,r,o,a,c,"throw",e)}a(void 0)}))})(),Bf.on("build-update",r),function(){return Bf.off("build-update",r)};function r(e){e.head_branch===t.github.branch&&n({type:"GITHUB_BUILD_UPDATE",build:e})}n({type:"GITHUB_BUILD_UPDATE",build:null})}),[t,n]);var u=(0,r.useCallback)((function(e){var t=e.source,r=e.layout,o=e.keymap,i=e.sensors,a=void 0===i?[]:i,c=function(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}(e,By);n(o?{type:"SELECT_KEYBOARD",source:t,sourceOther:c,layout:r,keymap:o,sensors:a}:{type:"CLEAR_KEYBOARD_SELECTION"})}),[n]),f=(0,r.useCallback)((function(e){n({type:"SETTINGS_UPDATE",settings:e})}),[n]),p=(0,r.useCallback)((function(){return n({type:"SETTINGS_OPEN"})}),[n]);return(0,O.jsxs)(O.Fragment,{children:[(0,O.jsx)(Ey,{children:(0,O.jsxs)(C.Provider,{value:{settings:s,openSettingsDialog:p},children:[(0,O.jsx)(ay,{onSelect:u}),(0,O.jsxs)("div",{id:"settings-bar",children:[(0,O.jsx)(Y,{id:"light-mode",title:"Toggle theme",icon:{light:"sun",dark:"moon",system:"circle-half-stroke"}[c]||"circle-half-stroke",onClick:function(){return n({type:"CYCLE_THEME"})}}),(0,O.jsx)(Y,{id:"settings-button",icon:"cog",onClick:p}),l&&(0,O.jsx)(tf,{settings:s,onUpdate:f,onClose:function(){return n({type:"SETTINGS_CLOSE"})}})]}),(0,O.jsx)(Vf,{}),(0,O.jsxs)(Pe,{children:[o&&(0,O.jsx)(Tt,{layout:o.layout,children:(0,O.jsx)(Gu,{keymap:o.keymap,sensors:o.sensors})}),a&&(0,O.jsx)(ky,{onDismiss:function(){return n({type:"CLEAR_SAVE_ERROR"})}})]})]})}),(0,O.jsx)(Vu,{})]})};function Ly(e){return Ly="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Ly(e)}function Dy(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Ry(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Dy(Object(t),!0).forEach((function(n){Ny(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Dy(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Ny(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Ly(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Ly(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Ly(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function _y(){var e=JSON.parse(localStorage.getItem("experimental-settings")||"{}");return{definitions:null,source:null,sourceOther:null,keyboard:null,_unmodifiedKeymap:null,saving:null,saveError:null,settingsVisible:null,commitDialogOpen:!1,theme:JSON.parse(localStorage.getItem("theme")),experimentalSettings:{unicodeGlyphs:G()(e,"unicodeGlyphs",!0),platformGlyphs:G()(e,"platformGlyphs","auto"),enableBehaviorEditing:G()(e,"enableBehaviorEditing",!1)},latestBuild:null}}var My=_y();var Yy=t(14890);function qy(e){return qy="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},qy(e)}function Zy(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Ky(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Zy(Object(t),!0).forEach((function(n){Uy(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Zy(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Uy(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==qy(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==qy(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===qy(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}var Gy=(0,Yy.UY)({layout:function(){return arguments.length>0&&void 0!==arguments[0]?arguments[0]:[]},sensors:function(){return arguments.length>0&&void 0!==arguments[0]?arguments[0]:[]},keymap:(0,Yy.UY)({warningFlags:function(){return arguments.length>0&&void 0!==arguments[0]?arguments[0]:[]},defines:function(){return arguments.length>0&&void 0!==arguments[0]?arguments[0]:[]},chosen:function(){return arguments.length>0&&void 0!==arguments[0]?arguments[0]:{}},behaviors:dc,combos:tl,layers:ai,macros:Xs})}),zy=(0,Zo.xC)({reducer:function(e,n){var t=function(e,n){var t=n.type,r=e.keyboard;switch(t){case"INITIALIZE":return _y();case"DEFINITIONS_SET":return Ry(Ry({},e),{},{definitions:n.definitions});case"CLEAR_KEYBOARD_SELECTION":return Ry(Ry({},e),{},{keyboard:null});case"SELECT_KEYBOARD":return Ry(Ry({},e),{},{source:n.source,sourceOther:n.sourceOther,keyboard:Ry(Ry({},r),Sn()(n,["layout","keymap","sensors"])),_unmodifiedKeymap:n.keymap});case"COMMIT_DIALOG_OPEN":return Ry(Ry({},e),{},{commitDialogOpen:!0});case"COMMIT_DIALOG_CLOSE":return Ry(Ry({},e),{},{commitDialogOpen:!1});case"GITHUB_BUILD_UPDATE":return Ry(Ry({},e),{},{latestBuild:n.build});case"KEYMAP_SAVE_START":return Ry(Ry({},e),{},{saving:!0,saveError:!1});case"KEYMAP_SAVE_SUCCESS":return Ry(Ry({},e),{},{saving:!1,unsaved:!1,keyboard:Ry(Ry({},e.keyboard),{},{keymap:n.keymap||e.keyboard.keymap}),_unmodifiedKeymap:n.keymap||e.keyboard.keymap});case"KEYMAP_SAVE_FAILURE":return Ry(Ry({},e),{},{saving:!1,saveError:!0});case"CLEAR_SAVE_ERROR":return Ry(Ry({},e),{},{saveError:null});case"SETTINGS_OPEN":return Ry(Ry({},e),{},{settingsVisible:!0});case"SETTINGS_CLOSE":return Ry(Ry({},e),{},{settingsVisible:!1});case"SETTINGS_UPDATE":return localStorage.setItem("experimental-settings",JSON.stringify(n.settings)),Ry(Ry({},e),{},{experimentalSettings:n.settings});case"CYCLE_THEME":return function(e,n){var t=["light","dark","system"],r=t.indexOf(e.theme),o=t.at((r+1)%t.length);return localStorage.setItem("theme",'"'.concat(o,'"')),document.body.dataset.theme=o,Ry(Ry({},e),{},{theme:o})}(e);default:return e}}(e,n);return Ky(Ky({},t),{},{keyboard:t.keyboard&&Ky(Ky({},t.keyboard),Gy(t.keyboard,n))})},preloadedState:My});document.body.dataset.theme=My.theme,o.createRoot(document.getElementById("app-root")).render((0,O.jsx)(r.StrictMode,{children:(0,O.jsx)(i.zt,{store:zy,children:(0,O.jsx)(Ty,{})})}))},39087:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,':root {\n  --bg: white;\n  --bg-rgb: 255,255,255;\n  --fg: black;\n\t--dark-red: #910e0e;\n\t--dark-blue: #6d99c6;\n  --error-highlight: rgb(179, 60, 60);\n  --selection: rgb(60, 179, 113);\n  --hover-selection: rgba(60, 179, 113, 0.85);\n  --delete: rgb(179, 60, 72);\n  --delete-faint: rgba(179, 60, 72, 0.6);\n  --link: royalblue;\n  --link-hover: #6d99c6;\n  --key-bg-base: #f2f2f2;\n  --key-bg-hover: white;\n  --key-bg-highlight: sandybrown;\n  --key-color-base: #6f6f6f;\n  --key-color-extreme: #313131;\n  --key-color-hover: white;\n  --code-bg: rgba(0, 0, 0, 0.15);\n}\nhtml {\n  font-family: sans-serif;\n}\nhtml, body {\n\twidth: 100vw;\n\theight: 100vh;\n\toverflow: auto;\n\tpadding: 0;\n\tmargin: 0;\n  background-color: var(--bg);\n  color: var(--fg);\n\n  transition: 300ms ease-in-out;\n  transition-property: color, background-color, border-color;\n}\n\nh1, h2, h3, h4, h5, h6 {\n  font-family: Quicksand, avenir, sans-serif;\n}\n\nbody[data-theme="dark"] {\n  color-scheme: dark;\n  --bg: #123;\n  --bg-rgb: 17,34,51;\n  --fg: white;\n  --key-bg-base: #1c2c3b;\n  --key-color-base: #b7b7b7;\n  --key-color-extreme: #e7e7e7;\n}\n@media (prefers-color-scheme: dark) {\n  body[data-theme="system"] {\n    color-scheme: dark;\n    --bg: #123;\n    --bg-rgb: 17,34,51;\n    --fg: white;\n    --key-bg-base: #1c2c3b;\n    --key-color-base: #b7b7b7;\n    --key-color-extreme: #e7e7e7;\n  }\n}\n\nh3 {\n  margin-bottom: 10px;\n}\n\na { color: var(--link) }\na:hover { color: var(--link-hover) }\n\ncode {\n  background-color: var(--code-bg);\n  border-radius: 2px;\n  padding: .15em .3em .05em;\n}\n\n#actions {\n\tposition: absolute;\n  display: flex;\n\tbottom: 5px;\n\tright: 5px;\n  gap: 4px;\n}\n\n#actions button {\n  display: inline-block;\n  cursor: pointer;\n  background-color: var(--hover-selection);\n  color: white;\n\n  font-size: 16px;\n  border: none;\n  border-radius: 5px;\n  padding: 0 5px;\n\n  height: 30px;\n  line-height: 30px;\n  vertical-align: middle;\n}\n\n#actions button[disabled] {\n  filter: saturate(20%);\n  opacity: .5;\n  cursor: not-allowed;\n}\n\n#settings-bar {\n  position: absolute;\n  top: 10px;\n  right: 10px;\n}\n\n#settings-bar button {\n  background: none;\n  color: var(--fg);\n  border: none;\n}\n#settings-bar button:hover {\n  cursor: pointer;\n  color: royalblue;\n}\n\n.fa-delete-right::before {\n  content: \'\\f55a\';\n  transform-origin: center;\n  transform: rotateZ(180deg);\n  display: inline-block;\n}\n',"",{version:3,sources:["webpack://./src/App.css"],names:[],mappings:"AAAA;EACE,WAAW;EACX,qBAAqB;EACrB,WAAW;CACZ,mBAAmB;CACnB,oBAAoB;EACnB,mCAAmC;EACnC,8BAA8B;EAC9B,2CAA2C;EAC3C,0BAA0B;EAC1B,sCAAsC;EACtC,iBAAiB;EACjB,qBAAqB;EACrB,sBAAsB;EACtB,qBAAqB;EACrB,8BAA8B;EAC9B,yBAAyB;EACzB,4BAA4B;EAC5B,wBAAwB;EACxB,8BAA8B;AAChC;AACA;EACE,uBAAuB;AACzB;AACA;CACC,YAAY;CACZ,aAAa;CACb,cAAc;CACd,UAAU;CACV,SAAS;EACR,2BAA2B;EAC3B,gBAAgB;;EAEhB,6BAA6B;EAC7B,0DAA0D;AAC5D;;AAEA;EACE,0CAA0C;AAC5C;;AAEA;EACE,kBAAkB;EAClB,UAAU;EACV,kBAAkB;EAClB,WAAW;EACX,sBAAsB;EACtB,yBAAyB;EACzB,4BAA4B;AAC9B;AACA;EACE;IACE,kBAAkB;IAClB,UAAU;IACV,kBAAkB;IAClB,WAAW;IACX,sBAAsB;IACtB,yBAAyB;IACzB,4BAA4B;EAC9B;AACF;;AAEA;EACE,mBAAmB;AACrB;;AAEA,IAAI,mBAAmB;AACvB,UAAU,yBAAyB;;AAEnC;EACE,gCAAgC;EAChC,kBAAkB;EAClB,yBAAyB;AAC3B;;AAEA;CACC,kBAAkB;EACjB,aAAa;CACd,WAAW;CACX,UAAU;EACT,QAAQ;AACV;;AAEA;EACE,qBAAqB;EACrB,eAAe;EACf,wCAAwC;EACxC,YAAY;;EAEZ,eAAe;EACf,YAAY;EACZ,kBAAkB;EAClB,cAAc;;EAEd,YAAY;EACZ,iBAAiB;EACjB,sBAAsB;AACxB;;AAEA;EACE,qBAAqB;EACrB,WAAW;EACX,mBAAmB;AACrB;;AAEA;EACE,kBAAkB;EAClB,SAAS;EACT,WAAW;AACb;;AAEA;EACE,gBAAgB;EAChB,gBAAgB;EAChB,YAAY;AACd;AACA;EACE,eAAe;EACf,gBAAgB;AAClB;;AAEA;EACE,gBAAgB;EAChB,wBAAwB;EACxB,0BAA0B;EAC1B,qBAAqB;AACvB",sourcesContent:[':root {\n  --bg: white;\n  --bg-rgb: 255,255,255;\n  --fg: black;\n\t--dark-red: #910e0e;\n\t--dark-blue: #6d99c6;\n  --error-highlight: rgb(179, 60, 60);\n  --selection: rgb(60, 179, 113);\n  --hover-selection: rgba(60, 179, 113, 0.85);\n  --delete: rgb(179, 60, 72);\n  --delete-faint: rgba(179, 60, 72, 0.6);\n  --link: royalblue;\n  --link-hover: #6d99c6;\n  --key-bg-base: #f2f2f2;\n  --key-bg-hover: white;\n  --key-bg-highlight: sandybrown;\n  --key-color-base: #6f6f6f;\n  --key-color-extreme: #313131;\n  --key-color-hover: white;\n  --code-bg: rgba(0, 0, 0, 0.15);\n}\nhtml {\n  font-family: sans-serif;\n}\nhtml, body {\n\twidth: 100vw;\n\theight: 100vh;\n\toverflow: auto;\n\tpadding: 0;\n\tmargin: 0;\n  background-color: var(--bg);\n  color: var(--fg);\n\n  transition: 300ms ease-in-out;\n  transition-property: color, background-color, border-color;\n}\n\nh1, h2, h3, h4, h5, h6 {\n  font-family: Quicksand, avenir, sans-serif;\n}\n\nbody[data-theme="dark"] {\n  color-scheme: dark;\n  --bg: #123;\n  --bg-rgb: 17,34,51;\n  --fg: white;\n  --key-bg-base: #1c2c3b;\n  --key-color-base: #b7b7b7;\n  --key-color-extreme: #e7e7e7;\n}\n@media (prefers-color-scheme: dark) {\n  body[data-theme="system"] {\n    color-scheme: dark;\n    --bg: #123;\n    --bg-rgb: 17,34,51;\n    --fg: white;\n    --key-bg-base: #1c2c3b;\n    --key-color-base: #b7b7b7;\n    --key-color-extreme: #e7e7e7;\n  }\n}\n\nh3 {\n  margin-bottom: 10px;\n}\n\na { color: var(--link) }\na:hover { color: var(--link-hover) }\n\ncode {\n  background-color: var(--code-bg);\n  border-radius: 2px;\n  padding: .15em .3em .05em;\n}\n\n#actions {\n\tposition: absolute;\n  display: flex;\n\tbottom: 5px;\n\tright: 5px;\n  gap: 4px;\n}\n\n#actions button {\n  display: inline-block;\n  cursor: pointer;\n  background-color: var(--hover-selection);\n  color: white;\n\n  font-size: 16px;\n  border: none;\n  border-radius: 5px;\n  padding: 0 5px;\n\n  height: 30px;\n  line-height: 30px;\n  vertical-align: middle;\n}\n\n#actions button[disabled] {\n  filter: saturate(20%);\n  opacity: .5;\n  cursor: not-allowed;\n}\n\n#settings-bar {\n  position: absolute;\n  top: 10px;\n  right: 10px;\n}\n\n#settings-bar button {\n  background: none;\n  color: var(--fg);\n  border: none;\n}\n#settings-bar button:hover {\n  cursor: pointer;\n  color: royalblue;\n}\n\n.fa-delete-right::before {\n  content: \'\\f55a\';\n  transform-origin: center;\n  transform: rotateZ(180deg);\n  display: inline-block;\n}\n'],sourceRoot:""}]),n.Z=a},51424:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,"body {\n  margin: 0;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\ncode {\n  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n    monospace;\n}\n","",{version:3,sources:["webpack://./src/index.css"],names:[],mappings:"AAAA;EACE,SAAS;EACT,mCAAmC;EACnC,kCAAkC;AACpC;;AAEA;EACE;aACW;AACb",sourcesContent:["body {\n  margin: 0;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\ncode {\n  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n    monospace;\n}\n"],sourceRoot:""}]),n.Z=a},56281:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,"button.pi2Ig8c3Fdh4H2Jpxdo7 {\n  display: inline-block;\n  cursor: pointer;\n  background-color: var(--hover-selection);\n  color: white;\n\n  font-size: 16px;\n  border: none;\n  border-radius: 5px;\n  padding: 0 5px;\n\n  height: 30px;\n  line-height: 30px;\n  vertical-align: middle;\n}\n\nbutton.Ctpu4E2dZYJ6g8CUGFOF {\n  color: var(--fg);\n  background-color: transparent;\n}\n\nbutton.pi2Ig8c3Fdh4H2Jpxdo7[disabled] {\n  filter: saturate(20%);\n  opacity: .5;\n  cursor: not-allowed;\n}\n","",{version:3,sources:["webpack://./src/Common/action-button.module.css"],names:[],mappings:"AAAA;EACE,qBAAqB;EACrB,eAAe;EACf,wCAAwC;EACxC,YAAY;;EAEZ,eAAe;EACf,YAAY;EACZ,kBAAkB;EAClB,cAAc;;EAEd,YAAY;EACZ,iBAAiB;EACjB,sBAAsB;AACxB;;AAEA;EACE,gBAAgB;EAChB,6BAA6B;AAC/B;;AAEA;EACE,qBAAqB;EACrB,WAAW;EACX,mBAAmB;AACrB",sourcesContent:["button.action {\n  display: inline-block;\n  cursor: pointer;\n  background-color: var(--hover-selection);\n  color: white;\n\n  font-size: 16px;\n  border: none;\n  border-radius: 5px;\n  padding: 0 5px;\n\n  height: 30px;\n  line-height: 30px;\n  vertical-align: middle;\n}\n\nbutton.secondary {\n  color: var(--fg);\n  background-color: transparent;\n}\n\nbutton.action[disabled] {\n  filter: saturate(20%);\n  opacity: .5;\n  cursor: not-allowed;\n}\n"],sourceRoot:""}]),a.locals={action:"pi2Ig8c3Fdh4H2Jpxdo7",secondary:"Ctpu4E2dZYJ6g8CUGFOF"},n.Z=a},56634:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,".jThiLc5_BrUyl71v3rKn {\n  display: inline-block;\n  position: absolute;\n  z-index: 5;\n  font-size: 70%;\n  background: var(--bg);\n  padding: 5px 10px;\n  margin-left: 10px;\n\n  border-radius: 4px;\n}\n\n.jThiLc5_BrUyl71v3rKn p {\n  display: inline-block;\n  cursor: pointer;\n  margin: 0;\n}\n\n.jThiLc5_BrUyl71v3rKn ul {\n  display: none;\n}\n.jThiLc5_BrUyl71v3rKn.xG2GKlsc07jLEb2aMC6H {\n  box-shadow: 2px 2px 5px 0px rgba(0, 0, 0, 0.5);\n}\n.jThiLc5_BrUyl71v3rKn.xG2GKlsc07jLEb2aMC6H ul {\n  display: block;\n  padding: 0;\n  margin: 0;\n  list-style-type: none;\n}\n\n.jThiLc5_BrUyl71v3rKn li {\n  cursor: pointer;\n  margin: 2px 0;\n  line-height: 20px;\n  padding: 0 5px;\n  border-radius: 10px;\n}\n\n.jThiLc5_BrUyl71v3rKn li:hover {\n  background-color: var(--hover-selection);\n  color: white;\n}\n","",{version:3,sources:["webpack://./src/Common/action-menu.module.css"],names:[],mappings:"AAAA;EACE,qBAAqB;EACrB,kBAAkB;EAClB,UAAU;EACV,cAAc;EACd,qBAAqB;EACrB,iBAAiB;EACjB,iBAAiB;;EAEjB,kBAAkB;AACpB;;AAEA;EACE,qBAAqB;EACrB,eAAe;EACf,SAAS;AACX;;AAEA;EACE,aAAa;AACf;AACA;EACE,8CAA8C;AAChD;AACA;EACE,cAAc;EACd,UAAU;EACV,SAAS;EACT,qBAAqB;AACvB;;AAEA;EACE,eAAe;EACf,aAAa;EACb,iBAAiB;EACjB,cAAc;EACd,mBAAmB;AACrB;;AAEA;EACE,wCAAwC;EACxC,YAAY;AACd",sourcesContent:[".menu {\n  display: inline-block;\n  position: absolute;\n  z-index: 5;\n  font-size: 70%;\n  background: var(--bg);\n  padding: 5px 10px;\n  margin-left: 10px;\n\n  border-radius: 4px;\n}\n\n.menu p {\n  display: inline-block;\n  cursor: pointer;\n  margin: 0;\n}\n\n.menu ul {\n  display: none;\n}\n.menu.open {\n  box-shadow: 2px 2px 5px 0px rgba(0, 0, 0, 0.5);\n}\n.menu.open ul {\n  display: block;\n  padding: 0;\n  margin: 0;\n  list-style-type: none;\n}\n\n.menu li {\n  cursor: pointer;\n  margin: 2px 0;\n  line-height: 20px;\n  padding: 0 5px;\n  border-radius: 10px;\n}\n\n.menu li:hover {\n  background-color: var(--hover-selection);\n  color: white;\n}\n"],sourceRoot:""}]),a.locals={menu:"jThiLc5_BrUyl71v3rKn",open:"xG2GKlsc07jLEb2aMC6H"},n.Z=a},49502:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,".ZpdcqlK42OntJos3eGw0 {\n  background-color: var(--bg);\n  padding: 20px 40px;\n  margin: 40px;\n  max-width: 500px;\n  box-shadow: 0px 10px 25px rgba(0, 0, 0, 0.4);\n  border-radius: 2px;\n}\n\n.ZpdcqlK42OntJos3eGw0 p, .ZpdcqlK42OntJos3eGw0 ul {\n  font-family: sans-serif;\n  line-height: 1.3rem;\n}\n\n.Mywg1Gw3bKMc9Kd9qcEO {\n  display: block;\n  margin: 0 auto;\n}\n","",{version:3,sources:["webpack://./src/Common/dialog-box.module.css"],names:[],mappings:"AAAA;EACE,2BAA2B;EAC3B,kBAAkB;EAClB,YAAY;EACZ,gBAAgB;EAChB,4CAA4C;EAC5C,kBAAkB;AACpB;;AAEA;EACE,uBAAuB;EACvB,mBAAmB;AACrB;;AAEA;EACE,cAAc;EACd,cAAc;AAChB",sourcesContent:[".dialog {\n  background-color: var(--bg);\n  padding: 20px 40px;\n  margin: 40px;\n  max-width: 500px;\n  box-shadow: 0px 10px 25px rgba(0, 0, 0, 0.4);\n  border-radius: 2px;\n}\n\n.dialog p, .dialog ul {\n  font-family: sans-serif;\n  line-height: 1.3rem;\n}\n\n.button {\n  display: block;\n  margin: 0 auto;\n}\n"],sourceRoot:""}]),a.locals={dialog:"ZpdcqlK42OntJos3eGw0",button:"Mywg1Gw3bKMc9Kd9qcEO"},n.Z=a},86015:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,".ho3CuFFjX1VFNZJiAyVs {\n  position: relative;\n}\n\n.u9J3v5ZrIbuVICzNBkRw {\n  padding: 5px;\n  cursor: pointer;\n  opacity: 0.5;\n  color: var(--key-color-base);\n}\n.u9J3v5ZrIbuVICzNBkRw:hover {\n  opacity: 1;\n}\n\n.wmqWaOx7XyKADh7Kv4RZ {\n  position: absolute;\n  z-index: 10;\n  bottom: 0;\n  left: 50%;\n  transform: translate(-50%, 100%);\n  max-width: 250px;\n  width: 100%;\n\n  border-radius: 4px;\n  padding: 3px 5px;\n\n  color: white;\n  background-color: var(--error-highlight);\n  font-size: 85%;\n  font-family: sans-serif;\n\n  opacity: 0.9;\n}\n.wmqWaOx7XyKADh7Kv4RZ::before {\n  position: absolute;\n  display: block;\n  content: ' ';\n  z-index: -1;\n\n  left: 50%;\n  width: 10px;\n  height: 10px;\n\n  background-color: var(--error-highlight);\n  transform: translate(-50%, -7px) rotate(45deg);\n}\n","",{version:3,sources:["webpack://./src/Common/editablefield.module.css"],names:[],mappings:"AAAA;EACE,kBAAkB;AACpB;;AAEA;EACE,YAAY;EACZ,eAAe;EACf,YAAY;EACZ,4BAA4B;AAC9B;AACA;EACE,UAAU;AACZ;;AAEA;EACE,kBAAkB;EAClB,WAAW;EACX,SAAS;EACT,SAAS;EACT,gCAAgC;EAChC,gBAAgB;EAChB,WAAW;;EAEX,kBAAkB;EAClB,gBAAgB;;EAEhB,YAAY;EACZ,wCAAwC;EACxC,cAAc;EACd,uBAAuB;;EAEvB,YAAY;AACd;AACA;EACE,kBAAkB;EAClB,cAAc;EACd,YAAY;EACZ,WAAW;;EAEX,SAAS;EACT,WAAW;EACX,YAAY;;EAEZ,wCAAwC;EACxC,8CAA8C;AAChD",sourcesContent:[".container {\n  position: relative;\n}\n\n.edit {\n  padding: 5px;\n  cursor: pointer;\n  opacity: 0.5;\n  color: var(--key-color-base);\n}\n.edit:hover {\n  opacity: 1;\n}\n\n.error {\n  position: absolute;\n  z-index: 10;\n  bottom: 0;\n  left: 50%;\n  transform: translate(-50%, 100%);\n  max-width: 250px;\n  width: 100%;\n\n  border-radius: 4px;\n  padding: 3px 5px;\n\n  color: white;\n  background-color: var(--error-highlight);\n  font-size: 85%;\n  font-family: sans-serif;\n\n  opacity: 0.9;\n}\n.error::before {\n  position: absolute;\n  display: block;\n  content: ' ';\n  z-index: -1;\n\n  left: 50%;\n  width: 10px;\n  height: 10px;\n\n  background-color: var(--error-highlight);\n  transform: translate(-50%, -7px) rotate(45deg);\n}\n"],sourceRoot:""}]),a.locals={container:"ho3CuFFjX1VFNZJiAyVs",edit:"u9J3v5ZrIbuVICzNBkRw",error:"wmqWaOx7XyKADh7Kv4RZ"},n.Z=a},33988:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,".OaJISbD1WCmb03at77EG {\n  position: relative;\n}\n\n.MUN9De8dUvbPGH9cEDoQ {\n  position: absolute;\n  z-index: 10;\n  bottom: 0;\n  left: 50%;\n  transform: translate(-50%, 100%);\n  max-width: 250px;\n  width: 100%;\n\n  border-radius: 4px;\n  padding: 3px 5px;\n\n  color: white;\n  background-color: var(--error-highlight);\n  font-size: 85%;\n  font-family: sans-serif;\n\n  opacity: 0.9;\n}\n.MUN9De8dUvbPGH9cEDoQ::before {\n  position: absolute;\n  display: block;\n  content: ' ';\n  z-index: -1;\n\n  left: 50%;\n  width: 10px;\n  height: 10px;\n\n  background-color: var(--error-highlight);\n  transform: translate(-50%, -7px) rotate(45deg);\n}\n","",{version:3,sources:["webpack://./src/Common/input.module.css"],names:[],mappings:"AAAA;EACE,kBAAkB;AACpB;;AAEA;EACE,kBAAkB;EAClB,WAAW;EACX,SAAS;EACT,SAAS;EACT,gCAAgC;EAChC,gBAAgB;EAChB,WAAW;;EAEX,kBAAkB;EAClB,gBAAgB;;EAEhB,YAAY;EACZ,wCAAwC;EACxC,cAAc;EACd,uBAAuB;;EAEvB,YAAY;AACd;AACA;EACE,kBAAkB;EAClB,cAAc;EACd,YAAY;EACZ,WAAW;;EAEX,SAAS;EACT,WAAW;EACX,YAAY;;EAEZ,wCAAwC;EACxC,8CAA8C;AAChD",sourcesContent:[".wrapper {\n  position: relative;\n}\n\n.error {\n  position: absolute;\n  z-index: 10;\n  bottom: 0;\n  left: 50%;\n  transform: translate(-50%, 100%);\n  max-width: 250px;\n  width: 100%;\n\n  border-radius: 4px;\n  padding: 3px 5px;\n\n  color: white;\n  background-color: var(--error-highlight);\n  font-size: 85%;\n  font-family: sans-serif;\n\n  opacity: 0.9;\n}\n.error::before {\n  position: absolute;\n  display: block;\n  content: ' ';\n  z-index: -1;\n\n  left: 50%;\n  width: 10px;\n  height: 10px;\n\n  background-color: var(--error-highlight);\n  transform: translate(-50%, -7px) rotate(45deg);\n}\n"],sourceRoot:""}]),a.locals={wrapper:"OaJISbD1WCmb03at77EG",error:"MUN9De8dUvbPGH9cEDoQ"},n.Z=a},87617:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,".J2R67AQeCK_aC1DKFCMJ {\n  margin: 4px;\n}","",{version:3,sources:["webpack://./src/Common/link.module.css"],names:[],mappings:"AAAA;EACE,WAAW;AACb",sourcesContent:[".icon {\n  margin: 4px;\n}"],sourceRoot:""}]),a.locals={icon:"J2R67AQeCK_aC1DKFCMJ"},n.Z=a},92127:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,".FMkASzwt_oMscZdObpDQ {\n  display: inline-block;\n  text-align: center;\n}\n.TNF6aRMBPANvZifB27ZK {\n  display: inline-block;\n  animation: GGCs7iiBiwDCnT80cyTh 1s linear infinite;\n}\n\n@keyframes GGCs7iiBiwDCnT80cyTh {\n  from { transform: rotate(0deg); }\n  to { transform: rotate(360deg); }\n}","",{version:3,sources:["webpack://./src/Common/spinner.module.css"],names:[],mappings:"AAAA;EACE,qBAAqB;EACrB,kBAAkB;AACpB;AACA;EACE,qBAAqB;EACrB,kDAAkC;AACpC;;AAEA;EACE,OAAO,uBAAuB,EAAE;EAChC,KAAK,yBAAyB,EAAE;AAClC",sourcesContent:[".spinner {\n  display: inline-block;\n  text-align: center;\n}\n.icon {\n  display: inline-block;\n  animation: spin 1s linear infinite;\n}\n\n@keyframes spin {\n  from { transform: rotate(0deg); }\n  to { transform: rotate(360deg); }\n}"],sourceRoot:""}]),a.locals={spinner:"FMkASzwt_oMscZdObpDQ",icon:"TNF6aRMBPANvZifB27ZK",spin:"GGCs7iiBiwDCnT80cyTh"},n.Z=a},528:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,".sq9i7hQeTeeKuarmO8oA {\n  display: inline-block;\n  font-size: 70%;\n  background: rgba(0, 0, 0, 0.5);\n  color: white;\n  padding: 4px;\n  border-radius: 4px;\n}\n","",{version:3,sources:["webpack://./src/Common/tip.module.css"],names:[],mappings:"AAAA;EACE,qBAAqB;EACrB,cAAc;EACd,8BAA8B;EAC9B,YAAY;EACZ,YAAY;EACZ,kBAAkB;AACpB",sourcesContent:[".tip {\n  display: inline-block;\n  font-size: 70%;\n  background: rgba(0, 0, 0, 0.5);\n  color: white;\n  padding: 4px;\n  border-radius: 4px;\n}\n"],sourceRoot:""}]),a.locals={tip:"sq9i7hQeTeeKuarmO8oA"},n.Z=a},14084:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,".Q5veln3l3laVkuNPs5dQ {\n  position: relative;\n}\n\n.Q5veln3l3laVkuNPs5dQ pre {\n  white-space: pre;\n  background-color: var(--code-bg);\n  color: var(--key-color-base);\n  padding: 10px;\n  max-height: 320px;\n  overflow: scroll;\n}\n\n.dqzgBwJ1Rq0XgMqeAKe7 {\n  position: absolute;\n  top: 15px;\n  right: 15px;\n  padding: 4px 7px;\n  color: var(--key-color-base);\n  background-color: var(--key-bg-base);\n  border: 1px solid var(--key-color-base);\n  border-radius: 3px;\n}\n.dqzgBwJ1Rq0XgMqeAKe7:hover {\n  cursor: pointer;\n  background-color: var(--selection);\n  border: var(--selection);\n  color: white;\n}\n\n.YV2lKA9hbJpP4Vs4udw8 {\n  position: absolute;\n  top: 5px;\n  right: 0px;\n  background-color: var(--selection);\n  color: white;\n  padding: 10px;\n  border-radius: 2px;\n  cursor: none;\n}\n","",{version:3,sources:["webpack://./src/Dialogs/unexpected-error.module.css"],names:[],mappings:"AAAA;EACE,kBAAkB;AACpB;;AAEA;EACE,gBAAgB;EAChB,gCAAgC;EAChC,4BAA4B;EAC5B,aAAa;EACb,iBAAiB;EACjB,gBAAgB;AAClB;;AAEA;EACE,kBAAkB;EAClB,SAAS;EACT,WAAW;EACX,gBAAgB;EAChB,4BAA4B;EAC5B,oCAAoC;EACpC,uCAAuC;EACvC,kBAAkB;AACpB;AACA;EACE,eAAe;EACf,kCAAkC;EAClC,wBAAwB;EACxB,YAAY;AACd;;AAEA;EACE,kBAAkB;EAClB,QAAQ;EACR,UAAU;EACV,kCAAkC;EAClC,YAAY;EACZ,aAAa;EACb,kBAAkB;EAClB,YAAY;AACd",sourcesContent:[".stackTrace {\n  position: relative;\n}\n\n.stackTrace pre {\n  white-space: pre;\n  background-color: var(--code-bg);\n  color: var(--key-color-base);\n  padding: 10px;\n  max-height: 320px;\n  overflow: scroll;\n}\n\n.button {\n  position: absolute;\n  top: 15px;\n  right: 15px;\n  padding: 4px 7px;\n  color: var(--key-color-base);\n  background-color: var(--key-bg-base);\n  border: 1px solid var(--key-color-base);\n  border-radius: 3px;\n}\n.button:hover {\n  cursor: pointer;\n  background-color: var(--selection);\n  border: var(--selection);\n  color: white;\n}\n\n.copyMessage {\n  position: absolute;\n  top: 5px;\n  right: 0px;\n  background-color: var(--selection);\n  color: white;\n  padding: 10px;\n  border-radius: 2px;\n  cursor: none;\n}\n"],sourceRoot:""}]),a.locals={stackTrace:"Q5veln3l3laVkuNPs5dQ",button:"dqzgBwJ1Rq0XgMqeAKe7",copyMessage:"YV2lKA9hbJpP4Vs4udw8"},n.Z=a},14409:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,".xCOOsvxL5qQ3kR8ri91A {\n  box-shadow: 0 4px 10px 0px rgba(0, 0, 0, 0.5);\n}\n\n.u4uW9U2E0DfbUM9vP9pf {\n  text-align: center;\n  padding: 0;\n  margin: 0;\n}\n\n.u4uW9U2E0DfbUM9vP9pf li {\n  display: inline-block;\n  font-family: monospace;\n  font-size: 120%;\n  margin: 4px 2px;\n  padding: 4px 4px;\n  border-radius: 2px;\n  cursor: pointer;\n\n  background-color: rgba(0, 0, 0, .5);\n  opacity: 0.5;\n  color: white;\n}\n\n.u4uW9U2E0DfbUM9vP9pf li.YcHSun3PLo8dCb9qIZtc {\n  opacity: 1;\n  background-color: var(--selection);\n  color: white;\n}\n\n.u4uW9U2E0DfbUM9vP9pf li:hover {\n  opacity: 1;\n  background-color: var(--hover-selection);\n}\n\n.d3hMEDpEkH8H7YLG_NjI {\n  width: 100%;\n  box-sizing: border-box;\n  text-align: center;\n}\n","",{version:3,sources:["webpack://./src/EnhancedPickers/Keycode/styles.module.css"],names:[],mappings:"AAAA;EACE,6CAA6C;AAC/C;;AAEA;EACE,kBAAkB;EAClB,UAAU;EACV,SAAS;AACX;;AAEA;EACE,qBAAqB;EACrB,sBAAsB;EACtB,eAAe;EACf,eAAe;EACf,gBAAgB;EAChB,kBAAkB;EAClB,eAAe;;EAEf,mCAAmC;EACnC,YAAY;EACZ,YAAY;AACd;;AAEA;EACE,UAAU;EACV,kCAAkC;EAClC,YAAY;AACd;;AAEA;EACE,UAAU;EACV,wCAAwC;AAC1C;;AAEA;EACE,WAAW;EACX,sBAAsB;EACtB,kBAAkB;AACpB",sourcesContent:[".previewKeycode {\n  box-shadow: 0 4px 10px 0px rgba(0, 0, 0, 0.5);\n}\n\n.modifiers {\n  text-align: center;\n  padding: 0;\n  margin: 0;\n}\n\n.modifiers li {\n  display: inline-block;\n  font-family: monospace;\n  font-size: 120%;\n  margin: 4px 2px;\n  padding: 4px 4px;\n  border-radius: 2px;\n  cursor: pointer;\n\n  background-color: rgba(0, 0, 0, .5);\n  opacity: 0.5;\n  color: white;\n}\n\n.modifiers li.selected {\n  opacity: 1;\n  background-color: var(--selection);\n  color: white;\n}\n\n.modifiers li:hover {\n  opacity: 1;\n  background-color: var(--hover-selection);\n}\n\n.quickCloseTip {\n  width: 100%;\n  box-sizing: border-box;\n  text-align: center;\n}\n"],sourceRoot:""}]),a.locals={previewKeycode:"xCOOsvxL5qQ3kR8ri91A",modifiers:"u4uW9U2E0DfbUM9vP9pf",selected:"YcHSun3PLo8dCb9qIZtc",quickCloseTip:"d3hMEDpEkH8H7YLG_NjI"},n.Z=a},27470:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,'.S3t60CK1JCROFIrRlm4j [readonly] {\n  cursor: not-allowed;\n  color: gray;\n  outline: gray;\n}\n\ninput.S3t60CK1JCROFIrRlm4j[type="text"],\ninput.S3t60CK1JCROFIrRlm4j[type="number"],\nselect.S3t60CK1JCROFIrRlm4j {\n  width: 100%;\n}\n\nol.MedG7SPG2ge2h7j2yqrJ {\n  list-style-type: none;\n  margin-top: 0;\n  padding: 0;\n}\n.V50Bekt6td9yQOSiDGdx {\n  list-style-type: none;\n  margin: 0;\n  padding: 0;\n}\n.V50Bekt6td9yQOSiDGdx li {\n  display: inline-block;\n  line-height: 2rem;\n}\nol.QNg3v6_eJoK7_qV0_y9n {\n  margin: 0;\n}\nol.QNg3v6_eJoK7_qV0_y9n li {\n  line-height: 2rem;\n}\nol.u65C3Uji7covMUn996dR {\n  list-style-type: none;\n  padding: 0;\n}\n.xp5u4Uo4X2fxxX9KwwXu {\n  cursor: pointer;\n  margin: 2px;\n  padding: 5px;\n  font-family: monospace;\n  border-radius: 1rem;\n  background-color: var(--key-bg-base);\n}\n.xp5u4Uo4X2fxxX9KwwXu:hover {\n  background-color: var(--hover-selection);\n  color: white;\n}\n\n.gpFGP00LCwlGjK6yrGWw {\n  vertical-align: text-bottom;\n  margin: 0 2px;\n}\n.gpFGP00LCwlGjK6yrGWw:hover {\n  color: black;\n}\n\n.gsAzkKxnfzTcp5ApwmWS {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n  list-style-type: none;\n  padding: 0;\n  margin: 0;\n}\n\n/* Copied from MacroEditor :( */\n.KrcWDYfRVRfvRhpsBFxs {\n  visibility: hidden;\n  position: absolute;\n  top: 0px;\n  right: 0px;\n  font-size: 80%;\n\n  color: var(--key-color-hover);\n}\n.KrcWDYfRVRfvRhpsBFxs > * {\n  margin: 2px;\n  opacity: 0.5;\n  cursor: pointer;\n}\n.gsAzkKxnfzTcp5ApwmWS li :hover .KrcWDYfRVRfvRhpsBFxs {\n  visibility: visible;\n  z-index: 10;\n}\n\n.KrcWDYfRVRfvRhpsBFxs :hover {\n  opacity: 1;\n}\n',"",{version:3,sources:["webpack://./src/Keyboard/Behaviors/PropertyValue/styles.module.css"],names:[],mappings:"AAAA;EACE,mBAAmB;EACnB,WAAW;EACX,aAAa;AACf;;AAEA;;;EAGE,WAAW;AACb;;AAEA;EACE,qBAAqB;EACrB,aAAa;EACb,UAAU;AACZ;AACA;EACE,qBAAqB;EACrB,SAAS;EACT,UAAU;AACZ;AACA;EACE,qBAAqB;EACrB,iBAAiB;AACnB;AACA;EACE,SAAS;AACX;AACA;EACE,iBAAiB;AACnB;AACA;EACE,qBAAqB;EACrB,UAAU;AACZ;AACA;EACE,eAAe;EACf,WAAW;EACX,YAAY;EACZ,sBAAsB;EACtB,mBAAmB;EACnB,oCAAoC;AACtC;AACA;EACE,wCAAwC;EACxC,YAAY;AACd;;AAEA;EACE,2BAA2B;EAC3B,aAAa;AACf;AACA;EACE,YAAY;AACd;;AAEA;EACE,aAAa;EACb,eAAe;EACf,SAAS;EACT,qBAAqB;EACrB,UAAU;EACV,SAAS;AACX;;AAEA,+BAA+B;AAC/B;EACE,kBAAkB;EAClB,kBAAkB;EAClB,QAAQ;EACR,UAAU;EACV,cAAc;;EAEd,6BAA6B;AAC/B;AACA;EACE,WAAW;EACX,YAAY;EACZ,eAAe;AACjB;AACA;EACE,mBAAmB;EACnB,WAAW;AACb;;AAEA;EACE,UAAU;AACZ",sourcesContent:['.propertyValue [readonly] {\n  cursor: not-allowed;\n  color: gray;\n  outline: gray;\n}\n\ninput.propertyValue[type="text"],\ninput.propertyValue[type="number"],\nselect.propertyValue {\n  width: 100%;\n}\n\nol.propertyMultiSelect {\n  list-style-type: none;\n  margin-top: 0;\n  padding: 0;\n}\n.propertyMultiSelectChips {\n  list-style-type: none;\n  margin: 0;\n  padding: 0;\n}\n.propertyMultiSelectChips li {\n  display: inline-block;\n  line-height: 2rem;\n}\nol.propertyPhandleSelect {\n  margin: 0;\n}\nol.propertyPhandleSelect li {\n  line-height: 2rem;\n}\nol.propertyPhandleSingleton {\n  list-style-type: none;\n  padding: 0;\n}\n.behaviorBind {\n  cursor: pointer;\n  margin: 2px;\n  padding: 5px;\n  font-family: monospace;\n  border-radius: 1rem;\n  background-color: var(--key-bg-base);\n}\n.behaviorBind:hover {\n  background-color: var(--hover-selection);\n  color: white;\n}\n\n.phandleRemove {\n  vertical-align: text-bottom;\n  margin: 0 2px;\n}\n.phandleRemove:hover {\n  color: black;\n}\n\n.propertyBindingsValue {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n  list-style-type: none;\n  padding: 0;\n  margin: 0;\n}\n\n/* Copied from MacroEditor :( */\n.actions {\n  visibility: hidden;\n  position: absolute;\n  top: 0px;\n  right: 0px;\n  font-size: 80%;\n\n  color: var(--key-color-hover);\n}\n.actions > * {\n  margin: 2px;\n  opacity: 0.5;\n  cursor: pointer;\n}\n.propertyBindingsValue li :hover .actions {\n  visibility: visible;\n  z-index: 10;\n}\n\n.actions :hover {\n  opacity: 1;\n}\n'],sourceRoot:""}]),a.locals={propertyValue:"S3t60CK1JCROFIrRlm4j",propertyMultiSelect:"MedG7SPG2ge2h7j2yqrJ",propertyMultiSelectChips:"V50Bekt6td9yQOSiDGdx",propertyPhandleSelect:"QNg3v6_eJoK7_qV0_y9n",propertyPhandleSingleton:"u65C3Uji7covMUn996dR",behaviorBind:"xp5u4Uo4X2fxxX9KwwXu",phandleRemove:"gpFGP00LCwlGjK6yrGWw",propertyBindingsValue:"gsAzkKxnfzTcp5ApwmWS",actions:"KrcWDYfRVRfvRhpsBFxs"},n.Z=a},34288:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,".kcj881bnLDph62EcKelj {\n  padding-bottom: 60px;\n}\n\n.GeuMxQtBvZYr0nOURDHd {\n  display: flex;\n  width: 190px;\n  flex-direction: column;\n  padding: 10px;\n  gap: 10px;\n  position: fixed;\n}\n\n.NqlHG1MKBiOUUFAed3CM {\n  max-width: 700px;\n  margin: 0 auto;\n  padding-bottom: 60px;\n}\n\n.NqlHG1MKBiOUUFAed3CM table {\n  border-spacing: 0;\n}\n.NqlHG1MKBiOUUFAed3CM table thead {\n  text-align: left;\n}\n\n.NqlHG1MKBiOUUFAed3CM table tbody tr td {\n  padding: 10px;\n  margin: 0;\n}\n.NqlHG1MKBiOUUFAed3CM table tbody tr:nth-child(even) {\n  background-color: var(--key-bg-base);\n}\n\n.Q3_rmo3XiEVg8qfXgKX_ {\n  cursor: pointer;\n  padding: 5px;\n  opacity: 0.6;\n}\n.Q3_rmo3XiEVg8qfXgKX_:hover {\n  opacity: 1;\n}\n\ntable.czOKx_t_EDF44pilzyzA { max-height: 80vh; }\ntable.czOKx_t_EDF44pilzyzA th { text-align: left }\ntable.czOKx_t_EDF44pilzyzA input { font-family: monospace }\ntable.czOKx_t_EDF44pilzyzA td {\n  padding: 4px;\n  vertical-align: top;\n}\ntable.czOKx_t_EDF44pilzyzA .s8rWNi6e8BZ7yQubfDws {\n  font-family: monospace;\n}\n.Bux6GxjreGZZkcXqx6kv {\n  display: block;\n  font-style: italic;\n}\n","",{version:3,sources:["webpack://./src/Keyboard/Behaviors/styles.module.css"],names:[],mappings:"AAAA;EACE,oBAAoB;AACtB;;AAEA;EACE,aAAa;EACb,YAAY;EACZ,sBAAsB;EACtB,aAAa;EACb,SAAS;EACT,eAAe;AACjB;;AAEA;EACE,gBAAgB;EAChB,cAAc;EACd,oBAAoB;AACtB;;AAEA;EACE,iBAAiB;AACnB;AACA;EACE,gBAAgB;AAClB;;AAEA;EACE,aAAa;EACb,SAAS;AACX;AACA;EACE,oCAAoC;AACtC;;AAEA;EACE,eAAe;EACf,YAAY;EACZ,YAAY;AACd;AACA;EACE,UAAU;AACZ;;AAEA,6BAAmB,gBAAgB,EAAE;AACrC,gCAAsB,iBAAiB;AACvC,mCAAyB,uBAAuB;AAChD;EACE,YAAY;EACZ,mBAAmB;AACrB;AACA;EACE,sBAAsB;AACxB;AACA;EACE,cAAc;EACd,kBAAkB;AACpB",sourcesContent:[".main {\n  padding-bottom: 60px;\n}\n\n.sidebar {\n  display: flex;\n  width: 190px;\n  flex-direction: column;\n  padding: 10px;\n  gap: 10px;\n  position: fixed;\n}\n\n.panel {\n  max-width: 700px;\n  margin: 0 auto;\n  padding-bottom: 60px;\n}\n\n.panel table {\n  border-spacing: 0;\n}\n.panel table thead {\n  text-align: left;\n}\n\n.panel table tbody tr td {\n  padding: 10px;\n  margin: 0;\n}\n.panel table tbody tr:nth-child(even) {\n  background-color: var(--key-bg-base);\n}\n\n.action {\n  cursor: pointer;\n  padding: 5px;\n  opacity: 0.6;\n}\n.action:hover {\n  opacity: 1;\n}\n\ntable.editorForm { max-height: 80vh; }\ntable.editorForm th { text-align: left }\ntable.editorForm input { font-family: monospace }\ntable.editorForm td {\n  padding: 4px;\n  vertical-align: top;\n}\ntable.editorForm .propertyName {\n  font-family: monospace;\n}\n.propertyDeprecation {\n  display: block;\n  font-style: italic;\n}\n"],sourceRoot:""}]),a.locals={main:"kcj881bnLDph62EcKelj",sidebar:"GeuMxQtBvZYr0nOURDHd",panel:"NqlHG1MKBiOUUFAed3CM",action:"Q3_rmo3XiEVg8qfXgKX_",editorForm:"czOKx_t_EDF44pilzyzA",propertyName:"s8rWNi6e8BZ7yQubfDws",propertyDeprecation:"Bux6GxjreGZZkcXqx6kv"},n.Z=a},78207:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,'.pwXbGORsYKqyOPBm9_dW {\n  padding-bottom: 60px;\n}\n\n.QgFDXNybKD_XN66M_WpJ {\n  display: flex;\n  width: 190px;\n  flex-direction: column;\n  padding: 10px;\n  gap: 10px;\n  position: fixed;\n}\n\n.Gy0KZGCgOeVminAfggFQ {\n  cursor: pointer;\n  background-color: var(--key-bg-base);\n}\n.Gy0KZGCgOeVminAfggFQ:hover {\n  border: 4px solid var(--selection);\n  box-sizing: border-box;\n}\n\n.Ld9cVdtpS_DpbEifyX9Y {\n  background-color: var(--selection);\n}\n.Ld9cVdtpS_DpbEifyX9Y:hover {\n  background-color: var(--hover-selection);\n}\n\n.mqpJ7uHAMKxvORoOIPFK {\n  max-width: 450px;\n  margin: 0 auto;\n  padding-bottom: 60px;\n}\n\n.BVucwy4AZCyl7GyivzMn {\n  display: flex;\n  justify-content: space-between;\n  border-bottom: 2px solid var(--key-bg-base);\n  margin: 5px 0;\n}\n\n.U6g0njWjBrtb_I3XhAeV {\n  cursor: pointer;\n  padding: 5px;\n  opacity: 0.6;\n}\n.U6g0njWjBrtb_I3XhAeV:hover {\n  opacity: 1;\n}\n\n.CROhsBLtunQ2BbfWdkQw {\n  margin: 10px 0 40px;\n}\n\n.CROhsBLtunQ2BbfWdkQw .MhA4fXXuaZ1iPvv05w4m {\n  display: flex;\n  justify-content: space-evenly;\n  align-items: center;\n}\n\n.CROhsBLtunQ2BbfWdkQw h5 {\n  margin: 0;\n}\n\n.vujYcgQjiN4BGp37FMUH {\n  color: var(--key-color-base);\n}\n\n.uh2yPWyfEOZtgXo2_KtU {\n  color: var(--delete);\n}\n\n.NAB1EN6_pcYIy5Db9XnC {\n  display: none !important;\n}\n.NAB1EN6_pcYIy5Db9XnC:hover {\n  color: white;\n  cursor: pointer;\n}\n.kYn8brsFgEaf61oQyv4d:hover .NAB1EN6_pcYIy5Db9XnC {\n  display: flex !important;\n  position: absolute;\n  right: -48px;\n  transform: scale(0.5);\n}\n\n.NGxnhfSJaJ9FNu3hlBfc.NAB1EN6_pcYIy5Db9XnC,\n.NGxnhfSJaJ9FNu3hlBfc.GXgG_IaQTricqThqzsKe > * {\n  background-color: sandybrown;\n  color: white;\n}\n.NGxnhfSJaJ9FNu3hlBfc.NAB1EN6_pcYIy5Db9XnC {\n  display: flex;\n}\n\n.fljdvcebOv1gbKZpf0vW {\n  margin: 10px 0;\n  display: flex;\n}\n\n.fljdvcebOv1gbKZpf0vW label {\n  display: inline-block;\n  width: 120px;\n  text-align: right;\n  margin-right: 10px;\n}\n\n.bnN6JCit0RcjdQiqzw8w {\n  list-style-type: none;\n  margin: 0;\n  padding: 0;\n}\n.bnN6JCit0RcjdQiqzw8w li {\n  cursor: pointer;\n  display: inline-block;\n  padding: 5px 10px;\n  margin: 5px;\n  border-radius: 30px;\n  background-color: var(--key-bg-base);\n}\n.bnN6JCit0RcjdQiqzw8w li[data-selected="true"] {\n  background-color: var(--selection);\n  color: var(--key-color-hover);\n}\n.bnN6JCit0RcjdQiqzw8w li:hover {\n  background-color: var(--hover-selection);\n  color: var(--key-color-hover);\n}\n\n.NpLEYrC32KQ4rUx9hUFJ {\n  background-color: var(--key-bg-base);\n  border-radius: 30px;\n  color: var(--key-color-base);\n  font-size: 80%;\n  text-align: center;\n  padding: 5px;\n  position: absolute;\n  bottom: -40px;\n  left: 50%;\n  transform: translate(-50%, 0);\n  width: 110%;\n\n  pointer-events: none;\n  transition: opacity ease-in-out .5s;\n}\n\n.l2gtE1XKS63R5TM5unip { position: relative }\n.l2gtE1XKS63R5TM5unip:hover .NpLEYrC32KQ4rUx9hUFJ { opacity: 0.25 }\n',"",{version:3,sources:["webpack://./src/Keyboard/Combos/styles.module.css"],names:[],mappings:"AAAA;EACE,oBAAoB;AACtB;;AAEA;EACE,aAAa;EACb,YAAY;EACZ,sBAAsB;EACtB,aAAa;EACb,SAAS;EACT,eAAe;AACjB;;AAEA;EACE,eAAe;EACf,oCAAoC;AACtC;AACA;EACE,kCAAkC;EAClC,sBAAsB;AACxB;;AAEA;EACE,kCAAkC;AACpC;AACA;EACE,wCAAwC;AAC1C;;AAEA;EACE,gBAAgB;EAChB,cAAc;EACd,oBAAoB;AACtB;;AAEA;EACE,aAAa;EACb,8BAA8B;EAC9B,2CAA2C;EAC3C,aAAa;AACf;;AAEA;EACE,eAAe;EACf,YAAY;EACZ,YAAY;AACd;AACA;EACE,UAAU;AACZ;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,6BAA6B;EAC7B,mBAAmB;AACrB;;AAEA;EACE,SAAS;AACX;;AAEA;EACE,4BAA4B;AAC9B;;AAEA;EACE,oBAAoB;AACtB;;AAEA;EACE,wBAAwB;AAC1B;AACA;EACE,YAAY;EACZ,eAAe;AACjB;AACA;EACE,wBAAwB;EACxB,kBAAkB;EAClB,YAAY;EACZ,qBAAqB;AACvB;;AAEA;;EAEE,4BAA4B;EAC5B,YAAY;AACd;AACA;EACE,aAAa;AACf;;AAEA;EACE,cAAc;EACd,aAAa;AACf;;AAEA;EACE,qBAAqB;EACrB,YAAY;EACZ,iBAAiB;EACjB,kBAAkB;AACpB;;AAEA;EACE,qBAAqB;EACrB,SAAS;EACT,UAAU;AACZ;AACA;EACE,eAAe;EACf,qBAAqB;EACrB,iBAAiB;EACjB,WAAW;EACX,mBAAmB;EACnB,oCAAoC;AACtC;AACA;EACE,kCAAkC;EAClC,6BAA6B;AAC/B;AACA;EACE,wCAAwC;EACxC,6BAA6B;AAC/B;;AAEA;EACE,oCAAoC;EACpC,mBAAmB;EACnB,4BAA4B;EAC5B,cAAc;EACd,kBAAkB;EAClB,YAAY;EACZ,kBAAkB;EAClB,aAAa;EACb,SAAS;EACT,6BAA6B;EAC7B,WAAW;;EAEX,oBAAoB;EACpB,mCAAmC;AACrC;;AAEA,wBAAiB,mBAAmB;AACpC,oDAAwC,cAAc",sourcesContent:['.main {\n  padding-bottom: 60px;\n}\n\n.sidebar {\n  display: flex;\n  width: 190px;\n  flex-direction: column;\n  padding: 10px;\n  gap: 10px;\n  position: fixed;\n}\n\n.selectable {\n  cursor: pointer;\n  background-color: var(--key-bg-base);\n}\n.selectable:hover {\n  border: 4px solid var(--selection);\n  box-sizing: border-box;\n}\n\n.highlight {\n  background-color: var(--selection);\n}\n.highlight:hover {\n  background-color: var(--hover-selection);\n}\n\n.comboPanel {\n  max-width: 450px;\n  margin: 0 auto;\n  padding-bottom: 60px;\n}\n\n.heading {\n  display: flex;\n  justify-content: space-between;\n  border-bottom: 2px solid var(--key-bg-base);\n  margin: 5px 0;\n}\n\n.action {\n  cursor: pointer;\n  padding: 5px;\n  opacity: 0.6;\n}\n.action:hover {\n  opacity: 1;\n}\n\n.combo {\n  margin: 10px 0 40px;\n}\n\n.combo .detail {\n  display: flex;\n  justify-content: space-evenly;\n  align-items: center;\n}\n\n.combo h5 {\n  margin: 0;\n}\n\n.edit {\n  color: var(--key-color-base);\n}\n\n.remove {\n  color: var(--delete);\n}\n\n.addComboInput {\n  display: none !important;\n}\n.addComboInput:hover {\n  color: white;\n  cursor: pointer;\n}\n.comboInputList:hover .addComboInput {\n  display: flex !important;\n  position: absolute;\n  right: -48px;\n  transform: scale(0.5);\n}\n\n.active.addComboInput,\n.active.comboInput > * {\n  background-color: sandybrown;\n  color: white;\n}\n.active.addComboInput {\n  display: flex;\n}\n\n.field {\n  margin: 10px 0;\n  display: flex;\n}\n\n.field label {\n  display: inline-block;\n  width: 120px;\n  text-align: right;\n  margin-right: 10px;\n}\n\n.layerList {\n  list-style-type: none;\n  margin: 0;\n  padding: 0;\n}\n.layerList li {\n  cursor: pointer;\n  display: inline-block;\n  padding: 5px 10px;\n  margin: 5px;\n  border-radius: 30px;\n  background-color: var(--key-bg-base);\n}\n.layerList li[data-selected="true"] {\n  background-color: var(--selection);\n  color: var(--key-color-hover);\n}\n.layerList li:hover {\n  background-color: var(--hover-selection);\n  color: var(--key-color-hover);\n}\n\n.floatingMessage {\n  background-color: var(--key-bg-base);\n  border-radius: 30px;\n  color: var(--key-color-base);\n  font-size: 80%;\n  text-align: center;\n  padding: 5px;\n  position: absolute;\n  bottom: -40px;\n  left: 50%;\n  transform: translate(-50%, 0);\n  width: 110%;\n\n  pointer-events: none;\n  transition: opacity ease-in-out .5s;\n}\n\n.comboInputMap { position: relative }\n.comboInputMap:hover .floatingMessage { opacity: 0.25 }\n'],sourceRoot:""}]),a.locals={main:"pwXbGORsYKqyOPBm9_dW",sidebar:"QgFDXNybKD_XN66M_WpJ",selectable:"Gy0KZGCgOeVminAfggFQ",highlight:"Ld9cVdtpS_DpbEifyX9Y",comboPanel:"mqpJ7uHAMKxvORoOIPFK",heading:"BVucwy4AZCyl7GyivzMn",action:"U6g0njWjBrtb_I3XhAeV",combo:"CROhsBLtunQ2BbfWdkQw",detail:"MhA4fXXuaZ1iPvv05w4m",edit:"vujYcgQjiN4BGp37FMUH",remove:"uh2yPWyfEOZtgXo2_KtU",addComboInput:"NAB1EN6_pcYIy5Db9XnC",comboInputList:"kYn8brsFgEaf61oQyv4d",active:"NGxnhfSJaJ9FNu3hlBfc",comboInput:"GXgG_IaQTricqThqzsKe",field:"fljdvcebOv1gbKZpf0vW",layerList:"bnN6JCit0RcjdQiqzw8w",floatingMessage:"NpLEYrC32KQ4rUx9hUFJ",comboInputMap:"l2gtE1XKS63R5TM5unip"},n.Z=a},56520:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,".eEWh1kMxq0qwtAjWodL_ {\n  width: 100%;\n  height: 100%;\n  margin: 0;\n  padding: 0;\n}\n\n.eEWh1kMxq0qwtAjWodL_.Me2iewShkkUWEmhCKAJV {\n  cursor: crosshair;\n}\n\n.wou_rpm0nvB8wxB153cE {\n  position: absolute;\n  background-color: rgba(150, 255, 150, 0.1);\n  border: 3px dotted rgba(150, 255, 150, 0.7);\n  pointer-events: none;\n  box-sizing: border-box;\n}\n\n.wou_rpm0nvB8wxB153cE.fM8xQCv4KykkW5ssxgEg {\n  background-color: rgba(120, 120, 120, 0.1);\n  border-color: rgba(120, 120, 120, 0.25);\n}\n","",{version:3,sources:["webpack://./src/Keyboard/Common/dragSelector.module.css"],names:[],mappings:"AAAA;EACE,WAAW;EACX,YAAY;EACZ,SAAS;EACT,UAAU;AACZ;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,kBAAkB;EAClB,0CAA0C;EAC1C,2CAA2C;EAC3C,oBAAoB;EACpB,sBAAsB;AACxB;;AAEA;EACE,0CAA0C;EAC1C,uCAAuC;AACzC",sourcesContent:[".container {\n  width: 100%;\n  height: 100%;\n  margin: 0;\n  padding: 0;\n}\n\n.container.selecting {\n  cursor: crosshair;\n}\n\n.overlay {\n  position: absolute;\n  background-color: rgba(150, 255, 150, 0.1);\n  border: 3px dotted rgba(150, 255, 150, 0.7);\n  pointer-events: none;\n  box-sizing: border-box;\n}\n\n.overlay.negate {\n  background-color: rgba(120, 120, 120, 0.1);\n  border-color: rgba(120, 120, 120, 0.25);\n}\n"],sourceRoot:""}]),a.locals={container:"eEWh1kMxq0qwtAjWodL_",selecting:"Me2iewShkkUWEmhCKAJV",overlay:"wou_rpm0nvB8wxB153cE",negate:"fM8xQCv4KykkW5ssxgEg"},n.Z=a},49040:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,".lD5TsvdIbEAHNdmhfnlb {\n  background-color: var(--key-bg-base);\n}\n.yk89E4zK9zlO69OXhKn5:hover {\n  cursor: pointer;\n  border: 4px solid var(--selection);\n  box-sizing: border-box;\n}\n\n.pzTvsxKjpy6MqcFhxh9j {\n  background-color: var(--selection);\n}\n.pzTvsxKjpy6MqcFhxh9j:hover {\n  background-color: var(--hover-selection);\n}\n\n.r_Sdklnj57CE2ZjnBDw6 {\n  background-color: var(--hover-selection);\n  filter: brightness(135%);\n}\n\n.Ich9T1nSzHs1a84insfp {\n  background-color: var(--hover-selection);\n  filter: brightness(75%);\n}\n\n._3U1zi1J1sXT41AzpAA1j {\n  position: absolute;\n  bottom: 0;\n  right: 50%;\n  transform: translate(50%, 100%);\n}\n","",{version:3,sources:["webpack://./src/Keyboard/Common/keyPositionSelectorStyles.module.css"],names:[],mappings:"AAAA;EACE,oCAAoC;AACtC;AACA;EACE,eAAe;EACf,kCAAkC;EAClC,sBAAsB;AACxB;;AAEA;EACE,kCAAkC;AACpC;AACA;EACE,wCAAwC;AAC1C;;AAEA;EACE,wCAAwC;EACxC,wBAAwB;AAC1B;;AAEA;EACE,wCAAwC;EACxC,uBAAuB;AACzB;;AAEA;EACE,kBAAkB;EAClB,SAAS;EACT,UAAU;EACV,+BAA+B;AACjC",sourcesContent:[".key {\n  background-color: var(--key-bg-base);\n}\n.selectable:hover {\n  cursor: pointer;\n  border: 4px solid var(--selection);\n  box-sizing: border-box;\n}\n\n.highlight {\n  background-color: var(--selection);\n}\n.highlight:hover {\n  background-color: var(--hover-selection);\n}\n\n.previewAdd {\n  background-color: var(--hover-selection);\n  filter: brightness(135%);\n}\n\n.previewRemove {\n  background-color: var(--hover-selection);\n  filter: brightness(75%);\n}\n\n.tip {\n  position: absolute;\n  bottom: 0;\n  right: 50%;\n  transform: translate(50%, 100%);\n}\n"],sourceRoot:""}]),a.locals={key:"lD5TsvdIbEAHNdmhfnlb",selectable:"yk89E4zK9zlO69OXhKn5",highlight:"pzTvsxKjpy6MqcFhxh9j",previewAdd:"r_Sdklnj57CE2ZjnBDw6",previewRemove:"Ich9T1nSzHs1a84insfp",tip:"_3U1zi1J1sXT41AzpAA1j"},n.Z=a},2:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,'.CoLZlKR1WcMrFd9XhDMC {\n\tposition: relative;\n\tdisplay: flex;\n\tjustify-content: center;\n\talign-items: center;\n\n\tfont-family: Quicksand, avenir, sans-serif;\n\n\t/* TODO: remove this once I have a wrapper with size defaults */\n\twidth: 65px;\n\theight: 65px;\n\n\tfont-size: 110%;\n\tborder-radius: 5px;\n}\n\n.CoLZlKR1WcMrFd9XhDMC.CT4uGhwl8sY0LwT3p39g:not(:hover) .UNzQquWsoIanOpIN0Q9L {\n\ttext-decoration: underline wavy var(--error-highlight);\n\ttext-underline-offset: 4px;\n\tcolor: var(--error-highlight);\n\tfont-weight: bold;\n}\n\n.Y5EVt8b0BaXNd9uLxhfh {\n\tposition: absolute;\n\tleft: 2px;\n\tbottom: 2px;\n\tfont-size: 80%;\n\n\tanimation: sYr3l9y03JxO_2AP73jr ease-in-out 1s alternate-reverse;\n}\n.Y5EVt8b0BaXNd9uLxhfh.CT4uGhwl8sY0LwT3p39g:hover {\n\tcolor: rgb(255, 225, 0);\n}\n\n@keyframes sYr3l9y03JxO_2AP73jr {\n\t0% { color: var(--key-color-base) }\n\t100% { color: var(--key-color-extreme) }\n}\n\n\n.CoLZlKR1WcMrFd9XhDMC.CT4uGhwl8sY0LwT3p39g:hover .DejZXCvvhJILPbs9Q8ht,\n.CoLZlKR1WcMrFd9XhDMC.CT4uGhwl8sY0LwT3p39g:hover .GliE4Ybwli9X6TNTjD1_ {\n\tborder-bottom-left-radius: 0;\n\tborder-bottom-right-radius: 0;\n\ttext-decoration: underline dotted white 2px;\n\ttext-underline-offset: 4px;\n}\n\n\n.huQDP3GbTLThbVIP8wFp {\n\tcolor: var(--key-color-base);\n\tbackground-color: var(--key-bg-base);\n}\n\n.PpMmKpJfEi37Ldw7AeBT {\n\tborder-radius: 100%;\n\tbackground-color: var(--key-bg-base);\n\tcolor: var(--key-color-base);\n}\n\n.k2EIh8YlFvp9sBuklSxx {\n\tposition: absolute;\n\ttop: 0;\n\tleft: 50%;\n\ttransform: translateX(-50%);\n\tfont-size: 50%;\n}\n\n.CT4uGhwl8sY0LwT3p39g:hover, .PpMmKpJfEi37Ldw7AeBT.CT4uGhwl8sY0LwT3p39g:hover {\n\tbackground-color: var(--hover-selection);\n\ttransition: 200ms;\n\tz-index: 1;\n}\n.CoLZlKR1WcMrFd9XhDMC.CT4uGhwl8sY0LwT3p39g:hover .DejZXCvvhJILPbs9Q8ht, .CoLZlKR1WcMrFd9XhDMC.CT4uGhwl8sY0LwT3p39g:hover .GliE4Ybwli9X6TNTjD1_ {\n\tcolor: var(--key-color-hover);\n}\n.CoLZlKR1WcMrFd9XhDMC > .DejZXCvvhJILPbs9Q8ht {\n\tpadding: 5px;\n}\n\n[data-simple="true"] { font-size: 140%; }\n[data-long="true"] { font-size: 60%; }\n\n.ApHDJFJGYUaGTgzMeIKZ:not([data-is-root="true"])::before { content: \'(\'; opacity: 0.4; font-weight: bold; margin: 2px; }\n.ApHDJFJGYUaGTgzMeIKZ:not([data-is-root="true"])::after { content: \')\'; opacity: 0.4; font-weight: bold; margin: 2px; }\n.ApHDJFJGYUaGTgzMeIKZ:not([data-is-root="true"]) .mLz637Atn0jZXey6Rx4v:not(:last-child)::after { content: \',\'; }\n\n.DejZXCvvhJILPbs9Q8ht {\n\tcursor: default;\n\tpadding: 0px 4px;\n\tmargin-left: -2px;\n\tmargin-right: -2px;\n}\n\n.CT4uGhwl8sY0LwT3p39g .DejZXCvvhJILPbs9Q8ht {\n\tcursor: pointer;\n\tdisplay: inline-block;\n\tbox-sizing: content-box;\n\tmin-width: 0.5em;\n\ttext-align: center;\n\tborder-radius: 4px;\n}\n.CT4uGhwl8sY0LwT3p39g .DejZXCvvhJILPbs9Q8ht:hover {\n\tbackground-color: white !important;\n\tcolor: var(--hover-selection) !important;\n\tborder-radius: 4px !important;\n}\n\n.DejZXCvvhJILPbs9Q8ht * {\n\tpointer-events: none;\n}\n\n.GliE4Ybwli9X6TNTjD1_ {\n  position: absolute;\n  top: 0;\n  left: 0;\n  font-size: 10px;\n  padding: 2px;\n  opacity: 0.65;\n}\n\n.GliE4Ybwli9X6TNTjD1_:hover {\n  cursor: pointer;\n  color: var(--hover-selection) !important;\n  background-color: var(--key-bg-hover);\n  border-radius: 5px 0;\n  opacity: 1;\n}\n',"",{version:3,sources:["webpack://./src/Keyboard/Keys/styles.module.css"],names:[],mappings:"AAAA;CACC,kBAAkB;CAClB,aAAa;CACb,uBAAuB;CACvB,mBAAmB;;CAEnB,0CAA0C;;CAE1C,+DAA+D;CAC/D,WAAW;CACX,YAAY;;CAEZ,eAAe;CACf,kBAAkB;AACnB;;AAEA;CACC,sDAAsD;CACtD,0BAA0B;CAC1B,6BAA6B;CAC7B,iBAAiB;AAClB;;AAEA;CACC,kBAAkB;CAClB,SAAS;CACT,WAAW;CACX,cAAc;;CAEd,gEAAiD;AAClD;AACA;CACC,uBAAuB;AACxB;;AAEA;CACC,KAAK,6BAA6B;CAClC,OAAO,gCAAgC;AACxC;;;AAGA;;CAEC,4BAA4B;CAC5B,6BAA6B;CAC7B,2CAA2C;CAC3C,0BAA0B;AAC3B;;;AAGA;CACC,4BAA4B;CAC5B,oCAAoC;AACrC;;AAEA;CACC,mBAAmB;CACnB,oCAAoC;CACpC,4BAA4B;AAC7B;;AAEA;CACC,kBAAkB;CAClB,MAAM;CACN,SAAS;CACT,2BAA2B;CAC3B,cAAc;AACf;;AAEA;CACC,wCAAwC;CACxC,iBAAiB;CACjB,UAAU;AACX;AACA;CACC,6BAA6B;AAC9B;AACA;CACC,YAAY;AACb;;AAEA,uBAAuB,eAAe,EAAE;AACxC,qBAAqB,cAAc,EAAE;;AAErC,2DAA6C,YAAY,EAAE,YAAY,EAAE,iBAAiB,EAAE,WAAW,EAAE;AACzG,0DAA4C,YAAY,EAAE,YAAY,EAAE,iBAAiB,EAAE,WAAW,EAAE;AACxG,iGAAoE,YAAY,EAAE;;AAElF;CACC,eAAe;CACf,gBAAgB;CAChB,iBAAiB;CACjB,kBAAkB;AACnB;;AAEA;CACC,eAAe;CACf,qBAAqB;CACrB,uBAAuB;CACvB,gBAAgB;CAChB,kBAAkB;CAClB,kBAAkB;AACnB;AACA;CACC,kCAAkC;CAClC,wCAAwC;CACxC,6BAA6B;AAC9B;;AAEA;CACC,oBAAoB;AACrB;;AAEA;EACE,kBAAkB;EAClB,MAAM;EACN,OAAO;EACP,eAAe;EACf,YAAY;EACZ,aAAa;AACf;;AAEA;EACE,eAAe;EACf,wCAAwC;EACxC,qCAAqC;EACrC,oBAAoB;EACpB,UAAU;AACZ",sourcesContent:['.key {\n\tposition: relative;\n\tdisplay: flex;\n\tjustify-content: center;\n\talign-items: center;\n\n\tfont-family: Quicksand, avenir, sans-serif;\n\n\t/* TODO: remove this once I have a wrapper with size defaults */\n\twidth: 65px;\n\theight: 65px;\n\n\tfont-size: 110%;\n\tborder-radius: 5px;\n}\n\n.key.selectable:not(:hover) .missingValue {\n\ttext-decoration: underline wavy var(--error-highlight);\n\ttext-underline-offset: 4px;\n\tcolor: var(--error-highlight);\n\tfont-weight: bold;\n}\n\n.missing {\n\tposition: absolute;\n\tleft: 2px;\n\tbottom: 2px;\n\tfont-size: 80%;\n\n\tanimation: pulse ease-in-out 1s alternate-reverse;\n}\n.missing.selectable:hover {\n\tcolor: rgb(255, 225, 0);\n}\n\n@keyframes pulse {\n\t0% { color: var(--key-color-base) }\n\t100% { color: var(--key-color-extreme) }\n}\n\n\n.key.selectable:hover .code,\n.key.selectable:hover .behaviour-binding {\n\tborder-bottom-left-radius: 0;\n\tborder-bottom-right-radius: 0;\n\ttext-decoration: underline dotted white 2px;\n\ttext-underline-offset: 4px;\n}\n\n\n.keyDefaultTheme {\n\tcolor: var(--key-color-base);\n\tbackground-color: var(--key-bg-base);\n}\n\n.encoder {\n\tborder-radius: 100%;\n\tbackground-color: var(--key-bg-base);\n\tcolor: var(--key-color-base);\n}\n\n.encoderDirection {\n\tposition: absolute;\n\ttop: 0;\n\tleft: 50%;\n\ttransform: translateX(-50%);\n\tfont-size: 50%;\n}\n\n.selectable:hover, .encoder.selectable:hover {\n\tbackground-color: var(--hover-selection);\n\ttransition: 200ms;\n\tz-index: 1;\n}\n.key.selectable:hover .code, .key.selectable:hover .behaviour-binding {\n\tcolor: var(--key-color-hover);\n}\n.key > .code {\n\tpadding: 5px;\n}\n\n[data-simple="true"] { font-size: 140%; }\n[data-long="true"] { font-size: 60%; }\n\n.params:not([data-is-root="true"])::before { content: \'(\'; opacity: 0.4; font-weight: bold; margin: 2px; }\n.params:not([data-is-root="true"])::after { content: \')\'; opacity: 0.4; font-weight: bold; margin: 2px; }\n.params:not([data-is-root="true"]) .param:not(:last-child)::after { content: \',\'; }\n\n.code {\n\tcursor: default;\n\tpadding: 0px 4px;\n\tmargin-left: -2px;\n\tmargin-right: -2px;\n}\n\n.selectable .code {\n\tcursor: pointer;\n\tdisplay: inline-block;\n\tbox-sizing: content-box;\n\tmin-width: 0.5em;\n\ttext-align: center;\n\tborder-radius: 4px;\n}\n.selectable .code:hover {\n\tbackground-color: white !important;\n\tcolor: var(--hover-selection) !important;\n\tborder-radius: 4px !important;\n}\n\n.code * {\n\tpointer-events: none;\n}\n\n.behaviour-binding {\n  position: absolute;\n  top: 0;\n  left: 0;\n  font-size: 10px;\n  padding: 2px;\n  opacity: 0.65;\n}\n\n.behaviour-binding:hover {\n  cursor: pointer;\n  color: var(--hover-selection) !important;\n  background-color: var(--key-bg-hover);\n  border-radius: 5px 0;\n  opacity: 1;\n}\n'],sourceRoot:""}]),a.locals={key:"CoLZlKR1WcMrFd9XhDMC",selectable:"CT4uGhwl8sY0LwT3p39g",missingValue:"UNzQquWsoIanOpIN0Q9L",missing:"Y5EVt8b0BaXNd9uLxhfh",pulse:"sYr3l9y03JxO_2AP73jr",code:"DejZXCvvhJILPbs9Q8ht","behaviour-binding":"GliE4Ybwli9X6TNTjD1_",keyDefaultTheme:"huQDP3GbTLThbVIP8wFp",encoder:"PpMmKpJfEi37Ldw7AeBT",encoderDirection:"k2EIh8YlFvp9sBuklSxx",params:"ApHDJFJGYUaGTgzMeIKZ",param:"mLz637Atn0jZXey6Rx4v"},n.Z=a},50335:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,'.m8ytsfY_MWY9AIiiT3KI {\n  position: absolute;\n  pointer-events: none;\n  z-index: 2;\n}\n.m8ytsfY_MWY9AIiiT3KI > * {\n  pointer-events: all;\n}\n\n.m8ytsfY_MWY9AIiiT3KI ul {\n  display: flex;\n  flex-direction: column;\n  list-style-type: none;\n  gap: 4px;\n  margin: 0;\n  padding: 0;\n}\n.m8ytsfY_MWY9AIiiT3KI li {\n  cursor: pointer;\n  position: relative;\n  background-color: rgba(201, 201, 201, 0.5);\n  color: darkgray;\n  border-radius: 15px;\n  height: 30px;\n  padding: 0px;\n  margin: 0 2px;\n  width: max-content;\n}\n.m8ytsfY_MWY9AIiiT3KI li:hover {\n  background-color: rgba(60, 179, 113, 0.85);\n  color: white;\n  padding-right: 35px;\n}\n.m8ytsfY_MWY9AIiiT3KI li.rzXVahzmmEOXmjXi8olg {\n  background-color: rgb(60, 179, 113);\n  color: white;\n}\n\n.m8ytsfY_MWY9AIiiT3KI li * {\n  display: inline-block;\n}\n.m8ytsfY_MWY9AIiiT3KI li .L_GJEqnFbay_ZzM0Yh7B {\n  overflow: auto;\n  width: 30px;\n  height: 30px;\n  line-height: 30px;\n  text-align: center;\n}\n.m8ytsfY_MWY9AIiiT3KI li .fkZZwegREyu_Wk9Pw6s7 {\n  overflow: hidden;\n  width: 0;\n  height: 30px;\n  line-height: 30px;\n  padding: 0;\n  font-variant: small-caps;\n}\n\n.m8ytsfY_MWY9AIiiT3KI ul li:hover .fkZZwegREyu_Wk9Pw6s7,\n.m8ytsfY_MWY9AIiiT3KI[data-renaming="true"] li.rzXVahzmmEOXmjXi8olg .fkZZwegREyu_Wk9Pw6s7 {\n  transition: .15s ease-in;\n  width: auto;\n  padding: 0 0 0 10px;\n}\n\n.m8ytsfY_MWY9AIiiT3KI button {\n  width: 30px;\n  height: 30px;\n  line-height: 30px;\n  padding: 0;\n  text-align: center;\n  border-radius: 15px;\n}\n\n.m8ytsfY_MWY9AIiiT3KI input.fkZZwegREyu_Wk9Pw6s7 {\n  vertical-align: top;\n  width: 100px;\n  border: none;\n  outline: none;\n  background: transparent;\n  color: white;\n}\n\n.m8ytsfY_MWY9AIiiT3KI .NbFgZxnyAF9EIjx8ncPM {\n  cursor: pointer;\n  position: absolute;\n  right: 10px;\n  visibility: hidden;\n\n  height: 30px;\n  line-height: 30px;\n}\n.m8ytsfY_MWY9AIiiT3KI li:hover .NbFgZxnyAF9EIjx8ncPM {\n  visibility: visible;\n}\n\n.m8ytsfY_MWY9AIiiT3KI li.rzXVahzmmEOXmjXi8olg .fkZZwegREyu_Wk9Pw6s7 {\n  cursor: text;\n}\n',"",{version:3,sources:["webpack://./src/Keyboard/Layers/layer-selector.module.css"],names:[],mappings:"AAAA;EACE,kBAAkB;EAClB,oBAAoB;EACpB,UAAU;AACZ;AACA;EACE,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,qBAAqB;EACrB,QAAQ;EACR,SAAS;EACT,UAAU;AACZ;AACA;EACE,eAAe;EACf,kBAAkB;EAClB,0CAA0C;EAC1C,eAAe;EACf,mBAAmB;EACnB,YAAY;EACZ,YAAY;EACZ,aAAa;EACb,kBAAkB;AACpB;AACA;EACE,0CAA0C;EAC1C,YAAY;EACZ,mBAAmB;AACrB;AACA;EACE,mCAAmC;EACnC,YAAY;AACd;;AAEA;EACE,qBAAqB;AACvB;AACA;EACE,cAAc;EACd,WAAW;EACX,YAAY;EACZ,iBAAiB;EACjB,kBAAkB;AACpB;AACA;EACE,gBAAgB;EAChB,QAAQ;EACR,YAAY;EACZ,iBAAiB;EACjB,UAAU;EACV,wBAAwB;AAC1B;;AAEA;;EAEE,wBAAwB;EACxB,WAAW;EACX,mBAAmB;AACrB;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,iBAAiB;EACjB,UAAU;EACV,kBAAkB;EAClB,mBAAmB;AACrB;;AAEA;EACE,mBAAmB;EACnB,YAAY;EACZ,YAAY;EACZ,aAAa;EACb,uBAAuB;EACvB,YAAY;AACd;;AAEA;EACE,eAAe;EACf,kBAAkB;EAClB,WAAW;EACX,kBAAkB;;EAElB,YAAY;EACZ,iBAAiB;AACnB;AACA;EACE,mBAAmB;AACrB;;AAEA;EACE,YAAY;AACd",sourcesContent:['.layerSelector {\n  position: absolute;\n  pointer-events: none;\n  z-index: 2;\n}\n.layerSelector > * {\n  pointer-events: all;\n}\n\n.layerSelector ul {\n  display: flex;\n  flex-direction: column;\n  list-style-type: none;\n  gap: 4px;\n  margin: 0;\n  padding: 0;\n}\n.layerSelector li {\n  cursor: pointer;\n  position: relative;\n  background-color: rgba(201, 201, 201, 0.5);\n  color: darkgray;\n  border-radius: 15px;\n  height: 30px;\n  padding: 0px;\n  margin: 0 2px;\n  width: max-content;\n}\n.layerSelector li:hover {\n  background-color: rgba(60, 179, 113, 0.85);\n  color: white;\n  padding-right: 35px;\n}\n.layerSelector li.active {\n  background-color: rgb(60, 179, 113);\n  color: white;\n}\n\n.layerSelector li * {\n  display: inline-block;\n}\n.layerSelector li .index {\n  overflow: auto;\n  width: 30px;\n  height: 30px;\n  line-height: 30px;\n  text-align: center;\n}\n.layerSelector li .name {\n  overflow: hidden;\n  width: 0;\n  height: 30px;\n  line-height: 30px;\n  padding: 0;\n  font-variant: small-caps;\n}\n\n.layerSelector ul li:hover .name,\n.layerSelector[data-renaming="true"] li.active .name {\n  transition: .15s ease-in;\n  width: auto;\n  padding: 0 0 0 10px;\n}\n\n.layerSelector button {\n  width: 30px;\n  height: 30px;\n  line-height: 30px;\n  padding: 0;\n  text-align: center;\n  border-radius: 15px;\n}\n\n.layerSelector input.name {\n  vertical-align: top;\n  width: 100px;\n  border: none;\n  outline: none;\n  background: transparent;\n  color: white;\n}\n\n.layerSelector .delete {\n  cursor: pointer;\n  position: absolute;\n  right: 10px;\n  visibility: hidden;\n\n  height: 30px;\n  line-height: 30px;\n}\n.layerSelector li:hover .delete {\n  visibility: visible;\n}\n\n.layerSelector li.active .name {\n  cursor: text;\n}\n'],sourceRoot:""}]),a.locals={layerSelector:"m8ytsfY_MWY9AIiiT3KI",active:"rzXVahzmmEOXmjXi8olg",index:"L_GJEqnFbay_ZzM0Yh7B",name:"fkZZwegREyu_Wk9Pw6s7",delete:"NbFgZxnyAF9EIjx8ncPM"},n.Z=a},59500:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,'.EwvVNY6vlf7HwYmXTbzi {\n  margin: 10px 0;\n  display: flex;\n}\n\n.EwvVNY6vlf7HwYmXTbzi label {\n  display: inline-block;\n  width: 120px;\n  text-align: right;\n  margin-right: 10px;\n}\n\n.uhiC_7TzN7eCNbm5C6a8[data-sensor-count="0"] {\n  display: none;\n}\n\n.raNkhxmGTqtKQI9X2gVA:not(.y7y6ypMwmSafQKgt7oBw) {\n  cursor: pointer;\n}\n.raNkhxmGTqtKQI9X2gVA > * {\n  pointer-events: none;\n}\n.raNkhxmGTqtKQI9X2gVA:hover, .y7y6ypMwmSafQKgt7oBw {\n  color: var(--key-color-hover);\n  background-color: var(--selection);\n}\n.raNkhxmGTqtKQI9X2gVA:hover {\n  background-color: var(--hover-selection);\n}\n\n.sahMSNIG_94Hn9tEEZ8q {\n  max-width: 80vw;\n  overflow-x: scroll;\n}',"",{version:3,sources:["webpack://./src/Keyboard/Layers/style.module.css"],names:[],mappings:"AAAA;EACE,cAAc;EACd,aAAa;AACf;;AAEA;EACE,qBAAqB;EACrB,YAAY;EACZ,iBAAiB;EACjB,kBAAkB;AACpB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,eAAe;AACjB;AACA;EACE,oBAAoB;AACtB;AACA;EACE,6BAA6B;EAC7B,kCAAkC;AACpC;AACA;EACE,wCAAwC;AAC1C;;AAEA;EACE,eAAe;EACf,kBAAkB;AACpB",sourcesContent:['.field {\n  margin: 10px 0;\n  display: flex;\n}\n\n.field label {\n  display: inline-block;\n  width: 120px;\n  text-align: right;\n  margin-right: 10px;\n}\n\n.sensors[data-sensor-count="0"] {\n  display: none;\n}\n\n.quickBindKey:not(.quickBindKeyHighlight) {\n  cursor: pointer;\n}\n.quickBindKey > * {\n  pointer-events: none;\n}\n.quickBindKey:hover, .quickBindKeyHighlight {\n  color: var(--key-color-hover);\n  background-color: var(--selection);\n}\n.quickBindKey:hover {\n  background-color: var(--hover-selection);\n}\n\n.quickAssignDialog {\n  max-width: 80vw;\n  overflow-x: scroll;\n}'],sourceRoot:""}]),a.locals={field:"EwvVNY6vlf7HwYmXTbzi",sensors:"uhiC_7TzN7eCNbm5C6a8",quickBindKey:"raNkhxmGTqtKQI9X2gVA",quickBindKeyHighlight:"y7y6ypMwmSafQKgt7oBw",quickAssignDialog:"sahMSNIG_94Hn9tEEZ8q"},n.Z=a},35839:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,'\n.O8SEfqE2Ewc3b7c7mY_N {\n  position:absolute;\n  top: -5px;\n  left: 0px;\n  width: 100%;\n  /* border: 1px solid red; */\n  /* padding: 5px; */\n  /* opacity: 0.5; */\n  display: flex;\n  flex-wrap: wrap;\n}\n\n.s9O56LWZBKHctVZ4a6fa {\n  position: relative;\n  width: 37.5px;\n  height: 65px;\n  margin: 0;\n}\n\n.s9O56LWZBKHctVZ4a6fa[data-is-control="true"] {\n  width: 450px;\n  height: 15px;\n}\n\n.NNwZmurJWlIfvb3BWlNX {\n  position: relative;\n  width: 450px;\n  height: 10px;\n}\n.NNwZmurJWlIfvb3BWlNX.wVYVfDVsCKFNjQcGKIVI::after {\n  content: \'\';\n  display: block;\n  position: absolute;\n  top: 50%;\n  transform: translate(0, -50%);\n  width: 450px;\n  height: 4px;\n  background-color: var(--selection);\n}\n.MDfy6RcGBlm8W_ChRhyP[data-extend="1"] { width: calc(37.5px + 1 * 75px); }\n.MDfy6RcGBlm8W_ChRhyP[data-extend="2"] { width: calc(37.5px + 2 * 75px); }\n.MDfy6RcGBlm8W_ChRhyP[data-extend="3"] { width: calc(37.5px + 3 * 75px); }\n.MDfy6RcGBlm8W_ChRhyP[data-extend="4"] { width: calc(37.5px + 4 * 75px); }\n.MDfy6RcGBlm8W_ChRhyP[data-extend="5"] { width: calc(37.5px + 5 * 75px); }\n\n/* .dropTargetHalf {\n  background-color: blue;\n  opacity: 0.25;\n}\n.dropTargetHalf.secondHalf {\n  background-color: red;\n}\n.dropTargetRow {\n  background-color: purple;\n  opacity: 0.25;\n} */\n\n.wVYVfDVsCKFNjQcGKIVI.s9O56LWZBKHctVZ4a6fa:not(.MDfy6RcGBlm8W_ChRhyP):not([data-is-control="true"])::before,\n.wVYVfDVsCKFNjQcGKIVI.MDfy6RcGBlm8W_ChRhyP:not([data-is-control="true"])::after {\n  content: \'\';\n  display: block;\n  height: 65px;\n  width: 4px;\n  border-radius: 4px;\n  background-color: var(--selection);\n}\n\n.AuFB9WiCynP_oONYhOvq .wVYVfDVsCKFNjQcGKIVI:not([data-drop-mode="row"])::before,\n.AuFB9WiCynP_oONYhOvq .wVYVfDVsCKFNjQcGKIVI:not([data-drop-mode="row"])::after {\n   visibility: hidden;\n }\n\n.s9O56LWZBKHctVZ4a6fa:not(.MDfy6RcGBlm8W_ChRhyP):not([data-is-control="true"])::before {\n  transform: translate(-50%, 0);\n}\n.MDfy6RcGBlm8W_ChRhyP:not([data-is-control="true"])::after {\n  position: absolute;\n  left: 32.5px;\n  transform: translate(50%, 0);\n}\n',"",{version:3,sources:["webpack://./src/Keyboard/Macros/drag-and-drop.module.css"],names:[],mappings:";AACA;EACE,iBAAiB;EACjB,SAAS;EACT,SAAS;EACT,WAAW;EACX,2BAA2B;EAC3B,kBAAkB;EAClB,kBAAkB;EAClB,aAAa;EACb,eAAe;AACjB;;AAEA;EACE,kBAAkB;EAClB,aAAa;EACb,YAAY;EACZ,SAAS;AACX;;AAEA;EACE,YAAY;EACZ,YAAY;AACd;;AAEA;EACE,kBAAkB;EAClB,YAAY;EACZ,YAAY;AACd;AACA;EACE,WAAW;EACX,cAAc;EACd,kBAAkB;EAClB,QAAQ;EACR,6BAA6B;EAC7B,YAAY;EACZ,WAAW;EACX,kCAAkC;AACpC;AACA,yCAA+B,8BAA8B,EAAE;AAC/D,yCAA+B,8BAA8B,EAAE;AAC/D,yCAA+B,8BAA8B,EAAE;AAC/D,yCAA+B,8BAA8B,EAAE;AAC/D,yCAA+B,8BAA8B,EAAE;;AAE/D;;;;;;;;;;GAUG;;AAEH;;EAEE,WAAW;EACX,cAAc;EACd,YAAY;EACZ,UAAU;EACV,kBAAkB;EAClB,kCAAkC;AACpC;;AAEA;;GAEG,kBAAkB;CACpB;;AAED;EACE,6BAA6B;AAC/B;AACA;EACE,kBAAkB;EAClB,YAAY;EACZ,4BAA4B;AAC9B",sourcesContent:['\n.dropTargets {\n  position:absolute;\n  top: -5px;\n  left: 0px;\n  width: 100%;\n  /* border: 1px solid red; */\n  /* padding: 5px; */\n  /* opacity: 0.5; */\n  display: flex;\n  flex-wrap: wrap;\n}\n\n.dropTargetHalf {\n  position: relative;\n  width: 37.5px;\n  height: 65px;\n  margin: 0;\n}\n\n.dropTargetHalf[data-is-control="true"] {\n  width: 450px;\n  height: 15px;\n}\n\n.dropTargetRow {\n  position: relative;\n  width: 450px;\n  height: 10px;\n}\n.dropTargetRow.droppable::after {\n  content: \'\';\n  display: block;\n  position: absolute;\n  top: 50%;\n  transform: translate(0, -50%);\n  width: 450px;\n  height: 4px;\n  background-color: var(--selection);\n}\n.secondHalf[data-extend="1"] { width: calc(37.5px + 1 * 75px); }\n.secondHalf[data-extend="2"] { width: calc(37.5px + 2 * 75px); }\n.secondHalf[data-extend="3"] { width: calc(37.5px + 3 * 75px); }\n.secondHalf[data-extend="4"] { width: calc(37.5px + 4 * 75px); }\n.secondHalf[data-extend="5"] { width: calc(37.5px + 5 * 75px); }\n\n/* .dropTargetHalf {\n  background-color: blue;\n  opacity: 0.25;\n}\n.dropTargetHalf.secondHalf {\n  background-color: red;\n}\n.dropTargetRow {\n  background-color: purple;\n  opacity: 0.25;\n} */\n\n.droppable.dropTargetHalf:not(.secondHalf):not([data-is-control="true"])::before,\n.droppable.secondHalf:not([data-is-control="true"])::after {\n  content: \'\';\n  display: block;\n  height: 65px;\n  width: 4px;\n  border-radius: 4px;\n  background-color: var(--selection);\n}\n\n.dropRowOnly .droppable:not([data-drop-mode="row"])::before,\n.dropRowOnly .droppable:not([data-drop-mode="row"])::after {\n   visibility: hidden;\n }\n\n.dropTargetHalf:not(.secondHalf):not([data-is-control="true"])::before {\n  transform: translate(-50%, 0);\n}\n.secondHalf:not([data-is-control="true"])::after {\n  position: absolute;\n  left: 32.5px;\n  transform: translate(50%, 0);\n}\n'],sourceRoot:""}]),a.locals={dropTargets:"O8SEfqE2Ewc3b7c7mY_N",dropTargetHalf:"s9O56LWZBKHctVZ4a6fa",dropTargetRow:"NNwZmurJWlIfvb3BWlNX",droppable:"wVYVfDVsCKFNjQcGKIVI",secondHalf:"MDfy6RcGBlm8W_ChRhyP",dropRowOnly:"AuFB9WiCynP_oONYhOvq"},n.Z=a},96201:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,".kc8Au327pmIjKO7auLXT {\n  padding-bottom: 60px;\n}\n\n.B8FpRtVdxbvJjwZoVNB4 {\n  display: flex;\n  position: fixed;\n  width: 180px;\n  flex-direction: column;\n  padding: 10px;\n  gap: 10px;\n}\n\n.Us3Ihf0AoVbZvDulP74Q {\n  width: 550px;\n  margin: 10px auto 40px;\n}\n.OVI4IkVsVzyk0eIAn9NX {\n  display: flex;\n  position: relative;\n  justify-content: space-between;\n  border-bottom: 2px solid var(--key-bg-base);\n  margin: 5px 0;\n}\n.OVI4IkVsVzyk0eIAn9NX h5 {\n  margin: 0;\n}\n.QNlSO_GSGhRfUFRE_v8E {\n  cursor: pointer;\n  padding: 5px;\n  opacity: 0.6;\n}\n.QNlSO_GSGhRfUFRE_v8E:hover {\n  opacity: 1;\n}\n.DvzBwGDH7HsnnIbqaeHi {\n  color: var(--delete);\n}\n\n.mwhR_W7iqHq803xNBV1H {\n  text-align: center;\n}\n.mwhR_W7iqHq803xNBV1H > * {\n  margin: 5px;\n}\n\n.TBgT7nB7JSSjnTpMQeXp {\n  position: relative;\n  width: 450px;\n  /* border: 1px solid lightgray; */\n  margin: 0 auto;\n  padding: 5px;\n\n  display: flex;\n  flex-wrap: wrap;\n}\n\n.TBgT7nB7JSSjnTpMQeXp > * {\n  margin: 5px;\n  width: 65px;\n  height: 65px;\n}\n\n.YMJbsLvnEGObUy4Y_i6w {\n  width: 100%;\n  height: 30px;\n  box-sizing: border-box;\n}\n.YMJbsLvnEGObUy4Y_i6w:hover {\n  background-color: var(--hover-selection);\n  color: var(--key-color-hover);\n}\n.YMJbsLvnEGObUy4Y_i6w > :first-child {\n  width: 100% !important;\n  height: 100% !important;\n}\n\n.TBgT7nB7JSSjnTpMQeXp [draggable] {\n  cursor: grab;\n}\n\n.I5drc4dA5Kpshp3PPle1 {\n  visibility: hidden;\n  position: absolute;\n  top: 0px;\n  right: 0px;\n  font-size: 80%;\n\n  color: var(--key-color-hover);\n}\n.I5drc4dA5Kpshp3PPle1 > * {\n  margin: 2px;\n  opacity: 0.5;\n  cursor: pointer;\n}\n.TBgT7nB7JSSjnTpMQeXp :hover .I5drc4dA5Kpshp3PPle1 {\n  visibility: visible;\n  z-index: 10;\n}\n\n.I5drc4dA5Kpshp3PPle1 :hover {\n  opacity: 1;\n}\n\n\n.iD9DsKMZZ1dQxr04488w {\n  margin: 10px 0;\n  display: flex;\n}\n\n.iD9DsKMZZ1dQxr04488w label {\n  display: inline-block;\n  width: 120px;\n  text-align: right;\n  margin-right: 10px;\n}\n\n.quGO7XFPrHoYiqu22mwg {\n  font-size: 80%;\n}","",{version:3,sources:["webpack://./src/Keyboard/Macros/styles.module.css"],names:[],mappings:"AAAA;EACE,oBAAoB;AACtB;;AAEA;EACE,aAAa;EACb,eAAe;EACf,YAAY;EACZ,sBAAsB;EACtB,aAAa;EACb,SAAS;AACX;;AAEA;EACE,YAAY;EACZ,sBAAsB;AACxB;AACA;EACE,aAAa;EACb,kBAAkB;EAClB,8BAA8B;EAC9B,2CAA2C;EAC3C,aAAa;AACf;AACA;EACE,SAAS;AACX;AACA;EACE,eAAe;EACf,YAAY;EACZ,YAAY;AACd;AACA;EACE,UAAU;AACZ;AACA;EACE,oBAAoB;AACtB;;AAEA;EACE,kBAAkB;AACpB;AACA;EACE,WAAW;AACb;;AAEA;EACE,kBAAkB;EAClB,YAAY;EACZ,iCAAiC;EACjC,cAAc;EACd,YAAY;;EAEZ,aAAa;EACb,eAAe;AACjB;;AAEA;EACE,WAAW;EACX,WAAW;EACX,YAAY;AACd;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,sBAAsB;AACxB;AACA;EACE,wCAAwC;EACxC,6BAA6B;AAC/B;AACA;EACE,sBAAsB;EACtB,uBAAuB;AACzB;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,kBAAkB;EAClB,kBAAkB;EAClB,QAAQ;EACR,UAAU;EACV,cAAc;;EAEd,6BAA6B;AAC/B;AACA;EACE,WAAW;EACX,YAAY;EACZ,eAAe;AACjB;AACA;EACE,mBAAmB;EACnB,WAAW;AACb;;AAEA;EACE,UAAU;AACZ;;;AAGA;EACE,cAAc;EACd,aAAa;AACf;;AAEA;EACE,qBAAqB;EACrB,YAAY;EACZ,iBAAiB;EACjB,kBAAkB;AACpB;;AAEA;EACE,cAAc;AAChB",sourcesContent:[".main {\n  padding-bottom: 60px;\n}\n\n.sidebar {\n  display: flex;\n  position: fixed;\n  width: 180px;\n  flex-direction: column;\n  padding: 10px;\n  gap: 10px;\n}\n\n.macro {\n  width: 550px;\n  margin: 10px auto 40px;\n}\n.heading {\n  display: flex;\n  position: relative;\n  justify-content: space-between;\n  border-bottom: 2px solid var(--key-bg-base);\n  margin: 5px 0;\n}\n.heading h5 {\n  margin: 0;\n}\n.action {\n  cursor: pointer;\n  padding: 5px;\n  opacity: 0.6;\n}\n.action:hover {\n  opacity: 1;\n}\n.remove {\n  color: var(--delete);\n}\n\n.macroActions {\n  text-align: center;\n}\n.macroActions > * {\n  margin: 5px;\n}\n\n.macroBindings {\n  position: relative;\n  width: 450px;\n  /* border: 1px solid lightgray; */\n  margin: 0 auto;\n  padding: 5px;\n\n  display: flex;\n  flex-wrap: wrap;\n}\n\n.macroBindings > * {\n  margin: 5px;\n  width: 65px;\n  height: 65px;\n}\n\n.controlBinding {\n  width: 100%;\n  height: 30px;\n  box-sizing: border-box;\n}\n.controlBinding:hover {\n  background-color: var(--hover-selection);\n  color: var(--key-color-hover);\n}\n.controlBinding > :first-child {\n  width: 100% !important;\n  height: 100% !important;\n}\n\n.macroBindings [draggable] {\n  cursor: grab;\n}\n\n.actions {\n  visibility: hidden;\n  position: absolute;\n  top: 0px;\n  right: 0px;\n  font-size: 80%;\n\n  color: var(--key-color-hover);\n}\n.actions > * {\n  margin: 2px;\n  opacity: 0.5;\n  cursor: pointer;\n}\n.macroBindings :hover .actions {\n  visibility: visible;\n  z-index: 10;\n}\n\n.actions :hover {\n  opacity: 1;\n}\n\n\n.field {\n  margin: 10px 0;\n  display: flex;\n}\n\n.field label {\n  display: inline-block;\n  width: 120px;\n  text-align: right;\n  margin-right: 10px;\n}\n\n.betaDisclaimer {\n  font-size: 80%;\n}"],sourceRoot:""}]),a.locals={main:"kc8Au327pmIjKO7auLXT",sidebar:"B8FpRtVdxbvJjwZoVNB4",macro:"Us3Ihf0AoVbZvDulP74Q",heading:"OVI4IkVsVzyk0eIAn9NX",action:"QNlSO_GSGhRfUFRE_v8E",remove:"DvzBwGDH7HsnnIbqaeHi",macroActions:"mwhR_W7iqHq803xNBV1H",macroBindings:"TBgT7nB7JSSjnTpMQeXp",controlBinding:"YMJbsLvnEGObUy4Y_i6w",actions:"I5drc4dA5Kpshp3PPle1",field:"iD9DsKMZZ1dQxr04488w",betaDisclaimer:"quGO7XFPrHoYiqu22mwg"},n.Z=a},79577:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,"._Et43RIDBS31WGTsJW6Q {\n  margin: 20px 0 35px;\n}\n._Et43RIDBS31WGTsJW6Q h3 {\n  cursor: pointer;\n}\n._Et43RIDBS31WGTsJW6Q h3:hover {\n  color: royalblue;\n}\n\n.UD9L8GtxRyZNCl6a5dsA {\n  color: var(--key-color-base);\n  opacity: 0.7;\n}\n\n.sah4Bu1xq72L7DDemOzU {\n  padding-left: 16px;\n}\n\n.pSk7y6zU9J8U_IybbhZB .rhqw3NH8NqvbeV0idmJz {\n  transform: rotate(-90deg);\n  transition: 100ms;\n}\n\n.pSk7y6zU9J8U_IybbhZB .sah4Bu1xq72L7DDemOzU {\n  display: none;\n}\n","",{version:3,sources:["webpack://./src/Keyboard/Warnings/styles.module.css"],names:[],mappings:"AAAA;EACE,mBAAmB;AACrB;AACA;EACE,eAAe;AACjB;AACA;EACE,gBAAgB;AAClB;;AAEA;EACE,4BAA4B;EAC5B,YAAY;AACd;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,yBAAyB;EACzB,iBAAiB;AACnB;;AAEA;EACE,aAAa;AACf",sourcesContent:[".warningCategory {\n  margin: 20px 0 35px;\n}\n.warningCategory h3 {\n  cursor: pointer;\n}\n.warningCategory h3:hover {\n  color: royalblue;\n}\n\n.emptyCategory {\n  color: var(--key-color-base);\n  opacity: 0.7;\n}\n\n.warningDetails {\n  padding-left: 16px;\n}\n\n.collapsedCategory .caret {\n  transform: rotate(-90deg);\n  transition: 100ms;\n}\n\n.collapsedCategory .warningDetails {\n  display: none;\n}\n"],sourceRoot:""}]),a.locals={warningCategory:"_Et43RIDBS31WGTsJW6Q",emptyCategory:"UD9L8GtxRyZNCl6a5dsA",warningDetails:"sah4Bu1xq72L7DDemOzU",collapsedCategory:"pSk7y6zU9J8U_IybbhZB",caret:"rhqw3NH8NqvbeV0idmJz"},n.Z=a},87995:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,".D0BH39_6wwiclW8aKuoi {\n  display: inline-flex;\n  list-style-type: none;\n  margin: 0;\n  padding: 0;\n}\n.D0BH39_6wwiclW8aKuoi li {\n  cursor: pointer;\n  padding: 5px;\n  margin: 5px;\n  border-radius: 4px;\n  font-variant: small-caps;\n}\n.D0BH39_6wwiclW8aKuoi li.xwo6V7AWCmy8CDvuTwRg {\n  background-color: var(--selection);\n  color: white;\n  cursor: default;\n}\n\n.nVbskEoaGxWf96qEgtxz {\n  position: absolute;\n}\n.nVbskEoaGxWf96qEgtxz > * {\n  width: 100% !important;\n  height: 100% !important;\n}\n\n.Ae2s0eqIVhebTEcJGc3F {\n  position: relative\n}\n.Ae2s0eqIVhebTEcJGc3F::after {\n  content: 'beta';\n  background-color: red;\n  color: white;\n  font-size: 12px;\n  font-weight: bold;\n  padding: 1px 3px;\n  border-radius: 6px;\n  position: absolute;\n  top: 0;\n  right: 0;\n  transform: translate(60%, -60%) rotate(13deg);\n}\n.xwo6V7AWCmy8CDvuTwRg .Ae2s0eqIVhebTEcJGc3F::after {\n  background-color: white;\n  color: var(--selection);\n  border: 1px solid var(--selection);\n}\n.sQQ0qFjHptJbQ8qvuXGa {\n  color: var(--error-highlight);\n}\n.D0BH39_6wwiclW8aKuoi li.xwo6V7AWCmy8CDvuTwRg.sQQ0qFjHptJbQ8qvuXGa {\n  background-color: var(--error-highlight);\n  color: white;\n}","",{version:3,sources:["webpack://./src/Keyboard/styles.module.css"],names:[],mappings:"AAAA;EACE,oBAAoB;EACpB,qBAAqB;EACrB,SAAS;EACT,UAAU;AACZ;AACA;EACE,eAAe;EACf,YAAY;EACZ,WAAW;EACX,kBAAkB;EAClB,wBAAwB;AAC1B;AACA;EACE,kCAAkC;EAClC,YAAY;EACZ,eAAe;AACjB;;AAEA;EACE,kBAAkB;AACpB;AACA;EACE,sBAAsB;EACtB,uBAAuB;AACzB;;AAEA;EACE;AACF;AACA;EACE,eAAe;EACf,qBAAqB;EACrB,YAAY;EACZ,eAAe;EACf,iBAAiB;EACjB,gBAAgB;EAChB,kBAAkB;EAClB,kBAAkB;EAClB,MAAM;EACN,QAAQ;EACR,6CAA6C;AAC/C;AACA;EACE,uBAAuB;EACvB,uBAAuB;EACvB,kCAAkC;AACpC;AACA;EACE,6BAA6B;AAC/B;AACA;EACE,wCAAwC;EACxC,YAAY;AACd",sourcesContent:[".editorModeTabs {\n  display: inline-flex;\n  list-style-type: none;\n  margin: 0;\n  padding: 0;\n}\n.editorModeTabs li {\n  cursor: pointer;\n  padding: 5px;\n  margin: 5px;\n  border-radius: 4px;\n  font-variant: small-caps;\n}\n.editorModeTabs li.activeEditTab {\n  background-color: var(--selection);\n  color: white;\n  cursor: default;\n}\n\n.placer {\n  position: absolute;\n}\n.placer > * {\n  width: 100% !important;\n  height: 100% !important;\n}\n\n.beta {\n  position: relative\n}\n.beta::after {\n  content: 'beta';\n  background-color: red;\n  color: white;\n  font-size: 12px;\n  font-weight: bold;\n  padding: 1px 3px;\n  border-radius: 6px;\n  position: absolute;\n  top: 0;\n  right: 0;\n  transform: translate(60%, -60%) rotate(13deg);\n}\n.activeEditTab .beta::after {\n  background-color: white;\n  color: var(--selection);\n  border: 1px solid var(--selection);\n}\n.warningTab {\n  color: var(--error-highlight);\n}\n.editorModeTabs li.activeEditTab.warningTab {\n  background-color: var(--error-highlight);\n  color: white;\n}"],sourceRoot:""}]),a.locals={editorModeTabs:"D0BH39_6wwiclW8aKuoi",activeEditTab:"xwo6V7AWCmy8CDvuTwRg",placer:"nVbskEoaGxWf96qEgtxz",beta:"Ae2s0eqIVhebTEcJGc3F",warningTab:"sQQ0qFjHptJbQ8qvuXGa"},n.Z=a},33971:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,".QkewNzGagIbndi3rJpKm {\n  border: none;\n  cursor: pointer;\n  color: white;\n  background: #248;\n  border-radius: 100%;\n  width: 24px;\n  height: 24px;\n  line-height: 24px;\n  text-align: center;\n}\n.QkewNzGagIbndi3rJpKm:hover {\n  background: #48F;\n}","",{version:3,sources:["webpack://./src/Sources/Demo/style.module.css"],names:[],mappings:"AAAA;EACE,YAAY;EACZ,eAAe;EACf,YAAY;EACZ,gBAAgB;EAChB,mBAAmB;EACnB,WAAW;EACX,YAAY;EACZ,iBAAiB;EACjB,kBAAkB;AACpB;AACA;EACE,gBAAgB;AAClB",sourcesContent:[".help {\n  border: none;\n  cursor: pointer;\n  color: white;\n  background: #248;\n  border-radius: 100%;\n  width: 24px;\n  height: 24px;\n  line-height: 24px;\n  text-align: center;\n}\n.help:hover {\n  background: #48F;\n}"],sourceRoot:""}]),a.locals={help:"QkewNzGagIbndi3rJpKm"},n.Z=a},80047:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,".z8z3GXuYqlepCz4tRPZj {\n  cursor: pointer;\n  display: flex;\n  box-sizing: border-box;\n  border: 1px solid hsl(0, 0%, 80%);\n  border-radius: 4px;\n  gap: 5px;\n  height: 38px;\n  padding: 0 8px;\n\n  /* color: hsl(0, 0%, 20%); */\n}\n\n.yyHfal9pM4DzShMl4LAY {\n  display: inline-flex;\n  height: 30px;\n  border-radius: 5px;\n  align-items: center;\n\n  font-size: 70%;\n  padding: 0 4px;\n\n  background-color: royalblue;\n  color: white;\n  text-decoration: none;\n}\n\n.ukdycT4tarWVlV3PC6Rr {\n  display: flex;\n  height: 38px;\n  gap: 4px;\n}\n\n.ukdycT4tarWVlV3PC6Rr button,\n.ukdycT4tarWVlV3PC6Rr .yyHfal9pM4DzShMl4LAY {\n  height: 38px;\n}\n\n.yyHfal9pM4DzShMl4LAY code {\n  font-family: monospace;\n}\n\n.QvI5wo7_u6OeAc12ib0W {\n  width: 30px;\n  height: 30px;\n  line-height: 30px;\n  font-size: 200%;\n  text-align: center;\n}\n\n.eUw5NZqoPPF3BcyYDpJx {\n  /* color: var(--selection); */\n}\n\n.XjY4lN_lY3nSgHcw67bX {\n  /* color: brown; */\n}\n\n.Ap_OwCtp3j1Q29Phpw3V {\n  color: gold;\n  animation: WjBuPfls4V41d2sjbNFU 1s linear alternate infinite;\n}\n\n@keyframes WjBuPfls4V41d2sjbNFU {\n  from { opacity: 0.5; }\n  to { opacity: 1; }\n}\n","",{version:3,sources:["webpack://./src/Sources/Github/styles.module.css"],names:[],mappings:"AAAA;EACE,eAAe;EACf,aAAa;EACb,sBAAsB;EACtB,iCAAiC;EACjC,kBAAkB;EAClB,QAAQ;EACR,YAAY;EACZ,cAAc;;EAEd,4BAA4B;AAC9B;;AAEA;EACE,oBAAoB;EACpB,YAAY;EACZ,kBAAkB;EAClB,mBAAmB;;EAEnB,cAAc;EACd,cAAc;;EAEd,2BAA2B;EAC3B,YAAY;EACZ,qBAAqB;AACvB;;AAEA;EACE,aAAa;EACb,YAAY;EACZ,QAAQ;AACV;;AAEA;;EAEE,YAAY;AACd;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,iBAAiB;EACjB,eAAe;EACf,kBAAkB;AACpB;;AAEA;EACE,6BAA6B;AAC/B;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,WAAW;EACX,4DAA6C;AAC/C;;AAEA;EACE,OAAO,YAAY,EAAE;EACrB,KAAK,UAAU,EAAE;AACnB",sourcesContent:[".compactWrapper {\n  cursor: pointer;\n  display: flex;\n  box-sizing: border-box;\n  border: 1px solid hsl(0, 0%, 80%);\n  border-radius: 4px;\n  gap: 5px;\n  height: 38px;\n  padding: 0 8px;\n\n  /* color: hsl(0, 0%, 20%); */\n}\n\n.buildDetails {\n  display: inline-flex;\n  height: 30px;\n  border-radius: 5px;\n  align-items: center;\n\n  font-size: 70%;\n  padding: 0 4px;\n\n  background-color: royalblue;\n  color: white;\n  text-decoration: none;\n}\n\n.pickerActions {\n  display: flex;\n  height: 38px;\n  gap: 4px;\n}\n\n.pickerActions button,\n.pickerActions .buildDetails {\n  height: 38px;\n}\n\n.buildDetails code {\n  font-family: monospace;\n}\n\n.buildStatus {\n  width: 30px;\n  height: 30px;\n  line-height: 30px;\n  font-size: 200%;\n  text-align: center;\n}\n\n.buildSuccess {\n  /* color: var(--selection); */\n}\n\n.buildFailed {\n  /* color: brown; */\n}\n\n.buildPending {\n  color: gold;\n  animation: pulse 1s linear alternate infinite;\n}\n\n@keyframes pulse {\n  from { opacity: 0.5; }\n  to { opacity: 1; }\n}\n"],sourceRoot:""}]),a.locals={compactWrapper:"z8z3GXuYqlepCz4tRPZj",buildDetails:"yyHfal9pM4DzShMl4LAY",pickerActions:"ukdycT4tarWVlV3PC6Rr",buildStatus:"QvI5wo7_u6OeAc12ib0W",buildSuccess:"eUw5NZqoPPF3BcyYDpJx",buildFailed:"XjY4lN_lY3nSgHcw67bX",buildPending:"Ap_OwCtp3j1Q29Phpw3V",pulse:"WjBuPfls4V41d2sjbNFU"},n.Z=a},47881:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,".sP2kDRoTZElZUTNHq033 {\n  width: 300px;\n\tpadding: 10px;\n\tborder-radius: 4px;\n\tbackground: radial-gradient(\n\t\trgba(var(--bg-rgb), 1) 20%,\n\t\trgba(var(--bg-rgb), .6) 100%\n\t);\n}\n.sP2kDRoTZElZUTNHq033 input {\n\tdisplay: block;\n\twidth: 100%;\n\theight: 30px;\n\tline-height: 30px;\n\n\tfont-size: 120%;\n\tmargin: 0;\n\tpadding: 4px;\n\tborder: none;\n\tborder-radius: 4px;\n  box-sizing: border-box;\n}\nul.inAS9Qunkf3g5K3xz6o6 {\n\tposition: relative;\n\tfont-family: monospace;\n\tlist-style-position: inside;\n\tlist-style-type: none;\n\tmax-height: 300px;\n\toverflow: scroll;\n\tpadding: 4px;\n  margin: 4px 0;\n\tbackground: rgba(0, 0, 0, 0.75);\n\tborder-radius: 4px;\n}\n.inAS9Qunkf3g5K3xz6o6 li {\n\tcursor: pointer;\n\tcolor: white;\n\tpadding: 5px;\n}\n.inAS9Qunkf3g5K3xz6o6 li:hover, .inAS9Qunkf3g5K3xz6o6 li.BL7Cxrn_efblQXY3W1Sw {\n\tbackground: white;\n\tcolor: black;\n}\n.inAS9Qunkf3g5K3xz6o6 li b { color: red; }\n.inAS9Qunkf3g5K3xz6o6 li .uld0XaeoQaQJJwp0LT0X {\n\tfont-style: italic;\n\tfont-size: 90%;\n\tmargin: 0;\n\tcolor: gray;\n}\n\n.pqiZQublKXvmnT_ESDxQ {\n  font-size: 10px;\n}\n\n.pqiZQublKXvmnT_ESDxQ a {\n  color: var(--selection);\n  border-bottom: 1px dotted var(--selection);\n  cursor: pointer;\n}\n\n.ECUs4g2j1rekP4xxgQDr {\n  position: relative;\n}\n.ECUs4g2j1rekP4xxgQDr input {\n  padding: 4px 4px 4px 30px;\n}\n\n.xDUAgQZeBp0TZSOqCwHm {\n  position: absolute;\n\ttop: 50%;\n\tleft: 10px;\n\ttransform: translateY(-50%);\n\tpointer-events: none;\n}\n.eY5zRl49sESLjXmizMEP {\n  position: absolute;\n\ttop: 50%;\n\tright: 10px;\n\ttransform: translateY(-50%);\n\tcursor: pointer;\n}","",{version:3,sources:["webpack://./src/ValuePicker/style.module.css"],names:[],mappings:"AAAA;EACE,YAAY;CACb,aAAa;CACb,kBAAkB;CAClB;;;EAGC;AACF;AACA;CACC,cAAc;CACd,WAAW;CACX,YAAY;CACZ,iBAAiB;;CAEjB,eAAe;CACf,SAAS;CACT,YAAY;CACZ,YAAY;CACZ,kBAAkB;EACjB,sBAAsB;AACxB;AACA;CACC,kBAAkB;CAClB,sBAAsB;CACtB,2BAA2B;CAC3B,qBAAqB;CACrB,iBAAiB;CACjB,gBAAgB;CAChB,YAAY;EACX,aAAa;CACd,+BAA+B;CAC/B,kBAAkB;AACnB;AACA;CACC,eAAe;CACf,YAAY;CACZ,YAAY;AACb;AACA;CACC,iBAAiB;CACjB,YAAY;AACb;AACA,6BAAgB,UAAU,EAAE;AAC5B;CACC,kBAAkB;CAClB,cAAc;CACd,SAAS;CACT,WAAW;AACZ;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,uBAAuB;EACvB,0CAA0C;EAC1C,eAAe;AACjB;;AAEA;EACE,kBAAkB;AACpB;AACA;EACE,yBAAyB;AAC3B;;AAEA;EACE,kBAAkB;CACnB,QAAQ;CACR,UAAU;CACV,2BAA2B;CAC3B,oBAAoB;AACrB;AACA;EACE,kBAAkB;CACnB,QAAQ;CACR,WAAW;CACX,2BAA2B;CAC3B,eAAe;AAChB",sourcesContent:[".dialog {\n  width: 300px;\n\tpadding: 10px;\n\tborder-radius: 4px;\n\tbackground: radial-gradient(\n\t\trgba(var(--bg-rgb), 1) 20%,\n\t\trgba(var(--bg-rgb), .6) 100%\n\t);\n}\n.dialog input {\n\tdisplay: block;\n\twidth: 100%;\n\theight: 30px;\n\tline-height: 30px;\n\n\tfont-size: 120%;\n\tmargin: 0;\n\tpadding: 4px;\n\tborder: none;\n\tborder-radius: 4px;\n  box-sizing: border-box;\n}\nul.results {\n\tposition: relative;\n\tfont-family: monospace;\n\tlist-style-position: inside;\n\tlist-style-type: none;\n\tmax-height: 300px;\n\toverflow: scroll;\n\tpadding: 4px;\n  margin: 4px 0;\n\tbackground: rgba(0, 0, 0, 0.75);\n\tborder-radius: 4px;\n}\n.results li {\n\tcursor: pointer;\n\tcolor: white;\n\tpadding: 5px;\n}\n.results li:hover, .results li.highlighted {\n\tbackground: white;\n\tcolor: black;\n}\n.results li b { color: red; }\n.results li .description {\n\tfont-style: italic;\n\tfont-size: 90%;\n\tmargin: 0;\n\tcolor: gray;\n}\n\n.choices-counter {\n  font-size: 10px;\n}\n\n.choices-counter a {\n  color: var(--selection);\n  border-bottom: 1px dotted var(--selection);\n  cursor: pointer;\n}\n\n.searchWrapper {\n  position: relative;\n}\n.searchWrapper input {\n  padding: 4px 4px 4px 30px;\n}\n\n.searchIcon {\n  position: absolute;\n\ttop: 50%;\n\tleft: 10px;\n\ttransform: translateY(-50%);\n\tpointer-events: none;\n}\n.clearSearchIcon {\n  position: absolute;\n\ttop: 50%;\n\tright: 10px;\n\ttransform: translateY(-50%);\n\tcursor: pointer;\n}"],sourceRoot:""}]),a.locals={dialog:"sP2kDRoTZElZUTNHq033",results:"inAS9Qunkf3g5K3xz6o6",highlighted:"BL7Cxrn_efblQXY3W1Sw",description:"uld0XaeoQaQJJwp0LT0X","choices-counter":"pqiZQublKXvmnT_ESDxQ",searchWrapper:"ECUs4g2j1rekP4xxgQDr",searchIcon:"xDUAgQZeBp0TZSOqCwHm",clearSearchIcon:"eY5zRl49sESLjXmizMEP"},n.Z=a},2746:function(e,n,t){"use strict";var r=t(87537),o=t.n(r),i=t(23645),a=t.n(i)()(o());a.push([e.id,"\n._vWNIXMkemQax9rkCJQh {\n  display: inline-block;\n  position: absolute;\n  z-index: 100;\n  bottom: 5px;\n  left: 5px;\n}\n\n._vWNIXMkemQax9rkCJQh label {\n  font-size: 75%;\n  font-style: italic;\n  display: block;\n  padding: 0 10px;\n}\n\n.qiC2NrujE4ebqmHjzq0_ {\n  display: inline-block;\n  font-size: 110%;\n  font-style: italic;\n  background-color: var(--code-bg);\n  border-radius: 20px;\n  padding: 5px 10px;\n  text-decoration: none;\n\n  color: royalblue;\n}\n.qiC2NrujE4ebqmHjzq0_:hover {\n  background-color: royalblue;\n  color: white;\n}","",{version:3,sources:["webpack://./src/styles.module.css"],names:[],mappings:";AACA;EACE,qBAAqB;EACrB,kBAAkB;EAClB,YAAY;EACZ,WAAW;EACX,SAAS;AACX;;AAEA;EACE,cAAc;EACd,kBAAkB;EAClB,cAAc;EACd,eAAe;AACjB;;AAEA;EACE,qBAAqB;EACrB,eAAe;EACf,kBAAkB;EAClB,gCAAgC;EAChC,mBAAmB;EACnB,iBAAiB;EACjB,qBAAqB;;EAErB,gBAAgB;AAClB;AACA;EACE,2BAA2B;EAC3B,YAAY;AACd",sourcesContent:["\n.wrapper {\n  display: inline-block;\n  position: absolute;\n  z-index: 100;\n  bottom: 5px;\n  left: 5px;\n}\n\n.wrapper label {\n  font-size: 75%;\n  font-style: italic;\n  display: block;\n  padding: 0 10px;\n}\n\n.githubLink {\n  display: inline-block;\n  font-size: 110%;\n  font-style: italic;\n  background-color: var(--code-bg);\n  border-radius: 20px;\n  padding: 5px 10px;\n  text-decoration: none;\n\n  color: royalblue;\n}\n.githubLink:hover {\n  background-color: royalblue;\n  color: white;\n}"],sourceRoot:""}]),a.locals={wrapper:"_vWNIXMkemQax9rkCJQh",githubLink:"qiC2NrujE4ebqmHjzq0_"},n.Z=a},46700:function(e,n,t){var r={"./af":42786,"./af.js":42786,"./ar":30867,"./ar-dz":14130,"./ar-dz.js":14130,"./ar-kw":96135,"./ar-kw.js":96135,"./ar-ly":56440,"./ar-ly.js":56440,"./ar-ma":47702,"./ar-ma.js":47702,"./ar-sa":16040,"./ar-sa.js":16040,"./ar-tn":37100,"./ar-tn.js":37100,"./ar.js":30867,"./az":31083,"./az.js":31083,"./be":9808,"./be.js":9808,"./bg":68338,"./bg.js":68338,"./bm":67438,"./bm.js":67438,"./bn":8905,"./bn-bd":76225,"./bn-bd.js":76225,"./bn.js":8905,"./bo":11560,"./bo.js":11560,"./br":1278,"./br.js":1278,"./bs":80622,"./bs.js":80622,"./ca":2468,"./ca.js":2468,"./cs":5822,"./cs.js":5822,"./cv":50877,"./cv.js":50877,"./cy":47373,"./cy.js":47373,"./da":24780,"./da.js":24780,"./de":59740,"./de-at":60217,"./de-at.js":60217,"./de-ch":60894,"./de-ch.js":60894,"./de.js":59740,"./dv":5300,"./dv.js":5300,"./el":50837,"./el.js":50837,"./en-au":78348,"./en-au.js":78348,"./en-ca":77925,"./en-ca.js":77925,"./en-gb":22243,"./en-gb.js":22243,"./en-ie":46436,"./en-ie.js":46436,"./en-il":47207,"./en-il.js":47207,"./en-in":44175,"./en-in.js":44175,"./en-nz":76319,"./en-nz.js":76319,"./en-sg":31662,"./en-sg.js":31662,"./eo":92915,"./eo.js":92915,"./es":55655,"./es-do":55251,"./es-do.js":55251,"./es-mx":96112,"./es-mx.js":96112,"./es-us":71146,"./es-us.js":71146,"./es.js":55655,"./et":5603,"./et.js":5603,"./eu":77763,"./eu.js":77763,"./fa":76959,"./fa.js":76959,"./fi":11897,"./fi.js":11897,"./fil":42549,"./fil.js":42549,"./fo":94694,"./fo.js":94694,"./fr":94470,"./fr-ca":63049,"./fr-ca.js":63049,"./fr-ch":52330,"./fr-ch.js":52330,"./fr.js":94470,"./fy":5044,"./fy.js":5044,"./ga":29295,"./ga.js":29295,"./gd":2101,"./gd.js":2101,"./gl":38794,"./gl.js":38794,"./gom-deva":27884,"./gom-deva.js":27884,"./gom-latn":23168,"./gom-latn.js":23168,"./gu":95349,"./gu.js":95349,"./he":24206,"./he.js":24206,"./hi":30094,"./hi.js":30094,"./hr":30316,"./hr.js":30316,"./hu":22138,"./hu.js":22138,"./hy-am":11423,"./hy-am.js":11423,"./id":29218,"./id.js":29218,"./is":90135,"./is.js":90135,"./it":90626,"./it-ch":10150,"./it-ch.js":10150,"./it.js":90626,"./ja":39183,"./ja.js":39183,"./jv":24286,"./jv.js":24286,"./ka":12105,"./ka.js":12105,"./kk":47772,"./kk.js":47772,"./km":18758,"./km.js":18758,"./kn":79282,"./kn.js":79282,"./ko":33730,"./ko.js":33730,"./ku":1408,"./ku.js":1408,"./ky":33291,"./ky.js":33291,"./lb":36841,"./lb.js":36841,"./lo":55466,"./lo.js":55466,"./lt":57010,"./lt.js":57010,"./lv":37595,"./lv.js":37595,"./me":39861,"./me.js":39861,"./mi":35493,"./mi.js":35493,"./mk":95966,"./mk.js":95966,"./ml":87341,"./ml.js":87341,"./mn":5115,"./mn.js":5115,"./mr":10370,"./mr.js":10370,"./ms":9847,"./ms-my":41237,"./ms-my.js":41237,"./ms.js":9847,"./mt":72126,"./mt.js":72126,"./my":56165,"./my.js":56165,"./nb":64924,"./nb.js":64924,"./ne":16744,"./ne.js":16744,"./nl":93901,"./nl-be":59814,"./nl-be.js":59814,"./nl.js":93901,"./nn":83877,"./nn.js":83877,"./oc-lnc":92135,"./oc-lnc.js":92135,"./pa-in":15858,"./pa-in.js":15858,"./pl":64495,"./pl.js":64495,"./pt":89520,"./pt-br":57971,"./pt-br.js":57971,"./pt.js":89520,"./ro":96459,"./ro.js":96459,"./ru":21793,"./ru.js":21793,"./sd":40950,"./sd.js":40950,"./se":10490,"./se.js":10490,"./si":90124,"./si.js":90124,"./sk":64249,"./sk.js":64249,"./sl":14985,"./sl.js":14985,"./sq":51104,"./sq.js":51104,"./sr":49131,"./sr-cyrl":79915,"./sr-cyrl.js":79915,"./sr.js":49131,"./ss":95606,"./ss.js":95606,"./sv":98760,"./sv.js":98760,"./sw":91172,"./sw.js":91172,"./ta":27333,"./ta.js":27333,"./te":23110,"./te.js":23110,"./tet":52095,"./tet.js":52095,"./tg":27321,"./tg.js":27321,"./th":9041,"./th.js":9041,"./tk":19005,"./tk.js":19005,"./tl-ph":75768,"./tl-ph.js":75768,"./tlh":89444,"./tlh.js":89444,"./tr":72397,"./tr.js":72397,"./tzl":28254,"./tzl.js":28254,"./tzm":51106,"./tzm-latn":30699,"./tzm-latn.js":30699,"./tzm.js":51106,"./ug-cn":9288,"./ug-cn.js":9288,"./uk":67691,"./uk.js":67691,"./ur":13795,"./ur.js":13795,"./uz":6791,"./uz-latn":60588,"./uz-latn.js":60588,"./uz.js":6791,"./vi":65666,"./vi.js":65666,"./x-pseudo":14378,"./x-pseudo.js":14378,"./yo":75805,"./yo.js":75805,"./zh-cn":83839,"./zh-cn.js":83839,"./zh-hk":55726,"./zh-hk.js":55726,"./zh-mo":99807,"./zh-mo.js":99807,"./zh-tw":74152,"./zh-tw.js":74152};function o(e){var n=i(e);return t(n)}function i(e){if(!t.o(r,e)){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}return r[e]}o.keys=function(){return Object.keys(r)},o.resolve=i,e.exports=o,o.id=46700}},function(e){e.O(0,[712,216],(function(){return 89949,e(e.s=89949)})),e.O()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,