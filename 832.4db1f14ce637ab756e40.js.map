{"version":3,"file":"832.4db1f14ce637ab756e40.js","mappings":"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","sources":["webpack:///./src/Dialogs/LayoutGenerationError.js","webpack:///./src/Sources/Github/ValidationErrors.js","webpack:///./src/Sources/Github/storage.js","webpack:///./src/Sources/Github/store.js","webpack:///./src/Dialogs/SuggestRemoteRepo.js","webpack:///./src/Dialogs/SuggestRepoSelection.js","webpack:///./src/Dialogs/SuggestWrongRepo.js","webpack:///./src/Dialogs/Blocked.js","webpack:///./src/Dialogs/MissingLayout.js","webpack:///./src/Sources/Github/Dialogs/Login.js","webpack:///./src/Sources/Github/Dialogs/Install.js","webpack:///./src/Dialogs/MissingKeymaps.js","webpack:///./src/Sources/Github/GitHubExpandedPicker.js","webpack:///./src/Sources/Github/repository-options.js","webpack:///./src/Sources/Github/Picker.js","webpack:///./node_modules/lodash/isMatch.js"],"sourcesContent":["import PropTypes from 'prop-types'\n\nimport DialogBox from '../Common/DialogBox'\nimport Modal from '../Common/Modal'\nimport { GitHubIssuesLink } from './support'\n\nfunction LayoutGenerationError (props) {\n  const { onDismiss } = props\n\n  return (\n    <Modal>\n      <DialogBox onDismiss={onDismiss}>\n        <h2>Automatic Layout Generation Failed</h2>\n        <p>\n          No accompanying layout was found with your keymap file and the Keymap\n          Editor was unable to generate one automatically for you.\n        </p>\n        <p>\n          Something went wrong with the attempted automatic layout generation\n          for your keyboard and there's no automatic way to recover, but if you\n          want to reach out for assistance maybe we can work together to resolve\n          any technical issues or else craft a manual layout for your keyboard.\n        </p>\n        <p>\n          Share your experience at {GitHubIssuesLink}.\n        </p>\n      </DialogBox>\n    </Modal>\n  )\n}\n\nLayoutGenerationError.propTypes = {\n  onDismiss: PropTypes.func.isRequired\n}\n\nexport default LayoutGenerationError\n","import DialogBox from '../../Common/DialogBox'\nimport Modal from '../../Common/Modal'\n\nfunction fileFromTitle (title) {\n  if (title === 'InfoValidationError') {\n    return 'config/info.json'\n  } else if (title === 'KeymapValidationError') {\n    return 'config/keymap.json'\n  }\n}\n\nconst listStyle = {\n  maxHeight: '300px',\n  overflow: 'auto',\n  padding: '10px',\n  fontFamily: 'monospace',\n  fontSize: '80%',\n  backgroundColor: 'rgb(239, 239, 239, 0.5)'\n}\n\nconst listItemStyle = { margin: '10px' }\n\nexport default function ValidationErrors (props) {\n  const { onDismiss, title, errors } = props\n  const file = fileFromTitle(title)\n\n  return (\n    <Modal>\n      <DialogBox onDismiss={onDismiss}>\n        <h2>{title}</h2>\n        {file && (\n          <p>Errors in the file <code>{file}</code>.</p>\n        )}\n        <ul style={listStyle}>\n          {errors.map((error, i) => (\n            <li key={i} style={listItemStyle}>\n              {error}\n            </li>\n          ))}\n        </ul>\n      </DialogBox>\n    </Modal>\n  )\n}\n","const REPOSITORY = 'selectedGithubRepository'\nconst BRANCH = 'selectedGithubBranch'\nconst KEYBOARD = 'selectedGithubKeyboard'\n\nexport function getPersistedRepository () {\n  try {\n    return JSON.parse(localStorage.getItem(REPOSITORY))\n  } catch {\n    return null\n  }\n}\n\nexport function setPersistedRepository (repository) {\n  localStorage.setItem(REPOSITORY, JSON.stringify(repository))\n}\n\nexport function getPersistedBranch (repoId) {\n  try {\n    return JSON.parse(localStorage.getItem(`${BRANCH}:${repoId}`))\n  } catch {\n    return null\n  }\n}\n\nexport function getPersistedKeyboard (repoId, branch) {\n  try {\n    return JSON.parse(localStorage.getItem(`${KEYBOARD}:${repoId}:${branch}`))\n  } catch {\n    return null\n  }\n}\n\nexport function setPersistedBranch (repoId, branch) {\n  localStorage.setItem(`${BRANCH}:${repoId}`, JSON.stringify(branch))\n}\n\nexport function setPersistedKeyboard (repoId, branch, keyboard) {\n  localStorage.setItem(`${KEYBOARD}:${repoId}:${branch}`, JSON.stringify(keyboard))\n}\n","import { createSlice } from '@reduxjs/toolkit'\nimport find from 'lodash/find'\nimport map from 'lodash/map'\nimport { useMemo, useReducer } from 'react'\n\nimport github from './api'\nimport * as storage from './storage'\n\nconst INITIAL_STATE = {\n  blocked: false,\n  initialized: false,\n  selectedRepoId: null,\n  selectedBranchName: null,\n  selectedKeyboard: null,\n  branches: [],\n  keyboards: [],\n  loading: false,\n  warningFlags: []\n}\n\nexport const pickerSlice = createSlice({\n  name: 'github-picker',\n  initialState: INITIAL_STATE,\n  reducers: {\n    clearSelection (state) {\n      state.warningFlags = []\n      state.loading = false\n    },\n    integrationInitialized (state) {\n      const persistedRepoId = storage.getPersistedRepository()\n      const repositories = github.repositories || []\n      let selectedRepoId\n\n      if (find(repositories, { id: persistedRepoId })) {\n        selectedRepoId = persistedRepoId\n      } else if (repositories.length > 0) {\n        selectedRepoId = repositories[0].id\n      }\n\n      state.initialized = true\n      state.selectedRepoId = selectedRepoId\n    },\n    loadingBranchesList (state) { state.loading = true },\n    loadedBranchesList (state, action) {\n      const { selectedRepoId } = state\n      const { branches } = action.payload\n      const repository = find(github.repositories, { id: selectedRepoId })\n\n      state.branches = branches\n      state.keyboard = null\n      state.keyboards = []\n      state.loading = false\n\n      const available = map(branches, 'name')\n      const defaultBranch = repository.default_branch\n      const previousBranch = storage.getPersistedBranch(selectedRepoId)\n      const onlyBranch = branches.length === 1 ? branches[0].name : null\n\n      for (const branch of [onlyBranch, previousBranch, defaultBranch]) {\n        if (available.includes(branch)) {\n          state.selectedBranchName = branch\n          state.selectedKeyboard = storage.getPersistedKeyboard(selectedRepoId, branch)\n          break\n        }\n      }\n    },\n    loadingKeyboardsList (state) { state.loading = true },\n    loadedKeyboardsList (state, action) {\n      const { selectedRepoId, selectedBranchName } = state\n      const { keyboards, default: defaultKeyboard } = action.payload\n\n      state.keyboards = keyboards\n      state.loading = false\n\n      const previousKeyboard = storage.getPersistedKeyboard(selectedRepoId, selectedBranchName)\n      const onlyKeyboard = keyboards.length === 1 ? keyboards[0] : null\n\n      for (const keyboard of [onlyKeyboard, previousKeyboard, defaultKeyboard]) {\n        if (keyboards.includes(keyboard)) {\n          state.selectedKeyboard = keyboard\n          break\n        }\n      }\n    },\n    selectedRepository (state, action) {\n      state.selectedRepoId = action.payload.repository.id\n      state.selectedBranchName = null\n      state.selectedKeyboard = null\n\n      storage.setPersistedRepository(state.selectedRepoId)\n    },\n    selectedBranch (state, action) {\n      state.selectedBranchName = action.payload.name\n      state.selectedKeyboard = storage.getPersistedKeyboard(\n        state.selectedRepoId,\n        state.selectedBranchName\n      )\n      storage.setPersistedBranch(\n        state.selectedRepoId,\n        state.selectedBranchName\n      )\n    },\n    selectedKeyboard (state, action) {\n      state.selectedKeyboard = action.payload.name\n      storage.setPersistedKeyboard(\n        state.selectedRepoId,\n        state.selectedBranchName,\n        state.selectedKeyboard\n      )\n    },\n    keyboardLoading (state, action) {\n      state.loading = true\n    },\n    keyboardLoadedSuccess (state, action) {\n      const { response: { keymap } } = action.payload\n      state.warningFlags = keymap.warningFlags || []\n      state.loading = false\n    }\n  }\n})\n\nfunction useActionDispatchers (dispatch) {\n  return useMemo(() => (\n    Object.keys(pickerSlice.actions).reduce((actions, action) => {\n      actions[action] = (...args) => dispatch(pickerSlice.actions[action](...args))\n      return actions\n    }, {})\n  ), [dispatch])\n}\n\nexport function usePickerStore () {\n  const [state, dispatch] = useReducer(pickerSlice.reducer, INITIAL_STATE)\n  const dispatchers = useActionDispatchers(dispatch)\n\n  return [state, dispatchers]\n}\n","import PropTypes from 'prop-types'\n\nimport DialogBox from '../Common/DialogBox'\nimport Modal from '../Common/Modal'\n\nfunction SuggestRemoteRepo (props) {\n  const { onDismiss, missingPath } = props\n  return (\n    <Modal>\n      <DialogBox onDismiss={onDismiss}>\n        <h2>Missing keyboard definition?</h2>\n        <p>\n          Hi there! The repository you're trying to load from doesn't have a\n          defined <code>{missingPath}</code>. Right now this application is\n          expecting to look at that directory to discover keyboard definitions\n          for experimental features like automatic layout generation.\n        </p>\n        <p>\n          Is it possible that the keyboard you're trying to edit relies on data\n          from the ZMK or other repositories? Fetching from other repositories is\n          not currently supported.\n        </p>\n        <p>\n          I'm a humble developer and have only worked with configurations for my\n          own handwired builds, so if you feel you're receiving this message in\n          error then please consider opening an issue on this project's GitHub\n          repository to let me know what I can do differently.\n        </p>\n      </DialogBox>\n    </Modal>\n  )\n}\n\nSuggestRemoteRepo.propTypes = {\n  onDismiss: PropTypes.func.isRequired,\n  missingPath: PropTypes.string.isRequired\n}\n\nexport default SuggestRemoteRepo\n","import PropTypes from 'prop-types'\n\nimport Link from '../Common/Link'\nimport DialogBox from '../Common/DialogBox'\nimport Modal from '../Common/Modal'\n\nfunction SuggestRepoSelection ({ installation }) {\n  const url = `https://github.com/settings/installations/${installation.id}`\n\n  return (\n    <Modal>\n      <DialogBox dismissText={null}>\n        <h2>App Disabled</h2>\n        <p>\n          Hello there, your installation of the keymap editor's GitHub app is\n          currently disabled. <em>This is not a ban!</em>\n        </p>\n        <p>\n          When you installed this app for your GitHub account you installed it\n          for <em>all</em> of your repositories, and we need to do a little\n          cleanup as we roll out some new features as it's very likely you will\n          have other repositories unrelated to ZMK keyboard configurations.\n        </p>\n        <h3>How to fix this</h3>\n        <p>\n          If you're still interested in using the keymap editor (and I'd love\n          for you to be able to) please go to your <Link href={url}>installation\n          settings</Link> on GitHub and select only the repositories you want to\n          use with this tool. As soon as that's done you'll be sent back here\n          and ready to go.\n        </p>\n        <p>\n          As always, if you're looking for clarification or further assistance\n          please visit our GitHub repo and open an issue or start a discussion.\n        </p>\n      </DialogBox>\n    </Modal>\n  )\n}\n\nSuggestRepoSelection.propTypes = {\n  installation: PropTypes.shape({\n    id: PropTypes.number.isRequired\n  }).isRequired\n}\n\nexport default SuggestRepoSelection\n","import PropTypes from 'prop-types'\n\nimport DialogBox from '../Common/DialogBox'\nimport Modal from '../Common/Modal'\nimport { GeneralHelpOfferCopy } from './support'\n\nfunction SuggestWrongRepo (props) {\n  const { onDismiss } = props\n\n  return (\n    <Modal>\n      <DialogBox onDismiss={onDismiss}>\n        <h2>Is this a zmk-config repo?</h2>\n        <p>\n          Hi there! The repository you're trying to load from doesn't have a\n          defined <code>config</code> directory. Right now this application is\n          expecting to look at that directory to discover keymaps and other\n          metadata.\n        </p>\n        {GeneralHelpOfferCopy}\n      </DialogBox>\n    </Modal>\n  )\n}\n\nSuggestWrongRepo.propTypes = {\n  onDismiss: PropTypes.func.isRequired,\n  otherRepoOrBranchAvailable: PropTypes.bool\n}\n\nexport default SuggestWrongRepo\n","import DialogBox from '../Common/DialogBox'\nimport Modal from '../Common/Modal'\n\nfunction Blocked () {\n  return (\n    <Modal>\n      <DialogBox dismissText={null}>\n        <h2>GitHub Account Blocked</h2>\n        <p>\n          Hi, your access to this application has been disabled.\n        </p>\n        <p>\n          This could be an innocent mistake. Possibly you've misunderstood the\n          intended purpose of this app, possibly I got carried away with some\n          housekeeping. If you want more information or feel this was done in\n          error, please reach out to <em>nickcoutsos</em> on GitHub or Discord\n          (you can find me on the ZMK server).\n        </p>\n      </DialogBox>\n    </Modal>\n  )\n}\n\nexport default Blocked\n","import PropTypes from 'prop-types'\n\nimport DialogBox from '../Common/DialogBox'\nimport Modal from '../Common/Modal'\nimport { GeneralHelpOfferCopy, KeymapLayoutResources } from './support'\n\nfunction MissingLayout (props) {\n  const { onDismiss } = props\n\n  return (\n    <Modal>\n      <DialogBox onDismiss={onDismiss}>\n        <h2>No Layout Available</h2>\n        <p>\n          Your keymap doesn't have an accompanying layout and we don't know\n          enough about your keyboard to generate one for you automatically.\n        </p>\n        <p>\n          If you meant to include layout data, please make sure that its in the\n          same directory as your keymap,\n          like <code>config/info.json</code> or <code>config/&lt;keyboard&gt;.json</code>.\n        </p>\n        {KeymapLayoutResources}\n        {GeneralHelpOfferCopy}\n      </DialogBox>\n    </Modal>\n  )\n}\n\nMissingLayout.propTypes = {\n  onDismiss: PropTypes.func.isRequired\n}\n\nexport default MissingLayout\n","import DialogBox from '../../../Common/DialogBox'\nimport Modal from '../../../Common/Modal'\nimport IconButton from '../../../Common/IconButton'\nimport github from '../api'\n\nfunction Login () {\n  return (\n    <Modal centerOnly>\n      <DialogBox dismissText={null} style={{ width: '400px' }}>\n        <h2>Authenticate with GitHub</h2>\n        <p>\n          Please log-in to GitHub to continue.\n        </p>\n        <IconButton\n          collection=\"brands\"\n          icon=\"github\"\n          text=\"Login with GitHub\"\n          style={{ display: 'block', margin: '0 auto' }}\n          onClick={() => github.beginLoginFlow()}\n        />\n      </DialogBox>\n    </Modal>\n  )\n}\n\nLogin.propTypes = {}\n\nexport default Login\n","import DialogBox from '../../../Common/DialogBox'\nimport Modal from '../../../Common/Modal'\nimport IconButton from '../../../Common/IconButton'\nimport github from '../api'\n\nfunction Install () {\n  const greeting = github.username\n    ? `Welcome, ${github.username}!`\n    : 'Welcome!'\n\n  return (\n    <Modal centerOnly>\n      <DialogBox dismissText={null}>\n        <h2>{greeting}</h2>\n        <p>\n          To begin import your own keymaps, you'll need to grant the Keymap\n          Editor app access to the relevant GitHub repositories. Please make\n          sure to only select repositories that are set up for ZMK keyboard\n          configurations.\n        </p>\n        <p>\n          This app requires read and write access to the repositories you select\n          in order to write to arbitrary <code>.keymap</code> files. It also\n          receives all build action events for the repository, which generates\n          quite a bit of traffic. Selecting <code>All repositories</code> for\n          the app installation will lead to a suspension.\n        </p>\n        <IconButton\n          collection=\"brands\"\n          icon=\"github\"\n          text=\"Add Repository\"\n          style={{ display: 'block', margin: '0 auto' }}\n          onClick={() => github.beginInstallAppFlow()}\n        />\n      </DialogBox>\n    </Modal>\n  )\n}\n\nInstall.propTypes = {}\n\nexport default Install\n","import PropTypes from 'prop-types'\n\nimport DialogBox from '../Common/DialogBox'\nimport Modal from '../Common/Modal'\nimport { GitHubIssuesLink } from './support'\n\nfunction MissingKeymaps (props) {\n  const { onDismiss } = props\n\n  return (\n    <Modal>\n      <DialogBox onDismiss={onDismiss}>\n        <h2>No Keymap Available</h2>\n        <p>\n          We couldn't find a <code>.keymap</code> file in your <code>config/</code> folder.\n        </p>\n        <p>\n          Please ensure that any keymap(s) you wish to edit are placed in that\n          directory even if an accompanying keyboard definition exists in your\n          under the <code>config/boards/...</code> directory.\n        </p>\n        <p>\n          If you have any questions please feel free to reach out by creating an\n          issue at {GitHubIssuesLink}.\n        </p>\n      </DialogBox>\n    </Modal>\n  )\n}\n\nMissingKeymaps.propTypes = {\n  onDismiss: PropTypes.func.isRequired\n}\n\nexport default MissingKeymaps\n","import find from 'lodash/find'\n\nimport { Control, Select } from '../Controls'\nimport Spinner from '../../Common/Spinner'\n\nimport github from './api'\n\nexport function GithHubExpandedPicker ({ state, actions, choices, selections }) {\n  const { repositories, repositoryChoices, branchChoices, keyboardChoices } = choices\n  const { selectedRepoChoice, selectedBranchChoice, selectedKeyboardChoice } = selections\n  const { branches, keyboards, loading } = state\n\n  function handleSelectRepo ({ id, type }) {\n    if (type === 'installation') {\n      github.manageInstallationRepos(id)\n      return\n    }\n\n    const repository = find(repositories, { id })\n    actions.selectedRepository({ repository })\n  }\n\n  return (\n    <>\n      <Select\n        label=\"Repository\"\n        value={selectedRepoChoice}\n        options={repositoryChoices}\n        onChange={handleSelectRepo}\n        getValue={option => option.id}\n        getOptionValue={option => option.id}\n        getOptionLabel={option => option.full || option.name}\n        formatOptionLabel={(option, { context }) => (\n          <>{context === 'value' ? option.name : option.full || option.name}</>\n        )}\n      />\n\n      {branches.length > 1 && (\n        <Select\n          label=\"Branch\"\n          value={selectedBranchChoice}\n          options={branchChoices}\n          onChange={({ id }) => actions.selectedBranch({ name: id })}\n          getOptionValue={option => option.id}\n          getOptionLabel={option => option.name}\n        />\n      )}\n\n      {keyboards.length > 1 && (\n        <Select\n          label=\"Keyboard\"\n          value={selectedKeyboardChoice}\n          options={keyboardChoices}\n          getOptionValue={option => option.id}\n          getOptionLabel={option => option.name}\n          onChange={({ id }) => actions.selectedKeyboard({ name: id })}\n        />\n      )}\n\n      {loading && (\n        <Control>\n          <Spinner />\n        </Control>\n      )}\n    </>\n  )\n}\n","import find from 'lodash/find'\nimport { useEffect, useMemo } from 'react'\n\nimport github from './api'\n\n// TODO: most of this should probably just be turned into thunks in the reducer\n\nexport function useRepositoryOptions (state, actions) {\n  const {\n    branches,\n    keyboards,\n    selectedRepoId,\n    selectedBranchName,\n    selectedKeyboard\n  } = state\n\n  const repositories = (github.repositories || []).map(repo => ({\n    id: repo.id,\n    name: repo.name,\n    full: repo.full_name\n  }))\n\n  const extras = (github.installations || []).map(installation => ({\n    id: installation.id,\n    type: 'installation',\n    name: `[Manage available repos for ${installation.account.login}...]`\n  }))\n\n  const repositoryChoices = useMemo(() => [...repositories, ...extras], [repositories, extras])\n  const branchChoices = useMemo(() => branches.map(branch => ({ id: branch.name, name: branch.name })), [branches])\n  const keyboardChoices = useMemo(() => keyboards.map(keyboard => ({ id: keyboard, name: keyboard })), [keyboards])\n\n  const selectedRepoChoice = useMemo(() => find(repositories, { id: selectedRepoId }), [repositories, selectedRepoId])\n  const selectedBranchChoice = useMemo(() => find(branchChoices, { id: selectedBranchName }), [branchChoices, selectedBranchName])\n  const selectedKeyboardChoice = useMemo(() => find(keyboardChoices, { id: selectedKeyboard }), [keyboardChoices, selectedKeyboard])\n\n  useEffect(() => {\n    if (!selectedRepoId) {\n      return\n    }\n\n    (async function () {\n      actions.loadingBranchesList()\n\n      const repository = find(github.repositories, { id: selectedRepoId })\n      const branches = await github.fetchRepoBranches(repository)\n\n      actions.loadedBranchesList({ branches })\n    })()\n  }, [selectedRepoId, actions])\n\n  useEffect(() => {\n    if (!selectedRepoId || !selectedBranchName) {\n      return\n    }\n\n    (async function () {\n      actions.loadingKeyboardsList()\n\n      const repository = find(github.repositories, { id: selectedRepoId })\n      const keyboardsList = await github.fetchBranchKeyboards(repository, selectedBranchName)\n\n      actions.loadedKeyboardsList(keyboardsList)\n    })()\n  }, [selectedRepoId, selectedBranchName, actions])\n\n  return [\n    { repositories, repositoryChoices, branchChoices, keyboardChoices },\n    { selectedRepoChoice, selectedBranchChoice, selectedKeyboardChoice }\n  ]\n}\n","import find from 'lodash/find'\nimport isMatch from 'lodash/isMatch'\nimport { useCallback, useEffect } from 'react'\nimport PropTypes from 'prop-types'\n\nimport github from './api'\nimport ValidationErrors from './ValidationErrors'\nimport { usePickerStore } from './store'\n\nimport { Button } from '../Controls'\nimport SuggestRemoteRepo from '../../Dialogs/SuggestRemoteRepo'\nimport SuggestRepoSelection from '../../Dialogs/SuggestRepoSelection'\nimport SuggestWrongRepo from '../../Dialogs/SuggestWrongRepo'\nimport LayoutGenerationError from '../../Dialogs/LayoutGenerationError'\nimport Blocked from '../../Dialogs/Blocked'\nimport MissingLayout from '../../Dialogs/MissingLayout'\n\nimport Login from './Dialogs/Login'\nimport Install from './Dialogs/Install'\nimport Icon from '../../Common/Icon'\nimport MissingKeymaps from '../../Dialogs/MissingKeymaps'\nimport { GithHubExpandedPicker } from './GitHubExpandedPicker'\n// import { GitHutCompactPicker } from './Compact'\n\nimport { useRepositoryOptions } from './repository-options'\n\nconst isMissingConfig = err => isMatch(err, { name: 'MissingRepoFile', path: 'config' })\nconst isMissingKeymaps = err => isMatch(err, { name: 'MissingRepoFile', intent: 'directory-structure' })\nconst isMissingLayout = err => (\n  isMatch(err, { name: 'MissingRepoFile', path: 'config/info.json' }) ||\n  isMatch(err, { name: 'MissingRepoFile', intent: 'metadata' })\n)\nconst isMissingBoard = err => (\n  err?.name === 'MissingRepoFile' &&\n  err?.path.match(/config\\/boards\\/[^/]+\\/[^/]+\\/[^/]+?\\..*$/)\n)\n\nfunction GithubPicker (props) {\n  const [state, actions] = usePickerStore()\n  const [choices, selections] = useRepositoryOptions(state, actions)\n\n  const { initialized, selectedRepoId, selectedBranchName } = state\n  const { selectedKeyboard } = state\n  const { loading } = state\n\n  const { onSelect, onError } = props\n\n  useEffect(() => {\n    const login = () => github.beginLoginFlow()\n    const blocked = () => { actions.clearSelection(); onError({ dialog: Blocked }) }\n    const layoutGenerationError = () => { actions.clearSelection(); onError({ dialog: LayoutGenerationError }) }\n    const repoValidation = error => {\n      let dialog = ValidationErrors\n      if (isMissingConfig(error)) dialog = SuggestWrongRepo\n      if (isMissingBoard(error)) dialog = SuggestRemoteRepo\n      if (isMissingLayout(error)) dialog = MissingLayout\n      if (isMissingKeymaps(error)) dialog = MissingKeymaps\n\n      actions.clearSelection()\n      onError({\n        dialog,\n        dialogProps: {\n          title: error.name,\n          errors: error.errors\n        }\n      })\n    }\n\n    github.init().then(actions.integrationInitialized)\n    github.on('authentication-failed', login)\n    github.on('blocked', blocked)\n    github.on('repo-validation-error', repoValidation)\n    github.on('layout-generation-failed', layoutGenerationError)\n\n    return () => {\n      github.off('authentication-failed', login)\n      github.off('blocked', blocked)\n      github.off('repo-validation-error', repoValidation)\n      github.off('layout-generation-failed', layoutGenerationError)\n    }\n  }, [actions, onError])\n\n  const loadKeyboard = useCallback(async function (repoId, branch, keyboard) {\n    const available = github.repositories\n    const repository = find(available, { id: repoId })?.full_name\n\n    actions.keyboardLoading()\n\n    const response = await github.fetchLayoutAndKeymap(repository, branch, {\n      keyboard\n    })\n\n    actions.keyboardLoadedSuccess({ response })\n\n    onSelect({ github: { repository, branch, keyboard }, ...response })\n  }, [actions, onSelect])\n\n  const reloadKeyboard = useCallback(() => (\n    loadKeyboard(selectedRepoId, selectedBranchName, selectedKeyboard)\n  ), [loadKeyboard, selectedRepoId, selectedBranchName, selectedKeyboard])\n\n  useEffect(() => {\n    if (!selectedRepoId || !selectedBranchName) {\n      return\n    }\n\n    loadKeyboard(selectedRepoId, selectedBranchName, selectedKeyboard)\n  }, [selectedRepoId, selectedBranchName, selectedKeyboard, loadKeyboard])\n\n  if (!initialized) return null\n  if (state.blocked) return <Blocked />\n  if (!github.isGitHubAuthorized()) return <Login />\n  if (!github.isAppInstalled()) return <Install />\n  if (github.isAppSuspendedForRepoSelection()) {\n    return <SuggestRepoSelection installation={github.installations[0]} />\n  }\n\n  return (\n    <>\n      <GithHubExpandedPicker state={state} actions={actions} choices={choices} selections={selections} />\n      {selectedBranchName && !loading && (\n        <Button onClick={reloadKeyboard}>\n          <Icon name=\"sync\" />\n        </Button>\n      )}\n    </>\n  )\n}\n\nGithubPicker.propTypes = {\n  expanded: PropTypes.bool.isRequired,\n  onExpand: PropTypes.func.isRequired,\n  onError: PropTypes.func.isRequired,\n  onSelect: PropTypes.func.isRequired\n}\n\nexport default GithubPicker\n","var baseIsMatch = require('./_baseIsMatch'),\n    getMatchData = require('./_getMatchData');\n\n/**\n * Performs a partial deep comparison between `object` and `source` to\n * determine if `object` contains equivalent property values.\n *\n * **Note:** This method is equivalent to `_.matches` when `source` is\n * partially applied.\n *\n * Partial comparisons will match empty array and empty object `source`\n * values against any array or object value, respectively. See `_.isEqual`\n * for a list of supported value comparisons.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {Object} object The object to inspect.\n * @param {Object} source The object of property values to match.\n * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n * @example\n *\n * var object = { 'a': 1, 'b': 2 };\n *\n * _.isMatch(object, { 'b': 2 });\n * // => true\n *\n * _.isMatch(object, { 'b': 1 });\n * // => false\n */\nfunction isMatch(object, source) {\n  return object === source || baseIsMatch(object, source, getMatchData(source));\n}\n\nmodule.exports = isMatch;\n"],"names":["LayoutGenerationError","props","onDismiss","GitHubIssuesLink","propTypes","PropTypes","listStyle","maxHeight","overflow","padding","fontFamily","fontSize","backgroundColor","listItemStyle","margin","ValidationErrors","title","errors","file","fileFromTitle","Modal","DialogBox","style","map","error","i","REPOSITORY","BRANCH","KEYBOARD","getPersistedKeyboard","repoId","branch","JSON","parse","localStorage","getItem","INITIAL_STATE","blocked","initialized","selectedRepoId","selectedBranchName","selectedKeyboard","branches","keyboards","loading","warningFlags","pickerSlice","createSlice","name","initialState","reducers","clearSelection","state","integrationInitialized","persistedRepoId","storage","repositories","github","find","id","length","loadingBranchesList","loadedBranchesList","action","payload","repository","keyboard","available","defaultBranch","default_branch","previousBranch","includes","loadingKeyboardsList","loadedKeyboardsList","defaultKeyboard","default","previousKeyboard","selectedRepository","setItem","stringify","selectedBranch","keyboardLoading","keyboardLoadedSuccess","keymap","response","usePickerStore","dispatch","useReducer","reducer","dispatchers","useMemo","Object","keys","actions","reduce","SuggestRemoteRepo","missingPath","SuggestRepoSelection","installation","url","dismissText","Link","href","isRequired","SuggestWrongRepo","GeneralHelpOfferCopy","otherRepoOrBranchAvailable","MissingLayout","KeymapLayoutResources","Login","centerOnly","width","IconButton","collection","icon","text","display","onClick","Install","greeting","MissingKeymaps","GithHubExpandedPicker","choices","selections","repositoryChoices","branchChoices","keyboardChoices","selectedRepoChoice","selectedBranchChoice","selectedKeyboardChoice","label","value","options","onChange","type","getValue","option","getOptionValue","getOptionLabel","full","formatOptionLabel","context","Spinner","isMissingConfig","err","isMatch","path","isMissingKeymaps","intent","isMissingLayout","isMissingBoard","match","GithubPicker","repo","full_name","extras","account","login","useEffect","keyboardsList","useRepositoryOptions","onSelect","onError","dialog","Blocked","layoutGenerationError","repoValidation","dialogProps","then","loadKeyboard","useCallback","reloadKeyboard","Icon","expanded","onExpand","baseIsMatch","getMatchData","module","exports","object","source"],"sourceRoot":""}